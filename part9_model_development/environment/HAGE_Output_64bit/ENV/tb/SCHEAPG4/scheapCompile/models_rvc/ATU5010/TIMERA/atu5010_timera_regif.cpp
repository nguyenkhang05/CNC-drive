// -----------------------------------------------------------------------------
// $Id: atu5010_timera_regif.cpp,v 1.0 2016/11/24 10:15:45 binhnguyen Exp $
//
// Copyright(c) 2016 Renesas Electronics Corporation
// Copyright(c) 2016 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : input/atu5010_timera_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5010_TIMERA
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name        reg_name    wsize       rsize       length  offset  factor_start    factor_end  factor_index    factor_step     access  init    support     callback
//     %%REG    -      TCR1A       TCR1A       8           8|16|32      8      0x00    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2A       TCR2A       8|16        8|16|32     16      0x02    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR3A       TCR3A       8|16        8|16|32     16      0x04    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR4A       TCR4A       8|16        8|16|32     16      0x06    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TSRA        TSRA        -           8|16|32     16      0x08    -               -           -               -               R       0x0     TRUE        -
//     %%REG    -      TSCRA       TSCRA       8|16        8|16|32     16      0x0A    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCMCR1A     NCMCR1A     8           8|16|32      8      0x0C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCMCR2A     NCMCR2A     8           8|16|32      8      0x0E    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIOR1A      TIOR1A      8|16        8|16|32     16      0x10    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIOR2A      TIOR2A      8|16|32     8|16|32     32      0x14    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TILRA       TILRA       -           8|16|32      8      0x18    -               -           -               -               R       0x0     TRUE        -
//     %%REG    -      TCR5A       TCR5A       8           8|16|32      8      0x1C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCNTA       TCNTA       32          8|16|32     32      0x20    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2AS1     TCR2AS1     8           8|16|32      8      0x24    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2AS2     TCR2AS2     8           8|16|32      8      0x26    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIERA       TIERA       8|16        8|16|32     16      0x2C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCNTA       NCNTA       16          8|16|32     16      0x40    0               7           -               0x20            W|R     0x0     TRUE        -
//     %%REG    -      NCRA        NCRA        16          8|16|32     16      0x42    0               7           -               0x20            W|R     0x0     TRUE        -
//     %%REG    -      ICRA        ICRA        -           8|16|32     32      0x44    0               7           -               0x20            R       0x0     TRUE        -
//     %%REG    -      ICRA2       ICRA2       -           8|16|32     32      0x48    0               7           -               0x20            R       0x0     TRUE        -
// 
// %REG_NAME TCR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CKSELA            2      0     0         W|R     TRUE     W
//     %%BIT    EVOSEL1           5      3     0         W|R     TRUE     -
//     %%BIT    EVOSEL2B          6      6     0         W|R     TRUE     -
//     %%BIT    EVOSEL2A          7      7     0         W|R     TRUE     -
// 
// %REG_NAME TCR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1          7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE1E        15     15     0         W|R     TRUE     -
// 
// %REG_NAME TCR3A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE2A         7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE2AE       15     15     0         W|R     TRUE     -
// 
// %REG_NAME TCR4A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE2B         7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE2BE       15     15     0         W|R     TRUE     -
// 
// %REG_NAME TSRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICFA              7      0     0         R       TRUE     -
//     %%BIT    OVFA             15     15     0         R       TRUE     -
// 
// %REG_NAME TSCRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICFCA             7      0     0         W|R     TRUE     W
//     %%BIT    OVFCA            15     15     0         W|R     TRUE     -
// 
// %REG_NAME NCMCR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCM1A             7      0     0         W|R     TRUE     W
// 
// %REG_NAME NCMCR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCM2A             7      0     0         W|R     TRUE     W
// 
// %REG_NAME TIOR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    IOA0              1      0     0         W|R     TRUE     -
//     %%BIT    IOA1              3      2     0         W|R     TRUE     -
//     %%BIT    IOA2              5      4     0         W|R     TRUE     -
//     %%BIT    IOA3              7      6     0         W|R     TRUE     -
//     %%BIT    IOA4              9      8     0         W|R     TRUE     -
//     %%BIT    IOA5             11     10     0         W|R     TRUE     -
//     %%BIT    IOA6             13     12     0         W|R     TRUE     -
//     %%BIT    IOA7             15     14     0         W|R     TRUE     -
// 
// %REG_NAME TIOR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCEA              7      0     0         W|R     TRUE     W
//     %%BIT    NCKA             15      8     0         W|R     TRUE     -
//     %%BIT    NCKGA            23     16     0         W|R     TRUE     -
// 
// %REG_NAME TILRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    TIAL0             7      0     0         R       TRUE     -
// 
// %REG_NAME TCR5A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICRA2SEL          0      0     0         W|R     TRUE     -
// 
// %REG_NAME TCNTA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CNTA             31      0     0         W|R     TRUE     W
// 
// %REG_NAME TCR2AS1
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1S1        7      0     0         W|R     TRUE     -
// 
// %REG_NAME TCR2AS2
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1S2        7      0     0         W|R     TRUE     -
// 
// %REG_NAME TIERA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICIEA0            0      0     0         W|R     TRUE     -
//     %%BIT    ICIEA1            1      1     0         W|R     TRUE     -
//     %%BIT    ICIEA2            2      2     0         W|R     TRUE     -
//     %%BIT    ICIEA3            3      3     0         W|R     TRUE     -
//     %%BIT    ICIEA4            4      4     0         W|R     TRUE     -
//     %%BIT    ICIEA5            5      5     0         W|R     TRUE     -
//     %%BIT    ICIEA6            6      6     0         W|R     TRUE     -
//     %%BIT    ICIEA7            7      7     0         W|R     TRUE     -
//     %%BIT    OVEA             15     15     0         W|R     TRUE     -
// 
// %REG_NAME NCNTA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCNTA            15      0     0         W|R     TRUE     -
// 
// %REG_NAME NCRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCTA             15      0     0         W|R     TRUE     -
// 
// %REG_NAME ICRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICA              31      0     0         R       TRUE     -
// 
// %REG_NAME ICRA2
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICA2             31      0     0         R       TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timera_regif.cpp
/// @brief Register IF class of model ATU5010_TIMERA
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "atu5010_timera_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Catu5010_timera_regif::Catu5010_timera_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x12C/4))
    #endif
{
    CommandInit();
    TCR1A   = new vpcl::re_register(0x0000, this, "TCR1A"  , name.c_str());
    TCR2A   = new vpcl::re_register(0x0002, this, "TCR2A"  , name.c_str());
    TCR3A   = new vpcl::re_register(0x0004, this, "TCR3A"  , name.c_str());
    TCR4A   = new vpcl::re_register(0x0006, this, "TCR4A"  , name.c_str());
    TSRA    = new vpcl::re_register(0x0008, this, "TSRA"   , name.c_str());
    TSCRA   = new vpcl::re_register(0x000A, this, "TSCRA"  , name.c_str());
    NCMCR1A = new vpcl::re_register(0x000C, this, "NCMCR1A", name.c_str());
    NCMCR2A = new vpcl::re_register(0x000E, this, "NCMCR2A", name.c_str());
    TIOR1A  = new vpcl::re_register(0x0010, this, "TIOR1A" , name.c_str());
    TIOR2A  = new vpcl::re_register(0x0014, this, "TIOR2A" , name.c_str());
    TILRA   = new vpcl::re_register(0x0018, this, "TILRA"  , name.c_str());
    TCR5A   = new vpcl::re_register(0x001C, this, "TCR5A"  , name.c_str());
    TCNTA   = new vpcl::re_register(0x0020, this, "TCNTA"  , name.c_str());
    TCR2AS1 = new vpcl::re_register(0x0024, this, "TCR2AS1", name.c_str());
    TCR2AS2 = new vpcl::re_register(0x0026, this, "TCR2AS2", name.c_str());
    TIERA   = new vpcl::re_register(0x002C, this, "TIERA"  , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_NCNTA; i++) {
        str_tmp.str("");
        str_tmp<<"NCNTA"<< i;
        NCNTA  [i] = new vpcl::re_register((0x0040) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_NCRA; i++) {
        str_tmp.str("");
        str_tmp<<"NCRA"<< i;
        NCRA   [i] = new vpcl::re_register((0x0042) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ICRA; i++) {
        str_tmp.str("");
        str_tmp<<"ICRA"<< i;
        ICRA   [i] = new vpcl::re_register((0x0044) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ICRA2; i++) {
        str_tmp.str("");
        str_tmp<<"ICRA2"<< i;
        ICRA2  [i] = new vpcl::re_register((0x0048) + 32*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0002]     = index;
    mRegMap[0x0002 + 1] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index++;
    mRegMap[0x0006]     = index;
    mRegMap[0x0006 + 1] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index++;
    mRegMap[0x000A]     = index;
    mRegMap[0x000A + 1] = index++;
    mRegMap[0x000C]     = index++;
    mRegMap[0x000E]     = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index++;
    mRegMap[0x001C]     = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index++;
    mRegMap[0x0026]     = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index++;
    for(uint i = 0; i < emNUM_NCNTA;  i++) {
        mRegMap[(0x0040)     + i*32] = index;
        mRegMap[(0x0040 + 1) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_NCRA;   i++) {
        mRegMap[(0x0042)     + i*32] = index;
        mRegMap[(0x0042 + 1) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_ICRA;   i++) {
        mRegMap[(0x0044)     + i*32] = index;
        mRegMap[(0x0044 + 1) + i*32] = index;
        mRegMap[(0x0044 + 2) + i*32] = index;
        mRegMap[(0x0044 + 3) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_ICRA2;  i++) {
        mRegMap[(0x0048)     + i*32] = index;
        mRegMap[(0x0048 + 1) + i*32] = index;
        mRegMap[(0x0048 + 2) + i*32] = index;
        mRegMap[(0x0048 + 3) + i*32] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_TCR1A_TCR2A, "TCR1A_TCR2A", 0x0000);
    CW_TCR1A   = new scml2::bitfield<uint>(TCR1A->name()  , CW_TCR1A_TCR2A   ,  0,  8);
    CW_TCR2A   = new scml2::bitfield<uint>(TCR2A->name()  , CW_TCR1A_TCR2A   , 16, 16);
    cw_instantiate_reg(CW_TCR3A_TCR4A, "TCR3A_TCR4A", 0x0004);
    CW_TCR3A   = new scml2::bitfield<uint>(TCR3A->name()  , CW_TCR3A_TCR4A   ,  0, 16);
    CW_TCR4A   = new scml2::bitfield<uint>(TCR4A->name()  , CW_TCR3A_TCR4A   , 16, 16);
    cw_instantiate_reg(CW_TSRA_TSCRA, "TSRA_TSCRA", 0x0008);
    CW_TSRA    = new scml2::bitfield<uint>(TSRA->name()   , CW_TSRA_TSCRA    ,  0, 16);
    CW_TSCRA   = new scml2::bitfield<uint>(TSCRA->name()  , CW_TSRA_TSCRA    , 16, 16);
    cw_instantiate_reg(CW_NCMCR1A_NCMCR2A, "NCMCR1A_NCMCR2A", 0x000C);
    CW_NCMCR1A = new scml2::bitfield<uint>(NCMCR1A->name(), CW_NCMCR1A_NCMCR2A,  0,  8);
    CW_NCMCR2A = new scml2::bitfield<uint>(NCMCR2A->name(), CW_NCMCR1A_NCMCR2A, 16,  8);
    cw_instantiate_reg(CW_TIOR1A_, "TIOR1A_", 0x0010);
    CW_TIOR1A  = new scml2::bitfield<uint>(TIOR1A->name() , CW_TIOR1A_       ,  0, 16);
    cw_instantiate_reg(CW_TILRA_, "TILRA_", 0x0018);
    CW_TILRA   = new scml2::bitfield<uint>(TILRA->name()  , CW_TILRA_        ,  0,  8);
    cw_instantiate_reg(CW_TCR5A_, "TCR5A_", 0x001C);
    CW_TCR5A   = new scml2::bitfield<uint>(TCR5A->name()  , CW_TCR5A_        ,  0,  8);
    cw_instantiate_reg(CW_TCR2AS1_TCR2AS2, "TCR2AS1_TCR2AS2", 0x0024);
    CW_TCR2AS1 = new scml2::bitfield<uint>(TCR2AS1->name(), CW_TCR2AS1_TCR2AS2,  0,  8);
    CW_TCR2AS2 = new scml2::bitfield<uint>(TCR2AS2->name(), CW_TCR2AS1_TCR2AS2, 16,  8);
    cw_instantiate_reg(CW_TIERA_, "TIERA_", 0x002C);
    CW_TIERA   = new scml2::bitfield<uint>(TIERA->name()  , CW_TIERA_        ,  0, 16);
    cw_instantiate_reg(CW_NCNTA_0_NCRA_0, "NCNTA_0_NCRA_0", 0x0040);
    CW_NCNTA  [0] = new scml2::bitfield<uint>(NCNTA  [0]->name(), CW_NCNTA_0_NCRA_0,  0, 16);
    CW_NCRA   [0] = new scml2::bitfield<uint>(NCRA   [0]->name(), CW_NCNTA_0_NCRA_0, 16, 16);
    cw_instantiate_reg(CW_NCNTA_1_NCRA_1, "NCNTA_1_NCRA_1", 0x0060);
    CW_NCNTA  [1] = new scml2::bitfield<uint>(NCNTA  [1]->name(), CW_NCNTA_1_NCRA_1,  0, 16);
    CW_NCRA   [1] = new scml2::bitfield<uint>(NCRA   [1]->name(), CW_NCNTA_1_NCRA_1, 16, 16);
    cw_instantiate_reg(CW_NCNTA_2_NCRA_2, "NCNTA_2_NCRA_2", 0x0080);
    CW_NCNTA  [2] = new scml2::bitfield<uint>(NCNTA  [2]->name(), CW_NCNTA_2_NCRA_2,  0, 16);
    CW_NCRA   [2] = new scml2::bitfield<uint>(NCRA   [2]->name(), CW_NCNTA_2_NCRA_2, 16, 16);
    cw_instantiate_reg(CW_NCNTA_3_NCRA_3, "NCNTA_3_NCRA_3", 0x00A0);
    CW_NCNTA  [3] = new scml2::bitfield<uint>(NCNTA  [3]->name(), CW_NCNTA_3_NCRA_3,  0, 16);
    CW_NCRA   [3] = new scml2::bitfield<uint>(NCRA   [3]->name(), CW_NCNTA_3_NCRA_3, 16, 16);
    cw_instantiate_reg(CW_NCNTA_4_NCRA_4, "NCNTA_4_NCRA_4", 0x00C0);
    CW_NCNTA  [4] = new scml2::bitfield<uint>(NCNTA  [4]->name(), CW_NCNTA_4_NCRA_4,  0, 16);
    CW_NCRA   [4] = new scml2::bitfield<uint>(NCRA   [4]->name(), CW_NCNTA_4_NCRA_4, 16, 16);
    cw_instantiate_reg(CW_NCNTA_5_NCRA_5, "NCNTA_5_NCRA_5", 0x00E0);
    CW_NCNTA  [5] = new scml2::bitfield<uint>(NCNTA  [5]->name(), CW_NCNTA_5_NCRA_5,  0, 16);
    CW_NCRA   [5] = new scml2::bitfield<uint>(NCRA   [5]->name(), CW_NCNTA_5_NCRA_5, 16, 16);
    cw_instantiate_reg(CW_NCNTA_6_NCRA_6, "NCNTA_6_NCRA_6", 0x0100);
    CW_NCNTA  [6] = new scml2::bitfield<uint>(NCNTA  [6]->name(), CW_NCNTA_6_NCRA_6,  0, 16);
    CW_NCRA   [6] = new scml2::bitfield<uint>(NCRA   [6]->name(), CW_NCNTA_6_NCRA_6, 16, 16);
    cw_instantiate_reg(CW_NCNTA_7_NCRA_7, "NCNTA_7_NCRA_7", 0x0120);
    CW_NCNTA  [7] = new scml2::bitfield<uint>(NCNTA  [7]->name(), CW_NCNTA_7_NCRA_7,  0, 16);
    CW_NCRA   [7] = new scml2::bitfield<uint>(NCRA   [7]->name(), CW_NCNTA_7_NCRA_7, 16, 16);
    cw_instantiate_reg(CW_TIOR2A   , TIOR2A->name() , TIOR2A->addr() );
    cw_instantiate_reg(CW_TCNTA    , TCNTA->name()  , TCNTA->addr()  );
    for(uint i = 0; i < emNUM_ICRA   ; i++) cw_instantiate_reg(CW_ICRA     [i], ICRA   [i]->name(), ICRA   [i]->addr());
    for(uint i = 0; i < emNUM_ICRA2  ; i++) cw_instantiate_reg(CW_ICRA2    [i], ICRA2  [i]->name(), ICRA2  [i]->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(TCR1A    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR2A    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR3A    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR4A    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TSRA     , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TSCRA    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(NCMCR1A  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(NCMCR2A  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIOR1A   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIOR2A   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TILRA    , mCurReg, 0,  1,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR5A    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCNTA    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR2AS1  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCR2AS2  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIERA    , mCurReg, 0,  2,    "8|16", "8|16|32");
    for(uint i = 0; i < emNUM_NCNTA  ; i++) mCurReg = mRegArray[index++] = new SRegList(NCNTA    [i], mCurReg, i,  2,      "16", "8|16|32");
    for(uint i = 0; i < emNUM_NCRA   ; i++) mCurReg = mRegArray[index++] = new SRegList(NCRA     [i], mCurReg, i,  2,      "16", "8|16|32");
    for(uint i = 0; i < emNUM_ICRA   ; i++) mCurReg = mRegArray[index++] = new SRegList(ICRA     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ICRA2  ; i++) mCurReg = mRegArray[index++] = new SRegList(ICRA2    [i], mCurReg, i,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*TCR1A    ) ( 2,  0, "CKSELA"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR1A    ) ( 5,  3, "EVOSEL1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR1A    ) ( 6,  6, "EVOSEL2B", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR1A    ) ( 7,  7, "EVOSEL2A", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR2A    ) ( 7,  0, "EVOSELE1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR2A    ) (15, 15, "EVOSELE1E", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR3A    ) ( 7,  0, "EVOSELE2A", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR3A    ) (15, 15, "EVOSELE2AE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR4A    ) ( 7,  0, "EVOSELE2B", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR4A    ) (15, 15, "EVOSELE2BE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSRA     ) ( 7,  0, "ICFA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRA     ) (15, 15, "OVFA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSCRA    ) ( 7,  0, "ICFCA"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRA    ) (15, 15, "OVFCA"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*NCMCR1A  ) ( 7,  0, "NCM1A"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*NCMCR2A  ) ( 7,  0, "NCM2A"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) ( 1,  0, "IOA0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) ( 3,  2, "IOA1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) ( 5,  4, "IOA2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) ( 7,  6, "IOA3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) ( 9,  8, "IOA4"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) (11, 10, "IOA5"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) (13, 12, "IOA6"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR1A   ) (15, 14, "IOA7"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR2A   ) ( 7,  0, "NCEA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR2A   ) (15,  8, "NCKA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIOR2A   ) (23, 16, "NCKGA"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TILRA    ) ( 7,  0, "TIAL0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TCR5A    ) ( 0,  0, "ICRA2SEL", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCNTA    ) (31,  0, "CNTA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR2AS1  ) ( 7,  0, "EVOSELE1S1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCR2AS2  ) ( 7,  0, "EVOSELE1S2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 0,  0, "ICIEA0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 1,  1, "ICIEA1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 2,  2, "ICIEA2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 3,  3, "ICIEA3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 4,  4, "ICIEA4"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 5,  5, "ICIEA5"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 6,  6, "ICIEA6"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) ( 7,  7, "ICIEA7"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERA    ) (15, 15, "OVEA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_ICRA2; i++) {
        (*ICRA2    [i]) (31,  0, "ICA2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ICRA; i++) {
        (*ICRA     [i]) (31,  0, "ICA"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_NCNTA; i++) {
        (*NCNTA    [i]) (15,  0, "NCNTA"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_NCRA; i++) {
        (*NCRA     [i]) (15,  0, "NCTA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["TCR1A"]["CKSELA"] = &Catu5010_timera_regif::cb_TCR1A_CKSELA;
    mWrCbAPI["TSCRA"]["ICFCA"] = &Catu5010_timera_regif::cb_TSCRA_ICFCA;
    mWrCbAPI["NCMCR1A"]["NCM1A"] = &Catu5010_timera_regif::cb_NCMCR1A_NCM1A;
    mWrCbAPI["NCMCR2A"]["NCM2A"] = &Catu5010_timera_regif::cb_NCMCR2A_NCM2A;
    mWrCbAPI["TIOR2A"]["NCEA" ] = &Catu5010_timera_regif::cb_TIOR2A_NCEA;
    mWrCbAPI["TCNTA"]["CNTA" ] = &Catu5010_timera_regif::cb_TCNTA_CNTA;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Catu5010_timera_regif::~Catu5010_timera_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Catu5010_timera_regif::uint Catu5010_timera_regif::bit_select(
                                cuint val,    ///< [in] Writting address
                                cuint start,  ///< [in] start bit position
                                cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timera_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timera_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timera_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                    const unsigned char *p_data,   ///< [in] Writing data
                                    cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timera_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timera_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                        const unsigned char *p_data,  ///< [in] Writing data
                                        cuint size,                   ///< [in] Data size (byte)
                                        bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timera_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                        unsigned char *p_data,   ///< [out] Reading data
                                        cuint size,              ///< [in]  Data size (byte)
                                        bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Catu5010_timera_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                     unsigned char *p_data,          ///< [out] Reading data
                                     cuint size,                     ///< [in]  Data size (byte)
                                     cuint reg_index,                ///< [in] Register index
                                     bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Catu5010_timera_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                     const unsigned char *p_data,      ///< [in] Writing data
                                     cuint size,                       ///< [in] Data size (byte)
                                     cuint reg_index,                  ///< [in] Register index
                                     bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Catu5010_timera_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Catu5010_timera_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Catu5010_timera_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Catu5010_timera_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Catu5010_timera_regif::InitLocalVal()
{
    // Initialize local variables
    TCR1A_CKSELA = 0x0;
    TCR1A_EVOSEL1 = 0x0;
    TCR1A_EVOSEL2B = 0x0;
    TCR1A_EVOSEL2A = 0x0;
    TCR2A_EVOSELE1 = 0x0;
    TCR2A_EVOSELE1E = 0x0;
    TCR3A_EVOSELE2A = 0x0;
    TCR3A_EVOSELE2AE = 0x0;
    TCR4A_EVOSELE2B = 0x0;
    TCR4A_EVOSELE2BE = 0x0;
    TSRA_ICFA = 0x0;
    TSRA_OVFA = 0x0;
    TSCRA_ICFCA = 0x0;
    TSCRA_OVFCA = 0x0;
    NCMCR1A_NCM1A = 0x0;
    NCMCR2A_NCM2A = 0x0;
    TIOR1A_IOA0 = 0x0;
    TIOR1A_IOA1 = 0x0;
    TIOR1A_IOA2 = 0x0;
    TIOR1A_IOA3 = 0x0;
    TIOR1A_IOA4 = 0x0;
    TIOR1A_IOA5 = 0x0;
    TIOR1A_IOA6 = 0x0;
    TIOR1A_IOA7 = 0x0;
    TIOR2A_NCEA = 0x0;
    TIOR2A_NCKA = 0x0;
    TIOR2A_NCKGA = 0x0;
    TILRA_TIAL0 = 0x0;
    TCR5A_ICRA2SEL = 0x0;
    TCNTA_CNTA = 0x0;
    TCR2AS1_EVOSELE1S1 = 0x0;
    TCR2AS2_EVOSELE1S2 = 0x0;
    TIERA_ICIEA0 = 0x0;
    TIERA_ICIEA1 = 0x0;
    TIERA_ICIEA2 = 0x0;
    TIERA_ICIEA3 = 0x0;
    TIERA_ICIEA4 = 0x0;
    TIERA_ICIEA5 = 0x0;
    TIERA_ICIEA6 = 0x0;
    TIERA_ICIEA7 = 0x0;
    TIERA_OVEA = 0x0;
    for(uint i = 0; i < emNUM_NCNTA;  i++) {
        NCNTA_NCNTA[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_NCRA;   i++) {
        NCRA_NCTA[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_ICRA;   i++) {
        ICRA_ICA[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_ICRA2;  i++) {
        ICRA2_ICA2[i] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Catu5010_timera_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        TCR1A_CKSELA                = (*TCR1A  )["CKSELA" ];
        TCR1A_EVOSEL1               = (*TCR1A  )["EVOSEL1"];
        TCR1A_EVOSEL2B              = (*TCR1A  )["EVOSEL2B"];
        TCR1A_EVOSEL2A              = (*TCR1A  )["EVOSEL2A"];
        return;
    }
    if (addr == 0x0002) {
        TCR2A_EVOSELE1              = (*TCR2A  )["EVOSELE1"];
        TCR2A_EVOSELE1E             = (*TCR2A  )["EVOSELE1E"];
        return;
    }
    if (addr == 0x0004) {
        TCR3A_EVOSELE2A             = (*TCR3A  )["EVOSELE2A"];
        TCR3A_EVOSELE2AE            = (*TCR3A  )["EVOSELE2AE"];
        return;
    }
    if (addr == 0x0006) {
        TCR4A_EVOSELE2B             = (*TCR4A  )["EVOSELE2B"];
        TCR4A_EVOSELE2BE            = (*TCR4A  )["EVOSELE2BE"];
        return;
    }
    if (addr == 0x0008) {
        TSRA_ICFA                   = (*TSRA   )["ICFA"   ];
        TSRA_OVFA                   = (*TSRA   )["OVFA"   ];
        return;
    }
    if (addr == 0x000A) {
        TSCRA_ICFCA                 = (*TSCRA  )["ICFCA"  ];
        TSCRA_OVFCA                 = (*TSCRA  )["OVFCA"  ];
        return;
    }
    if (addr == 0x000C) {
        NCMCR1A_NCM1A               = (*NCMCR1A)["NCM1A"  ];
        return;
    }
    if (addr == 0x000E) {
        NCMCR2A_NCM2A               = (*NCMCR2A)["NCM2A"  ];
        return;
    }
    if (addr == 0x0010) {
        TIOR1A_IOA0                 = (*TIOR1A )["IOA0"   ];
        TIOR1A_IOA1                 = (*TIOR1A )["IOA1"   ];
        TIOR1A_IOA2                 = (*TIOR1A )["IOA2"   ];
        TIOR1A_IOA3                 = (*TIOR1A )["IOA3"   ];
        TIOR1A_IOA4                 = (*TIOR1A )["IOA4"   ];
        TIOR1A_IOA5                 = (*TIOR1A )["IOA5"   ];
        TIOR1A_IOA6                 = (*TIOR1A )["IOA6"   ];
        TIOR1A_IOA7                 = (*TIOR1A )["IOA7"   ];
        return;
    }
    if (addr == 0x0014) {
        TIOR2A_NCEA                 = (*TIOR2A )["NCEA"   ];
        TIOR2A_NCKA                 = (*TIOR2A )["NCKA"   ];
        TIOR2A_NCKGA                = (*TIOR2A )["NCKGA"  ];
        return;
    }
    if (addr == 0x0018) {
        TILRA_TIAL0                 = (*TILRA  )["TIAL0"  ];
        return;
    }
    if (addr == 0x001C) {
        TCR5A_ICRA2SEL              = (*TCR5A  )["ICRA2SEL"];
        return;
    }
    if (addr == 0x0020) {
        TCNTA_CNTA                  = (*TCNTA  )["CNTA"   ];
        return;
    }
    if (addr == 0x0024) {
        TCR2AS1_EVOSELE1S1          = (*TCR2AS1)["EVOSELE1S1"];
        return;
    }
    if (addr == 0x0026) {
        TCR2AS2_EVOSELE1S2          = (*TCR2AS2)["EVOSELE1S2"];
        return;
    }
    if (addr == 0x002C) {
        TIERA_ICIEA0                = (*TIERA  )["ICIEA0" ];
        TIERA_ICIEA1                = (*TIERA  )["ICIEA1" ];
        TIERA_ICIEA2                = (*TIERA  )["ICIEA2" ];
        TIERA_ICIEA3                = (*TIERA  )["ICIEA3" ];
        TIERA_ICIEA4                = (*TIERA  )["ICIEA4" ];
        TIERA_ICIEA5                = (*TIERA  )["ICIEA5" ];
        TIERA_ICIEA6                = (*TIERA  )["ICIEA6" ];
        TIERA_ICIEA7                = (*TIERA  )["ICIEA7" ];
        TIERA_OVEA                  = (*TIERA  )["OVEA"   ];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(32*7)) && ((addr-0x0040)%32 == 0)) {
        uint i = (addr - 0x0040)/32;
        NCNTA_NCNTA                [i] = (*(NCNTA  [i]))["NCNTA"  ];
        return;
    }
    if ((0x0042 <= addr) && (addr <= (0x0042)+(32*7)) && ((addr-0x0042)%32 == 0)) {
        uint i = (addr - 0x0042)/32;
        NCRA_NCTA                  [i] = (*(NCRA   [i]))["NCTA"   ];
        return;
    }
    if ((0x0044 <= addr) && (addr <= (0x0044)+(32*7)) && ((addr-0x0044)%32 == 0)) {
        uint i = (addr - 0x0044)/32;
        ICRA_ICA                   [i] = (*(ICRA   [i]))["ICA"    ];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(32*7)) && ((addr-0x0048)%32 == 0)) {
        uint i = (addr - 0x0048)/32;
        ICRA2_ICA2                 [i] = (*(ICRA2  [i]))["ICA2"   ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Catu5010_timera_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*TCR1A  )["CKSELA" ] = TCR1A_CKSELA;
        (*TCR1A  )["EVOSEL1"] = TCR1A_EVOSEL1;
        (*TCR1A  )["EVOSEL2B"] = TCR1A_EVOSEL2B;
        (*TCR1A  )["EVOSEL2A"] = TCR1A_EVOSEL2A;
        return;
    }
    if (addr == 0x0002) {
        (*TCR2A  )["EVOSELE1"] = TCR2A_EVOSELE1;
        (*TCR2A  )["EVOSELE1E"] = TCR2A_EVOSELE1E;
        return;
    }
    if (addr == 0x0004) {
        (*TCR3A  )["EVOSELE2A"] = TCR3A_EVOSELE2A;
        (*TCR3A  )["EVOSELE2AE"] = TCR3A_EVOSELE2AE;
        return;
    }
    if (addr == 0x0006) {
        (*TCR4A  )["EVOSELE2B"] = TCR4A_EVOSELE2B;
        (*TCR4A  )["EVOSELE2BE"] = TCR4A_EVOSELE2BE;
        return;
    }
    if (addr == 0x0008) {
        (*TSRA   )["ICFA"   ] = TSRA_ICFA;
        (*TSRA   )["OVFA"   ] = TSRA_OVFA;
        return;
    }
    if (addr == 0x000A) {
        (*TSCRA  )["ICFCA"  ] = TSCRA_ICFCA;
        (*TSCRA  )["OVFCA"  ] = TSCRA_OVFCA;
        return;
    }
    if (addr == 0x000C) {
        (*NCMCR1A)["NCM1A"  ] = NCMCR1A_NCM1A;
        return;
    }
    if (addr == 0x000E) {
        (*NCMCR2A)["NCM2A"  ] = NCMCR2A_NCM2A;
        return;
    }
    if (addr == 0x0010) {
        (*TIOR1A )["IOA0"   ] = TIOR1A_IOA0;
        (*TIOR1A )["IOA1"   ] = TIOR1A_IOA1;
        (*TIOR1A )["IOA2"   ] = TIOR1A_IOA2;
        (*TIOR1A )["IOA3"   ] = TIOR1A_IOA3;
        (*TIOR1A )["IOA4"   ] = TIOR1A_IOA4;
        (*TIOR1A )["IOA5"   ] = TIOR1A_IOA5;
        (*TIOR1A )["IOA6"   ] = TIOR1A_IOA6;
        (*TIOR1A )["IOA7"   ] = TIOR1A_IOA7;
        return;
    }
    if (addr == 0x0014) {
        (*TIOR2A )["NCEA"   ] = TIOR2A_NCEA;
        (*TIOR2A )["NCKA"   ] = TIOR2A_NCKA;
        (*TIOR2A )["NCKGA"  ] = TIOR2A_NCKGA;
        return;
    }
    if (addr == 0x0018) {
        (*TILRA  )["TIAL0"  ] = TILRA_TIAL0;
        return;
    }
    if (addr == 0x001C) {
        (*TCR5A  )["ICRA2SEL"] = TCR5A_ICRA2SEL;
        return;
    }
    if (addr == 0x0020) {
        (*TCNTA  )["CNTA"   ] = TCNTA_CNTA;
        return;
    }
    if (addr == 0x0024) {
        (*TCR2AS1)["EVOSELE1S1"] = TCR2AS1_EVOSELE1S1;
        return;
    }
    if (addr == 0x0026) {
        (*TCR2AS2)["EVOSELE1S2"] = TCR2AS2_EVOSELE1S2;
        return;
    }
    if (addr == 0x002C) {
        (*TIERA  )["ICIEA0" ] = TIERA_ICIEA0;
        (*TIERA  )["ICIEA1" ] = TIERA_ICIEA1;
        (*TIERA  )["ICIEA2" ] = TIERA_ICIEA2;
        (*TIERA  )["ICIEA3" ] = TIERA_ICIEA3;
        (*TIERA  )["ICIEA4" ] = TIERA_ICIEA4;
        (*TIERA  )["ICIEA5" ] = TIERA_ICIEA5;
        (*TIERA  )["ICIEA6" ] = TIERA_ICIEA6;
        (*TIERA  )["ICIEA7" ] = TIERA_ICIEA7;
        (*TIERA  )["OVEA"   ] = TIERA_OVEA;
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(32*7)) && ((addr-0x0040)%32 == 0)) {
        uint i = (addr - 0x0040)/32;
        (*(NCNTA  [i]))["NCNTA"  ] = NCNTA_NCNTA[i];
        return;
    }
    if ((0x0042 <= addr) && (addr <= (0x0042)+(32*7)) && ((addr-0x0042)%32 == 0)) {
        uint i = (addr - 0x0042)/32;
        (*(NCRA   [i]))["NCTA"   ] = NCRA_NCTA[i];
        return;
    }
    if ((0x0044 <= addr) && (addr <= (0x0044)+(32*7)) && ((addr-0x0044)%32 == 0)) {
        uint i = (addr - 0x0044)/32;
        (*(ICRA   [i]))["ICA"    ] = ICRA_ICA[i];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(32*7)) && ((addr-0x0048)%32 == 0)) {
        uint i = (addr - 0x0048)/32;
        (*(ICRA2  [i]))["ICA2"   ] = ICRA2_ICA2[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Catu5010_timera_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Catu5010_timera_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Catu5010_timera_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Catu5010_timera_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Catu5010_timera_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Catu5010_timera_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Catu5010_timera_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Catu5010_timera_regif::uint Catu5010_timera_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Catu5010_timera_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Catu5010_timera_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Catu5010_timera_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Catu5010_timera_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Catu5010_timera_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Catu5010_timera_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Catu5010_timera_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
