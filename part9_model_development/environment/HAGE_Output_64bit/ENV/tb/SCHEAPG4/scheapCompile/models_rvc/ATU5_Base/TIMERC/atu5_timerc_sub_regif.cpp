// -----------------------------------------------------------------------------
// $Id: atu5_timerc_sub_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
//
// Copyright(c) 2015-2019 Renesas Electronics Corporation
// Copyright(c) 2015-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : atu5_timerc_sub_reif.txt
////////////////////////////////////////////////////////////////////////////////
//  %MODULE ATU5_TIMERC_SUB
//      #                   name            offset_size
//      %%REG_INSTANCE      reg_def         12
//  
//  %REG_CHANNEL reg_def
//      %%TITLE  name       reg_name   wsize   rsize    length  offset  factor_start  factor_end  factor_index  factor_step      access    init        support  callback
//      %%REG    TSCRC      TSCRC      8|16    8|16|32  16      0x22         -             -           -             -             W|R      0           TRUE     -
//      %%REG    TCRC       TCRC       8|16    8|16|32  16      0x24         -             -           -             -             W|R      0           TRUE     W
//      %%REG    TSRC       TSRC       -       8|16|32  16      0x26         -             -           -             -             R        0           TRUE     -
//      %%REG    TIORC      TIORC      8|16    8|16|32  16      0x28         -             -           -             -             W|R      0           TRUE     W
//      %%REG    TIERC      TIERC      8|16    8|16|32  16      0x34         -             -           -             -             W|R      0           TRUE     -
//      %%REG    TCNTC      TCNTC      32      8|16|32  32      0x38         -             -           -             -             W|R      0           TRUE     -
//      %%REG    CUCRC      CUCRC      32      8|16|32  32      0x3C         -             -           -             -             W|R      0xFFFFFFFF  TRUE     -
//      %%REG    GRCn       GRCn       32      8|16|32  32      0x40         0             3           -             0x4           W|R      0xFFFFFFFF  TRUE     -
//      %%REG    OCRCn      OCRCn      32      8|16|32  32      0x50         0             3           -             0x4           W|R      0xFFFFFFFF  TRUE     -
//      %%REG    RCR1C      RCR1C      8       8|16|32  8       0x60         -             -           -             -             W|R      0           TRUE     -
//      %%REG    RCR2C      RCR2C      8       8|16|32  8       0x62         -             -           -             -             W|R      0           TRUE     -
//      %%REG    NCNTCn     NCNTCn     16      8|16|32  16      0x70         0             3           -             0x4           W|R      0           TRUE     -
//      %%REG    NCRCn      NCRCn      16      8|16|32  16      0x72         0             3           -             0x4           W|R      0           TRUE     -
//      %%REG    OCMRCn     OCMRCn     -       8|16|32  32      0x80         0             3           -             0x8           R        0xFFFFFFFF  TRUE     -
//      %%REG    GMRCn      GMRCn      -       8|16|32  32      0x84         0             3           -             0x8           R        0xFFFFFFFF  TRUE     -
//  
//  %REG_NAME TSCRC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    OCMFCC3     11      11      0     W|R     TRUE     -
//      %%BIT    OCMFCC2     10      10      0     W|R     TRUE     -
//      %%BIT    OCMFCC1     9       9       0     W|R     TRUE     -
//      %%BIT    OCMFCC0     8       8       0     W|R     TRUE     -
//      %%BIT    OVFCC       4       4       0     W|R     TRUE     - 
//      %%BIT    IMFCC3      3       3       0     W|R     TRUE     -
//      %%BIT    IMFCC2      2       2       0     W|R     TRUE     -
//      %%BIT    IMFCC1      1       1       0     W|R     TRUE     -
//      %%BIT    IMFCC0      0       0       0     W|R     TRUE     -
//  
//  %REG_NAME TCRC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    FOCMC3      15      15      0     W|R     TRUE     -
//      %%BIT    FOCMC2      14      14      0     W|R     TRUE     -
//      %%BIT    FOCMC1      13      13      0     W|R     TRUE     -
//      %%BIT    FOCMC0      12      12      0     W|R     TRUE     -
//      %%BIT    CLRCSELC    9       9       0     W|R     TRUE     - 
//      %%BIT    CLRC        8       8       0     W|R     TRUE     - 
//      %%BIT    FCMC3       7       7       0     W|R     TRUE     -
//      %%BIT    FCMC2       6       6       0     W|R     TRUE     -
//      %%BIT    FCMC1       5       5       0     W|R     TRUE     -
//      %%BIT    FCMC0       4       4       0     W|R     TRUE     -
//      %%BIT    PWM0        3       3       0     W|R     TRUE     -
//      %%BIT    CKSELC      2       0       0     W|R     TRUE     -
//  
//  %REG_NAME TSRC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    OCMFC3      11      11      0     R       TRUE     -
//      %%BIT    OCMFC2      10      10      0     R       TRUE     -
//      %%BIT    OCMFC1      9       9       0     R       TRUE     -
//      %%BIT    OCMFC0      8       8       0     R       TRUE     -
//      %%BIT    OVFC        4       4       0     R       TRUE     - 
//      %%BIT    IMFC3       3       3       0     R       TRUE     -
//      %%BIT    IMFC2       2       2       0     R       TRUE     -
//      %%BIT    IMFC1       1       1       0     R       TRUE     -
//      %%BIT    IMFC0       0       0       0     R       TRUE     -
//  
//  %REG_NAME TIORC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    IOC3      15      12      0     W|R     TRUE     W
//      %%BIT    IOC2      11      8       0     W|R     TRUE     -
//      %%BIT    IOC1      7       4       0     W|R     TRUE     -
//      %%BIT    IOC0      3       0       0     W|R     TRUE     -
//  
//  %REG_NAME TIERC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    OCRCE3      11      11      0     W|R     TRUE     -
//      %%BIT    OCRCE2      10      10      0     W|R     TRUE     -
//      %%BIT    OCRCE1      9       9       0     W|R     TRUE     -
//      %%BIT    OCRCE0      8       8       0     W|R     TRUE     -
//      %%BIT    OVCE        4       4       0     W|R     TRUE     - 
//      %%BIT    GRCE3       3       3       0     W|R     TRUE     -
//      %%BIT    GRCE2       2       2       0     W|R     TRUE     -
//      %%BIT    GRCE1       1       1       0     W|R     TRUE     -
//      %%BIT    GRCE0       0       0       0     W|R     TRUE     -
//  
//  %REG_NAME TCNTC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    CNTC        31      0      0      W|R     TRUE     W
//  
//   %REG_NAME CUCRC
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    CUCRC       31      0   0xFFFFFFFF  W|R     TRUE     -
//  
//  %REG_NAME GRCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    GRC         31      0   0xFFFFFFFF  W|R     TRUE     -
//  
//  %REG_NAME OCRCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    OCR        31      0  0xFFFFFFFF  W|R     TRUE     -
//  
//  %REG_NAME RCR1C
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    RCR1C       4       0      0     W|R      TRUE     -
//  
//  %REG_NAME RCR2C
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    RCR2C       4       0      0     W|R      TRUE     -
//  
//  %REG_NAME NCNTCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    NCNTC       15      0     0      W|R     TRUE      -
//  
//  %REG_NAME NCRCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    NCRC        15      0     0      W|R     TRUE     -
//  
//  %REG_NAME OCMRCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    OCMRC       31      0  0xFFFFFFFF  R     TRUE     -
//  
//  %REG_NAME GMRCn
//      %%TITLE  name        upper  lower  init  access  support  callback
//      %%BIT    GMRC        31      0  0xFFFFFFFF  R     TRUE     -
//  
////////////////////////////////////////////////////////////////////////////////
/// @file atu5_timerc_sub_regif.cpp
/// @brief Register IF class of model ATU5_TIMERC_SUB
// $Id: atu5_timerc_sub_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
/// $Date: 2019-10-17 14:33:04 +0900 (2019/10/17 (æœ¨)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#include "atu5_timerc_sub_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Catu5_timerc_sub_regif::Catu5_timerc_sub_regif(std::string name, uint buswidth, uint sub_no)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xA0/4))
    #endif
{
    CommandInit();
    TSCRC  = new vpcl::re_register(0x0822 + sub_no*0x80, this, "TSCRC" , name.c_str());
    TCRC   = new vpcl::re_register(0x0824 + sub_no*0x80, this, "TCRC"  , name.c_str());
    TSRC   = new vpcl::re_register(0x0826 + sub_no*0x80, this, "TSRC"  , name.c_str());
    TIORC  = new vpcl::re_register(0x0828 + sub_no*0x80, this, "TIORC" , name.c_str());
    TIERC  = new vpcl::re_register(0x0834 + sub_no*0x80, this, "TIERC" , name.c_str());
    TCNTC  = new vpcl::re_register(0x0838 + sub_no*0x80, this, "TCNTC" , name.c_str());
    CUCRC  = new vpcl::re_register(0x083C + sub_no*0x80, this, "CUCRC" , name.c_str());
    RCR1C  = new vpcl::re_register(0x0860 + sub_no*0x80, this, "RCR1C" , name.c_str());
    RCR2C  = new vpcl::re_register(0x0862 + sub_no*0x80, this, "RCR2C" , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_GRCn; i++) {
        str_tmp.str("");
        str_tmp<<"GRCn"<< i;
        GRCn  [i] = new vpcl::re_register((0x0840 + sub_no*0x80) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_OCRCn; i++) {
        str_tmp.str("");
        str_tmp<<"OCRCn"<< i;
        OCRCn [i] = new vpcl::re_register((0x0850 + sub_no*0x80) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_NCNTCn; i++) {
        str_tmp.str("");
        str_tmp<<"NCNTCn"<< i;
        NCNTCn[i] = new vpcl::re_register((0x0870 + sub_no*0x80) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_NCRCn; i++) {
        str_tmp.str("");
        str_tmp<<"NCRCn"<< i;
        NCRCn [i] = new vpcl::re_register((0x0872 + sub_no*0x80) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_OCMRCn; i++) {
        str_tmp.str("");
        str_tmp<<"OCMRCn"<< i;
        OCMRCn[i] = new vpcl::re_register((0x0880 + sub_no*0x80) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_GMRCn; i++) {
        str_tmp.str("");
        str_tmp<<"GMRCn"<< i;
        GMRCn [i] = new vpcl::re_register((0x0884 + sub_no*0x80) + 8*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0822 + sub_no*0x80]     = index;
    mRegMap[0x0822 + sub_no*0x80 + 1] = index++;
    mRegMap[0x0824 + sub_no*0x80]     = index;
    mRegMap[0x0824 + sub_no*0x80 + 1] = index++;
    mRegMap[0x0826 + sub_no*0x80]     = index;
    mRegMap[0x0826 + sub_no*0x80 + 1] = index++;
    mRegMap[0x0828 + sub_no*0x80]     = index;
    mRegMap[0x0828 + sub_no*0x80 + 1] = index++;
    mRegMap[0x0834 + sub_no*0x80]     = index;
    mRegMap[0x0834 + sub_no*0x80 + 1] = index++;
    mRegMap[0x0838 + sub_no*0x80]     = index;
    mRegMap[0x0838 + sub_no*0x80 + 1] = index;
    mRegMap[0x0838 + sub_no*0x80 + 2] = index;
    mRegMap[0x0838 + sub_no*0x80 + 3] = index++;
    mRegMap[0x083C + sub_no*0x80]     = index;
    mRegMap[0x083C + sub_no*0x80 + 1] = index;
    mRegMap[0x083C + sub_no*0x80 + 2] = index;
    mRegMap[0x083C + sub_no*0x80 + 3] = index++;
    for(uint i = 0; i < emNUM_GRCn;  i++) {
        mRegMap[(0x0840 + sub_no*0x80)     + i*4 ] = index;
        mRegMap[(0x0840 + sub_no*0x80 + 1) + i*4 ] = index;
        mRegMap[(0x0840 + sub_no*0x80 + 2) + i*4 ] = index;
        mRegMap[(0x0840 + sub_no*0x80 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_OCRCn; i++) {
        mRegMap[(0x0850 + sub_no*0x80)     + i*4 ] = index;
        mRegMap[(0x0850 + sub_no*0x80 + 1) + i*4 ] = index;
        mRegMap[(0x0850 + sub_no*0x80 + 2) + i*4 ] = index;
        mRegMap[(0x0850 + sub_no*0x80 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0860 + sub_no*0x80]     = index++;
    mRegMap[0x0862 + sub_no*0x80]     = index++;
    for(uint i = 0; i < emNUM_NCNTCn; i++) {
        mRegMap[(0x0870 + sub_no*0x80)     + i*4 ] = index;
        mRegMap[(0x0870 + sub_no*0x80 + 1) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_NCRCn; i++) {
        mRegMap[(0x0872 + sub_no*0x80)     + i*4 ] = index;
        mRegMap[(0x0872 + sub_no*0x80 + 1) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_OCMRCn; i++) {
        mRegMap[(0x0880 + sub_no*0x80)     + i*8 ] = index;
        mRegMap[(0x0880 + sub_no*0x80 + 1) + i*8 ] = index;
        mRegMap[(0x0880 + sub_no*0x80 + 2) + i*8 ] = index;
        mRegMap[(0x0880 + sub_no*0x80 + 3) + i*8 ] = index++;
    }
    for(uint i = 0; i < emNUM_GMRCn; i++) {
        mRegMap[(0x0884 + sub_no*0x80)     + i*8 ] = index;
        mRegMap[(0x0884 + sub_no*0x80 + 1) + i*8 ] = index;
        mRegMap[(0x0884 + sub_no*0x80 + 2) + i*8 ] = index;
        mRegMap[(0x0884 + sub_no*0x80 + 3) + i*8 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_TSCRC_, "TSCRC_", 0x0820 + sub_no*0x80);
    CW_TSCRC  = new scml2::bitfield<uint>(TSCRC->name() , CW_TSCRC_      , 16, 16);
    cw_instantiate_reg(CW_TCRC_TSRC, "TCRC_TSRC", 0x0824 + sub_no*0x80);
    CW_TCRC   = new scml2::bitfield<uint>(TCRC->name()  , CW_TCRC_TSRC   ,  0, 16);
    CW_TSRC   = new scml2::bitfield<uint>(TSRC->name()  , CW_TCRC_TSRC   , 16, 16);
    cw_instantiate_reg(CW_TIORC_, "TIORC_", 0x0828 + sub_no*0x80);
    CW_TIORC  = new scml2::bitfield<uint>(TIORC->name() , CW_TIORC_      ,  0, 16);
    cw_instantiate_reg(CW_TIERC_, "TIERC_", 0x0834 + sub_no*0x80);
    CW_TIERC  = new scml2::bitfield<uint>(TIERC->name() , CW_TIERC_      ,  0, 16);
    cw_instantiate_reg(CW_RCR1C_RCR2C, "RCR1C_RCR2C", 0x0860 + sub_no*0x80);
    CW_RCR1C  = new scml2::bitfield<uint>(RCR1C->name() , CW_RCR1C_RCR2C ,  0,  8);
    CW_RCR2C  = new scml2::bitfield<uint>(RCR2C->name() , CW_RCR1C_RCR2C , 16,  8);
    cw_instantiate_reg(CW_NCNTCn_0_NCRCn_0, "NCNTCn_0_NCRCn_0", 0x0870 + sub_no*0x80);
    CW_NCNTCn[0] = new scml2::bitfield<uint>(NCNTCn[0]->name(), CW_NCNTCn_0_NCRCn_0,  0, 16);
    CW_NCRCn [0] = new scml2::bitfield<uint>(NCRCn [0]->name(), CW_NCNTCn_0_NCRCn_0, 16, 16);
    cw_instantiate_reg(CW_NCNTCn_1_NCRCn_1, "NCNTCn_1_NCRCn_1", 0x0874 + sub_no*0x80);
    CW_NCNTCn[1] = new scml2::bitfield<uint>(NCNTCn[1]->name(), CW_NCNTCn_1_NCRCn_1,  0, 16);
    CW_NCRCn [1] = new scml2::bitfield<uint>(NCRCn [1]->name(), CW_NCNTCn_1_NCRCn_1, 16, 16);
    cw_instantiate_reg(CW_NCNTCn_2_NCRCn_2, "NCNTCn_2_NCRCn_2", 0x0878 + sub_no*0x80);
    CW_NCNTCn[2] = new scml2::bitfield<uint>(NCNTCn[2]->name(), CW_NCNTCn_2_NCRCn_2,  0, 16);
    CW_NCRCn [2] = new scml2::bitfield<uint>(NCRCn [2]->name(), CW_NCNTCn_2_NCRCn_2, 16, 16);
    cw_instantiate_reg(CW_NCNTCn_3_NCRCn_3, "NCNTCn_3_NCRCn_3", 0x087C + sub_no*0x80);
    CW_NCNTCn[3] = new scml2::bitfield<uint>(NCNTCn[3]->name(), CW_NCNTCn_3_NCRCn_3,  0, 16);
    CW_NCRCn [3] = new scml2::bitfield<uint>(NCRCn [3]->name(), CW_NCNTCn_3_NCRCn_3, 16, 16);
    cw_instantiate_reg(CW_TCNTC   , TCNTC->name() , TCNTC->addr() );
    cw_instantiate_reg(CW_CUCRC   , CUCRC->name() , CUCRC->addr() );
    for(uint i = 0; i < emNUM_GRCn  ; i++) cw_instantiate_reg(CW_GRCn    [i], GRCn  [i]->name(), GRCn  [i]->addr());
    for(uint i = 0; i < emNUM_OCRCn ; i++) cw_instantiate_reg(CW_OCRCn   [i], OCRCn [i]->name(), OCRCn [i]->addr());
    for(uint i = 0; i < emNUM_OCMRCn; i++) cw_instantiate_reg(CW_OCMRCn  [i], OCMRCn[i]->name(), OCMRCn[i]->addr());
    for(uint i = 0; i < emNUM_GMRCn ; i++) cw_instantiate_reg(CW_GMRCn   [i], GMRCn [i]->name(), GMRCn [i]->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(TSCRC   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCRC    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TSRC    , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIORC   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIERC   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCNTC   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CUCRC   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_GRCn  ; i++) mCurReg = mRegArray[index++] = new SRegList(GRCn    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_OCRCn ; i++) mCurReg = mRegArray[index++] = new SRegList(OCRCn   [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RCR1C   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RCR2C   , mCurReg, 0,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_NCNTCn; i++) mCurReg = mRegArray[index++] = new SRegList(NCNTCn  [i], mCurReg, i,  2,      "16", "8|16|32");
    for(uint i = 0; i < emNUM_NCRCn ; i++) mCurReg = mRegArray[index++] = new SRegList(NCRCn   [i], mCurReg, i,  2,      "16", "8|16|32");
    for(uint i = 0; i < emNUM_OCMRCn; i++) mCurReg = mRegArray[index++] = new SRegList(OCMRCn  [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_GMRCn ; i++) mCurReg = mRegArray[index++] = new SRegList(GMRCn   [i], mCurReg, i,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*TSCRC   ) (11, 11, "OCMFCC3" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) (10, 10, "OCMFCC2" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 9,  9, "OCMFCC1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 8,  8, "OCMFCC0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 4,  4, "OVFCC"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 3,  3, "IMFCC3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 2,  2, "IMFCC2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 1,  1, "IMFCC1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSCRC   ) ( 0,  0, "IMFCC0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) (15, 15, "FOCMC3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) (14, 14, "FOCMC2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) (13, 13, "FOCMC1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) (12, 12, "FOCMC0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 9,  9, "CLRCSELC", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 8,  8, "CLRC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 7,  7, "FCMC3"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 6,  6, "FCMC2"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 5,  5, "FCMC1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 4,  4, "FCMC0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 3,  3, "PWM0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRC    ) ( 2,  0, "CKSELC"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TSRC    ) (11, 11, "OCMFC3"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) (10, 10, "OCMFC2"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 9,  9, "OCMFC1"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 8,  8, "OCMFC0"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 4,  4, "OVFC"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 3,  3, "IMFC3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 2,  2, "IMFC2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 1,  1, "IMFC1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRC    ) ( 0,  0, "IMFC0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TIORC   ) (15, 12, "IOC3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIORC   ) (11,  8, "IOC2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIORC   ) ( 7,  4, "IOC1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIORC   ) ( 3,  0, "IOC0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) (11, 11, "OCRCE3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) (10, 10, "OCRCE2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 9,  9, "OCRCE1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 8,  8, "OCRCE0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 4,  4, "OVCE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 3,  3, "GRCE3"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 2,  2, "GRCE2"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 1,  1, "GRCE1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERC   ) ( 0,  0, "GRCE0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCNTC   ) (31,  0, "CNTC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CUCRC   ) (31,  0, "CUCRC"   , 0xFFFFFFFF, "W|R"   , vpcl::SPP_ENABLE);
    (*RCR1C   ) ( 4,  0, "RCR1C"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RCR2C   ) ( 4,  0, "RCR2C"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_NCRCn; i++) {
        (*NCRCn   [i]) (15,  0, "NCRC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_GRCn; i++) {
        (*GRCn    [i]) (31,  0, "GRC"     , 0xFFFFFFFF, "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_OCRCn; i++) {
        (*OCRCn   [i]) (31,  0, "OCR"     , 0xFFFFFFFF, "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_GMRCn; i++) {
        (*GMRCn   [i]) (31,  0, "GMRC"    , 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_NCNTCn; i++) {
        (*NCNTCn  [i]) (15,  0, "NCNTC"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_OCMRCn; i++) {
        (*OCMRCn  [i]) (31,  0, "OCMRC"   , 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["TIORC"]["IOC3"] = &Catu5_timerc_sub_regif::cb_TIORC_IOC3;
    mWrCbAPI["TCNTC"]["CNTC"] = &Catu5_timerc_sub_regif::cb_TCNTC_CNTC;
    InitLocalVal();
    msub_no = sub_no; // added for ver 0.080
}

/// Destructor: delete pointers
/// @return none
Catu5_timerc_sub_regif::~Catu5_timerc_sub_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Catu5_timerc_sub_regif::uint Catu5_timerc_sub_regif::bit_select(
                                    cuint val,    ///< [in] Writting address
                                    cuint start,  ///< [in] start bit position
                                    cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerc_sub_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                    const unsigned char *p_data,   ///< [in] Writing data
                                    cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerc_sub_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerc_sub_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                        const unsigned char *p_data,   ///< [in] Writing data
                                        cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerc_sub_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                        unsigned char *p_data,   ///< [out] Reading data
                                        cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerc_sub_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                            const unsigned char *p_data,  ///< [in] Writing data
                                            cuint size,                   ///< [in] Data size (byte)
                                            bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerc_sub_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                            unsigned char *p_data,   ///< [out] Reading data
                                            cuint size,              ///< [in]  Data size (byte)
                                            bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Catu5_timerc_sub_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                         unsigned char *p_data,          ///< [out] Reading data
                                         cuint size,                     ///< [in]  Data size (byte)
                                         cuint reg_index,                ///< [in] Register index
                                         bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Catu5_timerc_sub_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                         const unsigned char *p_data,      ///< [in] Writing data
                                         cuint size,                       ///< [in] Data size (byte)
                                         cuint reg_index,                  ///< [in] Register index
                                         bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Catu5_timerc_sub_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Catu5_timerc_sub_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Catu5_timerc_sub_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Catu5_timerc_sub_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Catu5_timerc_sub_regif::InitLocalVal()
{
    // Initialize local variables
    TSCRC_OCMFCC3 = 0x0;
    TSCRC_OCMFCC2 = 0x0;
    TSCRC_OCMFCC1 = 0x0;
    TSCRC_OCMFCC0 = 0x0;
    TSCRC_OVFCC = 0x0;
    TSCRC_IMFCC3 = 0x0;
    TSCRC_IMFCC2 = 0x0;
    TSCRC_IMFCC1 = 0x0;
    TSCRC_IMFCC0 = 0x0;
    TCRC_FOCMC3 = 0x0;
    TCRC_FOCMC2 = 0x0;
    TCRC_FOCMC1 = 0x0;
    TCRC_FOCMC0 = 0x0;
    TCRC_CLRCSELC = 0x0;
    TCRC_CLRC = 0x0;
    TCRC_FCMC3 = 0x0;
    TCRC_FCMC2 = 0x0;
    TCRC_FCMC1 = 0x0;
    TCRC_FCMC0 = 0x0;
    TCRC_PWM0 = 0x0;
    TCRC_CKSELC = 0x0;
    TSRC_OCMFC3 = 0x0;
    TSRC_OCMFC2 = 0x0;
    TSRC_OCMFC1 = 0x0;
    TSRC_OCMFC0 = 0x0;
    TSRC_OVFC = 0x0;
    TSRC_IMFC3 = 0x0;
    TSRC_IMFC2 = 0x0;
    TSRC_IMFC1 = 0x0;
    TSRC_IMFC0 = 0x0;
    TIORC_IOC3 = 0x0;
    TIORC_IOC2 = 0x0;
    TIORC_IOC1 = 0x0;
    TIORC_IOC0 = 0x0;
    TIERC_OCRCE3 = 0x0;
    TIERC_OCRCE2 = 0x0;
    TIERC_OCRCE1 = 0x0;
    TIERC_OCRCE0 = 0x0;
    TIERC_OVCE = 0x0;
    TIERC_GRCE3 = 0x0;
    TIERC_GRCE2 = 0x0;
    TIERC_GRCE1 = 0x0;
    TIERC_GRCE0 = 0x0;
    TCNTC_CNTC = 0x0;
    CUCRC_CUCRC = 0xFFFFFFFF;
    for(uint i = 0; i < emNUM_GRCn;  i++) {
        GRCn_GRC [i] = 0xFFFFFFFF;
    }
    for(uint i = 0; i < emNUM_OCRCn; i++) {
        OCRCn_OCR[i] = 0xFFFFFFFF;
    }
    RCR1C_RCR1C = 0x0;
    RCR2C_RCR2C = 0x0;
    for(uint i = 0; i < emNUM_NCNTCn; i++) {
        NCNTCn_NCNTC[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_NCRCn; i++) {
        NCRCn_NCRC[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_OCMRCn; i++) {
        OCMRCn_OCMRC[i] = 0xFFFFFFFF;
    }
    for(uint i = 0; i < emNUM_GMRCn; i++) {
        GMRCn_GMRC[i] = 0xFFFFFFFF;
    }
}

/// Update bit value to local value
/// @return None
void Catu5_timerc_sub_regif::UpdateLocalVal(cuint addr)
{
    if (addr == (0x0822 + msub_no*0x80)) {
        TSCRC_OCMFCC3              = (*TSCRC )["OCMFCC3"];
        TSCRC_OCMFCC2              = (*TSCRC )["OCMFCC2"];
        TSCRC_OCMFCC1              = (*TSCRC )["OCMFCC1"];
        TSCRC_OCMFCC0              = (*TSCRC )["OCMFCC0"];
        TSCRC_OVFCC                = (*TSCRC )["OVFCC" ];
        TSCRC_IMFCC3               = (*TSCRC )["IMFCC3"];
        TSCRC_IMFCC2               = (*TSCRC )["IMFCC2"];
        TSCRC_IMFCC1               = (*TSCRC )["IMFCC1"];
        TSCRC_IMFCC0               = (*TSCRC )["IMFCC0"];
        return;
    }
    if (addr == (0x0824 + msub_no*0x80)) {
        TCRC_FOCMC3                = (*TCRC  )["FOCMC3"];
        TCRC_FOCMC2                = (*TCRC  )["FOCMC2"];
        TCRC_FOCMC1                = (*TCRC  )["FOCMC1"];
        TCRC_FOCMC0                = (*TCRC  )["FOCMC0"];
        TCRC_CLRCSELC              = (*TCRC  )["CLRCSELC"];
        TCRC_CLRC                  = (*TCRC  )["CLRC"  ];
        TCRC_FCMC3                 = (*TCRC  )["FCMC3" ];
        TCRC_FCMC2                 = (*TCRC  )["FCMC2" ];
        TCRC_FCMC1                 = (*TCRC  )["FCMC1" ];
        TCRC_FCMC0                 = (*TCRC  )["FCMC0" ];
        TCRC_PWM0                  = (*TCRC  )["PWM0"  ];
        TCRC_CKSELC                = (*TCRC  )["CKSELC"];
        return;
    }
    if (addr == (0x0826 + msub_no*0x80)) {
        TSRC_OCMFC3                = (*TSRC  )["OCMFC3"];
        TSRC_OCMFC2                = (*TSRC  )["OCMFC2"];
        TSRC_OCMFC1                = (*TSRC  )["OCMFC1"];
        TSRC_OCMFC0                = (*TSRC  )["OCMFC0"];
        TSRC_OVFC                  = (*TSRC  )["OVFC"  ];
        TSRC_IMFC3                 = (*TSRC  )["IMFC3" ];
        TSRC_IMFC2                 = (*TSRC  )["IMFC2" ];
        TSRC_IMFC1                 = (*TSRC  )["IMFC1" ];
        TSRC_IMFC0                 = (*TSRC  )["IMFC0" ];
        return;
    }
    if (addr == (0x0828 + msub_no*0x80)) {
        TIORC_IOC3                 = (*TIORC )["IOC3"  ];
        TIORC_IOC2                 = (*TIORC )["IOC2"  ];
        TIORC_IOC1                 = (*TIORC )["IOC1"  ];
        TIORC_IOC0                 = (*TIORC )["IOC0"  ];
        return;
    }
    if (addr == (0x0834 + msub_no*0x80)) {
        TIERC_OCRCE3               = (*TIERC )["OCRCE3"];
        TIERC_OCRCE2               = (*TIERC )["OCRCE2"];
        TIERC_OCRCE1               = (*TIERC )["OCRCE1"];
        TIERC_OCRCE0               = (*TIERC )["OCRCE0"];
        TIERC_OVCE                 = (*TIERC )["OVCE"  ];
        TIERC_GRCE3                = (*TIERC )["GRCE3" ];
        TIERC_GRCE2                = (*TIERC )["GRCE2" ];
        TIERC_GRCE1                = (*TIERC )["GRCE1" ];
        TIERC_GRCE0                = (*TIERC )["GRCE0" ];
        return;
    }
    if (addr == (0x0838 + msub_no*0x80)) {
        TCNTC_CNTC                 = (*TCNTC )["CNTC"  ];
        return;
    }
    if (addr == (0x083C + msub_no*0x80)) {
        CUCRC_CUCRC                = (*CUCRC )["CUCRC" ];
        return;
    }
    if (((0x0840 + msub_no*0x80) <= addr) && (addr <= ((0x0840)+(4*3) + msub_no*0x80)) && ((addr-(0x0840 + msub_no*0x80))%4 == 0)) {
        uint i = (addr - (0x0840 + msub_no*0x80))/4;
        GRCn_GRC                  [i] = (*(GRCn  [i]))["GRC"   ];
        return;
    }
    if (((0x0850 + msub_no*0x80) <= addr) && (addr <= (0x0850)+(4*3) + msub_no*0x80) && ((addr - (0x0850 + msub_no*0x80))%4 == 0)) {
        uint i = (addr - (0x0850 + msub_no*0x80))/4;
        OCRCn_OCR                 [i] = (*(OCRCn [i]))["OCR"   ];
        return;
    }
    if (addr == (0x0860 + msub_no*0x80)) {
        RCR1C_RCR1C                = (*RCR1C )["RCR1C" ];
        return;
    }
    if (addr == (0x0862 + msub_no*0x80)) {
        RCR2C_RCR2C                = (*RCR2C )["RCR2C" ];
        return;
    }
    if (((0x0870 + msub_no*0x80) <= addr) && (addr <= ((0x0870 + msub_no*0x80)+(4*3))) && ((addr-(0x0870 + msub_no*0x80))%4 == 0)) {
        uint i = (addr - (0x0870 + msub_no*0x80))/4;
        NCNTCn_NCNTC              [i] = (*(NCNTCn[i]))["NCNTC" ];
        return;
    }
    if (((0x0872 + msub_no*0x80) <= addr) && (addr <= ((0x0872 + msub_no*0x80)+(4*3))) && ((addr-(0x0872 + msub_no*0x80))%4 == 0)) {
        uint i = (addr - (0x0872 + msub_no*0x80))/4;
        NCRCn_NCRC                [i] = (*(NCRCn [i]))["NCRC"  ];
        return;
    }
    if (((0x0880 + msub_no*0x80) <= addr) && (addr <= ((0x0880 + msub_no*0x80)+(8*3))) && ((addr-(0x0880 + msub_no*0x80))%8 == 0)) {
        uint i = (addr - (0x0880 + msub_no*0x80))/8;
        OCMRCn_OCMRC              [i] = (*(OCMRCn[i]))["OCMRC" ];
        return;
    }
    if (((0x0884 + msub_no*0x80) <= addr) && (addr <= ((0x0884 + msub_no*0x80)+(8*3))) && ((addr-(0x0884 + msub_no*0x80))%8 == 0)) {
        uint i = (addr - (0x0884 + msub_no*0x80))/8;
        GMRCn_GMRC                [i] = (*(GMRCn [i]))["GMRC"  ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Catu5_timerc_sub_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0022) {
        (*TSCRC )["OCMFCC3"] = TSCRC_OCMFCC3;
        (*TSCRC )["OCMFCC2"] = TSCRC_OCMFCC2;
        (*TSCRC )["OCMFCC1"] = TSCRC_OCMFCC1;
        (*TSCRC )["OCMFCC0"] = TSCRC_OCMFCC0;
        (*TSCRC )["OVFCC" ] = TSCRC_OVFCC;
        (*TSCRC )["IMFCC3"] = TSCRC_IMFCC3;
        (*TSCRC )["IMFCC2"] = TSCRC_IMFCC2;
        (*TSCRC )["IMFCC1"] = TSCRC_IMFCC1;
        (*TSCRC )["IMFCC0"] = TSCRC_IMFCC0;
        return;
    }
    if (addr == 0x0024) {
        (*TCRC  )["FOCMC3"] = TCRC_FOCMC3;
        (*TCRC  )["FOCMC2"] = TCRC_FOCMC2;
        (*TCRC  )["FOCMC1"] = TCRC_FOCMC1;
        (*TCRC  )["FOCMC0"] = TCRC_FOCMC0;
        (*TCRC  )["CLRCSELC"] = TCRC_CLRCSELC;
        (*TCRC  )["CLRC"  ] = TCRC_CLRC;
        (*TCRC  )["FCMC3" ] = TCRC_FCMC3;
        (*TCRC  )["FCMC2" ] = TCRC_FCMC2;
        (*TCRC  )["FCMC1" ] = TCRC_FCMC1;
        (*TCRC  )["FCMC0" ] = TCRC_FCMC0;
        (*TCRC  )["PWM0"  ] = TCRC_PWM0;
        (*TCRC  )["CKSELC"] = TCRC_CKSELC;
        return;
    }
    if (addr == 0x0026) {
        (*TSRC  )["OCMFC3"] = TSRC_OCMFC3;
        (*TSRC  )["OCMFC2"] = TSRC_OCMFC2;
        (*TSRC  )["OCMFC1"] = TSRC_OCMFC1;
        (*TSRC  )["OCMFC0"] = TSRC_OCMFC0;
        (*TSRC  )["OVFC"  ] = TSRC_OVFC;
        (*TSRC  )["IMFC3" ] = TSRC_IMFC3;
        (*TSRC  )["IMFC2" ] = TSRC_IMFC2;
        (*TSRC  )["IMFC1" ] = TSRC_IMFC1;
        (*TSRC  )["IMFC0" ] = TSRC_IMFC0;
        return;
    }
    if (addr == 0x0028) {
        (*TIORC )["IOC3"  ] = TIORC_IOC3;
        (*TIORC )["IOC2"  ] = TIORC_IOC2;
        (*TIORC )["IOC1"  ] = TIORC_IOC1;
        (*TIORC )["IOC0"  ] = TIORC_IOC0;
        return;
    }
    if (addr == 0x0034) {
        (*TIERC )["OCRCE3"] = TIERC_OCRCE3;
        (*TIERC )["OCRCE2"] = TIERC_OCRCE2;
        (*TIERC )["OCRCE1"] = TIERC_OCRCE1;
        (*TIERC )["OCRCE0"] = TIERC_OCRCE0;
        (*TIERC )["OVCE"  ] = TIERC_OVCE;
        (*TIERC )["GRCE3" ] = TIERC_GRCE3;
        (*TIERC )["GRCE2" ] = TIERC_GRCE2;
        (*TIERC )["GRCE1" ] = TIERC_GRCE1;
        (*TIERC )["GRCE0" ] = TIERC_GRCE0;
        return;
    }
    if (addr == 0x0038) {
        (*TCNTC )["CNTC"  ] = TCNTC_CNTC;
        return;
    }
    if (addr == 0x003C) {
        (*CUCRC )["CUCRC" ] = CUCRC_CUCRC;
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*3)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        (*(GRCn  [i]))["GRC"   ] = GRCn_GRC[i];
        return;
    }
    if ((0x0050 <= addr) && (addr <= (0x0050)+(4*3)) && ((addr-0x0050)%4 == 0)) {
        uint i = (addr - 0x0050)/4;
        (*(OCRCn [i]))["OCR"   ] = OCRCn_OCR[i];
        return;
    }
    if (addr == 0x0060) {
        (*RCR1C )["RCR1C" ] = RCR1C_RCR1C;
        return;
    }
    if (addr == 0x0062) {
        (*RCR2C )["RCR2C" ] = RCR2C_RCR2C;
        return;
    }
    if ((0x0070 <= addr) && (addr <= (0x0070)+(4*3)) && ((addr-0x0070)%4 == 0)) {
        uint i = (addr - 0x0070)/4;
        (*(NCNTCn[i]))["NCNTC" ] = NCNTCn_NCNTC[i];
        return;
    }
    if ((0x0072 <= addr) && (addr <= (0x0072)+(4*3)) && ((addr-0x0072)%4 == 0)) {
        uint i = (addr - 0x0072)/4;
        (*(NCRCn [i]))["NCRC"  ] = NCRCn_NCRC[i];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(8*3)) && ((addr-0x0080)%8 == 0)) {
        uint i = (addr - 0x0080)/8;
        (*(OCMRCn[i]))["OCMRC" ] = OCMRCn_OCMRC[i];
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(8*3)) && ((addr-0x0084)%8 == 0)) {
        uint i = (addr - 0x0084)/8;
        (*(GMRCn [i]))["GMRC"  ] = GMRCn_GMRC[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Catu5_timerc_sub_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Catu5_timerc_sub_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Catu5_timerc_sub_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Catu5_timerc_sub_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Catu5_timerc_sub_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Catu5_timerc_sub_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Catu5_timerc_sub_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Catu5_timerc_sub_regif::uint Catu5_timerc_sub_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Catu5_timerc_sub_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Catu5_timerc_sub_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Catu5_timerc_sub_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Catu5_timerc_sub_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }
    if(is_active) {
        //msub_no = 0x0;
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Catu5_timerc_sub_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Catu5_timerc_sub_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Catu5_timerc_sub_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
