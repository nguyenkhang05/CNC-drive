// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Command I/F generator (ver4.0)
//      $I
//      $Id$
//      $Id: modelinfo_parser.py,v 1.2 2011/03/17 05:08:51 sontran Exp
//
//
// Input file contents
//
//# -----------------------------------------------------------------------------
//# $Id$
//#
//# Copyright(c) 2020 Renesas Electronics Corporation
//# Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
//# RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
//# This program must be used solely for the purpose for which
//# it was furnished by Renesas Electronics Corporation. No part of this
//# program may be reproduced or disclosed to others, in any
//# form, without the prior written permission of Renesas Electronics
//# Corporation.
//# -----------------------------------------------------------------------------
//
//####################################################
//## For Register
//####################################################
//%MODULE adc_u2b
//    #              name     offset_size  
//    %%REG_INSTANCE reg_def  13           
//
//%REG_CHANNEL   reg_def
//  %%TITLE name         reg_name     wsize     rsize     length  offset  factor_start  factor_end  factor_index  factor_step  init         access  support  callback
//
//  %%REG   VCR          VCR          8|16|32   8|16|32   32      0x000      0            95            -            0x4        0           W|R      TRUE      -
//  %%REG   PWDVCR       PWDVCR       8|16|32   8|16|32   32      0x180      -            -             -            -          0           R        TRUE      -
//  %%REG   SGDIAGVCR    SGDIAGVCR    8|16|32   8|16|32   8       0x184      0            2             -            0x4        0           W|R      TRUE      -
//  %%REG   DR           DR           8|16|32   8|16|32   32      0x1A0      0            47            -            0x4        0           R        TRUE      -
//  %%REG   PWDDR        PWDDR        8|16|32   8|16|32   16      0x260      -            -             -            -          0           R        TRUE      -
//  %%REG   SGDIAGDR01   SGDIAGDR01   8|16|32   8|16|32   32      0x264      -            -             -            -          0           R        TRUE      -
//  %%REG   SGDIAGDR2    SGDIAGDR2    8|16|32   8|16|32   16      0x268      -            -             -            -          0           R        TRUE      -
//  %%REG   SGDIAGSRR    SGDIAGSRR    8|16|32   8|16|32   32      0x26C      -            -             -            -          0           R        TRUE      -
//  %%REG   DIR          DIR          8|16|32   8|16|32   32      0x280      0            95            -            0x4        0           R        TRUE      -
//  %%REG   PWDDIR       PWDDIR       8|16|32   8|16|32   32      0x400      -            -             -            -          0           R        TRUE      -
//  %%REG   SGDIAGDIR    SGDIAGDIR    8|16|32   8|16|32   32      0x404      0            2             -            0x4        0           R        TRUE      -
//  %%REG   SGSTCR       SGSTCR       8|16|32   8|16|32   8       0x440      0            4             -            0x40       0           W|R      TRUE      -
//  %%REG   SGSTPCR      SGSTPCR      8|16|32   8|16|32   8       0x444      0            4             -            0x40       0           D        TRUE      -
//  %%REG   SGCR         SGCR         8|16|32   8|16|32   8       0x450      0            4             -            0x40       0           W|R      TRUE      -
//  %%REG   SGVCPR       SGVCPR         16|32   8|16|32   16      0x454      0            4             -            0x40       0           D        TRUE      -
//  %%REG   SGMCYCR      SGMCYCR      8|16|32   8|16|32   8       0x458      0            4             -            0x40       0           W|R      TRUE      -
//  %%REG   SGSR         SGSR         8|16|32   8|16|32   8       0x460      0            4             -            0x40       0           R        TRUE      -
//  %%REG   ULLMSR       ULLMSR       8|16|32   8|16|32   8       0x470      0            4             -            0x40       0           D        TRUE      -
//  %%REG   SGVCSP       SGVCSP       8|16|32   8|16|32   8       0x474      0            4             -            0x40       0           D        TRUE       -
//  %%REG   SGVCEP       SGVCEP       8|16|32   8|16|32   8       0x478      0            4             -            0x40       0           D        TRUE       -
//  %%REG   ADTSTCR      ADTSTCR      8|16|32   8|16|32   8       0x508      3            4             -            0x40       0           W|R      TRUE      -
//  %%REG   ADTENDCR     ADTENDCR     8|16|32   8|16|32   8       0x50C      3            4             -            0x40       0           W|R      TRUE      -
//  %%REG   ADTIPR       ADTIPR       8|16|32   8|16|32   32      0x524      3            4             -            0x40       0           W|R      TRUE      -
//  %%REG   ADTPRR       ADTPRR       8|16|32   8|16|32   32      0x528      3            4             -            0x40       0x001FFFFF  W|R      TRUE      -
//  %%REG   PWDCR        PWDCR        8|16|32   8|16|32   8       0x580      -            -             -            -          0           W|R      TRUE      -
//  %%REG   PWDSGCR      PWDSGCR      8|16|32   8|16|32   8       0x584      -            -             -            -          0           W|R      TRUE      -    
//  %%REG   PWDSGSTCR    PWDSGSTCR    8|16|32   8|16|32   8       0x588      -            -             -            -          0           R:0|W    TRUE      -    
//  %%REG   PWDSGSR      PWDSGSR      8|16|32   8|16|32   8       0x58C      -            -             -            -          0           W|R      TRUE      -    
//  %%REG   SGDIAGSTCR   SGDIAGSTCR   8|16|32   8|16|32   8       0x5C0      -            -             -            -          0           R:0|W    TRUE      -
//  %%REG   SGDIAGSTPCR  SGDIAGSTPCR  8|16|32   8|16|32   8       0x5C4      -            -             -            -          0           R:0|W    TRUE      -    
//  %%REG   SGDIAGCR     SGDIAGCR     8|16|32   8|16|32   32      0x5D0      -            -             -            -          0           R:0|W    TRUE      -  
//  %%REG   SGDIAGPCCR0  SGDIAGPCCR0       32   8|16|32   32      0x5D4      -            -             -            -          0           W|R      TRUE      -    
//  %%REG   SGDIAGPCCR1  SGDIAGPCCR1       32   8|16|32   32      0x5D8      -            -             -            -          0           W|R      TRUE      -    
//  %%REG   SGDIAGSR     SGDIAGSR     8|16|32   8|16|32   16      0x5E0      -            -             -            -          0           R        TRUE      -    
//  %%REG   SGSTR        SGSTR        8|16|32   8|16|32   16      0x600      -            -             -            -          0           R        TRUE      -   
//  %%REG   ADHALTR      ADHALTR      8|16|32   8|16|32   8       0x640      -            -             -            -          0           W|R      TRUE      -
//  %%REG   ADCR1        ADCR1        8|16|32   8|16|32   8       0x644      -            -             -            -          0           D        TRUE      -
//  %%REG   ADCR2        ADCR2        8|16|32   8|16|32   8       0x648      -            -             -            -          0           D        TRUE      -
//  %%REG   SMPCR        SMPCR        8|16|32   8|16|32   32      0x64C      -            -             -            -          0           D        TRUE      - 
//  %%REG   MPXCURCR     MPXCURCR     8|16      8|16      8       0x650      -            -             -            -          0           W|R      TRUE      -
//  %%REG   MPXINTER     MPXINTER     8|16      8|16      8       0x654      -            -             -            -          0           D        TRUE      -
//  %%REG   MPXCURR1     MPXCURR1     8|16|32   8|16|32   32      0x658      -            -             -            -          0           R        TRUE      -
//  %%REG   MPXCURR2     MPXCURR2     8|16|32   8|16|32   8       0x65C      -            -             -            -          0           R        TRUE      -
//  %%REG   MPXCMDR      MPXCMDR      8|16|32   8|16|32   8       0x660      -            -             -            -          0           W|R      TRUE      -
//  %%REG   MPXOWR       MPXOWR       8|16|32   8|16|32   8       0x664      -            -             -            -          0           W|R      TRUE       -
//  %%REG   DFASENTSGER  DFASENTSGER  8|16|32   8|16|32   16      0x670      -            -             -            -          0           D        TRUE      -
//  %%REG   ADENDP       ADENDP       8|16|32   8|16|32   8       0x674      0            4             -            0x4        0           D        TRUE      -
//  %%REG   THSMPSTCR    THSMPSTCR    8|16|32   8|16|32   8       0x690      -            -             -            -          0           D        TRUE      -
//  %%REG   THSTPCR      THSTPCR      8|16|32   8|16|32   8       0x694      -            -             -            -          0           D        TRUE      -
//  %%REG   THCR         THCR         8|16|32   8|16|32   8       0x698      -            -             -            -          0           D        TRUE      -
//  %%REG   THAHLDSTCR   THAHLDSTCR   8|16|32   8|16|32   8       0x6A0      -            -             -            -          0           D        TRUE      -
//  %%REG   THBHLDSTCR   THBHLDSTCR   8|16|32   8|16|32   8       0x6A4      -            -             -            -          0           D        TRUE      -
//  %%REG   THGSR        THGSR        8|16|32   8|16|32   16      0x6B0      -            -             -            -          0           D        TRUE      -
//  %%REG   THER         THER         8|16|32   8|16|32   8       0x6B4      -            -             -            -          0           D        TRUE      -
//  %%REG   THACR        THACR        8|16|32   8|16|32   8       0x6C0      -            -             -            -          0           D        TRUE      -
//  %%REG   THBCR        THBCR        8|16|32   8|16|32   8       0x6C4      -            -             -            -          0           D        TRUE      -
//  %%REG   WAITTR       WAITTR       8|16      8|16      16      0x700      0            7             -            0x4        0           D        TRUE      -
//  %%REG   EMUCR        EMUCR        8|16|32   8|16|32   8       0x750      -            -             -            -          0           D        TRUE      -
//  %%REG   ADTSTRP1     ADTSTRP1     8|16|32   8|16|32   8       0x754      -            -             -            -          0           D        TRUE      -
//  %%REG   TDCR         TDCR         8|16|32   8|16|32   8       0x760      -            -             -            -          0           D        TRUE      -
//  %%REG   ODCR         ODCR         8|16|32   8|16|32   32      0x764      -            -             -            -          0           D        TRUE      -
//  %%REG   IEDCR        IEDCR        8|16|32   8|16|32   8       0x768      -            -             -            -          0           D        TRUE      -
//  %%REG   SFTCR        SFTCR        8|16|32   8|16|32   8       0x770      -            -             -            -          0           D        TRUE      -
//  %%REG   TOCCR        TOCCR        8|16|32   8|16|32   8       0x774      -            -             -            -          0           W|R      TRUE      -
//  %%REG   ULLMTBR      ULLMTBR      8|16|32   8|16|32   32      0x780      0            2             -            0x4        0x7FFE0000  D        TRUE      -
//  %%REG   TOCER        TOCER        8|16|32   8|16|32   8       0x790      -            -             -            -          0           R        TRUE      -
//  %%REG   SYNCER       SYNCER       8|16|32   8|16|32   8       0x794      -            -             -            -          0           R        TRUE      -
//  %%REG   ULER         ULER         8|16|32   8|16|32   8       0x798      -            -             -            -          0           D        TRUE      -
//  %%REG   OWER         OWER         8|16|32   8|16|32   8       0x79C      -            -             -            -          0           R        TRUE      -
//  %%REG   PER          PER          8|16|32   8|16|32   8       0x7A0      -            -             -            -          0           R        TRUE      -
//  %%REG   IDER         IDER         8|16|32   8|16|32   8       0x7A4      -            -             -            -          0           R        TRUE      -
//  %%REG   ECR          ECR          8|16|32   8|16|32   16      0x7A8      -            -             -            -          0           W|R      TRUE      -
//  %%REG   STPDCR       STPDCR       8|16|32   8|16|32   8       0x7B0      0            5             -            0x4        0           W|R      TRUE      -
//  %%REG   VCULLMTBR    VCULLMTBR         32   8|16|32   32      0x800      0            7             -            0x4        0           D        TRUE      -
//  %%REG   VCLMINTER1   VCLMINTER1   8|16|32   8|16|32   32      0x840      -            -             -            -          0           W|R      TRUE      -
//  %%REG   VCLMINTER2   VCLMINTER2   8|16|32   8|16|32   32      0x844      -            -             -            -          0           W|R      TRUE      -
//  %%REG   VCLMINTER3   VCLMINTER3   8|16|32   8|16|32   32      0x848      -            -             -            -          0           W|R      TRUE      -
//  %%REG   PWVCLMINTER  PWVCLMINTER  8|16|32   8|16|32   8       0x84C      -            -             -            -          0           W|R      TRUE      -
//  %%REG   SDVCLMINTER  SDVCLMINTER  8|16|32   8|16|32   8       0x850      -            -             -            -          0           W|R      TRUE      -
//  %%REG   VCLMSR1      VCLMSR1      8|16|32   8|16|32   32      0x860      -            -             -            -          0           D        TRUE      -
//  %%REG   VCLMSR2      VCLMSR2      8|16|32   8|16|32   32      0x864      -            -             -            -          0           D        TRUE      -
//  %%REG   VCLMSR3      VCLMSR3      8|16|32   8|16|32   32      0x868      -            -             -            -          0           D        TRUE      -
//  %%REG   PWVCLMSR     PWVCLMSR     8|16|32   8|16|32   32      0x86C      -            -             -            -          0           R        TRUE      -
//  %%REG   SDVCLMSR     SDVCLMSR     8|16|32   8|16|32   32      0x870      -            -             -            -          0           R        TRUE     -
//  %%REG   SGULCR       SGULCR       8|16|32   8|16|32   16      0x880      0            4             -            0x4        0           R        TRUE      -
//  %%REG   SGDIAGULCR   SGDIAGULCR   8|16|32   8|16|32   16      0x894      -            -             -            -          0           R        TRUE     -
//  %%REG   VCLMSCR1     VCLMSCR1     8|16|32   8|16|32   32      0x8A0      -            -             -            -          0           D        TRUE      -
//  %%REG   VCLMSCR2     VCLMSCR2     8|16|32   8|16|32   32      0x8A4      -            -             -            -          0           D        TRUE      -
//  %%REG   VCLMSCR3     VCLMSCR3     8|16|32   8|16|32   32      0x8A8      -            -             -            -          0           D        TRUE      -
//  %%REG   PWVCLMSCR    PWVCLMSCR    8|16|32   8|16|32   8       0x8AC      -            -             -            -          0           R:0|W    TRUE      -
//  %%REG   SDVCLMSCR    SDVCLMSCR    8|16|32   8|16|32   8       0x8B0      -            -             -            -          0           R:0|W    TRUE     -
//  %%REG   SGULCCR      SGULCCR      8|16|32   8|16|32   8       0x8B4      -            -             -            -          0           R:0|W    TRUE      -
//  %%REG   VCLMASCR     VCLMASCR     8|16|32   8|16|32   8       0x8B8      -            -             -            -          0           R:0|W    TRUE      -
//  %%REG   TRMCR        TRMCR        8|16|32   8|16|32   16      0x8C0      -            -             -            -          0           -        TRUE      - 
//  %%REG   ADTSTRA      ADTSTRA      8|16|32   8|16|32   32      0x8C4      -            -             -            -          0           W|R      TRUE      - 
//  %%REG   ADTSTRB      ADTSTRB      8|16|32   8|16|32   16      0x8C8      -            -             -            -          0           W|R      TRUE      - 
//  %%REG   ADTSTRC      ADTSTRC      8|16|32   8|16|32   16      0x8CC      -            -             -            -          0           W|R      TRUE      - 
//  %%REG   ADTSTRD      ADTSTRD      8|16|32   8|16|32   8       0x8D0      -            -             -            -          0           W|R      TRUE      - 
//  %%REG   SGTSEL       SGTSEL       8|16|32   8|16|32   32      0x1000     0            4             -            0x4        0           W|R      TRUE      - 
//
//%REG_NAME  VCR
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       VCULLMTBS  31      28        0       W|R         TRUE        -           -
//   %%BIT       WTTS       27      24        0       W|R         TRUE        -           -
//   %%BIT       GTMENT     20      20        0       W|R         TRUE        -           - 
//   %%BIT       GTMTAG     19      16        0       W|R         TRUE        -           - 
//   %%BIT       CNVCLS     14      11        0       W|R         TRUE        -           -
//   %%BIT       MPXV       10      8         0       W|R         TRUE        -           -
//   %%BIT       ADIE       7       7         0       W|R         TRUE        -           - 
//   %%BIT       GCTRL      5       0         0       W|R         TRUE        W           - 
//
//%REG_NAME  PWDVCR
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       WTTS       19      16        0       R           TRUE        -           -
//   %%BIT       MPXE       15      15        0       R           TRUE        -           -
//   %%BIT       MPXV       14      12        0       R           TRUE        -           -
//   %%BIT       VCULLMTBS  11      8         0       R           TRUE        -           -
//   %%BIT       GCTRL      5       0         0       R           TRUE        -           -
//
//%REG_NAME  SGDIAGVCR
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       CNVCLS     3       0         0       W|R         TRUE        W           -
//
//%REG_NAME  DR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       DR1        31      16        0       R           TRUE        -
//   %%BIT       DR0        15      0         0       R           TRUE        -
//
//%REG_NAME  PWDDR
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       PWDDR      15      0         0       R           TRUE        -           -
//
//%REG_NAME  SGDIAGDR01
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       SGDIAGDR1  31      16        0       R           TRUE        -           -
//   %%BIT       SGDIAGDR0  15      0         0       R           TRUE        -           -
//
//%REG_NAME  SGDIAGDR2
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       SGDIAGDR2  15      0         0       R           TRUE        -           -
//
//%REG_NAME  SGDIAGSRR
//   %%TITLE     name       upper   lower     init    access      support     callback    value    
//   %%BIT       SRR1       31      16        0       R           TRUE        -           -
//   %%BIT       SRR0       15      0         0       R           TRUE        R           -
//
//%REG_NAME  DIR       
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MPXE       31      31        0       R           TRUE        -         
//   %%BIT       MPXV       30      28        0       R           TRUE        -         
//   %%BIT       IDEF       26      26        0       R           TRUE        -         
//   %%BIT       WFLAG      25      25        0       R           TRUE        -         
//   %%BIT       PRTY       24      24        0       R           TRUE        -
//   %%BIT       ID         21      16        0       R           TRUE        -
//   %%BIT       DRn        15      0         0       R           TRUE        -
//
//%REG_NAME  PWDDIR       
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MPXE       31      31        0       R           TRUE        -         
//   %%BIT       MPXV       30      28        0       R           TRUE        -         
//   %%BIT       IDEF       26      26        0       R           TRUE        -         
//   %%BIT       WFLAG      25      25        0       R           TRUE        -         
//   %%BIT       PRTY       24      24        0       R           TRUE        -
//   %%BIT       ID         21      16        0       R           TRUE        -
//   %%BIT       PWDDR      15      0         0       R           TRUE        -
//
//%REG_NAME  SGDIAGDIR       
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       IDEF       26      26        0       R           TRUE       -         
//   %%BIT       WFLAG      25      25        0       R           TRUE       -         
//   %%BIT       PRTY       24      24        0       R           TRUE       -
//   %%BIT       ID         21      16        0       R           TRUE       -
//   %%BIT       SGDIAGDRk  15      0         0       R           TRUE       -
//
//%REG_NAME  SGSTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGST       0       0         0       W|R         TRUE        W
//
//%REG_NAME  SGSTPCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGSTP      0       0         0       D           TRUE        W
//
//%REG_NAME  SGCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTSTARTE  7       7         0       W|R         TRUE        -
//   %%BIT       ADSTARTE   6       6         0       W|R         TRUE        -
//   %%BIT       SCANMD     5       5         0       W|R         TRUE        -
//   %%BIT       ADIE       4       4         0       W|R         TRUE        W
//   %%BIT       TRGMD      1       0         0       W|R         TRUE        -
//
//%REG_NAME  SGVCPR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VCEP       14      8         0       D           TRUE        -
//   %%BIT       VCSP       6       0         0       D           TRUE        W
//
//%REG_NAME  SGMCYCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MCYC       7       0         0       W|R         TRUE        W
//
//%REG_NAME  SGSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTACT     2       2         0       R           TRUE        -
//   %%BIT       SGACT      1       1         0       R           TRUE        -
//
//%REG_NAME  ULLMSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ULS        1       0         0       D           TRUE        -
//
//%REG_NAME SGVCSP
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VCSP       6       0         0       D           TRUE         W
//
//%REG_NAME SGVCEP
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VCEP       6       0         0       D           TRUE         W
//
//%REG_NAME  ADTSTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTST      0       0         0       W|R         TRUE        W
//
//%REG_NAME  ADTENDCR  
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTEND     0       0         0       W|R         TRUE        W
//
//%REG_NAME  ADTIPR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTIP      20      0         0       W|R         TRUE        W
//
//%REG_NAME  ADTPRR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADTPR      20      0         2097151 W|R         TRUE        W
//
//%REG_NAME  PWDCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       PWE        0       0         0       W|R         TRUE        W
//
//%REG_NAME  PWDSGCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TRGMD      0       0         0       W|R         TRUE        W
//
//%REG_NAME  PWDSGSTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGST       0       0         0       R:0|W       TRUE        -
//
//%REG_NAME  PWDSGSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       PWSGC      0       0         0       W|R         TRUE        -
//
//%REG_NAME  SGDIAGSTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGST       0       0         0       R:0|W       TRUE       -
//
//%REG_NAME  SGDIAGSTPCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGSTP      0       0         0       R:0|W       TRUE       -
//
//%REG_NAME  SGDIAGCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VCULLMTBS1 23      20        0       W|R         TRUE       -
//   %%BIT       VCULLMTBS0 19      16        0       W|R         TRUE       -
//   %%BIT       SMD        12      12        0       W|R         TRUE       -
//   %%BIT       SDPS       9       9         0       W|R         TRUE       -
//   %%BIT       SDIE       8       8         0       W|R         TRUE       -
//   %%BIT       TRGMD      0       0         0       W|R         TRUE       W
//
//%REG_NAME  SGDIAGPCCR0
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SDPCE31    31      31        0       W|R         TRUE       -
//   %%BIT       SDPCE30    30      30        0       W|R         TRUE       -
//   %%BIT       SDPCE29    29      29        0       W|R         TRUE       -
//   %%BIT       SDPCE28    28      28        0       W|R         TRUE       -
//   %%BIT       SDPCE27    27      27        0       W|R         TRUE       -
//   %%BIT       SDPCE26    26      26        0       W|R         TRUE       -
//   %%BIT       SDPCE25    25      25        0       W|R         TRUE       -
//   %%BIT       SDPCE24    24      24        0       W|R         TRUE       -
//   %%BIT       SDPCE23    23      23        0       W|R         TRUE       -
//   %%BIT       SDPCE22    22      22        0       W|R         TRUE       -
//   %%BIT       SDPCE21    21      21        0       W|R         TRUE       -
//   %%BIT       SDPCE20    20      20        0       W|R         TRUE       -
//   %%BIT       SDPCE19    19      19        0       W|R         TRUE       -
//   %%BIT       SDPCE18    18      18        0       W|R         TRUE       -
//   %%BIT       SDPCE17    17      17        0       W|R         TRUE       -
//   %%BIT       SDPCE16    16      16        0       W|R         TRUE       -
//   %%BIT       SDPCE15    15      15        0       W|R         TRUE       -
//   %%BIT       SDPCE14    14      14        0       W|R         TRUE       -
//   %%BIT       SDPCE13    13      13        0       W|R         TRUE       -
//   %%BIT       SDPCE12    12      12        0       W|R         TRUE       -
//   %%BIT       SDPCE11    11      11        0       W|R         TRUE       -
//   %%BIT       SDPCE10    10      10        0       W|R         TRUE       -
//   %%BIT       SDPCE9     9       9         0       W|R         TRUE       -
//   %%BIT       SDPCE8     8       8         0       W|R         TRUE       -
//   %%BIT       SDPCE7     7       7         0       W|R         TRUE       -
//   %%BIT       SDPCE6     6       6         0       W|R         TRUE       -
//   %%BIT       SDPCE5     5       5         0       W|R         TRUE       -
//   %%BIT       SDPCE4     4       4         0       W|R         TRUE       -
//   %%BIT       SDPCE3     3       3         0       W|R         TRUE       -
//   %%BIT       SDPCE2     2       2         0       W|R         TRUE       -
//   %%BIT       SDPCE1     1       1         0       W|R         TRUE       -
//   %%BIT       SDPCE0     0       0         0       W|R         TRUE       W
//
//%REG_NAME  SGDIAGPCCR1
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SDPCE63    31      31        0       W|R         TRUE       -
//   %%BIT       SDPCE62    30      30        0       W|R         TRUE       -
//   %%BIT       SDPCE61    29      29        0       W|R         TRUE       -
//   %%BIT       SDPCE60    28      28        0       W|R         TRUE       -
//   %%BIT       SDPCE59    27      27        0       W|R         TRUE       -
//   %%BIT       SDPCE58    26      26        0       W|R         TRUE       -
//   %%BIT       SDPCE57    25      25        0       W|R         TRUE       -
//   %%BIT       SDPCE56    24      24        0       W|R         TRUE       -
//   %%BIT       SDPCE55    23      23        0       W|R         TRUE       -
//   %%BIT       SDPCE54    22      22        0       W|R         TRUE       -
//   %%BIT       SDPCE53    21      21        0       W|R         TRUE       -
//   %%BIT       SDPCE52    20      20        0       W|R         TRUE       -
//   %%BIT       SDPCE51    19      19        0       W|R         TRUE       -
//   %%BIT       SDPCE50    18      18        0       W|R         TRUE       -
//   %%BIT       SDPCE49    17      17        0       W|R         TRUE       -
//   %%BIT       SDPCE48    16      16        0       W|R         TRUE       -
//   %%BIT       SDPCE47    15      15        0       W|R         TRUE       -
//   %%BIT       SDPCE46    14      14        0       W|R         TRUE       -
//   %%BIT       SDPCE45    13      13        0       W|R         TRUE       -
//   %%BIT       SDPCE44    12      12        0       W|R         TRUE       -
//   %%BIT       SDPCE43    11      11        0       W|R         TRUE       -
//   %%BIT       SDPCE42    10      10        0       W|R         TRUE       -
//   %%BIT       SDPCE41    9       9         0       W|R         TRUE       -
//   %%BIT       SDPCE40    8       8         0       W|R         TRUE       -
//   %%BIT       SDPCE39    7       7         0       W|R         TRUE       -
//   %%BIT       SDPCE38    6       6         0       W|R         TRUE       -
//   %%BIT       SDPCE37    5       5         0       W|R         TRUE       -
//   %%BIT       SDPCE36    4       4         0       W|R         TRUE       -
//   %%BIT       SDPCE35    3       3         0       W|R         TRUE       -
//   %%BIT       SDPCE34    2       2         0       W|R         TRUE       -
//   %%BIT       SDPCE33    1       1         0       W|R         TRUE       -
//   %%BIT       SDPCE32    0       0         0       W|R         TRUE       W
//
//%REG_NAME  SGDIAGSR
//   %%TITLE     name       upper   lower     init    access      support     callback   
//   %%BIT       PCP        13      8         0       R           TRUE       -
//   %%BIT       SDACT      1       1         0       R           TRUE       R
//
//%REG_NAME  SGSTR
//   %%TITLE     name       upper   lower     init    access      support     callback   
//   %%BIT       ADTACT     13      12        0       R           TRUE        -
//   %%BIT       SHACT      7       7         0       R           TRUE        -
//   %%BIT       SVSACT     6       6         0       R           TRUE        -
//   %%BIT       SGACT      5       1         0       R           TRUE        -
//   %%BIT       SDACT      0       0         0       R           TRUE        -
//
//%REG_NAME  ADHALTR
//   %%TITLE     name       upper   lower     init    access      support     callback   
//   %%BIT       HALT        0        0       0       W|R         TRUE         W
//
//%REG_NAME  ADCR1
//   %%TITLE     name       upper   lower     init    access      support     callback
//   %%BIT       SUSMTD      1        0       0       D           TRUE         W
//
//%REG_NAME  ADCR2
//   %%TITLE     name       upper   lower     init    access      support     callback
//   %%BIT       DFMT       6        4        0       D           TRUE         W
//   %%BIT       ADDNT      0        0        0       D           TRUE         -
//
//%REG_NAME  SMPCR   
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       EXSMPT     23      16        0       D           TRUE        -
//   %%BIT       BUFAMPD    15      15        0       D           TRUE        -
//   %%BIT       SMPTS      12      12        0       D           TRUE        -
//   %%BIT       SMPT       7       0         0       D           TRUE        W
//
//%REG_NAME  MPXCURCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MSKCFMT    3       0         0       W|R         TRUE        W
//
//%REG_NAME  MPXINTER
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADMPXIE    0       0         0       D           TRUE        W
//
//%REG_NAME  MPXCURR1
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MSKC       31      16        0       R           TRUE        -
//   %%BIT       MPXCMD     15      8         0       R           TRUE        -
//   %%BIT       MPXCUR     4       0         0       R           TRUE        -
//
//%REG_NAME  MPXCURR2
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MPXCUR     2       0         0       R           TRUE        R
//
//%REG_NAME  MPXCMDR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       MPXCMD     7       0         0       W|R         TRUE        W
//
//%REG_NAME MPXOWR
//   %%TITLE     name       upper   lower     init    access      support     callback    value
//   %%BIT       MPXOW      3       0         0       W|R         TRUE        W           "0x0-0xA"
//
//#%REG_NAME  DFASENTSGER
//#   %%TITLE     name       upper   lower     init    access      support     callback    
//#   %%BIT       DFENTSG4E  12      12        0       D           TRUE        -
//#   %%BIT       DFENTSG3E  11      11        0       D           TRUE        -
//#   %%BIT       DFENTSG2E  10      10        0       D           TRUE        -
//#   %%BIT       DFENTSG1E  9       9         0       D           TRUE        -
//#   %%BIT       DFENTSG0E  8       8         0       D           TRUE        -
//#   %%BIT       ASENTSG4E  4       4         0       D           TRUE        -
//#   %%BIT       ASENTSG3E  3       3         0       D           TRUE        -
//#   %%BIT       ASENTSG2E  2       2         0       D           TRUE        -
//#   %%BIT       ASENTSG1E  1       1         0       D           TRUE        -
//#   %%BIT       ASENTSG0E  0       0         0       D           TRUE        W
//
//%REG_NAME  GTMENTSGER
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       GTMENTSG4E 4       4         0       D           TRUE        -
//   %%BIT       GTMENTSG3E 3       3         0       D           TRUE        -
//   %%BIT       GTMENTSG2E 2       2         0       D           TRUE        -
//   %%BIT       GTMENTSG1E 1       1         0       D           TRUE        -
//   %%BIT       GTMENTSG0E 0       0         0       D           TRUE        W
//
//%REG_NAME  ADENDP
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ENDP       6       0         0       D           TRUE        W
//
//%REG_NAME  THSMPSTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SMPST       0       0        0       D           TRUE        W
//
//%REG_NAME  THSTPCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       THSTP        0       0       0       D           TRUE        W
//
//%REG_NAME  THCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ASMPMSK      0       0       0       D           TRUE        W
//
//%REG_NAME  THAHLDSTCR  
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       HLDST      0       0         0       D           TRUE        W
//
//%REG_NAME  THBHLDSTCR  
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       HLDST      0       0         0       D           TRUE         W
//
//%REG_NAME  THGSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TH5GS       10      10       0       D           TRUE        -
//   %%BIT       TH4GS       8       8        0       D           TRUE        -
//   %%BIT       TH3GS       6       6        0       D           TRUE        -
//   %%BIT       TH2GS       4       4        0       D           TRUE        -
//   %%BIT       TH1GS       2       2        0       D           TRUE        -
//   %%BIT       TH0GS       0       0        0       D           TRUE        W
//
//%REG_NAME  THER
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TH5E       5       5         0       D           TRUE        -
//   %%BIT       TH4E       4       4         0       D           TRUE        -
//   %%BIT       TH3E       3       3         0       D           TRUE        -
//   %%BIT       TH2E       2       2         0       D           TRUE        -
//   %%BIT       TH1E       1       1         0       D           TRUE        -
//   %%BIT       TH0E       0       0         0       D           TRUE        W
//
//%REG_NAME  THACR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       HLDCTE     5       5         0       D           TRUE        -
//   %%BIT       HLDTE      4       4         0       D           TRUE        -
//   %%BIT       SGS        1       0         0       D           TRUE        W
//
//%REG_NAME  THBCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       HLDCTE     5       5         0       D           TRUE         -
//   %%BIT       HLDTE      4       4         0       D           TRUE         -
//   %%BIT       SGS        1       0         0       D           TRUE         W
//
//%REG_NAME  WAITTR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       WAITTIME   13      0         0       W|R         TRUE        W
//
//%REG_NAME  EMUCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SVSDIS     0       0         0       W|R         TRUE         W
//
//%REG_NAME  TDCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TDE        7        7        0       D           TRUE        -
//   %%BIT       TDLV       1        0        0       D           TRUE        W 
//
//%REG_NAME  ODCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ODDE       31      31        0       D           TRUE        -
//   %%BIT       WADDE      8       8         0       D           TRUE        W
//   %%BIT       ODE        7       7         0       D           TRUE        -
//   %%BIT       ODPW       4       0         0       D           TRUE        -
//
//%REG_NAME  IEDCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       IDSCE      0       0         0       W|R         TRUE        -
//
//%REG_NAME  SFTCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TOCEIE     6       6         0       D           TRUE        -
//   %%BIT       SYNCEIE    5       5         0       D           TRUE        -
//   %%BIT       RDCLRE     4       4         0       D           TRUE        -
//   %%BIT       ULEIE      3       3         0       D           TRUE        -
//   %%BIT       OWEIE      2       2         0       D           TRUE        -
//   %%BIT       PEIE       1       1         0       D           TRUE        -
//   %%BIT       IDEIE      0       0         0       D           TRUE        W
//
//%REG_NAME  TOCCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TOCE       0       0         0       W|R         TRUE        W
//
//%REG_NAME  ULLMTBR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ULMTB      31      16        32766   D           TRUE        -
//   %%BIT       LLMTB      15      0         0       D           TRUE        -
//
//%REG_NAME  TOCER
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TOCESG     5       1         0       R           TRUE        -
//   %%BIT       TOCESD     0       0         0       R           TRUE        R
//
//%REG_NAME  SYNCER
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SYNCE       7       7        0       R           TRUE         -
//
//%REG_NAME  ULER      
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ULE        7       7         0       D           TRUE        -
//   %%BIT       ULECAP     6       0         0       D           TRUE        -
//
//%REG_NAME  OWER      
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       OWE        7       7         0       R           TRUE        -
//   %%BIT       OWECAP     6       0         0       R           TRUE        -
//
//%REG_NAME  PER       
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT        PE        7       7         0       R           TRUE        -
//   %%BIT        PECAP     6       0         0       R           TRUE        -
//
//%REG_NAME  IDER      
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       IDE         7       7        0       R           TRUE        -
//   %%BIT       IDECAP      6       0        0       R           TRUE        -
//
//%REG_NAME  ECR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TOCESGC    13       9        0       W|R         TRUE        -
//   %%BIT       TOCESDC    8        8        0       W|R         TRUE        -
//   %%BIT       SYNCEC     5        5        0       W|R         TRUE        -
//   %%BIT       ULEC       3        3        0       W|R         TRUE        -
//   %%BIT       OWEC       2        2        0       W|R         TRUE        -
//   %%BIT       PEC        1        1        0       W|R         TRUE        -
//   %%BIT       IDEC       0        0        0       W|R         TRUE        W
//
//%REG_NAME  STPDCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SPDE       0        0        0       W|R         TRUE        W
//
//
//%REG_NAME  VCULLMTBR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VCULMTB    31      16        32766   D           TRUE        W
//   %%BIT       VCLLMTB    15      0         0       D           TRUE        -
//
//%REG_NAME  VCLMINTER1
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADUL31IE   31      31        0       W|R         TRUE        -       
//   %%BIT       ADUL30IE   30      30        0       W|R         TRUE        -
//   %%BIT       ADUL29IE   29      29        0       W|R         TRUE        -
//   %%BIT       ADUL28IE   28      28        0       W|R         TRUE        -
//   %%BIT       ADUL27IE   27      27        0       W|R         TRUE        -
//   %%BIT       ADUL26IE   26      26        0       W|R         TRUE        -
//   %%BIT       ADUL25IE   25      25        0       W|R         TRUE        -
//   %%BIT       ADUL24IE   24      24        0       W|R         TRUE        -
//   %%BIT       ADUL23IE   23      23        0       W|R         TRUE        -
//   %%BIT       ADUL22IE   22      22        0       W|R         TRUE        -
//   %%BIT       ADUL21IE   21      21        0       W|R         TRUE        -
//   %%BIT       ADUL20IE   20      20        0       W|R         TRUE        -
//   %%BIT       ADUL19IE   19      19        0       W|R         TRUE        -
//   %%BIT       ADUL18IE   18      18        0       W|R         TRUE        -
//   %%BIT       ADUL17IE   17      17        0       W|R         TRUE        -
//   %%BIT       ADUL16IE   16      16        0       W|R         TRUE        -
//   %%BIT       ADUL15IE   15      15        0       W|R         TRUE        -
//   %%BIT       ADUL14IE   14      14        0       W|R         TRUE        -
//   %%BIT       ADUL13IE   13      13        0       W|R         TRUE        -
//   %%BIT       ADUL12IE   12      12        0       W|R         TRUE        -
//   %%BIT       ADUL11IE   11      11        0       W|R         TRUE        -
//   %%BIT       ADUL10IE   10      10        0       W|R         TRUE        -
//   %%BIT       ADUL09IE   9       9         0       W|R         TRUE        -
//   %%BIT       ADUL08IE   8       8         0       W|R         TRUE        -
//   %%BIT       ADUL07IE   7       7         0       W|R         TRUE        -
//   %%BIT       ADUL06IE   6       6         0       W|R         TRUE        -
//   %%BIT       ADUL05IE   5       5         0       W|R         TRUE        -
//   %%BIT       ADUL04IE   4       4         0       W|R         TRUE        -
//   %%BIT       ADUL03IE   3       3         0       W|R         TRUE        -
//   %%BIT       ADUL02IE   2       2         0       W|R         TRUE        -
//   %%BIT       ADUL01IE   1       1         0       W|R         TRUE        -
//   %%BIT       ADUL00IE   0       0         0       W|R         TRUE        W
//
//%REG_NAME  VCLMINTER2
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADUL63IE   31      31        0       W|R         TRUE        -
//   %%BIT       ADUL62IE   30      30        0       W|R         TRUE        -
//   %%BIT       ADUL61IE   29      29        0       W|R         TRUE        -
//   %%BIT       ADUL60IE   28      28        0       W|R         TRUE        -
//   %%BIT       ADUL59IE   27      27        0       W|R         TRUE        -
//   %%BIT       ADUL58IE   26      26        0       W|R         TRUE        -
//   %%BIT       ADUL57IE   25      25        0       W|R         TRUE        -
//   %%BIT       ADUL56IE   24      24        0       W|R         TRUE        -
//   %%BIT       ADUL55IE   23      23        0       W|R         TRUE        -
//   %%BIT       ADUL54IE   22      22        0       W|R         TRUE        -
//   %%BIT       ADUL53IE   21      21        0       W|R         TRUE        -
//   %%BIT       ADUL52IE   20      20        0       W|R         TRUE        -
//   %%BIT       ADUL51IE   19      19        0       W|R         TRUE        -
//   %%BIT       ADUL50IE   18      18        0       W|R         TRUE        -
//   %%BIT       ADUL49IE   17      17        0       W|R         TRUE        -
//   %%BIT       ADUL48IE   16      16        0       W|R         TRUE        -
//   %%BIT       ADUL47IE   15      15        0       W|R         TRUE        -
//   %%BIT       ADUL46IE   14      14        0       W|R         TRUE        -
//   %%BIT       ADUL45IE   13      13        0       W|R         TRUE        -
//   %%BIT       ADUL44IE   12      12        0       W|R         TRUE        -
//   %%BIT       ADUL43IE   11      11        0       W|R         TRUE        -
//   %%BIT       ADUL42IE   10      10        0       W|R         TRUE        -
//   %%BIT       ADUL41IE   9       9         0       W|R         TRUE        -
//   %%BIT       ADUL40IE   8       8         0       W|R         TRUE        -
//   %%BIT       ADUL39IE   7       7         0       W|R         TRUE        -
//   %%BIT       ADUL38IE   6       6         0       W|R         TRUE        -
//   %%BIT       ADUL37IE   5       5         0       W|R         TRUE        -
//   %%BIT       ADUL36IE   4       4         0       W|R         TRUE        -
//   %%BIT       ADUL35IE   3       3         0       W|R         TRUE        -
//   %%BIT       ADUL34IE   2       2         0       W|R         TRUE        -
//   %%BIT       ADUL33IE   1       1         0       W|R         TRUE        -
//   %%BIT       ADUL32IE   0       0         0       W|R         TRUE        W
//
//%REG_NAME  VCLMINTER3
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADUL95IE   31      31        0       W|R         TRUE        -
//   %%BIT       ADUL94IE   30      30        0       W|R         TRUE        -
//   %%BIT       ADUL93IE   29      29        0       W|R         TRUE        -
//   %%BIT       ADUL92IE   28      28        0       W|R         TRUE        -
//   %%BIT       ADUL91IE   27      27        0       W|R         TRUE        -
//   %%BIT       ADUL90IE   26      26        0       W|R         TRUE        -
//   %%BIT       ADUL89IE   25      25        0       W|R         TRUE        -
//   %%BIT       ADUL88IE   24      24        0       W|R         TRUE        -
//   %%BIT       ADUL87IE   23      23        0       W|R         TRUE        -
//   %%BIT       ADUL86IE   22      22        0       W|R         TRUE        -
//   %%BIT       ADUL85IE   21      21        0       W|R         TRUE        -
//   %%BIT       ADUL84IE   20      20        0       W|R         TRUE        -
//   %%BIT       ADUL83IE   19      19        0       W|R         TRUE        -
//   %%BIT       ADUL82IE   18      18        0       W|R         TRUE        -
//   %%BIT       ADUL81IE   17      17        0       W|R         TRUE        -
//   %%BIT       ADUL80IE   16      16        0       W|R         TRUE        -
//   %%BIT       ADUL79IE   15      15        0       W|R         TRUE        -
//   %%BIT       ADUL78IE   14      14        0       W|R         TRUE        -
//   %%BIT       ADUL77IE   13      13        0       W|R         TRUE        -
//   %%BIT       ADUL76IE   12      12        0       W|R         TRUE        -
//   %%BIT       ADUL75IE   11      11        0       W|R         TRUE        -
//   %%BIT       ADUL74IE   10      10        0       W|R         TRUE        -
//   %%BIT       ADUL73IE   9       9         0       W|R         TRUE        -
//   %%BIT       ADUL72IE   8       8         0       W|R         TRUE        -
//   %%BIT       ADUL71IE   7       7         0       W|R         TRUE        -
//   %%BIT       ADUL70IE   6       6         0       W|R         TRUE        -
//   %%BIT       ADUL69IE   5       5         0       W|R         TRUE        -
//   %%BIT       ADUL68IE   4       4         0       W|R         TRUE        -
//   %%BIT       ADUL67IE   3       3         0       W|R         TRUE        -
//   %%BIT       ADUL66IE   2       2         0       W|R         TRUE        -
//   %%BIT       ADUL65IE   1       1         0       W|R         TRUE        -
//   %%BIT       ADUL64IE   0       0         0       W|R         TRUE        W
//
//%REG_NAME  PWVCLMINTER
//   %%TITLE     name       upper   lower     init    access      support     callback
//   %%BIT       PWADULIE   0       0         0       W|R         TRUE        W
//
//%REG_NAME  SDVCLMINTER
//   %%TITLE     name       upper   lower     init    access      support     callback
//   %%BIT       SDADULIE   0       0         0       W|R         TRUE        W
//
//%REG_NAME  VCLMSR1
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC31LMS    31      31        0       D           TRUE        -       
//   %%BIT       VC30LMS    30      30        0       D           TRUE        -
//   %%BIT       VC29LMS    29      29        0       D           TRUE        -
//   %%BIT       VC28LMS    28      28        0       D           TRUE        -
//   %%BIT       VC27LMS    27      27        0       D           TRUE        -
//   %%BIT       VC26LMS    26      26        0       D           TRUE        -
//   %%BIT       VC25LMS    25      25        0       D           TRUE        -
//   %%BIT       VC24LMS    24      24        0       D           TRUE        -
//   %%BIT       VC23LMS    23      23        0       D           TRUE        -
//   %%BIT       VC22LMS    22      22        0       D           TRUE        -
//   %%BIT       VC21LMS    21      21        0       D           TRUE        -
//   %%BIT       VC20LMS    20      20        0       D           TRUE        -
//   %%BIT       VC19LMS    19      19        0       D           TRUE        -
//   %%BIT       VC18LMS    18      18        0       D           TRUE        -
//   %%BIT       VC17LMS    17      17        0       D           TRUE        -
//   %%BIT       VC16LMS    16      16        0       D           TRUE        -
//   %%BIT       VC15LMS    15      15        0       D           TRUE        -
//   %%BIT       VC14LMS    14      14        0       D           TRUE        -
//   %%BIT       VC13LMS    13      13        0       D           TRUE        -
//   %%BIT       VC12LMS    12      12        0       D           TRUE        -
//   %%BIT       VC11LMS    11      11        0       D           TRUE        -
//   %%BIT       VC10LMS    10      10        0       D           TRUE        -
//   %%BIT       VC09LMS    9       9         0       D           TRUE        -
//   %%BIT       VC08LMS    8       8         0       D           TRUE        -
//   %%BIT       VC07LMS    7       7         0       D           TRUE        -
//   %%BIT       VC06LMS    6       6         0       D           TRUE        -
//   %%BIT       VC05LMS    5       5         0       D           TRUE        -
//   %%BIT       VC04LMS    4       4         0       D           TRUE        -
//   %%BIT       VC03LMS    3       3         0       D           TRUE        -
//   %%BIT       VC02LMS    2       2         0       D           TRUE        -
//   %%BIT       VC01LMS    1       1         0       D           TRUE        -
//   %%BIT       VC00LMS    0       0         0       D           TRUE        -
//
//%REG_NAME  VCLMSR2
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC63LMS    31      31        0       D           TRUE        -
//   %%BIT       VC62LMS    30      30        0       D           TRUE        -
//   %%BIT       VC61LMS    29      29        0       D           TRUE        -
//   %%BIT       VC60LMS    28      28        0       D           TRUE        -
//   %%BIT       VC59LMS    27      27        0       D           TRUE        -
//   %%BIT       VC58LMS    26      26        0       D           TRUE        -
//   %%BIT       VC57LMS    25      25        0       D           TRUE        -
//   %%BIT       VC56LMS    24      24        0       D           TRUE        -
//   %%BIT       VC55LMS    23      23        0       D           TRUE        -
//   %%BIT       VC54LMS    22      22        0       D           TRUE        -
//   %%BIT       VC53LMS    21      21        0       D           TRUE        -
//   %%BIT       VC52LMS    20      20        0       D           TRUE        -
//   %%BIT       VC51LMS    19      19        0       D           TRUE        -
//   %%BIT       VC50LMS    18      18        0       D           TRUE        -
//   %%BIT       VC49LMS    17      17        0       D           TRUE        -
//   %%BIT       VC48LMS    16      16        0       D           TRUE        -
//   %%BIT       VC47LMS    15      15        0       D           TRUE        -
//   %%BIT       VC46LMS    14      14        0       D           TRUE        -
//   %%BIT       VC45LMS    13      13        0       D           TRUE        -
//   %%BIT       VC44LMS    12      12        0       D           TRUE        -
//   %%BIT       VC43LMS    11      11        0       D           TRUE        -
//   %%BIT       VC42LMS    10      10        0       D           TRUE        -
//   %%BIT       VC41LMS    9       9         0       D           TRUE        -
//   %%BIT       VC40LMS    8       8         0       D           TRUE        -
//   %%BIT       VC39LMS    7       7         0       D           TRUE        -
//   %%BIT       VC38LMS    6       6         0       D           TRUE        -
//   %%BIT       VC37LMS    5       5         0       D           TRUE        -
//   %%BIT       VC36LMS    4       4         0       D           TRUE        -
//   %%BIT       VC35LMS    3       3         0       D           TRUE        -
//   %%BIT       VC34LMS    2       2         0       D           TRUE        -
//   %%BIT       VC33LMS    1       1         0       D           TRUE        -
//   %%BIT       VC32LMS    0       0         0       D           TRUE        -
//
//%REG_NAME  VCLMSR3
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC95LMS    31      31        0       D           TRUE        -
//   %%BIT       VC94LMS    30      30        0       D           TRUE        -
//   %%BIT       VC93LMS    29      29        0       D           TRUE        -
//   %%BIT       VC92LMS    28      28        0       D           TRUE        -
//   %%BIT       VC91LMS    27      27        0       D           TRUE        -
//   %%BIT       VC90LMS    26      26        0       D           TRUE        -
//   %%BIT       VC89LMS    25      25        0       D           TRUE        -
//   %%BIT       VC88LMS    24      24        0       D           TRUE        -
//   %%BIT       VC87LMS    23      23        0       D           TRUE        -
//   %%BIT       VC86LMS    22      22        0       D           TRUE        -
//   %%BIT       VC85LMS    21      21        0       D           TRUE        -
//   %%BIT       VC84LMS    20      20        0       D           TRUE        -
//   %%BIT       VC83LMS    19      19        0       D           TRUE        -
//   %%BIT       VC82LMS    18      18        0       D           TRUE        -
//   %%BIT       VC81LMS    17      17        0       D           TRUE        -
//   %%BIT       VC80LMS    16      16        0       D           TRUE        -
//   %%BIT       VC79LMS    15      15        0       D           TRUE        -
//   %%BIT       VC78LMS    14      14        0       D           TRUE        -
//   %%BIT       VC77LMS    13      13        0       D           TRUE        -
//   %%BIT       VC76LMS    12      12        0       D           TRUE        -
//   %%BIT       VC75LMS    11      11        0       D           TRUE        -
//   %%BIT       VC74LMS    10      10        0       D           TRUE        -
//   %%BIT       VC73LMS    9       9         0       D           TRUE        -
//   %%BIT       VC72LMS    8       8         0       D           TRUE        -
//   %%BIT       VC71LMS    7       7         0       D           TRUE        -
//   %%BIT       VC70LMS    6       6         0       D           TRUE        -
//   %%BIT       VC69LMS    5       5         0       D           TRUE        -
//   %%BIT       VC68LMS    4       4         0       D           TRUE        -
//   %%BIT       VC67LMS    3       3         0       D           TRUE        -
//   %%BIT       VC66LMS    2       2         0       D           TRUE        -
//   %%BIT       VC65LMS    1       1         0       D           TRUE        -
//   %%BIT       VC64LMS    0       0         0       D           TRUE        -
//
//%REG_NAME  PWVCLMSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       PWVCLMS    0       0         0       R           TRUE        -
//
//%REG_NAME  SDVCLMSR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SR1LMS     2       2         0       R           TRUE        -
//   %%BIT       SR0LMS     1       1         0       R           TRUE        -
//   %%BIT       SDVC0LMS   0       0         0       R           TRUE        R
//
//%REG_NAME  SGULCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       UE         15      15        0       R           TRUE        -
//   %%BIT       LE         14      14        0       R           TRUE        -
//   %%BIT       MPXE       11      11        0       R           TRUE        -
//   %%BIT       MPXV       10      8         0       R           TRUE        -
//   %%BIT       ULE        7       7         0       R           TRUE        -
//   %%BIT       ULPC       5       0         0       R           TRUE        R
//
//
//%REG_NAME  SGDIAGULCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       UE         15      15        0       R           TRUE        -
//   %%BIT       LE         14      14        0       R           TRUE        -
//   %%BIT       ULE        7       7         0       R           TRUE        -
//   %%BIT       ULPC       5       0         0       R           TRUE        R
//
//%REG_NAME  VCLMSCR1
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC31LMSC   31      31        0       D           TRUE       -       
//   %%BIT       VC30LMSC   30      30        0       D           TRUE       -
//   %%BIT       VC29LMSC   29      29        0       D           TRUE       -
//   %%BIT       VC28LMSC   28      28        0       D           TRUE       -
//   %%BIT       VC27LMSC   27      27        0       D           TRUE       -
//   %%BIT       VC26LMSC   26      26        0       D           TRUE       -
//   %%BIT       VC25LMSC   25      25        0       D           TRUE       -
//   %%BIT       VC24LMSC   24      24        0       D           TRUE       -
//   %%BIT       VC23LMSC   23      23        0       D           TRUE       -
//   %%BIT       VC22LMSC   22      22        0       D           TRUE       -
//   %%BIT       VC21LMSC   21      21        0       D           TRUE       -
//   %%BIT       VC20LMSC   20      20        0       D           TRUE       -
//   %%BIT       VC19LMSC   19      19        0       D           TRUE       -
//   %%BIT       VC18LMSC   18      18        0       D           TRUE       -
//   %%BIT       VC17LMSC   17      17        0       D           TRUE       -
//   %%BIT       VC16LMSC   16      16        0       D           TRUE       -
//   %%BIT       VC15LMSC   15      15        0       D           TRUE       -
//   %%BIT       VC14LMSC   14      14        0       D           TRUE       -
//   %%BIT       VC13LMSC   13      13        0       D           TRUE       -
//   %%BIT       VC12LMSC   12      12        0       D           TRUE       -
//   %%BIT       VC11LMSC   11      11        0       D           TRUE       -
//   %%BIT       VC10LMSC   10      10        0       D           TRUE       -
//   %%BIT       VC09LMSC   9       9         0       D           TRUE       -
//   %%BIT       VC08LMSC   8       8         0       D           TRUE       -
//   %%BIT       VC07LMSC   7       7         0       D           TRUE       -
//   %%BIT       VC06LMSC   6       6         0       D           TRUE       -
//   %%BIT       VC05LMSC   5       5         0       D           TRUE       -
//   %%BIT       VC04LMSC   4       4         0       D           TRUE       -
//   %%BIT       VC03LMSC   3       3         0       D           TRUE       -
//   %%BIT       VC02LMSC   2       2         0       D           TRUE       -
//   %%BIT       VC01LMSC   1       1         0       D           TRUE       -
//   %%BIT       VC00LMSC   0       0         0       D           TRUE       W
//
//%REG_NAME  VCLMSCR2
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC63LMSC   31      31        0       D           TRUE        -
//   %%BIT       VC62LMSC   30      30        0       D           TRUE        -
//   %%BIT       VC61LMSC   29      29        0       D           TRUE        -
//   %%BIT       VC60LMSC   28      28        0       D           TRUE        -
//   %%BIT       VC59LMSC   27      27        0       D           TRUE        -
//   %%BIT       VC58LMSC   26      26        0       D           TRUE        -
//   %%BIT       VC57LMSC   25      25        0       D           TRUE        -
//   %%BIT       VC56LMSC   24      24        0       D           TRUE        -
//   %%BIT       VC55LMSC   23      23        0       D           TRUE        -
//   %%BIT       VC54LMSC   22      22        0       D           TRUE        -
//   %%BIT       VC53LMSC   21      21        0       D           TRUE        -
//   %%BIT       VC52LMSC   20      20        0       D           TRUE        -
//   %%BIT       VC51LMSC   19      19        0       D           TRUE        -
//   %%BIT       VC50LMSC   18      18        0       D           TRUE        -
//   %%BIT       VC49LMSC   17      17        0       D           TRUE        -
//   %%BIT       VC48LMSC   16      16        0       D           TRUE        -
//   %%BIT       VC47LMSC   15      15        0       D           TRUE        -
//   %%BIT       VC46LMSC   14      14        0       D           TRUE        -
//   %%BIT       VC45LMSC   13      13        0       D           TRUE        -
//   %%BIT       VC44LMSC   12      12        0       D           TRUE        -
//   %%BIT       VC43LMSC   11      11        0       D           TRUE        -
//   %%BIT       VC42LMSC   10      10        0       D           TRUE        -
//   %%BIT       VC41LMSC   9       9         0       D           TRUE        -
//   %%BIT       VC40LMSC   8       8         0       D           TRUE        -
//   %%BIT       VC39LMSC   7       7         0       D           TRUE        -
//   %%BIT       VC38LMSC   6       6         0       D           TRUE        -
//   %%BIT       VC37LMSC   5       5         0       D           TRUE        -
//   %%BIT       VC36LMSC   4       4         0       D           TRUE        -
//   %%BIT       VC35LMSC   3       3         0       D           TRUE        -
//   %%BIT       VC34LMSC   2       2         0       D           TRUE        -
//   %%BIT       VC33LMSC   1       1         0       D           TRUE        -
//   %%BIT       VC32LMSC   0       0         0       D           TRUE        W
//
//%REG_NAME  VCLMSCR3
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VC95LMSC   31      31        0       D           TRUE        -
//   %%BIT       VC94LMSC   30      30        0       D           TRUE        -
//   %%BIT       VC93LMSC   29      29        0       D           TRUE        -
//   %%BIT       VC92LMSC   28      28        0       D           TRUE        -
//   %%BIT       VC91LMSC   27      27        0       D           TRUE        -
//   %%BIT       VC90LMSC   26      26        0       D           TRUE        -
//   %%BIT       VC89LMSC   25      25        0       D           TRUE        -
//   %%BIT       VC88LMSC   24      24        0       D           TRUE        -
//   %%BIT       VC87LMSC   23      23        0       D           TRUE        -
//   %%BIT       VC86LMSC   22      22        0       D           TRUE        -
//   %%BIT       VC85LMSC   21      21        0       D           TRUE        -
//   %%BIT       VC84LMSC   20      20        0       D           TRUE        -
//   %%BIT       VC83LMSC   19      19        0       D           TRUE        -
//   %%BIT       VC82LMSC   18      18        0       D           TRUE        -
//   %%BIT       VC81LMSC   17      17        0       D           TRUE        -
//   %%BIT       VC80LMSC   16      16        0       D           TRUE        -
//   %%BIT       VC79LMSC   15      15        0       D           TRUE        -
//   %%BIT       VC78LMSC   14      14        0       D           TRUE        -
//   %%BIT       VC77LMSC   13      13        0       D           TRUE        -
//   %%BIT       VC76LMSC   12      12        0       D           TRUE        -
//   %%BIT       VC75LMSC   11      11        0       D           TRUE        -
//   %%BIT       VC74LMSC   10      10        0       D           TRUE        -
//   %%BIT       VC73LMSC   9       9         0       D           TRUE        -
//   %%BIT       VC72LMSC   8       8         0       D           TRUE        -
//   %%BIT       VC71LMSC   7       7         0       D           TRUE        -
//   %%BIT       VC70LMSC   6       6         0       D           TRUE        -
//   %%BIT       VC69LMSC   5       5         0       D           TRUE        -
//   %%BIT       VC68LMSC   4       4         0       D           TRUE        -
//   %%BIT       VC67LMSC   3       3         0       D           TRUE        -
//   %%BIT       VC66LMSC   2       2         0       D           TRUE        -
//   %%BIT       VC65LMSC   1       1         0       D           TRUE        -
//   %%BIT       VC64LMSC   0       0         0       D           TRUE        W
//
//%REG_NAME  PWVCLMSCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       PWVCLMSC   0       0         0       R:0|W       TRUE        W
//
//%REG_NAME  SDVCLMSCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SR1LMSC    2       2         0       R:0|W       TRUE        -
//   %%BIT       SR0LMSC    1       1         0       R:0|W       TRUE        -
//   %%BIT       SDVC0LMSC  0       0         0       R:0|W       TRUE        W
//
//%REG_NAME  SGULCCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SGULCC     5       1         0       R:0|W       TRUE        W
//   %%BIT       SDULCC     0       0         0       R:0|W       TRUE        -
//
//%REG_NAME  VCLMASCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ALLMSC     0       0         0       R:0|W       TRUE        W
//
//%REG_NAME  TRMCR
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TRMS       15      15        0       W|R         TRUE        -
//   %%BIT       TRMTTUNE   13      12        0       W|R         TRUE        -
//   %%BIT       TRMBTUNE   11      10        0       W|R         TRUE        -
//   %%BIT       TRMATUNE   9       8         0       W|R         TRUE        -
//   %%BIT       TRMT       5       4         0       R           TRUE        -
//   %%BIT       TRMB       3       2         0       R           TRUE        -
//   %%BIT       TRMA       1       0         0       R           TRUE        -
//
//%REG_NAME  ADTSTRA 
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       SELAN      21      16        0       W|R         TRUE        -
//   %%BIT       ADTST      8       0        0        W|R         TRUE        -
//   
//%REG_NAME  ADTSTRB 
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADVAL      13      0        0        W|R         TRUE        -
//
//%REG_NAME  ADTSTRC 
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       CKSTP      13      13        0       W|R         TRUE        -
//   %%BIT       ADMD       8       0         0       W|R         TRUE        -
//
//%REG_NAME  ADTSTRD 
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       ADDISE     7       7         0       W|R         TRUE        -
//   %%BIT       ADDIS      4       0         0       W|R         TRUE        -
//
//%REG_NAME  ADTSTRP1 
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       VMONFD     0       0         0       W|R         TRUE        -
//
//%REG_NAME  SGTSEL
//   %%TITLE     name       upper   lower     init    access      support     callback    
//   %%BIT       TxSEL5       5       5         0       W|R         TRUE        -
//   %%BIT       TxSEL4       4       4         0       W|R         TRUE        -
//   %%BIT       TxSEL3       3       3         0       W|R         TRUE        -
//   %%BIT       TxSEL2       2       2         0       W|R         TRUE        -
//   %%BIT       TxSEL1       1       1         0       W|R         TRUE        -
//   %%BIT       TxSEL0       0       0         0       W|R         TRUE        W
//
//
//####################################################
//## For handle Command
//####################################################
//%CMD_BASEID  reg
//%CMD_NODUMP_API EnableInsertInput EnableDumpResult CommandCB AssertReset DumpProfile ClearProfile
//
//####################################################
//## For PORTs
//####################################################
//%HEADER_FILES adc_u2b.h
//%IMPLEMENTATION_FILES sarad_u2b.cpp sarad_u2b_regif.cpp adc_u2b.cpp adc_u2b_regif.cpp
//#%PORT  ADmSG0TRG                     1         in        bool
//#%PORT  ADmSG1TRG                     1         in        bool
//#%PORT  ADmSG2TRG                     1         in        bool
//#%PORT  ADmSG3TRG                     1         in        bool
//#%PORT  ADmSG4TRG                     1         in        bool
//##%PORT  ADSTART_I                     1         in        bool
//##%PORT  ADSTART_O                     1         out       bool
//##%PORT  ADTSTART_I                    1         in        bool
//##%PORT  ADTSTART_O                    1         out       bool
//#%PORT  ANm00                         64        in        double
//#%PORT  ANm01                         64        in        double
//#%PORT  ANm02                         64        in        double
//#%PORT  ANm03                         64        in        double
//#%PORT  ANm10                         64        in        double
//#%PORT  ANm11                         64        in        double
//#%PORT  ANm12                         64        in        double
//#%PORT  ANm13                         64        in        double
//#%PORT  ANm20                         64        in        double
//#%PORT  ANm21                         64        in        double
//#%PORT  ANm22                         64        in        double
//#%PORT  ANm23                         64        in        double
//#%PORT  ANm30                         64        in        double
//#%PORT  ANm31                         64        in        double
//#%PORT  ANm32                         64        in        double
//#%PORT  ANm33                         64        in        double
//#%PORT  ANm40                         64        in        double
//#%PORT  ANm41                         64        in        double
//#%PORT  ANm42                         64        in        double
//#%PORT  ANm43                         64        in        double
//#%PORT  ANm50                         64        in        double
//#%PORT  ANm51                         64        in        double
//#%PORT  ANm52                         64        in        double
//#%PORT  ANm53                         64        in        double
//#%PORT  ANm60                         64        in        double
//#%PORT  ANm61                         64        in        double
//#%PORT  ANm62                         64        in        double
//#%PORT  ANm63                         64        in        double
//#%PORT  ANm70                         64        in        double
//#%PORT  ANm71                         64        in        double
//#%PORT  ANm72                         64        in        double
//#%PORT  ANm73                         64        in        double
//#%PORT  IFVCHm                        7         in        sc_uint
//#%PORT  IFRDm                         1         in        bool
//#%PORT  IFREm                         1         in        bool
//#%PORT  INT_ADm0                      1         out       bool
//#%PORT  INT_ADm1                      1         out       bool
//#%PORT  INT_ADm2                      1         out       bool
//#%PORT  INT_ADm3                      1         out       bool
//#%PORT  INT_ADm4                      1         out       bool
//#%PORT  INT_MPXm                      1         out       bool
//#%PORT  INT_ADEm                      1         out       bool
//#%PORT  ADPEm                         1         out       bool
//#%PORT  ADENDm0                       1         out       bool
//#%PORT  ADENDm1                       1         out       bool
//#%PORT  ADENDm2                       1         out       bool
//#%PORT  ADENDm3                       1         out       bool
//#%PORT  ADENDm4                       1         out       bool
//#%PORT  INT_ULm                       1         out       bool
//#%PORT  ADCm_IFDATA                   16        out       sc_uint
//#%PORT  DFREQm                        1         out       bool
//##%PORT  ASREQm                        1         out       bool
//#%PORT  DFTAGm                        4         out       sc_uint
//#%PORT  DFDATAm                       16        out       sc_uint
//#%PORT  PVCR_VALUEm                   18        in        sc_uint
//#%PORT  PVCR_TRGm                     1         in        bool
//#%PORT  PVCR_ENDm                     1         in        bool
//#%PORT  PVCR_PWDDRm                   16        in        sc_uint
//#%PORT  VCEND0[96]                    1         out       bool
//#%PORT  VCULMO                        1         out       bool
//#%PORT  VCLLMO                        1         out       bool
//#%PORT  MPXCURm                       3         out       sc_uint

#ifndef ADC_U2B_CMDIF_H
#define ADC_U2B_CMDIF_H

public:
std::string handleCommand (const std::vector<std::string>& args)
{
  std::vector<std::string> _args = args;
  std::string ret = "";

  if (args[0] == "command") {
    _args.erase(_args.begin());
    ret = this->own_handle_command(_args);
    if (ret != "") {
      ret += "\n";
    }
#if 0 // CommandCB
    // call call back funcion only when return message does not include error keyword
    if (ret.find("is invalid") == std::string::npos    // defined command
     && ret.find("Error") == std::string::npos) {      // correct argument
      std::string cb_msg = this->CommandCB(args);
      if (cb_msg.find("error") != std::string::npos) { // correct usage
        ret += cb_msg + "\n";
      }
    }
#endif // CommandCB
  }
  else if (_args[0] == "reg") {
    ret = this->regif_handle_command(_args);
    if (ret != "") {
      ret += "\n";
    }
  }

  // send a command to all targets
  else {
    bool cmd_found = false;
    std::string baseid_message;

    baseid_message = this->own_handle_command(_args);
    if (baseid_message.find("is invalid", 0) == std::string::npos) { // defined command
      cmd_found = true;
      if (baseid_message != "") {
        ret += baseid_message + "\n";
      }
#if 0 // CommandCB
      // call call back funcion only when return message does not include error keyword
    if (ret.find("is invalid") == std::string::npos      // defined command
     && ret.find("Error") == std::string::npos) {        // correct argument
        std::string cb_msg = this->CommandCB(args);
        if (cb_msg.find("error") != std::string::npos) { // correct usage
          ret += cb_msg + "\n";
        }
      }
#endif // CommandCB
    }

    _args.insert(_args.begin(), "reg");
    baseid_message = this->regif_handle_command(_args);
    if (baseid_message.find("is invalid", 0) == std::string::npos) {
      cmd_found = true;
      if (baseid_message != "") {
        ret += baseid_message;
      }
    }
    _args.erase(_args.begin());

    if (!cmd_found) {
      ret = "Error (" + mInstName + ") command name \"" + _args[0] + "\" is invalid.\n";
    }
  }
  
  // Insert input command
#if 0 // EnableInsertInput
  if (mEnableInsertInput) {
    std::string header_str = "(" + mInstName + + ":" + mCmdId + ") [ ";
    for (unsigned int i=0 ; i<args.size() ; i++) {
      header_str += (std::string)args[i] + " ";
    }
    header_str += "]";
    ret = header_str + "\n" + ret;
  }
#endif // EnableInsertInput

#if 0 // EnableDumpResult
  if (mEnableDumpResult && mCmdId == "self") {
    printf("%s", ret.c_str());
  }
#endif // EnableDumpResult
  return ret;
}

#if 0 // HWBreak
void setCommandHandler(vpcl::commandHandler * handler) {
  if (handler == NULL) return;
  cmd_handler = handler;
}
void hw_break(std::string break_name) {
  // if specified break point is enable, have commandHandler read a script file
  if (mBreakTable.find(break_name) != mBreakTable.end()) {
    cmd_handler->handleCommand();
  }
}
#endif // HWBreak

private:
std::string own_handle_command(std::vector<std::string>& args)
{
  std::string ret = "";
  std::string err_msg = "Error ("   + mInstName + ") ";   // error message

  std::string specified_cmd = " (";
  std::vector<std::string>::iterator cmd_it;
  for (cmd_it=args.begin() ; cmd_it!=args.end() ; cmd_it++) {
    specified_cmd += " " + *cmd_it;
  }
  specified_cmd += " ) : Type " + mInstName + " help";

  if ((int)args.size() <= 0) {
      ret = err_msg + "command name \"\" is invalid.";
      return ret;
  }

  if (args[0] == "help") {
    ret += "    --- command ---\n";
    ret += "    help                                      Show direction\n";
#if 0 // HWBreak
    ret += "    go                                        (Re)Start the simulation\n";
    ret += "    HWBreak <break-name>                      Enable specified break point (Defailt: none)\n";
#endif // HWBreak
#if 1 // MessageLevel
    ret += "    MessageLevel   <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
#endif // MessageLevel
#if 0 // EnableInsertInput
    ret += "    EnableInsertInput <true/false>            Display typed command (Default: false)\n";
#endif // EnableInsertInput
#if 0 // DumpProfile
    ret += "    DumpProfile [file_name] [time_unit]       Dump profile information (Default: file_name=stdout, time_unit=SC_NS)\n";
#endif // DumpProfile
#if 0 // ClearProfile
    ret += "    ClearProfile                              Reset profile internal information\n";
#endif // ClearProfile
#if 0 // AssertReset
    ret += "    AssertReset <start_time> <period>         Assert and deassert reset signal to a target model\n";
#endif // AssertReset
#if 0 // EnableDumpResult
    ret += "    EnableDumpResult <status>                 Dump a command return string into standard output too\n";
#endif // EnableDumpResult

  }
#if 1 // MessageLevel
  else if (args[0] == "MessageLevel") {
    // read mode
    if ((int)args.size() == 1) {
      std::map<std::string, bool>::iterator it;
      for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
        if (it->second) {
          ret += " " + it->first;
        }
      }
    }
    // write mode
    else if ((int)args.size() == 2) {
      // update to new setting
      mMessageLevel.clear();

      std::vector<std::string> arg_vec = str2vec(args[1], '|');
      std::vector<std::string>::iterator it;
      for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        mMessageLevel[*it] = true;
      }
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // MessageLevel
#if 0 // HWBreak
  else if (args[0] == "go") {
    if ((int)args.size() == 1) {
      cmd_handler->setContinue();
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
  else if (args[0] == "HWBreak") {
    // read mode
    if ((int)args.size() == 1) {
      std::map<std::string, bool>::iterator it;
      for (it = mBreakTable.begin(); it != mBreakTable.end(); it++) {
        if (it->second) {
          ret += " " + it->first;
        }
      }
    }
    // write mode
    else if ((int)args.size() == 2) {
      // update to new setting
      mBreakTable.clear();
      std::vector<std::string> arg_vec = str2vec(args[1], '|');
      std::vector<std::string>::iterator it;
      for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        mBreakTable[*it] = true;
      }
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // HWBreak
#if 0 // EnableInsertInput
  else if (args[0] == "EnableInsertInput") {
    // read mode
    if ((int)args.size() == 1) {
      if (mEnableInsertInput) {
        ret = "true";
      }
      else if (!mEnableInsertInput) {
        ret = "false";
      }
    }
    // write mode
    else if ((int)args.size() == 2) {
      if (args[1] == "true") {
        mEnableInsertInput = true;
      }
      else if (args[1] == "false") {
        mEnableInsertInput = false;
      }
      else {
        ret = err_msg + "wrong argument" + specified_cmd;
      }
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // EnableInsertInput
#if 0 // DumpProfile
  else if (args[0] == "DumpProfile") {
    if ((int)args.size() >= 4) {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
      return ret;
    }
  
    sc_time_unit time_unit = SC_NS;
    if ((int)args.size() >= 3) {
           if (args[2] == "SC_SEC") time_unit = SC_SEC;
      else if (args[2] == "SC_MS" ) time_unit = SC_MS;
      else if (args[2] == "SC_US" ) time_unit = SC_US;
      else if (args[2] == "SC_NS" ) time_unit = SC_NS;
      else if (args[2] == "SC_PS" ) time_unit = SC_PS;
      else if (args[2] == "SC_FS" ) time_unit = SC_FS;
      else {
        ret = err_msg + "wrong argument" + specified_cmd;
        return ret;
      }
    }
  
    FILE *fp = stdout;
    if ((int)args.size() >= 2 && args[1] != "stdout") {
#ifdef __RE_SEQURITY_H
      if (fopen_s( &fp, args[1].c_str(), "a" ) != 0 )
#else
      fp = fopen(args[1].c_str(), "a");
      if (fp == NULL)
#endif
      {
        ret = "Cannot dump profile to " + (std::string)args[1];
        return ret;
      }
    }
  
    DumpProfile(fp, time_unit); // not check return value
    if (fp != stdout && fp != NULL) {
      fclose(fp);
    }
  }
#endif // DumpProfile
#if 0 // ClearProfile
  else if (args[0] == "ClearProfile") {
    if ((int)args.size() == 1) {
      ClearProfile();
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // ClearProfile
#if 0 // AssertReset
  else if (args[0] == "AssertReset") {
    if ((int)args.size() == 3) {
      double start_time = 0, period = 0;
      bool IsTranslateCorrect = true;
      std::istringstream str_start_time(args[1]);
      std::istringstream str_period    (args[2]);

      str_start_time >> start_time;
      if (((unsigned int)str_start_time.rdstate() & (unsigned int)std::istringstream::failbit) != 0) {
        IsTranslateCorrect = false;
      }
      
      str_period >> period;
      if (((unsigned int)str_period.rdstate() & (unsigned int)std::istringstream::failbit) != 0) {
        IsTranslateCorrect = false;
      }

      if (start_time < 0 || period <= 0) {
        IsTranslateCorrect = false;
      }

      if (IsTranslateCorrect) {
        AssertReset(start_time, period);
      }
      else {
        ret = err_msg + "wrong argument: " + args[1] + " " + args[2]
            + specified_cmd;
      }
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // AssertReset
#if 0 // EnableDumpResult
  else if (args[0] == "EnableDumpResult") {
    // read mode
    if (0) {;}
    else if ((int)args.size() == 1) {
      if (mEnableDumpResult) {
        ret = "true";
      }
      else {
        ret = "false";
      }
    }
    // write mode
    else if ((int)args.size() == 2) {
      if (args[1] == "true") {
        mEnableDumpResult = true;
      }
      else if (args[1] == "false") {
        mEnableDumpResult = false;
      }
      else {
        ret = err_msg + "wrong argument: " + (std::string)args[1] + specified_cmd;
      }
    }
    else {
      ret = err_msg + "wrong number of arguments" + specified_cmd;
    }
  }
#endif // EnableDumpResult
  else  {
    ret = user_def_command(args);
  }

  return ret;
}

std::string user_def_command(std::vector<std::string>& args)
{
  std::string ret = "";
  std::string err_msg = "Error ("   + mInstName + ") ";   // error message

  std::string specified_cmd = " (";
  std::vector<std::string>::iterator cmd_it;
  for (cmd_it=args.begin() ; cmd_it!=args.end() ; cmd_it++) {
    specified_cmd += " " + *cmd_it;
  }
  specified_cmd += " ) : Type " + mInstName + " help";

  if (0) {}

  else {
    ret = err_msg + "command name \"command " + (std::string)args[0] + "\" is invalid.";
  }

  return ret;
}

#if 1 // reg
std::string regif_handle_command(std::vector<std::string>& args)
{
  std::string ret = "";
  std::string err_msg = "Error ("   + mInstName + ") ";   // error message

  std::string specified_cmd = " (";
  std::vector<std::string>::iterator cmd_it;
  for (cmd_it=args.begin() ; cmd_it!=args.end() ; cmd_it++) {
    specified_cmd += " " + *cmd_it;
  }
  specified_cmd += " ) : Type " + mInstName + " help";

  // dump register list
  if ((int)args.size() == 1) {
    vpcl::re_register *reg_p = first_reg_object();
    while (reg_p != NULL) {
      printf("%s\n", reg_p->name().c_str());
      reg_p = next_reg_object();
    }
  }
  else {
    bool reg_found = false;
    vpcl::re_register *reg_p = first_reg_object();
    std::vector<std::string> args_updated;
    std::copy( args.begin(), args.end(), back_inserter( args_updated ) );
    while (reg_p != NULL) {
      if (strmatch(args[1].c_str(), reg_p->name().c_str())) {
        reg_found = true;
        args_updated[1] = reg_p->name();
        ret += this->reg_handle_command(args_updated) + "\n";
      }
      reg_p = next_reg_object();
    }
    if (!reg_found) {
      ret = this->reg_handle_command(args_updated);
    }
  }

  return ret;
}
#endif

#if 0 // port
#define PORT_READ_WRITE(port_name, port_val, port_type, print_func, str2_func)  \
        if (port_obj != NULL) {                                                 \
          if ((int)args.size() == 1) {                                          \
            find_success = true;                                                \
            print_func(#port_name, port_val);                                   \
          }                                                                     \
          else if ((int)args.size() == 2) {                                     \
            port_type write_val = 0;                                            \
            if (str2_func(args[1], write_val)) {                                \
              find_success = true;                                              \
              mVal_##port_name = write_val;                                     \
            }                                                                   \
            else {                                                              \
              ret = err_msg + args.at(1) + " is wrong argument" + specified_cmd;\
            }                                                                   \
          }                                                                     \
        }                                                                       \

#define PORT_READ(port_name, port_val, print_func)                              \
        if (port_obj != NULL) {                                                 \
          if ((int)args.size() == 1) {                                          \
            find_success = true;                                                \
            print_func(#port_name, port_val);                                   \
          }                                                                     \
        }

void print_double(std::string port_name, double port_val) {
    printf("%-10s %s = %f\n", mInstName.c_str(), port_name.c_str(), port_val); 
}

template<typename T>
void print_uint(std::string port_name, T port_val) {
    printf("%-10s %s = %d\n", mInstName.c_str(), port_name.c_str(), port_val); 
}

template<typename T>
void print_uint64(std::string port_name, T port_val) {
    printf("%-10s %s = %llu\n", mInstName.c_str(), port_name.c_str(), port_val); 
}

std::string port_handle_command(std::vector<std::string> args)
{
  std::string ret = "";
  std::string err_msg = "Error ("   + mInstName + ") ";   // error message

  std::string specified_cmd = " (";
  std::vector<std::string>::iterator cmd_it;
  for (cmd_it=args.begin() ; cmd_it!=args.end() ; cmd_it++) {
    specified_cmd += " " + *cmd_it;
  }
  specified_cmd += " ) : Type " + mInstName + " help";

  // dump all port information
  if ((int)args.size() == 0) {
    std::vector<sc_object *> child_obj = get_child_objects();
    std::vector<sc_object *>::iterator it;

    for (it=child_obj.begin() ; it!=child_obj.end() ; it++) {
      std::string target = (*it)->name();
      if (target.find(mInstName) != std::string::npos
       && (!strcmp((*it)->kind(), "sc_in") || !strcmp((*it)->kind(), "sc_out"))) {
        printf("%-10s <sc_out> %s\n", mInstName.c_str(), (*it)->basename());
      }
    }
  }

  // Dump help message
  else if (args[0] == "help") {
    ret += "    --- port ---\n";
    ret += "    <port> <value>                     Set value to <port> output port\n";
  }

  // port write / read
  else if ((int)args.size() == 1 || (int)args.size() == 2) {
    std::vector<sc_object *> child_obj = get_child_objects();
    std::vector<sc_object *>::iterator it;
    bool find_success = false;

    for (it=child_obj.begin() ; it!=child_obj.end() ; it++) {
      std::string obj_name = (*it)->name();
      std::string arg_name = mInstName + "." + (std::string)args[0];
      if (strmatch(arg_name.c_str(), obj_name.c_str())) {

      }
    }

    if (!find_success) {
      ret = err_msg + "is invalid command name";
    }
  }
  else {
    ret = err_msg + "The argument number of " + args.at(0) + " is invalid" + specified_cmd;
  }

  return ret;
}

#undef PORT_READ_WRITE
#undef PORT_READ
#endif // port

bool str2num(std::string str, bool &num)
{
  std::istringstream is(str);
  int tmp;

  if (str.substr(0, 2) == "0x") {
    is >> std::hex >> tmp;
  }
  else if (str.substr(0, 1) == "0") {
    is >> std::oct >> tmp;
  } else {
    is >> std::dec >> tmp;
  }

  if (is.fail() || !is.eof()) {
    if (str == "true") {
      num = true;
    } else if (str == "false") {
      num = false;
    } else {
      return false;
    }
  } else {
    if (tmp == 1) {
      num = true;
    } else if (tmp == 0) {
      num = false;
    } else {
      return false;
    }
  }
  return true;
}

bool str2num(std::string str, char &num)
{
  std::istringstream is(str);
  int tmp;

  if (str.substr(0, 2) == "0x") {
    is >> std::hex >> tmp;
  }
  else if (str.substr(0, 1) == "0") {
    is >> std::oct >> tmp;
  }
  else {
    is >> std::dec >> tmp;
  }

  if (is.fail() || !is.eof()) {
    return false;
  }
  else {
    num = (char)tmp;
    return true;
  }
}

bool str2num(std::string str, unsigned char &num)
{
  std::istringstream is(str);
  unsigned int tmp;

  if (str.substr(0, 2) == "0x") {
    is >> std::hex >> tmp;
  }
  else if (str.substr(0, 1) == "0") {
    is >> std::oct >> tmp;
  }
  else {
    is >> std::dec >> tmp;
  }

  if (is.fail() || !is.eof()) {
    return false;
  }
  else {
    num = (unsigned char)tmp;
    return true;
  }
}

template<typename T>
bool str2num(std::string str, T &num)
{
  std::istringstream is(str);
  T tmp;

  if (str.substr(0, 2) == "0x") {
    is >> std::hex >> tmp;
  }
  else if (str.substr(0, 1) == "0") {
    is >> std::oct >> tmp;
  }
  else {
    is >> std::dec >> tmp;
  }

  if (is.fail() || !is.eof()) {
    return false;
  }
  else {
    num = tmp;
    return true;
  }
}

bool str2dbl(std::string str, double &num)
{
  std::istringstream is(str);
  double tmp;

  is >> tmp;

  if (is.fail() || !is.eof()) {
    return false;
  }
  else {
    num = tmp;
    return true;
  }
}

void CommandInit(std::string name = "") {
  // initialize internal variables
  mInstName = name;
  mLineNum = 0;
  mFileName = "";
  mCmdId = "self";

#if 0 // EnableDumpResult
  mEnableDumpResult = false;
#endif // EnableDumpResult

  // initialize pre-defined command
#if 0 // EnableInsertInput
  mEnableInsertInput = false;
#endif // EnableInsertInput
#if 1 // MessageLevel
  mMessageLevel.insert(std::pair<std::string, bool>("fatal",   true ));
  mMessageLevel.insert(std::pair<std::string, bool>("error",   true ));
  mMessageLevel.insert(std::pair<std::string, bool>("warning", false));
  mMessageLevel.insert(std::pair<std::string, bool>("info",    false));
#endif // MessageLevel
#if 0 // HWBreak
  mBreakTable["none"] = true;
  cmd_handler = NULL;
#endif // HWBreak

  // initialize user define command


}

std::vector<std::string> str2vec(std::string str, const char sep)
{
  std::vector<std::string> buf;
  int index = 0;

  for (int i=0 ; i<(int)str.size() ; i++) {
    if (str[i] == sep) {
      if (i > index) {
        buf.push_back(str.substr((unsigned int)index, (unsigned int)(i-index)));
      }
      index = i+1;
    }
  }
  if (index < (int)str.size()) {
    buf.push_back(str.substr((unsigned int)index));
  }
  return buf;
}

void _re_printf(std::string group, const char *message, ...) {
  // message group check
#ifndef REGIF_SC_REPORT
#if 1 // MessageLevel
  if (!mMessageLevel[group]) return;
#endif // MessageLevel
#endif//REGIF_SC_REPORT

  if (message == NULL) return;

  // print header
  #ifdef SYSTEMC_H
  std::stringstream t_stream;
  std::string cur_time;

  double tu_value = 0;
  std::string tu_name = "";
  if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
    tu_value = 1000000000000000LL;
    tu_name = " fs";
  }
  else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
    tu_value = 1000000000000LL;
    tu_name = " ps";
  }
  else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
    tu_value = 1000000000;
    tu_name = " ns";
  }
  else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
    tu_value = 1000000;
    tu_name = " us";
  }
  else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
    tu_value = 1000;
    tu_name = " ms";
  }
  else {
    tu_value = 1;
    tu_name = " s";
  }
  t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

  cur_time = t_stream.str();
  #else
  std::string cur_time = "";
  #endif

#ifndef REGIF_SC_REPORT
  #ifdef REGIF_MSG_COLOR
  // color setting
  //
  // severity color       color Linux       Windows
  // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
  // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
  // warning  RED
  // info     BLUE
  #ifdef _WIN32
  HANDLE hStdout;
  CONSOLE_SCREEN_BUFFER_INFO csbi;
  if (group == "fatal" || group == "error" || group == "warning") {
    SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
  }
  else if (group == "info" ){
    SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
  }
  #else
  if (group == "fatal" || group == "error" || group == "warning") {
    printf("\033[0;31m");
  }
  else if (group == "info" ){
    printf("\033[0;34m");
  }
  #endif
  #endif
  printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
#endif//REGIF_SC_REPORT

  // print body
  va_list argptr;
  va_start(argptr, message);
  if (argptr == NULL) return;
#ifdef REGIF_SC_REPORT
  char str[1024];
  sprintf(str, "[%20s] ", cur_time.c_str());
  vsprintf(str+23, message, argptr);
  if (group == "fatal") {
    SC_REPORT_FATAL(mInstName.c_str(), str);
  }
  else if (group == "error") {
    SC_REPORT_ERROR(mInstName.c_str(), str);
  }
  else if (group == "warning") {
    SC_REPORT_WARNING(mInstName.c_str(), str);
  }
  else if (group == "info") {
    SC_REPORT_INFO(mInstName.c_str(), str);
  }
#else //REGIF_SC_REPORT
  vprintf(message, argptr);
#endif//REGIF_SC_REPORT

#ifndef REGIF_SC_REPORT
  #ifdef DumpFileNameLineNum
  // print footer
  if (group == "fatal" || group == "error") {
    printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
  }
  // legacy code
  //else {
  //  printf("\n");
  //}
  #endif//DumpFileNameLineNum
#endif//REGIF_SC_REPORT
  va_end(argptr);

#ifndef REGIF_SC_REPORT
  #ifdef REGIF_MSG_COLOR
  #ifdef _WIN32
  SetConsoleTextAttribute(hStdout, csbi.wAttributes);
  #else
  printf("\033[m");
  #endif
  #endif
#endif//REGIF_SC_REPORT

  fflush(stdout);
  fflush(stderr);

  if (group == "fatal") {
    exit(1);
  }
}

void get_fileline(std::string filename, int line_number) {
#ifdef _WIN32
  filename = filename.substr(filename.rfind("\\")+1);
#else
  filename = filename.substr(filename.rfind("/")+1);
#endif
  mFileName = filename;
  mLineNum  = line_number;
}

#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

bool strmatch(const char *ptn, const char *str) {
  bool ret;

  if (ptn == NULL || str == NULL) return false;

  switch( *ptn ) {
  case '\0':
    ret = '\0' == *str;
    break;
  case '*' :
    ret = strmatch( &ptn[1], str ) || (('\0' != *str) && strmatch( ptn, &str[1] ));
    break;
  case '?' :
    ret = ('\0' != *str) && strmatch( &ptn[1], &str[1] );
    break;
  default  :
    ret = ((unsigned char)*ptn == (unsigned char)*str) && strmatch( &ptn[1], &str[1] );
    break;
  }
  return ret;
}


// declare handleCommand relative members
#if 0 // EnableInsertInput
bool mEnableInsertInput;
#endif // EnableInsertInput
#if 1 // MessageLevel
std::map<std::string, bool> mMessageLevel;
#endif // MessageLevel
#if 0 // HWBreak
std::map<std::string, bool> mBreakTable;
vpcl::commandHandler* cmd_handler;
#endif // HWBreak

std::string mInstName;
std::string mFileName;
std::string mCmdId;
int mLineNum;
#if 0 // EnableDumpResult
bool mEnableDumpResult;
#endif // EnableDumpResult


#endif//ADC_U2B_CMDIF_H
