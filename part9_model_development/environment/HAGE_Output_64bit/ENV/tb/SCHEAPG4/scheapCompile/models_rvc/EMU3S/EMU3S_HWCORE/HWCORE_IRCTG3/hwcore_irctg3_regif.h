// -----------------------------------------------------------------------------
// $Id: hwcore_irctg3_regif.h,v 1.4 2020/10/29 14:32:14 khoaanhnguyen Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_irctg3_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_IRCTG3
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  11
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name             reg_name       size     wsize     rsize     length    offset    factor_start   factor_end   factor_index   factor_step    access     init   support  callback
//     %%REG      IR3CCTR          IR3CCTR        8        8         8|16|32   8         0x500     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3CMODE         IR3CMODE       8        8         8|16|32   8         0x501     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3RDI           IR3RDI         8        8         8|16|32   8         0x502     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3TRSMODE       IR3TRSMODE     8        8         8|16|32   8         0x503     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3TRG           IR3TRG         8        8         8|16|32   8         0x504     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3INTCLEAR      IR3INTCLEAR    8        8         8|16|32   8         0x505     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3INTEN         IR3INTEN       8        8         8|16|32   8         0x506     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3INTST         IR3INTST       8        -         8|16|32   8         0x508     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3UINTMEM       IR3UINTMEM     8        -         8|16|32   8         0x509     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3VINTMEM       IR3VINTMEM     8        -         8|16|32   8         0x50A     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3WINTMEM       IR3WINTMEM     8        -         8|16|32   8         0x50B     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3INT           IR3INT         32       8|16|32   8|16|32   32        0x50C     0              2            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3ADCCLEAR      IR3ADCCLEAR    8        8         8|16|32   8         0x518     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3ADCEN         IR3ADCEN       8        8         8|16|32   8         0x519     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3ADCST         IR3ADCST       8        -         8|16|32   8         0x51C     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3UADCMEM       IR3UADCMEM     8        -         8|16|32   8         0x51D     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3VADCMEM       IR3VADCMEM     8        -         8|16|32   8         0x51E     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3WADCMEM       IR3WADCMEM     8        -         8|16|32   8         0x51F     -              -            -              -              R          0x0    TRUE     -
//     %%REG      IR3ADC           IR3ADC         32       8|16|32   8|16|32   32        0x520     0              2            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3COFSALL       IR3COFSALL     16       16        8|16|32   16        0x52C     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3COFSU         IR3COFSU       16       16        8|16|32   16        0x530     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3COFSV         IR3COFSV       16       16        8|16|32   16        0x532     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3COFSW         IR3COFSW       16       16        8|16|32   16        0x534     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3CMPWRMD       IR3CMPWRMD     8        8         8|16|32   8         0x538     -              -            -              -              R|W        0x3    TRUE     -
//     %%REG      IR3CMPRDMD       IR3CMPRDMD     8        8         8|16|32   8         0x539     -              -            -              -              R|W        0x0    TRUE     -
//     %%REG      IR3CMP           IR3CMP         16       16        8|16|32   16        0x53C     0              31           -              -              R|W        0x0    TRUE     -
//     %%REG      IR3VALN          IR3VALN        32       32        8|16|32   32        0x57C     -              -            -              -              R|W        0x0    TRUE     -
// 
// %REG_NAME IR3CCTR
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    EN         0       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3CMODE
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    CMD        7       7       0x0     R|W      TRUE     -
//     %%BIT    PCT        4       4       0x0     R|W      TRUE     -
//     %%BIT    RVS        2       2       0x0     R|W      TRUE     -
//     %%BIT    MODE       1       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3RDI
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    RDI        0       0       0x0     R|W      TRUE     -
// 
// %REG_NAME IR3TRSMODE
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    ADC        3       3       0x0     R|W      TRUE     -
//     %%BIT    INT        2       2       0x0     R|W      TRUE     -
//     %%BIT    OFS        1       1       0x0     R|W      TRUE     -
//     %%BIT    CMP        0       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3TRG
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    TRG        0       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3INTCLEAR
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    WCLR       2       2       0x0     R|W      TRUE     -
//     %%BIT    VCLR       1       1       0x0     R|W      TRUE     -
//     %%BIT    UCLR       0       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3INTEN
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    HOE        5       5       0x0     R|W      TRUE     -
//     %%BIT    LOE        4       4       0x0     R|W      TRUE     -
//     %%BIT    EN         1       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3INTST
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    WIC        2       2       0x0     R        TRUE     -
//     %%BIT    VIC        1       1       0x0     R        TRUE     -
//     %%BIT    UIC        0       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3UINTMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3VINTMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3WINTMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3INT
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    INT        31      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3ADCCLEAR
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    WCLR       2       2       0x0     R|W      TRUE     -
//     %%BIT    VCLR       1       1       0x0     R|W      TRUE     -
//     %%BIT    UCLR       0       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3ADCEN
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    HOE        5       5       0x0     R|W      TRUE     -
//     %%BIT    LOE        4       4       0x0     R|W      TRUE     -
//     %%BIT    EN         1       0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3ADCST
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    WIC        2       2       0x0     R        TRUE     -
//     %%BIT    VIC        1       1       0x0     R        TRUE     -
//     %%BIT    UIC        0       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3UADCMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3VADCMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3WADCMEM
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    IRN        6       0       0x0     R        TRUE     -
// 
// %REG_NAME IR3ADC
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    ADI        31      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3COFSALL
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    DATA       11      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3COFSU
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    DATA       11      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3COFSV
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    DATA       11      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3COFSW
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    DATA       11      0       0x0     R|W      TRUE     W
// 
// %REG_NAME IR3CMPWRMD
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    SEL        2       0       0x3     R|W      TRUE     -
// 
// %REG_NAME IR3CMPRDMD
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    RSEL       1       0       0x0     R|W      TRUE     -
// 
// %REG_NAME IR3CMP
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    PTN        15      15      0x0     R|W      TRUE     -
//     %%BIT    CMP        11      0       0x0     R|W      TRUE     R|W
// 
// %REG_NAME IR3VALN
//     %%TITLE  name       upper   lower   init    access   support  callback
//     %%BIT    WVL        21      16      0x0     R|W      TRUE     -
//     %%BIT    VVL        13      8       0x0     R|W      TRUE     -
//     %%BIT    UVL        6       0       0x0     R|W      TRUE     W
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_irctg3_regif.h
/// @brief Register IF class of model HWCORE_IRCTG3
/// $Id: hwcore_irctg3_regif.h,v 1.4 2020/10/29 14:32:14 khoaanhnguyen Exp $
/// $Date: 2020/10/29 14:32:14 $
/// $Revison$
/// $Author: khoaanhnguyen $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_IRCTG3_REGIF_H__
#define __HWCORE_IRCTG3_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_IRCTG3 model
class Chwcore_irctg3_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_IR3INT      = 3,
        emNUM_IR3ADC      = 3,
        emNUM_IR3CMP      = 32
    }; ///< Enumeration for register factor index
#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_irctg3_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_irctg3_regif(std::string name, uint buswidth);
    ~Chwcore_irctg3_regif();

protected:
    vpcl::re_register *IR3CCTR    ;
    vpcl::re_register *IR3CMODE   ;
    vpcl::re_register *IR3RDI     ;
    vpcl::re_register *IR3TRSMODE ;
    vpcl::re_register *IR3TRG     ;
    vpcl::re_register *IR3INTCLEAR;
    vpcl::re_register *IR3INTEN   ;
    vpcl::re_register *IR3INTST   ;
    vpcl::re_register *IR3UINTMEM ;
    vpcl::re_register *IR3VINTMEM ;
    vpcl::re_register *IR3WINTMEM ;
    vpcl::re_register *IR3INT     [3];
    vpcl::re_register *IR3ADCCLEAR;
    vpcl::re_register *IR3ADCEN   ;
    vpcl::re_register *IR3ADCST   ;
    vpcl::re_register *IR3UADCMEM ;
    vpcl::re_register *IR3VADCMEM ;
    vpcl::re_register *IR3WADCMEM ;
    vpcl::re_register *IR3ADC     [3];
    vpcl::re_register *IR3COFSALL ;
    vpcl::re_register *IR3COFSU   ;
    vpcl::re_register *IR3COFSV   ;
    vpcl::re_register *IR3COFSW   ;
    vpcl::re_register *IR3CMPWRMD ;
    vpcl::re_register *IR3CMPRDMD ;
    vpcl::re_register *IR3CMP     [32];
    vpcl::re_register *IR3VALN    ;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_IR3CCTR_EN(RegCBstr str) = 0;
    virtual void cb_IR3CMODE_MODE(RegCBstr str) = 0;
    virtual void cb_IR3TRSMODE_CMP(RegCBstr str) = 0;
    virtual void cb_IR3TRG_TRG(RegCBstr str) = 0;
    virtual void cb_IR3INTCLEAR_UCLR(RegCBstr str) = 0;
    virtual void cb_IR3INTEN_EN(RegCBstr str) = 0;
    virtual void cb_IR3INT_INT(RegCBstr str) = 0;
    virtual void cb_IR3ADCCLEAR_UCLR(RegCBstr str) = 0;
    virtual void cb_IR3ADCEN_EN(RegCBstr str) = 0;
    virtual void cb_IR3ADC_ADI(RegCBstr str) = 0;
    virtual void cb_IR3COFSALL_DATA(RegCBstr str) = 0;
    virtual void cb_IR3COFSU_DATA(RegCBstr str) = 0;
    virtual void cb_IR3COFSV_DATA(RegCBstr str) = 0;
    virtual void cb_IR3COFSW_DATA(RegCBstr str) = 0;
    virtual void cb_IR3CMP_CMP(RegCBstr str) = 0;
    virtual void cb_IR3VALN_UVL(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_irctg3_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_irctg3_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_irctg3_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_irctg3_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_IRCTG3_REGIF_H__
