// -----------------------------------------------------------------------------
// $Id: psis011_ch_regif.cpp,v 1.6 2017/12/16 09:57:23 chanle Exp $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : psis011_ch_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE psis011_ch
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  8 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name            reg_name        wsize   rsize  length offset  access   init   support  callback
//     %%REG      PSI5SPRCF1n    PSI5SPRCF1n         32 8|16|32  32     0x00   R|W      0x0     TRUE     -
//     %%REG      PSI5SPRCF2n    PSI5SPRCF2n         32 8|16|32  32     0x04   R|W      0x0     TRUE     -
//     %%REG      PSI5SPWDEn     PSI5SPWDEn     8|16|32 8|16|32  32     0x08   R|W      0x0     TRUE     -
//     %%REG      PSI5SPWDPn     PSI5SPWDPn       16|32 8|16|32  32     0x0C   R|W      0x0     TRUE     -
//     %%REG      PSI5SPWDEVn    PSI5SPWDEVn         32 8|16|32  32     0x10   R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCDn     PSI5SPTCDn       16|32 8|16|32  32     0x14   R|W      0x0     TRUE     -
//     %%REG      PSI5SPCIEn     PSI5SPCIEn       16|32 8|16|32  32     0x18   R|W      0x0     TRUE     -
//     %%REG      PSI5SPDREn     PSI5SPDREn          32 8|16|32  32     0x1C   R|W      0x0     TRUE     -
//     %%REG      PSI5SPSTPn     PSI5SPSTPn       16|32 8|16|32  32     0x24   R|W      0x0     TRUE     -
//     %%REG      PSI5SPSTEVn    PSI5SPSTEVn         32 8|16|32  32     0x28   R|W      0x0     TRUE     -
//     %%REG      PSI5SPSTSn     PSI5SPSTSn     8|16|32 8|16|32  32     0x2C   R|W      0x0     TRUE     -
// 
//     %%REG      PSI5SPRESn     PSI5SPRESn     -       8|16|32  32     0x30   R        0x0     TRUE     -
//     %%REG      PSI5SPRESCn    PSI5SPRESCn    8|16|32 8|16|32  32     0x34   R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCDTn    PSI5SPTCDTn    -       8|16|32  32     0x38   R        0x0     TRUE     -
//     %%REG      PSI5SPTCDCn    PSI5SPTCDCn    8|16|32 8|16|32  32     0x3C   R|W      0x0     TRUE     -
// 
//     %%REG      PSI5SPDDTPn    PSI5SPDDTPn    8|16|32 8|16|32  32     0x40   R|W      0x0     TRUE     -
//     %%REG      PSI5SPDDDn     PSI5SPDDDn          32 8|16|32  32     0x44   R|W      0x0     TRUE     -
//     %%REG      PSI5SPDDSn     PSI5SPDDSn     -       8|16|32  32     0x48   R        0x0     TRUE     -
//     %%REG      PSI5SPDDSPn    PSI5SPDDSPn    8|16|32 8|16|32  32     0x4C   R|W      0x0     TRUE     -
// 
//     %%REG      PSI5SPCISn     PSI5SPCISn     -       8|16|32  32     0x50   R        0x0     TRUE     -
//     %%REG      PSI5SPCISCn    PSI5SPCISCn      16|32 8|16|32  32     0x54   R|W      0x0     TRUE     -
// 
// %REG_NAME PSI5SPRCF1n                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    PFRMIDLE           27      24      0       R|W     TRUE        -
//     %%BIT    F6PKT              23      21      0       R|W     TRUE        -
//     %%BIT    F5PKT              20      18      0       R|W     TRUE        -
//     %%BIT    F4PKT              17      15      0       R|W     TRUE        -
//     %%BIT    F3PKT              14      12      0       R|W     TRUE        -
//     %%BIT    F2PKT              11      9       0       R|W     TRUE        -
//     %%BIT    F1PKT              8       6       0       R|W     TRUE        -
//     %%BIT    SYSEL              5       5       0       R|W     TRUE        -
//     %%BIT    TSCTS              4       4       0       R|W     TRUE        -
//     %%BIT    TSCS               3       3       0       R|W     TRUE        -
//     %%BIT    TSEN               2       2       0       R|W     TRUE        -
//     %%BIT    RFCPS              1       1       0       R|W     TRUE        -
//     %%BIT    CHEN               0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPRCF2n                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    F6PAYLD            29      25      0       R|W     TRUE        -
//     %%BIT    F5PAYLD            24      20      0       R|W     TRUE        -
//     %%BIT    F4PAYLD            19      15      0       R|W     TRUE        -
//     %%BIT    F3PAYLD            14      10      0       R|W     TRUE        -
//     %%BIT    F2PAYLD            9       5       0       R|W     TRUE        -
//     %%BIT    F1PAYLD            4       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPWDEn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    WDTEB              0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPWDPn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    WDTPRS             11      0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPWDEVn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    WDTEX              23      0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCDn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ATRSCMD            15      11      0       R|W     TRUE        -
//     %%BIT    ACHID              10      8       0       R|W     TRUE        -
//     %%BIT    TRSCMD             7       3       0       R|W     TRUE        -
//     %%BIT    CHID               2       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPCIEn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    IEBCTFN            14      14      0       R|W     TRUE        -
//     %%BIT    IEBDDSFN           13      13      0       R|W     TRUE        -
//     %%BIT    IEBDDSOW           12      12      0       R|W     TRUE        -
//     %%BIT    IEBRFN             11      11      0       R|W     TRUE        -
//     %%BIT    IEBRFEX            10      10      0       R|W     TRUE        -
//     %%BIT    IEBRFLK            9       9       0       R|W     TRUE        -
//     %%BIT    IEBROV             8       8       0       R|W     TRUE        -
//     %%BIT    IEBRWDT            7       7       0       R|W     TRUE        -
//     %%BIT    IEBUTFR            5       5       0       R|W     TRUE        -
//     %%BIT    IEBUTPT            4       4       0       R|W     TRUE        -
//     %%BIT    IEBTRST            3       3       0       R|W     TRUE        -
//     %%BIT    IEBPT              2       2       0       R|W     TRUE        -
//     %%BIT    IEBCRC             1       1       0       R|W     TRUE        W
//     %%BIT    IEBXCRC            0       0       0       R|W     TRUE        -
// 
// %REG_NAME PSI5SPDREn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DRQETFN            2       2       0       R|W     TRUE        -
//     %%BIT    DRQEWDT            1       1       0       R|W     TRUE        -
//     %%BIT    DRQERFN            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPSTPn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    STPRS              11      0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPSTEVn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    STEX               23      0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPSTSn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    STSEL              0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPRESn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    RERRF6             5       5       0       R       TRUE        -
//     %%BIT    RERRF5             4       4       0       R       TRUE        -
//     %%BIT    RERRF4             3       3       0       R       TRUE        -
//     %%BIT    RERRF3             2       2       0       R       TRUE        -
//     %%BIT    RERRF2             1       1       0       R       TRUE        -
//     %%BIT    RERRF1             0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SPRESCn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    RERRCLF6           5       5       0       R|W     TRUE        -
//     %%BIT    RERRCLF5           4       4       0       R|W     TRUE        -
//     %%BIT    RERRCLF4           3       3       0       R|W     TRUE        -
//     %%BIT    RERRCLF3           2       2       0       R|W     TRUE        -
//     %%BIT    RERRCLF2           1       1       0       R|W     TRUE        -
//     %%BIT    RERRCLF1           0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCDTn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCD               23      0       0       R       TRUE        -
// 
// %REG_NAME PSI5SPTCDCn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCCLR             0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPDDTPn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DDSRTYPE           1       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPDDDn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DDSRDT             23      4       0xFFFFF R|W     TRUE        -
//     %%BIT    DDSRADR            3       0       0xF     R|W     TRUE        W
// 
// %REG_NAME PSI5SPDDSn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DDSRSTS            0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SPDDSPn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DDSRSTP            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPCISn                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ISTCTFN            14      14      0       R       TRUE        -
//     %%BIT    ISTDDSFN           13      13      0       R       TRUE        -
//     %%BIT    ISTDDSOW           12      12      0       R       TRUE        -
//     %%BIT    ISTRFN             11      11      0       R       TRUE        -
//     %%BIT    ISTRFEX            10      10      0       R       TRUE        -
//     %%BIT    ISTRFLK            9       9       0       R       TRUE        -
//     %%BIT    ISTROV             8       8       0       R       TRUE        -
//     %%BIT    ISTRWDT            7       7       0       R       TRUE        -
//     %%BIT    ISTUTFR            5       5       0       R       TRUE        -
//     %%BIT    ISTUTPT            4       4       0       R       TRUE        -
//     %%BIT    ISTTRST            3       3       0       R       TRUE        -
//     %%BIT    ISTPT              2       2       0       R       TRUE        -
//     %%BIT    ISTCRC             1       1       0       R       TRUE        -
//     %%BIT    ISTXCRC            0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SPCISCn                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ISTCCTFN           14      14      0       R|W     TRUE        -
//     %%BIT    ISTCDDSFN          13      13      0       R|W     TRUE        -
//     %%BIT    ISTCDDSOW          12      12      0       R|W     TRUE        -
//     %%BIT    ISTCRFN            11      11      0       R|W     TRUE        -
//     %%BIT    ISTCRFEX           10      10      0       R|W     TRUE        -
//     %%BIT    ISTCRFLK           9       9       0       R|W     TRUE        -
//     %%BIT    ISTCROV            8       8       0       R|W     TRUE        -
//     %%BIT    ISTCRWDT           7       7       0       R|W     TRUE        -
//     %%BIT    ISTCUTFR           5       5       0       R|W     TRUE        -
//     %%BIT    ISTCUTPT           4       4       0       R|W     TRUE        -
//     %%BIT    ISTCTRST           3       3       0       R|W     TRUE        -
//     %%BIT    ISTCPT             2       2       0       R|W     TRUE        -
//     %%BIT    ISTCCRC            1       1       0       R|W     TRUE        W
//     %%BIT    ISTCXCRC           0       0       0       R|W     TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file psis011_ch_regif.cpp
/// @brief Register IF class of model PSIS011_CH
/// $Id: psis011_ch_regif.cpp,v 1.6 2017/12/16 09:57:23 chanle Exp $
/// $Date: 2017/12/16 09:57:23 $
/// $Revison$
/// $Author: chanle $
////////////////////////////////////////////////////////////////////////////////
#include "psis011_ch_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cpsis011_ch_regif::Cpsis011_ch_regif(std::string name, uint buswidth, unsigned int chid)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x58/4))
    #endif
{
    mChID = chid;
    CommandInit();
    PSI5SPRCF1n = new vpcl::re_register(0x0000, this, "PSI5SPRCF1n", name.c_str());
    PSI5SPRCF2n = new vpcl::re_register(0x0004, this, "PSI5SPRCF2n", name.c_str());
    PSI5SPWDEn  = new vpcl::re_register(0x0008, this, "PSI5SPWDEn" , name.c_str());
    PSI5SPWDPn  = new vpcl::re_register(0x000C, this, "PSI5SPWDPn" , name.c_str());
    PSI5SPWDEVn = new vpcl::re_register(0x0010, this, "PSI5SPWDEVn", name.c_str());
    if (mChID > 0){
        PSI5SPTCDn  = new vpcl::re_register(0x0014, this, "PSI5SPTCDn" , name.c_str());
    }
    PSI5SPCIEn  = new vpcl::re_register(0x0018, this, "PSI5SPCIEn" , name.c_str());
    PSI5SPDREn  = new vpcl::re_register(0x001C, this, "PSI5SPDREn" , name.c_str());
    if (mChID > 0){
        PSI5SPSTPn  = new vpcl::re_register(0x0024, this, "PSI5SPSTPn" , name.c_str());
        PSI5SPSTEVn = new vpcl::re_register(0x0028, this, "PSI5SPSTEVn", name.c_str());
        PSI5SPSTSn  = new vpcl::re_register(0x002C, this, "PSI5SPSTSn" , name.c_str());
    }
    PSI5SPRESn  = new vpcl::re_register(0x0030, this, "PSI5SPRESn" , name.c_str());
    PSI5SPRESCn = new vpcl::re_register(0x0034, this, "PSI5SPRESCn", name.c_str());
    PSI5SPTCDTn = new vpcl::re_register(0x0038, this, "PSI5SPTCDTn", name.c_str());
    PSI5SPTCDCn = new vpcl::re_register(0x003C, this, "PSI5SPTCDCn", name.c_str());
    if (mChID > 0){
        PSI5SPDDTPn = new vpcl::re_register(0x0040, this, "PSI5SPDDTPn", name.c_str());
        PSI5SPDDDn  = new vpcl::re_register(0x0044, this, "PSI5SPDDDn" , name.c_str());
        PSI5SPDDSn  = new vpcl::re_register(0x0048, this, "PSI5SPDDSn" , name.c_str());
        PSI5SPDDSPn = new vpcl::re_register(0x004C, this, "PSI5SPDDSPn", name.c_str());
    }
    PSI5SPCISn  = new vpcl::re_register(0x0050, this, "PSI5SPCISn" , name.c_str());
    PSI5SPCISCn = new vpcl::re_register(0x0054, this, "PSI5SPCISCn", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    if (mChID > 0){
        mRegMap[0x0014]     = index;
        mRegMap[0x0014 + 1] = index;
        mRegMap[0x0014 + 2] = index;
        mRegMap[0x0014 + 3] = index++;
    }
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index;
    mRegMap[0x001C + 2] = index;
    mRegMap[0x001C + 3] = index++;
    if (mChID > 0){
        mRegMap[0x0024]     = index;
        mRegMap[0x0024 + 1] = index;
        mRegMap[0x0024 + 2] = index;
        mRegMap[0x0024 + 3] = index++;
        mRegMap[0x0028]     = index;
        mRegMap[0x0028 + 1] = index;
        mRegMap[0x0028 + 2] = index;
        mRegMap[0x0028 + 3] = index++;
        mRegMap[0x002C]     = index;
        mRegMap[0x002C + 1] = index;
        mRegMap[0x002C + 2] = index;
        mRegMap[0x002C + 3] = index++;
    }
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    if (mChID > 0){
        mRegMap[0x0040]     = index;
        mRegMap[0x0040 + 1] = index;
        mRegMap[0x0040 + 2] = index;
        mRegMap[0x0040 + 3] = index++;
        mRegMap[0x0044]     = index;
        mRegMap[0x0044 + 1] = index;
        mRegMap[0x0044 + 2] = index;
        mRegMap[0x0044 + 3] = index++;
        mRegMap[0x0048]     = index;
        mRegMap[0x0048 + 1] = index;
        mRegMap[0x0048 + 2] = index;
        mRegMap[0x0048 + 3] = index++;
        mRegMap[0x004C]     = index;
        mRegMap[0x004C + 1] = index;
        mRegMap[0x004C + 2] = index;
        mRegMap[0x004C + 3] = index++;
    }
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_PSI5SPRCF1n  , PSI5SPRCF1n->name(), PSI5SPRCF1n->addr());
    cw_instantiate_reg(CW_PSI5SPRCF2n  , PSI5SPRCF2n->name(), PSI5SPRCF2n->addr());
    cw_instantiate_reg(CW_PSI5SPWDEn   , PSI5SPWDEn->name() , PSI5SPWDEn->addr() );
    cw_instantiate_reg(CW_PSI5SPWDPn   , PSI5SPWDPn->name() , PSI5SPWDPn->addr() );
    cw_instantiate_reg(CW_PSI5SPWDEVn  , PSI5SPWDEVn->name(), PSI5SPWDEVn->addr());
    if (mChID > 0){
        cw_instantiate_reg(CW_PSI5SPTCDn   , PSI5SPTCDn->name() , PSI5SPTCDn->addr() );
    }
    cw_instantiate_reg(CW_PSI5SPCIEn   , PSI5SPCIEn->name() , PSI5SPCIEn->addr() );
    cw_instantiate_reg(CW_PSI5SPDREn   , PSI5SPDREn->name() , PSI5SPDREn->addr() );
    if (mChID > 0){
        cw_instantiate_reg(CW_PSI5SPSTPn   , PSI5SPSTPn->name() , PSI5SPSTPn->addr() );
        cw_instantiate_reg(CW_PSI5SPSTEVn  , PSI5SPSTEVn->name(), PSI5SPSTEVn->addr());
        cw_instantiate_reg(CW_PSI5SPSTSn   , PSI5SPSTSn->name() , PSI5SPSTSn->addr() );
    }
    cw_instantiate_reg(CW_PSI5SPRESn   , PSI5SPRESn->name() , PSI5SPRESn->addr() );
    cw_instantiate_reg(CW_PSI5SPRESCn  , PSI5SPRESCn->name(), PSI5SPRESCn->addr());
    cw_instantiate_reg(CW_PSI5SPTCDTn  , PSI5SPTCDTn->name(), PSI5SPTCDTn->addr());
    cw_instantiate_reg(CW_PSI5SPTCDCn  , PSI5SPTCDCn->name(), PSI5SPTCDCn->addr());
    if (mChID > 0){
        cw_instantiate_reg(CW_PSI5SPDDTPn  , PSI5SPDDTPn->name(), PSI5SPDDTPn->addr());
        cw_instantiate_reg(CW_PSI5SPDDDn   , PSI5SPDDDn->name() , PSI5SPDDDn->addr() );
        cw_instantiate_reg(CW_PSI5SPDDSn   , PSI5SPDDSn->name() , PSI5SPDDSn->addr() );
        cw_instantiate_reg(CW_PSI5SPDDSPn  , PSI5SPDDSPn->name(), PSI5SPDDSPn->addr());
    }
    cw_instantiate_reg(CW_PSI5SPCISn   , PSI5SPCISn->name() , PSI5SPCISn->addr() );
    cw_instantiate_reg(CW_PSI5SPCISCn  , PSI5SPCISCn->name(), PSI5SPCISCn->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPRCF1n  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPRCF2n  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPWDEn   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPWDPn   , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPWDEVn  , mCurReg, 0,  4,      "32", "8|16|32");
    if (mChID > 0){
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCDn   , mCurReg, 0,  4,   "16|32", "8|16|32");
    }
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPCIEn   , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPDREn   , mCurReg, 0,  4,      "32", "8|16|32");
    if (mChID > 0){
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPSTPn   , mCurReg, 0,  4,   "16|32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPSTEVn  , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPSTSn   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    }
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPRESn   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPRESCn  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCDTn  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCDCn  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    if (mChID > 0){
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPDDTPn  , mCurReg, 0,  4, "8|16|32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPDDDn   , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPDDSn   , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(PSI5SPDDSPn  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    }
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPCISn   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPCISCn  , mCurReg, 0,  4,   "16|32", "8|16|32");

    mRegList = mCurReg;

    if (mChID == 0){
        (*PSI5SPRCF1n  ) (27, 24, "PFRMIDLE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPRCF1n  ) (23, 21, "F6PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) (20, 18, "F5PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) (17, 15, "F4PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) (14, 12, "F3PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) (11,  9, "F2PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) ( 8,  6, "F1PKT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID > 0){
        (*PSI5SPRCF1n  ) ( 5,  5, "SYSEL"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPRCF1n  ) ( 4,  4, "TSCTS"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPRCF1n  ) ( 3,  3, "TSCS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) ( 2,  2, "TSEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) ( 1,  1, "RFCPS"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF1n  ) ( 0,  0, "CHEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) (29, 25, "F6PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) (24, 20, "F5PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) (19, 15, "F4PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) (14, 10, "F3PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) ( 9,  5, "F2PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRCF2n  ) ( 4,  0, "F1PAYLD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPWDEn   ) ( 0,  0, "WDTEB"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPWDPn   ) (11,  0, "WDTPRS"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPWDEVn  ) (23,  0, "WDTEX"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID > 0){
        (*PSI5SPTCDn   ) (15, 11, "ATRSCMD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPTCDn   ) (10,  8, "ACHID"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPTCDn   ) ( 7,  3, "TRSCMD"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPTCDn   ) ( 2,  0, "CHID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID == 0){
        (*PSI5SPCIEn   ) (14, 14, "IEBCTFN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID > 0){
        (*PSI5SPCIEn   ) (13, 13, "IEBDDSFN", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPCIEn   ) (12, 12, "IEBDDSOW", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCIEn   ) (11, 11, "IEBRFN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) (10, 10, "IEBRFEX" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) ( 9,  9, "IEBRFLK" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) ( 8,  8, "IEBROV"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) ( 7,  7, "IEBRWDT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCIEn   ) ( 5,  5, "IEBUTFR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPCIEn   ) ( 4,  4, "IEBUTPT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCIEn   ) ( 3,  3, "IEBTRST" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) ( 2,  2, "IEBPT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCIEn   ) ( 1,  1, "IEBCRC"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCIEn   ) ( 0,  0, "IEBXCRC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID > 0){
        (*PSI5SPDREn   ) ( 2,  2, "DRQETFN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPDREn   ) ( 1,  1, "DRQEWDT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPDREn   ) ( 0,  0, "DRQERFN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID > 0){
        (*PSI5SPSTPn   ) (11,  0, "STPRS"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPSTEVn  ) (23,  0, "STEX"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPSTSn   ) ( 0,  0, "STSEL"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID > 0){
        (*PSI5SPRESn   ) ( 5,  5, "RERRF6"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPRESn   ) ( 4,  4, "RERRF5"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPRESn   ) ( 3,  3, "RERRF4"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPRESn   ) ( 2,  2, "RERRF3"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    (*PSI5SPRESn   ) ( 1,  1, "RERRF2"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPRESn   ) ( 0,  0, "RERRF1"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    if (mChID > 0){
        (*PSI5SPRESCn  ) ( 5,  5, "RERRCLF6", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPRESCn  ) ( 4,  4, "RERRCLF5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPRESCn  ) ( 3,  3, "RERRCLF4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPRESCn  ) ( 2,  2, "RERRCLF3", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPRESCn  ) ( 1,  1, "RERRCLF2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRESCn  ) ( 0,  0, "RERRCLF1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCDTn  ) (23,  0, "TSCD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPTCDCn  ) ( 0,  0, "TSCCLR"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID > 0){
        (*PSI5SPDDTPn  ) ( 1,  0, "DDSRTYPE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPDDDn   ) (23,  4, "DDSRDT"  , 0xFFFFF   , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPDDDn   ) ( 3,  0, "DDSRADR" , 0xF       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPDDSn   ) ( 0,  0, "DDSRSTS" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPDDSPn  ) ( 0,  0, "DDSRSTP" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID == 0){
        (*PSI5SPCISn   ) (14, 14, "ISTCTFN" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    if (mChID > 0){
        (*PSI5SPCISn   ) (13, 13, "ISTDDSFN", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPCISn   ) (12, 12, "ISTDDSOW", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCISn   ) (11, 11, "ISTRFN"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) (10, 10, "ISTRFEX" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) ( 9,  9, "ISTRFLK" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) ( 8,  8, "ISTROV"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) ( 7,  7, "ISTRWDT" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCISn   ) ( 5,  5, "ISTUTFR" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*PSI5SPCISn   ) ( 4,  4, "ISTUTPT" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCISn   ) ( 3,  3, "ISTTRST" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) ( 2,  2, "ISTPT"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPCISn   ) ( 1,  1, "ISTCRC"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCISn   ) ( 0,  0, "ISTXCRC" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    if (mChID == 0){
        (*PSI5SPCISCn  ) (14, 14, "ISTCCTFN", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    if (mChID > 0){
        (*PSI5SPCISCn  ) (13, 13, "ISTCDDSFN", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPCISCn  ) (12, 12, "ISTCDDSOW", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCISCn  ) (11, 11, "ISTCRFN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) (10, 10, "ISTCRFEX", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) ( 9,  9, "ISTCRFLK", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) ( 8,  8, "ISTCROV" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) ( 7,  7, "ISTCRWDT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCISCn  ) ( 5,  5, "ISTCUTFR", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*PSI5SPCISCn  ) ( 4,  4, "ISTCUTPT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    (*PSI5SPCISCn  ) ( 3,  3, "ISTCTRST", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) ( 2,  2, "ISTCPT"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPCISCn  ) ( 1,  1, "ISTCCRC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    if (mChID == 0){
        (*PSI5SPCISCn  ) ( 0,  0, "ISTCXCRC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["PSI5SPRCF1n"]["CHEN"     ] = &Cpsis011_ch_regif::cb_PSI5SPRCF1n_CHEN;
    mWrCbAPI["PSI5SPRCF2n"]["F1PAYLD"  ] = &Cpsis011_ch_regif::cb_PSI5SPRCF2n_F1PAYLD;
    mWrCbAPI["PSI5SPWDEn"]["WDTEB"    ] = &Cpsis011_ch_regif::cb_PSI5SPWDEn_WDTEB;
    mWrCbAPI["PSI5SPWDPn"]["WDTPRS"   ] = &Cpsis011_ch_regif::cb_PSI5SPWDPn_WDTPRS;
    mWrCbAPI["PSI5SPWDEVn"]["WDTEX"    ] = &Cpsis011_ch_regif::cb_PSI5SPWDEVn_WDTEX;
    mWrCbAPI["PSI5SPTCDn"]["CHID"     ] = &Cpsis011_ch_regif::cb_PSI5SPTCDn_CHID;
    mWrCbAPI["PSI5SPCIEn"]["IEBCRC"   ] = &Cpsis011_ch_regif::cb_PSI5SPCIEn_IEBCRC;
    mWrCbAPI["PSI5SPDREn"]["DRQERFN"  ] = &Cpsis011_ch_regif::cb_PSI5SPDREn_DRQERFN;
    mWrCbAPI["PSI5SPSTPn"]["STPRS"    ] = &Cpsis011_ch_regif::cb_PSI5SPSTPn_STPRS;
    mWrCbAPI["PSI5SPSTEVn"]["STEX"     ] = &Cpsis011_ch_regif::cb_PSI5SPSTEVn_STEX;
    mWrCbAPI["PSI5SPSTSn"]["STSEL"    ] = &Cpsis011_ch_regif::cb_PSI5SPSTSn_STSEL;
    mWrCbAPI["PSI5SPRESCn"]["RERRCLF1" ] = &Cpsis011_ch_regif::cb_PSI5SPRESCn_RERRCLF1;
    mWrCbAPI["PSI5SPTCDCn"]["TSCCLR"   ] = &Cpsis011_ch_regif::cb_PSI5SPTCDCn_TSCCLR;
    mWrCbAPI["PSI5SPDDTPn"]["DDSRTYPE" ] = &Cpsis011_ch_regif::cb_PSI5SPDDTPn_DDSRTYPE;
    mWrCbAPI["PSI5SPDDDn"]["DDSRADR"  ] = &Cpsis011_ch_regif::cb_PSI5SPDDDn_DDSRADR;
    mWrCbAPI["PSI5SPDDSPn"]["DDSRSTP"  ] = &Cpsis011_ch_regif::cb_PSI5SPDDSPn_DDSRSTP;
    mWrCbAPI["PSI5SPCISCn"]["ISTCCRC"  ] = &Cpsis011_ch_regif::cb_PSI5SPCISCn_ISTCCRC;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cpsis011_ch_regif::~Cpsis011_ch_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cpsis011_ch_regif::uint Cpsis011_ch_regif::bit_select(
                               cuint val,    ///< [in] Writting address
                               cuint start,  ///< [in] start bit position
                               cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        //ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
        ret_val = val & 0x7F;//chanle 20171020
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_ch_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                               const unsigned char *p_data,   ///< [in] Writing data
                               cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_ch_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                               unsigned char *p_data,   ///< [out] Reading data
                               cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_ch_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                   const unsigned char *p_data,   ///< [in] Writing data
                                   cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_ch_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                   unsigned char *p_data,   ///< [out] Reading data
                                   cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_ch_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                       const unsigned char *p_data,  ///< [in] Writing data
                                       cuint size,                   ///< [in] Data size (byte)
                                       bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_ch_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                       unsigned char *p_data,   ///< [out] Reading data
                                       cuint size,              ///< [in]  Data size (byte)
                                       bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cpsis011_ch_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                    unsigned char *p_data,          ///< [out] Reading data
                                    cuint size,                     ///< [in]  Data size (byte)
                                    cuint reg_index,                ///< [in] Register index
                                    bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cpsis011_ch_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                    const unsigned char *p_data,      ///< [in] Writing data
                                    cuint size,                       ///< [in] Data size (byte)
                                    cuint reg_index,                  ///< [in] Register index
                                    bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cpsis011_ch_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cpsis011_ch_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cpsis011_ch_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cpsis011_ch_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cpsis011_ch_regif::InitLocalVal()
{
    // Initialize local variables
    PSI5SPRCF1n_PFRMIDLE = 0x0;
    PSI5SPRCF1n_F6PKT = 0x0;
    PSI5SPRCF1n_F5PKT = 0x0;
    PSI5SPRCF1n_F4PKT = 0x0;
    PSI5SPRCF1n_F3PKT = 0x0;
    PSI5SPRCF1n_F2PKT = 0x0;
    PSI5SPRCF1n_F1PKT = 0x0;
    PSI5SPRCF1n_SYSEL = 0x0;
    PSI5SPRCF1n_TSCTS = 0x0;
    PSI5SPRCF1n_TSCS = 0x0;
    PSI5SPRCF1n_TSEN = 0x0;
    PSI5SPRCF1n_RFCPS = 0x0;
    PSI5SPRCF1n_CHEN = 0x0;
    PSI5SPRCF2n_F6PAYLD = 0x0;
    PSI5SPRCF2n_F5PAYLD = 0x0;
    PSI5SPRCF2n_F4PAYLD = 0x0;
    PSI5SPRCF2n_F3PAYLD = 0x0;
    PSI5SPRCF2n_F2PAYLD = 0x0;
    PSI5SPRCF2n_F1PAYLD = 0x0;
    PSI5SPWDEn_WDTEB = 0x0;
    PSI5SPWDPn_WDTPRS = 0x0;
    PSI5SPWDEVn_WDTEX = 0x0;
    PSI5SPTCDn_ATRSCMD = 0x0;
    PSI5SPTCDn_ACHID = 0x0;
    PSI5SPTCDn_TRSCMD = 0x0;
    PSI5SPTCDn_CHID = 0x0;
    PSI5SPCIEn_IEBCTFN = 0x0;
    PSI5SPCIEn_IEBDDSFN = 0x0;
    PSI5SPCIEn_IEBDDSOW = 0x0;
    PSI5SPCIEn_IEBRFN = 0x0;
    PSI5SPCIEn_IEBRFEX = 0x0;
    PSI5SPCIEn_IEBRFLK = 0x0;
    PSI5SPCIEn_IEBROV = 0x0;
    PSI5SPCIEn_IEBRWDT = 0x0;
    PSI5SPCIEn_IEBUTFR = 0x0;
    PSI5SPCIEn_IEBUTPT = 0x0;
    PSI5SPCIEn_IEBTRST = 0x0;
    PSI5SPCIEn_IEBPT = 0x0;
    PSI5SPCIEn_IEBCRC = 0x0;
    PSI5SPCIEn_IEBXCRC = 0x0;
    PSI5SPDREn_DRQETFN = 0x0;
    PSI5SPDREn_DRQEWDT = 0x0;
    PSI5SPDREn_DRQERFN = 0x0;
    PSI5SPSTPn_STPRS = 0x0;
    PSI5SPSTEVn_STEX = 0x0;
    PSI5SPSTSn_STSEL = 0x0;
    PSI5SPRESn_RERRF6 = 0x0;
    PSI5SPRESn_RERRF5 = 0x0;
    PSI5SPRESn_RERRF4 = 0x0;
    PSI5SPRESn_RERRF3 = 0x0;
    PSI5SPRESn_RERRF2 = 0x0;
    PSI5SPRESn_RERRF1 = 0x0;
    PSI5SPRESCn_RERRCLF6 = 0x0;
    PSI5SPRESCn_RERRCLF5 = 0x0;
    PSI5SPRESCn_RERRCLF4 = 0x0;
    PSI5SPRESCn_RERRCLF3 = 0x0;
    PSI5SPRESCn_RERRCLF2 = 0x0;
    PSI5SPRESCn_RERRCLF1 = 0x0;
    PSI5SPTCDTn_TSCD = 0x0;
    PSI5SPTCDCn_TSCCLR = 0x0;
    PSI5SPDDTPn_DDSRTYPE = 0x0;
    PSI5SPDDDn_DDSRDT = 0xFFFFF;
    PSI5SPDDDn_DDSRADR = 0xF;
    PSI5SPDDSn_DDSRSTS = 0x0;
    PSI5SPDDSPn_DDSRSTP = 0x0;
    PSI5SPCISn_ISTCTFN = 0x0;
    PSI5SPCISn_ISTDDSFN = 0x0;
    PSI5SPCISn_ISTDDSOW = 0x0;
    PSI5SPCISn_ISTRFN = 0x0;
    PSI5SPCISn_ISTRFEX = 0x0;
    PSI5SPCISn_ISTRFLK = 0x0;
    PSI5SPCISn_ISTROV = 0x0;
    PSI5SPCISn_ISTRWDT = 0x0;
    PSI5SPCISn_ISTUTFR = 0x0;
    PSI5SPCISn_ISTUTPT = 0x0;
    PSI5SPCISn_ISTTRST = 0x0;
    PSI5SPCISn_ISTPT = 0x0;
    PSI5SPCISn_ISTCRC = 0x0;
    PSI5SPCISn_ISTXCRC = 0x0;
    PSI5SPCISCn_ISTCCTFN = 0x0;
    PSI5SPCISCn_ISTCDDSFN = 0x0;
    PSI5SPCISCn_ISTCDDSOW = 0x0;
    PSI5SPCISCn_ISTCRFN = 0x0;
    PSI5SPCISCn_ISTCRFEX = 0x0;
    PSI5SPCISCn_ISTCRFLK = 0x0;
    PSI5SPCISCn_ISTCROV = 0x0;
    PSI5SPCISCn_ISTCRWDT = 0x0;
    PSI5SPCISCn_ISTCUTFR = 0x0;
    PSI5SPCISCn_ISTCUTPT = 0x0;
    PSI5SPCISCn_ISTCTRST = 0x0;
    PSI5SPCISCn_ISTCPT = 0x0;
    PSI5SPCISCn_ISTCCRC = 0x0;
    PSI5SPCISCn_ISTCXCRC = 0x0;
}

/// Update bit value to local value
/// @return None
void Cpsis011_ch_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        if (mChID == 0){
            PSI5SPRCF1n_PFRMIDLE            = (*PSI5SPRCF1n)["PFRMIDLE"   ];
        }
        PSI5SPRCF1n_F6PKT               = (*PSI5SPRCF1n)["F6PKT"      ];
        PSI5SPRCF1n_F5PKT               = (*PSI5SPRCF1n)["F5PKT"      ];
        PSI5SPRCF1n_F4PKT               = (*PSI5SPRCF1n)["F4PKT"      ];
        PSI5SPRCF1n_F3PKT               = (*PSI5SPRCF1n)["F3PKT"      ];
        PSI5SPRCF1n_F2PKT               = (*PSI5SPRCF1n)["F2PKT"      ];
        PSI5SPRCF1n_F1PKT               = (*PSI5SPRCF1n)["F1PKT"      ];
        if (mChID > 0){
            PSI5SPRCF1n_SYSEL               = (*PSI5SPRCF1n)["SYSEL"      ];
            PSI5SPRCF1n_TSCTS               = (*PSI5SPRCF1n)["TSCTS"      ];
        }
        PSI5SPRCF1n_TSCS                = (*PSI5SPRCF1n)["TSCS"       ];
        PSI5SPRCF1n_TSEN                = (*PSI5SPRCF1n)["TSEN"       ];
        PSI5SPRCF1n_RFCPS               = (*PSI5SPRCF1n)["RFCPS"      ];
        PSI5SPRCF1n_CHEN                = (*PSI5SPRCF1n)["CHEN"       ];
        return;
    }
    if (addr == 0x0004) {
        PSI5SPRCF2n_F6PAYLD             = (*PSI5SPRCF2n)["F6PAYLD"    ];
        PSI5SPRCF2n_F5PAYLD             = (*PSI5SPRCF2n)["F5PAYLD"    ];
        PSI5SPRCF2n_F4PAYLD             = (*PSI5SPRCF2n)["F4PAYLD"    ];
        PSI5SPRCF2n_F3PAYLD             = (*PSI5SPRCF2n)["F3PAYLD"    ];
        PSI5SPRCF2n_F2PAYLD             = (*PSI5SPRCF2n)["F2PAYLD"    ];
        PSI5SPRCF2n_F1PAYLD             = (*PSI5SPRCF2n)["F1PAYLD"    ];
        return;
    }
    if (addr == 0x0008) {
        PSI5SPWDEn_WDTEB                = (*PSI5SPWDEn )["WDTEB"      ];
        return;
    }
    if (addr == 0x000C) {
        PSI5SPWDPn_WDTPRS               = (*PSI5SPWDPn )["WDTPRS"     ];
        return;
    }
    if (addr == 0x0010) {
        PSI5SPWDEVn_WDTEX               = (*PSI5SPWDEVn)["WDTEX"      ];
        return;
    }
    if (addr == 0x0014) {
        if (mChID > 0){
            PSI5SPTCDn_ATRSCMD              = (*PSI5SPTCDn )["ATRSCMD"    ];
            PSI5SPTCDn_ACHID                = (*PSI5SPTCDn )["ACHID"      ];
            PSI5SPTCDn_TRSCMD               = (*PSI5SPTCDn )["TRSCMD"     ];
            PSI5SPTCDn_CHID                 = (*PSI5SPTCDn )["CHID"       ];
            return;
        }
    }
    if (addr == 0x0018) {
        if (mChID == 0){
            PSI5SPCIEn_IEBCTFN              = (*PSI5SPCIEn )["IEBCTFN"    ];
        }
        if (mChID > 0){
            PSI5SPCIEn_IEBDDSFN             = (*PSI5SPCIEn )["IEBDDSFN"   ];
            PSI5SPCIEn_IEBDDSOW             = (*PSI5SPCIEn )["IEBDDSOW"   ];
        }
        PSI5SPCIEn_IEBRFN               = (*PSI5SPCIEn )["IEBRFN"     ];
        PSI5SPCIEn_IEBRFEX              = (*PSI5SPCIEn )["IEBRFEX"    ];
        PSI5SPCIEn_IEBRFLK              = (*PSI5SPCIEn )["IEBRFLK"    ];
        PSI5SPCIEn_IEBROV               = (*PSI5SPCIEn )["IEBROV"     ];
        PSI5SPCIEn_IEBRWDT              = (*PSI5SPCIEn )["IEBRWDT"    ];
        if (mChID == 0){
            PSI5SPCIEn_IEBUTFR              = (*PSI5SPCIEn )["IEBUTFR"    ];
            PSI5SPCIEn_IEBUTPT              = (*PSI5SPCIEn )["IEBUTPT"    ];
        }
        PSI5SPCIEn_IEBTRST              = (*PSI5SPCIEn )["IEBTRST"    ];
        PSI5SPCIEn_IEBPT                = (*PSI5SPCIEn )["IEBPT"      ];
        PSI5SPCIEn_IEBCRC               = (*PSI5SPCIEn )["IEBCRC"     ];
        if (mChID == 0){
            PSI5SPCIEn_IEBXCRC              = (*PSI5SPCIEn )["IEBXCRC"    ];
        }
        return;
    }
    if (addr == 0x001C) {
        if (mChID > 0){
            PSI5SPDREn_DRQETFN              = (*PSI5SPDREn )["DRQETFN"    ];
        }
        PSI5SPDREn_DRQEWDT              = (*PSI5SPDREn )["DRQEWDT"    ];
        PSI5SPDREn_DRQERFN              = (*PSI5SPDREn )["DRQERFN"    ];
        return;
    }
    if (mChID > 0){
        if (addr == 0x0024) {
            PSI5SPSTPn_STPRS                = (*PSI5SPSTPn )["STPRS"      ];
            return;
        }
        if (addr == 0x0028) {
            PSI5SPSTEVn_STEX                = (*PSI5SPSTEVn)["STEX"       ];
            return;
        }
        if (addr == 0x002C) {
            PSI5SPSTSn_STSEL                = (*PSI5SPSTSn )["STSEL"      ];
            return;
        }
    }
    if (addr == 0x0030) {
        if (mChID > 0){
            PSI5SPRESn_RERRF6               = (*PSI5SPRESn )["RERRF6"     ];
            PSI5SPRESn_RERRF5               = (*PSI5SPRESn )["RERRF5"     ];
            PSI5SPRESn_RERRF4               = (*PSI5SPRESn )["RERRF4"     ];
            PSI5SPRESn_RERRF3               = (*PSI5SPRESn )["RERRF3"     ];
        }
        PSI5SPRESn_RERRF2               = (*PSI5SPRESn )["RERRF2"     ];
        PSI5SPRESn_RERRF1               = (*PSI5SPRESn )["RERRF1"     ];
        return;
    }
    if (addr == 0x0034) {
        if (mChID > 0){
            PSI5SPRESCn_RERRCLF6            = (*PSI5SPRESCn)["RERRCLF6"   ];
            PSI5SPRESCn_RERRCLF5            = (*PSI5SPRESCn)["RERRCLF5"   ];
            PSI5SPRESCn_RERRCLF4            = (*PSI5SPRESCn)["RERRCLF4"   ];
            PSI5SPRESCn_RERRCLF3            = (*PSI5SPRESCn)["RERRCLF3"   ];
        }
        PSI5SPRESCn_RERRCLF2            = (*PSI5SPRESCn)["RERRCLF2"   ];
        PSI5SPRESCn_RERRCLF1            = (*PSI5SPRESCn)["RERRCLF1"   ];
        return;
    }
    if (addr == 0x0038) {
        PSI5SPTCDTn_TSCD                = (*PSI5SPTCDTn)["TSCD"       ];
        return;
    }
    if (addr == 0x003C) {
        PSI5SPTCDCn_TSCCLR              = (*PSI5SPTCDCn)["TSCCLR"     ];
        return;
    }
    if (mChID > 0){
        if (addr == 0x0040) {
            PSI5SPDDTPn_DDSRTYPE            = (*PSI5SPDDTPn)["DDSRTYPE"   ];
            return;
        }
        if (addr == 0x0044) {
            PSI5SPDDDn_DDSRDT               = (*PSI5SPDDDn )["DDSRDT"     ];
            PSI5SPDDDn_DDSRADR              = (*PSI5SPDDDn )["DDSRADR"    ];
            return;
        }
        if (addr == 0x0048) {
            PSI5SPDDSn_DDSRSTS              = (*PSI5SPDDSn )["DDSRSTS"    ];
            return;
        }
        if (addr == 0x004C) {
            PSI5SPDDSPn_DDSRSTP             = (*PSI5SPDDSPn)["DDSRSTP"    ];
            return;
        }
    }
    if (addr == 0x0050) {
        if (mChID == 0){
            PSI5SPCISn_ISTCTFN              = (*PSI5SPCISn )["ISTCTFN"    ];
        }
        if (mChID > 0){
            PSI5SPCISn_ISTDDSFN             = (*PSI5SPCISn )["ISTDDSFN"   ];
            PSI5SPCISn_ISTDDSOW             = (*PSI5SPCISn )["ISTDDSOW"   ];
        }
        PSI5SPCISn_ISTRFN               = (*PSI5SPCISn )["ISTRFN"     ];
        PSI5SPCISn_ISTRFEX              = (*PSI5SPCISn )["ISTRFEX"    ];
        PSI5SPCISn_ISTRFLK              = (*PSI5SPCISn )["ISTRFLK"    ];
        PSI5SPCISn_ISTROV               = (*PSI5SPCISn )["ISTROV"     ];
        PSI5SPCISn_ISTRWDT              = (*PSI5SPCISn )["ISTRWDT"    ];
        if (mChID == 0){
            PSI5SPCISn_ISTUTFR              = (*PSI5SPCISn )["ISTUTFR"    ];
            PSI5SPCISn_ISTUTPT              = (*PSI5SPCISn )["ISTUTPT"    ];
        }
        PSI5SPCISn_ISTTRST              = (*PSI5SPCISn )["ISTTRST"    ];
        PSI5SPCISn_ISTPT                = (*PSI5SPCISn )["ISTPT"      ];
        PSI5SPCISn_ISTCRC               = (*PSI5SPCISn )["ISTCRC"     ];
        if (mChID == 0){
            PSI5SPCISn_ISTXCRC              = (*PSI5SPCISn )["ISTXCRC"    ];
        }
        return;
    }
    if (addr == 0x0054) {
        if (mChID == 0){
            PSI5SPCISCn_ISTCCTFN            = (*PSI5SPCISCn)["ISTCCTFN"   ];
        }
        if (mChID > 0){
            PSI5SPCISCn_ISTCDDSFN           = (*PSI5SPCISCn)["ISTCDDSFN"  ];
            PSI5SPCISCn_ISTCDDSOW           = (*PSI5SPCISCn)["ISTCDDSOW"  ];
        }
        PSI5SPCISCn_ISTCRFN             = (*PSI5SPCISCn)["ISTCRFN"    ];
        PSI5SPCISCn_ISTCRFEX            = (*PSI5SPCISCn)["ISTCRFEX"   ];
        PSI5SPCISCn_ISTCRFLK            = (*PSI5SPCISCn)["ISTCRFLK"   ];
        PSI5SPCISCn_ISTCROV             = (*PSI5SPCISCn)["ISTCROV"    ];
        PSI5SPCISCn_ISTCRWDT            = (*PSI5SPCISCn)["ISTCRWDT"   ];
        if (mChID == 0){
            PSI5SPCISCn_ISTCUTFR            = (*PSI5SPCISCn)["ISTCUTFR"   ];
            PSI5SPCISCn_ISTCUTPT            = (*PSI5SPCISCn)["ISTCUTPT"   ];
        }
        PSI5SPCISCn_ISTCTRST            = (*PSI5SPCISCn)["ISTCTRST"   ];
        PSI5SPCISCn_ISTCPT              = (*PSI5SPCISCn)["ISTCPT"     ];
        PSI5SPCISCn_ISTCCRC             = (*PSI5SPCISCn)["ISTCCRC"    ];
        if (mChID == 0){
            PSI5SPCISCn_ISTCXCRC            = (*PSI5SPCISCn)["ISTCXCRC"   ];
        }
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cpsis011_ch_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        if (mChID == 0){
            (*PSI5SPRCF1n)["PFRMIDLE"   ] = PSI5SPRCF1n_PFRMIDLE;
        }
        (*PSI5SPRCF1n)["F6PKT"      ] = PSI5SPRCF1n_F6PKT;
        (*PSI5SPRCF1n)["F5PKT"      ] = PSI5SPRCF1n_F5PKT;
        (*PSI5SPRCF1n)["F4PKT"      ] = PSI5SPRCF1n_F4PKT;
        (*PSI5SPRCF1n)["F3PKT"      ] = PSI5SPRCF1n_F3PKT;
        (*PSI5SPRCF1n)["F2PKT"      ] = PSI5SPRCF1n_F2PKT;
        (*PSI5SPRCF1n)["F1PKT"      ] = PSI5SPRCF1n_F1PKT;
        if (mChID > 0){
            (*PSI5SPRCF1n)["SYSEL"      ] = PSI5SPRCF1n_SYSEL;
            (*PSI5SPRCF1n)["TSCTS"      ] = PSI5SPRCF1n_TSCTS;
        }
        (*PSI5SPRCF1n)["TSCS"       ] = PSI5SPRCF1n_TSCS;
        (*PSI5SPRCF1n)["TSEN"       ] = PSI5SPRCF1n_TSEN;
        (*PSI5SPRCF1n)["RFCPS"      ] = PSI5SPRCF1n_RFCPS;
        (*PSI5SPRCF1n)["CHEN"       ] = PSI5SPRCF1n_CHEN;
        return;
    }
    if (addr == 0x0004) {
        (*PSI5SPRCF2n)["F6PAYLD"    ] = PSI5SPRCF2n_F6PAYLD;
        (*PSI5SPRCF2n)["F5PAYLD"    ] = PSI5SPRCF2n_F5PAYLD;
        (*PSI5SPRCF2n)["F4PAYLD"    ] = PSI5SPRCF2n_F4PAYLD;
        (*PSI5SPRCF2n)["F3PAYLD"    ] = PSI5SPRCF2n_F3PAYLD;
        (*PSI5SPRCF2n)["F2PAYLD"    ] = PSI5SPRCF2n_F2PAYLD;
        (*PSI5SPRCF2n)["F1PAYLD"    ] = PSI5SPRCF2n_F1PAYLD;
        return;
    }
    if (addr == 0x0008) {
        (*PSI5SPWDEn )["WDTEB"      ] = PSI5SPWDEn_WDTEB;
        return;
    }
    if (addr == 0x000C) {
        (*PSI5SPWDPn )["WDTPRS"     ] = PSI5SPWDPn_WDTPRS;
        return;
    }
    if (addr == 0x0010) {
        (*PSI5SPWDEVn)["WDTEX"      ] = PSI5SPWDEVn_WDTEX;
        return;
    }
    if (mChID > 0){
        if (addr == 0x0014) {
            (*PSI5SPTCDn )["ATRSCMD"    ] = PSI5SPTCDn_ATRSCMD;
            (*PSI5SPTCDn )["ACHID"      ] = PSI5SPTCDn_ACHID;
            (*PSI5SPTCDn )["TRSCMD"     ] = PSI5SPTCDn_TRSCMD;
            (*PSI5SPTCDn )["CHID"       ] = PSI5SPTCDn_CHID;
            return;
        }
    }
    if (addr == 0x0018) {
        if (mChID == 0){
            (*PSI5SPCIEn )["IEBCTFN"    ] = PSI5SPCIEn_IEBCTFN;
        }
        if (mChID > 0){
            (*PSI5SPCIEn )["IEBDDSFN"   ] = PSI5SPCIEn_IEBDDSFN;
            (*PSI5SPCIEn )["IEBDDSOW"   ] = PSI5SPCIEn_IEBDDSOW;
        }
        (*PSI5SPCIEn )["IEBRFN"     ] = PSI5SPCIEn_IEBRFN;
        (*PSI5SPCIEn )["IEBRFEX"    ] = PSI5SPCIEn_IEBRFEX;
        (*PSI5SPCIEn )["IEBRFLK"    ] = PSI5SPCIEn_IEBRFLK;
        (*PSI5SPCIEn )["IEBROV"     ] = PSI5SPCIEn_IEBROV;
        (*PSI5SPCIEn )["IEBRWDT"    ] = PSI5SPCIEn_IEBRWDT;
        if (mChID == 0){
            (*PSI5SPCIEn )["IEBUTFR"    ] = PSI5SPCIEn_IEBUTFR;
            (*PSI5SPCIEn )["IEBUTPT"    ] = PSI5SPCIEn_IEBUTPT;
        }
        (*PSI5SPCIEn )["IEBTRST"    ] = PSI5SPCIEn_IEBTRST;
        (*PSI5SPCIEn )["IEBPT"      ] = PSI5SPCIEn_IEBPT;
        (*PSI5SPCIEn )["IEBCRC"     ] = PSI5SPCIEn_IEBCRC;
        if (mChID == 0){
            (*PSI5SPCIEn )["IEBXCRC"    ] = PSI5SPCIEn_IEBXCRC;
        }
        return;
    }
    if (addr == 0x001C) {
        if (mChID > 0){
            (*PSI5SPDREn )["DRQETFN"    ] = PSI5SPDREn_DRQETFN;
        }
        (*PSI5SPDREn )["DRQEWDT"    ] = PSI5SPDREn_DRQEWDT;
        (*PSI5SPDREn )["DRQERFN"    ] = PSI5SPDREn_DRQERFN;
        return;
    }
    if (mChID > 0){
        if (addr == 0x0024) {
            (*PSI5SPSTPn )["STPRS"      ] = PSI5SPSTPn_STPRS;
            return;
        }
        if (addr == 0x0028) {
            (*PSI5SPSTEVn)["STEX"       ] = PSI5SPSTEVn_STEX;
            return;
        }
        if (addr == 0x002C) {
            (*PSI5SPSTSn )["STSEL"      ] = PSI5SPSTSn_STSEL;
            return;
        }
    }
    if (addr == 0x0030) {
        if (mChID > 0){
            (*PSI5SPRESn )["RERRF6"     ] = PSI5SPRESn_RERRF6;
            (*PSI5SPRESn )["RERRF5"     ] = PSI5SPRESn_RERRF5;
            (*PSI5SPRESn )["RERRF4"     ] = PSI5SPRESn_RERRF4;
            (*PSI5SPRESn )["RERRF3"     ] = PSI5SPRESn_RERRF3;
        }
        (*PSI5SPRESn )["RERRF2"     ] = PSI5SPRESn_RERRF2;
        (*PSI5SPRESn )["RERRF1"     ] = PSI5SPRESn_RERRF1;
        return;
    }
    if (addr == 0x0034) {
        if (mChID > 0){
            (*PSI5SPRESCn)["RERRCLF6"   ] = PSI5SPRESCn_RERRCLF6;
            (*PSI5SPRESCn)["RERRCLF5"   ] = PSI5SPRESCn_RERRCLF5;
            (*PSI5SPRESCn)["RERRCLF4"   ] = PSI5SPRESCn_RERRCLF4;
            (*PSI5SPRESCn)["RERRCLF3"   ] = PSI5SPRESCn_RERRCLF3;
        }
        (*PSI5SPRESCn)["RERRCLF2"   ] = PSI5SPRESCn_RERRCLF2;
        (*PSI5SPRESCn)["RERRCLF1"   ] = PSI5SPRESCn_RERRCLF1;
        return;
    }
    if (addr == 0x0038) {
        (*PSI5SPTCDTn)["TSCD"       ] = PSI5SPTCDTn_TSCD;
        return;
    }
    if (addr == 0x003C) {
        (*PSI5SPTCDCn)["TSCCLR"     ] = PSI5SPTCDCn_TSCCLR;
        return;
    }
    if (mChID > 0){
        if (addr == 0x0040) {
            (*PSI5SPDDTPn)["DDSRTYPE"   ] = PSI5SPDDTPn_DDSRTYPE;
            return;
        }
        if (addr == 0x0044) {
            (*PSI5SPDDDn )["DDSRDT"     ] = PSI5SPDDDn_DDSRDT;
            (*PSI5SPDDDn )["DDSRADR"    ] = PSI5SPDDDn_DDSRADR;
            return;
        }
        if (addr == 0x0048) {
            (*PSI5SPDDSn )["DDSRSTS"    ] = PSI5SPDDSn_DDSRSTS;
            return;
        }
        if (addr == 0x004C) {
            (*PSI5SPDDSPn)["DDSRSTP"    ] = PSI5SPDDSPn_DDSRSTP;
            return;
        }
    }
    if (addr == 0x0050) {
        if (mChID == 0){
            (*PSI5SPCISn )["ISTCTFN"    ] = PSI5SPCISn_ISTCTFN;
        }
        if (mChID > 0){
            (*PSI5SPCISn )["ISTDDSFN"   ] = PSI5SPCISn_ISTDDSFN;
            (*PSI5SPCISn )["ISTDDSOW"   ] = PSI5SPCISn_ISTDDSOW;
        }
        (*PSI5SPCISn )["ISTRFN"     ] = PSI5SPCISn_ISTRFN;
        (*PSI5SPCISn )["ISTRFEX"    ] = PSI5SPCISn_ISTRFEX;
        (*PSI5SPCISn )["ISTRFLK"    ] = PSI5SPCISn_ISTRFLK;
        (*PSI5SPCISn )["ISTROV"     ] = PSI5SPCISn_ISTROV;
        (*PSI5SPCISn )["ISTRWDT"    ] = PSI5SPCISn_ISTRWDT;
        if (mChID == 0){
            (*PSI5SPCISn )["ISTUTFR"    ] = PSI5SPCISn_ISTUTFR;
            (*PSI5SPCISn )["ISTUTPT"    ] = PSI5SPCISn_ISTUTPT;
        }
        (*PSI5SPCISn )["ISTTRST"    ] = PSI5SPCISn_ISTTRST;
        (*PSI5SPCISn )["ISTPT"      ] = PSI5SPCISn_ISTPT;
        (*PSI5SPCISn )["ISTCRC"     ] = PSI5SPCISn_ISTCRC;
        if (mChID == 0){
            (*PSI5SPCISn )["ISTXCRC"    ] = PSI5SPCISn_ISTXCRC;
        }
        return;
    }
    if (addr == 0x0054) {
        if (mChID == 0){
            (*PSI5SPCISCn)["ISTCCTFN"   ] = PSI5SPCISCn_ISTCCTFN;
        }
        if (mChID > 0){
            (*PSI5SPCISCn)["ISTCDDSFN"  ] = PSI5SPCISCn_ISTCDDSFN;
            (*PSI5SPCISCn)["ISTCDDSOW"  ] = PSI5SPCISCn_ISTCDDSOW;
        }
        (*PSI5SPCISCn)["ISTCRFN"    ] = PSI5SPCISCn_ISTCRFN;
        (*PSI5SPCISCn)["ISTCRFEX"   ] = PSI5SPCISCn_ISTCRFEX;
        (*PSI5SPCISCn)["ISTCRFLK"   ] = PSI5SPCISCn_ISTCRFLK;
        (*PSI5SPCISCn)["ISTCROV"    ] = PSI5SPCISCn_ISTCROV;
        (*PSI5SPCISCn)["ISTCRWDT"   ] = PSI5SPCISCn_ISTCRWDT;
        if (mChID == 0){
            (*PSI5SPCISCn)["ISTCUTFR"   ] = PSI5SPCISCn_ISTCUTFR;
            (*PSI5SPCISCn)["ISTCUTPT"   ] = PSI5SPCISCn_ISTCUTPT;
        }
        (*PSI5SPCISCn)["ISTCTRST"   ] = PSI5SPCISCn_ISTCTRST;
        (*PSI5SPCISCn)["ISTCPT"     ] = PSI5SPCISCn_ISTCPT;
        (*PSI5SPCISCn)["ISTCCRC"    ] = PSI5SPCISCn_ISTCCRC;
        if (mChID == 0){
            (*PSI5SPCISCn)["ISTCXCRC"   ] = PSI5SPCISCn_ISTCXCRC;
        }
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cpsis011_ch_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cpsis011_ch_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cpsis011_ch_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cpsis011_ch_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cpsis011_ch_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cpsis011_ch_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cpsis011_ch_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cpsis011_ch_regif::uint Cpsis011_ch_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cpsis011_ch_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cpsis011_ch_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cpsis011_ch_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cpsis011_ch_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cpsis011_ch_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cpsis011_ch_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cpsis011_ch_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
