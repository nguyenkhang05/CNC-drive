// -----------------------------------------------------------------------------
// $Id: dsadc_unit_regif.cpp 1398 2019-11-26 06:16:27Z chuonghoangle $
//
// Copyright(c) 2017-2019 Renesas Electronics Corporation
// Copyright(c) 2017-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : dsadc_unit_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DSADC_UNIT
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access init        support callback
//     %%REG    DSADnVCR      DSADnVCR      8|16|32  8|16|32  32      0x00    0             7           -             -            W|R    0           TRUE    -
//     %%REG    DSADnDIR      DSADnDIR      8|16|32  8|16|32  32      0x20    0             7           -             -            R      0           TRUE    -
//     %%REG    DSADnADSTCR   DSADnADSTCR   8        8|16|32  8       0x40    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnADENDCR  DSADnADENDCR  8        8|16|32  8       0x44    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnCLBSTCR  DSADnCLBSTCR  8        8|16|32  8       0x48    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnCLBEDCR  DSADnCLBEDCR  8        8|16|32  8       0x4C    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnADTCR    DSADnADTCR    8        8|16|32  8       0x50    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnUCR      DSADnUCR      8|16|32  8|16|32  32      0x54    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnVCPTRR   DSADnVCPTRR   8        8|16|32  8       0x58    -             -           -             -            W|R    0           TRUE    W
//     %%REG    DSADnADSR     DSADnADSR     8|16|32  8|16|32  8       0x60    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnUDPTRR   DSADnUDPTRR   8|16|32  8|16|32  8       0x64    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnUDIR     DSADnUDIR     8|16|32  8|16|32  32      0x68    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnTSVAL    DSADnTSVAL    8|16|32  8|16|32  32      0x6C    -             -           -             -            R      0x007F0000  TRUE    -
//     %%REG    DSADnSFTCR    DSADnSFTCR    8        8|16|32  8       0x70    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnECR      DSADnECR      8        8|16|32  8       0x74    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnER       DSADnER       8|16|32  8|16|32  32      0x78    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnTDLVR    DSADnTDLVR    8        8|16|32  8       0x7C    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnULTBR    DSADnULTBR    16|32    8|16|32  32      0x80    0             3           -             -            W|R    0x7FFF8000  TRUE    -
// 
// 
// %REG_NAME DSADnVCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    GAIN        29     28     0     W|R     TRUE     -
//     %%BIT    VCULME      27     27     0     W|R     TRUE     -
//     %%BIT    VCLLME      26     26     0     W|R     TRUE     -
//     %%BIT    VCULLMTBS   25     24     0     W|R     TRUE     -
//     %%BIT    ORT         23     23     0     W|R     TRUE     -
//     %%BIT    TPVSL       22     20     0     W|R     TRUE     -
//     %%BIT    DSDFTYP     17     16     0     W|R     TRUE     -
//     %%BIT    ADIE        15     15     0     W|R     TRUE     -
//     %%BIT    ULEIE       14     14     0     W|R     TRUE     -
//     %%BIT    DFENT       12     12     0     W|R     TRUE     -
//     %%BIT    DFTAG       11     8      0     W|R     TRUE     -
//     %%BIT    CNVCLS      5      4      0     W|R     TRUE     -
//     %%BIT    GCTRL       3      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    IDEF        26     26     0     R       TRUE     -
//     %%BIT    WFLG        25     25     0     R       TRUE     -
//     %%BIT    PRTY        24     24     0     R       TRUE     -
//     %%BIT    DR          15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnADSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADST        0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnADENDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADEND       0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnCLBSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBST       0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnCLBEDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBEND      0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnADTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADSTTE      6      6      0     W|R     TRUE     -
//     %%BIT    ENDTRGE     1      1      0     W|R     TRUE     -
//     %%BIT    STTRGE      0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnUCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    VPRSTE      29     29     0     W|R     TRUE     -
//     %%BIT    RDMA        28     28     0     W|R     TRUE     -
//     %%BIT    RESO0       26     26     0     W|R     TRUE     -
//     %%BIT    DFES        24     24     0     W|R     TRUE     -
//     %%BIT    DFMT        11     8      0     W|R     TRUE     -
//     %%BIT    VCEP        2      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnVCPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    VCPTR       2      0      0     W|R     TRUE     W
// 
// %REG_NAME DSADnADSR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBACT      1      1      0     R       TRUE     -
//     %%BIT    ADACT       0      0      0     R       TRUE     -
// 
// %REG_NAME DSADnUDPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    UDPTR       2      0      0     R       TRUE     -
// 
// %REG_NAME DSADnUDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CHNUM       31     29     0     R       TRUE     -
//     %%BIT    UIDEF       26     26     0     R       TRUE     -
//     %%BIT    UWFLG       25     25     0     R       TRUE     -
//     %%BIT    UPRTY       24     24     0     R       TRUE     -
//     %%BIT    UDR         15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnTSVAL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    TSVAL       22     16     0x7F  R       TRUE     -
//     %%BIT    TSDR        15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnSFTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RDCLRE      7      7      0     W|R     TRUE     -
//     %%BIT    OWEIE       2      2      0     W|R     TRUE     -
//     %%BIT    PEIE        1      1      0     W|R     TRUE     -
//     %%BIT    IDEIE       0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnECR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ULEC        4      4      0     W       TRUE     -
//     %%BIT    LLEC        3      3      0     W       TRUE     -
//     %%BIT    OWEC        2      2      0     W       TRUE     -
//     %%BIT    PEC         1      1      0     W       TRUE     W
// 
// %REG_NAME DSADnER
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ULE         31     31     0     R       TRUE     -
//     %%BIT    LLE         30     30     0     R       TRUE     -
//     %%BIT    ULECAP      26     24     0     R       TRUE     -
//     %%BIT    OWE         23     23     0     R       TRUE     -
//     %%BIT    OWECAP      18     16     0     R       TRUE     -
//     %%BIT    PE          15     15     0     R       TRUE     -
//     %%BIT    PECAP       10     8      0     R       TRUE     -
// 
// %REG_NAME DSADnTDLVR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    AN3NLV      7      7      0     W|R     TRUE     -
//     %%BIT    AN3PLV      6      6      0     W|R     TRUE     -
//     %%BIT    AN2NLV      5      5      0     W|R     TRUE     -
//     %%BIT    AN2PLV      4      4      0     W|R     TRUE     -
//     %%BIT    AN1NLV      3      3      0     W|R     TRUE     -
//     %%BIT    AN1PLV      2      2      0     W|R     TRUE     -
//     %%BIT    AN0NLV      1      1      0     W|R     TRUE     -
//     %%BIT    AN0PLV      0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnULTBR
//     %%TITLE  name        upper  lower  init    access  support  callback
//     %%BIT    ULMTB       31     16     0x7FFF  W|R     TRUE     -
//     %%BIT    LLMTB       15     0      0x8000  W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file dsadc_unit_regif.cpp
/// @brief Register IF class of model DSADC_UNIT
/// $Id: dsadc_unit_regif.cpp 1398 2019-11-26 06:16:27Z chuonghoangle $
/// $Date: 2019-11-26 15:16:27 +0900 (2019/11/26 (火)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#include "dsadc_unit_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cdsadc_unit_regif::Cdsadc_unit_regif(std::string name, uint buswidth, uint ch_num)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x90/4))
    #endif
{
    mCh_num = ch_num;
    CommandInit();
    DSADnADSTCR  = new vpcl::re_register(0x0040, this, "DSADnADSTCR" , name.c_str());
    DSADnADENDCR = new vpcl::re_register(0x0044, this, "DSADnADENDCR", name.c_str());
    DSADnCLBSTCR = new vpcl::re_register(0x0048, this, "DSADnCLBSTCR", name.c_str());
    DSADnCLBEDCR = new vpcl::re_register(0x004C, this, "DSADnCLBEDCR", name.c_str());
    DSADnADTCR   = new vpcl::re_register(0x0050, this, "DSADnADTCR"  , name.c_str());
    DSADnUCR     = new vpcl::re_register(0x0054, this, "DSADnUCR"    , name.c_str());
    DSADnVCPTRR  = new vpcl::re_register(0x0058, this, "DSADnVCPTRR" , name.c_str());
    DSADnADSR    = new vpcl::re_register(0x0060, this, "DSADnADSR"   , name.c_str());
    DSADnUDPTRR  = new vpcl::re_register(0x0064, this, "DSADnUDPTRR" , name.c_str());
    DSADnUDIR    = new vpcl::re_register(0x0068, this, "DSADnUDIR"   , name.c_str());
    DSADnTSVAL   = new vpcl::re_register(0x006C, this, "DSADnTSVAL"  , name.c_str());
    DSADnSFTCR   = new vpcl::re_register(0x0070, this, "DSADnSFTCR"  , name.c_str());
    DSADnECR     = new vpcl::re_register(0x0074, this, "DSADnECR"    , name.c_str());
    DSADnER      = new vpcl::re_register(0x0078, this, "DSADnER"     , name.c_str());
    DSADnTDLVR   = new vpcl::re_register(0x007C, this, "DSADnTDLVR"  , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"DSADnVCR"<< i;
        DSADnVCR    [i] = new vpcl::re_register((0x0000) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"DSADnDIR"<< i;
        DSADnDIR    [i] = new vpcl::re_register((0x0020) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num/2; i++) {
        str_tmp.str("");
        str_tmp<<"DSADnULTBR"<< i;
        DSADnULTBR  [i] = new vpcl::re_register((0x0080) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    for(uint i = 0; i < mCh_num;    i++) {
        mRegMap[(0x0000)     + i*4 ] = index;
        mRegMap[(0x0000 + 1) + i*4 ] = index;
        mRegMap[(0x0000 + 2) + i*4 ] = index;
        mRegMap[(0x0000 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < mCh_num;    i++) {
        mRegMap[(0x0020)     + i*4 ] = index;
        mRegMap[(0x0020 + 1) + i*4 ] = index;
        mRegMap[(0x0020 + 2) + i*4 ] = index;
        mRegMap[(0x0020 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0040]     = index++;
    mRegMap[0x0044]     = index++;
    mRegMap[0x0048]     = index++;
    mRegMap[0x004C]     = index++;
    mRegMap[0x0050]     = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mRegMap[0x0058]     = index++;
    mRegMap[0x0060]     = index++;
    mRegMap[0x0064]     = index++;
    mRegMap[0x0068]     = index;
    mRegMap[0x0068 + 1] = index;
    mRegMap[0x0068 + 2] = index;
    mRegMap[0x0068 + 3] = index++;
    mRegMap[0x006C]     = index;
    mRegMap[0x006C + 1] = index;
    mRegMap[0x006C + 2] = index;
    mRegMap[0x006C + 3] = index++;
    mRegMap[0x0070]     = index++;
    mRegMap[0x0074]     = index++;
    mRegMap[0x0078]     = index;
    mRegMap[0x0078 + 1] = index;
    mRegMap[0x0078 + 2] = index;
    mRegMap[0x0078 + 3] = index++;
    mRegMap[0x007C]     = index++;
    for(uint i = 0; i < mCh_num/2;  i++) {
        mRegMap[(0x0080)     + i*4 ] = index;
        mRegMap[(0x0080 + 1) + i*4 ] = index;
        mRegMap[(0x0080 + 2) + i*4 ] = index;
        mRegMap[(0x0080 + 3) + i*4 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_DSADnADSTCR_, "DSADnADSTCR_", 0x0040);
    CW_DSADnADSTCR  = new scml2::bitfield<uint>(DSADnADSTCR->name() , CW_DSADnADSTCR_            ,  0,  8);
    cw_instantiate_reg(CW_DSADnADENDCR_, "DSADnADENDCR_", 0x0044);
    CW_DSADnADENDCR = new scml2::bitfield<uint>(DSADnADENDCR->name(), CW_DSADnADENDCR_           ,  0,  8);
    cw_instantiate_reg(CW_DSADnCLBSTCR_, "DSADnCLBSTCR_", 0x0048);
    CW_DSADnCLBSTCR = new scml2::bitfield<uint>(DSADnCLBSTCR->name(), CW_DSADnCLBSTCR_           ,  0,  8);
    cw_instantiate_reg(CW_DSADnCLBEDCR_, "DSADnCLBEDCR_", 0x004C);
    CW_DSADnCLBEDCR = new scml2::bitfield<uint>(DSADnCLBEDCR->name(), CW_DSADnCLBEDCR_           ,  0,  8);
    cw_instantiate_reg(CW_DSADnADTCR_, "DSADnADTCR_", 0x0050);
    CW_DSADnADTCR   = new scml2::bitfield<uint>(DSADnADTCR->name()  , CW_DSADnADTCR_             ,  0,  8);
    cw_instantiate_reg(CW_DSADnVCPTRR_, "DSADnVCPTRR_", 0x0058);
    CW_DSADnVCPTRR  = new scml2::bitfield<uint>(DSADnVCPTRR->name() , CW_DSADnVCPTRR_            ,  0,  8);
    cw_instantiate_reg(CW_DSADnADSR_, "DSADnADSR_", 0x0060);
    CW_DSADnADSR    = new scml2::bitfield<uint>(DSADnADSR->name()   , CW_DSADnADSR_              ,  0,  8);
    cw_instantiate_reg(CW_DSADnUDPTRR_, "DSADnUDPTRR_", 0x0064);
    CW_DSADnUDPTRR  = new scml2::bitfield<uint>(DSADnUDPTRR->name() , CW_DSADnUDPTRR_            ,  0,  8);
    cw_instantiate_reg(CW_DSADnSFTCR_, "DSADnSFTCR_", 0x0070);
    CW_DSADnSFTCR   = new scml2::bitfield<uint>(DSADnSFTCR->name()  , CW_DSADnSFTCR_             ,  0,  8);
    cw_instantiate_reg(CW_DSADnECR_, "DSADnECR_", 0x0074);
    CW_DSADnECR     = new scml2::bitfield<uint>(DSADnECR->name()    , CW_DSADnECR_               ,  0,  8);
    cw_instantiate_reg(CW_DSADnTDLVR_, "DSADnTDLVR_", 0x007C);
    CW_DSADnTDLVR   = new scml2::bitfield<uint>(DSADnTDLVR->name()  , CW_DSADnTDLVR_             ,  0,  8);
    for(uint i = 0; i < mCh_num    ; i++) cw_instantiate_reg(CW_DSADnVCR      [i], DSADnVCR    [i]->name(), DSADnVCR    [i]->addr());
    for(uint i = 0; i < mCh_num    ; i++) cw_instantiate_reg(CW_DSADnDIR      [i], DSADnDIR    [i]->name(), DSADnDIR    [i]->addr());
    cw_instantiate_reg(CW_DSADnUCR      , DSADnUCR->name()    , DSADnUCR->addr()    );
    cw_instantiate_reg(CW_DSADnUDIR     , DSADnUDIR->name()   , DSADnUDIR->addr()   );
    cw_instantiate_reg(CW_DSADnTSVAL    , DSADnTSVAL->name()  , DSADnTSVAL->addr()  );
    cw_instantiate_reg(CW_DSADnER       , DSADnER->name()     , DSADnER->addr()     );
    for(uint i = 0; i < mCh_num/2  ; i++) cw_instantiate_reg(CW_DSADnULTBR    [i], DSADnULTBR  [i]->name(), DSADnULTBR  [i]->addr());
    #endif
    for(uint i = 0; i < mCh_num    ; i++) mCurReg = mRegArray[index++] = new SRegList(DSADnVCR      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num    ; i++) mCurReg = mRegArray[index++] = new SRegList(DSADnDIR      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnADSTCR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnADENDCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnCLBSTCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnCLBEDCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnADTCR    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnUCR      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnVCPTRR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnADSR     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnUDPTRR   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnUDIR     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnTSVAL    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnSFTCR    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnECR      , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnER       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSADnTDLVR    , mCurReg, 0,  1,       "8", "8|16|32");
    for(uint i = 0; i < mCh_num/2  ; i++) mCurReg = mRegArray[index++] = new SRegList(DSADnULTBR    [i], mCurReg, i,  4,   "16|32", "8|16|32");

    mRegList = mCurReg;

    (*DSADnADSTCR   ) ( 0,  0, "ADST"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnADENDCR  ) ( 0,  0, "ADEND"   , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnCLBSTCR  ) ( 0,  0, "CLBST"   , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnCLBEDCR  ) ( 0,  0, "CLBEND"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnADTCR    ) ( 6,  6, "ADSTTE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnADTCR    ) ( 1,  1, "ENDTRGE" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnADTCR    ) ( 0,  0, "STTRGE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) (29, 29, "VPRSTE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) (28, 28, "RDMA"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) (26, 26, "RESO0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) (24, 24, "DFES"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) (11,  8, "DFMT"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnUCR      ) ( 2,  0, "VCEP"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnVCPTRR   ) ( 2,  0, "VCPTR"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnADSR     ) ( 1,  1, "CLBACT"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnADSR     ) ( 0,  0, "ADACT"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDPTRR   ) ( 2,  0, "UDPTR"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDIR     ) (31, 29, "CHNUM"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDIR     ) (26, 26, "UIDEF"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDIR     ) (25, 25, "UWFLG"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDIR     ) (24, 24, "UPRTY"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnUDIR     ) (15,  0, "UDR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnTSVAL    ) (22, 16, "TSVAL"   , 0x7F      , "R"     , vpcl::SPP_ENABLE);
    (*DSADnTSVAL    ) (15,  0, "TSDR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnSFTCR    ) ( 7,  7, "RDCLRE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnSFTCR    ) ( 2,  2, "OWEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnSFTCR    ) ( 1,  1, "PEIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnSFTCR    ) ( 0,  0, "IDEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnECR      ) ( 4,  4, "ULEC"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnECR      ) ( 3,  3, "LLEC"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnECR      ) ( 2,  2, "OWEC"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnECR      ) ( 1,  1, "PEC"     , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (31, 31, "ULE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (30, 30, "LLE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (26, 24, "ULECAP"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (23, 23, "OWE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (18, 16, "OWECAP"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (15, 15, "PE"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnER       ) (10,  8, "PECAP"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 7,  7, "AN3NLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 6,  6, "AN3PLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 5,  5, "AN2NLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 4,  4, "AN2PLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 3,  3, "AN1NLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 2,  2, "AN1PLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 1,  1, "AN0NLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*DSADnTDLVR    ) ( 0,  0, "AN0PLV"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < mCh_num; i++) {
        (*DSADnDIR      [i]) (26, 26, "IDEF"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DSADnDIR      [i]) (25, 25, "WFLG"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DSADnDIR      [i]) (24, 24, "PRTY"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DSADnDIR      [i]) (15,  0, "DR"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num/2; i++) {
        (*DSADnULTBR    [i]) (31, 16, "ULMTB"   , 0x7FFF    , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnULTBR    [i]) (15,  0, "LLMTB"   , 0x8000    , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*DSADnVCR      [i]) (29, 28, "GAIN"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (27, 27, "VCULME"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (26, 26, "VCLLME"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (25, 24, "VCULLMTBS", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (23, 23, "ORT"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (22, 20, "TPVSL"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (17, 16, "DSDFTYP" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (15, 15, "ADIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (14, 14, "ULEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (12, 12, "DFENT"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) (11,  8, "DFTAG"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) ( 5,  4, "CNVCLS"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*DSADnVCR      [i]) ( 3,  0, "GCTRL"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["DSADnADSTCR"]["ADST"      ] = &Cdsadc_unit_regif::cb_DSADnADSTCR_ADST;
    mWrCbAPI["DSADnADENDCR"]["ADEND"     ] = &Cdsadc_unit_regif::cb_DSADnADENDCR_ADEND;
    mWrCbAPI["DSADnCLBSTCR"]["CLBST"     ] = &Cdsadc_unit_regif::cb_DSADnCLBSTCR_CLBST;
    mWrCbAPI["DSADnCLBEDCR"]["CLBEND"    ] = &Cdsadc_unit_regif::cb_DSADnCLBEDCR_CLBEND;
    mWrCbAPI["DSADnVCPTRR"]["VCPTR"     ] = &Cdsadc_unit_regif::cb_DSADnVCPTRR_VCPTR;
    mWrCbAPI["DSADnECR"  ]["PEC"       ] = &Cdsadc_unit_regif::cb_DSADnECR_PEC;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cdsadc_unit_regif::~Cdsadc_unit_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cdsadc_unit_regif::uint Cdsadc_unit_regif::bit_select(
                                      cuint val,    ///< [in] Writting address
                                      cuint start,  ///< [in] start bit position
                                      cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdsadc_unit_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                      const unsigned char *p_data,   ///< [in] Writing data
                                      cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdsadc_unit_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                      unsigned char *p_data,   ///< [out] Reading data
                                      cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdsadc_unit_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                          const unsigned char *p_data,   ///< [in] Writing data
                                          cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdsadc_unit_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                          unsigned char *p_data,   ///< [out] Reading data
                                          cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdsadc_unit_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                              const unsigned char *p_data,  ///< [in] Writing data
                                              cuint size,                   ///< [in] Data size (byte)
                                              bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdsadc_unit_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                              unsigned char *p_data,   ///< [out] Reading data
                                              cuint size,              ///< [in]  Data size (byte)
                                              bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cdsadc_unit_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                           unsigned char *p_data,          ///< [out] Reading data
                                           cuint size,                     ///< [in]  Data size (byte)
                                           cuint reg_index,                ///< [in] Register index
                                           bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cdsadc_unit_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                           const unsigned char *p_data,      ///< [in] Writing data
                                           cuint size,                       ///< [in] Data size (byte)
                                           cuint reg_index,                  ///< [in] Register index
                                           bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cdsadc_unit_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cdsadc_unit_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cdsadc_unit_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cdsadc_unit_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cdsadc_unit_regif::InitLocalVal()
{
    // Initialize local variables
    for(uint i = 0; i < mCh_num;    i++) {
        DSADnVCR_GAIN[i] = 0x0;
        DSADnVCR_VCULME[i] = 0x0;
        DSADnVCR_VCLLME[i] = 0x0;
        DSADnVCR_VCULLMTBS[i] = 0x0;
        DSADnVCR_ORT [i] = 0x0;
        DSADnVCR_TPVSL[i] = 0x0;
        DSADnVCR_DSDFTYP[i] = 0x0;
        DSADnVCR_ADIE[i] = 0x0;
        DSADnVCR_ULEIE[i] = 0x0;
        DSADnVCR_DFENT[i] = 0x0;
        DSADnVCR_DFTAG[i] = 0x0;
        DSADnVCR_CNVCLS[i] = 0x0;
        DSADnVCR_GCTRL[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;    i++) {
        DSADnDIR_IDEF[i] = 0x0;
        DSADnDIR_WFLG[i] = 0x0;
        DSADnDIR_PRTY[i] = 0x0;
        DSADnDIR_DR  [i] = 0x0;
    }
    DSADnADSTCR_ADST = 0x0;
    DSADnADENDCR_ADEND = 0x0;
    DSADnCLBSTCR_CLBST = 0x0;
    DSADnCLBEDCR_CLBEND = 0x0;
    DSADnADTCR_ADSTTE = 0x0;
    DSADnADTCR_ENDTRGE = 0x0;
    DSADnADTCR_STTRGE = 0x0;
    DSADnUCR_VPRSTE = 0x0;
    DSADnUCR_RDMA = 0x0;
    DSADnUCR_RESO0 = 0x0;
    DSADnUCR_DFES = 0x0;
    DSADnUCR_DFMT = 0x0;
    DSADnUCR_VCEP = 0x0;
    DSADnVCPTRR_VCPTR = 0x0;
    DSADnADSR_CLBACT = 0x0;
    DSADnADSR_ADACT = 0x0;
    DSADnUDPTRR_UDPTR = 0x0;
    DSADnUDIR_CHNUM = 0x0;
    DSADnUDIR_UIDEF = 0x0;
    DSADnUDIR_UWFLG = 0x0;
    DSADnUDIR_UPRTY = 0x0;
    DSADnUDIR_UDR = 0x0;
    DSADnTSVAL_TSVAL = 0x7F;
    DSADnTSVAL_TSDR = 0x0;
    DSADnSFTCR_RDCLRE = 0x0;
    DSADnSFTCR_OWEIE = 0x0;
    DSADnSFTCR_PEIE = 0x0;
    DSADnSFTCR_IDEIE = 0x0;
    DSADnECR_ULEC = 0x0;
    DSADnECR_LLEC = 0x0;
    DSADnECR_OWEC = 0x0;
    DSADnECR_PEC  = 0x0;
    DSADnER_ULE   = 0x0;
    DSADnER_LLE   = 0x0;
    DSADnER_ULECAP = 0x0;
    DSADnER_OWE   = 0x0;
    DSADnER_OWECAP = 0x0;
    DSADnER_PE    = 0x0;
    DSADnER_PECAP = 0x0;
    DSADnTDLVR_AN3NLV = 0x0;
    DSADnTDLVR_AN3PLV = 0x0;
    DSADnTDLVR_AN2NLV = 0x0;
    DSADnTDLVR_AN2PLV = 0x0;
    DSADnTDLVR_AN1NLV = 0x0;
    DSADnTDLVR_AN1PLV = 0x0;
    DSADnTDLVR_AN0NLV = 0x0;
    DSADnTDLVR_AN0PLV = 0x0;
    for(uint i = 0; i < mCh_num/2;  i++) {
        DSADnULTBR_ULMTB[i] = 0x7FFF;
        DSADnULTBR_LLMTB[i] = 0x8000;
    }
}

/// Update bit value to local value
/// @return None
void Cdsadc_unit_regif::UpdateLocalVal(cuint addr)
{
    if ((addr <= (0x0000)+(4*7)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        DSADnVCR_GAIN                   [i] = (*(DSADnVCR    [i]))["GAIN"        ];
        DSADnVCR_VCULME                 [i] = (*(DSADnVCR    [i]))["VCULME"      ];
        DSADnVCR_VCLLME                 [i] = (*(DSADnVCR    [i]))["VCLLME"      ];
        DSADnVCR_VCULLMTBS              [i] = (*(DSADnVCR    [i]))["VCULLMTBS"   ];
        DSADnVCR_ORT                    [i] = (*(DSADnVCR    [i]))["ORT"         ];
        DSADnVCR_TPVSL                  [i] = (*(DSADnVCR    [i]))["TPVSL"       ];
        DSADnVCR_DSDFTYP                [i] = (*(DSADnVCR    [i]))["DSDFTYP"     ];
        DSADnVCR_ADIE                   [i] = (*(DSADnVCR    [i]))["ADIE"        ];
        DSADnVCR_ULEIE                  [i] = (*(DSADnVCR    [i]))["ULEIE"       ];
        DSADnVCR_DFENT                  [i] = (*(DSADnVCR    [i]))["DFENT"       ];
        DSADnVCR_DFTAG                  [i] = (*(DSADnVCR    [i]))["DFTAG"       ];
        DSADnVCR_CNVCLS                 [i] = (*(DSADnVCR    [i]))["CNVCLS"      ];
        DSADnVCR_GCTRL                  [i] = (*(DSADnVCR    [i]))["GCTRL"       ];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*7)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        DSADnDIR_IDEF                   [i] = (*(DSADnDIR    [i]))["IDEF"        ];
        DSADnDIR_WFLG                   [i] = (*(DSADnDIR    [i]))["WFLG"        ];
        DSADnDIR_PRTY                   [i] = (*(DSADnDIR    [i]))["PRTY"        ];
        DSADnDIR_DR                     [i] = (*(DSADnDIR    [i]))["DR"          ];
        return;
    }
    if (addr == 0x0040) {
        DSADnADSTCR_ADST                 = (*DSADnADSTCR )["ADST"        ];
        return;
    }
    if (addr == 0x0044) {
        DSADnADENDCR_ADEND               = (*DSADnADENDCR)["ADEND"       ];
        return;
    }
    if (addr == 0x0048) {
        DSADnCLBSTCR_CLBST               = (*DSADnCLBSTCR)["CLBST"       ];
        return;
    }
    if (addr == 0x004C) {
        DSADnCLBEDCR_CLBEND              = (*DSADnCLBEDCR)["CLBEND"      ];
        return;
    }
    if (addr == 0x0050) {
        DSADnADTCR_ADSTTE                = (*DSADnADTCR  )["ADSTTE"      ];
        DSADnADTCR_ENDTRGE               = (*DSADnADTCR  )["ENDTRGE"     ];
        DSADnADTCR_STTRGE                = (*DSADnADTCR  )["STTRGE"      ];
        return;
    }
    if (addr == 0x0054) {
        DSADnUCR_VPRSTE                  = (*DSADnUCR    )["VPRSTE"      ];
        DSADnUCR_RDMA                    = (*DSADnUCR    )["RDMA"        ];
        DSADnUCR_RESO0                   = (*DSADnUCR    )["RESO0"       ];
        DSADnUCR_DFES                    = (*DSADnUCR    )["DFES"        ];
        DSADnUCR_DFMT                    = (*DSADnUCR    )["DFMT"        ];
        DSADnUCR_VCEP                    = (*DSADnUCR    )["VCEP"        ];
        return;
    }
    if (addr == 0x0058) {
        DSADnVCPTRR_VCPTR                = (*DSADnVCPTRR )["VCPTR"       ];
        return;
    }
    if (addr == 0x0060) {
        DSADnADSR_CLBACT                 = (*DSADnADSR   )["CLBACT"      ];
        DSADnADSR_ADACT                  = (*DSADnADSR   )["ADACT"       ];
        return;
    }
    if (addr == 0x0064) {
        DSADnUDPTRR_UDPTR                = (*DSADnUDPTRR )["UDPTR"       ];
        return;
    }
    if (addr == 0x0068) {
        DSADnUDIR_CHNUM                  = (*DSADnUDIR   )["CHNUM"       ];
        DSADnUDIR_UIDEF                  = (*DSADnUDIR   )["UIDEF"       ];
        DSADnUDIR_UWFLG                  = (*DSADnUDIR   )["UWFLG"       ];
        DSADnUDIR_UPRTY                  = (*DSADnUDIR   )["UPRTY"       ];
        DSADnUDIR_UDR                    = (*DSADnUDIR   )["UDR"         ];
        return;
    }
    if (addr == 0x006C) {
        DSADnTSVAL_TSVAL                 = (*DSADnTSVAL  )["TSVAL"       ];
        DSADnTSVAL_TSDR                  = (*DSADnTSVAL  )["TSDR"        ];
        return;
    }
    if (addr == 0x0070) {
        DSADnSFTCR_RDCLRE                = (*DSADnSFTCR  )["RDCLRE"      ];
        DSADnSFTCR_OWEIE                 = (*DSADnSFTCR  )["OWEIE"       ];
        DSADnSFTCR_PEIE                  = (*DSADnSFTCR  )["PEIE"        ];
        DSADnSFTCR_IDEIE                 = (*DSADnSFTCR  )["IDEIE"       ];
        return;
    }
    if (addr == 0x0074) {
        DSADnECR_ULEC                    = (*DSADnECR    )["ULEC"        ];
        DSADnECR_LLEC                    = (*DSADnECR    )["LLEC"        ];
        DSADnECR_OWEC                    = (*DSADnECR    )["OWEC"        ];
        DSADnECR_PEC                     = (*DSADnECR    )["PEC"         ];
        return;
    }
    if (addr == 0x0078) {
        DSADnER_ULE                      = (*DSADnER     )["ULE"         ];
        DSADnER_LLE                      = (*DSADnER     )["LLE"         ];
        DSADnER_ULECAP                   = (*DSADnER     )["ULECAP"      ];
        DSADnER_OWE                      = (*DSADnER     )["OWE"         ];
        DSADnER_OWECAP                   = (*DSADnER     )["OWECAP"      ];
        DSADnER_PE                       = (*DSADnER     )["PE"          ];
        DSADnER_PECAP                    = (*DSADnER     )["PECAP"       ];
        return;
    }
    if (addr == 0x007C) {
        DSADnTDLVR_AN3NLV                = (*DSADnTDLVR  )["AN3NLV"      ];
        DSADnTDLVR_AN3PLV                = (*DSADnTDLVR  )["AN3PLV"      ];
        DSADnTDLVR_AN2NLV                = (*DSADnTDLVR  )["AN2NLV"      ];
        DSADnTDLVR_AN2PLV                = (*DSADnTDLVR  )["AN2PLV"      ];
        DSADnTDLVR_AN1NLV                = (*DSADnTDLVR  )["AN1NLV"      ];
        DSADnTDLVR_AN1PLV                = (*DSADnTDLVR  )["AN1PLV"      ];
        DSADnTDLVR_AN0NLV                = (*DSADnTDLVR  )["AN0NLV"      ];
        DSADnTDLVR_AN0PLV                = (*DSADnTDLVR  )["AN0PLV"      ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        DSADnULTBR_ULMTB                [i] = (*(DSADnULTBR  [i]))["ULMTB"       ];
        DSADnULTBR_LLMTB                [i] = (*(DSADnULTBR  [i]))["LLMTB"       ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cdsadc_unit_regif::UpdateRegVal(cuint addr)
{
    if ((addr <= (0x0000)+(4*7)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        (*(DSADnVCR    [i]))["GAIN"        ] = DSADnVCR_GAIN[i];
        (*(DSADnVCR    [i]))["VCULME"      ] = DSADnVCR_VCULME[i];
        (*(DSADnVCR    [i]))["VCLLME"      ] = DSADnVCR_VCLLME[i];
        (*(DSADnVCR    [i]))["VCULLMTBS"   ] = DSADnVCR_VCULLMTBS[i];
        (*(DSADnVCR    [i]))["ORT"         ] = DSADnVCR_ORT[i];
        (*(DSADnVCR    [i]))["TPVSL"       ] = DSADnVCR_TPVSL[i];
        (*(DSADnVCR    [i]))["DSDFTYP"     ] = DSADnVCR_DSDFTYP[i];
        (*(DSADnVCR    [i]))["ADIE"        ] = DSADnVCR_ADIE[i];
        (*(DSADnVCR    [i]))["ULEIE"       ] = DSADnVCR_ULEIE[i];
        (*(DSADnVCR    [i]))["DFENT"       ] = DSADnVCR_DFENT[i];
        (*(DSADnVCR    [i]))["DFTAG"       ] = DSADnVCR_DFTAG[i];
        (*(DSADnVCR    [i]))["CNVCLS"      ] = DSADnVCR_CNVCLS[i];
        (*(DSADnVCR    [i]))["GCTRL"       ] = DSADnVCR_GCTRL[i];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*7)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        (*(DSADnDIR    [i]))["IDEF"        ] = DSADnDIR_IDEF[i];
        (*(DSADnDIR    [i]))["WFLG"        ] = DSADnDIR_WFLG[i];
        (*(DSADnDIR    [i]))["PRTY"        ] = DSADnDIR_PRTY[i];
        (*(DSADnDIR    [i]))["DR"          ] = DSADnDIR_DR[i];
        return;
    }
    if (addr == 0x0040) {
        (*DSADnADSTCR )["ADST"        ] = DSADnADSTCR_ADST;
        return;
    }
    if (addr == 0x0044) {
        (*DSADnADENDCR)["ADEND"       ] = DSADnADENDCR_ADEND;
        return;
    }
    if (addr == 0x0048) {
        (*DSADnCLBSTCR)["CLBST"       ] = DSADnCLBSTCR_CLBST;
        return;
    }
    if (addr == 0x004C) {
        (*DSADnCLBEDCR)["CLBEND"      ] = DSADnCLBEDCR_CLBEND;
        return;
    }
    if (addr == 0x0050) {
        (*DSADnADTCR  )["ADSTTE"      ] = DSADnADTCR_ADSTTE;
        (*DSADnADTCR  )["ENDTRGE"     ] = DSADnADTCR_ENDTRGE;
        (*DSADnADTCR  )["STTRGE"      ] = DSADnADTCR_STTRGE;
        return;
    }
    if (addr == 0x0054) {
        (*DSADnUCR    )["VPRSTE"      ] = DSADnUCR_VPRSTE;
        (*DSADnUCR    )["RDMA"        ] = DSADnUCR_RDMA;
        (*DSADnUCR    )["RESO0"       ] = DSADnUCR_RESO0;
        (*DSADnUCR    )["DFES"        ] = DSADnUCR_DFES;
        (*DSADnUCR    )["DFMT"        ] = DSADnUCR_DFMT;
        (*DSADnUCR    )["VCEP"        ] = DSADnUCR_VCEP;
        return;
    }
    if (addr == 0x0058) {
        (*DSADnVCPTRR )["VCPTR"       ] = DSADnVCPTRR_VCPTR;
        return;
    }
    if (addr == 0x0060) {
        (*DSADnADSR   )["CLBACT"      ] = DSADnADSR_CLBACT;
        (*DSADnADSR   )["ADACT"       ] = DSADnADSR_ADACT;
        return;
    }
    if (addr == 0x0064) {
        (*DSADnUDPTRR )["UDPTR"       ] = DSADnUDPTRR_UDPTR;
        return;
    }
    if (addr == 0x0068) {
        (*DSADnUDIR   )["CHNUM"       ] = DSADnUDIR_CHNUM;
        (*DSADnUDIR   )["UIDEF"       ] = DSADnUDIR_UIDEF;
        (*DSADnUDIR   )["UWFLG"       ] = DSADnUDIR_UWFLG;
        (*DSADnUDIR   )["UPRTY"       ] = DSADnUDIR_UPRTY;
        (*DSADnUDIR   )["UDR"         ] = DSADnUDIR_UDR;
        return;
    }
    if (addr == 0x006C) {
        (*DSADnTSVAL  )["TSVAL"       ] = DSADnTSVAL_TSVAL;
        (*DSADnTSVAL  )["TSDR"        ] = DSADnTSVAL_TSDR;
        return;
    }
    if (addr == 0x0070) {
        (*DSADnSFTCR  )["RDCLRE"      ] = DSADnSFTCR_RDCLRE;
        (*DSADnSFTCR  )["OWEIE"       ] = DSADnSFTCR_OWEIE;
        (*DSADnSFTCR  )["PEIE"        ] = DSADnSFTCR_PEIE;
        (*DSADnSFTCR  )["IDEIE"       ] = DSADnSFTCR_IDEIE;
        return;
    }
    if (addr == 0x0074) {
        (*DSADnECR    )["ULEC"        ] = DSADnECR_ULEC;
        (*DSADnECR    )["LLEC"        ] = DSADnECR_LLEC;
        (*DSADnECR    )["OWEC"        ] = DSADnECR_OWEC;
        (*DSADnECR    )["PEC"         ] = DSADnECR_PEC;
        return;
    }
    if (addr == 0x0078) {
        (*DSADnER     )["ULE"         ] = DSADnER_ULE;
        (*DSADnER     )["LLE"         ] = DSADnER_LLE;
        (*DSADnER     )["ULECAP"      ] = DSADnER_ULECAP;
        (*DSADnER     )["OWE"         ] = DSADnER_OWE;
        (*DSADnER     )["OWECAP"      ] = DSADnER_OWECAP;
        (*DSADnER     )["PE"          ] = DSADnER_PE;
        (*DSADnER     )["PECAP"       ] = DSADnER_PECAP;
        return;
    }
    if (addr == 0x007C) {
        (*DSADnTDLVR  )["AN3NLV"      ] = DSADnTDLVR_AN3NLV;
        (*DSADnTDLVR  )["AN3PLV"      ] = DSADnTDLVR_AN3PLV;
        (*DSADnTDLVR  )["AN2NLV"      ] = DSADnTDLVR_AN2NLV;
        (*DSADnTDLVR  )["AN2PLV"      ] = DSADnTDLVR_AN2PLV;
        (*DSADnTDLVR  )["AN1NLV"      ] = DSADnTDLVR_AN1NLV;
        (*DSADnTDLVR  )["AN1PLV"      ] = DSADnTDLVR_AN1PLV;
        (*DSADnTDLVR  )["AN0NLV"      ] = DSADnTDLVR_AN0NLV;
        (*DSADnTDLVR  )["AN0PLV"      ] = DSADnTDLVR_AN0PLV;
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        (*(DSADnULTBR  [i]))["ULMTB"       ] = DSADnULTBR_ULMTB[i];
        (*(DSADnULTBR  [i]))["LLMTB"       ] = DSADnULTBR_LLMTB[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cdsadc_unit_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cdsadc_unit_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cdsadc_unit_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cdsadc_unit_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cdsadc_unit_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cdsadc_unit_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cdsadc_unit_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cdsadc_unit_regif::uint Cdsadc_unit_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cdsadc_unit_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cdsadc_unit_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cdsadc_unit_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cdsadc_unit_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cdsadc_unit_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cdsadc_unit_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cdsadc_unit_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
