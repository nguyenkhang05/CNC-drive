// -----------------------------------------------------------------------------
// $Id: atu5_timerg_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
//
// Copyright(c) 2015-2019 Renesas Electronics Corporation
// Copyright(c) 2015-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : atu5_timerg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// 
// 
// %MODULE ATU5_TimerG
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
// 
// 
// %%TITLE    name      reg_name    wsize       rsize      length    offset    factor_start    factor_end    factor_index    factor_step    access           init    support    callback
// %%REG      TSTRG     TSTRG       8|16        8|16|32    16        0x0000    -               -             -               -                R|W         0x0000       TRUE          W
// %%REG      TIERG     TIERG       8|16        8|16|32    16        0x0004    -               -             -               -                R|W         0x0000       TRUE         - 
// %%REG      RLDCRG    RLDCRG      8|16        8|16|32    16        0x0008    -               -             -               -                R|W         0x0000       TRUE          W
// #####%%REG      EVSELG    EVSELG      8           8|16|32    8         0x000C    -               -             -               -                R|W           0x00       TRUE          W 
// %%REG      TCRG      TCRG        8           8|16|32    8         0x0010    0               9             -               0x10             R|W           0x00       TRUE          W
// %%REG      TSRG      TSRG        -           8|16|32    8         0x0012    0               9             -               0x10             R             0x00       TRUE        R
// %%REG      TSCRG     TSCRG       8           8|16|32    8         0x0013    0               9             -               0x10             R|W1:0        0x00       TRUE          W
// %%REG      TCNTG     TCNTG           32      8|16|32    32        0x0014    0               9             -               0x10             R|W     0x00000000       TRUE        R|W
// %%REG      OCRG      OCRG            32      8|16|32    32        0x0018    0               9             -               0x10             R|W     0xFFFFFFFF       TRUE        R|W
// %%REG      RLDG      RLDG            32      8|16|32    32        0x001C    0               9             -               0x10             R|W     0xFFFFFFFF       TRUE          W
// 
// #-------------------------------------------------------------------------------
// # timer start register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> start counter event
// #                -> clear the event detect flag
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #      write call-back fires start-counter and clear-even-detect events
// #-------------------------------------------------------------------------------
// %REG_NAME    TSTRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      STRG    9        0        0       R|W       TRUE       W
// 
// 
// #-------------------------------------------------------------------------------
// # timer interrupt enable register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever an interrupt source occurs and
// #     it's required to check whether interrupt request is allowed to be issued or
// #     not.
// #-------------------------------------------------------------------------------
// %REG_NAME    TIERG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMPIEG  9        0        0       R|W       TRUE       -
// 
// #-------------------------------------------------------------------------------
// # reload control register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever a compare-match occurs and
// #     it's required to check whether not.
// #-------------------------------------------------------------------------------
// %REG_NAME    RLDCRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      RLENG   9        0        0       R|W       TRUE       W
// 
// #-------------------------------------------------------------------------------
// # event select register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever any change in external input
// #     events of the agent controller.
// #-------------------------------------------------------------------------------
// #####%REG_NAME    EVSELG
// #####%%TITLE    name    upper    lower    init    access    support    callback
// #####%%BIT      EVSELG  1        0        0       R|W       TRUE       W
// 
// 
// #-------------------------------------------------------------------------------
// # timer control registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> change clock frequency
// #                -> change operation mode
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #      write call-back causes selected clock frequency to be updated, operation
// #      mode also update.
// #-------------------------------------------------------------------------------
// %REG_NAME    TCRG
// %%TITLE    name      upper    lower    init    access    support    callback
// %%BIT      EVSYMG    0        0        0       R|W       TRUE       W
// %%BIT      CKSELG    6        4        0       R|W       TRUE       W
// 
// 
// 
// #-------------------------------------------------------------------------------
// # timer status registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: output status signals from hardware
// # * register call back:
// #     write: no
// #     read: yes
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #          values of fields are stored in the functional model, whenever
// #          software reads this values, the call-back read mirrors the value of
// #          fields in functional model into register block.
// # * usage:
// #      call-back read mirrors the value of fields in functional model into
// #      register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    TSRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMFG      0        0        0       R       TRUE       R
// %%BIT      OVFG      1        1        0       R       TRUE       R
// %%BIT      EVDTFG    2        2        0       R       TRUE       R
// 
// 
// #-------------------------------------------------------------------------------
// # timer status clear registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> clear flags specified in written data.
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          technically, it's unnecessary to store value of status-clear register.
// #          When write access into this occurs, clearing-bit is specified
// #          by written data. Written data may be access via value of this register
// #          or via written-data (how??)
// # * usage:
// #      call-back write clears status flags specified in written data.
// #-------------------------------------------------------------------------------
// %REG_NAME    TSCRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMFCG    0       0        0       R|W1:0    TRUE       W
// %%BIT      OVFCG    1       1        0       R|W1:0    TRUE       W
// 
// #-------------------------------------------------------------------------------
// # timer counter registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: output status signals from hardware
// # * register call back:
// #     write: yes -> force new value written into counter
// #     read:  yes -> read access mirrors value of functional model into register
// #                   block
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #            counter is implemented inside the functional model.
// # * usage:
// #      call-back read mirrors value of functional model into register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    TCNTG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      TCNTG   31       0        0       R|W       TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # output compare registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control from software
// # * register call back:
// #     write: yes -> force new value written into compare register and new
// #                   comparison occurs
// #     read : yes -> read access mirrors value of this register inside
// #                   functional model into register block
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #           compare match register is implemented inside the functional model,
// #           because of reload operation.
// # * usage:
// #      call-back read mirrors value of functional model into register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    OCRG
// %%TITLE    name    upper    lower    init          access    support    callback
// %%BIT      OCRG    31       0        0xFFFFFFFF    R|W       TRUE       R|W
// 
// 
// #-------------------------------------------------------------------------------
// # reload registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input data signals from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever an compare-match occurs.
// #     it's required to check if reload operation is allowed or not.
// #-------------------------------------------------------------------------------
// %REG_NAME    RLDG
// %%TITLE    name    upper    lower    init          access    support    callback
// %%BIT      RLDG    31       0        0xFFFFFFFF    R|W       TRUE       W
// 
////////////////////////////////////////////////////////////////////////////////
/// @file atu5_timerg_regif.cpp
/// @brief Register IF class of model ATU5_TIMERG
/// $Id: atu5_timerg_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
/// $Date: 2019-10-17 14:33:04 +0900 (2019/10/17 (木)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#include "atu5_timerg_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Catu5_timerg_regif::Catu5_timerg_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xB0/4))
    #endif
{
    CommandInit();
    TSTRG  = new vpcl::re_register(0x0000, this, "TSTRG" , name.c_str());
    TIERG  = new vpcl::re_register(0x0004, this, "TIERG" , name.c_str());
    RLDCRG = new vpcl::re_register(0x0008, this, "RLDCRG", name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_TCRG; i++) {
        str_tmp.str("");
        str_tmp<<"TCRG"<< i;
        TCRG  [i] = new vpcl::re_register((0x0010) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_TSRG; i++) {
        str_tmp.str("");
        str_tmp<<"TSRG"<< i;
        TSRG  [i] = new vpcl::re_register((0x0012) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_TSCRG; i++) {
        str_tmp.str("");
        str_tmp<<"TSCRG"<< i;
        TSCRG [i] = new vpcl::re_register((0x0013) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_TCNTG; i++) {
        str_tmp.str("");
        str_tmp<<"TCNTG"<< i;
        TCNTG [i] = new vpcl::re_register((0x0014) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_OCRG; i++) {
        str_tmp.str("");
        str_tmp<<"OCRG"<< i;
        OCRG  [i] = new vpcl::re_register((0x0018) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_RLDG; i++) {
        str_tmp.str("");
        str_tmp<<"RLDG"<< i;
        RLDG  [i] = new vpcl::re_register((0x001C) + 16*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index++;
    for(uint i = 0; i < emNUM_TCRG;  i++) {
        mRegMap[(0x0010)     + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_TSRG;  i++) {
        mRegMap[(0x0012)     + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_TSCRG; i++) {
        mRegMap[(0x0013)     + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_TCNTG; i++) {
        mRegMap[(0x0014)     + i*16] = index;
        mRegMap[(0x0014 + 1) + i*16] = index;
        mRegMap[(0x0014 + 2) + i*16] = index;
        mRegMap[(0x0014 + 3) + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_OCRG;  i++) {
        mRegMap[(0x0018)     + i*16] = index;
        mRegMap[(0x0018 + 1) + i*16] = index;
        mRegMap[(0x0018 + 2) + i*16] = index;
        mRegMap[(0x0018 + 3) + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_RLDG;  i++) {
        mRegMap[(0x001C)     + i*16] = index;
        mRegMap[(0x001C + 1) + i*16] = index;
        mRegMap[(0x001C + 2) + i*16] = index;
        mRegMap[(0x001C + 3) + i*16] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_TSTRG_, "TSTRG_", 0x0000);
    CW_TSTRG  = new scml2::bitfield<uint>(TSTRG->name() , CW_TSTRG_      ,  0, 16);
    cw_instantiate_reg(CW_TIERG_, "TIERG_", 0x0004);
    CW_TIERG  = new scml2::bitfield<uint>(TIERG->name() , CW_TIERG_      ,  0, 16);
    cw_instantiate_reg(CW_RLDCRG_, "RLDCRG_", 0x0008);
    CW_RLDCRG = new scml2::bitfield<uint>(RLDCRG->name(), CW_RLDCRG_     ,  0, 16);
    cw_instantiate_reg(CW_TCRG_0_TSRG_0_TSCRG_0, "TCRG_0_TSRG_0_TSCRG_0", 0x0010);
    CW_TCRG  [0] = new scml2::bitfield<uint>(TCRG  [0]->name(), CW_TCRG_0_TSRG_0_TSCRG_0,  0,  8);
    CW_TSRG  [0] = new scml2::bitfield<uint>(TSRG  [0]->name(), CW_TCRG_0_TSRG_0_TSCRG_0, 16,  8);
    CW_TSCRG [0] = new scml2::bitfield<uint>(TSCRG [0]->name(), CW_TCRG_0_TSRG_0_TSCRG_0, 24,  8);
    cw_instantiate_reg(CW_TCRG_1_TSRG_1_TSCRG_1, "TCRG_1_TSRG_1_TSCRG_1", 0x0020);
    CW_TCRG  [1] = new scml2::bitfield<uint>(TCRG  [1]->name(), CW_TCRG_1_TSRG_1_TSCRG_1,  0,  8);
    CW_TSRG  [1] = new scml2::bitfield<uint>(TSRG  [1]->name(), CW_TCRG_1_TSRG_1_TSCRG_1, 16,  8);
    CW_TSCRG [1] = new scml2::bitfield<uint>(TSCRG [1]->name(), CW_TCRG_1_TSRG_1_TSCRG_1, 24,  8);
    cw_instantiate_reg(CW_TCRG_2_TSRG_2_TSCRG_2, "TCRG_2_TSRG_2_TSCRG_2", 0x0030);
    CW_TCRG  [2] = new scml2::bitfield<uint>(TCRG  [2]->name(), CW_TCRG_2_TSRG_2_TSCRG_2,  0,  8);
    CW_TSRG  [2] = new scml2::bitfield<uint>(TSRG  [2]->name(), CW_TCRG_2_TSRG_2_TSCRG_2, 16,  8);
    CW_TSCRG [2] = new scml2::bitfield<uint>(TSCRG [2]->name(), CW_TCRG_2_TSRG_2_TSCRG_2, 24,  8);
    cw_instantiate_reg(CW_TCRG_3_TSRG_3_TSCRG_3, "TCRG_3_TSRG_3_TSCRG_3", 0x0040);
    CW_TCRG  [3] = new scml2::bitfield<uint>(TCRG  [3]->name(), CW_TCRG_3_TSRG_3_TSCRG_3,  0,  8);
    CW_TSRG  [3] = new scml2::bitfield<uint>(TSRG  [3]->name(), CW_TCRG_3_TSRG_3_TSCRG_3, 16,  8);
    CW_TSCRG [3] = new scml2::bitfield<uint>(TSCRG [3]->name(), CW_TCRG_3_TSRG_3_TSCRG_3, 24,  8);
    cw_instantiate_reg(CW_TCRG_4_TSRG_4_TSCRG_4, "TCRG_4_TSRG_4_TSCRG_4", 0x0050);
    CW_TCRG  [4] = new scml2::bitfield<uint>(TCRG  [4]->name(), CW_TCRG_4_TSRG_4_TSCRG_4,  0,  8);
    CW_TSRG  [4] = new scml2::bitfield<uint>(TSRG  [4]->name(), CW_TCRG_4_TSRG_4_TSCRG_4, 16,  8);
    CW_TSCRG [4] = new scml2::bitfield<uint>(TSCRG [4]->name(), CW_TCRG_4_TSRG_4_TSCRG_4, 24,  8);
    cw_instantiate_reg(CW_TCRG_5_TSRG_5_TSCRG_5, "TCRG_5_TSRG_5_TSCRG_5", 0x0060);
    CW_TCRG  [5] = new scml2::bitfield<uint>(TCRG  [5]->name(), CW_TCRG_5_TSRG_5_TSCRG_5,  0,  8);
    CW_TSRG  [5] = new scml2::bitfield<uint>(TSRG  [5]->name(), CW_TCRG_5_TSRG_5_TSCRG_5, 16,  8);
    CW_TSCRG [5] = new scml2::bitfield<uint>(TSCRG [5]->name(), CW_TCRG_5_TSRG_5_TSCRG_5, 24,  8);
    cw_instantiate_reg(CW_TCRG_6_TSRG_6_TSCRG_6, "TCRG_6_TSRG_6_TSCRG_6", 0x0070);
    CW_TCRG  [6] = new scml2::bitfield<uint>(TCRG  [6]->name(), CW_TCRG_6_TSRG_6_TSCRG_6,  0,  8);
    CW_TSRG  [6] = new scml2::bitfield<uint>(TSRG  [6]->name(), CW_TCRG_6_TSRG_6_TSCRG_6, 16,  8);
    CW_TSCRG [6] = new scml2::bitfield<uint>(TSCRG [6]->name(), CW_TCRG_6_TSRG_6_TSCRG_6, 24,  8);
    cw_instantiate_reg(CW_TCRG_7_TSRG_7_TSCRG_7, "TCRG_7_TSRG_7_TSCRG_7", 0x0080);
    CW_TCRG  [7] = new scml2::bitfield<uint>(TCRG  [7]->name(), CW_TCRG_7_TSRG_7_TSCRG_7,  0,  8);
    CW_TSRG  [7] = new scml2::bitfield<uint>(TSRG  [7]->name(), CW_TCRG_7_TSRG_7_TSCRG_7, 16,  8);
    CW_TSCRG [7] = new scml2::bitfield<uint>(TSCRG [7]->name(), CW_TCRG_7_TSRG_7_TSCRG_7, 24,  8);
    cw_instantiate_reg(CW_TCRG_8_TSRG_8_TSCRG_8, "TCRG_8_TSRG_8_TSCRG_8", 0x0090);
    CW_TCRG  [8] = new scml2::bitfield<uint>(TCRG  [8]->name(), CW_TCRG_8_TSRG_8_TSCRG_8,  0,  8);
    CW_TSRG  [8] = new scml2::bitfield<uint>(TSRG  [8]->name(), CW_TCRG_8_TSRG_8_TSCRG_8, 16,  8);
    CW_TSCRG [8] = new scml2::bitfield<uint>(TSCRG [8]->name(), CW_TCRG_8_TSRG_8_TSCRG_8, 24,  8);
    cw_instantiate_reg(CW_TCRG_9_TSRG_9_TSCRG_9, "TCRG_9_TSRG_9_TSCRG_9", 0x00A0);
    CW_TCRG  [9] = new scml2::bitfield<uint>(TCRG  [9]->name(), CW_TCRG_9_TSRG_9_TSCRG_9,  0,  8);
    CW_TSRG  [9] = new scml2::bitfield<uint>(TSRG  [9]->name(), CW_TCRG_9_TSRG_9_TSCRG_9, 16,  8);
    CW_TSCRG [9] = new scml2::bitfield<uint>(TSCRG [9]->name(), CW_TCRG_9_TSRG_9_TSCRG_9, 24,  8);
    for(uint i = 0; i < emNUM_TCNTG ; i++) cw_instantiate_reg(CW_TCNTG   [i], TCNTG [i]->name(), TCNTG [i]->addr());
    for(uint i = 0; i < emNUM_OCRG  ; i++) cw_instantiate_reg(CW_OCRG    [i], OCRG  [i]->name(), OCRG  [i]->addr());
    for(uint i = 0; i < emNUM_RLDG  ; i++) cw_instantiate_reg(CW_RLDG    [i], RLDG  [i]->name(), RLDG  [i]->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(TSTRG   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIERG   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RLDCRG  , mCurReg, 0,  2,    "8|16", "8|16|32");
    for(uint i = 0; i < emNUM_TCRG  ; i++) mCurReg = mRegArray[index++] = new SRegList(TCRG    [i], mCurReg, i,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_TSRG  ; i++) mCurReg = mRegArray[index++] = new SRegList(TSRG    [i], mCurReg, i,  1,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_TSCRG ; i++) mCurReg = mRegArray[index++] = new SRegList(TSCRG   [i], mCurReg, i,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_TCNTG ; i++) mCurReg = mRegArray[index++] = new SRegList(TCNTG   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_OCRG  ; i++) mCurReg = mRegArray[index++] = new SRegList(OCRG    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_RLDG  ; i++) mCurReg = mRegArray[index++] = new SRegList(RLDG    [i], mCurReg, i,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*TSTRG   ) ( 9,  0, "STRG"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TIERG   ) ( 9,  0, "CMPIEG"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RLDCRG  ) ( 9,  0, "RLENG"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_TCNTG; i++) {
        (*TCNTG   [i]) (31,  0, "TCNTG"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_TSCRG; i++) {
        (*TSCRG   [i]) ( 0,  0, "CMFCG"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*TSCRG   [i]) ( 1,  1, "OVFCG"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_OCRG; i++) {
        (*OCRG    [i]) (31,  0, "OCRG"    , 0xFFFFFFFF, "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_TCRG; i++) {
        (*TCRG    [i]) ( 0,  0, "EVSYMG"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*TCRG    [i]) ( 6,  4, "CKSELG"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_RLDG; i++) {
        (*RLDG    [i]) (31,  0, "RLDG"    , 0xFFFFFFFF, "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_TSRG; i++) {
        (*TSRG    [i]) ( 0,  0, "CMFG"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*TSRG    [i]) ( 1,  1, "OVFG"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*TSRG    [i]) ( 2,  2, "EVDTFG"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["TSTRG"]["STRG"] = &Catu5_timerg_regif::cb_TSTRG_STRG;
    mWrCbAPI["RLDCRG"]["RLENG"] = &Catu5_timerg_regif::cb_RLDCRG_RLENG;

    for(uint i = 0; i < emNUM_TCRG; i++) {
        str_tmp.str("");
        str_tmp<<"TCRG"<< i;
        mWrCbAPI[str_tmp.str()]["EVSYMG"] = &Catu5_timerg_regif::cb_TCRG_EVSYMG;
        mWrCbAPI[str_tmp.str()]["CKSELG"] = &Catu5_timerg_regif::cb_TCRG_CKSELG;
    }
    for(uint i = 0; i < emNUM_TSRG; i++) {
        str_tmp.str("");
        str_tmp<<"TSRG"<< i;
        mRdCbAPI[str_tmp.str()]["CMFG"] = &Catu5_timerg_regif::cb_TSRG_CMFG;
        mRdCbAPI[str_tmp.str()]["OVFG"] = &Catu5_timerg_regif::cb_TSRG_OVFG;
        mRdCbAPI[str_tmp.str()]["EVDTFG"] = &Catu5_timerg_regif::cb_TSRG_EVDTFG;
    }
    for(uint i = 0; i < emNUM_TSCRG; i++) {
        str_tmp.str("");
        str_tmp<<"TSCRG"<< i;
        mWrCbAPI[str_tmp.str()]["CMFCG"] = &Catu5_timerg_regif::cb_TSCRG_CMFCG;
        mWrCbAPI[str_tmp.str()]["OVFCG"] = &Catu5_timerg_regif::cb_TSCRG_OVFCG;
    }
    for(uint i = 0; i < emNUM_TCNTG; i++) {
        str_tmp.str("");
        str_tmp<<"TCNTG"<< i;
        mWrCbAPI[str_tmp.str()]["TCNTG"] = &Catu5_timerg_regif::cb_TCNTG_TCNTG;
        mRdCbAPI[str_tmp.str()]["TCNTG"] = &Catu5_timerg_regif::cb_TCNTG_TCNTG;
    }
    for(uint i = 0; i < emNUM_OCRG; i++) {
        str_tmp.str("");
        str_tmp<<"OCRG"<< i;
        mWrCbAPI[str_tmp.str()]["OCRG"] = &Catu5_timerg_regif::cb_OCRG_OCRG;
        mRdCbAPI[str_tmp.str()]["OCRG"] = &Catu5_timerg_regif::cb_OCRG_OCRG;
    }
    for(uint i = 0; i < emNUM_RLDG; i++) {
        str_tmp.str("");
        str_tmp<<"RLDG"<< i;
        mWrCbAPI[str_tmp.str()]["RLDG"] = &Catu5_timerg_regif::cb_RLDG_RLDG;
    }
    InitLocalVal();

    //Construct the list of register whose read callbacks are executed in debug mode
    list_rdcb_dbg.push_back(0x12); // TSRG
    list_rdcb_dbg.push_back(0x14); // TCNTG
    list_rdcb_dbg.push_back(0x18); // OCRG
}

/// Destructor: delete pointers
/// @return none
Catu5_timerg_regif::~Catu5_timerg_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Catu5_timerg_regif::uint Catu5_timerg_regif::bit_select(
                                cuint val,    ///< [in] Writting address
                                cuint start,  ///< [in] start bit position
                                cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerg_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerg_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerg_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                    const unsigned char *p_data,   ///< [in] Writing data
                                    cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerg_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_timerg_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                        const unsigned char *p_data,  ///< [in] Writing data
                                        cuint size,                   ///< [in] Data size (byte)
                                        bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_timerg_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                        unsigned char *p_data,   ///< [out] Reading data
                                        cuint size,              ///< [in]  Data size (byte)
                                        bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Catu5_timerg_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                     unsigned char *p_data,          ///< [out] Reading data
                                     cuint size,                     ///< [in]  Data size (byte)
                                     cuint reg_index,                ///< [in] Register index
                                     bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif

    // Check if register's read callback is executed in debug mode
    bool exe_rdcb_dbg = false;
    std::list<uint>::iterator p = list_rdcb_dbg.begin();
    while (p != list_rdcb_dbg.end()) {
        if ((addr & 0x1F) == *p) {
            exe_rdcb_dbg = true;
            break;
        }
        p++;
    }

    if (IsDbgFunc == false || exe_rdcb_dbg) { // fix bug #80234
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Catu5_timerg_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                     const unsigned char *p_data,      ///< [in] Writing data
                                     cuint size,                       ///< [in] Data size (byte)
                                     cuint reg_index,                  ///< [in] Register index
                                     bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Catu5_timerg_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Catu5_timerg_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Catu5_timerg_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Catu5_timerg_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Catu5_timerg_regif::InitLocalVal()
{
    // Initialize local variables
    TSTRG_STRG = 0x0;
    TIERG_CMPIEG = 0x0;
    RLDCRG_RLENG = 0x0;
    for(uint i = 0; i < emNUM_TCRG;  i++) {
        TCRG_EVSYMG[i] = 0x0;
        TCRG_CKSELG[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_TSRG;  i++) {
        TSRG_CMFG[i] = 0x0;
        TSRG_OVFG[i] = 0x0;
        TSRG_EVDTFG[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_TSCRG; i++) {
        TSCRG_CMFCG[i] = 0x0;
        TSCRG_OVFCG[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_TCNTG; i++) {
        TCNTG_TCNTG[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_OCRG;  i++) {
        OCRG_OCRG[i] = 0xFFFFFFFF;
    }
    for(uint i = 0; i < emNUM_RLDG;  i++) {
        RLDG_RLDG[i] = 0xFFFFFFFF;
    }
}

/// Update bit value to local value
/// @return None
void Catu5_timerg_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        TSTRG_STRG                 = (*TSTRG )["STRG"  ];
        return;
    }
    if (addr == 0x0004) {
        TIERG_CMPIEG               = (*TIERG )["CMPIEG"];
        return;
    }
    if (addr == 0x0008) {
        RLDCRG_RLENG               = (*RLDCRG)["RLENG" ];
        return;
    }
    if ((0x0010 <= addr) && (addr <= (0x0010)+(16*9)) && ((addr-0x0010)%16 == 0)) {
        uint i = (addr - 0x0010)/16;
        TCRG_EVSYMG               [i] = (*(TCRG  [i]))["EVSYMG"];
        TCRG_CKSELG               [i] = (*(TCRG  [i]))["CKSELG"];
        return;
    }
    if ((0x0012 <= addr) && (addr <= (0x0012)+(16*9)) && ((addr-0x0012)%16 == 0)) {
        uint i = (addr - 0x0012)/16;
        TSRG_CMFG                 [i] = (*(TSRG  [i]))["CMFG"  ];
        TSRG_OVFG                 [i] = (*(TSRG  [i]))["OVFG"  ];
        TSRG_EVDTFG               [i] = (*(TSRG  [i]))["EVDTFG"];
        return;
    }
    if ((0x0013 <= addr) && (addr <= (0x0013)+(16*9)) && ((addr-0x0013)%16 == 0)) {
        uint i = (addr - 0x0013)/16;
        TSCRG_CMFCG               [i] = (*(TSCRG [i]))["CMFCG" ];
        TSCRG_OVFCG               [i] = (*(TSCRG [i]))["OVFCG" ];
        return;
    }
    if ((0x0014 <= addr) && (addr <= (0x0014)+(16*9)) && ((addr-0x0014)%16 == 0)) {
        uint i = (addr - 0x0014)/16;
        TCNTG_TCNTG               [i] = (*(TCNTG [i]))["TCNTG" ];
        return;
    }
    if ((0x0018 <= addr) && (addr <= (0x0018)+(16*9)) && ((addr-0x0018)%16 == 0)) {
        uint i = (addr - 0x0018)/16;
        OCRG_OCRG                 [i] = (*(OCRG  [i]))["OCRG"  ];
        return;
    }
    if ((0x001C <= addr) && (addr <= (0x001C)+(16*9)) && ((addr-0x001C)%16 == 0)) {
        uint i = (addr - 0x001C)/16;
        RLDG_RLDG                 [i] = (*(RLDG  [i]))["RLDG"  ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Catu5_timerg_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*TSTRG )["STRG"  ] = TSTRG_STRG;
        return;
    }
    if (addr == 0x0004) {
        (*TIERG )["CMPIEG"] = TIERG_CMPIEG;
        return;
    }
    if (addr == 0x0008) {
        (*RLDCRG)["RLENG" ] = RLDCRG_RLENG;
        return;
    }
    if ((0x0010 <= addr) && (addr <= (0x0010)+(16*9)) && ((addr-0x0010)%16 == 0)) {
        uint i = (addr - 0x0010)/16;
        (*(TCRG  [i]))["EVSYMG"] = TCRG_EVSYMG[i];
        (*(TCRG  [i]))["CKSELG"] = TCRG_CKSELG[i];
        return;
    }
    if ((0x0012 <= addr) && (addr <= (0x0012)+(16*9)) && ((addr-0x0012)%16 == 0)) {
        uint i = (addr - 0x0012)/16;
        (*(TSRG  [i]))["CMFG"  ] = TSRG_CMFG[i];
        (*(TSRG  [i]))["OVFG"  ] = TSRG_OVFG[i];
        (*(TSRG  [i]))["EVDTFG"] = TSRG_EVDTFG[i];
        return;
    }
    if ((0x0013 <= addr) && (addr <= (0x0013)+(16*9)) && ((addr-0x0013)%16 == 0)) {
        uint i = (addr - 0x0013)/16;
        (*(TSCRG [i]))["CMFCG" ] = TSCRG_CMFCG[i];
        (*(TSCRG [i]))["OVFCG" ] = TSCRG_OVFCG[i];
        return;
    }
    if ((0x0014 <= addr) && (addr <= (0x0014)+(16*9)) && ((addr-0x0014)%16 == 0)) {
        uint i = (addr - 0x0014)/16;
        (*(TCNTG [i]))["TCNTG" ] = TCNTG_TCNTG[i];
        return;
    }
    if ((0x0018 <= addr) && (addr <= (0x0018)+(16*9)) && ((addr-0x0018)%16 == 0)) {
        uint i = (addr - 0x0018)/16;
        (*(OCRG  [i]))["OCRG"  ] = OCRG_OCRG[i];
        return;
    }
    if ((0x001C <= addr) && (addr <= (0x001C)+(16*9)) && ((addr-0x001C)%16 == 0)) {
        uint i = (addr - 0x001C)/16;
        (*(RLDG  [i]))["RLDG"  ] = RLDG_RLDG[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Catu5_timerg_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Catu5_timerg_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Catu5_timerg_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Catu5_timerg_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Catu5_timerg_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Catu5_timerg_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Catu5_timerg_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Catu5_timerg_regif::uint Catu5_timerg_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Catu5_timerg_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Catu5_timerg_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Catu5_timerg_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Catu5_timerg_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Catu5_timerg_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Catu5_timerg_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Catu5_timerg_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
