// -----------------------------------------------------------------------------
// $Id: mspi000_regif.cpp,v 1.7 2020/03/11 00:52:43 ducla Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : mspi000_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE MSPI000
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         12
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name            reg_name        wsize     rsize    length   offset   factor_start  factor_end  factor_index factor_step     access  init        support     callback
//     %%REG    -      MSPInCTL0       MSPInCTL0       8|16|32   8|16|32  8        0x0      -             -           -            -               R|W     0x00        TRUE        W
//     %%REG    -      MSPInCTL1       MSPInCTL1       8|16|32   8|16|32  32       0x4      -             -           -            -               R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInCTL2       MSPInCTL2       8|16|32   8|16|32  8        0x8      -             -           -            -                R|W     0x00        TRUE        W
//     %%REG    -      MSPInSTR0       MSPInSTR0       -         8|16|32  8        0x10     -             -           -            -                R          0x00        TRUE        -
//     %%REG    -      MSPInCSTRm      MSPInCSTRm      -         8|16|32  16       0xD8     0             15          -            0x80             R          0x0000      TRUE        -
//     %%REG    -      MSPInCSTSm      MSPInCSTSm      8|16|32   8|16|32  8        0xB4     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCSTCm      MSPInCSTCm      8|16|32   8|16|32  8        0xB8     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCFGm0      MSPInCFGm0      8|16|32   8|16|32  32       0x80     0             15          -            0x80             R|W     0x00700000  TRUE        W
//     %%REG    -      MSPInCFGm1      MSPInCFGm1      8|16|32   8|16|32  32       0x84     0             15          -            0x80             R|W     0x01000000  TRUE        W
//     %%REG    -      MSPInCFGm2      MSPInCFGm2      8|16|32   8|16|32  16       0x88     0             15          -            0x80             R|W     0x0020      TRUE        W
//     %%REG    -      MSPInCFGm3      MSPInCFGm3      8|16|32   8|16|32  16       0x8C     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInCFGm4      MSPInCFGm4      8|16|32   8|16|32  32       0x90     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInRASTADm    MSPInRASTADm    8|16|32   8|16|32  16       0xA8     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInSEUPm      MSPInSEUPm      8|16|32   8|16|32  16       0x98     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInHOLDm      MSPInHOLDm      8|16|32   8|16|32  16       0x9C     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInIDLEm      MSPInIDLEm      8|16|32   8|16|32  16       0xA0     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInINDAm      MSPInINDAm      8|16|32   8|16|32  16       0xA4     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInCFSETm     MSPInCFSETm     8|16|32   8|16|32  16       0xAC     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInSSELm      MSPInSSELm      8|16|32   8|16|32  16       0xBC     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInTXDAm0     MSPInTXDAm0     8|16|32   8|16|32  32       0xC0     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInFRERSTm    MSPInFRERSTm    -         8|16|32  8        0xCC     0             15          -            0x80             R          0x00        TRUE        -
//     %%REG    -      MSPInFRERSTCm   MSPInFRERSTCm   -         8|16|32  8        0xE4     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInRXDAm0     MSPInRXDAm0     8|16|32   8|16|32  32       0xD0     0             15          -            0x80             R       0x00000000  TRUE        R
//     %%REG    -      MSPInSSTXm      MSPInSSTXm      8|16|32   8|16|32  32       0xB0     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInFSRXm      MSPInFSRXm      -         8|16|32  32       0xE0     0             15          -            0x80             R       0x00000000  TRUE        R
//     %%REG    -      MSPInCESTm      MSPInCESTm      -         8|16|32  8        0xE8     0             15          -            0x80             R       0x00        TRUE        -
//     %%REG    -      MSPInCESTCm     MSPInCESTCm     8|16|32   8|16|32  8        0xEC     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCFCNTm     MSPInCFCNTm     -         8|16|32  32       0xDC     0             15          -            0x80             R       0x00000000  TRUE        -
//         
// 
// %REG_NAME    MSPInCTL0
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInEN                0        0            0            R|W            TRUE        W        
// 
// %REG_NAME   MSPInCTL1    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInMSSEL            31        31            0            R|W            TRUE        W        
//     %%BIT        MSPInCSIE            29        29            0            R|W            TRUE        -        
//     %%BIT        MSPInSAMP            28        28            0            R|W            TRUE        -        
//     %%BIT        MSPInCKR            27        27            0            R|W            TRUE        -        
//     %%BIT        MSPInSOLS            25        24            0            R|W            TRUE        -        
//     %%BIT        MSPInCSP            14        0            0            R|W            TRUE        -        
//             
// %REG_NAME   MSPInCTL2    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCS            1        1            0            R|W            TRUE        -        
//     %%BIT        MSPInLBM            0        0            0            R|W            TRUE        W        
//         
// %REG_NAME   MSPInSTR0    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCNUMF            7        4            0            R            TRUE        -        
//     %%BIT        MSPInCSF            0        0            0            R            TRUE        -        
//             
// %REG_NAME   MSPInCSTRm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInFIRXNm            15        8            0            R            TRUE        -        
//     %%BIT        MSPInTXRQFm            5        5            0            R            TRUE        -        
//     %%BIT        MSPInRXRQFm            4        4            0            R            TRUE        -        
//     %%BIT        MSPInACTFm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInCHENm            0        0            0            R            TRUE        -
//     
// %REG_NAME   MSPInCSTSm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInACTFSm            1        1            0            R|W1:0        TRUE        W        
//     %%BIT        MSPInCHENSm            0        0            0            R|W1:0        TRUE        -        
//     
// %REG_NAME   MSPInCSTCm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCHENCm            0        0            0            R|W1:0        TRUE        W    
// 
//     
// %REG_NAME   MSPInCFGm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInTXEm            29        29            0            R|W            TRUE        W        
//     %%BIT        MSPInRXEm            28        28            0            R|W            TRUE        -        
//     %%BIT        MSPInMDm            25        24            0            R|W            TRUE        -        
//     %%BIT        MSPInPRIOm            22        20            7            R|W            TRUE        -        
//     %%BIT        MSPInLOCKm            16        16            0            R|W            TRUE        -        
//     %%BIT        MSPInFCCEm            12        12            0            R|W            TRUE        -        
//     %%BIT        MSPInIEREm            3        3            0            R|W            TRUE        -        
//     %%BIT        MSPInIFEEm            2        2            0            R|W            TRUE        -        
//     %%BIT        MSPInIRXEm            1        1            0            R|W            TRUE        -        
//     %%BIT        MSPInITXEm            0        0            0            R|W            TRUE        -        
// 
// %REG_NAME   MSPInCFGm1        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCPOLm            25        25            0            R|W            TRUE        W        
//     %%BIT        MSPInCPHAm            24        24            1            R|W            TRUE        -        
//     %%BIT        MSPInDIRm            20        20            0            R|W            TRUE        -        
//     %%BIT        MSPInICLSm            18        18            0            R|W            TRUE        -        
//     %%BIT        MSPInFIDLm            17        17            0            R|W            TRUE        -        
//     %%BIT        MSPInCSRIm            16        16            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFCMm            11        11            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFSm            9        9            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFEm            8        8            0            R|W            TRUE        -        
//     %%BIT        MSPInPSm            5        4            0            R|W            TRUE        -        
//     %%BIT        MSPInDECHKm            0        0            0            R|W            TRUE        -        
// 
// %REG_NAME   MSPInCFGm2        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInFLENm            7        0            0x20        R|W            TRUE        W        
//         
// %REG_NAME   MSPInCFGm3        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInPRCSm            9        8            0            R|W            TRUE        W        
//     %%BIT        MSPInCDIVm            4        0            1            R|W            TRUE        -        
//     
// %REG_NAME   MSPInCFGm4        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInHWTSm            21        16            0            R|W            TRUE        W         
//     %%BIT        MSPInSIZEm            1        0            0            R|W            TRUE        -        
//      
//      
// %REG_NAME   MSPInRASTADm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInRASTAD            11        2            0            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInSEUPm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInSEUPm            11        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInHOLDm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInHOLDm            11        0            1            R|W            TRUE        W        
// 
//         
// %REG_NAME   MSPInIDLEm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInIDLEm            11        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInINDAm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInINDAm            11        0            0            R|W         TRUE        W        
// 
//     
// %REG_NAME   MSPInCFSETm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCFSETm            15        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInSSELm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInJOBENm            15        15            0            R|W            TRUE        W        
//     %%BIT        MSPInCSRm            14        0            0            R|W            TRUE        -        
// 
//     
// %REG_NAME   MSPInTXDAm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInTXDAm0            31        0            0            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInFRERSTm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSTm        4        4            0            R            TRUE        -        
//     %%BIT        MSPInCEFSTm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInPEFSTm            0        0            0            R            TRUE        -        
//     
//     
// %REG_NAME   MSPInFRERSTCm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSCm        4        4            0            R|W1:0        TRUE        W    
//     %%BIT        MSPInCEFSCm            1        1            0            R|W1:0        TRUE        -    
//     %%BIT        MSPInPEFSCm            0        0            0            R|W1:0        TRUE        -    
// 
//     
// %REG_NAME   MSPInRXDAm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInRXDAm0            31        0            0            R            TRUE        R        
// 
//         
// %REG_NAME   MSPInSSTXm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInJOBENm            31        31            0            R|W            TRUE        -        
//     %%BIT        MSPInCSRm            30        16            0            R|W            TRUE        -        
//     %%BIT        MSPInTXDAm0            15        0            0            R|W            TRUE        W        
// 
// 
// %REG_NAME   MSPInFSRXm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSTm        20        20            0            R            TRUE        -        
//     %%BIT        MSPInCEFSTm            17        17            0            R            TRUE        -        
//     %%BIT        MSPInPEFSTm            16        16            0            R            TRUE        -        
//     %%BIT        MSPInRXDAm0            15        0            0            R            TRUE        R        
//   
//          
// %REG_NAME   MSPInCESTm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInOVREEm            7        7            0            R            TRUE        -        
//     %%BIT        MSPInOVWREm            6        6            0            R            TRUE        -        
//     %%BIT        MSPInOVRUEm            5        5            0            R            TRUE        -        
//     %%BIT        MSPInDCEm            4        4            0            R            TRUE        -        
//     %%BIT        MSPInCEm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInPEm            0        0            0            R            TRUE        -        
// 
//     
// %REG_NAME   MSPInCESTCm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInOVREECm        7        7            0            R|W1:0        TRUE        W        
//     %%BIT        MSPInOVWRECm        6        6            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInOVRUECm        5        5            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInDCECm            4        4            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInCECm            1        1            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInPECm            0        0            0            R|W1:0        TRUE        -        
// 
//         
// %REG_NAME   MSPInCFCNTm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCFCNTm            15        0            0            R            TRUE        -        
////////////////////////////////////////////////////////////////////////////////
/// @file mspi000_regif.cpp
/// @brief Register IF class of model MSPI000
/// $Id: mspi000_regif.cpp,v 1.7 2020/03/11 00:52:43 ducla Exp $
/// $Date: 2020/03/11 00:52:43 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#include "mspi000_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cmspi000_regif::Cmspi000_regif(std::string name, uint buswidth, uint ch_num, uint cs_num)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x860/4))
    #endif
{
    mCh_num = ch_num;
    mCs_num = cs_num;
    CommandInit();
    MSPInCTL0     = new vpcl::re_register(0x0000, this, "MSPInCTL0"    , name.c_str());
    MSPInCTL1     = new vpcl::re_register(0x0004, this, "MSPInCTL1"    , name.c_str());
    MSPInCTL2     = new vpcl::re_register(0x0008, this, "MSPInCTL2"    , name.c_str());
    MSPInSTR0     = new vpcl::re_register(0x0010, this, "MSPInSTR0"    , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCSTRm"<< i;
        MSPInCSTRm   [i] = new vpcl::re_register((0x00D8) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCSTSm"<< i;
        MSPInCSTSm   [i] = new vpcl::re_register((0x00B4) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCSTCm"<< i;
        MSPInCSTCm   [i] = new vpcl::re_register((0x00B8) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm0"<< i;
        MSPInCFGm0   [i] = new vpcl::re_register((0x0080) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm1"<< i;
        MSPInCFGm1   [i] = new vpcl::re_register((0x0084) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm2"<< i;
        MSPInCFGm2   [i] = new vpcl::re_register((0x0088) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm3"<< i;
        MSPInCFGm3   [i] = new vpcl::re_register((0x008C) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm4"<< i;
        MSPInCFGm4   [i] = new vpcl::re_register((0x0090) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInRASTADm"<< i;
        MSPInRASTADm [i] = new vpcl::re_register((0x00A8) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSEUPm"<< i;
        MSPInSEUPm   [i] = new vpcl::re_register((0x0098) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInHOLDm"<< i;
        MSPInHOLDm   [i] = new vpcl::re_register((0x009C) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInIDLEm"<< i;
        MSPInIDLEm   [i] = new vpcl::re_register((0x00A0) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInINDAm"<< i;
        MSPInINDAm   [i] = new vpcl::re_register((0x00A4) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFSETm"<< i;
        MSPInCFSETm  [i] = new vpcl::re_register((0x00AC) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSSELm"<< i;
        MSPInSSELm   [i] = new vpcl::re_register((0x00BC) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInTXDAm0"<< i;
        MSPInTXDAm0  [i] = new vpcl::re_register((0x00C0) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInFRERSTm"<< i;
        MSPInFRERSTm [i] = new vpcl::re_register((0x00CC) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInFRERSTCm"<< i;
        MSPInFRERSTCm[i] = new vpcl::re_register((0x00E4) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInRXDAm0"<< i;
        MSPInRXDAm0  [i] = new vpcl::re_register((0x00D0) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSSTXm"<< i;
        MSPInSSTXm   [i] = new vpcl::re_register((0x00B0) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInFSRXm"<< i;
        MSPInFSRXm   [i] = new vpcl::re_register((0x00E0) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCESTm"<< i;
        MSPInCESTm   [i] = new vpcl::re_register((0x00E8) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCESTCm"<< i;
        MSPInCESTCm  [i] = new vpcl::re_register((0x00EC) + 128*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFCNTm"<< i;
        MSPInCFCNTm  [i] = new vpcl::re_register((0x00DC) + 128*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index++;
    mRegMap[0x0010]     = index++;
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x0080)     + i*128] = index;
        mRegMap[(0x0080 + 1) + i*128] = index;
        mRegMap[(0x0080 + 2) + i*128] = index;
        mRegMap[(0x0080 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x0084)     + i*128] = index;
        mRegMap[(0x0084 + 1) + i*128] = index;
        mRegMap[(0x0084 + 2) + i*128] = index;
        mRegMap[(0x0084 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x0088)     + i*128] = index;
        mRegMap[(0x0088 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x008C)     + i*128] = index;
        mRegMap[(0x008C + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x0090)     + i*128] = index;
        mRegMap[(0x0090 + 1) + i*128] = index;
        mRegMap[(0x0090 + 2) + i*128] = index;
        mRegMap[(0x0090 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x0098)     + i*128] = index;
        mRegMap[(0x0098 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x009C)     + i*128] = index;
        mRegMap[(0x009C + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00A0)     + i*128] = index;
        mRegMap[(0x00A0 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00A4)     + i*128] = index;
        mRegMap[(0x00A4 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num; i++) {
        mRegMap[(0x00A8)     + i*128] = index;
        mRegMap[(0x00A8 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        mRegMap[(0x00AC)     + i*128] = index;
        mRegMap[(0x00AC + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00B0)     + i*128] = index;
        mRegMap[(0x00B0 + 1) + i*128] = index;
        mRegMap[(0x00B0 + 2) + i*128] = index;
        mRegMap[(0x00B0 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00B4)     + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00B8)     + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00BC)     + i*128] = index;
        mRegMap[(0x00BC + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        mRegMap[(0x00C0)     + i*128] = index;
        mRegMap[(0x00C0 + 1) + i*128] = index;
        mRegMap[(0x00C0 + 2) + i*128] = index;
        mRegMap[(0x00C0 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num; i++) {
        mRegMap[(0x00CC)     + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        mRegMap[(0x00D0)     + i*128] = index;
        mRegMap[(0x00D0 + 1) + i*128] = index;
        mRegMap[(0x00D0 + 2) + i*128] = index;
        mRegMap[(0x00D0 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00D8)     + i*128] = index;
        mRegMap[(0x00D8 + 1) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        mRegMap[(0x00DC)     + i*128] = index;
        mRegMap[(0x00DC + 1) + i*128] = index;
        mRegMap[(0x00DC + 2) + i*128] = index;
        mRegMap[(0x00DC + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00E0)     + i*128] = index;
        mRegMap[(0x00E0 + 1) + i*128] = index;
        mRegMap[(0x00E0 + 2) + i*128] = index;
        mRegMap[(0x00E0 + 3) + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num; i++) {
        mRegMap[(0x00E4)     + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        mRegMap[(0x00E8)     + i*128] = index++;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        mRegMap[(0x00EC)     + i*128] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_MSPInCTL0_, "MSPInCTL0_", 0x0000);
    CW_MSPInCTL0     = new scml2::bitfield<uint>(MSPInCTL0->name()    , CW_MSPInCTL0_                ,  0,  8);
    cw_instantiate_reg(CW_MSPInCTL2_, "MSPInCTL2_", 0x0008);
    CW_MSPInCTL2     = new scml2::bitfield<uint>(MSPInCTL2->name()    , CW_MSPInCTL2_                ,  0,  8);
    cw_instantiate_reg(CW_MSPInSTR0_, "MSPInSTR0_", 0x0010);
    CW_MSPInSTR0     = new scml2::bitfield<uint>(MSPInSTR0->name()    , CW_MSPInSTR0_                ,  0,  8);
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCFGm2_[i], MSPInCFGm2   [i]->name(), MSPInCFGm2   [i]->addr());
        CW_MSPInCFGm2   [i] = new scml2::bitfield<uint>(MSPInCFGm2->name()   , CW_MSPInCFGm2_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCFGm3_[i], MSPInCFGm3   [i]->name(), MSPInCFGm3   [i]->addr());
        CW_MSPInCFGm3   [i] = new scml2::bitfield<uint>(MSPInCFGm3->name()   , CW_MSPInCFGm3_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInSEUPm_[i], MSPInSEUPm   [i]->name(), MSPInSEUPm   [i]->addr());
        CW_MSPInSEUPm   [i] = new scml2::bitfield<uint>(MSPInSEUPm->name()   , CW_MSPInSEUPm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInHOLDm_[i], MSPInHOLDm   [i]->name(), MSPInHOLDm   [i]->addr());
        CW_MSPInHOLDm   [i] = new scml2::bitfield<uint>(MSPInHOLDm->name()   , CW_MSPInHOLDm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInIDLEm_[i], MSPInIDLEm   [i]->name(), MSPInIDLEm   [i]->addr());
        CW_MSPInIDLEm   [i] = new scml2::bitfield<uint>(MSPInIDLEm->name()   , CW_MSPInIDLEm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInINDAm_[i], MSPInINDAm   [i]->name(), MSPInINDAm   [i]->addr());
        CW_MSPInINDAm   [i] = new scml2::bitfield<uint>(MSPInINDAm->name()   , CW_MSPInINDAm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInRASTADm_[i], MSPInRASTADm [i]->name(), MSPInRASTADm [i]->addr());
        CW_MSPInRASTADm [i] = new scml2::bitfield<uint>(MSPInRASTADm->name() , CW_MSPInRASTADm_ [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCFSETm_[i], MSPInCFSETm  [i]->name(), MSPInCFSETm  [i]->addr());
        CW_MSPInCFSETm  [i] = new scml2::bitfield<uint>(MSPInCFSETm->name()  , CW_MSPInCFSETm_  [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCSTSm_[i], MSPInCSTSm   [i]->name(), MSPInCSTSm   [i]->addr());
        CW_MSPInCSTSm   [i] = new scml2::bitfield<uint>(MSPInCSTSm->name()   , CW_MSPInCSTSm_   [i],  0,  8);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCSTCm_[i], MSPInCSTCm   [i]->name(), MSPInCSTCm   [i]->addr());
        CW_MSPInCSTCm   [i] = new scml2::bitfield<uint>(MSPInCSTCm->name()   , CW_MSPInCSTCm_   [i],  0,  8);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInSSELm_[i], MSPInSSELm   [i]->name(), MSPInSSELm   [i]->addr());
        CW_MSPInSSELm   [i] = new scml2::bitfield<uint>(MSPInSSELm->name()   , CW_MSPInSSELm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInFRERSTm_[i], MSPInFRERSTm [i]->name(), MSPInFRERSTm [i]->addr());
        CW_MSPInFRERSTm [i] = new scml2::bitfield<uint>(MSPInFRERSTm->name() , CW_MSPInFRERSTm_ [i],  0,  8);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCSTRm_[i], MSPInCSTRm   [i]->name(), MSPInCSTRm   [i]->addr());
        CW_MSPInCSTRm   [i] = new scml2::bitfield<uint>(MSPInCSTRm->name()   , CW_MSPInCSTRm_   [i],  0, 16);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInFRERSTCm_[i], MSPInFRERSTCm[i]->name(), MSPInFRERSTCm[i]->addr());
        CW_MSPInFRERSTCm[i] = new scml2::bitfield<uint>(MSPInFRERSTCm->name(), CW_MSPInFRERSTCm_[i],  0,  8);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCESTm_[i], MSPInCESTm   [i]->name(), MSPInCESTm   [i]->addr());
        CW_MSPInCESTm   [i] = new scml2::bitfield<uint>(MSPInCESTm->name()   , CW_MSPInCESTm_   [i],  0,  8);
    }
    for(uint i = 0; i < mCh_num; i++) {
        cw_instantiate_reg(CW_MSPInCESTCm_[i], MSPInCESTCm  [i]->name(), MSPInCESTCm  [i]->addr());
        CW_MSPInCESTCm  [i] = new scml2::bitfield<uint>(MSPInCESTCm->name()  , CW_MSPInCESTCm_  [i],  0,  8);
    }
    cw_instantiate_reg(CW_MSPInCTL1      , MSPInCTL1->name()    , MSPInCTL1->addr()    );
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInCFGm0     [i], MSPInCFGm0   [i]->name(), MSPInCFGm0   [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInCFGm1     [i], MSPInCFGm1   [i]->name(), MSPInCFGm1   [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInCFGm4     [i], MSPInCFGm4   [i]->name(), MSPInCFGm4   [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInSSTXm     [i], MSPInSSTXm   [i]->name(), MSPInSSTXm   [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInTXDAm0    [i], MSPInTXDAm0  [i]->name(), MSPInTXDAm0  [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInRXDAm0    [i], MSPInRXDAm0  [i]->name(), MSPInRXDAm0  [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInCFCNTm    [i], MSPInCFCNTm  [i]->name(), MSPInCFCNTm  [i]->addr());
    for(uint i = 0; i < mCh_num; i++) cw_instantiate_reg(CW_MSPInFSRXm     [i], MSPInFSRXm   [i]->name(), MSPInFSRXm   [i]->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(MSPInCTL0      , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MSPInCTL1      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MSPInCTL2      , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MSPInSTR0      , mCurReg, 0,  1,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFGm0     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFGm1     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFGm2     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFGm3     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFGm4     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInSEUPm     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInHOLDm     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInIDLEm     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInINDAm     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInRASTADm   [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFSETm    [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInSSTXm     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCSTSm     [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCSTCm     [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInSSELm     [i], mCurReg, i,  2, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInTXDAm0    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInFRERSTm   [i], mCurReg, i,  1,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInRXDAm0    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCSTRm     [i], mCurReg, i,  2,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCFCNTm    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInFSRXm     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInFRERSTCm  [i], mCurReg, i,  1,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCESTm     [i], mCurReg, i,  1,      "32", "8|16|32");
    for(uint i = 0; i < mCh_num; i++) mCurReg = mRegArray[index++] = new SRegList(MSPInCESTCm    [i], mCurReg, i,  1, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*MSPInCTL0      ) ( 0,  0, "MSPInEN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) (31, 31, "MSPInMSSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) (29, 29, "MSPInCSIE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) (28, 28, "MSPInSAMP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) (27, 27, "MSPInCKR", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) (25, 24, "MSPInSOLS", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL1      ) ((mCs_num-1),  0, "MSPInCSP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL2      ) ( 1,  1, "MSPInDCS", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInCTL2      ) ( 0,  0, "MSPInLBM", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MSPInSTR0      ) ( 7,  4, "MSPInCNUMF", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MSPInSTR0      ) ( 0,  0, "MSPInCSF", 0x0       , "R"     , vpcl::SPP_ENABLE);
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCSTRm     [i]) (15,  8, "MSPInFIRXNm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCSTRm     [i]) ( 5,  5, "MSPInTXRQFm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCSTRm     [i]) ( 4,  4, "MSPInRXRQFm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCSTRm     [i]) ( 1,  1, "MSPInACTFm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCSTRm     [i]) ( 0,  0, "MSPInCHENm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCSTSm     [i]) ( 1,  1, "MSPInACTFSm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCSTSm     [i]) ( 0,  0, "MSPInCHENSm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCSTCm     [i]) ( 0,  0, "MSPInCHENCm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFGm0     [i]) (29, 29, "MSPInTXEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) (28, 28, "MSPInRXEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) (25, 24, "MSPInMDm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) (22, 20, "MSPInPRIOm", 0x7       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) (16, 16, "MSPInLOCKm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) (12, 12, "MSPInFCCEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) ( 3,  3, "MSPInIEREm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) ( 2,  2, "MSPInIFEEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) ( 1,  1, "MSPInIRXEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm0     [i]) ( 0,  0, "MSPInITXEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFGm1     [i]) (25, 25, "MSPInCPOLm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (24, 24, "MSPInCPHAm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (20, 20, "MSPInDIRm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (18, 18, "MSPInICLSm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (17, 17, "MSPInFIDLm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (16, 16, "MSPInCSRIm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) (11, 11, "MSPInSAFCMm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) ( 9,  9, "MSPInSAFSm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) ( 8,  8, "MSPInSAFEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) ( 5,  4, "MSPInPSm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm1     [i]) ( 0,  0, "MSPInDECHKm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFGm2     [i]) ( 7,  0, "MSPInFLENm", 0x20      , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFGm3     [i]) ( 9,  8, "MSPInPRCSm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm3     [i]) ( 4,  0, "MSPInCDIVm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFGm4     [i]) (21, 16, "MSPInHWTSm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInCFGm4     [i]) ( 1,  0, "MSPInSIZEm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInRASTADm   [i]) (11,  2, "MSPInRASTAD", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInSEUPm     [i]) (11,  0, "MSPInSEUPm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInHOLDm     [i]) (11,  0, "MSPInHOLDm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInIDLEm     [i]) (11,  0, "MSPInIDLEm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInINDAm     [i]) (11,  0, "MSPInINDAm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFSETm    [i]) (15,  0, "MSPInCFSETm", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInSSELm     [i]) (15, 15, "MSPInJOBENm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInSSELm     [i]) ((mCs_num -1),  0, "MSPInCSRm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInTXDAm0    [i]) (31,  0, "MSPInTXDAm0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInFRERSTm   [i]) ( 4,  4, "MSPInDCEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInFRERSTm   [i]) ( 1,  1, "MSPInCEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInFRERSTm   [i]) ( 0,  0, "MSPInPEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInFRERSTCm  [i]) ( 4,  4, "MSPInDCEFSCm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInFRERSTCm  [i]) ( 1,  1, "MSPInCEFSCm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInFRERSTCm  [i]) ( 0,  0, "MSPInPEFSCm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInRXDAm0    [i]) (31,  0, "MSPInRXDAm0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInSSTXm     [i]) (31, 31, "MSPInJOBENm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInSSTXm     [i]) ((mCs_num + 15), 16, "MSPInCSRm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*MSPInSSTXm     [i]) (15,  0, "MSPInTXDAm0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInFSRXm     [i]) (20, 20, "MSPInDCEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInFSRXm     [i]) (17, 17, "MSPInCEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInFSRXm     [i]) (16, 16, "MSPInPEFSTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInFSRXm     [i]) (15,  0, "MSPInRXDAm0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCESTm     [i]) ( 7,  7, "MSPInOVREEm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCESTm     [i]) ( 6,  6, "MSPInOVWREm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCESTm     [i]) ( 5,  5, "MSPInOVRUEm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCESTm     [i]) ( 4,  4, "MSPInDCEm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCESTm     [i]) ( 1,  1, "MSPInCEm", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*MSPInCESTm     [i]) ( 0,  0, "MSPInPEm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCESTCm    [i]) ( 7,  7, "MSPInOVREECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCESTCm    [i]) ( 6,  6, "MSPInOVWRECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCESTCm    [i]) ( 5,  5, "MSPInOVRUECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCESTCm    [i]) ( 4,  4, "MSPInDCECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCESTCm    [i]) ( 1,  1, "MSPInCECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*MSPInCESTCm    [i]) ( 0,  0, "MSPInPECm", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < mCh_num; i++) {
        (*MSPInCFCNTm    [i]) (15,  0, "MSPInCFCNTm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["MSPInCTL0"  ]["MSPInEN"    ] = &Cmspi000_regif::cb_MSPInCTL0_MSPInEN;
    mWrCbAPI["MSPInCTL1"  ]["MSPInMSSEL" ] = &Cmspi000_regif::cb_MSPInCTL1_MSPInMSSEL;
    mWrCbAPI["MSPInCTL2"  ]["MSPInLBM"   ] = &Cmspi000_regif::cb_MSPInCTL2_MSPInLBM;

    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCSTSm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInACTFSm"] = &Cmspi000_regif::cb_MSPInCSTSm_MSPInACTFSm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCSTCm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInCHENCm"] = &Cmspi000_regif::cb_MSPInCSTCm_MSPInCHENCm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm0"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInTXEm"] = &Cmspi000_regif::cb_MSPInCFGm0_MSPInTXEm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm1"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInCPOLm"] = &Cmspi000_regif::cb_MSPInCFGm1_MSPInCPOLm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm2"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInFLENm"] = &Cmspi000_regif::cb_MSPInCFGm2_MSPInFLENm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm3"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInPRCSm"] = &Cmspi000_regif::cb_MSPInCFGm3_MSPInPRCSm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFGm4"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInHWTSm"] = &Cmspi000_regif::cb_MSPInCFGm4_MSPInHWTSm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInRASTADm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInRASTAD"] = &Cmspi000_regif::cb_MSPInRASTADm_MSPInRASTAD;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSEUPm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInSEUPm"] = &Cmspi000_regif::cb_MSPInSEUPm_MSPInSEUPm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInHOLDm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInHOLDm"] = &Cmspi000_regif::cb_MSPInHOLDm_MSPInHOLDm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInIDLEm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInIDLEm"] = &Cmspi000_regif::cb_MSPInIDLEm_MSPInIDLEm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInINDAm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInINDAm"] = &Cmspi000_regif::cb_MSPInINDAm_MSPInINDAm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCFSETm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInCFSETm"] = &Cmspi000_regif::cb_MSPInCFSETm_MSPInCFSETm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSSELm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInJOBENm"] = &Cmspi000_regif::cb_MSPInSSELm_MSPInJOBENm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInTXDAm0"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInTXDAm0"] = &Cmspi000_regif::cb_MSPInTXDAm0_MSPInTXDAm0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInFRERSTCm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInDCEFSCm"] = &Cmspi000_regif::cb_MSPInFRERSTCm_MSPInDCEFSCm;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInRXDAm0"<< i;
        mRdCbAPI[str_tmp.str()]["MSPInRXDAm0"] = &Cmspi000_regif::cb_MSPInRXDAm0_MSPInRXDAm0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInSSTXm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInTXDAm0"] = &Cmspi000_regif::cb_MSPInSSTXm_MSPInTXDAm0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInFSRXm"<< i;
        mRdCbAPI[str_tmp.str()]["MSPInRXDAm0"] = &Cmspi000_regif::cb_MSPInFSRXm_MSPInRXDAm0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        str_tmp.str("");
        str_tmp<<"MSPInCESTCm"<< i;
        mWrCbAPI[str_tmp.str()]["MSPInOVREECm"] = &Cmspi000_regif::cb_MSPInCESTCm_MSPInOVREECm;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cmspi000_regif::~Cmspi000_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cmspi000_regif::uint Cmspi000_regif::bit_select(
                            cuint val,    ///< [in] Writting address
                            cuint start,  ///< [in] start bit position
                            cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmspi000_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmspi000_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmspi000_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmspi000_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmspi000_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                    const unsigned char *p_data,  ///< [in] Writing data
                                    cuint size,                   ///< [in] Data size (byte)
                                    bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmspi000_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size,              ///< [in]  Data size (byte)
                                    bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cmspi000_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                 unsigned char *p_data,          ///< [out] Reading data
                                 cuint size,                     ///< [in]  Data size (byte)
                                 cuint reg_index,                ///< [in] Register index
                                 bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cmspi000_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                 const unsigned char *p_data,      ///< [in] Writing data
                                 cuint size,                       ///< [in] Data size (byte)
                                 cuint reg_index,                  ///< [in] Register index
                                 bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cmspi000_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cmspi000_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cmspi000_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cmspi000_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cmspi000_regif::InitLocalVal()
{
    // Initialize local variables
    MSPInCTL0_MSPInEN = 0x0;
    MSPInCTL1_MSPInMSSEL = 0x0;
    MSPInCTL1_MSPInCSIE = 0x0;
    MSPInCTL1_MSPInSAMP = 0x0;
    MSPInCTL1_MSPInCKR = 0x0;
    MSPInCTL1_MSPInSOLS = 0x0;
    MSPInCTL1_MSPInCSP = 0x0;
    MSPInCTL2_MSPInDCS = 0x0;
    MSPInCTL2_MSPInLBM = 0x0;
    MSPInSTR0_MSPInCNUMF = 0x0;
    MSPInSTR0_MSPInCSF = 0x0;
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCSTRm_MSPInFIRXNm[i] = 0x0;
        MSPInCSTRm_MSPInTXRQFm[i] = 0x0;
        MSPInCSTRm_MSPInRXRQFm[i] = 0x0;
        MSPInCSTRm_MSPInACTFm[i] = 0x0;
        MSPInCSTRm_MSPInCHENm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCSTSm_MSPInACTFSm[i] = 0x0;
        MSPInCSTSm_MSPInCHENSm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCSTCm_MSPInCHENCm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCFGm0_MSPInTXEm[i] = 0x0;
        MSPInCFGm0_MSPInRXEm[i] = 0x0;
        MSPInCFGm0_MSPInMDm[i] = 0x0;
        MSPInCFGm0_MSPInPRIOm[i] = 0x7;
        MSPInCFGm0_MSPInLOCKm[i] = 0x0;
        MSPInCFGm0_MSPInFCCEm[i] = 0x0;
        MSPInCFGm0_MSPInIEREm[i] = 0x0;
        MSPInCFGm0_MSPInIFEEm[i] = 0x0;
        MSPInCFGm0_MSPInIRXEm[i] = 0x0;
        MSPInCFGm0_MSPInITXEm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCFGm1_MSPInCPOLm[i] = 0x0;
        MSPInCFGm1_MSPInCPHAm[i] = 0x1;
        MSPInCFGm1_MSPInDIRm[i] = 0x0;
        MSPInCFGm1_MSPInICLSm[i] = 0x0;
        MSPInCFGm1_MSPInFIDLm[i] = 0x0;
        MSPInCFGm1_MSPInCSRIm[i] = 0x0;
        MSPInCFGm1_MSPInSAFCMm[i] = 0x0;
        MSPInCFGm1_MSPInSAFSm[i] = 0x0;
        MSPInCFGm1_MSPInSAFEm[i] = 0x0;
        MSPInCFGm1_MSPInPSm[i] = 0x0;
        MSPInCFGm1_MSPInDECHKm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCFGm2_MSPInFLENm[i] = 0x20;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCFGm3_MSPInPRCSm[i] = 0x0;
        MSPInCFGm3_MSPInCDIVm[i] = 0x1;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCFGm4_MSPInHWTSm[i] = 0x0;
        MSPInCFGm4_MSPInSIZEm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        MSPInRASTADm_MSPInRASTAD[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInSEUPm_MSPInSEUPm[i] = 0x1;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInHOLDm_MSPInHOLDm[i] = 0x1;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInIDLEm_MSPInIDLEm[i] = 0x1;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInINDAm_MSPInINDAm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        MSPInCFSETm_MSPInCFSETm[i] = 0x1;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInSSELm_MSPInJOBENm[i] = 0x0;
        MSPInSSELm_MSPInCSRm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        MSPInTXDAm0_MSPInTXDAm0[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        MSPInFRERSTm_MSPInDCEFSTm[i] = 0x0;
        MSPInFRERSTm_MSPInCEFSTm[i] = 0x0;
        MSPInFRERSTm_MSPInPEFSTm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num; i++) {
        MSPInFRERSTCm_MSPInDCEFSCm[i] = 0x0;
        MSPInFRERSTCm_MSPInCEFSCm[i] = 0x0;
        MSPInFRERSTCm_MSPInPEFSCm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        MSPInRXDAm0_MSPInRXDAm0[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInSSTXm_MSPInJOBENm[i] = 0x0;
        MSPInSSTXm_MSPInCSRm[i] = 0x0;
        MSPInSSTXm_MSPInTXDAm0[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInFSRXm_MSPInDCEFSTm[i] = 0x0;
        MSPInFSRXm_MSPInCEFSTm[i] = 0x0;
        MSPInFSRXm_MSPInPEFSTm[i] = 0x0;
        MSPInFSRXm_MSPInRXDAm0[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;   i++) {
        MSPInCESTm_MSPInOVREEm[i] = 0x0;
        MSPInCESTm_MSPInOVWREm[i] = 0x0;
        MSPInCESTm_MSPInOVRUEm[i] = 0x0;
        MSPInCESTm_MSPInDCEm[i] = 0x0;
        MSPInCESTm_MSPInCEm[i] = 0x0;
        MSPInCESTm_MSPInPEm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        MSPInCESTCm_MSPInOVREECm[i] = 0x0;
        MSPInCESTCm_MSPInOVWRECm[i] = 0x0;
        MSPInCESTCm_MSPInOVRUECm[i] = 0x0;
        MSPInCESTCm_MSPInDCECm[i] = 0x0;
        MSPInCESTCm_MSPInCECm[i] = 0x0;
        MSPInCESTCm_MSPInPECm[i] = 0x0;
    }
    for(uint i = 0; i < mCh_num;  i++) {
        MSPInCFCNTm_MSPInCFCNTm[i] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cmspi000_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        MSPInCTL0_MSPInEN                 = (*MSPInCTL0    )["MSPInEN"      ];
        return;
    }
    if (addr == 0x0004) {
        MSPInCTL1_MSPInMSSEL              = (*MSPInCTL1    )["MSPInMSSEL"   ];
        MSPInCTL1_MSPInCSIE               = (*MSPInCTL1    )["MSPInCSIE"    ];
        MSPInCTL1_MSPInSAMP               = (*MSPInCTL1    )["MSPInSAMP"    ];
        MSPInCTL1_MSPInCKR                = (*MSPInCTL1    )["MSPInCKR"     ];
        MSPInCTL1_MSPInSOLS               = (*MSPInCTL1    )["MSPInSOLS"    ];
        MSPInCTL1_MSPInCSP                = (*MSPInCTL1    )["MSPInCSP"     ];
        return;
    }
    if (addr == 0x0008) {
        MSPInCTL2_MSPInDCS                = (*MSPInCTL2    )["MSPInDCS"     ];
        MSPInCTL2_MSPInLBM                = (*MSPInCTL2    )["MSPInLBM"     ];
        return;
    }
    if (addr == 0x0010) {
        MSPInSTR0_MSPInCNUMF              = (*MSPInSTR0    )["MSPInCNUMF"   ];
        MSPInSTR0_MSPInCSF                = (*MSPInSTR0    )["MSPInCSF"     ];
        return;
    }
    if ((0x00D8 <= addr) && (addr <= (0x00D8)+(128*15)) && ((addr-0x00D8)%128 == 0)) {
        uint i = (addr - 0x00D8)/128;
        MSPInCSTRm_MSPInFIRXNm           [i] = (*(MSPInCSTRm   [i]))["MSPInFIRXNm"  ];
        MSPInCSTRm_MSPInTXRQFm           [i] = (*(MSPInCSTRm   [i]))["MSPInTXRQFm"  ];
        MSPInCSTRm_MSPInRXRQFm           [i] = (*(MSPInCSTRm   [i]))["MSPInRXRQFm"  ];
        MSPInCSTRm_MSPInACTFm            [i] = (*(MSPInCSTRm   [i]))["MSPInACTFm"   ];
        MSPInCSTRm_MSPInCHENm            [i] = (*(MSPInCSTRm   [i]))["MSPInCHENm"   ];
        return;
    }
    if ((0x00B4 <= addr) && (addr <= (0x00B4)+(128*15)) && ((addr-0x00B4)%128 == 0)) {
        uint i = (addr - 0x00B4)/128;
        MSPInCSTSm_MSPInACTFSm           [i] = (*(MSPInCSTSm   [i]))["MSPInACTFSm"  ];
        MSPInCSTSm_MSPInCHENSm           [i] = (*(MSPInCSTSm   [i]))["MSPInCHENSm"  ];
        return;
    }
    if ((0x00B8 <= addr) && (addr <= (0x00B8)+(128*15)) && ((addr-0x00B8)%128 == 0)) {
        uint i = (addr - 0x00B8)/128;
        MSPInCSTCm_MSPInCHENCm           [i] = (*(MSPInCSTCm   [i]))["MSPInCHENCm"  ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(128*15)) && ((addr-0x0080)%128 == 0)) {
        uint i = (addr - 0x0080)/128;
        MSPInCFGm0_MSPInTXEm             [i] = (*(MSPInCFGm0   [i]))["MSPInTXEm"    ];
        MSPInCFGm0_MSPInRXEm             [i] = (*(MSPInCFGm0   [i]))["MSPInRXEm"    ];
        MSPInCFGm0_MSPInMDm              [i] = (*(MSPInCFGm0   [i]))["MSPInMDm"     ];
        MSPInCFGm0_MSPInPRIOm            [i] = (*(MSPInCFGm0   [i]))["MSPInPRIOm"   ];
        MSPInCFGm0_MSPInLOCKm            [i] = (*(MSPInCFGm0   [i]))["MSPInLOCKm"   ];
        MSPInCFGm0_MSPInFCCEm            [i] = (*(MSPInCFGm0   [i]))["MSPInFCCEm"   ];
        MSPInCFGm0_MSPInIEREm            [i] = (*(MSPInCFGm0   [i]))["MSPInIEREm"   ];
        MSPInCFGm0_MSPInIFEEm            [i] = (*(MSPInCFGm0   [i]))["MSPInIFEEm"   ];
        MSPInCFGm0_MSPInIRXEm            [i] = (*(MSPInCFGm0   [i]))["MSPInIRXEm"   ];
        MSPInCFGm0_MSPInITXEm            [i] = (*(MSPInCFGm0   [i]))["MSPInITXEm"   ];
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(128*15)) && ((addr-0x0084)%128 == 0)) {
        uint i = (addr - 0x0084)/128;
        MSPInCFGm1_MSPInCPOLm            [i] = (*(MSPInCFGm1   [i]))["MSPInCPOLm"   ];
        MSPInCFGm1_MSPInCPHAm            [i] = (*(MSPInCFGm1   [i]))["MSPInCPHAm"   ];
        MSPInCFGm1_MSPInDIRm             [i] = (*(MSPInCFGm1   [i]))["MSPInDIRm"    ];
        MSPInCFGm1_MSPInICLSm            [i] = (*(MSPInCFGm1   [i]))["MSPInICLSm"   ];
        MSPInCFGm1_MSPInFIDLm            [i] = (*(MSPInCFGm1   [i]))["MSPInFIDLm"   ];
        MSPInCFGm1_MSPInCSRIm            [i] = (*(MSPInCFGm1   [i]))["MSPInCSRIm"   ];
        MSPInCFGm1_MSPInSAFCMm           [i] = (*(MSPInCFGm1   [i]))["MSPInSAFCMm"  ];
        MSPInCFGm1_MSPInSAFSm            [i] = (*(MSPInCFGm1   [i]))["MSPInSAFSm"   ];
        MSPInCFGm1_MSPInSAFEm            [i] = (*(MSPInCFGm1   [i]))["MSPInSAFEm"   ];
        MSPInCFGm1_MSPInPSm              [i] = (*(MSPInCFGm1   [i]))["MSPInPSm"     ];
        MSPInCFGm1_MSPInDECHKm           [i] = (*(MSPInCFGm1   [i]))["MSPInDECHKm"  ];
        return;
    }
    if ((0x0088 <= addr) && (addr <= (0x0088)+(128*15)) && ((addr-0x0088)%128 == 0)) {
        uint i = (addr - 0x0088)/128;
        MSPInCFGm2_MSPInFLENm            [i] = (*(MSPInCFGm2   [i]))["MSPInFLENm"   ];
        return;
    }
    if ((0x008C <= addr) && (addr <= (0x008C)+(128*15)) && ((addr-0x008C)%128 == 0)) {
        uint i = (addr - 0x008C)/128;
        MSPInCFGm3_MSPInPRCSm            [i] = (*(MSPInCFGm3   [i]))["MSPInPRCSm"   ];
        MSPInCFGm3_MSPInCDIVm            [i] = (*(MSPInCFGm3   [i]))["MSPInCDIVm"   ];
        return;
    }
    if ((0x0090 <= addr) && (addr <= (0x0090)+(128*15)) && ((addr-0x0090)%128 == 0)) {
        uint i = (addr - 0x0090)/128;
        MSPInCFGm4_MSPInHWTSm            [i] = (*(MSPInCFGm4   [i]))["MSPInHWTSm"   ];
        MSPInCFGm4_MSPInSIZEm            [i] = (*(MSPInCFGm4   [i]))["MSPInSIZEm"   ];
        return;
    }
    if ((0x00A8 <= addr) && (addr <= (0x00A8)+(128*15)) && ((addr-0x00A8)%128 == 0)) {
        uint i = (addr - 0x00A8)/128;
        MSPInRASTADm_MSPInRASTAD         [i] = (*(MSPInRASTADm [i]))["MSPInRASTAD"  ];
        return;
    }
    if ((0x0098 <= addr) && (addr <= (0x0098)+(128*15)) && ((addr-0x0098)%128 == 0)) {
        uint i = (addr - 0x0098)/128;
        MSPInSEUPm_MSPInSEUPm            [i] = (*(MSPInSEUPm   [i]))["MSPInSEUPm"   ];
        return;
    }
    if ((0x009C <= addr) && (addr <= (0x009C)+(128*15)) && ((addr-0x009C)%128 == 0)) {
        uint i = (addr - 0x009C)/128;
        MSPInHOLDm_MSPInHOLDm            [i] = (*(MSPInHOLDm   [i]))["MSPInHOLDm"   ];
        return;
    }
    if ((0x00A0 <= addr) && (addr <= (0x00A0)+(128*15)) && ((addr-0x00A0)%128 == 0)) {
        uint i = (addr - 0x00A0)/128;
        MSPInIDLEm_MSPInIDLEm            [i] = (*(MSPInIDLEm   [i]))["MSPInIDLEm"   ];
        return;
    }
    if ((0x00A4 <= addr) && (addr <= (0x00A4)+(128*15)) && ((addr-0x00A4)%128 == 0)) {
        uint i = (addr - 0x00A4)/128;
        MSPInINDAm_MSPInINDAm            [i] = (*(MSPInINDAm   [i]))["MSPInINDAm"   ];
        return;
    }
    if ((0x00AC <= addr) && (addr <= (0x00AC)+(128*15)) && ((addr-0x00AC)%128 == 0)) {
        uint i = (addr - 0x00AC)/128;
        MSPInCFSETm_MSPInCFSETm          [i] = (*(MSPInCFSETm  [i]))["MSPInCFSETm"  ];
        return;
    }
    if ((0x00BC <= addr) && (addr <= (0x00BC)+(128*15)) && ((addr-0x00BC)%128 == 0)) {
        uint i = (addr - 0x00BC)/128;
        MSPInSSELm_MSPInJOBENm           [i] = (*(MSPInSSELm   [i]))["MSPInJOBENm"  ];
        MSPInSSELm_MSPInCSRm             [i] = (*(MSPInSSELm   [i]))["MSPInCSRm"    ];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(128*15)) && ((addr-0x00C0)%128 == 0)) {
        uint i = (addr - 0x00C0)/128;
        MSPInTXDAm0_MSPInTXDAm0          [i] = (*(MSPInTXDAm0  [i]))["MSPInTXDAm0"  ];
        return;
    }
    if ((0x00CC <= addr) && (addr <= (0x00CC)+(128*15)) && ((addr-0x00CC)%128 == 0)) {
        uint i = (addr - 0x00CC)/128;
        MSPInFRERSTm_MSPInDCEFSTm        [i] = (*(MSPInFRERSTm [i]))["MSPInDCEFSTm" ];
        MSPInFRERSTm_MSPInCEFSTm         [i] = (*(MSPInFRERSTm [i]))["MSPInCEFSTm"  ];
        MSPInFRERSTm_MSPInPEFSTm         [i] = (*(MSPInFRERSTm [i]))["MSPInPEFSTm"  ];
        return;
    }
    if ((0x00E4 <= addr) && (addr <= (0x00E4)+(128*15)) && ((addr-0x00E4)%128 == 0)) {
        uint i = (addr - 0x00E4)/128;
        MSPInFRERSTCm_MSPInDCEFSCm       [i] = (*(MSPInFRERSTCm[i]))["MSPInDCEFSCm" ];
        MSPInFRERSTCm_MSPInCEFSCm        [i] = (*(MSPInFRERSTCm[i]))["MSPInCEFSCm"  ];
        MSPInFRERSTCm_MSPInPEFSCm        [i] = (*(MSPInFRERSTCm[i]))["MSPInPEFSCm"  ];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(128*15)) && ((addr-0x00D0)%128 == 0)) {
        uint i = (addr - 0x00D0)/128;
        MSPInRXDAm0_MSPInRXDAm0          [i] = (*(MSPInRXDAm0  [i]))["MSPInRXDAm0"  ];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(128*15)) && ((addr-0x00B0)%128 == 0)) {
        uint i = (addr - 0x00B0)/128;
        MSPInSSTXm_MSPInJOBENm           [i] = (*(MSPInSSTXm   [i]))["MSPInJOBENm"  ];
        MSPInSSTXm_MSPInCSRm             [i] = (*(MSPInSSTXm   [i]))["MSPInCSRm"    ];
        MSPInSSTXm_MSPInTXDAm0           [i] = (*(MSPInSSTXm   [i]))["MSPInTXDAm0"  ];
        return;
    }
    if ((0x00E0 <= addr) && (addr <= (0x00E0)+(128*15)) && ((addr-0x00E0)%128 == 0)) {
        uint i = (addr - 0x00E0)/128;
        MSPInFSRXm_MSPInDCEFSTm          [i] = (*(MSPInFSRXm   [i]))["MSPInDCEFSTm" ];
        MSPInFSRXm_MSPInCEFSTm           [i] = (*(MSPInFSRXm   [i]))["MSPInCEFSTm"  ];
        MSPInFSRXm_MSPInPEFSTm           [i] = (*(MSPInFSRXm   [i]))["MSPInPEFSTm"  ];
        MSPInFSRXm_MSPInRXDAm0           [i] = (*(MSPInFSRXm   [i]))["MSPInRXDAm0"  ];
        return;
    }
    if ((0x00E8 <= addr) && (addr <= (0x00E8)+(128*15)) && ((addr-0x00E8)%128 == 0)) {
        uint i = (addr - 0x00E8)/128;
        MSPInCESTm_MSPInOVREEm           [i] = (*(MSPInCESTm   [i]))["MSPInOVREEm"  ];
        MSPInCESTm_MSPInOVWREm           [i] = (*(MSPInCESTm   [i]))["MSPInOVWREm"  ];
        MSPInCESTm_MSPInOVRUEm           [i] = (*(MSPInCESTm   [i]))["MSPInOVRUEm"  ];
        MSPInCESTm_MSPInDCEm             [i] = (*(MSPInCESTm   [i]))["MSPInDCEm"    ];
        MSPInCESTm_MSPInCEm              [i] = (*(MSPInCESTm   [i]))["MSPInCEm"     ];
        MSPInCESTm_MSPInPEm              [i] = (*(MSPInCESTm   [i]))["MSPInPEm"     ];
        return;
    }
    if ((0x00EC <= addr) && (addr <= (0x00EC)+(128*15)) && ((addr-0x00EC)%128 == 0)) {
        uint i = (addr - 0x00EC)/128;
        MSPInCESTCm_MSPInOVREECm         [i] = (*(MSPInCESTCm  [i]))["MSPInOVREECm" ];
        MSPInCESTCm_MSPInOVWRECm         [i] = (*(MSPInCESTCm  [i]))["MSPInOVWRECm" ];
        MSPInCESTCm_MSPInOVRUECm         [i] = (*(MSPInCESTCm  [i]))["MSPInOVRUECm" ];
        MSPInCESTCm_MSPInDCECm           [i] = (*(MSPInCESTCm  [i]))["MSPInDCECm"   ];
        MSPInCESTCm_MSPInCECm            [i] = (*(MSPInCESTCm  [i]))["MSPInCECm"    ];
        MSPInCESTCm_MSPInPECm            [i] = (*(MSPInCESTCm  [i]))["MSPInPECm"    ];
        return;
    }
    if ((0x00DC <= addr) && (addr <= (0x00DC)+(128*15)) && ((addr-0x00DC)%128 == 0)) {
        uint i = (addr - 0x00DC)/128;
        MSPInCFCNTm_MSPInCFCNTm          [i] = (*(MSPInCFCNTm  [i]))["MSPInCFCNTm"  ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cmspi000_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*MSPInCTL0    )["MSPInEN"      ] = MSPInCTL0_MSPInEN;
        return;
    }
    if (addr == 0x0004) {
        (*MSPInCTL1    )["MSPInMSSEL"   ] = MSPInCTL1_MSPInMSSEL;
        (*MSPInCTL1    )["MSPInCSIE"    ] = MSPInCTL1_MSPInCSIE;
        (*MSPInCTL1    )["MSPInSAMP"    ] = MSPInCTL1_MSPInSAMP;
        (*MSPInCTL1    )["MSPInCKR"     ] = MSPInCTL1_MSPInCKR;
        (*MSPInCTL1    )["MSPInSOLS"    ] = MSPInCTL1_MSPInSOLS;
        (*MSPInCTL1    )["MSPInCSP"     ] = MSPInCTL1_MSPInCSP;
        return;
    }
    if (addr == 0x0008) {
        (*MSPInCTL2    )["MSPInDCS"     ] = MSPInCTL2_MSPInDCS;
        (*MSPInCTL2    )["MSPInLBM"     ] = MSPInCTL2_MSPInLBM;
        return;
    }
    if (addr == 0x0010) {
        (*MSPInSTR0    )["MSPInCNUMF"   ] = MSPInSTR0_MSPInCNUMF;
        (*MSPInSTR0    )["MSPInCSF"     ] = MSPInSTR0_MSPInCSF;
        return;
    }
    if ((0x00D8 <= addr) && (addr <= (0x00D8)+(128*15)) && ((addr-0x00D8)%128 == 0)) {
        uint i = (addr - 0x00D8)/128;
        (*(MSPInCSTRm   [i]))["MSPInFIRXNm"  ] = MSPInCSTRm_MSPInFIRXNm[i];
        (*(MSPInCSTRm   [i]))["MSPInTXRQFm"  ] = MSPInCSTRm_MSPInTXRQFm[i];
        (*(MSPInCSTRm   [i]))["MSPInRXRQFm"  ] = MSPInCSTRm_MSPInRXRQFm[i];
        (*(MSPInCSTRm   [i]))["MSPInACTFm"   ] = MSPInCSTRm_MSPInACTFm[i];
        (*(MSPInCSTRm   [i]))["MSPInCHENm"   ] = MSPInCSTRm_MSPInCHENm[i];
        return;
    }
    if ((0x00B4 <= addr) && (addr <= (0x00B4)+(128*15)) && ((addr-0x00B4)%128 == 0)) {
        uint i = (addr - 0x00B4)/128;
        (*(MSPInCSTSm   [i]))["MSPInACTFSm"  ] = MSPInCSTSm_MSPInACTFSm[i];
        (*(MSPInCSTSm   [i]))["MSPInCHENSm"  ] = MSPInCSTSm_MSPInCHENSm[i];
        return;
    }
    if ((0x00B8 <= addr) && (addr <= (0x00B8)+(128*15)) && ((addr-0x00B8)%128 == 0)) {
        uint i = (addr - 0x00B8)/128;
        (*(MSPInCSTCm   [i]))["MSPInCHENCm"  ] = MSPInCSTCm_MSPInCHENCm[i];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(128*15)) && ((addr-0x0080)%128 == 0)) {
        uint i = (addr - 0x0080)/128;
        (*(MSPInCFGm0   [i]))["MSPInTXEm"    ] = MSPInCFGm0_MSPInTXEm[i];
        (*(MSPInCFGm0   [i]))["MSPInRXEm"    ] = MSPInCFGm0_MSPInRXEm[i];
        (*(MSPInCFGm0   [i]))["MSPInMDm"     ] = MSPInCFGm0_MSPInMDm[i];
        (*(MSPInCFGm0   [i]))["MSPInPRIOm"   ] = MSPInCFGm0_MSPInPRIOm[i];
        (*(MSPInCFGm0   [i]))["MSPInLOCKm"   ] = MSPInCFGm0_MSPInLOCKm[i];
        (*(MSPInCFGm0   [i]))["MSPInFCCEm"   ] = MSPInCFGm0_MSPInFCCEm[i];
        (*(MSPInCFGm0   [i]))["MSPInIEREm"   ] = MSPInCFGm0_MSPInIEREm[i];
        (*(MSPInCFGm0   [i]))["MSPInIFEEm"   ] = MSPInCFGm0_MSPInIFEEm[i];
        (*(MSPInCFGm0   [i]))["MSPInIRXEm"   ] = MSPInCFGm0_MSPInIRXEm[i];
        (*(MSPInCFGm0   [i]))["MSPInITXEm"   ] = MSPInCFGm0_MSPInITXEm[i];
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(128*15)) && ((addr-0x0084)%128 == 0)) {
        uint i = (addr - 0x0084)/128;
        (*(MSPInCFGm1   [i]))["MSPInCPOLm"   ] = MSPInCFGm1_MSPInCPOLm[i];
        (*(MSPInCFGm1   [i]))["MSPInCPHAm"   ] = MSPInCFGm1_MSPInCPHAm[i];
        (*(MSPInCFGm1   [i]))["MSPInDIRm"    ] = MSPInCFGm1_MSPInDIRm[i];
        (*(MSPInCFGm1   [i]))["MSPInICLSm"   ] = MSPInCFGm1_MSPInICLSm[i];
        (*(MSPInCFGm1   [i]))["MSPInFIDLm"   ] = MSPInCFGm1_MSPInFIDLm[i];
        (*(MSPInCFGm1   [i]))["MSPInCSRIm"   ] = MSPInCFGm1_MSPInCSRIm[i];
        (*(MSPInCFGm1   [i]))["MSPInSAFCMm"  ] = MSPInCFGm1_MSPInSAFCMm[i];
        (*(MSPInCFGm1   [i]))["MSPInSAFSm"   ] = MSPInCFGm1_MSPInSAFSm[i];
        (*(MSPInCFGm1   [i]))["MSPInSAFEm"   ] = MSPInCFGm1_MSPInSAFEm[i];
        (*(MSPInCFGm1   [i]))["MSPInPSm"     ] = MSPInCFGm1_MSPInPSm[i];
        (*(MSPInCFGm1   [i]))["MSPInDECHKm"  ] = MSPInCFGm1_MSPInDECHKm[i];
        return;
    }
    if ((0x0088 <= addr) && (addr <= (0x0088)+(128*15)) && ((addr-0x0088)%128 == 0)) {
        uint i = (addr - 0x0088)/128;
        (*(MSPInCFGm2   [i]))["MSPInFLENm"   ] = MSPInCFGm2_MSPInFLENm[i];
        return;
    }
    if ((0x008C <= addr) && (addr <= (0x008C)+(128*15)) && ((addr-0x008C)%128 == 0)) {
        uint i = (addr - 0x008C)/128;
        (*(MSPInCFGm3   [i]))["MSPInPRCSm"   ] = MSPInCFGm3_MSPInPRCSm[i];
        (*(MSPInCFGm3   [i]))["MSPInCDIVm"   ] = MSPInCFGm3_MSPInCDIVm[i];
        return;
    }
    if ((0x0090 <= addr) && (addr <= (0x0090)+(128*15)) && ((addr-0x0090)%128 == 0)) {
        uint i = (addr - 0x0090)/128;
        (*(MSPInCFGm4   [i]))["MSPInHWTSm"   ] = MSPInCFGm4_MSPInHWTSm[i];
        (*(MSPInCFGm4   [i]))["MSPInSIZEm"   ] = MSPInCFGm4_MSPInSIZEm[i];
        return;
    }
    if ((0x00A8 <= addr) && (addr <= (0x00A8)+(128*15)) && ((addr-0x00A8)%128 == 0)) {
        uint i = (addr - 0x00A8)/128;
        (*(MSPInRASTADm [i]))["MSPInRASTAD"  ] = MSPInRASTADm_MSPInRASTAD[i];
        return;
    }
    if ((0x0098 <= addr) && (addr <= (0x0098)+(128*15)) && ((addr-0x0098)%128 == 0)) {
        uint i = (addr - 0x0098)/128;
        (*(MSPInSEUPm   [i]))["MSPInSEUPm"   ] = MSPInSEUPm_MSPInSEUPm[i];
        return;
    }
    if ((0x009C <= addr) && (addr <= (0x009C)+(128*15)) && ((addr-0x009C)%128 == 0)) {
        uint i = (addr - 0x009C)/128;
        (*(MSPInHOLDm   [i]))["MSPInHOLDm"   ] = MSPInHOLDm_MSPInHOLDm[i];
        return;
    }
    if ((0x00A0 <= addr) && (addr <= (0x00A0)+(128*15)) && ((addr-0x00A0)%128 == 0)) {
        uint i = (addr - 0x00A0)/128;
        (*(MSPInIDLEm   [i]))["MSPInIDLEm"   ] = MSPInIDLEm_MSPInIDLEm[i];
        return;
    }
    if ((0x00A4 <= addr) && (addr <= (0x00A4)+(128*15)) && ((addr-0x00A4)%128 == 0)) {
        uint i = (addr - 0x00A4)/128;
        (*(MSPInINDAm   [i]))["MSPInINDAm"   ] = MSPInINDAm_MSPInINDAm[i];
        return;
    }
    if ((0x00AC <= addr) && (addr <= (0x00AC)+(128*15)) && ((addr-0x00AC)%128 == 0)) {
        uint i = (addr - 0x00AC)/128;
        (*(MSPInCFSETm  [i]))["MSPInCFSETm"  ] = MSPInCFSETm_MSPInCFSETm[i];
        return;
    }
    if ((0x00BC <= addr) && (addr <= (0x00BC)+(128*15)) && ((addr-0x00BC)%128 == 0)) {
        uint i = (addr - 0x00BC)/128;
        (*(MSPInSSELm   [i]))["MSPInJOBENm"  ] = MSPInSSELm_MSPInJOBENm[i];
        (*(MSPInSSELm   [i]))["MSPInCSRm"    ] = MSPInSSELm_MSPInCSRm[i];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(128*15)) && ((addr-0x00C0)%128 == 0)) {
        uint i = (addr - 0x00C0)/128;
        (*(MSPInTXDAm0  [i]))["MSPInTXDAm0"  ] = MSPInTXDAm0_MSPInTXDAm0[i];
        return;
    }
    if ((0x00CC <= addr) && (addr <= (0x00CC)+(128*15)) && ((addr-0x00CC)%128 == 0)) {
        uint i = (addr - 0x00CC)/128;
        (*(MSPInFRERSTm [i]))["MSPInDCEFSTm" ] = MSPInFRERSTm_MSPInDCEFSTm[i];
        (*(MSPInFRERSTm [i]))["MSPInCEFSTm"  ] = MSPInFRERSTm_MSPInCEFSTm[i];
        (*(MSPInFRERSTm [i]))["MSPInPEFSTm"  ] = MSPInFRERSTm_MSPInPEFSTm[i];
        return;
    }
    if ((0x00E4 <= addr) && (addr <= (0x00E4)+(128*15)) && ((addr-0x00E4)%128 == 0)) {
        uint i = (addr - 0x00E4)/128;
        (*(MSPInFRERSTCm[i]))["MSPInDCEFSCm" ] = MSPInFRERSTCm_MSPInDCEFSCm[i];
        (*(MSPInFRERSTCm[i]))["MSPInCEFSCm"  ] = MSPInFRERSTCm_MSPInCEFSCm[i];
        (*(MSPInFRERSTCm[i]))["MSPInPEFSCm"  ] = MSPInFRERSTCm_MSPInPEFSCm[i];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(128*15)) && ((addr-0x00D0)%128 == 0)) {
        uint i = (addr - 0x00D0)/128;
        (*(MSPInRXDAm0  [i]))["MSPInRXDAm0"  ] = MSPInRXDAm0_MSPInRXDAm0[i];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(128*15)) && ((addr-0x00B0)%128 == 0)) {
        uint i = (addr - 0x00B0)/128;
        (*(MSPInSSTXm   [i]))["MSPInJOBENm"  ] = MSPInSSTXm_MSPInJOBENm[i];
        (*(MSPInSSTXm   [i]))["MSPInCSRm"    ] = MSPInSSTXm_MSPInCSRm[i];
        (*(MSPInSSTXm   [i]))["MSPInTXDAm0"  ] = MSPInSSTXm_MSPInTXDAm0[i];
        return;
    }
    if ((0x00E0 <= addr) && (addr <= (0x00E0)+(128*15)) && ((addr-0x00E0)%128 == 0)) {
        uint i = (addr - 0x00E0)/128;
        (*(MSPInFSRXm   [i]))["MSPInDCEFSTm" ] = MSPInFSRXm_MSPInDCEFSTm[i];
        (*(MSPInFSRXm   [i]))["MSPInCEFSTm"  ] = MSPInFSRXm_MSPInCEFSTm[i];
        (*(MSPInFSRXm   [i]))["MSPInPEFSTm"  ] = MSPInFSRXm_MSPInPEFSTm[i];
        (*(MSPInFSRXm   [i]))["MSPInRXDAm0"  ] = MSPInFSRXm_MSPInRXDAm0[i];
        return;
    }
    if ((0x00E8 <= addr) && (addr <= (0x00E8)+(128*15)) && ((addr-0x00E8)%128 == 0)) {
        uint i = (addr - 0x00E8)/128;
        (*(MSPInCESTm   [i]))["MSPInOVREEm"  ] = MSPInCESTm_MSPInOVREEm[i];
        (*(MSPInCESTm   [i]))["MSPInOVWREm"  ] = MSPInCESTm_MSPInOVWREm[i];
        (*(MSPInCESTm   [i]))["MSPInOVRUEm"  ] = MSPInCESTm_MSPInOVRUEm[i];
        (*(MSPInCESTm   [i]))["MSPInDCEm"    ] = MSPInCESTm_MSPInDCEm[i];
        (*(MSPInCESTm   [i]))["MSPInCEm"     ] = MSPInCESTm_MSPInCEm[i];
        (*(MSPInCESTm   [i]))["MSPInPEm"     ] = MSPInCESTm_MSPInPEm[i];
        return;
    }
    if ((0x00EC <= addr) && (addr <= (0x00EC)+(128*15)) && ((addr-0x00EC)%128 == 0)) {
        uint i = (addr - 0x00EC)/128;
        (*(MSPInCESTCm  [i]))["MSPInOVREECm" ] = MSPInCESTCm_MSPInOVREECm[i];
        (*(MSPInCESTCm  [i]))["MSPInOVWRECm" ] = MSPInCESTCm_MSPInOVWRECm[i];
        (*(MSPInCESTCm  [i]))["MSPInOVRUECm" ] = MSPInCESTCm_MSPInOVRUECm[i];
        (*(MSPInCESTCm  [i]))["MSPInDCECm"   ] = MSPInCESTCm_MSPInDCECm[i];
        (*(MSPInCESTCm  [i]))["MSPInCECm"    ] = MSPInCESTCm_MSPInCECm[i];
        (*(MSPInCESTCm  [i]))["MSPInPECm"    ] = MSPInCESTCm_MSPInPECm[i];
        return;
    }
    if ((0x00DC <= addr) && (addr <= (0x00DC)+(128*15)) && ((addr-0x00DC)%128 == 0)) {
        uint i = (addr - 0x00DC)/128;
        (*(MSPInCFCNTm  [i]))["MSPInCFCNTm"  ] = MSPInCFCNTm_MSPInCFCNTm[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cmspi000_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cmspi000_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cmspi000_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cmspi000_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cmspi000_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cmspi000_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cmspi000_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cmspi000_regif::uint Cmspi000_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cmspi000_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cmspi000_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cmspi000_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cmspi000_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Cmspi000_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cmspi000_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cmspi000_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
