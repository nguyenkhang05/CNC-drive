// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2014 Renesas Electronics Corporation
// Copyright(c) 2010-2014 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//
// Input file : asf_regif.txt
////////////////////////////////////////////////////////////////////////////////
// 
// %MODULE asf 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def       8     
// 
// %REG_CHANNEL reg_def
//     %%TITLE           name      size        length  offset    factor_start   factor_end     factor_index    factor_step     access   init  support   callback
//     %%REG             DR        32          32      0x00      0              15             -               0x04            R        0     TRUE      -
//     %%REG             CMP       8|16|32     16      0x40      0              15             -               0x04            W|R      0     TRUE      -
//     %%REG             RTDR      32          32      0x90      0              15             -               0x04            R        0     TRUE      -
//     %%REG             CTL0      8|16|32     32      0x80      -               -             -               -               W|R      0     TRUE      -
//     %%REG             CTL1      8|16|32     8       0x84      -               -             -               -               W|R      0     TRUE      -
//     %%REG             CNT       16          16      0x8C      -               -             -               -               R        0     TRUE      -
// 
// %REG_NAME DR      
//     %%TITLE  name       upper  lower  init  access  support  callback    
//     %%BIT    DR         31     11     0     R       TRUE     -
// 
// %REG_NAME CMP
//     %%TITLE  name       upper  lower  init  access  support  callback
//     %%BIT    ASIIE      15     15     0     W|R     TRUE     -
//     %%BIT    CHE        7      7      0     W|R     TRUE     -
//     %%BIT    CMP        4      0      0     W|R     TRUE     W
// 
// %REG_NAME CTL0      
//     %%TITLE  name       upper  lower  init  access  support  callback    
//     %%BIT    RTD        16     16     0     W|R     TRUE     -
//     %%BIT    ACSL       10     8      0     W|R     TRUE     -
//     %%BIT    CTAG       3      0      0     W|R     TRUE     W
// 
// %REG_NAME CTL1      
//     %%TITLE  name       upper  lower  init  access  support  callback    
//     %%BIT    ST         0      0      0     W|R     TRUE     W
// 
// %REG_NAME CNT      
//     %%TITLE  name       upper  lower  init  access  support  callback    
//     %%BIT    CNT        8      0      0     R       TRUE     R
// 
// %REG_NAME RTDR      
//     %%TITLE  name       upper  lower  init  access  support  callback    
//     %%BIT    RTDR       31     11     0     R       TRUE     -
//     %%BIT    RTCNT      8      0      0     R       TRUE     R
////////////////////////////////////////////////////////////////////////////////
/// @file asf_regif.h
/// @brief Register IF class of model ASF
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ASF_REGIF_H__
#define __ASF_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of ASF model
class Casf_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_DR   = 16,
        emNUM_CMP  = 16,
        emNUM_RTDR = 16
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Casf_regif(std::string name, uint buswidth);
    ~Casf_regif();

protected:
    vpcl::re_register *DR  [16];
    vpcl::re_register *CMP [16];
    vpcl::re_register *RTDR[16];
    vpcl::re_register *CTL0;
    vpcl::re_register *CTL1;
    vpcl::re_register *CNT ;

    #ifdef CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif

    uint DR_DR   [16];
    uint CMP_ASIIE[16];
    uint CMP_CHE [16];
    uint CMP_CMP [16];
    uint RTDR_RTDR[16];
    uint RTDR_RTCNT[16];
    uint CTL0_RTD;
    uint CTL0_ACSL;
    uint CTL0_CTAG;
    uint CTL1_ST ;
    uint CNT_CNT ;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_CMP_CMP(RegCBstr str) = 0;
    virtual void cb_RTDR_RTCNT(RegCBstr str) = 0;
    virtual void cb_CTL0_CTAG(RegCBstr str) = 0;
    virtual void cb_CTL1_ST(RegCBstr str) = 0;
    virtual void cb_CNT_CNT(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Casf_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Casf_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif
};
#endif //__ASF_REG_DEF_H__
