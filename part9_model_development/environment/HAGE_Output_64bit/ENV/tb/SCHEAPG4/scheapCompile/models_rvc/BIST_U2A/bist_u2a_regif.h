// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2018 Renesas Electronics Corporation
// Copyright(c) 2010-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : bist_u2a_info.txt
////////////////////////////////////////////////////////////////////////////////
// # -----------------------------------------------------------------------------
// # $Id$
// #
// # Copyright(c) 2018 Renesas Electronics Corporation
// # Copyright(c) 2018 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # -----------------------------------------------------------------------------
// 
// %MODULE bist_u2a
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL   reg_def
//   %%TITLE  name         reg_name     wsize  rsize    length  offset    init        access  support  callback
//   %%REG    LBISTREF1    LBISTREF1    32     8|16|32  32      0x100    -           -       -        -
//   %%REG    LBISTREF2    LBISTREF2    32     8|16|32  32      0x104    -           -       -        -
//   %%REG    MBISTREF1    MBISTREF1    32     8|16|32  32      0x108    -           -       -        -
//   %%REG    MBISTREF2    MBISTREF2    32     8|16|32  32      0x10C    -           -       -        -
//   %%REG    MBISTREF3    MBISTREF3    32     8|16|32  32      0x110    -           -       -        -
//   %%REG    LBISTSIG1    LBISTSIG1    32     8|16|32  32      0x114    -           -       -        -
//   %%REG    LBISTSIG2    LBISTSIG2    32     8|16|32  32      0x118    -           -       -        -
//   %%REG    MBISTSIG1    MBISTSIG1    32     8|16|32  32      0x11C    -           -       -        -
//   %%REG    MBISTSIG2    MBISTSIG2    32     8|16|32  32      0x120    -           -       -        -
//   %%REG    MBISTSIG3    MBISTSIG3    32     8|16|32  32      0x124    -           -       -        -
//   %%REG    MBIST1FTAG0  MBIST1FTAG0  32     8|16|32  32      0x128    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG1  MBIST1FTAG1  32     8|16|32  32      0x12C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG2  MBIST1FTAG2  32     8|16|32  32      0x130    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG3  MBIST1FTAG3  32     8|16|32  32      0x134    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG4  MBIST1FTAG4  32     8|16|32  32      0x138    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG5  MBIST1FTAG5  32     8|16|32  32      0x13C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG6  MBIST1FTAG6  32     8|16|32  32      0x140    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG7  MBIST1FTAG7  32     8|16|32  32      0x144    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG0  MBIST2FTAG0  32     8|16|32  32      0x148    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG1  MBIST2FTAG1  32     8|16|32  32      0x14C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG2  MBIST2FTAG2  32     8|16|32  32      0x150    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG3  MBIST2FTAG3  32     8|16|32  32      0x154    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG4  MBIST2FTAG4  32     8|16|32  32      0x158    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG5  MBIST2FTAG5  32     8|16|32  32      0x15C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG6  MBIST2FTAG6  32     8|16|32  32      0x160    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG7  MBIST2FTAG7  32     8|16|32  32      0x164    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG0  MBIST3FTAG0  32     8|16|32  32      0x168    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG1  MBIST3FTAG1  32     8|16|32  32      0x16C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG2  MBIST3FTAG2  32     8|16|32  32      0x170    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG3  MBIST3FTAG3  32     8|16|32  32      0x174    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG4  MBIST3FTAG4  32     8|16|32  32      0x178    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG5  MBIST3FTAG5  32     8|16|32  32      0x17C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG6  MBIST3FTAG6  32     8|16|32  32      0x180    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG7  MBIST3FTAG7  32     8|16|32  32      0x184    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC0   MBIST1ECC0   32     8|16|32  32      0x188    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC1   MBIST1ECC1   32     8|16|32  32      0x18C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC2   MBIST1ECC2   32     8|16|32  32      0x190    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC3   MBIST1ECC3   32     8|16|32  32      0x194    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC4   MBIST1ECC4   32     8|16|32  32      0x198    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC5   MBIST1ECC5   32     8|16|32  32      0x19C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC6   MBIST1ECC6   32     8|16|32  32      0x1A0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC7   MBIST1ECC7   32     8|16|32  32      0x1A4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC0   MBIST2ECC0   32     8|16|32  32      0x1A8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC1   MBIST2ECC1   32     8|16|32  32      0x1AC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC2   MBIST2ECC2   32     8|16|32  32      0x1B0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC3   MBIST2ECC3   32     8|16|32  32      0x1B4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC4   MBIST2ECC4   32     8|16|32  32      0x1B8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC5   MBIST2ECC5   32     8|16|32  32      0x1BC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC6   MBIST2ECC6   32     8|16|32  32      0x1C0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC7   MBIST2ECC7   32     8|16|32  32      0x1C4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC0   MBIST3ECC0   32     8|16|32  32      0x1C8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC1   MBIST3ECC1   32     8|16|32  32      0x1CC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC2   MBIST3ECC2   32     8|16|32  32      0x1D0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC3   MBIST3ECC3   32     8|16|32  32      0x1D4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC4   MBIST3ECC4   32     8|16|32  32      0x1D8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC5   MBIST3ECC5   32     8|16|32  32      0x1DC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC6   MBIST3ECC6   32     8|16|32  32      0x1E0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC7   MBIST3ECC7   32     8|16|32  32      0x1E4    0xFFFFFFFF  R       TRUE     -
//   %%REG    BSEQ0ST      BSEQ0ST      32     8|16|32  32      0x000    -           -       -        -
//   %%REG    BSEQ0STB     BSEQ0STB     32     8|16|32  32      0x004    -           -       -        -
//   %%REG    BISTST       BISTST       32     8|16|32  32      0x008    -           -       -        -
//   %%REG    BSEQ0SEL     BSEQ0SEL     32     8|16|32  32      0x00C    -           -       -        -
// 
// 
// %REG_NAME  LBISTREF1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTREF1   19      0       0xA5A5A   R        -         -
// 
// %REG_NAME  LBISTREF2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTREF2   19      0       0x5A5A5   R        -         -
// 
// %REG_NAME  MBISTREF1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF1   19      0       0xAA55A   R        -         -
// 
// %REG_NAME  MBISTREF2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF2   19      0       0x55AA5   R        -         -
// 
// %REG_NAME  MBISTREF3
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF3   19      0       0xAAA55   R        -         -
// 
// %REG_NAME  LBISTSIG1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTSIG1   19      0       0x5A5A5   R        -         -
// 
// %REG_NAME  LBISTSIG2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTSIG2   19      0       0xA5A5A   R        -         -
// 
// %REG_NAME  MBISTSIG1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG1   19      0       0x55AA5   R        -         -
// 
// %REG_NAME  MBISTSIG2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG2   19      0       0xAA55A   R        -         -
// 
// %REG_NAME  MBISTSIG3
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG3   19      0       0x555AA   R        -         -
// 
// %REG_NAME  BSEQ0ST
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    BISTEND     1       1       0         R        -         -
//    %%BIT    CMPERR      0       0       1         R        -         -
// 
// %REG_NAME  BSEQ0STB
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    BISTENDB    1       1       1         R        -         -
//    %%BIT    CMPERRB     0       0       0         R        -         -
// 
// %REG_NAME  BISTST
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBIST3ST    4       4       1         R        -         -
//    %%BIT    MBIST2ST    3       3       1         R        -         -
//    %%BIT    MBIST1ST    2       2       1         R        -         -
//    %%BIT    LBIST2ST    1       1       1         R        -         -
//    %%BIT    LBIST1ST    0       0       1         R        -         -
// 
// %REG_NAME  BSEQ0SEL
//    %%TITLE  name        upper   lower   init      access   support   callback   value
//    %%BIT    PARAMSEL    15      15      0         R|W      -         -          -
//    %%BIT    POSTCKSEL   10      8       0         R|W      -         -          -
//    %%BIT    HWTESTSET   5       4       0x3       R|W      -         -          "b01,b10,b11"
//    %%BIT    HWLBISTSEL  3       0       0         R|W      -         -          -
// 
// 
// %CMD_BASEID  tgt reg
// %CMD_NODUMP_API CommandCB DumpProfile ClearProfile EnableInsertInput EnableDumpResult AssertReset
// 
// %CMD_ACTION SetCLKfreq  <clk_name: std::string> <clk_freq: double> : void   @ Set clock frequency for pclk port
// %CMD_ACTION AssertBISTReset <rst_name: std::string> <start_time: double> <period: double> : void @ Assert and de-assert reset signal to the BIST model 
// 
////////////////////////////////////////////////////////////////////////////////
/// @file bist_u2a_regif.h
/// @brief Register IF class of model BIST_U2A
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __BIST_U2A_REGIF_H__
#define __BIST_U2A_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USE_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of BIST_U2A model
class Cbist_u2a_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USE_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USE_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USE_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Cbist_u2a_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Cbist_u2a_regif(std::string name, uint buswidth);
    ~Cbist_u2a_regif();

protected:
    vpcl::re_register *LBISTREF1  ;
    vpcl::re_register *LBISTREF2  ;
    vpcl::re_register *MBISTREF1  ;
    vpcl::re_register *MBISTREF2  ;
    vpcl::re_register *MBISTREF3  ;
    vpcl::re_register *LBISTSIG1  ;
    vpcl::re_register *LBISTSIG2  ;
    vpcl::re_register *MBISTSIG1  ;
    vpcl::re_register *MBISTSIG2  ;
    vpcl::re_register *MBISTSIG3  ;
    vpcl::re_register *MBIST1FTAG0;
    vpcl::re_register *MBIST1FTAG1;
    vpcl::re_register *MBIST1FTAG2;
    vpcl::re_register *MBIST1FTAG3;
    vpcl::re_register *MBIST1FTAG4;
    vpcl::re_register *MBIST1FTAG5;
    vpcl::re_register *MBIST1FTAG6;
    vpcl::re_register *MBIST1FTAG7;
    vpcl::re_register *MBIST2FTAG0;
    vpcl::re_register *MBIST2FTAG1;
    vpcl::re_register *MBIST2FTAG2;
    vpcl::re_register *MBIST2FTAG3;
    vpcl::re_register *MBIST2FTAG4;
    vpcl::re_register *MBIST2FTAG5;
    vpcl::re_register *MBIST2FTAG6;
    vpcl::re_register *MBIST2FTAG7;
    vpcl::re_register *MBIST3FTAG0;
    vpcl::re_register *MBIST3FTAG1;
    vpcl::re_register *MBIST3FTAG2;
    vpcl::re_register *MBIST3FTAG3;
    vpcl::re_register *MBIST3FTAG4;
    vpcl::re_register *MBIST3FTAG5;
    vpcl::re_register *MBIST3FTAG6;
    vpcl::re_register *MBIST3FTAG7;
    vpcl::re_register *MBIST1ECC0 ;
    vpcl::re_register *MBIST1ECC1 ;
    vpcl::re_register *MBIST1ECC2 ;
    vpcl::re_register *MBIST1ECC3 ;
    vpcl::re_register *MBIST1ECC4 ;
    vpcl::re_register *MBIST1ECC5 ;
    vpcl::re_register *MBIST1ECC6 ;
    vpcl::re_register *MBIST1ECC7 ;
    vpcl::re_register *MBIST2ECC0 ;
    vpcl::re_register *MBIST2ECC1 ;
    vpcl::re_register *MBIST2ECC2 ;
    vpcl::re_register *MBIST2ECC3 ;
    vpcl::re_register *MBIST2ECC4 ;
    vpcl::re_register *MBIST2ECC5 ;
    vpcl::re_register *MBIST2ECC6 ;
    vpcl::re_register *MBIST2ECC7 ;
    vpcl::re_register *MBIST3ECC0 ;
    vpcl::re_register *MBIST3ECC1 ;
    vpcl::re_register *MBIST3ECC2 ;
    vpcl::re_register *MBIST3ECC3 ;
    vpcl::re_register *MBIST3ECC4 ;
    vpcl::re_register *MBIST3ECC5 ;
    vpcl::re_register *MBIST3ECC6 ;
    vpcl::re_register *MBIST3ECC7 ;
    vpcl::re_register *BSEQ0ST    ;
    vpcl::re_register *BSEQ0STB   ;
    vpcl::re_register *BISTST     ;
    vpcl::re_register *BSEQ0SEL   ;

    #ifdef USE_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif

    uint LBISTREF1_LBISTREF1;
    uint LBISTREF2_LBISTREF2;
    uint MBISTREF1_MBISTREF1;
    uint MBISTREF2_MBISTREF2;
    uint MBISTREF3_MBISTREF3;
    uint LBISTSIG1_LBISTSIG1;
    uint LBISTSIG2_LBISTSIG2;
    uint MBISTSIG1_MBISTSIG1;
    uint MBISTSIG2_MBISTSIG2;
    uint MBISTSIG3_MBISTSIG3;
    uint MBIST1FTAG0_MBIST1FTAG0;
    uint MBIST1FTAG1_MBIST1FTAG1;
    uint MBIST1FTAG2_MBIST1FTAG2;
    uint MBIST1FTAG3_MBIST1FTAG3;
    uint MBIST1FTAG4_MBIST1FTAG4;
    uint MBIST1FTAG5_MBIST1FTAG5;
    uint MBIST1FTAG6_MBIST1FTAG6;
    uint MBIST1FTAG7_MBIST1FTAG7;
    uint MBIST2FTAG0_MBIST2FTAG0;
    uint MBIST2FTAG1_MBIST2FTAG1;
    uint MBIST2FTAG2_MBIST2FTAG2;
    uint MBIST2FTAG3_MBIST2FTAG3;
    uint MBIST2FTAG4_MBIST2FTAG4;
    uint MBIST2FTAG5_MBIST2FTAG5;
    uint MBIST2FTAG6_MBIST2FTAG6;
    uint MBIST2FTAG7_MBIST2FTAG7;
    uint MBIST3FTAG0_MBIST3FTAG0;
    uint MBIST3FTAG1_MBIST3FTAG1;
    uint MBIST3FTAG2_MBIST3FTAG2;
    uint MBIST3FTAG3_MBIST3FTAG3;
    uint MBIST3FTAG4_MBIST3FTAG4;
    uint MBIST3FTAG5_MBIST3FTAG5;
    uint MBIST3FTAG6_MBIST3FTAG6;
    uint MBIST3FTAG7_MBIST3FTAG7;
    uint MBIST1ECC0_MBIST1ECC0;
    uint MBIST1ECC1_MBIST1ECC1;
    uint MBIST1ECC2_MBIST1ECC2;
    uint MBIST1ECC3_MBIST1ECC3;
    uint MBIST1ECC4_MBIST1ECC4;
    uint MBIST1ECC5_MBIST1ECC5;
    uint MBIST1ECC6_MBIST1ECC6;
    uint MBIST1ECC7_MBIST1ECC7;
    uint MBIST2ECC0_MBIST2ECC0;
    uint MBIST2ECC1_MBIST2ECC1;
    uint MBIST2ECC2_MBIST2ECC2;
    uint MBIST2ECC3_MBIST2ECC3;
    uint MBIST2ECC4_MBIST2ECC4;
    uint MBIST2ECC5_MBIST2ECC5;
    uint MBIST2ECC6_MBIST2ECC6;
    uint MBIST2ECC7_MBIST2ECC7;
    uint MBIST3ECC0_MBIST3ECC0;
    uint MBIST3ECC1_MBIST3ECC1;
    uint MBIST3ECC2_MBIST3ECC2;
    uint MBIST3ECC3_MBIST3ECC3;
    uint MBIST3ECC4_MBIST3ECC4;
    uint MBIST3ECC5_MBIST3ECC5;
    uint MBIST3ECC6_MBIST3ECC6;
    uint MBIST3ECC7_MBIST3ECC7;
    uint BSEQ0ST_BISTEND;
    uint BSEQ0ST_CMPERR;
    uint BSEQ0STB_BISTENDB;
    uint BSEQ0STB_CMPERRB;
    uint BISTST_MBIST3ST;
    uint BISTST_MBIST2ST;
    uint BISTST_MBIST1ST;
    uint BISTST_LBIST2ST;
    uint BISTST_LBIST1ST;
    uint BSEQ0SEL_PARAMSEL;
    uint BSEQ0SEL_POSTCKSEL;
    uint BSEQ0SEL_HWTESTSET;
    uint BSEQ0SEL_HWLBISTSEL;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);


    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cbist_u2a_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cbist_u2a_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USE_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif
};
#endif //__BIST_U2A_REG_DEF_H__
