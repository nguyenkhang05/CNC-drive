// -----------------------------------------------------------------------------
// $Id: peguard_regif.h,v 1.9 2015/06/28 02:51:24 dungvannguyen Exp $
//
// Copyright(c) 2014-2015 Renesas Electronics Corporation
// Copyright(c) 2014-2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_h.skl 1.29 2014/05/09 02:57:13 sontran
//
// Input file : peguard_regif.txt
////////////////////////////////////////////////////////////////////////////////
// % ---------------------------------------------------------------------
// % $Id: peguard_regif.txt,v 1.1 2014/07/16 02:41:19 dungvannguyen
// %
// % Copyright(c) 2014 Renesas Electronics Corporation
// % Copyright(c) 2014 Renesas Design Vietnam Co., Ltd.
// % RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// % This program must be used solely for the purpose for which
// % it was furnished by Renesas Electronics Corporation. No part of this
// % program may be reproduced or disclosed to others, in any
// % form, without the prior written permission of Renesas Electronics
// % Corporation.
// % ---------------------------------------------------------------------
// %MODULE PEGUARD
// 
// %%REG_INSTANCE  reg_def 8
// 
// %REG_CHANNEL reg_def
//     %%TITLE     name        reg_name    wsize     rsize     length      offset      access      init    factor_start    factor_end      factor_step     support     callback    
//     %%REG       PEGEN       PEGEN       8|16      8|16|32   16          0x0         R           0x1     -               -               -               TRUE        -
//     %%REG       PEGDB       PEGDB       8|16      8|16|32   16          0x4         R           0x101   -               -               -               TRUE        -
//     %%REG       PEGSF       PEGSF       8|16      8|16|32   16          0x8         R           0x10    -               -               -               TRUE        -
//     %%REG       PEGSP       PEGSP       8|16      8|16|32   16          0xC         R           0x1     -               -               -               TRUE        -
//     %%REG       PEGSC       PEGSC       8|16      8|16|32   16          0x10        R           0x0     -               -               -               TRUE        -
//     %%REG       PEGGMK      PEGGMK      8|16|32   8|16|32   32          0x80        R|W         0x0     0               7               0x10            TRUE        W
//     %%REG       PEGGBA      PEGGBA      8|16|32   8|16|32   32          0x84        R|W         0x0     0               7               0x10            TRUE        W
//     %%REG       PEGGSP      PEGGSP      8|16|32   8|16|32   32          0x88        R|W         0x0     0               7               0x10            TRUE        W
// 
// %REG_NAME PEGEN
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PEG_EN      0       0       1       R       TRUE        -
//     
// %REG_NAME PEGDB
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PEG_DBAREA  8       8       1       R       TRUE        -
//     %%BIT       PEG_DBPEID  6       4       0       R       TRUE        -
//     %%BIT       PEG_DBEN    0       0       1       R       TRUE        -
// 
// %REG_NAME PEGSF
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PEG_SFPEID  6       4       1       R       TRUE        -
//     %%BIT       PEG_SFEN    0       0       0       R       TRUE        -
// 
// %REG_NAME PEGSP
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PEG_SPEN    0       0       1       R       TRUE        -
// 
// %REG_NAME PEGSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PEG_SCEN    0       0       0       R       TRUE        -
// 
// %REG_NAME PEGGMK
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       MASK        31      12      0       R|W     TRUE        W
// 
// %REG_NAME PEGGBA
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       BASE        31      12      0       R|W     TRUE        -
//     %%BIT       LOCK        4       4       0       R|W     TRUE        -
//     %%BIT       WR          2       2       0       R|W     TRUE        -
//     %%BIT       RD          1       1       0       R|W     TRUE        -
//     %%BIT       EN          0       0       0       R|W     TRUE        W
// 
// %REG_NAME PEGGSP
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       SPID        31      0       0       R|W     TRUE        W
////////////////////////////////////////////////////////////////////////////////
/// @file peguard_regif.h
/// @brief Register IF class of model PEGUARD
/// $Id: peguard_regif.h,v 1.9 2015/06/28 02:51:24 dungvannguyen Exp $
/// $Date: 2015/06/28 02:51:24 $
/// $Revison$
/// $Author: dungvannguyen $
////////////////////////////////////////////////////////////////////////////////
#ifndef __PEGUARD_REGIF_H__
#define __PEGUARD_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of PEGUARD model
class Cpeguard_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_PEGGMK = 8,
        emNUM_PEGGBA = 8,
        emNUM_PEGGSP = 8,
        emNUM_PEGGPE = 4
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
    uint mPE_ID;
    std::string mVersion;
    unsigned char mReduceRegNum;

public:
    Cpeguard_regif(std::string name, unsigned int buswidth, const unsigned int id_number, const std::string version = "G3M_V30");
    ~Cpeguard_regif();

protected:
    vpcl::re_register *PEGEN ;
    vpcl::re_register *PEGDB ;
    vpcl::re_register *PEGSF ;
    vpcl::re_register *PEGSP ;
    vpcl::re_register *PEGSC ;
    vpcl::re_register *PEGGMK[8];
    vpcl::re_register *PEGGBA[8];
    vpcl::re_register *PEGGSP[8];
    vpcl::re_register *PEGGPE[4];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_PEGEN_;
    scml2::reg<uint>      *CW_PEGDB_;
    scml2::reg<uint>      *CW_PEGSF_;
    scml2::reg<uint>      *CW_PEGSP_;
    scml2::reg<uint>      *CW_PEGSC_;
    scml2::bitfield<uint> *CW_PEGEN ;
    scml2::bitfield<uint> *CW_PEGDB ;
    scml2::bitfield<uint> *CW_PEGSF ;
    scml2::bitfield<uint> *CW_PEGSP ;
    scml2::bitfield<uint> *CW_PEGSC ;
    scml2::reg<uint>      *CW_PEGGMK[8];
    scml2::reg<uint>      *CW_PEGGBA[8];
    scml2::reg<uint>      *CW_PEGGSP[8];
    scml2::reg<uint>      *CW_PEGGPE[4];
    #endif

    uint PEGEN_PEG_EN;
    uint PEGDB_PEG_DBAREA;
    uint PEGDB_PEG_DBPEID;
    uint PEGDB_PEG_DBEN;
    uint PEGSF_PEG_SFPEID;
    uint PEGSF_PEG_SFEN;
    uint PEGSP_PEG_SPEN;
    uint PEGSC_PEG_SCEN;
    uint PEGGMK_MASK[8];
    uint PEGGBA_BASE[8];
    uint PEGGBA_LOCK[8];
    uint PEGGBA_SP0[8];
    uint PEGGBA_SP1[8];
    uint PEGGBA_SP2[8];
    uint PEGGBA_SP3[8];
    uint PEGGBA_WR[8];
    uint PEGGBA_RD[8];
    uint PEGGBA_EN[8];
    uint PEGGSP_SPID[8];
    uint PEGGPE_PE[4];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_PEGGMK_MASK(RegCBstr str) = 0;
    virtual void cb_PEGGBA_EN(RegCBstr str) = 0;
    virtual void cb_PEGGSP_SPID(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cpeguard_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cpeguard_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__PEGUARD_REG_DEF_H__
