// -----------------------------------------------------------------------------
// $Id: atu5010_timerc_sub_regif.h,v 1.0 2016/11/24 10:15:45 binhnguyen Exp $
//
// Copyright(c) 2015 Renesas Electronics Corporation
// Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : ATU5010_TIMERC_SUB_regif_old.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5010_TIMERC_SUB
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         12
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name       reg_name   wsize   rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access         init        support  callback
//     %%REG    TSCRC      TSCRC      8|16    8|16|32  16      0x22         -             -           -             -             W|R      0           TRUE     -
//     %%REG    TCRC       TCRC       8|16    8|16|32  16      0x24         -             -           -             -             W|R      0           TRUE     W
//     %%REG    TSRC       TSRC       -       8|16|32  16      0x26         -             -           -             -             R        0           TRUE     -
//     %%REG    TIORC      TIORC      8|16    8|16|32  16      0x28         -             -           -             -             W|R      0           TRUE     W
//     %%REG    TIERC      TIERC      8|16    8|16|32  16      0x34         -             -           -             -             W|R      0           TRUE     -
//     %%REG    TCNTC      TCNTC      32      8|16|32  32      0x38         -             -           -             -             W|R      0           TRUE     -
//     %%REG    CUCRC      CUCRC      32      8|16|32  32      0x3C         -             -           -             -             W|R      0xFFFFFFFF  TRUE     -
//     %%REG    GRCn       GRCn       32      8|16|32  32      0x40         0             3           -             0x4           W|R      0xFFFFFFFF  TRUE     -
//     %%REG    OCRCn      OCRCn      32      8|16|32  32      0x50         0             3           -             0x4           W|R      0xFFFFFFFF  TRUE     -
//     %%REG    RCR1C      RCR1C      8       8|16|32  8       0x60         -             -           -             -             W|R      0           TRUE     -
//     %%REG    RCR2C      RCR2C      8       8|16|32  8       0x62         -             -           -             -             W|R      0           TRUE     -
//     %%REG    NCNTCn     NCNTCn     16      8|16|32  16      0x70         0             3           -             0x4           W|R      0           TRUE     -
//     %%REG    NCRCn      NCRCn      16      8|16|32  16      0x72         0             3           -             0x4           W|R      0           TRUE     -
//     %%REG    OCMRCn     OCMRCn     -       8|16|32  32      0x80         0             3           -             0x8           R        0xFFFFFFFF  TRUE     -
//     %%REG    GMRCn      GMRCn      -       8|16|32  32      0x84         0             3           -             0x8           R        0xFFFFFFFF  TRUE     -
// 
// %REG_NAME TSCRC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    OCMFCC3     11      11      0     W|R     TRUE     -
//     %%BIT    OCMFCC2     10      10      0     W|R     TRUE     -
//     %%BIT    OCMFCC1     9       9       0     W|R     TRUE     -
//     %%BIT    OCMFCC0     8       8       0     W|R     TRUE     -
//     %%BIT    OVFCC       4       4       0     W|R     TRUE     - 
//     %%BIT    IMFCC3      3       3       0     W|R     TRUE     -
//     %%BIT    IMFCC2      2       2       0     W|R     TRUE     -
//     %%BIT    IMFCC1      1       1       0     W|R     TRUE     -
//     %%BIT    IMFCC0      0       0       0     W|R     TRUE     -
// 
// %REG_NAME TCRC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    FOCMC3      15      15      0     W|R     TRUE     -
//     %%BIT    FOCMC2      14      14      0     W|R     TRUE     -
//     %%BIT    FOCMC1      13      13      0     W|R     TRUE     -
//     %%BIT    FOCMC0      12      12      0     W|R     TRUE     -
//     %%BIT    CLRCSELC    9       9       0     W|R     TRUE     - 
//     %%BIT    CLRC        8       8       0     W|R     TRUE     - 
//     %%BIT    FCMC3       7       7       0     W|R     TRUE     -
//     %%BIT    FCMC2       6       6       0     W|R     TRUE     -
//     %%BIT    FCMC1       5       5       0     W|R     TRUE     -
//     %%BIT    FCMC0       4       4       0     W|R     TRUE     -
//     %%BIT    PWM0        3       3       0     W|R     TRUE     -
//     %%BIT    CKSELC      2       0       0     W|R     TRUE     -
// 
// %REG_NAME TSRC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    OCMFC3      11      11      0     R       TRUE     -
//     %%BIT    OCMFC2      10      10      0     R       TRUE     -
//     %%BIT    OCMFC1      9       9       0     R       TRUE     -
//     %%BIT    OCMFC0      8       8       0     R       TRUE     -
//     %%BIT    OVFC        4       4       0     R       TRUE     - 
//     %%BIT    IMFC3       3       3       0     R       TRUE     -
//     %%BIT    IMFC2       2       2       0     R       TRUE     -
//     %%BIT    IMFC1       1       1       0     R       TRUE     -
//     %%BIT    IMFC0       0       0       0     R       TRUE     -
// 
// %REG_NAME TIORC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    IOC3      15      12      0     W|R     TRUE     W
//     %%BIT    IOC2      11      8       0     W|R     TRUE     -
//     %%BIT    IOC1      7       4       0     W|R     TRUE     -
//     %%BIT    IOC0      3       0       0     W|R     TRUE     -
// 
// %REG_NAME TIERC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    OCRCE3      11      11      0     W|R     TRUE     -
//     %%BIT    OCRCE2      10      10      0     W|R     TRUE     -
//     %%BIT    OCRCE1      9       9       0     W|R     TRUE     -
//     %%BIT    OCRCE0      8       8       0     W|R     TRUE     -
//     %%BIT    OVCE        4       4       0     W|R     TRUE     - 
//     %%BIT    GRCE3       3       3       0     W|R     TRUE     -
//     %%BIT    GRCE2       2       2       0     W|R     TRUE     -
//     %%BIT    GRCE1       1       1       0     W|R     TRUE     -
//     %%BIT    GRCE0       0       0       0     W|R     TRUE     -
// 
// %REG_NAME TCNTC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CNTC        31      0      0      W|R     TRUE     W
// 
//  %REG_NAME CUCRC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CUCRC       31      0   0xFFFFFFFF  W|R     TRUE     -
// 
// %REG_NAME GRCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    GRC         31      0   0xFFFFFFFF  W|R     TRUE     -
// 
// %REG_NAME OCRCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    OCR        31      0  0xFFFFFFFF  W|R     TRUE     -
// 
// %REG_NAME RCR1C
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RCR1C       4       0      0     W|R      TRUE     -
// 
// %REG_NAME RCR2C
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RCR2C       4       0      0     W|R      TRUE     -
// 
// %REG_NAME NCNTCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    NCNTC       15      0     0      W|R     TRUE      -
// 
// %REG_NAME NCRCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    NCRC        15      0     0      W|R     TRUE     -
// 
// %REG_NAME OCMRCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    OCMRC       31      0  0xFFFFFFFF  R     TRUE     -
// 
// %REG_NAME GMRCn
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    GMRC        31      0  0xFFFFFFFF  R     TRUE     -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timerc_sub_regif.h
/// @brief Register IF class of model ATU5010_TIMERC_SUB
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ATU5010_TIMERC_SUB_REGIF_H__
#define __ATU5010_TIMERC_SUB_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ATU5010_TIMERC_SUB model
class Catu5010_timerc_sub_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_GRCn   = 4,
        emNUM_OCRCn  = 4,
        emNUM_NCNTCn = 4,
        emNUM_NCRCn  = 4,
        emNUM_OCMRCn = 4,
        emNUM_GMRCn  = 4
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Catu5010_timerc_sub_regif(std::string name, uint buswidth, uint sub_no);
    ~Catu5010_timerc_sub_regif();

protected:
    vpcl::re_register *TSCRC ;
    vpcl::re_register *TCRC  ;
    vpcl::re_register *TSRC  ;
    vpcl::re_register *TIORC ;
    vpcl::re_register *TIERC ;
    vpcl::re_register *TCNTC ;
    vpcl::re_register *CUCRC ;
    vpcl::re_register *GRCn  [4];
    vpcl::re_register *OCRCn [4];
    vpcl::re_register *RCR1C ;
    vpcl::re_register *RCR2C ;
    vpcl::re_register *NCNTCn[4];
    vpcl::re_register *NCRCn [4];
    vpcl::re_register *OCMRCn[4];
    vpcl::re_register *GMRCn [4];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_TSCRC_;
    scml2::reg<uint>      *CW_TCRC_TSRC;
    scml2::reg<uint>      *CW_TIORC_;
    scml2::reg<uint>      *CW_TIERC_;
    scml2::reg<uint>      *CW_RCR1C_RCR2C;
    scml2::reg<uint>      *CW_NCNTCn_0_NCRCn_0;
    scml2::reg<uint>      *CW_NCNTCn_1_NCRCn_1;
    scml2::reg<uint>      *CW_NCNTCn_2_NCRCn_2;
    scml2::reg<uint>      *CW_NCNTCn_3_NCRCn_3;
    scml2::bitfield<uint> *CW_TSCRC ;
    scml2::bitfield<uint> *CW_TCRC  ;
    scml2::bitfield<uint> *CW_TSRC  ;
    scml2::bitfield<uint> *CW_TIORC ;
    scml2::bitfield<uint> *CW_TIERC ;
    scml2::reg<uint>      *CW_TCNTC ;
    scml2::reg<uint>      *CW_CUCRC ;
    scml2::reg<uint>      *CW_GRCn  [4];
    scml2::reg<uint>      *CW_OCRCn [4];
    scml2::bitfield<uint> *CW_RCR1C ;
    scml2::bitfield<uint> *CW_RCR2C ;
    scml2::bitfield<uint> *CW_NCNTCn[4];
    scml2::bitfield<uint> *CW_NCRCn [4];
    scml2::reg<uint>      *CW_OCMRCn[4];
    scml2::reg<uint>      *CW_GMRCn [4];
    #endif

    uint TSCRC_OCMFCC3;
    uint TSCRC_OCMFCC2;
    uint TSCRC_OCMFCC1;
    uint TSCRC_OCMFCC0;
    uint TSCRC_OVFCC;
    uint TSCRC_IMFCC3;
    uint TSCRC_IMFCC2;
    uint TSCRC_IMFCC1;
    uint TSCRC_IMFCC0;
    uint TCRC_FOCMC3;
    uint TCRC_FOCMC2;
    uint TCRC_FOCMC1;
    uint TCRC_FOCMC0;
    uint TCRC_CLRCSELC;
    uint TCRC_CLRC;
    uint TCRC_FCMC3;
    uint TCRC_FCMC2;
    uint TCRC_FCMC1;
    uint TCRC_FCMC0;
    uint TCRC_PWM0;
    uint TCRC_CKSELC;
    uint TSRC_OCMFC3;
    uint TSRC_OCMFC2;
    uint TSRC_OCMFC1;
    uint TSRC_OCMFC0;
    uint TSRC_OVFC;
    uint TSRC_IMFC3;
    uint TSRC_IMFC2;
    uint TSRC_IMFC1;
    uint TSRC_IMFC0;
    uint TIORC_IOC3;
    uint TIORC_IOC2;
    uint TIORC_IOC1;
    uint TIORC_IOC0;
    uint TIERC_OCRCE3;
    uint TIERC_OCRCE2;
    uint TIERC_OCRCE1;
    uint TIERC_OCRCE0;
    uint TIERC_OVCE;
    uint TIERC_GRCE3;
    uint TIERC_GRCE2;
    uint TIERC_GRCE1;
    uint TIERC_GRCE0;
    uint TCNTC_CNTC;
    uint CUCRC_CUCRC;
    uint GRCn_GRC [4];
    uint OCRCn_OCR[4];
    uint RCR1C_RCR1C;
    uint RCR2C_RCR2C;
    uint NCNTCn_NCNTC[4];
    uint NCRCn_NCRC[4];
    uint OCMRCn_OCMRC[4];
    uint GMRCn_GMRC[4];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_TIORC_IOC3(RegCBstr str) = 0;
    virtual void cb_TCNTC_CNTC(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Catu5010_timerc_sub_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Catu5010_timerc_sub_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ATU5010_TIMERC_SUB_REG_DEF_H__
