// -----------------------------------------------------------------------------
// $Id: hwcore_iir_regif.h,v 1.3 2020/11/12 16:43:32 minhquocha Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_iir_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_IIR
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         11
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name         reg_name     size    wsize    rsize      length  offset  factor_start  factor_end  factor_index  factor_step  access init        support callback
//     %%REG    IIRCTR       IIRCTR       8       8        8|16|32    8       0x5C0   0             2           -             0x01         W|R    0x00        TRUE    -
//     %%REG    IIRINIT      IIRINIT      8       8        8|16|32    8       0x5C4   -             -           -             -            W|R    0x00        TRUE    W
//     %%REG    IIRSFT       IIRSFT       8       8        8|16|32    8       0x5C8   -             -           -             -            W|R    0x00        TRUE    W
//     %%REG    IIRRLD       IIRRLD       8       8        8|16|32    8       0x5CC   -             -           -             -            W|R    0x00        TRUE    W
//     %%REG    IIRRSL       IIRRSL       8       8        8|16|32    8       0x5CD   -             -           -             -            W|R    0x00        TRUE    W
//     %%REG    IIRSTAT      IIRSTAT      8       -        8|16|32    8       0x5CE   -             -           -             -              R    0x00        TRUE    -
//     %%REG    IIRSTATC     IIRSTATC     8       8        8|16|32    8       0x5CF   -             -           -             -            R:0|W  0x00        TRUE    -
//     %%REG    IIRICOEF     IIRICOEF     32      32       8|16|32    32      0x5D0   -             -           -             -            W|R    0x00000000  TRUE    -
//     %%REG    IIRCOEF      IIRCOEF      16      16       8|16|32    16      0x5D4   0             4           -             0x02         W|R    0x0000      TRUE    -
//     %%REG    IIROCOEF     IIROCOEF     32      32       8|16|32    32      0x5E8   -             -           -             -            W|R    0x00000000  TRUE    -
//     %%REG    IIRSFTDAT    IIRSFTDAT    32      32       8|16|32    32      0x5F0   0             2           -             0x04         W|R    0x00000000  TRUE    -
//     %%REG    IIRZN1DAT    IIRZN1DAT    32      32       8|16|32    32      0x5FC   0             2           -             0x04         W|R    0x00000000  TRUE    -
//     %%REG    IIRZN2DAT    IIRZN2DAT    32      32       8|16|32    32      0x608   0             2           -             0x04         W|R    0x00000000  TRUE    -
//     %%REG    IIROUTDAT    IIROUTDAT    32      -        8|16|32    32      0x614   0             2           -             0x04           R    0x00000000  TRUE    -
// 
// %REG_NAME IIRCTR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATSEL      7      4      0     W|R     TRUE     -
//     %%BIT    TRGSEL      3      0      0     W|R     TRUE     -
// 
// %REG_NAME IIRINIT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    INIT2       2      2      0     W|R     TRUE     -
//     %%BIT    INIT1       1      1      0     W|R     TRUE     -
//     %%BIT    INIT0       0      0      0     W|R     TRUE     W
// 
// %REG_NAME IIRSFT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    TRG         4      4      0     W|R     TRUE     W
//     %%BIT    TRGSEL      1      0      0     W|R     TRUE     -
// 
// %REG_NAME IIRRLD
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RLD2        2      2      0     W|R     TRUE     -
//     %%BIT    RLD1        1      1      0     W|R     TRUE     -
//     %%BIT    RLD0        0      0      0     W|R     TRUE     W
// 
// %REG_NAME IIRRSL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RSL         1      0      0     W|R     TRUE     W
// 
// %REG_NAME IIRSTAT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    STAT2       2      2      0       R     TRUE     -
//     %%BIT    STAT1       1      1      0       R     TRUE     -
//     %%BIT    STAT0       0      0      0       R     TRUE     -
// 
// %REG_NAME IIRSTATC
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    STATC2      2      2      0     R:0|W   TRUE     -
//     %%BIT    STATC1      1      1      0     R:0|W   TRUE     -
//     %%BIT    STATC0      0      0      0     R:0|W   TRUE     -
// 
// %REG_NAME IIRICOEF
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IIRCOEF
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        15     0      0     W|R     TRUE     -
// 
// %REG_NAME IIROCOEF
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IIRSFTDAT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IIRZN1DAT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IIRZN2DAT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IIROUTDAT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    DATA        31     0      0       R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_iir_regif.h
/// @brief Register IF class of model HWCORE_IIR
/// $Id: hwcore_iir_regif.h,v 1.3 2020/11/12 16:43:32 minhquocha Exp $
/// $Date: 2020/11/12 16:43:32 $
/// $Revison$
/// $Author: minhquocha $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_IIR_REGIF_H__
#define __HWCORE_IIR_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_IIR model
class Chwcore_iir_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_IIRCTR    = 3,
        emNUM_IIRCOEF   = 5,
        emNUM_IIRSFTDAT = 3,
        emNUM_IIRZN1DAT = 3,
        emNUM_IIRZN2DAT = 3,
        emNUM_IIROUTDAT = 3
    }; ///< Enumeration for register factor index
#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_iir_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_iir_regif(std::string name, uint buswidth);
    ~Chwcore_iir_regif();

protected:
    vpcl::re_register *IIRCTR   [3];
    vpcl::re_register *IIRINIT  ;
    vpcl::re_register *IIRSFT   ;
    vpcl::re_register *IIRRLD   ;
    vpcl::re_register *IIRRSL   ;
    vpcl::re_register *IIRSTAT  ;
    vpcl::re_register *IIRSTATC ;
    vpcl::re_register *IIRICOEF ;
    vpcl::re_register *IIRCOEF  [5];
    vpcl::re_register *IIROCOEF ;
    vpcl::re_register *IIRSFTDAT[3];
    vpcl::re_register *IIRZN1DAT[3];
    vpcl::re_register *IIRZN2DAT[3];
    vpcl::re_register *IIROUTDAT[3];

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_IIRINIT_INIT0(RegCBstr str) = 0;
    virtual void cb_IIRSFT_TRG(RegCBstr str) = 0;
    virtual void cb_IIRRLD_RLD0(RegCBstr str) = 0;
    virtual void cb_IIRRSL_RSL(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_iir_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_iir_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_iir_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_iir_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_IIR_REGIF_H__
