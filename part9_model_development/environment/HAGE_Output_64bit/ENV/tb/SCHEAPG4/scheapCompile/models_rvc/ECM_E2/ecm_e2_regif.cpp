// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2018 Renesas Electronics Corporation
// Copyright(c) 2010-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : ecm_e2_regif.txt
////////////////////////////////////////////////////////////////////////////////
// ## ----------------------------------------------------------------------
// ## $Id: $
// ##
// ## Copyright(c) 2015 Renesas System Design Co., Ltd.
// ## Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// ## RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// ## This program must be used solely for the purpose for which
// ## it was furnished by Renesas Electronics Corporation. No part of this
// ## program may be reproduced or disclosed to others, in any
// ## form, without the prior written permission of Renesas Electronics
// ## Corporation.
// ## ----------------------------------------------------------------------
// 
// %MODULE ECM_E2 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  10
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name         reg_name       size       wsize      length  offset    factor_start factor_end  factor_step access  init     support  callback
//     %%REG      ECMmESET     ECMmESET       8|16|32    8           8       0x000      -           -           -           W       0        TRUE     -
//     %%REG      ECMmECLR     ECMmECLR       8|16|32    8           8       0x004      -           -           -           W       0        TRUE     -
//     %%REG      ECMmESSTR0   ECMmESSTR0     8|16|32    32          32      0x008      -           -           -           R       0        TRUE     -
//     %%REG      ECMmESSTR    ECMmESSTR      8|16|32    32          32      0x00C      1           8           0x4         R       0        TRUE     -
//     %%REG      ECMmESSTR9   ECMmESSTR9     8|16|32    32          32      0x02C      -           -           -           R       0        TRUE     -
//                                                                   
//     %%REG      ECMEPCFG     ECMEPCFG       8|16|32    8           8       0x100      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMMICFG0    ECMMICFG0      8|16|32    32          32      0x104      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMMICFG     ECMMICFG       8|16|32    32          32      0x108      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMMICFG9    ECMMICFG9      8|16|32    32          32      0x128      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMNMICFG0   ECMNMICFG0     8|16|32    32          32      0x12C      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMNMICFG    ECMNMICFG      8|16|32    32          32      0x130      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMNMICFG9   ECMNMICFG9     8|16|32    32          32      0x150      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMIRCFG0    ECMIRCFG0      8|16|32    32          32      0x154      -           -           -           R|W     0x10000        TRUE     -
//     %%REG      ECMIRCFG     ECMIRCFG       8|16|32    32          32      0x158      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMIRCFG9    ECMIRCFG9      8|16|32    32          32      0x178      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMEMK0      ECMEMK0        8|16|32    32          32      0x17C      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMEMK       ECMEMK         8|16|32    32          32      0x180      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMEMK9      ECMEMK9        8|16|32    32          32      0x1A0      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMESSTC0    ECMESSTC0      8|16|32    32          32      0x1A4      -           -           -           W       0        TRUE     -
//     %%REG      ECMESSTC     ECMESSTC       8|16|32    32          32      0x1A8      1           8           0x4         W       0        TRUE     -
//     %%REG      ECMESSTC9    ECMESSTC9      8|16|32    32          32      0x1C8      -           -           -           W       0        TRUE     -
//     %%REG      ECMKCPROT    ECMKCPROT      8|16|32    32          32      0x1CC      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMPE0       ECMPE0         8|16|32    32          32      0x1D0      -           -           -           W       0        TRUE     -
//     %%REG      ECMPE        ECMPE          8|16|32    32          32      0x1D4      1           8           0x4         W       0        TRUE     -
//     %%REG      ECMPE9       ECMPE9         8|16|32    32          32      0x1F4      -           -           -           W       0        TRUE     -
//     %%REG      ECMDTMCTL    ECMDTMCTL      8|16|32    8           8       0x1F8      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMDTMR      ECMDTMR        8|16|32    16          16      0x1FC      -           -           -           R       0        TRUE     -
//     %%REG      ECMDTMCMP    ECMDTMCMP      8|16|32    32          32      0x200      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMMIDTMCFG0 ECMMIDTMCFG0   8|16|32    32          32      0x204      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMMIDTMCFG  ECMMIDTMCFG    8|16|32    32          32      0x208      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMMIDTMCFG9 ECMMIDTMCFG9   8|16|32    32          32      0x228      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMNMIDTMCFG0 ECMNMIDTMCFG0 8|16|32    32          32      0x22C      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMNMIDTMCFG  ECMNMIDTMCFG  8|16|32    32          32      0x230      1           8           0x4         R|W     0        TRUE     -
//     %%REG      ECMNMIDTMCFG9 ECMNMIDTMCFG9 8|16|32    32          32      0x250      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMEOCCFG    ECMEOCCFG      8|16|32    32          32      0x254      -           -           -           R|W     0        TRUE     -
//     %%REG      ECMPEM       ECMPEM         8|16|32    32          32      0x258      -           -           -           R|W     0        TRUE     -
// 
// %REG_NAME ECMmESET      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmEST        0      0      0     W1       TRUE     W   
// 
// %REG_NAME ECMmECLR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmECT        0      0      0     W1       TRUE     W   
// 
// %REG_NAME ECMmESSTR0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE031    31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE030    30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE029    29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE028    28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE027    27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE026    26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE025    25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE024    24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE023    23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE022    22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE021    21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE020    20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE019    19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE018    18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE017    17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE016    16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE01514  15     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE01312  13     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE01110  11     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE00908  9      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE00706  7      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE00504  5      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE00302  3      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE00100  1      0      0     R       TRUE     -    
//     
// %REG_NAME ECMmESSTR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE31      31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE30      30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE29      29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE28      28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE27      27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE26      26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE25      25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE24      24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE23      23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE22      22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE21      21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE20      20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE19      19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE18      18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE17      17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE16      16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE15      15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE14      14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE13      13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE12      12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE11      11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE10      10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE09      9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE08      8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE07      7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE06      6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE05      5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE04      4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE03      3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE02      2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE01      1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE00      0      0      0     R       TRUE     -    
// 
// %REG_NAME ECMmESSTR9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE931      31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE930      30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE929      29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE928      28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE927      27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE926      26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE925      25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE924      24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE923      23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE922      22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE921      21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE920      20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE919      19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE918      18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE917      17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE916      16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE915      15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE914      14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE913      13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE912      12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE911      11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE910      10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE909      9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE908      8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE907      7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE906      6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE905      5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE904      4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE903      3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE902      2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE901      1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE900      0      0      0     R       TRUE     -    
// 
// %REG_NAME ECMEPCFG      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMSL0         0      0      0     R|W     TRUE     -   
// 
// %REG_NAME ECMMICFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMMIE030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMMIE029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMMIE028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMMIE027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMMIE026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMMIE025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMMIE024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMMIE023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMMIE022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMMIE021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMMIE020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMMIE019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMMIE018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMMIE017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMMIE016    16     16     0     R|W       TRUE     -    
//     %%BIT    ECMMIE01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMMIE01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMMIE01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMMIE00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMMIE00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMMIE00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMMIE00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMMIE00100  1      0      0     R|W       TRUE     -    
//     
// %REG_NAME ECMMICFG       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMMIE00     0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMMICFG9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE928     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMMIE927     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMMIE926     26     26     0     R       TRUE     -    
//     %%BIT    ECMMIE925     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMMIE924     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMMIE923     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMMIE922     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMMIE921     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMMIE920     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMMIE919     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMMIE918     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMMIE917     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMMIE916     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMMIE915     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMMIE914     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMMIE913     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMMIE912     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMMIE911     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMMIE910     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMMIE909     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMMIE908     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMMIE907     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMMIE906     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMMIE905     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMMIE904     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMMIE903     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMMIE902     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMMIE901     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMMIE900     0      0      0     R|W     TRUE     -    
// 
// 
// %REG_NAME ECMNMICFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE016    16     16     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMNMIE00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMNMIE00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMNMIE00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMNMIE00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMNMIE00100  1      0      0     R|W       TRUE     -    
//     
// %REG_NAME ECMNMICFG       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE00     0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMNMICFG9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE928     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE927     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE926     26     26     0     R       TRUE     -    
//     %%BIT    ECMNMIE925     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE924     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE923     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE922     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE921     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE920     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE919     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE918     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE917     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE916     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE915     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE914     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE913     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE912     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE911     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE910     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE909     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE908     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE907     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE906     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE905     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE904     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE903     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE902     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE901     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE900     0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMIRCFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMIRE030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMIRE029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMIRE028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMIRE027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMIRE026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMIRE025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMIRE024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMIRE023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMIRE022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMIRE021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMIRE020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMIRE019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMIRE018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMIRE017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMIRE016    16     16     1     R|W       TRUE     -    
//     %%BIT    ECMIRE01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMIRE01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMIRE01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMIRE00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMIRE00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMIRE00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMIRE00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMIRE00100  1      0      0     R|W       TRUE     -    
//     
// %REG_NAME ECMIRCFG       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE31      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIRE30      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIRE29      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE28      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE27      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE26      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIRE25      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE24      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE23      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE22      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE21      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE20      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE19      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE18      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE17      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE16      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE15      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE14      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE13      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE12      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE11      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE10      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE09      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE08      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE07      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE06      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE05      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE04      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE03      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE02      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE01      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE00      0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMIRCFG9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE929      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE928      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE927      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE926      26     26     0     R       TRUE     -    
//     %%BIT    ECMIRE925      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE924      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE923      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE922      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE921      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE920      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE919      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE918      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE917      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE916      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE915      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE914      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE913      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE912      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE911      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE910      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE909      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE908      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE907      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE906      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE905      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE904      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE903      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE902      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE901      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE900      0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMEMK0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMEMK030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMEMK029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMEMK028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMEMK027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMEMK026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMEMK025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMEMK024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMEMK023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMEMK022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMEMK021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMEMK020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMEMK019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMEMK018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMEMK017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMEMK016    16     16     0     R|W       TRUE     -    
//     %%BIT    ECMEMK01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMEMK01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMEMK01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMEMK00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMEMK00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMEMK00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMEMK00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMEMK00100  1      0      0     R|W       TRUE     W    
//     
// %REG_NAME ECMEMK       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK31      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMEMK30      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMEMK29      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK28      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK27      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK26      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMEMK25      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK24      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK23      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK22      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK21      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK20      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK19      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK18      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK17      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK16      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK15      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK14      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK13      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK12      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK11      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK10      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK09      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK08      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK07      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK06      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK05      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK04      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK03      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK02      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK01      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK00      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMEMK9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK931      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMEMK930      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMEMK929      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK928      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK927      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK926      26     26     0     R       TRUE     -    
//     %%BIT    ECMEMK925      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK924      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK923      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK922      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK921      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK920      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK919      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK918      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK917      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK916      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK915      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK914      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK913      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK912      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK911      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK910      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK909      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK908      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK907      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK906      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK905      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK904      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK903      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK902      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK901      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK900      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMESSTC0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE031    31     31     0     W         TRUE     -    
//     %%BIT    ECMCLSSE030    30     30     0     W         TRUE     -    
//     %%BIT    ECMCLSSE029    29     29     0     W         TRUE     -    
//     %%BIT    ECMCLSSE028    28     28     0     W         TRUE     -    
//     %%BIT    ECMCLSSE027    27     27     0     W         TRUE     -    
//     %%BIT    ECMCLSSE026    26     26     0     W         TRUE     -    
//     %%BIT    ECMCLSSE025    25     25     0     W         TRUE     -    
//     %%BIT    ECMCLSSE024    24     24     0     W         TRUE     -    
//     %%BIT    ECMCLSSE023    23     23     0     W         TRUE     -    
//     %%BIT    ECMCLSSE022    22     22     0     W         TRUE     -    
//     %%BIT    ECMCLSSE021    21     21     0     W         TRUE     -    
//     %%BIT    ECMCLSSE020    20     20     0     W         TRUE     -    
//     %%BIT    ECMCLSSE019    19     19     0     W         TRUE     -    
//     %%BIT    ECMCLSSE018    18     18     0     W         TRUE     -    
//     %%BIT    ECMCLSSE017    17     17     0     W         TRUE     -    
//     %%BIT    ECMCLSSE016    16     16     0     W         TRUE     -    
//     %%BIT    ECMCLSSE01514  15     14     0     W         TRUE     -    
//     %%BIT    ECMCLSSE01312  13     12     0     W         TRUE     -    
//     %%BIT    ECMCLSSE01110  11     10     0     W         TRUE     -    
//     %%BIT    ECMCLSSE00908  9      8      0     W         TRUE     -    
//     %%BIT    ECMCLSSE00706  7      6      0     W         TRUE     -    
//     %%BIT    ECMCLSSE00504  5      4      0     W         TRUE     -    
//     %%BIT    ECMCLSSE00302  3      2      0     W         TRUE     -    
//     %%BIT    ECMCLSSE00100  1      0      0     W         TRUE     W    
//     
// %REG_NAME ECMESSTC       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE31    31     31     0     W       TRUE     -    
//     %%BIT    ECMCLSSE30    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE29    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE28    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE27    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE26    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE25    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE24    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE23    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE22    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE21    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE20    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE19    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE18    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE17    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE16    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE15    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE14    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE13    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE12    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE11    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE10    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE09    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE08    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE07    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE06    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE05    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE04    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE03    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE02    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE01    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE00    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMESSTC9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE930    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE929    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE928    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE927    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE926    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE925    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE924    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE923    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE922    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE921    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE920    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE919    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE918    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE917    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE916    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE915    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE914    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE913    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE912    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE911    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE910    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE909    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE908    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE907    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE906    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE905    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE904    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE903    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE902    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE901    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE900    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMKCPROT
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    KCPROT         31     1      0     W       TRUE     -    
//     %%BIT    KCE            0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMPE0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE031    31     31     0     W         TRUE     -    
//     %%BIT    ECMPE030    30     30     0     W         TRUE     -    
//     %%BIT    ECMPE029    29     29     0     W         TRUE     -    
//     %%BIT    ECMPE028    28     28     0     W         TRUE     -    
//     %%BIT    ECMPE027    27     27     0     W         TRUE     -    
//     %%BIT    ECMPE026    26     26     0     W         TRUE     -    
//     %%BIT    ECMPE025    25     25     0     W         TRUE     -    
//     %%BIT    ECMPE024    24     24     0     W         TRUE     -    
//     %%BIT    ECMPE023    23     23     0     W         TRUE     -    
//     %%BIT    ECMPE022    22     22     0     W         TRUE     -    
//     %%BIT    ECMPE021    21     21     0     W         TRUE     -    
//     %%BIT    ECMPE020    20     20     0     W         TRUE     -    
//     %%BIT    ECMPE019    19     19     0     W         TRUE     -    
//     %%BIT    ECMPE018    18     18     0     W         TRUE     -    
//     %%BIT    ECMPE017    17     17     0     W         TRUE     -    
//     %%BIT    ECMPE016    16     16     0     W         TRUE     -    
//     %%BIT    ECMPE01514  15     14     0     W         TRUE     -    
//     %%BIT    ECMPE01312  13     12     0     W         TRUE     -    
//     %%BIT    ECMPE01110  11     10     0     W         TRUE     -    
//     %%BIT    ECMPE00908  9      8      0     W         TRUE     -    
//     %%BIT    ECMPE00706  7      6      0     W         TRUE     -    
//     %%BIT    ECMPE00504  5      4      0     W         TRUE     -    
//     %%BIT    ECMPE00302  3      2      0     W         TRUE     -    
//     %%BIT    ECMPE00100  1      0      0     W         TRUE     W    
//     
// %REG_NAME ECMPE       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE31       31     31     0     W       TRUE     -    
//     %%BIT    ECMPE30       30     30     0     W       TRUE     -    
//     %%BIT    ECMPE29       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE28       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE27       27     27     0     W       TRUE     -    
//     %%BIT    ECMPE26       26     26     0     W       TRUE     -    
//     %%BIT    ECMPE25       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE24       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE23       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE22       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE21       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE20       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE19       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE18       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE17       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE16       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE15       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE14       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE13       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE12       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE11       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE10       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE09       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE08       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE07       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE06       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE05       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE04       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE03       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE02       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE01       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMPE9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE929       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE928       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE927       27     27     0     R       TRUE     -    
//     %%BIT    ECMPE926       26     26     0     R       TRUE     -    
//     %%BIT    ECMPE925       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE924       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE923       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE922       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE921       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE920       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE919       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE918       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE917       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE916       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE915       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE914       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE913       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE912       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE911       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE910       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE909       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE908       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE907       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE906       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE905       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE904       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE903       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE902       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE901       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE900       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCTL      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    DTMSTACNTCLK   4      4      0     R       TRUE     -    
//     %%BIT    DTMSTP         1      1      0     W       TRUE     W    
//     %%BIT    DTMSTA         0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMDTMR      
//     %%TITLE  name           upper  lower  init  access  support  callback callbackDBG
//     %%BIT    ECMDTMR        15     0      0     R       TRUE     R        R
// 
// %REG_NAME ECMDTMCMP      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    CMPW           16     16     0     R       TRUE     -    
//     %%BIT    ECMDTMCMP      15     0      0     R|W     TRUE     W    
// 
// 
// %REG_NAME ECMMIDTMCFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMITE031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMMITE030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMMITE029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMMITE028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMMITE027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMMITE026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMMITE025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMMITE024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMMITE023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMMITE022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMMITE021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMMITE020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMMITE019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMMITE018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMMITE017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMMITE016    16     16     0     R|W       TRUE     -    
//     %%BIT    ECMMITE01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMMITE01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMMITE01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMMITE00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMMITE00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMMITE00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMMITE00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMMITE00100  1      0      0     R|W       TRUE     -    
//     
// %REG_NAME ECMMIDTMCFG       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMITE31       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMMITE30       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMMITE29       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMMITE28       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMMITE27       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMMITE26       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMMITE25       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMMITE24       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMMITE23       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMMITE22       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMMITE21       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMMITE20       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMMITE19       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMMITE18       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMMITE17       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMMITE16       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMMITE15       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMMITE14       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMMITE13       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMMITE12       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMMITE11       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMMITE10       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMMITE09       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMMITE08       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMMITE07       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMMITE06       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMMITE05       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMMITE04       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMMITE03       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMMITE02       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMMITE01       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMMITE00       0      0       0     R|W     TRUE     -    
// 
// %REG_NAME ECMMIDTMCFG9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMITE928       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMMITE927       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMMITE926       26     26      0     R       TRUE     -    
//     %%BIT    ECMMITE925       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMMITE924       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMMITE923       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMMITE922       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMMITE921       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMMITE920       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMMITE919       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMMITE918       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMMITE917       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMMITE916       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMMITE915       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMMITE914       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMMITE913       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMMITE912       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMMITE911       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMMITE910       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMMITE909       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMMITE908       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMMITE907       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMMITE906       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMMITE905       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMMITE904       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMMITE903       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMMITE902       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMMITE901       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMMITE900       0      0       0     R|W     TRUE     -    
// 
// %REG_NAME ECMNMIDTMCFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMITE031    31     31     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE030    30     30     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE029    29     29     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE028    28     28     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE027    27     27     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE026    26     26     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE025    25     25     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE024    24     24     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE023    23     23     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE022    22     22     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE021    21     21     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE020    20     20     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE019    19     19     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE018    18     18     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE017    17     17     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE016    16     16     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE01514  15     14     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE01312  13     12     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE01110  11     10     0     R|W       TRUE     -    
//     %%BIT    ECMNMITE00908  9      8      0     R|W       TRUE     -    
//     %%BIT    ECMNMITE00706  7      6      0     R|W       TRUE     -    
//     %%BIT    ECMNMITE00504  5      4      0     R|W       TRUE     -    
//     %%BIT    ECMNMITE00302  3      2      0     R|W       TRUE     -    
//     %%BIT    ECMNMITE00100  1      0      0     R|W       TRUE     -    
//     
// %REG_NAME ECMNMIDTMCFG       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMITE31       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE30       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE29       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE28       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE27       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE26       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE25       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE24       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE23       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE22       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE21       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE20       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE19       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE18       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE17       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE16       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE15       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE14       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE13       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE12       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE11       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE10       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE09       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE08       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE07       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE06       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE05       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE04       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE03       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE02       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE01       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE00       0      0       0     R|W     TRUE     -    
// 
// %REG_NAME ECMNMIDTMCFG9      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMITE928       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE927       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE926       26     26      0     R       TRUE     -    
//     %%BIT    ECMNMITE925       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE924       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE923       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE922       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE921       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE920       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE919       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE918       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE917       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE916       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE915       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE914       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE913       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE912       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE911       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE910       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMNMITE909       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE908       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE907       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE906       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE905       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE904       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE903       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE902       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE901       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMNMITE900       0      0       0     R|W     TRUE     -    
// 
// %REG_NAME ECMEOCCFG        
//     %%TITLE  name               upper  lower   init  access  support  callback    
//     %%BIT    EOCIEN             31     31      0     R|W     TRUE     -    
//     %%BIT    CMPW               16     16      0     R       TRUE     -    
//     %%BIT    ECMEOUTCLRT        15     0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMPEM        
//     %%TITLE  name               upper  lower   init  access  support  callback    
//     %%BIT    MSKM               1      1       0     R|W     TRUE     -    
//     %%BIT    MSKC               0      0       0     R|W     TRUE     W    
////////////////////////////////////////////////////////////////////////////////
/// @file ecm_e2_regif.cpp
/// @brief Register IF class of model ECM_E2
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "ecm_e2_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cecm_e2_regif::Cecm_e2_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0x25C)
    #endif
{
    uint FactorIndex_ECMmESSTR_tmp[emNUM_ECMmESSTR] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMMICFG_tmp[emNUM_ECMMICFG] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMNMICFG_tmp[emNUM_ECMNMICFG] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMIRCFG_tmp[emNUM_ECMIRCFG] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMEMK_tmp[emNUM_ECMEMK] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMESSTC_tmp[emNUM_ECMESSTC] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMPE_tmp[emNUM_ECMPE] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMMIDTMCFG_tmp[emNUM_ECMMIDTMCFG] = {   1,   2,   3,   4,   5,   6,   7,   8};
    uint FactorIndex_ECMNMIDTMCFG_tmp[emNUM_ECMNMIDTMCFG] = {   1,   2,   3,   4,   5,   6,   7,   8};
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        mFactorIndexECMmESSTR[i] = FactorIndex_ECMmESSTR_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMMICFG; i++) {
        mFactorIndexECMMICFG[i] = FactorIndex_ECMMICFG_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMNMICFG; i++) {
        mFactorIndexECMNMICFG[i] = FactorIndex_ECMNMICFG_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        mFactorIndexECMIRCFG[i] = FactorIndex_ECMIRCFG_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        mFactorIndexECMEMK[i] = FactorIndex_ECMEMK_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        mFactorIndexECMESSTC[i] = FactorIndex_ECMESSTC_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        mFactorIndexECMPE[i] = FactorIndex_ECMPE_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMMIDTMCFG; i++) {
        mFactorIndexECMMIDTMCFG[i] = FactorIndex_ECMMIDTMCFG_tmp[i];
    }
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG; i++) {
        mFactorIndexECMNMIDTMCFG[i] = FactorIndex_ECMNMIDTMCFG_tmp[i];
    }

    CommandInit();
    ECMmESET      = new vpcl::re_register(0x0000, this, "ECMmESET"     , name.c_str());
    ECMmECLR      = new vpcl::re_register(0x0004, this, "ECMmECLR"     , name.c_str());
    ECMmESSTR0    = new vpcl::re_register(0x0008, this, "ECMmESSTR0"   , name.c_str());
    ECMmESSTR9    = new vpcl::re_register(0x002C, this, "ECMmESSTR9"   , name.c_str());
    ECMEPCFG      = new vpcl::re_register(0x0100, this, "ECMEPCFG"     , name.c_str());
    ECMMICFG0     = new vpcl::re_register(0x0104, this, "ECMMICFG0"    , name.c_str());
    ECMMICFG9     = new vpcl::re_register(0x0128, this, "ECMMICFG9"    , name.c_str());
    ECMNMICFG0    = new vpcl::re_register(0x012C, this, "ECMNMICFG0"   , name.c_str());
    ECMNMICFG9    = new vpcl::re_register(0x0150, this, "ECMNMICFG9"   , name.c_str());
    ECMIRCFG0     = new vpcl::re_register(0x0154, this, "ECMIRCFG0"    , name.c_str());
    ECMIRCFG9     = new vpcl::re_register(0x0178, this, "ECMIRCFG9"    , name.c_str());
    ECMEMK0       = new vpcl::re_register(0x017C, this, "ECMEMK0"      , name.c_str());
    ECMEMK9       = new vpcl::re_register(0x01A0, this, "ECMEMK9"      , name.c_str());
    ECMESSTC0     = new vpcl::re_register(0x01A4, this, "ECMESSTC0"    , name.c_str());
    ECMESSTC9     = new vpcl::re_register(0x01C8, this, "ECMESSTC9"    , name.c_str());
    ECMKCPROT     = new vpcl::re_register(0x01CC, this, "ECMKCPROT"    , name.c_str());
    ECMPE0        = new vpcl::re_register(0x01D0, this, "ECMPE0"       , name.c_str());
    ECMPE9        = new vpcl::re_register(0x01F4, this, "ECMPE9"       , name.c_str());
    ECMDTMCTL     = new vpcl::re_register(0x01F8, this, "ECMDTMCTL"    , name.c_str());
    ECMDTMR       = new vpcl::re_register(0x01FC, this, "ECMDTMR"      , name.c_str());
    ECMDTMCMP     = new vpcl::re_register(0x0200, this, "ECMDTMCMP"    , name.c_str());
    ECMMIDTMCFG0  = new vpcl::re_register(0x0204, this, "ECMMIDTMCFG0" , name.c_str());
    ECMMIDTMCFG9  = new vpcl::re_register(0x0228, this, "ECMMIDTMCFG9" , name.c_str());
    ECMNMIDTMCFG0 = new vpcl::re_register(0x022C, this, "ECMNMIDTMCFG0", name.c_str());
    ECMNMIDTMCFG9 = new vpcl::re_register(0x0250, this, "ECMNMIDTMCFG9", name.c_str());
    ECMEOCCFG     = new vpcl::re_register(0x0254, this, "ECMEOCCFG"    , name.c_str());
    ECMPEM        = new vpcl::re_register(0x0258, this, "ECMPEM"       , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        str_tmp.str("");
        str_tmp<<"ECMmESSTR"<< mFactorIndexECMmESSTR[i];
        ECMmESSTR    [mFactorIndexECMmESSTR[i]] = new vpcl::re_register((0x000C) + 4*(mFactorIndexECMmESSTR[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMMICFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMMICFG"<< mFactorIndexECMMICFG[i];
        ECMMICFG     [mFactorIndexECMMICFG[i]] = new vpcl::re_register((0x0108) + 4*(mFactorIndexECMMICFG[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMNMICFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMNMICFG"<< mFactorIndexECMNMICFG[i];
        ECMNMICFG    [mFactorIndexECMNMICFG[i]] = new vpcl::re_register((0x0130) + 4*(mFactorIndexECMNMICFG[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMIRCFG"<< mFactorIndexECMIRCFG[i];
        ECMIRCFG     [mFactorIndexECMIRCFG[i]] = new vpcl::re_register((0x0158) + 4*(mFactorIndexECMIRCFG[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        str_tmp.str("");
        str_tmp<<"ECMEMK"<< mFactorIndexECMEMK[i];
        ECMEMK       [mFactorIndexECMEMK[i]] = new vpcl::re_register((0x0180) + 4*(mFactorIndexECMEMK[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        str_tmp.str("");
        str_tmp<<"ECMESSTC"<< mFactorIndexECMESSTC[i];
        ECMESSTC     [mFactorIndexECMESSTC[i]] = new vpcl::re_register((0x01A8) + 4*(mFactorIndexECMESSTC[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        str_tmp.str("");
        str_tmp<<"ECMPE"<< mFactorIndexECMPE[i];
        ECMPE        [mFactorIndexECMPE[i]] = new vpcl::re_register((0x01D4) + 4*(mFactorIndexECMPE[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMMIDTMCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMMIDTMCFG"<< mFactorIndexECMMIDTMCFG[i];
        ECMMIDTMCFG  [mFactorIndexECMMIDTMCFG[i]] = new vpcl::re_register((0x0208) + 4*(mFactorIndexECMMIDTMCFG[i]-1), this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMNMIDTMCFG"<< mFactorIndexECMNMIDTMCFG[i];
        ECMNMIDTMCFG [mFactorIndexECMNMIDTMCFG[i]] = new vpcl::re_register((0x0230) + 4*(mFactorIndexECMNMIDTMCFG[i]-1), this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<10];
    for (uint i = 0; i < (1<<10); i++) {
        mRegMap[i] = (1<<10);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMmESSTR;    i++) {
        mRegMap[(0x000C)     + (mFactorIndexECMmESSTR[i]-1)*4] = index;
        mRegMap[(0x000C + 1) + (mFactorIndexECMmESSTR[i]-1)*4] = index;
        mRegMap[(0x000C + 2) + (mFactorIndexECMmESSTR[i]-1)*4] = index;
        mRegMap[(0x000C + 3) + (mFactorIndexECMmESSTR[i]-1)*4] = index++;
    }
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    mRegMap[0x0100]     = index++;
    mRegMap[0x0104]     = index;
    mRegMap[0x0104 + 1] = index;
    mRegMap[0x0104 + 2] = index;
    mRegMap[0x0104 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMMICFG;     i++) {
        mRegMap[(0x0108)     + (mFactorIndexECMMICFG[i]-1)*4] = index;
        mRegMap[(0x0108 + 1) + (mFactorIndexECMMICFG[i]-1)*4] = index;
        mRegMap[(0x0108 + 2) + (mFactorIndexECMMICFG[i]-1)*4] = index;
        mRegMap[(0x0108 + 3) + (mFactorIndexECMMICFG[i]-1)*4] = index++;
    }
    mRegMap[0x0128]     = index;
    mRegMap[0x0128 + 1] = index;
    mRegMap[0x0128 + 2] = index;
    mRegMap[0x0128 + 3] = index++;
    mRegMap[0x012C]     = index;
    mRegMap[0x012C + 1] = index;
    mRegMap[0x012C + 2] = index;
    mRegMap[0x012C + 3] = index++;
    for(uint i = 0; i < emNUM_ECMNMICFG;    i++) {
        mRegMap[(0x0130)     + (mFactorIndexECMNMICFG[i]-1)*4] = index;
        mRegMap[(0x0130 + 1) + (mFactorIndexECMNMICFG[i]-1)*4] = index;
        mRegMap[(0x0130 + 2) + (mFactorIndexECMNMICFG[i]-1)*4] = index;
        mRegMap[(0x0130 + 3) + (mFactorIndexECMNMICFG[i]-1)*4] = index++;
    }
    mRegMap[0x0150]     = index;
    mRegMap[0x0150 + 1] = index;
    mRegMap[0x0150 + 2] = index;
    mRegMap[0x0150 + 3] = index++;
    mRegMap[0x0154]     = index;
    mRegMap[0x0154 + 1] = index;
    mRegMap[0x0154 + 2] = index;
    mRegMap[0x0154 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMIRCFG;     i++) {
        mRegMap[(0x0158)     + (mFactorIndexECMIRCFG[i]-1)*4] = index;
        mRegMap[(0x0158 + 1) + (mFactorIndexECMIRCFG[i]-1)*4] = index;
        mRegMap[(0x0158 + 2) + (mFactorIndexECMIRCFG[i]-1)*4] = index;
        mRegMap[(0x0158 + 3) + (mFactorIndexECMIRCFG[i]-1)*4] = index++;
    }
    mRegMap[0x0178]     = index;
    mRegMap[0x0178 + 1] = index;
    mRegMap[0x0178 + 2] = index;
    mRegMap[0x0178 + 3] = index++;
    mRegMap[0x017C]     = index;
    mRegMap[0x017C + 1] = index;
    mRegMap[0x017C + 2] = index;
    mRegMap[0x017C + 3] = index++;
    for(uint i = 0; i < emNUM_ECMEMK;       i++) {
        mRegMap[(0x0180)     + (mFactorIndexECMEMK[i]-1)*4] = index;
        mRegMap[(0x0180 + 1) + (mFactorIndexECMEMK[i]-1)*4] = index;
        mRegMap[(0x0180 + 2) + (mFactorIndexECMEMK[i]-1)*4] = index;
        mRegMap[(0x0180 + 3) + (mFactorIndexECMEMK[i]-1)*4] = index++;
    }
    mRegMap[0x01A0]     = index;
    mRegMap[0x01A0 + 1] = index;
    mRegMap[0x01A0 + 2] = index;
    mRegMap[0x01A0 + 3] = index++;
    mRegMap[0x01A4]     = index;
    mRegMap[0x01A4 + 1] = index;
    mRegMap[0x01A4 + 2] = index;
    mRegMap[0x01A4 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMESSTC;     i++) {
        mRegMap[(0x01A8)     + (mFactorIndexECMESSTC[i]-1)*4] = index;
        mRegMap[(0x01A8 + 1) + (mFactorIndexECMESSTC[i]-1)*4] = index;
        mRegMap[(0x01A8 + 2) + (mFactorIndexECMESSTC[i]-1)*4] = index;
        mRegMap[(0x01A8 + 3) + (mFactorIndexECMESSTC[i]-1)*4] = index++;
    }
    mRegMap[0x01C8]     = index;
    mRegMap[0x01C8 + 1] = index;
    mRegMap[0x01C8 + 2] = index;
    mRegMap[0x01C8 + 3] = index++;
    mRegMap[0x01CC]     = index;
    mRegMap[0x01CC + 1] = index;
    mRegMap[0x01CC + 2] = index;
    mRegMap[0x01CC + 3] = index++;
    mRegMap[0x01D0]     = index;
    mRegMap[0x01D0 + 1] = index;
    mRegMap[0x01D0 + 2] = index;
    mRegMap[0x01D0 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMPE;        i++) {
        mRegMap[(0x01D4)     + (mFactorIndexECMPE[i]-1)*4] = index;
        mRegMap[(0x01D4 + 1) + (mFactorIndexECMPE[i]-1)*4] = index;
        mRegMap[(0x01D4 + 2) + (mFactorIndexECMPE[i]-1)*4] = index;
        mRegMap[(0x01D4 + 3) + (mFactorIndexECMPE[i]-1)*4] = index++;
    }
    mRegMap[0x01F4]     = index;
    mRegMap[0x01F4 + 1] = index;
    mRegMap[0x01F4 + 2] = index;
    mRegMap[0x01F4 + 3] = index++;
    mRegMap[0x01F8]     = index++;
    mRegMap[0x01FC]     = index;
    mRegMap[0x01FC + 1] = index++;
    mRegMap[0x0200]     = index;
    mRegMap[0x0200 + 1] = index;
    mRegMap[0x0200 + 2] = index;
    mRegMap[0x0200 + 3] = index++;
    mRegMap[0x0204]     = index;
    mRegMap[0x0204 + 1] = index;
    mRegMap[0x0204 + 2] = index;
    mRegMap[0x0204 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMMIDTMCFG;  i++) {
        mRegMap[(0x0208)     + (mFactorIndexECMMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0208 + 1) + (mFactorIndexECMMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0208 + 2) + (mFactorIndexECMMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0208 + 3) + (mFactorIndexECMMIDTMCFG[i]-1)*4] = index++;
    }
    mRegMap[0x0228]     = index;
    mRegMap[0x0228 + 1] = index;
    mRegMap[0x0228 + 2] = index;
    mRegMap[0x0228 + 3] = index++;
    mRegMap[0x022C]     = index;
    mRegMap[0x022C + 1] = index;
    mRegMap[0x022C + 2] = index;
    mRegMap[0x022C + 3] = index++;
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG; i++) {
        mRegMap[(0x0230)     + (mFactorIndexECMNMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0230 + 1) + (mFactorIndexECMNMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0230 + 2) + (mFactorIndexECMNMIDTMCFG[i]-1)*4] = index;
        mRegMap[(0x0230 + 3) + (mFactorIndexECMNMIDTMCFG[i]-1)*4] = index++;
    }
    mRegMap[0x0250]     = index;
    mRegMap[0x0250 + 1] = index;
    mRegMap[0x0250 + 2] = index;
    mRegMap[0x0250 + 3] = index++;
    mRegMap[0x0254]     = index;
    mRegMap[0x0254 + 1] = index;
    mRegMap[0x0254 + 2] = index;
    mRegMap[0x0254 + 3] = index++;
    mRegMap[0x0258]     = index;
    mRegMap[0x0258 + 1] = index;
    mRegMap[0x0258 + 2] = index;
    mRegMap[0x0258 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET       , mCurReg, 0,  1,       "8", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET       , mCurReg, 0,  1,       "8", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR       , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR0     , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMmESSTR    ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR      [mFactorIndexECMmESSTR    [i]], mCurReg, mFactorIndexECMmESSTR    [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR9     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEPCFG       , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMICFG0      , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMMICFG     ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMMICFG       [mFactorIndexECMMICFG     [i]], mCurReg, mFactorIndexECMMICFG     [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMICFG9      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG0     , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMNMICFG    ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG      [mFactorIndexECMNMICFG    [i]], mCurReg, mFactorIndexECMNMICFG    [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG9     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG0      , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMIRCFG     ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG       [mFactorIndexECMIRCFG     [i]], mCurReg, mFactorIndexECMIRCFG     [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG9      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEMK0        , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMEMK       ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMEMK         [mFactorIndexECMEMK       [i]], mCurReg, mFactorIndexECMEMK       [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEMK9        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMESSTC0      , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMESSTC     ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMESSTC       [mFactorIndexECMESSTC     [i]], mCurReg, mFactorIndexECMESSTC     [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMESSTC9      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMKCPROT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPE0         , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMPE        ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMPE          [mFactorIndexECMPE        [i]], mCurReg, mFactorIndexECMPE        [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPE9         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCTL      , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMR        , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCMP      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMIDTMCFG0   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMMIDTMCFG  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG  [i]], mCurReg, mFactorIndexECMMIDTMCFG  [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMIDTMCFG9   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMIDTMCFG0  , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG [i]], mCurReg, mFactorIndexECMNMIDTMCFG [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMIDTMCFG9  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEOCCFG      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPEM         , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*ECMmESET       ) ( 0,  0, "ECMmEST" , 0x0       , "W1"    , vpcl::SPP_ENABLE);
    (*ECMmECLR       ) ( 0,  0, "ECMmECT" , 0x0       , "W1"    , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (31, 31, "ECMmSSE031", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (30, 30, "ECMmSSE030", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (29, 29, "ECMmSSE029", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (28, 28, "ECMmSSE028", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (27, 27, "ECMmSSE027", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (26, 26, "ECMmSSE026", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (25, 25, "ECMmSSE025", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (24, 24, "ECMmSSE024", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (23, 23, "ECMmSSE023", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (22, 22, "ECMmSSE022", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (21, 21, "ECMmSSE021", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (20, 20, "ECMmSSE020", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (19, 19, "ECMmSSE019", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (18, 18, "ECMmSSE018", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (17, 17, "ECMmSSE017", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (16, 16, "ECMmSSE016", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (15, 14, "ECMmSSE01514", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (13, 12, "ECMmSSE01312", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) (11, 10, "ECMmSSE01110", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) ( 9,  8, "ECMmSSE00908", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) ( 7,  6, "ECMmSSE00706", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) ( 5,  4, "ECMmSSE00504", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) ( 3,  2, "ECMmSSE00302", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0     ) ( 1,  0, "ECMmSSE00100", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (31, 31, "ECMmSSE931", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (30, 30, "ECMmSSE930", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (29, 29, "ECMmSSE929", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (28, 28, "ECMmSSE928", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (27, 27, "ECMmSSE927", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (26, 26, "ECMmSSE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (25, 25, "ECMmSSE925", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (24, 24, "ECMmSSE924", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (23, 23, "ECMmSSE923", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (22, 22, "ECMmSSE922", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (21, 21, "ECMmSSE921", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (20, 20, "ECMmSSE920", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (19, 19, "ECMmSSE919", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (18, 18, "ECMmSSE918", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (17, 17, "ECMmSSE917", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (16, 16, "ECMmSSE916", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (15, 15, "ECMmSSE915", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (14, 14, "ECMmSSE914", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (13, 13, "ECMmSSE913", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (12, 12, "ECMmSSE912", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (11, 11, "ECMmSSE911", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) (10, 10, "ECMmSSE910", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 9,  9, "ECMmSSE909", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 8,  8, "ECMmSSE908", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 7,  7, "ECMmSSE907", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 6,  6, "ECMmSSE906", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 5,  5, "ECMmSSE905", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 4,  4, "ECMmSSE904", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 3,  3, "ECMmSSE903", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 2,  2, "ECMmSSE902", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 1,  1, "ECMmSSE901", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR9     ) ( 0,  0, "ECMmSSE900", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMEPCFG       ) ( 0,  0, "ECMSL0"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (31, 31, "ECMMIE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (30, 30, "ECMMIE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (29, 29, "ECMMIE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (28, 28, "ECMMIE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (27, 27, "ECMMIE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (26, 26, "ECMMIE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (25, 25, "ECMMIE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (24, 24, "ECMMIE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (23, 23, "ECMMIE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (22, 22, "ECMMIE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (21, 21, "ECMMIE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (20, 20, "ECMMIE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (19, 19, "ECMMIE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (18, 18, "ECMMIE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (17, 17, "ECMMIE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (16, 16, "ECMMIE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (15, 14, "ECMMIE01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (13, 12, "ECMMIE01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) (11, 10, "ECMMIE01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) ( 9,  8, "ECMMIE00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) ( 7,  6, "ECMMIE00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) ( 5,  4, "ECMMIE00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) ( 3,  2, "ECMMIE00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0      ) ( 1,  0, "ECMMIE00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (28, 28, "ECMMIE928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (27, 27, "ECMMIE927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (26, 26, "ECMMIE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (25, 25, "ECMMIE925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (24, 24, "ECMMIE924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (23, 23, "ECMMIE923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (22, 22, "ECMMIE922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (21, 21, "ECMMIE921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (20, 20, "ECMMIE920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (19, 19, "ECMMIE919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (18, 18, "ECMMIE918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (17, 17, "ECMMIE917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (16, 16, "ECMMIE916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (15, 15, "ECMMIE915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (14, 14, "ECMMIE914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (13, 13, "ECMMIE913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (12, 12, "ECMMIE912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (11, 11, "ECMMIE911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) (10, 10, "ECMMIE910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 9,  9, "ECMMIE909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 8,  8, "ECMMIE908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 7,  7, "ECMMIE907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 6,  6, "ECMMIE906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 5,  5, "ECMMIE905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 4,  4, "ECMMIE904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 3,  3, "ECMMIE903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 2,  2, "ECMMIE902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 1,  1, "ECMMIE901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG9      ) ( 0,  0, "ECMMIE900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (31, 31, "ECMNMIE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (30, 30, "ECMNMIE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (29, 29, "ECMNMIE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (28, 28, "ECMNMIE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (27, 27, "ECMNMIE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (26, 26, "ECMNMIE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (25, 25, "ECMNMIE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (24, 24, "ECMNMIE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (23, 23, "ECMNMIE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (22, 22, "ECMNMIE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (21, 21, "ECMNMIE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (20, 20, "ECMNMIE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (19, 19, "ECMNMIE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (18, 18, "ECMNMIE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (17, 17, "ECMNMIE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (16, 16, "ECMNMIE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (15, 14, "ECMNMIE01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (13, 12, "ECMNMIE01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) (11, 10, "ECMNMIE01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) ( 9,  8, "ECMNMIE00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) ( 7,  6, "ECMNMIE00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) ( 5,  4, "ECMNMIE00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) ( 3,  2, "ECMNMIE00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0     ) ( 1,  0, "ECMNMIE00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (28, 28, "ECMNMIE928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (27, 27, "ECMNMIE927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (26, 26, "ECMNMIE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (25, 25, "ECMNMIE925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (24, 24, "ECMNMIE924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (23, 23, "ECMNMIE923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (22, 22, "ECMNMIE922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (21, 21, "ECMNMIE921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (20, 20, "ECMNMIE920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (19, 19, "ECMNMIE919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (18, 18, "ECMNMIE918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (17, 17, "ECMNMIE917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (16, 16, "ECMNMIE916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (15, 15, "ECMNMIE915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (14, 14, "ECMNMIE914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (13, 13, "ECMNMIE913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (12, 12, "ECMNMIE912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (11, 11, "ECMNMIE911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) (10, 10, "ECMNMIE910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 9,  9, "ECMNMIE909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 8,  8, "ECMNMIE908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 7,  7, "ECMNMIE907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 6,  6, "ECMNMIE906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 5,  5, "ECMNMIE905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 4,  4, "ECMNMIE904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 3,  3, "ECMNMIE903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 2,  2, "ECMNMIE902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 1,  1, "ECMNMIE901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG9     ) ( 0,  0, "ECMNMIE900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (31, 31, "ECMIRE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (30, 30, "ECMIRE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (29, 29, "ECMIRE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (28, 28, "ECMIRE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (27, 27, "ECMIRE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (26, 26, "ECMIRE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (25, 25, "ECMIRE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (24, 24, "ECMIRE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (23, 23, "ECMIRE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (22, 22, "ECMIRE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (21, 21, "ECMIRE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (20, 20, "ECMIRE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (19, 19, "ECMIRE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (18, 18, "ECMIRE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (17, 17, "ECMIRE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (16, 16, "ECMIRE016", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (15, 14, "ECMIRE01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (13, 12, "ECMIRE01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) (11, 10, "ECMIRE01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) ( 9,  8, "ECMIRE00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) ( 7,  6, "ECMIRE00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) ( 5,  4, "ECMIRE00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) ( 3,  2, "ECMIRE00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0      ) ( 1,  0, "ECMIRE00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (29, 29, "ECMIRE929", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (28, 28, "ECMIRE928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (27, 27, "ECMIRE927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (26, 26, "ECMIRE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (25, 25, "ECMIRE925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (24, 24, "ECMIRE924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (23, 23, "ECMIRE923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (22, 22, "ECMIRE922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (21, 21, "ECMIRE921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (20, 20, "ECMIRE920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (19, 19, "ECMIRE919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (18, 18, "ECMIRE918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (17, 17, "ECMIRE917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (16, 16, "ECMIRE916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (15, 15, "ECMIRE915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (14, 14, "ECMIRE914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (13, 13, "ECMIRE913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (12, 12, "ECMIRE912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (11, 11, "ECMIRE911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) (10, 10, "ECMIRE910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 9,  9, "ECMIRE909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 8,  8, "ECMIRE908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 7,  7, "ECMIRE907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 6,  6, "ECMIRE906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 5,  5, "ECMIRE905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 4,  4, "ECMIRE904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 3,  3, "ECMIRE903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 2,  2, "ECMIRE902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 1,  1, "ECMIRE901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG9      ) ( 0,  0, "ECMIRE900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (31, 31, "ECMEMK031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (30, 30, "ECMEMK030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (29, 29, "ECMEMK029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (28, 28, "ECMEMK028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (27, 27, "ECMEMK027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (26, 26, "ECMEMK026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (25, 25, "ECMEMK025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (24, 24, "ECMEMK024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (23, 23, "ECMEMK023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (22, 22, "ECMEMK022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (21, 21, "ECMEMK021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (20, 20, "ECMEMK020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (19, 19, "ECMEMK019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (18, 18, "ECMEMK018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (17, 17, "ECMEMK017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (16, 16, "ECMEMK016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (15, 14, "ECMEMK01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (13, 12, "ECMEMK01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) (11, 10, "ECMEMK01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) ( 9,  8, "ECMEMK00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) ( 7,  6, "ECMEMK00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) ( 5,  4, "ECMEMK00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) ( 3,  2, "ECMEMK00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0        ) ( 1,  0, "ECMEMK00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (31, 31, "ECMEMK931", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (30, 30, "ECMEMK930", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (29, 29, "ECMEMK929", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (28, 28, "ECMEMK928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (27, 27, "ECMEMK927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (26, 26, "ECMEMK926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (25, 25, "ECMEMK925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (24, 24, "ECMEMK924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (23, 23, "ECMEMK923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (22, 22, "ECMEMK922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (21, 21, "ECMEMK921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (20, 20, "ECMEMK920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (19, 19, "ECMEMK919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (18, 18, "ECMEMK918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (17, 17, "ECMEMK917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (16, 16, "ECMEMK916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (15, 15, "ECMEMK915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (14, 14, "ECMEMK914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (13, 13, "ECMEMK913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (12, 12, "ECMEMK912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (11, 11, "ECMEMK911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) (10, 10, "ECMEMK910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 9,  9, "ECMEMK909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 8,  8, "ECMEMK908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 7,  7, "ECMEMK907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 6,  6, "ECMEMK906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 5,  5, "ECMEMK905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 4,  4, "ECMEMK904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 3,  3, "ECMEMK903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 2,  2, "ECMEMK902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 1,  1, "ECMEMK901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK9        ) ( 0,  0, "ECMEMK900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (31, 31, "ECMCLSSE031", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (30, 30, "ECMCLSSE030", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (29, 29, "ECMCLSSE029", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (28, 28, "ECMCLSSE028", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (27, 27, "ECMCLSSE027", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (26, 26, "ECMCLSSE026", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (25, 25, "ECMCLSSE025", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (24, 24, "ECMCLSSE024", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (23, 23, "ECMCLSSE023", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (22, 22, "ECMCLSSE022", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (21, 21, "ECMCLSSE021", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (20, 20, "ECMCLSSE020", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (19, 19, "ECMCLSSE019", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (18, 18, "ECMCLSSE018", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (17, 17, "ECMCLSSE017", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (16, 16, "ECMCLSSE016", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (15, 14, "ECMCLSSE01514", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (13, 12, "ECMCLSSE01312", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) (11, 10, "ECMCLSSE01110", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) ( 9,  8, "ECMCLSSE00908", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) ( 7,  6, "ECMCLSSE00706", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) ( 5,  4, "ECMCLSSE00504", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) ( 3,  2, "ECMCLSSE00302", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0      ) ( 1,  0, "ECMCLSSE00100", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (30, 30, "ECMCLSSE930", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (29, 29, "ECMCLSSE929", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (28, 28, "ECMCLSSE928", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (27, 27, "ECMCLSSE927", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (26, 26, "ECMCLSSE926", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (25, 25, "ECMCLSSE925", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (24, 24, "ECMCLSSE924", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (23, 23, "ECMCLSSE923", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (22, 22, "ECMCLSSE922", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (21, 21, "ECMCLSSE921", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (20, 20, "ECMCLSSE920", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (19, 19, "ECMCLSSE919", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (18, 18, "ECMCLSSE918", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (17, 17, "ECMCLSSE917", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (16, 16, "ECMCLSSE916", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (15, 15, "ECMCLSSE915", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (14, 14, "ECMCLSSE914", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (13, 13, "ECMCLSSE913", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (12, 12, "ECMCLSSE912", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (11, 11, "ECMCLSSE911", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) (10, 10, "ECMCLSSE910", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 9,  9, "ECMCLSSE909", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 8,  8, "ECMCLSSE908", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 7,  7, "ECMCLSSE907", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 6,  6, "ECMCLSSE906", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 5,  5, "ECMCLSSE905", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 4,  4, "ECMCLSSE904", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 3,  3, "ECMCLSSE903", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 2,  2, "ECMCLSSE902", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 1,  1, "ECMCLSSE901", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC9      ) ( 0,  0, "ECMCLSSE900", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMKCPROT      ) (31,  1, "KCPROT"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMKCPROT      ) ( 0,  0, "KCE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (31, 31, "ECMPE031", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (30, 30, "ECMPE030", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (29, 29, "ECMPE029", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (28, 28, "ECMPE028", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (27, 27, "ECMPE027", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (26, 26, "ECMPE026", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (25, 25, "ECMPE025", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (24, 24, "ECMPE024", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (23, 23, "ECMPE023", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (22, 22, "ECMPE022", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (21, 21, "ECMPE021", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (20, 20, "ECMPE020", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (19, 19, "ECMPE019", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (18, 18, "ECMPE018", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (17, 17, "ECMPE017", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (16, 16, "ECMPE016", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (15, 14, "ECMPE01514", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (13, 12, "ECMPE01312", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) (11, 10, "ECMPE01110", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) ( 9,  8, "ECMPE00908", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) ( 7,  6, "ECMPE00706", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) ( 5,  4, "ECMPE00504", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) ( 3,  2, "ECMPE00302", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0         ) ( 1,  0, "ECMPE00100", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (29, 29, "ECMPE929", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (28, 28, "ECMPE928", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (27, 27, "ECMPE927", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (26, 26, "ECMPE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (25, 25, "ECMPE925", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (24, 24, "ECMPE924", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (23, 23, "ECMPE923", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (22, 22, "ECMPE922", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (21, 21, "ECMPE921", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (20, 20, "ECMPE920", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (19, 19, "ECMPE919", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (18, 18, "ECMPE918", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (17, 17, "ECMPE917", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (16, 16, "ECMPE916", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (15, 15, "ECMPE915", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (14, 14, "ECMPE914", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (13, 13, "ECMPE913", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (12, 12, "ECMPE912", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (11, 11, "ECMPE911", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) (10, 10, "ECMPE910", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 9,  9, "ECMPE909", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 8,  8, "ECMPE908", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 7,  7, "ECMPE907", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 6,  6, "ECMPE906", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 5,  5, "ECMPE905", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 4,  4, "ECMPE904", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 3,  3, "ECMPE903", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 2,  2, "ECMPE902", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 1,  1, "ECMPE901", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE9         ) ( 0,  0, "ECMPE900", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL      ) ( 4,  4, "DTMSTACNTCLK", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL      ) ( 1,  1, "DTMSTP"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL      ) ( 0,  0, "DTMSTA"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMR        ) (15,  0, "ECMDTMR" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCMP      ) (16, 16, "CMPW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCMP      ) (15,  0, "ECMDTMCMP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (31, 31, "ECMMITE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (30, 30, "ECMMITE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (29, 29, "ECMMITE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (28, 28, "ECMMITE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (27, 27, "ECMMITE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (26, 26, "ECMMITE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (25, 25, "ECMMITE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (24, 24, "ECMMITE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (23, 23, "ECMMITE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (22, 22, "ECMMITE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (21, 21, "ECMMITE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (20, 20, "ECMMITE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (19, 19, "ECMMITE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (18, 18, "ECMMITE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (17, 17, "ECMMITE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (16, 16, "ECMMITE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (15, 14, "ECMMITE01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (13, 12, "ECMMITE01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) (11, 10, "ECMMITE01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) ( 9,  8, "ECMMITE00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) ( 7,  6, "ECMMITE00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) ( 5,  4, "ECMMITE00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) ( 3,  2, "ECMMITE00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG0   ) ( 1,  0, "ECMMITE00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (28, 28, "ECMMITE928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (27, 27, "ECMMITE927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (26, 26, "ECMMITE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (25, 25, "ECMMITE925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (24, 24, "ECMMITE924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (23, 23, "ECMMITE923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (22, 22, "ECMMITE922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (21, 21, "ECMMITE921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (20, 20, "ECMMITE920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (19, 19, "ECMMITE919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (18, 18, "ECMMITE918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (17, 17, "ECMMITE917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (16, 16, "ECMMITE916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (15, 15, "ECMMITE915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (14, 14, "ECMMITE914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (13, 13, "ECMMITE913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (12, 12, "ECMMITE912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (11, 11, "ECMMITE911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) (10, 10, "ECMMITE910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 9,  9, "ECMMITE909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 8,  8, "ECMMITE908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 7,  7, "ECMMITE907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 6,  6, "ECMMITE906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 5,  5, "ECMMITE905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 4,  4, "ECMMITE904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 3,  3, "ECMMITE903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 2,  2, "ECMMITE902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 1,  1, "ECMMITE901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMIDTMCFG9   ) ( 0,  0, "ECMMITE900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (31, 31, "ECMNMITE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (30, 30, "ECMNMITE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (29, 29, "ECMNMITE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (28, 28, "ECMNMITE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (27, 27, "ECMNMITE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (26, 26, "ECMNMITE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (25, 25, "ECMNMITE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (24, 24, "ECMNMITE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (23, 23, "ECMNMITE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (22, 22, "ECMNMITE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (21, 21, "ECMNMITE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (20, 20, "ECMNMITE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (19, 19, "ECMNMITE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (18, 18, "ECMNMITE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (17, 17, "ECMNMITE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (16, 16, "ECMNMITE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (15, 14, "ECMNMITE01514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (13, 12, "ECMNMITE01312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) (11, 10, "ECMNMITE01110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) ( 9,  8, "ECMNMITE00908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) ( 7,  6, "ECMNMITE00706", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) ( 5,  4, "ECMNMITE00504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) ( 3,  2, "ECMNMITE00302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG0  ) ( 1,  0, "ECMNMITE00100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (28, 28, "ECMNMITE928", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (27, 27, "ECMNMITE927", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (26, 26, "ECMNMITE926", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (25, 25, "ECMNMITE925", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (24, 24, "ECMNMITE924", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (23, 23, "ECMNMITE923", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (22, 22, "ECMNMITE922", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (21, 21, "ECMNMITE921", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (20, 20, "ECMNMITE920", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (19, 19, "ECMNMITE919", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (18, 18, "ECMNMITE918", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (17, 17, "ECMNMITE917", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (16, 16, "ECMNMITE916", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (15, 15, "ECMNMITE915", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (14, 14, "ECMNMITE914", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (13, 13, "ECMNMITE913", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (12, 12, "ECMNMITE912", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (11, 11, "ECMNMITE911", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) (10, 10, "ECMNMITE910", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 9,  9, "ECMNMITE909", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 8,  8, "ECMNMITE908", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 7,  7, "ECMNMITE907", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 6,  6, "ECMNMITE906", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 5,  5, "ECMNMITE905", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 4,  4, "ECMNMITE904", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 3,  3, "ECMNMITE903", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 2,  2, "ECMNMITE902", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 1,  1, "ECMNMITE901", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMIDTMCFG9  ) ( 0,  0, "ECMNMITE900", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEOCCFG      ) (31, 31, "EOCIEN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEOCCFG      ) (16, 16, "CMPW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMEOCCFG      ) (15,  0, "ECMEOUTCLRT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMPEM         ) ( 1,  1, "MSKM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMPEM         ) ( 0,  0, "MSKC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        (*ECMPE          [mFactorIndexECMPE[i]]) (31, 31, "ECMPE31" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (30, 30, "ECMPE30" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (29, 29, "ECMPE29" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (28, 28, "ECMPE28" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (27, 27, "ECMPE27" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (26, 26, "ECMPE26" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (25, 25, "ECMPE25" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (24, 24, "ECMPE24" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (23, 23, "ECMPE23" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (22, 22, "ECMPE22" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (21, 21, "ECMPE21" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (20, 20, "ECMPE20" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (19, 19, "ECMPE19" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (18, 18, "ECMPE18" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (17, 17, "ECMPE17" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (16, 16, "ECMPE16" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (15, 15, "ECMPE15" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (14, 14, "ECMPE14" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (13, 13, "ECMPE13" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (12, 12, "ECMPE12" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (11, 11, "ECMPE11" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) (10, 10, "ECMPE10" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 9,  9, "ECMPE09" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 8,  8, "ECMPE08" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 7,  7, "ECMPE07" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 6,  6, "ECMPE06" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 5,  5, "ECMPE05" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 4,  4, "ECMPE04" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 3,  3, "ECMPE03" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 2,  2, "ECMPE02" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 1,  1, "ECMPE01" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE          [mFactorIndexECMPE[i]]) ( 0,  0, "ECMPE00" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMMIDTMCFG; i++) {
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (31, 31, "ECMMITE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (30, 30, "ECMMITE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (29, 29, "ECMMITE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (28, 28, "ECMMITE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (27, 27, "ECMMITE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (26, 26, "ECMMITE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (25, 25, "ECMMITE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (24, 24, "ECMMITE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (23, 23, "ECMMITE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (22, 22, "ECMMITE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (21, 21, "ECMMITE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (20, 20, "ECMMITE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (19, 19, "ECMMITE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (18, 18, "ECMMITE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (17, 17, "ECMMITE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (16, 16, "ECMMITE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (15, 15, "ECMMITE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (14, 14, "ECMMITE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (13, 13, "ECMMITE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (12, 12, "ECMMITE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (11, 11, "ECMMITE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) (10, 10, "ECMMITE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 9,  9, "ECMMITE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 8,  8, "ECMMITE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 7,  7, "ECMMITE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 6,  6, "ECMMITE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 5,  5, "ECMMITE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 4,  4, "ECMMITE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 3,  3, "ECMMITE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 2,  2, "ECMMITE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 1,  1, "ECMMITE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMIDTMCFG    [mFactorIndexECMMIDTMCFG[i]]) ( 0,  0, "ECMMITE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (31, 31, "ECMEMK31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (30, 30, "ECMEMK30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (29, 29, "ECMEMK29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (28, 28, "ECMEMK28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (27, 27, "ECMEMK27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (26, 26, "ECMEMK26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (25, 25, "ECMEMK25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (24, 24, "ECMEMK24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (23, 23, "ECMEMK23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (22, 22, "ECMEMK22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (21, 21, "ECMEMK21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (20, 20, "ECMEMK20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (19, 19, "ECMEMK19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (18, 18, "ECMEMK18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (17, 17, "ECMEMK17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (16, 16, "ECMEMK16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (15, 15, "ECMEMK15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (14, 14, "ECMEMK14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (13, 13, "ECMEMK13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (12, 12, "ECMEMK12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (11, 11, "ECMEMK11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) (10, 10, "ECMEMK10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 9,  9, "ECMEMK09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 8,  8, "ECMEMK08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 7,  7, "ECMEMK07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 6,  6, "ECMEMK06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 5,  5, "ECMEMK05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 4,  4, "ECMEMK04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 3,  3, "ECMEMK03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 2,  2, "ECMEMK02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 1,  1, "ECMEMK01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK         [mFactorIndexECMEMK[i]]) ( 0,  0, "ECMEMK00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (31, 31, "ECMIRE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (30, 30, "ECMIRE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (29, 29, "ECMIRE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (28, 28, "ECMIRE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (27, 27, "ECMIRE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (26, 26, "ECMIRE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (25, 25, "ECMIRE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (24, 24, "ECMIRE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (23, 23, "ECMIRE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (22, 22, "ECMIRE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (21, 21, "ECMIRE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (20, 20, "ECMIRE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (19, 19, "ECMIRE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (18, 18, "ECMIRE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (17, 17, "ECMIRE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (16, 16, "ECMIRE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (15, 15, "ECMIRE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (14, 14, "ECMIRE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (13, 13, "ECMIRE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (12, 12, "ECMIRE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (11, 11, "ECMIRE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) (10, 10, "ECMIRE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 9,  9, "ECMIRE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 8,  8, "ECMIRE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 7,  7, "ECMIRE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 6,  6, "ECMIRE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 5,  5, "ECMIRE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 4,  4, "ECMIRE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 3,  3, "ECMIRE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 2,  2, "ECMIRE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 1,  1, "ECMIRE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG       [mFactorIndexECMIRCFG[i]]) ( 0,  0, "ECMIRE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (31, 31, "ECMCLSSE31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (30, 30, "ECMCLSSE30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (29, 29, "ECMCLSSE29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (28, 28, "ECMCLSSE28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (27, 27, "ECMCLSSE27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (26, 26, "ECMCLSSE26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (25, 25, "ECMCLSSE25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (24, 24, "ECMCLSSE24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (23, 23, "ECMCLSSE23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (22, 22, "ECMCLSSE22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (21, 21, "ECMCLSSE21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (20, 20, "ECMCLSSE20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (19, 19, "ECMCLSSE19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (18, 18, "ECMCLSSE18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (17, 17, "ECMCLSSE17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (16, 16, "ECMCLSSE16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (15, 15, "ECMCLSSE15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (14, 14, "ECMCLSSE14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (13, 13, "ECMCLSSE13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (12, 12, "ECMCLSSE12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (11, 11, "ECMCLSSE11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) (10, 10, "ECMCLSSE10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 9,  9, "ECMCLSSE09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 8,  8, "ECMCLSSE08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 7,  7, "ECMCLSSE07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 6,  6, "ECMCLSSE06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 5,  5, "ECMCLSSE05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 4,  4, "ECMCLSSE04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 3,  3, "ECMCLSSE03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 2,  2, "ECMCLSSE02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 1,  1, "ECMCLSSE01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC       [mFactorIndexECMESSTC[i]]) ( 0,  0, "ECMCLSSE00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG; i++) {
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (31, 31, "ECMNMITE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (30, 30, "ECMNMITE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (29, 29, "ECMNMITE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (28, 28, "ECMNMITE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (27, 27, "ECMNMITE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (26, 26, "ECMNMITE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (25, 25, "ECMNMITE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (24, 24, "ECMNMITE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (23, 23, "ECMNMITE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (22, 22, "ECMNMITE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (21, 21, "ECMNMITE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (20, 20, "ECMNMITE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (19, 19, "ECMNMITE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (18, 18, "ECMNMITE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (17, 17, "ECMNMITE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (16, 16, "ECMNMITE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (15, 15, "ECMNMITE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (14, 14, "ECMNMITE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (13, 13, "ECMNMITE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (12, 12, "ECMNMITE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (11, 11, "ECMNMITE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) (10, 10, "ECMNMITE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 9,  9, "ECMNMITE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 8,  8, "ECMNMITE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 7,  7, "ECMNMITE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 6,  6, "ECMNMITE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 5,  5, "ECMNMITE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 4,  4, "ECMNMITE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 3,  3, "ECMNMITE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 2,  2, "ECMNMITE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 1,  1, "ECMNMITE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMIDTMCFG   [mFactorIndexECMNMIDTMCFG[i]]) ( 0,  0, "ECMNMITE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMNMICFG; i++) {
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (31, 31, "ECMNMIE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (30, 30, "ECMNMIE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (29, 29, "ECMNMIE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (28, 28, "ECMNMIE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (27, 27, "ECMNMIE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (26, 26, "ECMNMIE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (25, 25, "ECMNMIE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (24, 24, "ECMNMIE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (23, 23, "ECMNMIE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (22, 22, "ECMNMIE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (21, 21, "ECMNMIE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (20, 20, "ECMNMIE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (19, 19, "ECMNMIE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (18, 18, "ECMNMIE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (17, 17, "ECMNMIE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (16, 16, "ECMNMIE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (15, 15, "ECMNMIE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (14, 14, "ECMNMIE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (13, 13, "ECMNMIE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (12, 12, "ECMNMIE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (11, 11, "ECMNMIE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) (10, 10, "ECMNMIE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 9,  9, "ECMNMIE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 8,  8, "ECMNMIE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 7,  7, "ECMNMIE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 6,  6, "ECMNMIE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 5,  5, "ECMNMIE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 4,  4, "ECMNMIE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 3,  3, "ECMNMIE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 2,  2, "ECMNMIE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 1,  1, "ECMNMIE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMNMICFG      [mFactorIndexECMNMICFG[i]]) ( 0,  0, "ECMNMIE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMMICFG; i++) {
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (31, 31, "ECMMIE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (30, 30, "ECMMIE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (29, 29, "ECMMIE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (28, 28, "ECMMIE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (27, 27, "ECMMIE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (26, 26, "ECMMIE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (25, 25, "ECMMIE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (24, 24, "ECMMIE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (23, 23, "ECMMIE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (22, 22, "ECMMIE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (21, 21, "ECMMIE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (20, 20, "ECMMIE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (19, 19, "ECMMIE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (18, 18, "ECMMIE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (17, 17, "ECMMIE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (16, 16, "ECMMIE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (15, 15, "ECMMIE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (14, 14, "ECMMIE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (13, 13, "ECMMIE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (12, 12, "ECMMIE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (11, 11, "ECMMIE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) (10, 10, "ECMMIE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 9,  9, "ECMMIE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 8,  8, "ECMMIE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 7,  7, "ECMMIE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 6,  6, "ECMMIE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 5,  5, "ECMMIE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 4,  4, "ECMMIE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 3,  3, "ECMMIE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 2,  2, "ECMMIE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 1,  1, "ECMMIE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMMICFG       [mFactorIndexECMMICFG[i]]) ( 0,  0, "ECMMIE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (31, 31, "ECMmSSE31", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (30, 30, "ECMmSSE30", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (29, 29, "ECMmSSE29", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (28, 28, "ECMmSSE28", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (27, 27, "ECMmSSE27", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (26, 26, "ECMmSSE26", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (25, 25, "ECMmSSE25", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (24, 24, "ECMmSSE24", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (23, 23, "ECMmSSE23", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (22, 22, "ECMmSSE22", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (21, 21, "ECMmSSE21", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (20, 20, "ECMmSSE20", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (19, 19, "ECMmSSE19", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (18, 18, "ECMmSSE18", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (17, 17, "ECMmSSE17", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (16, 16, "ECMmSSE16", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (15, 15, "ECMmSSE15", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (14, 14, "ECMmSSE14", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (13, 13, "ECMmSSE13", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (12, 12, "ECMmSSE12", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (11, 11, "ECMmSSE11", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) (10, 10, "ECMmSSE10", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 9,  9, "ECMmSSE09", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 8,  8, "ECMmSSE08", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 7,  7, "ECMmSSE07", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 6,  6, "ECMmSSE06", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 5,  5, "ECMmSSE05", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 4,  4, "ECMmSSE04", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 3,  3, "ECMmSSE03", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 2,  2, "ECMmSSE02", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 1,  1, "ECMmSSE01", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR      [mFactorIndexECMmESSTR[i]]) ( 0,  0, "ECMmSSE00", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    // Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ECMmESET"   ]["ECMmEST"    ] = &Cecm_e2_regif::cb_ECMmESET_ECMmEST;
    mWrCbAPI["ECMmECLR"   ]["ECMmECT"    ] = &Cecm_e2_regif::cb_ECMmECLR_ECMmECT;
    mWrCbAPI["ECMEMK0"    ]["ECMEMK00100"] = &Cecm_e2_regif::cb_ECMEMK0_ECMEMK00100;
    mWrCbAPI["ECMEMK9"    ]["ECMEMK900"  ] = &Cecm_e2_regif::cb_ECMEMK9_ECMEMK900;
    mWrCbAPI["ECMESSTC0"  ]["ECMCLSSE00100"] = &Cecm_e2_regif::cb_ECMESSTC0_ECMCLSSE00100;
    mWrCbAPI["ECMESSTC9"  ]["ECMCLSSE900"] = &Cecm_e2_regif::cb_ECMESSTC9_ECMCLSSE900;
    mWrCbAPI["ECMKCPROT"  ]["KCE"        ] = &Cecm_e2_regif::cb_ECMKCPROT_KCE;
    mWrCbAPI["ECMPE0"     ]["ECMPE00100" ] = &Cecm_e2_regif::cb_ECMPE0_ECMPE00100;
    mWrCbAPI["ECMPE9"     ]["ECMPE900"   ] = &Cecm_e2_regif::cb_ECMPE9_ECMPE900;
    mWrCbAPI["ECMDTMCTL"  ]["DTMSTP"     ] = &Cecm_e2_regif::cb_ECMDTMCTL_DTMSTP;
    mWrCbAPI["ECMDTMCMP"  ]["ECMDTMCMP"  ] = &Cecm_e2_regif::cb_ECMDTMCMP_ECMDTMCMP;
    mWrCbAPI["ECMEOCCFG"  ]["ECMEOUTCLRT"] = &Cecm_e2_regif::cb_ECMEOCCFG_ECMEOUTCLRT;
    mWrCbAPI["ECMPEM"     ]["MSKC"       ] = &Cecm_e2_regif::cb_ECMPEM_MSKC;

    mRdCbAPI["ECMDTMR"    ]["ECMDTMR"    ] = &Cecm_e2_regif::cb_ECMDTMR_ECMDTMR;

    mRdDbgCbAPI["ECMDTMR"    ]["ECMDTMR"    ] = &Cecm_e2_regif::cbDBG_ECMDTMR_ECMDTMR;

    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        str_tmp.str("");
        str_tmp<<"ECMEMK"<< mFactorIndexECMEMK[i];
        mWrCbAPI[str_tmp.str()]["ECMEMK00"] = &Cecm_e2_regif::cb_ECMEMK_ECMEMK00;
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        str_tmp.str("");
        str_tmp<<"ECMESSTC"<< mFactorIndexECMESSTC[i];
        mWrCbAPI[str_tmp.str()]["ECMCLSSE00"] = &Cecm_e2_regif::cb_ECMESSTC_ECMCLSSE00;
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        str_tmp.str("");
        str_tmp<<"ECMPE"<< mFactorIndexECMPE[i];
        mWrCbAPI[str_tmp.str()]["ECMPE00"] = &Cecm_e2_regif::cb_ECMPE_ECMPE00;
    }
    InitLocalVal();
    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Cecm_e2_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Cecm_e2_regif::~Cecm_e2_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Cecm_e2_regif::uint Cecm_e2_regif::bit_select(cuint val,    ///< [in] Writting address
                                              cuint start,  ///< [in] start bit position
                                              cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_e2_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                           const unsigned char *p_data,   ///< [in] Writing data
                           cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_e2_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                           unsigned char *p_data,   ///< [out] Reading data
                           cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_e2_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                               const unsigned char *p_data,   ///< [in] Writing data
                               cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_e2_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                               unsigned char *p_data,   ///< [out] Reading data
                               cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_e2_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                   const unsigned char *p_data,  ///< [in] Writing data
                                   cuint size,                   ///< [in] Data size (byte)
                                   bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 10-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_e2_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                   unsigned char *p_data,   ///< [out] Reading data
                                   cuint size,              ///< [in]  Data size (byte)
                                   bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 10-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cecm_e2_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                unsigned char *p_data,          ///< [out] Reading data
                                cuint size,                     ///< [in]  Data size (byte)
                                cuint reg_index,                ///< [in]  Register index
                                bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    uint pre_data = 0;
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }

    if (mIsReset) {
        re_printf("warning", "Cannot launch call-back function during reset period\n");
    } else {
        if (size < reg_length) {
            re_printf("warning","Should read all bit in a register\n");
        }
        pre_data = (uint)(*Register);
        pst_data = Register->read();
        if (!IsDbgFunc) {
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        } else {
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdDbgCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdDbgCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }

    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cecm_e2_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                const unsigned char *p_data,      ///< [in] Writing data
                                cuint size,                       ///< [in] Data size (byte)
                                cuint reg_index,                  ///< [in] Register index
                                bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc) {
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cecm_e2_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoull((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cecm_e2_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cecm_e2_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cecm_e2_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoull(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoull(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Cecm_e2_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Cecm_e2_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Cecm_e2_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif

/// Initialize local variables
/// @return none
void Cecm_e2_regif::InitLocalVal()
{
    ECMmESET_ECMmEST = 0x0;
    ECMmECLR_ECMmECT = 0x0;
    ECMmESSTR0_ECMmSSE031 = 0x0;
    ECMmESSTR0_ECMmSSE030 = 0x0;
    ECMmESSTR0_ECMmSSE029 = 0x0;
    ECMmESSTR0_ECMmSSE028 = 0x0;
    ECMmESSTR0_ECMmSSE027 = 0x0;
    ECMmESSTR0_ECMmSSE026 = 0x0;
    ECMmESSTR0_ECMmSSE025 = 0x0;
    ECMmESSTR0_ECMmSSE024 = 0x0;
    ECMmESSTR0_ECMmSSE023 = 0x0;
    ECMmESSTR0_ECMmSSE022 = 0x0;
    ECMmESSTR0_ECMmSSE021 = 0x0;
    ECMmESSTR0_ECMmSSE020 = 0x0;
    ECMmESSTR0_ECMmSSE019 = 0x0;
    ECMmESSTR0_ECMmSSE018 = 0x0;
    ECMmESSTR0_ECMmSSE017 = 0x0;
    ECMmESSTR0_ECMmSSE016 = 0x0;
    ECMmESSTR0_ECMmSSE01514 = 0x0;
    ECMmESSTR0_ECMmSSE01312 = 0x0;
    ECMmESSTR0_ECMmSSE01110 = 0x0;
    ECMmESSTR0_ECMmSSE00908 = 0x0;
    ECMmESSTR0_ECMmSSE00706 = 0x0;
    ECMmESSTR0_ECMmSSE00504 = 0x0;
    ECMmESSTR0_ECMmSSE00302 = 0x0;
    ECMmESSTR0_ECMmSSE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMmESSTR;    i++) {
        ECMmESSTR_ECMmSSE31[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE30[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE29[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE28[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE27[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE26[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE25[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE24[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE23[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE22[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE21[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE20[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE19[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE18[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE17[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE16[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE15[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE14[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE13[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE12[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE11[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE10[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE09[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE08[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE07[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE06[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE05[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE04[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE03[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE02[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE01[mFactorIndexECMmESSTR[i]] = 0x0;
        ECMmESSTR_ECMmSSE00[mFactorIndexECMmESSTR[i]] = 0x0;
    }
    ECMmESSTR9_ECMmSSE931 = 0x0;
    ECMmESSTR9_ECMmSSE930 = 0x0;
    ECMmESSTR9_ECMmSSE929 = 0x0;
    ECMmESSTR9_ECMmSSE928 = 0x0;
    ECMmESSTR9_ECMmSSE927 = 0x0;
    ECMmESSTR9_ECMmSSE926 = 0x0;
    ECMmESSTR9_ECMmSSE925 = 0x0;
    ECMmESSTR9_ECMmSSE924 = 0x0;
    ECMmESSTR9_ECMmSSE923 = 0x0;
    ECMmESSTR9_ECMmSSE922 = 0x0;
    ECMmESSTR9_ECMmSSE921 = 0x0;
    ECMmESSTR9_ECMmSSE920 = 0x0;
    ECMmESSTR9_ECMmSSE919 = 0x0;
    ECMmESSTR9_ECMmSSE918 = 0x0;
    ECMmESSTR9_ECMmSSE917 = 0x0;
    ECMmESSTR9_ECMmSSE916 = 0x0;
    ECMmESSTR9_ECMmSSE915 = 0x0;
    ECMmESSTR9_ECMmSSE914 = 0x0;
    ECMmESSTR9_ECMmSSE913 = 0x0;
    ECMmESSTR9_ECMmSSE912 = 0x0;
    ECMmESSTR9_ECMmSSE911 = 0x0;
    ECMmESSTR9_ECMmSSE910 = 0x0;
    ECMmESSTR9_ECMmSSE909 = 0x0;
    ECMmESSTR9_ECMmSSE908 = 0x0;
    ECMmESSTR9_ECMmSSE907 = 0x0;
    ECMmESSTR9_ECMmSSE906 = 0x0;
    ECMmESSTR9_ECMmSSE905 = 0x0;
    ECMmESSTR9_ECMmSSE904 = 0x0;
    ECMmESSTR9_ECMmSSE903 = 0x0;
    ECMmESSTR9_ECMmSSE902 = 0x0;
    ECMmESSTR9_ECMmSSE901 = 0x0;
    ECMmESSTR9_ECMmSSE900 = 0x0;
    ECMEPCFG_ECMSL0 = 0x0;
    ECMMICFG0_ECMMIE031 = 0x0;
    ECMMICFG0_ECMMIE030 = 0x0;
    ECMMICFG0_ECMMIE029 = 0x0;
    ECMMICFG0_ECMMIE028 = 0x0;
    ECMMICFG0_ECMMIE027 = 0x0;
    ECMMICFG0_ECMMIE026 = 0x0;
    ECMMICFG0_ECMMIE025 = 0x0;
    ECMMICFG0_ECMMIE024 = 0x0;
    ECMMICFG0_ECMMIE023 = 0x0;
    ECMMICFG0_ECMMIE022 = 0x0;
    ECMMICFG0_ECMMIE021 = 0x0;
    ECMMICFG0_ECMMIE020 = 0x0;
    ECMMICFG0_ECMMIE019 = 0x0;
    ECMMICFG0_ECMMIE018 = 0x0;
    ECMMICFG0_ECMMIE017 = 0x0;
    ECMMICFG0_ECMMIE016 = 0x0;
    ECMMICFG0_ECMMIE01514 = 0x0;
    ECMMICFG0_ECMMIE01312 = 0x0;
    ECMMICFG0_ECMMIE01110 = 0x0;
    ECMMICFG0_ECMMIE00908 = 0x0;
    ECMMICFG0_ECMMIE00706 = 0x0;
    ECMMICFG0_ECMMIE00504 = 0x0;
    ECMMICFG0_ECMMIE00302 = 0x0;
    ECMMICFG0_ECMMIE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMMICFG;     i++) {
        ECMMICFG_ECMMIE31[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE30[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE29[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE28[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE27[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE26[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE25[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE24[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE23[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE22[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE21[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE20[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE19[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE18[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE17[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE16[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE15[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE14[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE13[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE12[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE11[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE10[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE09[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE08[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE07[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE06[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE05[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE04[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE03[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE02[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE01[mFactorIndexECMMICFG[i]] = 0x0;
        ECMMICFG_ECMMIE00[mFactorIndexECMMICFG[i]] = 0x0;
    }
    ECMMICFG9_ECMMIE928 = 0x0;
    ECMMICFG9_ECMMIE927 = 0x0;
    ECMMICFG9_ECMMIE926 = 0x0;
    ECMMICFG9_ECMMIE925 = 0x0;
    ECMMICFG9_ECMMIE924 = 0x0;
    ECMMICFG9_ECMMIE923 = 0x0;
    ECMMICFG9_ECMMIE922 = 0x0;
    ECMMICFG9_ECMMIE921 = 0x0;
    ECMMICFG9_ECMMIE920 = 0x0;
    ECMMICFG9_ECMMIE919 = 0x0;
    ECMMICFG9_ECMMIE918 = 0x0;
    ECMMICFG9_ECMMIE917 = 0x0;
    ECMMICFG9_ECMMIE916 = 0x0;
    ECMMICFG9_ECMMIE915 = 0x0;
    ECMMICFG9_ECMMIE914 = 0x0;
    ECMMICFG9_ECMMIE913 = 0x0;
    ECMMICFG9_ECMMIE912 = 0x0;
    ECMMICFG9_ECMMIE911 = 0x0;
    ECMMICFG9_ECMMIE910 = 0x0;
    ECMMICFG9_ECMMIE909 = 0x0;
    ECMMICFG9_ECMMIE908 = 0x0;
    ECMMICFG9_ECMMIE907 = 0x0;
    ECMMICFG9_ECMMIE906 = 0x0;
    ECMMICFG9_ECMMIE905 = 0x0;
    ECMMICFG9_ECMMIE904 = 0x0;
    ECMMICFG9_ECMMIE903 = 0x0;
    ECMMICFG9_ECMMIE902 = 0x0;
    ECMMICFG9_ECMMIE901 = 0x0;
    ECMMICFG9_ECMMIE900 = 0x0;
    ECMNMICFG0_ECMNMIE031 = 0x0;
    ECMNMICFG0_ECMNMIE030 = 0x0;
    ECMNMICFG0_ECMNMIE029 = 0x0;
    ECMNMICFG0_ECMNMIE028 = 0x0;
    ECMNMICFG0_ECMNMIE027 = 0x0;
    ECMNMICFG0_ECMNMIE026 = 0x0;
    ECMNMICFG0_ECMNMIE025 = 0x0;
    ECMNMICFG0_ECMNMIE024 = 0x0;
    ECMNMICFG0_ECMNMIE023 = 0x0;
    ECMNMICFG0_ECMNMIE022 = 0x0;
    ECMNMICFG0_ECMNMIE021 = 0x0;
    ECMNMICFG0_ECMNMIE020 = 0x0;
    ECMNMICFG0_ECMNMIE019 = 0x0;
    ECMNMICFG0_ECMNMIE018 = 0x0;
    ECMNMICFG0_ECMNMIE017 = 0x0;
    ECMNMICFG0_ECMNMIE016 = 0x0;
    ECMNMICFG0_ECMNMIE01514 = 0x0;
    ECMNMICFG0_ECMNMIE01312 = 0x0;
    ECMNMICFG0_ECMNMIE01110 = 0x0;
    ECMNMICFG0_ECMNMIE00908 = 0x0;
    ECMNMICFG0_ECMNMIE00706 = 0x0;
    ECMNMICFG0_ECMNMIE00504 = 0x0;
    ECMNMICFG0_ECMNMIE00302 = 0x0;
    ECMNMICFG0_ECMNMIE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMNMICFG;    i++) {
        ECMNMICFG_ECMNMIE31[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE30[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE29[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE28[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE27[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE26[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE25[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE24[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE23[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE22[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE21[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE20[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE19[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE18[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE17[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE16[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE15[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE14[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE13[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE12[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE11[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE10[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE09[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE08[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE07[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE06[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE05[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE04[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE03[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE02[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE01[mFactorIndexECMNMICFG[i]] = 0x0;
        ECMNMICFG_ECMNMIE00[mFactorIndexECMNMICFG[i]] = 0x0;
    }
    ECMNMICFG9_ECMNMIE928 = 0x0;
    ECMNMICFG9_ECMNMIE927 = 0x0;
    ECMNMICFG9_ECMNMIE926 = 0x0;
    ECMNMICFG9_ECMNMIE925 = 0x0;
    ECMNMICFG9_ECMNMIE924 = 0x0;
    ECMNMICFG9_ECMNMIE923 = 0x0;
    ECMNMICFG9_ECMNMIE922 = 0x0;
    ECMNMICFG9_ECMNMIE921 = 0x0;
    ECMNMICFG9_ECMNMIE920 = 0x0;
    ECMNMICFG9_ECMNMIE919 = 0x0;
    ECMNMICFG9_ECMNMIE918 = 0x0;
    ECMNMICFG9_ECMNMIE917 = 0x0;
    ECMNMICFG9_ECMNMIE916 = 0x0;
    ECMNMICFG9_ECMNMIE915 = 0x0;
    ECMNMICFG9_ECMNMIE914 = 0x0;
    ECMNMICFG9_ECMNMIE913 = 0x0;
    ECMNMICFG9_ECMNMIE912 = 0x0;
    ECMNMICFG9_ECMNMIE911 = 0x0;
    ECMNMICFG9_ECMNMIE910 = 0x0;
    ECMNMICFG9_ECMNMIE909 = 0x0;
    ECMNMICFG9_ECMNMIE908 = 0x0;
    ECMNMICFG9_ECMNMIE907 = 0x0;
    ECMNMICFG9_ECMNMIE906 = 0x0;
    ECMNMICFG9_ECMNMIE905 = 0x0;
    ECMNMICFG9_ECMNMIE904 = 0x0;
    ECMNMICFG9_ECMNMIE903 = 0x0;
    ECMNMICFG9_ECMNMIE902 = 0x0;
    ECMNMICFG9_ECMNMIE901 = 0x0;
    ECMNMICFG9_ECMNMIE900 = 0x0;
    ECMIRCFG0_ECMIRE031 = 0x0;
    ECMIRCFG0_ECMIRE030 = 0x0;
    ECMIRCFG0_ECMIRE029 = 0x0;
    ECMIRCFG0_ECMIRE028 = 0x0;
    ECMIRCFG0_ECMIRE027 = 0x0;
    ECMIRCFG0_ECMIRE026 = 0x0;
    ECMIRCFG0_ECMIRE025 = 0x0;
    ECMIRCFG0_ECMIRE024 = 0x0;
    ECMIRCFG0_ECMIRE023 = 0x0;
    ECMIRCFG0_ECMIRE022 = 0x0;
    ECMIRCFG0_ECMIRE021 = 0x0;
    ECMIRCFG0_ECMIRE020 = 0x0;
    ECMIRCFG0_ECMIRE019 = 0x0;
    ECMIRCFG0_ECMIRE018 = 0x0;
    ECMIRCFG0_ECMIRE017 = 0x0;
    ECMIRCFG0_ECMIRE016 = 0x1;
    ECMIRCFG0_ECMIRE01514 = 0x0;
    ECMIRCFG0_ECMIRE01312 = 0x0;
    ECMIRCFG0_ECMIRE01110 = 0x0;
    ECMIRCFG0_ECMIRE00908 = 0x0;
    ECMIRCFG0_ECMIRE00706 = 0x0;
    ECMIRCFG0_ECMIRE00504 = 0x0;
    ECMIRCFG0_ECMIRE00302 = 0x0;
    ECMIRCFG0_ECMIRE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMIRCFG;     i++) {
        ECMIRCFG_ECMIRE31[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE30[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE29[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE28[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE27[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE26[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE25[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE24[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE23[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE22[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE21[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE20[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE19[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE18[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE17[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE16[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE15[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE14[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE13[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE12[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE11[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE10[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE09[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE08[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE07[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE06[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE05[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE04[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE03[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE02[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE01[mFactorIndexECMIRCFG[i]] = 0x0;
        ECMIRCFG_ECMIRE00[mFactorIndexECMIRCFG[i]] = 0x0;
    }
    ECMIRCFG9_ECMIRE929 = 0x0;
    ECMIRCFG9_ECMIRE928 = 0x0;
    ECMIRCFG9_ECMIRE927 = 0x0;
    ECMIRCFG9_ECMIRE926 = 0x0;
    ECMIRCFG9_ECMIRE925 = 0x0;
    ECMIRCFG9_ECMIRE924 = 0x0;
    ECMIRCFG9_ECMIRE923 = 0x0;
    ECMIRCFG9_ECMIRE922 = 0x0;
    ECMIRCFG9_ECMIRE921 = 0x0;
    ECMIRCFG9_ECMIRE920 = 0x0;
    ECMIRCFG9_ECMIRE919 = 0x0;
    ECMIRCFG9_ECMIRE918 = 0x0;
    ECMIRCFG9_ECMIRE917 = 0x0;
    ECMIRCFG9_ECMIRE916 = 0x0;
    ECMIRCFG9_ECMIRE915 = 0x0;
    ECMIRCFG9_ECMIRE914 = 0x0;
    ECMIRCFG9_ECMIRE913 = 0x0;
    ECMIRCFG9_ECMIRE912 = 0x0;
    ECMIRCFG9_ECMIRE911 = 0x0;
    ECMIRCFG9_ECMIRE910 = 0x0;
    ECMIRCFG9_ECMIRE909 = 0x0;
    ECMIRCFG9_ECMIRE908 = 0x0;
    ECMIRCFG9_ECMIRE907 = 0x0;
    ECMIRCFG9_ECMIRE906 = 0x0;
    ECMIRCFG9_ECMIRE905 = 0x0;
    ECMIRCFG9_ECMIRE904 = 0x0;
    ECMIRCFG9_ECMIRE903 = 0x0;
    ECMIRCFG9_ECMIRE902 = 0x0;
    ECMIRCFG9_ECMIRE901 = 0x0;
    ECMIRCFG9_ECMIRE900 = 0x0;
    ECMEMK0_ECMEMK031 = 0x0;
    ECMEMK0_ECMEMK030 = 0x0;
    ECMEMK0_ECMEMK029 = 0x0;
    ECMEMK0_ECMEMK028 = 0x0;
    ECMEMK0_ECMEMK027 = 0x0;
    ECMEMK0_ECMEMK026 = 0x0;
    ECMEMK0_ECMEMK025 = 0x0;
    ECMEMK0_ECMEMK024 = 0x0;
    ECMEMK0_ECMEMK023 = 0x0;
    ECMEMK0_ECMEMK022 = 0x0;
    ECMEMK0_ECMEMK021 = 0x0;
    ECMEMK0_ECMEMK020 = 0x0;
    ECMEMK0_ECMEMK019 = 0x0;
    ECMEMK0_ECMEMK018 = 0x0;
    ECMEMK0_ECMEMK017 = 0x0;
    ECMEMK0_ECMEMK016 = 0x0;
    ECMEMK0_ECMEMK01514 = 0x0;
    ECMEMK0_ECMEMK01312 = 0x0;
    ECMEMK0_ECMEMK01110 = 0x0;
    ECMEMK0_ECMEMK00908 = 0x0;
    ECMEMK0_ECMEMK00706 = 0x0;
    ECMEMK0_ECMEMK00504 = 0x0;
    ECMEMK0_ECMEMK00302 = 0x0;
    ECMEMK0_ECMEMK00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMEMK;       i++) {
        ECMEMK_ECMEMK31[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK30[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK29[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK28[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK27[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK26[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK25[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK24[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK23[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK22[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK21[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK20[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK19[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK18[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK17[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK16[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK15[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK14[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK13[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK12[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK11[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK10[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK09[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK08[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK07[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK06[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK05[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK04[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK03[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK02[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK01[mFactorIndexECMEMK[i]] = 0x0;
        ECMEMK_ECMEMK00[mFactorIndexECMEMK[i]] = 0x0;
    }
    ECMEMK9_ECMEMK931 = 0x0;
    ECMEMK9_ECMEMK930 = 0x0;
    ECMEMK9_ECMEMK929 = 0x0;
    ECMEMK9_ECMEMK928 = 0x0;
    ECMEMK9_ECMEMK927 = 0x0;
    ECMEMK9_ECMEMK926 = 0x0;
    ECMEMK9_ECMEMK925 = 0x0;
    ECMEMK9_ECMEMK924 = 0x0;
    ECMEMK9_ECMEMK923 = 0x0;
    ECMEMK9_ECMEMK922 = 0x0;
    ECMEMK9_ECMEMK921 = 0x0;
    ECMEMK9_ECMEMK920 = 0x0;
    ECMEMK9_ECMEMK919 = 0x0;
    ECMEMK9_ECMEMK918 = 0x0;
    ECMEMK9_ECMEMK917 = 0x0;
    ECMEMK9_ECMEMK916 = 0x0;
    ECMEMK9_ECMEMK915 = 0x0;
    ECMEMK9_ECMEMK914 = 0x0;
    ECMEMK9_ECMEMK913 = 0x0;
    ECMEMK9_ECMEMK912 = 0x0;
    ECMEMK9_ECMEMK911 = 0x0;
    ECMEMK9_ECMEMK910 = 0x0;
    ECMEMK9_ECMEMK909 = 0x0;
    ECMEMK9_ECMEMK908 = 0x0;
    ECMEMK9_ECMEMK907 = 0x0;
    ECMEMK9_ECMEMK906 = 0x0;
    ECMEMK9_ECMEMK905 = 0x0;
    ECMEMK9_ECMEMK904 = 0x0;
    ECMEMK9_ECMEMK903 = 0x0;
    ECMEMK9_ECMEMK902 = 0x0;
    ECMEMK9_ECMEMK901 = 0x0;
    ECMEMK9_ECMEMK900 = 0x0;
    ECMESSTC0_ECMCLSSE031 = 0x0;
    ECMESSTC0_ECMCLSSE030 = 0x0;
    ECMESSTC0_ECMCLSSE029 = 0x0;
    ECMESSTC0_ECMCLSSE028 = 0x0;
    ECMESSTC0_ECMCLSSE027 = 0x0;
    ECMESSTC0_ECMCLSSE026 = 0x0;
    ECMESSTC0_ECMCLSSE025 = 0x0;
    ECMESSTC0_ECMCLSSE024 = 0x0;
    ECMESSTC0_ECMCLSSE023 = 0x0;
    ECMESSTC0_ECMCLSSE022 = 0x0;
    ECMESSTC0_ECMCLSSE021 = 0x0;
    ECMESSTC0_ECMCLSSE020 = 0x0;
    ECMESSTC0_ECMCLSSE019 = 0x0;
    ECMESSTC0_ECMCLSSE018 = 0x0;
    ECMESSTC0_ECMCLSSE017 = 0x0;
    ECMESSTC0_ECMCLSSE016 = 0x0;
    ECMESSTC0_ECMCLSSE01514 = 0x0;
    ECMESSTC0_ECMCLSSE01312 = 0x0;
    ECMESSTC0_ECMCLSSE01110 = 0x0;
    ECMESSTC0_ECMCLSSE00908 = 0x0;
    ECMESSTC0_ECMCLSSE00706 = 0x0;
    ECMESSTC0_ECMCLSSE00504 = 0x0;
    ECMESSTC0_ECMCLSSE00302 = 0x0;
    ECMESSTC0_ECMCLSSE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMESSTC;     i++) {
        ECMESSTC_ECMCLSSE31[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE30[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE29[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE28[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE27[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE26[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE25[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE24[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE23[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE22[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE21[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE20[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE19[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE18[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE17[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE16[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE15[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE14[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE13[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE12[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE11[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE10[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE09[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE08[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE07[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE06[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE05[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE04[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE03[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE02[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE01[mFactorIndexECMESSTC[i]] = 0x0;
        ECMESSTC_ECMCLSSE00[mFactorIndexECMESSTC[i]] = 0x0;
    }
    ECMESSTC9_ECMCLSSE930 = 0x0;
    ECMESSTC9_ECMCLSSE929 = 0x0;
    ECMESSTC9_ECMCLSSE928 = 0x0;
    ECMESSTC9_ECMCLSSE927 = 0x0;
    ECMESSTC9_ECMCLSSE926 = 0x0;
    ECMESSTC9_ECMCLSSE925 = 0x0;
    ECMESSTC9_ECMCLSSE924 = 0x0;
    ECMESSTC9_ECMCLSSE923 = 0x0;
    ECMESSTC9_ECMCLSSE922 = 0x0;
    ECMESSTC9_ECMCLSSE921 = 0x0;
    ECMESSTC9_ECMCLSSE920 = 0x0;
    ECMESSTC9_ECMCLSSE919 = 0x0;
    ECMESSTC9_ECMCLSSE918 = 0x0;
    ECMESSTC9_ECMCLSSE917 = 0x0;
    ECMESSTC9_ECMCLSSE916 = 0x0;
    ECMESSTC9_ECMCLSSE915 = 0x0;
    ECMESSTC9_ECMCLSSE914 = 0x0;
    ECMESSTC9_ECMCLSSE913 = 0x0;
    ECMESSTC9_ECMCLSSE912 = 0x0;
    ECMESSTC9_ECMCLSSE911 = 0x0;
    ECMESSTC9_ECMCLSSE910 = 0x0;
    ECMESSTC9_ECMCLSSE909 = 0x0;
    ECMESSTC9_ECMCLSSE908 = 0x0;
    ECMESSTC9_ECMCLSSE907 = 0x0;
    ECMESSTC9_ECMCLSSE906 = 0x0;
    ECMESSTC9_ECMCLSSE905 = 0x0;
    ECMESSTC9_ECMCLSSE904 = 0x0;
    ECMESSTC9_ECMCLSSE903 = 0x0;
    ECMESSTC9_ECMCLSSE902 = 0x0;
    ECMESSTC9_ECMCLSSE901 = 0x0;
    ECMESSTC9_ECMCLSSE900 = 0x0;
    ECMKCPROT_KCPROT = 0x0;
    ECMKCPROT_KCE   = 0x0;
    ECMPE0_ECMPE031 = 0x0;
    ECMPE0_ECMPE030 = 0x0;
    ECMPE0_ECMPE029 = 0x0;
    ECMPE0_ECMPE028 = 0x0;
    ECMPE0_ECMPE027 = 0x0;
    ECMPE0_ECMPE026 = 0x0;
    ECMPE0_ECMPE025 = 0x0;
    ECMPE0_ECMPE024 = 0x0;
    ECMPE0_ECMPE023 = 0x0;
    ECMPE0_ECMPE022 = 0x0;
    ECMPE0_ECMPE021 = 0x0;
    ECMPE0_ECMPE020 = 0x0;
    ECMPE0_ECMPE019 = 0x0;
    ECMPE0_ECMPE018 = 0x0;
    ECMPE0_ECMPE017 = 0x0;
    ECMPE0_ECMPE016 = 0x0;
    ECMPE0_ECMPE01514 = 0x0;
    ECMPE0_ECMPE01312 = 0x0;
    ECMPE0_ECMPE01110 = 0x0;
    ECMPE0_ECMPE00908 = 0x0;
    ECMPE0_ECMPE00706 = 0x0;
    ECMPE0_ECMPE00504 = 0x0;
    ECMPE0_ECMPE00302 = 0x0;
    ECMPE0_ECMPE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMPE;        i++) {
        ECMPE_ECMPE31  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE30  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE29  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE28  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE27  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE26  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE25  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE24  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE23  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE22  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE21  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE20  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE19  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE18  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE17  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE16  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE15  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE14  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE13  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE12  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE11  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE10  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE09  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE08  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE07  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE06  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE05  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE04  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE03  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE02  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE01  [mFactorIndexECMPE[i]] = 0x0;
        ECMPE_ECMPE00  [mFactorIndexECMPE[i]] = 0x0;
    }
    ECMPE9_ECMPE929 = 0x0;
    ECMPE9_ECMPE928 = 0x0;
    ECMPE9_ECMPE927 = 0x0;
    ECMPE9_ECMPE926 = 0x0;
    ECMPE9_ECMPE925 = 0x0;
    ECMPE9_ECMPE924 = 0x0;
    ECMPE9_ECMPE923 = 0x0;
    ECMPE9_ECMPE922 = 0x0;
    ECMPE9_ECMPE921 = 0x0;
    ECMPE9_ECMPE920 = 0x0;
    ECMPE9_ECMPE919 = 0x0;
    ECMPE9_ECMPE918 = 0x0;
    ECMPE9_ECMPE917 = 0x0;
    ECMPE9_ECMPE916 = 0x0;
    ECMPE9_ECMPE915 = 0x0;
    ECMPE9_ECMPE914 = 0x0;
    ECMPE9_ECMPE913 = 0x0;
    ECMPE9_ECMPE912 = 0x0;
    ECMPE9_ECMPE911 = 0x0;
    ECMPE9_ECMPE910 = 0x0;
    ECMPE9_ECMPE909 = 0x0;
    ECMPE9_ECMPE908 = 0x0;
    ECMPE9_ECMPE907 = 0x0;
    ECMPE9_ECMPE906 = 0x0;
    ECMPE9_ECMPE905 = 0x0;
    ECMPE9_ECMPE904 = 0x0;
    ECMPE9_ECMPE903 = 0x0;
    ECMPE9_ECMPE902 = 0x0;
    ECMPE9_ECMPE901 = 0x0;
    ECMPE9_ECMPE900 = 0x0;
    ECMDTMCTL_DTMSTACNTCLK = 0x0;
    ECMDTMCTL_DTMSTP = 0x0;
    ECMDTMCTL_DTMSTA = 0x0;
    ECMDTMR_ECMDTMR = 0x0;
    ECMDTMCMP_CMPW  = 0x0;
    ECMDTMCMP_ECMDTMCMP = 0x0;
    ECMMIDTMCFG0_ECMMITE031 = 0x0;
    ECMMIDTMCFG0_ECMMITE030 = 0x0;
    ECMMIDTMCFG0_ECMMITE029 = 0x0;
    ECMMIDTMCFG0_ECMMITE028 = 0x0;
    ECMMIDTMCFG0_ECMMITE027 = 0x0;
    ECMMIDTMCFG0_ECMMITE026 = 0x0;
    ECMMIDTMCFG0_ECMMITE025 = 0x0;
    ECMMIDTMCFG0_ECMMITE024 = 0x0;
    ECMMIDTMCFG0_ECMMITE023 = 0x0;
    ECMMIDTMCFG0_ECMMITE022 = 0x0;
    ECMMIDTMCFG0_ECMMITE021 = 0x0;
    ECMMIDTMCFG0_ECMMITE020 = 0x0;
    ECMMIDTMCFG0_ECMMITE019 = 0x0;
    ECMMIDTMCFG0_ECMMITE018 = 0x0;
    ECMMIDTMCFG0_ECMMITE017 = 0x0;
    ECMMIDTMCFG0_ECMMITE016 = 0x0;
    ECMMIDTMCFG0_ECMMITE01514 = 0x0;
    ECMMIDTMCFG0_ECMMITE01312 = 0x0;
    ECMMIDTMCFG0_ECMMITE01110 = 0x0;
    ECMMIDTMCFG0_ECMMITE00908 = 0x0;
    ECMMIDTMCFG0_ECMMITE00706 = 0x0;
    ECMMIDTMCFG0_ECMMITE00504 = 0x0;
    ECMMIDTMCFG0_ECMMITE00302 = 0x0;
    ECMMIDTMCFG0_ECMMITE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMMIDTMCFG;  i++) {
        ECMMIDTMCFG_ECMMITE31[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE30[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE29[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE28[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE27[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE26[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE25[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE24[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE23[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE22[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE21[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE20[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE19[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE18[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE17[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE16[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE15[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE14[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE13[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE12[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE11[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE10[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE09[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE08[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE07[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE06[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE05[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE04[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE03[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE02[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE01[mFactorIndexECMMIDTMCFG[i]] = 0x0;
        ECMMIDTMCFG_ECMMITE00[mFactorIndexECMMIDTMCFG[i]] = 0x0;
    }
    ECMMIDTMCFG9_ECMMITE928 = 0x0;
    ECMMIDTMCFG9_ECMMITE927 = 0x0;
    ECMMIDTMCFG9_ECMMITE926 = 0x0;
    ECMMIDTMCFG9_ECMMITE925 = 0x0;
    ECMMIDTMCFG9_ECMMITE924 = 0x0;
    ECMMIDTMCFG9_ECMMITE923 = 0x0;
    ECMMIDTMCFG9_ECMMITE922 = 0x0;
    ECMMIDTMCFG9_ECMMITE921 = 0x0;
    ECMMIDTMCFG9_ECMMITE920 = 0x0;
    ECMMIDTMCFG9_ECMMITE919 = 0x0;
    ECMMIDTMCFG9_ECMMITE918 = 0x0;
    ECMMIDTMCFG9_ECMMITE917 = 0x0;
    ECMMIDTMCFG9_ECMMITE916 = 0x0;
    ECMMIDTMCFG9_ECMMITE915 = 0x0;
    ECMMIDTMCFG9_ECMMITE914 = 0x0;
    ECMMIDTMCFG9_ECMMITE913 = 0x0;
    ECMMIDTMCFG9_ECMMITE912 = 0x0;
    ECMMIDTMCFG9_ECMMITE911 = 0x0;
    ECMMIDTMCFG9_ECMMITE910 = 0x0;
    ECMMIDTMCFG9_ECMMITE909 = 0x0;
    ECMMIDTMCFG9_ECMMITE908 = 0x0;
    ECMMIDTMCFG9_ECMMITE907 = 0x0;
    ECMMIDTMCFG9_ECMMITE906 = 0x0;
    ECMMIDTMCFG9_ECMMITE905 = 0x0;
    ECMMIDTMCFG9_ECMMITE904 = 0x0;
    ECMMIDTMCFG9_ECMMITE903 = 0x0;
    ECMMIDTMCFG9_ECMMITE902 = 0x0;
    ECMMIDTMCFG9_ECMMITE901 = 0x0;
    ECMMIDTMCFG9_ECMMITE900 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE031 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE030 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE029 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE028 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE027 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE026 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE025 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE024 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE023 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE022 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE021 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE020 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE019 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE018 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE017 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE016 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE01514 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE01312 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE01110 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE00908 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE00706 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE00504 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE00302 = 0x0;
    ECMNMIDTMCFG0_ECMNMITE00100 = 0x0;
    for(uint i = 0; i < emNUM_ECMNMIDTMCFG; i++) {
        ECMNMIDTMCFG_ECMNMITE31[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE30[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE29[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE28[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE27[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE26[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE25[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE24[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE23[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE22[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE21[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE20[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE19[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE18[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE17[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE16[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE15[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE14[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE13[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE12[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE11[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE10[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE09[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE08[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE07[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE06[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE05[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE04[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE03[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE02[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE01[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
        ECMNMIDTMCFG_ECMNMITE00[mFactorIndexECMNMIDTMCFG[i]] = 0x0;
    }
    ECMNMIDTMCFG9_ECMNMITE928 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE927 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE926 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE925 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE924 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE923 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE922 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE921 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE920 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE919 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE918 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE917 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE916 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE915 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE914 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE913 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE912 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE911 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE910 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE909 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE908 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE907 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE906 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE905 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE904 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE903 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE902 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE901 = 0x0;
    ECMNMIDTMCFG9_ECMNMITE900 = 0x0;
    ECMEOCCFG_EOCIEN = 0x0;
    ECMEOCCFG_CMPW  = 0x0;
    ECMEOCCFG_ECMEOUTCLRT = 0x0;
    ECMPEM_MSKM     = 0x0;
    ECMPEM_MSKC     = 0x0;
}

/// Update bit value to local value
/// @return None
void Cecm_e2_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ECMmESET_ECMmEST                  = (*ECMmESET     )["ECMmEST"      ];
        return;
    }
    if (addr == 0x0004) {
        ECMmECLR_ECMmECT                  = (*ECMmECLR     )["ECMmECT"      ];
        return;
    }
    if (addr == 0x0008) {
        ECMmESSTR0_ECMmSSE031             = (*ECMmESSTR0   )["ECMmSSE031"   ];
        ECMmESSTR0_ECMmSSE030             = (*ECMmESSTR0   )["ECMmSSE030"   ];
        ECMmESSTR0_ECMmSSE029             = (*ECMmESSTR0   )["ECMmSSE029"   ];
        ECMmESSTR0_ECMmSSE028             = (*ECMmESSTR0   )["ECMmSSE028"   ];
        ECMmESSTR0_ECMmSSE027             = (*ECMmESSTR0   )["ECMmSSE027"   ];
        ECMmESSTR0_ECMmSSE026             = (*ECMmESSTR0   )["ECMmSSE026"   ];
        ECMmESSTR0_ECMmSSE025             = (*ECMmESSTR0   )["ECMmSSE025"   ];
        ECMmESSTR0_ECMmSSE024             = (*ECMmESSTR0   )["ECMmSSE024"   ];
        ECMmESSTR0_ECMmSSE023             = (*ECMmESSTR0   )["ECMmSSE023"   ];
        ECMmESSTR0_ECMmSSE022             = (*ECMmESSTR0   )["ECMmSSE022"   ];
        ECMmESSTR0_ECMmSSE021             = (*ECMmESSTR0   )["ECMmSSE021"   ];
        ECMmESSTR0_ECMmSSE020             = (*ECMmESSTR0   )["ECMmSSE020"   ];
        ECMmESSTR0_ECMmSSE019             = (*ECMmESSTR0   )["ECMmSSE019"   ];
        ECMmESSTR0_ECMmSSE018             = (*ECMmESSTR0   )["ECMmSSE018"   ];
        ECMmESSTR0_ECMmSSE017             = (*ECMmESSTR0   )["ECMmSSE017"   ];
        ECMmESSTR0_ECMmSSE016             = (*ECMmESSTR0   )["ECMmSSE016"   ];
        ECMmESSTR0_ECMmSSE01514           = (*ECMmESSTR0   )["ECMmSSE01514" ];
        ECMmESSTR0_ECMmSSE01312           = (*ECMmESSTR0   )["ECMmSSE01312" ];
        ECMmESSTR0_ECMmSSE01110           = (*ECMmESSTR0   )["ECMmSSE01110" ];
        ECMmESSTR0_ECMmSSE00908           = (*ECMmESSTR0   )["ECMmSSE00908" ];
        ECMmESSTR0_ECMmSSE00706           = (*ECMmESSTR0   )["ECMmSSE00706" ];
        ECMmESSTR0_ECMmSSE00504           = (*ECMmESSTR0   )["ECMmSSE00504" ];
        ECMmESSTR0_ECMmSSE00302           = (*ECMmESSTR0   )["ECMmSSE00302" ];
        ECMmESSTR0_ECMmSSE00100           = (*ECMmESSTR0   )["ECMmSSE00100" ];
        return;
    }
    if ((0x000C <= addr) && (addr <= (0x000C)+(4*7)) && ((addr-0x000C)%4 == 0) ) {
        uint i = (addr - 0x000C)/4 + 1;
        ECMmESSTR_ECMmSSE31              [i] = (*(ECMmESSTR    [i]))["ECMmSSE31"    ];
        ECMmESSTR_ECMmSSE30              [i] = (*(ECMmESSTR    [i]))["ECMmSSE30"    ];
        ECMmESSTR_ECMmSSE29              [i] = (*(ECMmESSTR    [i]))["ECMmSSE29"    ];
        ECMmESSTR_ECMmSSE28              [i] = (*(ECMmESSTR    [i]))["ECMmSSE28"    ];
        ECMmESSTR_ECMmSSE27              [i] = (*(ECMmESSTR    [i]))["ECMmSSE27"    ];
        ECMmESSTR_ECMmSSE26              [i] = (*(ECMmESSTR    [i]))["ECMmSSE26"    ];
        ECMmESSTR_ECMmSSE25              [i] = (*(ECMmESSTR    [i]))["ECMmSSE25"    ];
        ECMmESSTR_ECMmSSE24              [i] = (*(ECMmESSTR    [i]))["ECMmSSE24"    ];
        ECMmESSTR_ECMmSSE23              [i] = (*(ECMmESSTR    [i]))["ECMmSSE23"    ];
        ECMmESSTR_ECMmSSE22              [i] = (*(ECMmESSTR    [i]))["ECMmSSE22"    ];
        ECMmESSTR_ECMmSSE21              [i] = (*(ECMmESSTR    [i]))["ECMmSSE21"    ];
        ECMmESSTR_ECMmSSE20              [i] = (*(ECMmESSTR    [i]))["ECMmSSE20"    ];
        ECMmESSTR_ECMmSSE19              [i] = (*(ECMmESSTR    [i]))["ECMmSSE19"    ];
        ECMmESSTR_ECMmSSE18              [i] = (*(ECMmESSTR    [i]))["ECMmSSE18"    ];
        ECMmESSTR_ECMmSSE17              [i] = (*(ECMmESSTR    [i]))["ECMmSSE17"    ];
        ECMmESSTR_ECMmSSE16              [i] = (*(ECMmESSTR    [i]))["ECMmSSE16"    ];
        ECMmESSTR_ECMmSSE15              [i] = (*(ECMmESSTR    [i]))["ECMmSSE15"    ];
        ECMmESSTR_ECMmSSE14              [i] = (*(ECMmESSTR    [i]))["ECMmSSE14"    ];
        ECMmESSTR_ECMmSSE13              [i] = (*(ECMmESSTR    [i]))["ECMmSSE13"    ];
        ECMmESSTR_ECMmSSE12              [i] = (*(ECMmESSTR    [i]))["ECMmSSE12"    ];
        ECMmESSTR_ECMmSSE11              [i] = (*(ECMmESSTR    [i]))["ECMmSSE11"    ];
        ECMmESSTR_ECMmSSE10              [i] = (*(ECMmESSTR    [i]))["ECMmSSE10"    ];
        ECMmESSTR_ECMmSSE09              [i] = (*(ECMmESSTR    [i]))["ECMmSSE09"    ];
        ECMmESSTR_ECMmSSE08              [i] = (*(ECMmESSTR    [i]))["ECMmSSE08"    ];
        ECMmESSTR_ECMmSSE07              [i] = (*(ECMmESSTR    [i]))["ECMmSSE07"    ];
        ECMmESSTR_ECMmSSE06              [i] = (*(ECMmESSTR    [i]))["ECMmSSE06"    ];
        ECMmESSTR_ECMmSSE05              [i] = (*(ECMmESSTR    [i]))["ECMmSSE05"    ];
        ECMmESSTR_ECMmSSE04              [i] = (*(ECMmESSTR    [i]))["ECMmSSE04"    ];
        ECMmESSTR_ECMmSSE03              [i] = (*(ECMmESSTR    [i]))["ECMmSSE03"    ];
        ECMmESSTR_ECMmSSE02              [i] = (*(ECMmESSTR    [i]))["ECMmSSE02"    ];
        ECMmESSTR_ECMmSSE01              [i] = (*(ECMmESSTR    [i]))["ECMmSSE01"    ];
        ECMmESSTR_ECMmSSE00              [i] = (*(ECMmESSTR    [i]))["ECMmSSE00"    ];
        return;
    }
    if (addr == 0x002C) {
        ECMmESSTR9_ECMmSSE931             = (*ECMmESSTR9   )["ECMmSSE931"   ];
        ECMmESSTR9_ECMmSSE930             = (*ECMmESSTR9   )["ECMmSSE930"   ];
        ECMmESSTR9_ECMmSSE929             = (*ECMmESSTR9   )["ECMmSSE929"   ];
        ECMmESSTR9_ECMmSSE928             = (*ECMmESSTR9   )["ECMmSSE928"   ];
        ECMmESSTR9_ECMmSSE927             = (*ECMmESSTR9   )["ECMmSSE927"   ];
        ECMmESSTR9_ECMmSSE926             = (*ECMmESSTR9   )["ECMmSSE926"   ];
        ECMmESSTR9_ECMmSSE925             = (*ECMmESSTR9   )["ECMmSSE925"   ];
        ECMmESSTR9_ECMmSSE924             = (*ECMmESSTR9   )["ECMmSSE924"   ];
        ECMmESSTR9_ECMmSSE923             = (*ECMmESSTR9   )["ECMmSSE923"   ];
        ECMmESSTR9_ECMmSSE922             = (*ECMmESSTR9   )["ECMmSSE922"   ];
        ECMmESSTR9_ECMmSSE921             = (*ECMmESSTR9   )["ECMmSSE921"   ];
        ECMmESSTR9_ECMmSSE920             = (*ECMmESSTR9   )["ECMmSSE920"   ];
        ECMmESSTR9_ECMmSSE919             = (*ECMmESSTR9   )["ECMmSSE919"   ];
        ECMmESSTR9_ECMmSSE918             = (*ECMmESSTR9   )["ECMmSSE918"   ];
        ECMmESSTR9_ECMmSSE917             = (*ECMmESSTR9   )["ECMmSSE917"   ];
        ECMmESSTR9_ECMmSSE916             = (*ECMmESSTR9   )["ECMmSSE916"   ];
        ECMmESSTR9_ECMmSSE915             = (*ECMmESSTR9   )["ECMmSSE915"   ];
        ECMmESSTR9_ECMmSSE914             = (*ECMmESSTR9   )["ECMmSSE914"   ];
        ECMmESSTR9_ECMmSSE913             = (*ECMmESSTR9   )["ECMmSSE913"   ];
        ECMmESSTR9_ECMmSSE912             = (*ECMmESSTR9   )["ECMmSSE912"   ];
        ECMmESSTR9_ECMmSSE911             = (*ECMmESSTR9   )["ECMmSSE911"   ];
        ECMmESSTR9_ECMmSSE910             = (*ECMmESSTR9   )["ECMmSSE910"   ];
        ECMmESSTR9_ECMmSSE909             = (*ECMmESSTR9   )["ECMmSSE909"   ];
        ECMmESSTR9_ECMmSSE908             = (*ECMmESSTR9   )["ECMmSSE908"   ];
        ECMmESSTR9_ECMmSSE907             = (*ECMmESSTR9   )["ECMmSSE907"   ];
        ECMmESSTR9_ECMmSSE906             = (*ECMmESSTR9   )["ECMmSSE906"   ];
        ECMmESSTR9_ECMmSSE905             = (*ECMmESSTR9   )["ECMmSSE905"   ];
        ECMmESSTR9_ECMmSSE904             = (*ECMmESSTR9   )["ECMmSSE904"   ];
        ECMmESSTR9_ECMmSSE903             = (*ECMmESSTR9   )["ECMmSSE903"   ];
        ECMmESSTR9_ECMmSSE902             = (*ECMmESSTR9   )["ECMmSSE902"   ];
        ECMmESSTR9_ECMmSSE901             = (*ECMmESSTR9   )["ECMmSSE901"   ];
        ECMmESSTR9_ECMmSSE900             = (*ECMmESSTR9   )["ECMmSSE900"   ];
        return;
    }
    if (addr == 0x0100) {
        ECMEPCFG_ECMSL0                   = (*ECMEPCFG     )["ECMSL0"       ];
        return;
    }
    if (addr == 0x0104) {
        ECMMICFG0_ECMMIE031               = (*ECMMICFG0    )["ECMMIE031"    ];
        ECMMICFG0_ECMMIE030               = (*ECMMICFG0    )["ECMMIE030"    ];
        ECMMICFG0_ECMMIE029               = (*ECMMICFG0    )["ECMMIE029"    ];
        ECMMICFG0_ECMMIE028               = (*ECMMICFG0    )["ECMMIE028"    ];
        ECMMICFG0_ECMMIE027               = (*ECMMICFG0    )["ECMMIE027"    ];
        ECMMICFG0_ECMMIE026               = (*ECMMICFG0    )["ECMMIE026"    ];
        ECMMICFG0_ECMMIE025               = (*ECMMICFG0    )["ECMMIE025"    ];
        ECMMICFG0_ECMMIE024               = (*ECMMICFG0    )["ECMMIE024"    ];
        ECMMICFG0_ECMMIE023               = (*ECMMICFG0    )["ECMMIE023"    ];
        ECMMICFG0_ECMMIE022               = (*ECMMICFG0    )["ECMMIE022"    ];
        ECMMICFG0_ECMMIE021               = (*ECMMICFG0    )["ECMMIE021"    ];
        ECMMICFG0_ECMMIE020               = (*ECMMICFG0    )["ECMMIE020"    ];
        ECMMICFG0_ECMMIE019               = (*ECMMICFG0    )["ECMMIE019"    ];
        ECMMICFG0_ECMMIE018               = (*ECMMICFG0    )["ECMMIE018"    ];
        ECMMICFG0_ECMMIE017               = (*ECMMICFG0    )["ECMMIE017"    ];
        ECMMICFG0_ECMMIE016               = (*ECMMICFG0    )["ECMMIE016"    ];
        ECMMICFG0_ECMMIE01514             = (*ECMMICFG0    )["ECMMIE01514"  ];
        ECMMICFG0_ECMMIE01312             = (*ECMMICFG0    )["ECMMIE01312"  ];
        ECMMICFG0_ECMMIE01110             = (*ECMMICFG0    )["ECMMIE01110"  ];
        ECMMICFG0_ECMMIE00908             = (*ECMMICFG0    )["ECMMIE00908"  ];
        ECMMICFG0_ECMMIE00706             = (*ECMMICFG0    )["ECMMIE00706"  ];
        ECMMICFG0_ECMMIE00504             = (*ECMMICFG0    )["ECMMIE00504"  ];
        ECMMICFG0_ECMMIE00302             = (*ECMMICFG0    )["ECMMIE00302"  ];
        ECMMICFG0_ECMMIE00100             = (*ECMMICFG0    )["ECMMIE00100"  ];
        return;
    }
    if ((0x0108 <= addr) && (addr <= (0x0108)+(4*7)) && ((addr-0x0108)%4 == 0) ) {
        uint i = (addr - 0x0108)/4 + 1;
        ECMMICFG_ECMMIE31                [i] = (*(ECMMICFG     [i]))["ECMMIE31"     ];
        ECMMICFG_ECMMIE30                [i] = (*(ECMMICFG     [i]))["ECMMIE30"     ];
        ECMMICFG_ECMMIE29                [i] = (*(ECMMICFG     [i]))["ECMMIE29"     ];
        ECMMICFG_ECMMIE28                [i] = (*(ECMMICFG     [i]))["ECMMIE28"     ];
        ECMMICFG_ECMMIE27                [i] = (*(ECMMICFG     [i]))["ECMMIE27"     ];
        ECMMICFG_ECMMIE26                [i] = (*(ECMMICFG     [i]))["ECMMIE26"     ];
        ECMMICFG_ECMMIE25                [i] = (*(ECMMICFG     [i]))["ECMMIE25"     ];
        ECMMICFG_ECMMIE24                [i] = (*(ECMMICFG     [i]))["ECMMIE24"     ];
        ECMMICFG_ECMMIE23                [i] = (*(ECMMICFG     [i]))["ECMMIE23"     ];
        ECMMICFG_ECMMIE22                [i] = (*(ECMMICFG     [i]))["ECMMIE22"     ];
        ECMMICFG_ECMMIE21                [i] = (*(ECMMICFG     [i]))["ECMMIE21"     ];
        ECMMICFG_ECMMIE20                [i] = (*(ECMMICFG     [i]))["ECMMIE20"     ];
        ECMMICFG_ECMMIE19                [i] = (*(ECMMICFG     [i]))["ECMMIE19"     ];
        ECMMICFG_ECMMIE18                [i] = (*(ECMMICFG     [i]))["ECMMIE18"     ];
        ECMMICFG_ECMMIE17                [i] = (*(ECMMICFG     [i]))["ECMMIE17"     ];
        ECMMICFG_ECMMIE16                [i] = (*(ECMMICFG     [i]))["ECMMIE16"     ];
        ECMMICFG_ECMMIE15                [i] = (*(ECMMICFG     [i]))["ECMMIE15"     ];
        ECMMICFG_ECMMIE14                [i] = (*(ECMMICFG     [i]))["ECMMIE14"     ];
        ECMMICFG_ECMMIE13                [i] = (*(ECMMICFG     [i]))["ECMMIE13"     ];
        ECMMICFG_ECMMIE12                [i] = (*(ECMMICFG     [i]))["ECMMIE12"     ];
        ECMMICFG_ECMMIE11                [i] = (*(ECMMICFG     [i]))["ECMMIE11"     ];
        ECMMICFG_ECMMIE10                [i] = (*(ECMMICFG     [i]))["ECMMIE10"     ];
        ECMMICFG_ECMMIE09                [i] = (*(ECMMICFG     [i]))["ECMMIE09"     ];
        ECMMICFG_ECMMIE08                [i] = (*(ECMMICFG     [i]))["ECMMIE08"     ];
        ECMMICFG_ECMMIE07                [i] = (*(ECMMICFG     [i]))["ECMMIE07"     ];
        ECMMICFG_ECMMIE06                [i] = (*(ECMMICFG     [i]))["ECMMIE06"     ];
        ECMMICFG_ECMMIE05                [i] = (*(ECMMICFG     [i]))["ECMMIE05"     ];
        ECMMICFG_ECMMIE04                [i] = (*(ECMMICFG     [i]))["ECMMIE04"     ];
        ECMMICFG_ECMMIE03                [i] = (*(ECMMICFG     [i]))["ECMMIE03"     ];
        ECMMICFG_ECMMIE02                [i] = (*(ECMMICFG     [i]))["ECMMIE02"     ];
        ECMMICFG_ECMMIE01                [i] = (*(ECMMICFG     [i]))["ECMMIE01"     ];
        ECMMICFG_ECMMIE00                [i] = (*(ECMMICFG     [i]))["ECMMIE00"     ];
        return;
    }
    if (addr == 0x0128) {
        ECMMICFG9_ECMMIE928               = (*ECMMICFG9    )["ECMMIE928"    ];
        ECMMICFG9_ECMMIE927               = (*ECMMICFG9    )["ECMMIE927"    ];
        ECMMICFG9_ECMMIE926               = (*ECMMICFG9    )["ECMMIE926"    ];
        ECMMICFG9_ECMMIE925               = (*ECMMICFG9    )["ECMMIE925"    ];
        ECMMICFG9_ECMMIE924               = (*ECMMICFG9    )["ECMMIE924"    ];
        ECMMICFG9_ECMMIE923               = (*ECMMICFG9    )["ECMMIE923"    ];
        ECMMICFG9_ECMMIE922               = (*ECMMICFG9    )["ECMMIE922"    ];
        ECMMICFG9_ECMMIE921               = (*ECMMICFG9    )["ECMMIE921"    ];
        ECMMICFG9_ECMMIE920               = (*ECMMICFG9    )["ECMMIE920"    ];
        ECMMICFG9_ECMMIE919               = (*ECMMICFG9    )["ECMMIE919"    ];
        ECMMICFG9_ECMMIE918               = (*ECMMICFG9    )["ECMMIE918"    ];
        ECMMICFG9_ECMMIE917               = (*ECMMICFG9    )["ECMMIE917"    ];
        ECMMICFG9_ECMMIE916               = (*ECMMICFG9    )["ECMMIE916"    ];
        ECMMICFG9_ECMMIE915               = (*ECMMICFG9    )["ECMMIE915"    ];
        ECMMICFG9_ECMMIE914               = (*ECMMICFG9    )["ECMMIE914"    ];
        ECMMICFG9_ECMMIE913               = (*ECMMICFG9    )["ECMMIE913"    ];
        ECMMICFG9_ECMMIE912               = (*ECMMICFG9    )["ECMMIE912"    ];
        ECMMICFG9_ECMMIE911               = (*ECMMICFG9    )["ECMMIE911"    ];
        ECMMICFG9_ECMMIE910               = (*ECMMICFG9    )["ECMMIE910"    ];
        ECMMICFG9_ECMMIE909               = (*ECMMICFG9    )["ECMMIE909"    ];
        ECMMICFG9_ECMMIE908               = (*ECMMICFG9    )["ECMMIE908"    ];
        ECMMICFG9_ECMMIE907               = (*ECMMICFG9    )["ECMMIE907"    ];
        ECMMICFG9_ECMMIE906               = (*ECMMICFG9    )["ECMMIE906"    ];
        ECMMICFG9_ECMMIE905               = (*ECMMICFG9    )["ECMMIE905"    ];
        ECMMICFG9_ECMMIE904               = (*ECMMICFG9    )["ECMMIE904"    ];
        ECMMICFG9_ECMMIE903               = (*ECMMICFG9    )["ECMMIE903"    ];
        ECMMICFG9_ECMMIE902               = (*ECMMICFG9    )["ECMMIE902"    ];
        ECMMICFG9_ECMMIE901               = (*ECMMICFG9    )["ECMMIE901"    ];
        ECMMICFG9_ECMMIE900               = (*ECMMICFG9    )["ECMMIE900"    ];
        return;
    }
    if (addr == 0x012C) {
        ECMNMICFG0_ECMNMIE031             = (*ECMNMICFG0   )["ECMNMIE031"   ];
        ECMNMICFG0_ECMNMIE030             = (*ECMNMICFG0   )["ECMNMIE030"   ];
        ECMNMICFG0_ECMNMIE029             = (*ECMNMICFG0   )["ECMNMIE029"   ];
        ECMNMICFG0_ECMNMIE028             = (*ECMNMICFG0   )["ECMNMIE028"   ];
        ECMNMICFG0_ECMNMIE027             = (*ECMNMICFG0   )["ECMNMIE027"   ];
        ECMNMICFG0_ECMNMIE026             = (*ECMNMICFG0   )["ECMNMIE026"   ];
        ECMNMICFG0_ECMNMIE025             = (*ECMNMICFG0   )["ECMNMIE025"   ];
        ECMNMICFG0_ECMNMIE024             = (*ECMNMICFG0   )["ECMNMIE024"   ];
        ECMNMICFG0_ECMNMIE023             = (*ECMNMICFG0   )["ECMNMIE023"   ];
        ECMNMICFG0_ECMNMIE022             = (*ECMNMICFG0   )["ECMNMIE022"   ];
        ECMNMICFG0_ECMNMIE021             = (*ECMNMICFG0   )["ECMNMIE021"   ];
        ECMNMICFG0_ECMNMIE020             = (*ECMNMICFG0   )["ECMNMIE020"   ];
        ECMNMICFG0_ECMNMIE019             = (*ECMNMICFG0   )["ECMNMIE019"   ];
        ECMNMICFG0_ECMNMIE018             = (*ECMNMICFG0   )["ECMNMIE018"   ];
        ECMNMICFG0_ECMNMIE017             = (*ECMNMICFG0   )["ECMNMIE017"   ];
        ECMNMICFG0_ECMNMIE016             = (*ECMNMICFG0   )["ECMNMIE016"   ];
        ECMNMICFG0_ECMNMIE01514           = (*ECMNMICFG0   )["ECMNMIE01514" ];
        ECMNMICFG0_ECMNMIE01312           = (*ECMNMICFG0   )["ECMNMIE01312" ];
        ECMNMICFG0_ECMNMIE01110           = (*ECMNMICFG0   )["ECMNMIE01110" ];
        ECMNMICFG0_ECMNMIE00908           = (*ECMNMICFG0   )["ECMNMIE00908" ];
        ECMNMICFG0_ECMNMIE00706           = (*ECMNMICFG0   )["ECMNMIE00706" ];
        ECMNMICFG0_ECMNMIE00504           = (*ECMNMICFG0   )["ECMNMIE00504" ];
        ECMNMICFG0_ECMNMIE00302           = (*ECMNMICFG0   )["ECMNMIE00302" ];
        ECMNMICFG0_ECMNMIE00100           = (*ECMNMICFG0   )["ECMNMIE00100" ];
        return;
    }
    if ((0x0130 <= addr) && (addr <= (0x0130)+(4*7)) && ((addr-0x0130)%4 == 0) ) {
        uint i = (addr - 0x0130)/4 + 1;
        ECMNMICFG_ECMNMIE31              [i] = (*(ECMNMICFG    [i]))["ECMNMIE31"    ];
        ECMNMICFG_ECMNMIE30              [i] = (*(ECMNMICFG    [i]))["ECMNMIE30"    ];
        ECMNMICFG_ECMNMIE29              [i] = (*(ECMNMICFG    [i]))["ECMNMIE29"    ];
        ECMNMICFG_ECMNMIE28              [i] = (*(ECMNMICFG    [i]))["ECMNMIE28"    ];
        ECMNMICFG_ECMNMIE27              [i] = (*(ECMNMICFG    [i]))["ECMNMIE27"    ];
        ECMNMICFG_ECMNMIE26              [i] = (*(ECMNMICFG    [i]))["ECMNMIE26"    ];
        ECMNMICFG_ECMNMIE25              [i] = (*(ECMNMICFG    [i]))["ECMNMIE25"    ];
        ECMNMICFG_ECMNMIE24              [i] = (*(ECMNMICFG    [i]))["ECMNMIE24"    ];
        ECMNMICFG_ECMNMIE23              [i] = (*(ECMNMICFG    [i]))["ECMNMIE23"    ];
        ECMNMICFG_ECMNMIE22              [i] = (*(ECMNMICFG    [i]))["ECMNMIE22"    ];
        ECMNMICFG_ECMNMIE21              [i] = (*(ECMNMICFG    [i]))["ECMNMIE21"    ];
        ECMNMICFG_ECMNMIE20              [i] = (*(ECMNMICFG    [i]))["ECMNMIE20"    ];
        ECMNMICFG_ECMNMIE19              [i] = (*(ECMNMICFG    [i]))["ECMNMIE19"    ];
        ECMNMICFG_ECMNMIE18              [i] = (*(ECMNMICFG    [i]))["ECMNMIE18"    ];
        ECMNMICFG_ECMNMIE17              [i] = (*(ECMNMICFG    [i]))["ECMNMIE17"    ];
        ECMNMICFG_ECMNMIE16              [i] = (*(ECMNMICFG    [i]))["ECMNMIE16"    ];
        ECMNMICFG_ECMNMIE15              [i] = (*(ECMNMICFG    [i]))["ECMNMIE15"    ];
        ECMNMICFG_ECMNMIE14              [i] = (*(ECMNMICFG    [i]))["ECMNMIE14"    ];
        ECMNMICFG_ECMNMIE13              [i] = (*(ECMNMICFG    [i]))["ECMNMIE13"    ];
        ECMNMICFG_ECMNMIE12              [i] = (*(ECMNMICFG    [i]))["ECMNMIE12"    ];
        ECMNMICFG_ECMNMIE11              [i] = (*(ECMNMICFG    [i]))["ECMNMIE11"    ];
        ECMNMICFG_ECMNMIE10              [i] = (*(ECMNMICFG    [i]))["ECMNMIE10"    ];
        ECMNMICFG_ECMNMIE09              [i] = (*(ECMNMICFG    [i]))["ECMNMIE09"    ];
        ECMNMICFG_ECMNMIE08              [i] = (*(ECMNMICFG    [i]))["ECMNMIE08"    ];
        ECMNMICFG_ECMNMIE07              [i] = (*(ECMNMICFG    [i]))["ECMNMIE07"    ];
        ECMNMICFG_ECMNMIE06              [i] = (*(ECMNMICFG    [i]))["ECMNMIE06"    ];
        ECMNMICFG_ECMNMIE05              [i] = (*(ECMNMICFG    [i]))["ECMNMIE05"    ];
        ECMNMICFG_ECMNMIE04              [i] = (*(ECMNMICFG    [i]))["ECMNMIE04"    ];
        ECMNMICFG_ECMNMIE03              [i] = (*(ECMNMICFG    [i]))["ECMNMIE03"    ];
        ECMNMICFG_ECMNMIE02              [i] = (*(ECMNMICFG    [i]))["ECMNMIE02"    ];
        ECMNMICFG_ECMNMIE01              [i] = (*(ECMNMICFG    [i]))["ECMNMIE01"    ];
        ECMNMICFG_ECMNMIE00              [i] = (*(ECMNMICFG    [i]))["ECMNMIE00"    ];
        return;
    }
    if (addr == 0x0150) {
        ECMNMICFG9_ECMNMIE928             = (*ECMNMICFG9   )["ECMNMIE928"   ];
        ECMNMICFG9_ECMNMIE927             = (*ECMNMICFG9   )["ECMNMIE927"   ];
        ECMNMICFG9_ECMNMIE926             = (*ECMNMICFG9   )["ECMNMIE926"   ];
        ECMNMICFG9_ECMNMIE925             = (*ECMNMICFG9   )["ECMNMIE925"   ];
        ECMNMICFG9_ECMNMIE924             = (*ECMNMICFG9   )["ECMNMIE924"   ];
        ECMNMICFG9_ECMNMIE923             = (*ECMNMICFG9   )["ECMNMIE923"   ];
        ECMNMICFG9_ECMNMIE922             = (*ECMNMICFG9   )["ECMNMIE922"   ];
        ECMNMICFG9_ECMNMIE921             = (*ECMNMICFG9   )["ECMNMIE921"   ];
        ECMNMICFG9_ECMNMIE920             = (*ECMNMICFG9   )["ECMNMIE920"   ];
        ECMNMICFG9_ECMNMIE919             = (*ECMNMICFG9   )["ECMNMIE919"   ];
        ECMNMICFG9_ECMNMIE918             = (*ECMNMICFG9   )["ECMNMIE918"   ];
        ECMNMICFG9_ECMNMIE917             = (*ECMNMICFG9   )["ECMNMIE917"   ];
        ECMNMICFG9_ECMNMIE916             = (*ECMNMICFG9   )["ECMNMIE916"   ];
        ECMNMICFG9_ECMNMIE915             = (*ECMNMICFG9   )["ECMNMIE915"   ];
        ECMNMICFG9_ECMNMIE914             = (*ECMNMICFG9   )["ECMNMIE914"   ];
        ECMNMICFG9_ECMNMIE913             = (*ECMNMICFG9   )["ECMNMIE913"   ];
        ECMNMICFG9_ECMNMIE912             = (*ECMNMICFG9   )["ECMNMIE912"   ];
        ECMNMICFG9_ECMNMIE911             = (*ECMNMICFG9   )["ECMNMIE911"   ];
        ECMNMICFG9_ECMNMIE910             = (*ECMNMICFG9   )["ECMNMIE910"   ];
        ECMNMICFG9_ECMNMIE909             = (*ECMNMICFG9   )["ECMNMIE909"   ];
        ECMNMICFG9_ECMNMIE908             = (*ECMNMICFG9   )["ECMNMIE908"   ];
        ECMNMICFG9_ECMNMIE907             = (*ECMNMICFG9   )["ECMNMIE907"   ];
        ECMNMICFG9_ECMNMIE906             = (*ECMNMICFG9   )["ECMNMIE906"   ];
        ECMNMICFG9_ECMNMIE905             = (*ECMNMICFG9   )["ECMNMIE905"   ];
        ECMNMICFG9_ECMNMIE904             = (*ECMNMICFG9   )["ECMNMIE904"   ];
        ECMNMICFG9_ECMNMIE903             = (*ECMNMICFG9   )["ECMNMIE903"   ];
        ECMNMICFG9_ECMNMIE902             = (*ECMNMICFG9   )["ECMNMIE902"   ];
        ECMNMICFG9_ECMNMIE901             = (*ECMNMICFG9   )["ECMNMIE901"   ];
        ECMNMICFG9_ECMNMIE900             = (*ECMNMICFG9   )["ECMNMIE900"   ];
        return;
    }
    if (addr == 0x0154) {
        ECMIRCFG0_ECMIRE031               = (*ECMIRCFG0    )["ECMIRE031"    ];
        ECMIRCFG0_ECMIRE030               = (*ECMIRCFG0    )["ECMIRE030"    ];
        ECMIRCFG0_ECMIRE029               = (*ECMIRCFG0    )["ECMIRE029"    ];
        ECMIRCFG0_ECMIRE028               = (*ECMIRCFG0    )["ECMIRE028"    ];
        ECMIRCFG0_ECMIRE027               = (*ECMIRCFG0    )["ECMIRE027"    ];
        ECMIRCFG0_ECMIRE026               = (*ECMIRCFG0    )["ECMIRE026"    ];
        ECMIRCFG0_ECMIRE025               = (*ECMIRCFG0    )["ECMIRE025"    ];
        ECMIRCFG0_ECMIRE024               = (*ECMIRCFG0    )["ECMIRE024"    ];
        ECMIRCFG0_ECMIRE023               = (*ECMIRCFG0    )["ECMIRE023"    ];
        ECMIRCFG0_ECMIRE022               = (*ECMIRCFG0    )["ECMIRE022"    ];
        ECMIRCFG0_ECMIRE021               = (*ECMIRCFG0    )["ECMIRE021"    ];
        ECMIRCFG0_ECMIRE020               = (*ECMIRCFG0    )["ECMIRE020"    ];
        ECMIRCFG0_ECMIRE019               = (*ECMIRCFG0    )["ECMIRE019"    ];
        ECMIRCFG0_ECMIRE018               = (*ECMIRCFG0    )["ECMIRE018"    ];
        ECMIRCFG0_ECMIRE017               = (*ECMIRCFG0    )["ECMIRE017"    ];
        ECMIRCFG0_ECMIRE016               = (*ECMIRCFG0    )["ECMIRE016"    ];
        ECMIRCFG0_ECMIRE01514             = (*ECMIRCFG0    )["ECMIRE01514"  ];
        ECMIRCFG0_ECMIRE01312             = (*ECMIRCFG0    )["ECMIRE01312"  ];
        ECMIRCFG0_ECMIRE01110             = (*ECMIRCFG0    )["ECMIRE01110"  ];
        ECMIRCFG0_ECMIRE00908             = (*ECMIRCFG0    )["ECMIRE00908"  ];
        ECMIRCFG0_ECMIRE00706             = (*ECMIRCFG0    )["ECMIRE00706"  ];
        ECMIRCFG0_ECMIRE00504             = (*ECMIRCFG0    )["ECMIRE00504"  ];
        ECMIRCFG0_ECMIRE00302             = (*ECMIRCFG0    )["ECMIRE00302"  ];
        ECMIRCFG0_ECMIRE00100             = (*ECMIRCFG0    )["ECMIRE00100"  ];
        return;
    }
    if ((0x0158 <= addr) && (addr <= (0x0158)+(4*7)) && ((addr-0x0158)%4 == 0) ) {
        uint i = (addr - 0x0158)/4 + 1;
        ECMIRCFG_ECMIRE31                [i] = (*(ECMIRCFG     [i]))["ECMIRE31"     ];
        ECMIRCFG_ECMIRE30                [i] = (*(ECMIRCFG     [i]))["ECMIRE30"     ];
        ECMIRCFG_ECMIRE29                [i] = (*(ECMIRCFG     [i]))["ECMIRE29"     ];
        ECMIRCFG_ECMIRE28                [i] = (*(ECMIRCFG     [i]))["ECMIRE28"     ];
        ECMIRCFG_ECMIRE27                [i] = (*(ECMIRCFG     [i]))["ECMIRE27"     ];
        ECMIRCFG_ECMIRE26                [i] = (*(ECMIRCFG     [i]))["ECMIRE26"     ];
        ECMIRCFG_ECMIRE25                [i] = (*(ECMIRCFG     [i]))["ECMIRE25"     ];
        ECMIRCFG_ECMIRE24                [i] = (*(ECMIRCFG     [i]))["ECMIRE24"     ];
        ECMIRCFG_ECMIRE23                [i] = (*(ECMIRCFG     [i]))["ECMIRE23"     ];
        ECMIRCFG_ECMIRE22                [i] = (*(ECMIRCFG     [i]))["ECMIRE22"     ];
        ECMIRCFG_ECMIRE21                [i] = (*(ECMIRCFG     [i]))["ECMIRE21"     ];
        ECMIRCFG_ECMIRE20                [i] = (*(ECMIRCFG     [i]))["ECMIRE20"     ];
        ECMIRCFG_ECMIRE19                [i] = (*(ECMIRCFG     [i]))["ECMIRE19"     ];
        ECMIRCFG_ECMIRE18                [i] = (*(ECMIRCFG     [i]))["ECMIRE18"     ];
        ECMIRCFG_ECMIRE17                [i] = (*(ECMIRCFG     [i]))["ECMIRE17"     ];
        ECMIRCFG_ECMIRE16                [i] = (*(ECMIRCFG     [i]))["ECMIRE16"     ];
        ECMIRCFG_ECMIRE15                [i] = (*(ECMIRCFG     [i]))["ECMIRE15"     ];
        ECMIRCFG_ECMIRE14                [i] = (*(ECMIRCFG     [i]))["ECMIRE14"     ];
        ECMIRCFG_ECMIRE13                [i] = (*(ECMIRCFG     [i]))["ECMIRE13"     ];
        ECMIRCFG_ECMIRE12                [i] = (*(ECMIRCFG     [i]))["ECMIRE12"     ];
        ECMIRCFG_ECMIRE11                [i] = (*(ECMIRCFG     [i]))["ECMIRE11"     ];
        ECMIRCFG_ECMIRE10                [i] = (*(ECMIRCFG     [i]))["ECMIRE10"     ];
        ECMIRCFG_ECMIRE09                [i] = (*(ECMIRCFG     [i]))["ECMIRE09"     ];
        ECMIRCFG_ECMIRE08                [i] = (*(ECMIRCFG     [i]))["ECMIRE08"     ];
        ECMIRCFG_ECMIRE07                [i] = (*(ECMIRCFG     [i]))["ECMIRE07"     ];
        ECMIRCFG_ECMIRE06                [i] = (*(ECMIRCFG     [i]))["ECMIRE06"     ];
        ECMIRCFG_ECMIRE05                [i] = (*(ECMIRCFG     [i]))["ECMIRE05"     ];
        ECMIRCFG_ECMIRE04                [i] = (*(ECMIRCFG     [i]))["ECMIRE04"     ];
        ECMIRCFG_ECMIRE03                [i] = (*(ECMIRCFG     [i]))["ECMIRE03"     ];
        ECMIRCFG_ECMIRE02                [i] = (*(ECMIRCFG     [i]))["ECMIRE02"     ];
        ECMIRCFG_ECMIRE01                [i] = (*(ECMIRCFG     [i]))["ECMIRE01"     ];
        ECMIRCFG_ECMIRE00                [i] = (*(ECMIRCFG     [i]))["ECMIRE00"     ];
        return;
    }
    if (addr == 0x0178) {
        ECMIRCFG9_ECMIRE929               = (*ECMIRCFG9    )["ECMIRE929"    ];
        ECMIRCFG9_ECMIRE928               = (*ECMIRCFG9    )["ECMIRE928"    ];
        ECMIRCFG9_ECMIRE927               = (*ECMIRCFG9    )["ECMIRE927"    ];
        ECMIRCFG9_ECMIRE926               = (*ECMIRCFG9    )["ECMIRE926"    ];
        ECMIRCFG9_ECMIRE925               = (*ECMIRCFG9    )["ECMIRE925"    ];
        ECMIRCFG9_ECMIRE924               = (*ECMIRCFG9    )["ECMIRE924"    ];
        ECMIRCFG9_ECMIRE923               = (*ECMIRCFG9    )["ECMIRE923"    ];
        ECMIRCFG9_ECMIRE922               = (*ECMIRCFG9    )["ECMIRE922"    ];
        ECMIRCFG9_ECMIRE921               = (*ECMIRCFG9    )["ECMIRE921"    ];
        ECMIRCFG9_ECMIRE920               = (*ECMIRCFG9    )["ECMIRE920"    ];
        ECMIRCFG9_ECMIRE919               = (*ECMIRCFG9    )["ECMIRE919"    ];
        ECMIRCFG9_ECMIRE918               = (*ECMIRCFG9    )["ECMIRE918"    ];
        ECMIRCFG9_ECMIRE917               = (*ECMIRCFG9    )["ECMIRE917"    ];
        ECMIRCFG9_ECMIRE916               = (*ECMIRCFG9    )["ECMIRE916"    ];
        ECMIRCFG9_ECMIRE915               = (*ECMIRCFG9    )["ECMIRE915"    ];
        ECMIRCFG9_ECMIRE914               = (*ECMIRCFG9    )["ECMIRE914"    ];
        ECMIRCFG9_ECMIRE913               = (*ECMIRCFG9    )["ECMIRE913"    ];
        ECMIRCFG9_ECMIRE912               = (*ECMIRCFG9    )["ECMIRE912"    ];
        ECMIRCFG9_ECMIRE911               = (*ECMIRCFG9    )["ECMIRE911"    ];
        ECMIRCFG9_ECMIRE910               = (*ECMIRCFG9    )["ECMIRE910"    ];
        ECMIRCFG9_ECMIRE909               = (*ECMIRCFG9    )["ECMIRE909"    ];
        ECMIRCFG9_ECMIRE908               = (*ECMIRCFG9    )["ECMIRE908"    ];
        ECMIRCFG9_ECMIRE907               = (*ECMIRCFG9    )["ECMIRE907"    ];
        ECMIRCFG9_ECMIRE906               = (*ECMIRCFG9    )["ECMIRE906"    ];
        ECMIRCFG9_ECMIRE905               = (*ECMIRCFG9    )["ECMIRE905"    ];
        ECMIRCFG9_ECMIRE904               = (*ECMIRCFG9    )["ECMIRE904"    ];
        ECMIRCFG9_ECMIRE903               = (*ECMIRCFG9    )["ECMIRE903"    ];
        ECMIRCFG9_ECMIRE902               = (*ECMIRCFG9    )["ECMIRE902"    ];
        ECMIRCFG9_ECMIRE901               = (*ECMIRCFG9    )["ECMIRE901"    ];
        ECMIRCFG9_ECMIRE900               = (*ECMIRCFG9    )["ECMIRE900"    ];
        return;
    }
    if (addr == 0x017C) {
        ECMEMK0_ECMEMK031                 = (*ECMEMK0      )["ECMEMK031"    ];
        ECMEMK0_ECMEMK030                 = (*ECMEMK0      )["ECMEMK030"    ];
        ECMEMK0_ECMEMK029                 = (*ECMEMK0      )["ECMEMK029"    ];
        ECMEMK0_ECMEMK028                 = (*ECMEMK0      )["ECMEMK028"    ];
        ECMEMK0_ECMEMK027                 = (*ECMEMK0      )["ECMEMK027"    ];
        ECMEMK0_ECMEMK026                 = (*ECMEMK0      )["ECMEMK026"    ];
        ECMEMK0_ECMEMK025                 = (*ECMEMK0      )["ECMEMK025"    ];
        ECMEMK0_ECMEMK024                 = (*ECMEMK0      )["ECMEMK024"    ];
        ECMEMK0_ECMEMK023                 = (*ECMEMK0      )["ECMEMK023"    ];
        ECMEMK0_ECMEMK022                 = (*ECMEMK0      )["ECMEMK022"    ];
        ECMEMK0_ECMEMK021                 = (*ECMEMK0      )["ECMEMK021"    ];
        ECMEMK0_ECMEMK020                 = (*ECMEMK0      )["ECMEMK020"    ];
        ECMEMK0_ECMEMK019                 = (*ECMEMK0      )["ECMEMK019"    ];
        ECMEMK0_ECMEMK018                 = (*ECMEMK0      )["ECMEMK018"    ];
        ECMEMK0_ECMEMK017                 = (*ECMEMK0      )["ECMEMK017"    ];
        ECMEMK0_ECMEMK016                 = (*ECMEMK0      )["ECMEMK016"    ];
        ECMEMK0_ECMEMK01514               = (*ECMEMK0      )["ECMEMK01514"  ];
        ECMEMK0_ECMEMK01312               = (*ECMEMK0      )["ECMEMK01312"  ];
        ECMEMK0_ECMEMK01110               = (*ECMEMK0      )["ECMEMK01110"  ];
        ECMEMK0_ECMEMK00908               = (*ECMEMK0      )["ECMEMK00908"  ];
        ECMEMK0_ECMEMK00706               = (*ECMEMK0      )["ECMEMK00706"  ];
        ECMEMK0_ECMEMK00504               = (*ECMEMK0      )["ECMEMK00504"  ];
        ECMEMK0_ECMEMK00302               = (*ECMEMK0      )["ECMEMK00302"  ];
        ECMEMK0_ECMEMK00100               = (*ECMEMK0      )["ECMEMK00100"  ];
        return;
    }
    if ((0x0180 <= addr) && (addr <= (0x0180)+(4*7)) && ((addr-0x0180)%4 == 0) ) {
        uint i = (addr - 0x0180)/4 + 1;
        ECMEMK_ECMEMK31                  [i] = (*(ECMEMK       [i]))["ECMEMK31"     ];
        ECMEMK_ECMEMK30                  [i] = (*(ECMEMK       [i]))["ECMEMK30"     ];
        ECMEMK_ECMEMK29                  [i] = (*(ECMEMK       [i]))["ECMEMK29"     ];
        ECMEMK_ECMEMK28                  [i] = (*(ECMEMK       [i]))["ECMEMK28"     ];
        ECMEMK_ECMEMK27                  [i] = (*(ECMEMK       [i]))["ECMEMK27"     ];
        ECMEMK_ECMEMK26                  [i] = (*(ECMEMK       [i]))["ECMEMK26"     ];
        ECMEMK_ECMEMK25                  [i] = (*(ECMEMK       [i]))["ECMEMK25"     ];
        ECMEMK_ECMEMK24                  [i] = (*(ECMEMK       [i]))["ECMEMK24"     ];
        ECMEMK_ECMEMK23                  [i] = (*(ECMEMK       [i]))["ECMEMK23"     ];
        ECMEMK_ECMEMK22                  [i] = (*(ECMEMK       [i]))["ECMEMK22"     ];
        ECMEMK_ECMEMK21                  [i] = (*(ECMEMK       [i]))["ECMEMK21"     ];
        ECMEMK_ECMEMK20                  [i] = (*(ECMEMK       [i]))["ECMEMK20"     ];
        ECMEMK_ECMEMK19                  [i] = (*(ECMEMK       [i]))["ECMEMK19"     ];
        ECMEMK_ECMEMK18                  [i] = (*(ECMEMK       [i]))["ECMEMK18"     ];
        ECMEMK_ECMEMK17                  [i] = (*(ECMEMK       [i]))["ECMEMK17"     ];
        ECMEMK_ECMEMK16                  [i] = (*(ECMEMK       [i]))["ECMEMK16"     ];
        ECMEMK_ECMEMK15                  [i] = (*(ECMEMK       [i]))["ECMEMK15"     ];
        ECMEMK_ECMEMK14                  [i] = (*(ECMEMK       [i]))["ECMEMK14"     ];
        ECMEMK_ECMEMK13                  [i] = (*(ECMEMK       [i]))["ECMEMK13"     ];
        ECMEMK_ECMEMK12                  [i] = (*(ECMEMK       [i]))["ECMEMK12"     ];
        ECMEMK_ECMEMK11                  [i] = (*(ECMEMK       [i]))["ECMEMK11"     ];
        ECMEMK_ECMEMK10                  [i] = (*(ECMEMK       [i]))["ECMEMK10"     ];
        ECMEMK_ECMEMK09                  [i] = (*(ECMEMK       [i]))["ECMEMK09"     ];
        ECMEMK_ECMEMK08                  [i] = (*(ECMEMK       [i]))["ECMEMK08"     ];
        ECMEMK_ECMEMK07                  [i] = (*(ECMEMK       [i]))["ECMEMK07"     ];
        ECMEMK_ECMEMK06                  [i] = (*(ECMEMK       [i]))["ECMEMK06"     ];
        ECMEMK_ECMEMK05                  [i] = (*(ECMEMK       [i]))["ECMEMK05"     ];
        ECMEMK_ECMEMK04                  [i] = (*(ECMEMK       [i]))["ECMEMK04"     ];
        ECMEMK_ECMEMK03                  [i] = (*(ECMEMK       [i]))["ECMEMK03"     ];
        ECMEMK_ECMEMK02                  [i] = (*(ECMEMK       [i]))["ECMEMK02"     ];
        ECMEMK_ECMEMK01                  [i] = (*(ECMEMK       [i]))["ECMEMK01"     ];
        ECMEMK_ECMEMK00                  [i] = (*(ECMEMK       [i]))["ECMEMK00"     ];
        return;
    }
    if (addr == 0x01A0) {
        ECMEMK9_ECMEMK931                 = (*ECMEMK9      )["ECMEMK931"    ];
        ECMEMK9_ECMEMK930                 = (*ECMEMK9      )["ECMEMK930"    ];
        ECMEMK9_ECMEMK929                 = (*ECMEMK9      )["ECMEMK929"    ];
        ECMEMK9_ECMEMK928                 = (*ECMEMK9      )["ECMEMK928"    ];
        ECMEMK9_ECMEMK927                 = (*ECMEMK9      )["ECMEMK927"    ];
        ECMEMK9_ECMEMK926                 = (*ECMEMK9      )["ECMEMK926"    ];
        ECMEMK9_ECMEMK925                 = (*ECMEMK9      )["ECMEMK925"    ];
        ECMEMK9_ECMEMK924                 = (*ECMEMK9      )["ECMEMK924"    ];
        ECMEMK9_ECMEMK923                 = (*ECMEMK9      )["ECMEMK923"    ];
        ECMEMK9_ECMEMK922                 = (*ECMEMK9      )["ECMEMK922"    ];
        ECMEMK9_ECMEMK921                 = (*ECMEMK9      )["ECMEMK921"    ];
        ECMEMK9_ECMEMK920                 = (*ECMEMK9      )["ECMEMK920"    ];
        ECMEMK9_ECMEMK919                 = (*ECMEMK9      )["ECMEMK919"    ];
        ECMEMK9_ECMEMK918                 = (*ECMEMK9      )["ECMEMK918"    ];
        ECMEMK9_ECMEMK917                 = (*ECMEMK9      )["ECMEMK917"    ];
        ECMEMK9_ECMEMK916                 = (*ECMEMK9      )["ECMEMK916"    ];
        ECMEMK9_ECMEMK915                 = (*ECMEMK9      )["ECMEMK915"    ];
        ECMEMK9_ECMEMK914                 = (*ECMEMK9      )["ECMEMK914"    ];
        ECMEMK9_ECMEMK913                 = (*ECMEMK9      )["ECMEMK913"    ];
        ECMEMK9_ECMEMK912                 = (*ECMEMK9      )["ECMEMK912"    ];
        ECMEMK9_ECMEMK911                 = (*ECMEMK9      )["ECMEMK911"    ];
        ECMEMK9_ECMEMK910                 = (*ECMEMK9      )["ECMEMK910"    ];
        ECMEMK9_ECMEMK909                 = (*ECMEMK9      )["ECMEMK909"    ];
        ECMEMK9_ECMEMK908                 = (*ECMEMK9      )["ECMEMK908"    ];
        ECMEMK9_ECMEMK907                 = (*ECMEMK9      )["ECMEMK907"    ];
        ECMEMK9_ECMEMK906                 = (*ECMEMK9      )["ECMEMK906"    ];
        ECMEMK9_ECMEMK905                 = (*ECMEMK9      )["ECMEMK905"    ];
        ECMEMK9_ECMEMK904                 = (*ECMEMK9      )["ECMEMK904"    ];
        ECMEMK9_ECMEMK903                 = (*ECMEMK9      )["ECMEMK903"    ];
        ECMEMK9_ECMEMK902                 = (*ECMEMK9      )["ECMEMK902"    ];
        ECMEMK9_ECMEMK901                 = (*ECMEMK9      )["ECMEMK901"    ];
        ECMEMK9_ECMEMK900                 = (*ECMEMK9      )["ECMEMK900"    ];
        return;
    }
    if (addr == 0x01A4) {
        ECMESSTC0_ECMCLSSE031             = (*ECMESSTC0    )["ECMCLSSE031"  ];
        ECMESSTC0_ECMCLSSE030             = (*ECMESSTC0    )["ECMCLSSE030"  ];
        ECMESSTC0_ECMCLSSE029             = (*ECMESSTC0    )["ECMCLSSE029"  ];
        ECMESSTC0_ECMCLSSE028             = (*ECMESSTC0    )["ECMCLSSE028"  ];
        ECMESSTC0_ECMCLSSE027             = (*ECMESSTC0    )["ECMCLSSE027"  ];
        ECMESSTC0_ECMCLSSE026             = (*ECMESSTC0    )["ECMCLSSE026"  ];
        ECMESSTC0_ECMCLSSE025             = (*ECMESSTC0    )["ECMCLSSE025"  ];
        ECMESSTC0_ECMCLSSE024             = (*ECMESSTC0    )["ECMCLSSE024"  ];
        ECMESSTC0_ECMCLSSE023             = (*ECMESSTC0    )["ECMCLSSE023"  ];
        ECMESSTC0_ECMCLSSE022             = (*ECMESSTC0    )["ECMCLSSE022"  ];
        ECMESSTC0_ECMCLSSE021             = (*ECMESSTC0    )["ECMCLSSE021"  ];
        ECMESSTC0_ECMCLSSE020             = (*ECMESSTC0    )["ECMCLSSE020"  ];
        ECMESSTC0_ECMCLSSE019             = (*ECMESSTC0    )["ECMCLSSE019"  ];
        ECMESSTC0_ECMCLSSE018             = (*ECMESSTC0    )["ECMCLSSE018"  ];
        ECMESSTC0_ECMCLSSE017             = (*ECMESSTC0    )["ECMCLSSE017"  ];
        ECMESSTC0_ECMCLSSE016             = (*ECMESSTC0    )["ECMCLSSE016"  ];
        ECMESSTC0_ECMCLSSE01514           = (*ECMESSTC0    )["ECMCLSSE01514"];
        ECMESSTC0_ECMCLSSE01312           = (*ECMESSTC0    )["ECMCLSSE01312"];
        ECMESSTC0_ECMCLSSE01110           = (*ECMESSTC0    )["ECMCLSSE01110"];
        ECMESSTC0_ECMCLSSE00908           = (*ECMESSTC0    )["ECMCLSSE00908"];
        ECMESSTC0_ECMCLSSE00706           = (*ECMESSTC0    )["ECMCLSSE00706"];
        ECMESSTC0_ECMCLSSE00504           = (*ECMESSTC0    )["ECMCLSSE00504"];
        ECMESSTC0_ECMCLSSE00302           = (*ECMESSTC0    )["ECMCLSSE00302"];
        ECMESSTC0_ECMCLSSE00100           = (*ECMESSTC0    )["ECMCLSSE00100"];
        return;
    }
    if ((0x01A8 <= addr) && (addr <= (0x01A8)+(4*7)) && ((addr-0x01A8)%4 == 0) ) {
        uint i = (addr - 0x01A8)/4 + 1;
        ECMESSTC_ECMCLSSE31              [i] = (*(ECMESSTC     [i]))["ECMCLSSE31"   ];
        ECMESSTC_ECMCLSSE30              [i] = (*(ECMESSTC     [i]))["ECMCLSSE30"   ];
        ECMESSTC_ECMCLSSE29              [i] = (*(ECMESSTC     [i]))["ECMCLSSE29"   ];
        ECMESSTC_ECMCLSSE28              [i] = (*(ECMESSTC     [i]))["ECMCLSSE28"   ];
        ECMESSTC_ECMCLSSE27              [i] = (*(ECMESSTC     [i]))["ECMCLSSE27"   ];
        ECMESSTC_ECMCLSSE26              [i] = (*(ECMESSTC     [i]))["ECMCLSSE26"   ];
        ECMESSTC_ECMCLSSE25              [i] = (*(ECMESSTC     [i]))["ECMCLSSE25"   ];
        ECMESSTC_ECMCLSSE24              [i] = (*(ECMESSTC     [i]))["ECMCLSSE24"   ];
        ECMESSTC_ECMCLSSE23              [i] = (*(ECMESSTC     [i]))["ECMCLSSE23"   ];
        ECMESSTC_ECMCLSSE22              [i] = (*(ECMESSTC     [i]))["ECMCLSSE22"   ];
        ECMESSTC_ECMCLSSE21              [i] = (*(ECMESSTC     [i]))["ECMCLSSE21"   ];
        ECMESSTC_ECMCLSSE20              [i] = (*(ECMESSTC     [i]))["ECMCLSSE20"   ];
        ECMESSTC_ECMCLSSE19              [i] = (*(ECMESSTC     [i]))["ECMCLSSE19"   ];
        ECMESSTC_ECMCLSSE18              [i] = (*(ECMESSTC     [i]))["ECMCLSSE18"   ];
        ECMESSTC_ECMCLSSE17              [i] = (*(ECMESSTC     [i]))["ECMCLSSE17"   ];
        ECMESSTC_ECMCLSSE16              [i] = (*(ECMESSTC     [i]))["ECMCLSSE16"   ];
        ECMESSTC_ECMCLSSE15              [i] = (*(ECMESSTC     [i]))["ECMCLSSE15"   ];
        ECMESSTC_ECMCLSSE14              [i] = (*(ECMESSTC     [i]))["ECMCLSSE14"   ];
        ECMESSTC_ECMCLSSE13              [i] = (*(ECMESSTC     [i]))["ECMCLSSE13"   ];
        ECMESSTC_ECMCLSSE12              [i] = (*(ECMESSTC     [i]))["ECMCLSSE12"   ];
        ECMESSTC_ECMCLSSE11              [i] = (*(ECMESSTC     [i]))["ECMCLSSE11"   ];
        ECMESSTC_ECMCLSSE10              [i] = (*(ECMESSTC     [i]))["ECMCLSSE10"   ];
        ECMESSTC_ECMCLSSE09              [i] = (*(ECMESSTC     [i]))["ECMCLSSE09"   ];
        ECMESSTC_ECMCLSSE08              [i] = (*(ECMESSTC     [i]))["ECMCLSSE08"   ];
        ECMESSTC_ECMCLSSE07              [i] = (*(ECMESSTC     [i]))["ECMCLSSE07"   ];
        ECMESSTC_ECMCLSSE06              [i] = (*(ECMESSTC     [i]))["ECMCLSSE06"   ];
        ECMESSTC_ECMCLSSE05              [i] = (*(ECMESSTC     [i]))["ECMCLSSE05"   ];
        ECMESSTC_ECMCLSSE04              [i] = (*(ECMESSTC     [i]))["ECMCLSSE04"   ];
        ECMESSTC_ECMCLSSE03              [i] = (*(ECMESSTC     [i]))["ECMCLSSE03"   ];
        ECMESSTC_ECMCLSSE02              [i] = (*(ECMESSTC     [i]))["ECMCLSSE02"   ];
        ECMESSTC_ECMCLSSE01              [i] = (*(ECMESSTC     [i]))["ECMCLSSE01"   ];
        ECMESSTC_ECMCLSSE00              [i] = (*(ECMESSTC     [i]))["ECMCLSSE00"   ];
        return;
    }
    if (addr == 0x01C8) {
        ECMESSTC9_ECMCLSSE930             = (*ECMESSTC9    )["ECMCLSSE930"  ];
        ECMESSTC9_ECMCLSSE929             = (*ECMESSTC9    )["ECMCLSSE929"  ];
        ECMESSTC9_ECMCLSSE928             = (*ECMESSTC9    )["ECMCLSSE928"  ];
        ECMESSTC9_ECMCLSSE927             = (*ECMESSTC9    )["ECMCLSSE927"  ];
        ECMESSTC9_ECMCLSSE926             = (*ECMESSTC9    )["ECMCLSSE926"  ];
        ECMESSTC9_ECMCLSSE925             = (*ECMESSTC9    )["ECMCLSSE925"  ];
        ECMESSTC9_ECMCLSSE924             = (*ECMESSTC9    )["ECMCLSSE924"  ];
        ECMESSTC9_ECMCLSSE923             = (*ECMESSTC9    )["ECMCLSSE923"  ];
        ECMESSTC9_ECMCLSSE922             = (*ECMESSTC9    )["ECMCLSSE922"  ];
        ECMESSTC9_ECMCLSSE921             = (*ECMESSTC9    )["ECMCLSSE921"  ];
        ECMESSTC9_ECMCLSSE920             = (*ECMESSTC9    )["ECMCLSSE920"  ];
        ECMESSTC9_ECMCLSSE919             = (*ECMESSTC9    )["ECMCLSSE919"  ];
        ECMESSTC9_ECMCLSSE918             = (*ECMESSTC9    )["ECMCLSSE918"  ];
        ECMESSTC9_ECMCLSSE917             = (*ECMESSTC9    )["ECMCLSSE917"  ];
        ECMESSTC9_ECMCLSSE916             = (*ECMESSTC9    )["ECMCLSSE916"  ];
        ECMESSTC9_ECMCLSSE915             = (*ECMESSTC9    )["ECMCLSSE915"  ];
        ECMESSTC9_ECMCLSSE914             = (*ECMESSTC9    )["ECMCLSSE914"  ];
        ECMESSTC9_ECMCLSSE913             = (*ECMESSTC9    )["ECMCLSSE913"  ];
        ECMESSTC9_ECMCLSSE912             = (*ECMESSTC9    )["ECMCLSSE912"  ];
        ECMESSTC9_ECMCLSSE911             = (*ECMESSTC9    )["ECMCLSSE911"  ];
        ECMESSTC9_ECMCLSSE910             = (*ECMESSTC9    )["ECMCLSSE910"  ];
        ECMESSTC9_ECMCLSSE909             = (*ECMESSTC9    )["ECMCLSSE909"  ];
        ECMESSTC9_ECMCLSSE908             = (*ECMESSTC9    )["ECMCLSSE908"  ];
        ECMESSTC9_ECMCLSSE907             = (*ECMESSTC9    )["ECMCLSSE907"  ];
        ECMESSTC9_ECMCLSSE906             = (*ECMESSTC9    )["ECMCLSSE906"  ];
        ECMESSTC9_ECMCLSSE905             = (*ECMESSTC9    )["ECMCLSSE905"  ];
        ECMESSTC9_ECMCLSSE904             = (*ECMESSTC9    )["ECMCLSSE904"  ];
        ECMESSTC9_ECMCLSSE903             = (*ECMESSTC9    )["ECMCLSSE903"  ];
        ECMESSTC9_ECMCLSSE902             = (*ECMESSTC9    )["ECMCLSSE902"  ];
        ECMESSTC9_ECMCLSSE901             = (*ECMESSTC9    )["ECMCLSSE901"  ];
        ECMESSTC9_ECMCLSSE900             = (*ECMESSTC9    )["ECMCLSSE900"  ];
        return;
    }
    if (addr == 0x01CC) {
        ECMKCPROT_KCPROT                  = (*ECMKCPROT    )["KCPROT"       ];
        ECMKCPROT_KCE                     = (*ECMKCPROT    )["KCE"          ];
        return;
    }
    if (addr == 0x01D0) {
        ECMPE0_ECMPE031                   = (*ECMPE0       )["ECMPE031"     ];
        ECMPE0_ECMPE030                   = (*ECMPE0       )["ECMPE030"     ];
        ECMPE0_ECMPE029                   = (*ECMPE0       )["ECMPE029"     ];
        ECMPE0_ECMPE028                   = (*ECMPE0       )["ECMPE028"     ];
        ECMPE0_ECMPE027                   = (*ECMPE0       )["ECMPE027"     ];
        ECMPE0_ECMPE026                   = (*ECMPE0       )["ECMPE026"     ];
        ECMPE0_ECMPE025                   = (*ECMPE0       )["ECMPE025"     ];
        ECMPE0_ECMPE024                   = (*ECMPE0       )["ECMPE024"     ];
        ECMPE0_ECMPE023                   = (*ECMPE0       )["ECMPE023"     ];
        ECMPE0_ECMPE022                   = (*ECMPE0       )["ECMPE022"     ];
        ECMPE0_ECMPE021                   = (*ECMPE0       )["ECMPE021"     ];
        ECMPE0_ECMPE020                   = (*ECMPE0       )["ECMPE020"     ];
        ECMPE0_ECMPE019                   = (*ECMPE0       )["ECMPE019"     ];
        ECMPE0_ECMPE018                   = (*ECMPE0       )["ECMPE018"     ];
        ECMPE0_ECMPE017                   = (*ECMPE0       )["ECMPE017"     ];
        ECMPE0_ECMPE016                   = (*ECMPE0       )["ECMPE016"     ];
        ECMPE0_ECMPE01514                 = (*ECMPE0       )["ECMPE01514"   ];
        ECMPE0_ECMPE01312                 = (*ECMPE0       )["ECMPE01312"   ];
        ECMPE0_ECMPE01110                 = (*ECMPE0       )["ECMPE01110"   ];
        ECMPE0_ECMPE00908                 = (*ECMPE0       )["ECMPE00908"   ];
        ECMPE0_ECMPE00706                 = (*ECMPE0       )["ECMPE00706"   ];
        ECMPE0_ECMPE00504                 = (*ECMPE0       )["ECMPE00504"   ];
        ECMPE0_ECMPE00302                 = (*ECMPE0       )["ECMPE00302"   ];
        ECMPE0_ECMPE00100                 = (*ECMPE0       )["ECMPE00100"   ];
        return;
    }
    if ((0x01D4 <= addr) && (addr <= (0x01D4)+(4*7)) && ((addr-0x01D4)%4 == 0) ) {
        uint i = (addr - 0x01D4)/4 + 1;
        ECMPE_ECMPE31                    [i] = (*(ECMPE        [i]))["ECMPE31"      ];
        ECMPE_ECMPE30                    [i] = (*(ECMPE        [i]))["ECMPE30"      ];
        ECMPE_ECMPE29                    [i] = (*(ECMPE        [i]))["ECMPE29"      ];
        ECMPE_ECMPE28                    [i] = (*(ECMPE        [i]))["ECMPE28"      ];
        ECMPE_ECMPE27                    [i] = (*(ECMPE        [i]))["ECMPE27"      ];
        ECMPE_ECMPE26                    [i] = (*(ECMPE        [i]))["ECMPE26"      ];
        ECMPE_ECMPE25                    [i] = (*(ECMPE        [i]))["ECMPE25"      ];
        ECMPE_ECMPE24                    [i] = (*(ECMPE        [i]))["ECMPE24"      ];
        ECMPE_ECMPE23                    [i] = (*(ECMPE        [i]))["ECMPE23"      ];
        ECMPE_ECMPE22                    [i] = (*(ECMPE        [i]))["ECMPE22"      ];
        ECMPE_ECMPE21                    [i] = (*(ECMPE        [i]))["ECMPE21"      ];
        ECMPE_ECMPE20                    [i] = (*(ECMPE        [i]))["ECMPE20"      ];
        ECMPE_ECMPE19                    [i] = (*(ECMPE        [i]))["ECMPE19"      ];
        ECMPE_ECMPE18                    [i] = (*(ECMPE        [i]))["ECMPE18"      ];
        ECMPE_ECMPE17                    [i] = (*(ECMPE        [i]))["ECMPE17"      ];
        ECMPE_ECMPE16                    [i] = (*(ECMPE        [i]))["ECMPE16"      ];
        ECMPE_ECMPE15                    [i] = (*(ECMPE        [i]))["ECMPE15"      ];
        ECMPE_ECMPE14                    [i] = (*(ECMPE        [i]))["ECMPE14"      ];
        ECMPE_ECMPE13                    [i] = (*(ECMPE        [i]))["ECMPE13"      ];
        ECMPE_ECMPE12                    [i] = (*(ECMPE        [i]))["ECMPE12"      ];
        ECMPE_ECMPE11                    [i] = (*(ECMPE        [i]))["ECMPE11"      ];
        ECMPE_ECMPE10                    [i] = (*(ECMPE        [i]))["ECMPE10"      ];
        ECMPE_ECMPE09                    [i] = (*(ECMPE        [i]))["ECMPE09"      ];
        ECMPE_ECMPE08                    [i] = (*(ECMPE        [i]))["ECMPE08"      ];
        ECMPE_ECMPE07                    [i] = (*(ECMPE        [i]))["ECMPE07"      ];
        ECMPE_ECMPE06                    [i] = (*(ECMPE        [i]))["ECMPE06"      ];
        ECMPE_ECMPE05                    [i] = (*(ECMPE        [i]))["ECMPE05"      ];
        ECMPE_ECMPE04                    [i] = (*(ECMPE        [i]))["ECMPE04"      ];
        ECMPE_ECMPE03                    [i] = (*(ECMPE        [i]))["ECMPE03"      ];
        ECMPE_ECMPE02                    [i] = (*(ECMPE        [i]))["ECMPE02"      ];
        ECMPE_ECMPE01                    [i] = (*(ECMPE        [i]))["ECMPE01"      ];
        ECMPE_ECMPE00                    [i] = (*(ECMPE        [i]))["ECMPE00"      ];
        return;
    }
    if (addr == 0x01F4) {
        ECMPE9_ECMPE929                   = (*ECMPE9       )["ECMPE929"     ];
        ECMPE9_ECMPE928                   = (*ECMPE9       )["ECMPE928"     ];
        ECMPE9_ECMPE927                   = (*ECMPE9       )["ECMPE927"     ];
        ECMPE9_ECMPE926                   = (*ECMPE9       )["ECMPE926"     ];
        ECMPE9_ECMPE925                   = (*ECMPE9       )["ECMPE925"     ];
        ECMPE9_ECMPE924                   = (*ECMPE9       )["ECMPE924"     ];
        ECMPE9_ECMPE923                   = (*ECMPE9       )["ECMPE923"     ];
        ECMPE9_ECMPE922                   = (*ECMPE9       )["ECMPE922"     ];
        ECMPE9_ECMPE921                   = (*ECMPE9       )["ECMPE921"     ];
        ECMPE9_ECMPE920                   = (*ECMPE9       )["ECMPE920"     ];
        ECMPE9_ECMPE919                   = (*ECMPE9       )["ECMPE919"     ];
        ECMPE9_ECMPE918                   = (*ECMPE9       )["ECMPE918"     ];
        ECMPE9_ECMPE917                   = (*ECMPE9       )["ECMPE917"     ];
        ECMPE9_ECMPE916                   = (*ECMPE9       )["ECMPE916"     ];
        ECMPE9_ECMPE915                   = (*ECMPE9       )["ECMPE915"     ];
        ECMPE9_ECMPE914                   = (*ECMPE9       )["ECMPE914"     ];
        ECMPE9_ECMPE913                   = (*ECMPE9       )["ECMPE913"     ];
        ECMPE9_ECMPE912                   = (*ECMPE9       )["ECMPE912"     ];
        ECMPE9_ECMPE911                   = (*ECMPE9       )["ECMPE911"     ];
        ECMPE9_ECMPE910                   = (*ECMPE9       )["ECMPE910"     ];
        ECMPE9_ECMPE909                   = (*ECMPE9       )["ECMPE909"     ];
        ECMPE9_ECMPE908                   = (*ECMPE9       )["ECMPE908"     ];
        ECMPE9_ECMPE907                   = (*ECMPE9       )["ECMPE907"     ];
        ECMPE9_ECMPE906                   = (*ECMPE9       )["ECMPE906"     ];
        ECMPE9_ECMPE905                   = (*ECMPE9       )["ECMPE905"     ];
        ECMPE9_ECMPE904                   = (*ECMPE9       )["ECMPE904"     ];
        ECMPE9_ECMPE903                   = (*ECMPE9       )["ECMPE903"     ];
        ECMPE9_ECMPE902                   = (*ECMPE9       )["ECMPE902"     ];
        ECMPE9_ECMPE901                   = (*ECMPE9       )["ECMPE901"     ];
        ECMPE9_ECMPE900                   = (*ECMPE9       )["ECMPE900"     ];
        return;
    }
    if (addr == 0x01F8) {
        ECMDTMCTL_DTMSTACNTCLK            = (*ECMDTMCTL    )["DTMSTACNTCLK" ];
        ECMDTMCTL_DTMSTP                  = (*ECMDTMCTL    )["DTMSTP"       ];
        ECMDTMCTL_DTMSTA                  = (*ECMDTMCTL    )["DTMSTA"       ];
        return;
    }
    if (addr == 0x01FC) {
        ECMDTMR_ECMDTMR                   = (*ECMDTMR      )["ECMDTMR"      ];
        return;
    }
    if (addr == 0x0200) {
        ECMDTMCMP_CMPW                    = (*ECMDTMCMP    )["CMPW"         ];
        ECMDTMCMP_ECMDTMCMP               = (*ECMDTMCMP    )["ECMDTMCMP"    ];
        return;
    }
    if (addr == 0x0204) {
        ECMMIDTMCFG0_ECMMITE031           = (*ECMMIDTMCFG0 )["ECMMITE031"   ];
        ECMMIDTMCFG0_ECMMITE030           = (*ECMMIDTMCFG0 )["ECMMITE030"   ];
        ECMMIDTMCFG0_ECMMITE029           = (*ECMMIDTMCFG0 )["ECMMITE029"   ];
        ECMMIDTMCFG0_ECMMITE028           = (*ECMMIDTMCFG0 )["ECMMITE028"   ];
        ECMMIDTMCFG0_ECMMITE027           = (*ECMMIDTMCFG0 )["ECMMITE027"   ];
        ECMMIDTMCFG0_ECMMITE026           = (*ECMMIDTMCFG0 )["ECMMITE026"   ];
        ECMMIDTMCFG0_ECMMITE025           = (*ECMMIDTMCFG0 )["ECMMITE025"   ];
        ECMMIDTMCFG0_ECMMITE024           = (*ECMMIDTMCFG0 )["ECMMITE024"   ];
        ECMMIDTMCFG0_ECMMITE023           = (*ECMMIDTMCFG0 )["ECMMITE023"   ];
        ECMMIDTMCFG0_ECMMITE022           = (*ECMMIDTMCFG0 )["ECMMITE022"   ];
        ECMMIDTMCFG0_ECMMITE021           = (*ECMMIDTMCFG0 )["ECMMITE021"   ];
        ECMMIDTMCFG0_ECMMITE020           = (*ECMMIDTMCFG0 )["ECMMITE020"   ];
        ECMMIDTMCFG0_ECMMITE019           = (*ECMMIDTMCFG0 )["ECMMITE019"   ];
        ECMMIDTMCFG0_ECMMITE018           = (*ECMMIDTMCFG0 )["ECMMITE018"   ];
        ECMMIDTMCFG0_ECMMITE017           = (*ECMMIDTMCFG0 )["ECMMITE017"   ];
        ECMMIDTMCFG0_ECMMITE016           = (*ECMMIDTMCFG0 )["ECMMITE016"   ];
        ECMMIDTMCFG0_ECMMITE01514         = (*ECMMIDTMCFG0 )["ECMMITE01514" ];
        ECMMIDTMCFG0_ECMMITE01312         = (*ECMMIDTMCFG0 )["ECMMITE01312" ];
        ECMMIDTMCFG0_ECMMITE01110         = (*ECMMIDTMCFG0 )["ECMMITE01110" ];
        ECMMIDTMCFG0_ECMMITE00908         = (*ECMMIDTMCFG0 )["ECMMITE00908" ];
        ECMMIDTMCFG0_ECMMITE00706         = (*ECMMIDTMCFG0 )["ECMMITE00706" ];
        ECMMIDTMCFG0_ECMMITE00504         = (*ECMMIDTMCFG0 )["ECMMITE00504" ];
        ECMMIDTMCFG0_ECMMITE00302         = (*ECMMIDTMCFG0 )["ECMMITE00302" ];
        ECMMIDTMCFG0_ECMMITE00100         = (*ECMMIDTMCFG0 )["ECMMITE00100" ];
        return;
    }
    if ((0x0208 <= addr) && (addr <= (0x0208)+(4*7)) && ((addr-0x0208)%4 == 0) ) {
        uint i = (addr - 0x0208)/4 + 1;
        ECMMIDTMCFG_ECMMITE31            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE31"    ];
        ECMMIDTMCFG_ECMMITE30            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE30"    ];
        ECMMIDTMCFG_ECMMITE29            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE29"    ];
        ECMMIDTMCFG_ECMMITE28            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE28"    ];
        ECMMIDTMCFG_ECMMITE27            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE27"    ];
        ECMMIDTMCFG_ECMMITE26            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE26"    ];
        ECMMIDTMCFG_ECMMITE25            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE25"    ];
        ECMMIDTMCFG_ECMMITE24            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE24"    ];
        ECMMIDTMCFG_ECMMITE23            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE23"    ];
        ECMMIDTMCFG_ECMMITE22            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE22"    ];
        ECMMIDTMCFG_ECMMITE21            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE21"    ];
        ECMMIDTMCFG_ECMMITE20            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE20"    ];
        ECMMIDTMCFG_ECMMITE19            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE19"    ];
        ECMMIDTMCFG_ECMMITE18            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE18"    ];
        ECMMIDTMCFG_ECMMITE17            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE17"    ];
        ECMMIDTMCFG_ECMMITE16            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE16"    ];
        ECMMIDTMCFG_ECMMITE15            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE15"    ];
        ECMMIDTMCFG_ECMMITE14            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE14"    ];
        ECMMIDTMCFG_ECMMITE13            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE13"    ];
        ECMMIDTMCFG_ECMMITE12            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE12"    ];
        ECMMIDTMCFG_ECMMITE11            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE11"    ];
        ECMMIDTMCFG_ECMMITE10            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE10"    ];
        ECMMIDTMCFG_ECMMITE09            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE09"    ];
        ECMMIDTMCFG_ECMMITE08            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE08"    ];
        ECMMIDTMCFG_ECMMITE07            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE07"    ];
        ECMMIDTMCFG_ECMMITE06            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE06"    ];
        ECMMIDTMCFG_ECMMITE05            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE05"    ];
        ECMMIDTMCFG_ECMMITE04            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE04"    ];
        ECMMIDTMCFG_ECMMITE03            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE03"    ];
        ECMMIDTMCFG_ECMMITE02            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE02"    ];
        ECMMIDTMCFG_ECMMITE01            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE01"    ];
        ECMMIDTMCFG_ECMMITE00            [i] = (*(ECMMIDTMCFG  [i]))["ECMMITE00"    ];
        return;
    }
    if (addr == 0x0228) {
        ECMMIDTMCFG9_ECMMITE928           = (*ECMMIDTMCFG9 )["ECMMITE928"   ];
        ECMMIDTMCFG9_ECMMITE927           = (*ECMMIDTMCFG9 )["ECMMITE927"   ];
        ECMMIDTMCFG9_ECMMITE926           = (*ECMMIDTMCFG9 )["ECMMITE926"   ];
        ECMMIDTMCFG9_ECMMITE925           = (*ECMMIDTMCFG9 )["ECMMITE925"   ];
        ECMMIDTMCFG9_ECMMITE924           = (*ECMMIDTMCFG9 )["ECMMITE924"   ];
        ECMMIDTMCFG9_ECMMITE923           = (*ECMMIDTMCFG9 )["ECMMITE923"   ];
        ECMMIDTMCFG9_ECMMITE922           = (*ECMMIDTMCFG9 )["ECMMITE922"   ];
        ECMMIDTMCFG9_ECMMITE921           = (*ECMMIDTMCFG9 )["ECMMITE921"   ];
        ECMMIDTMCFG9_ECMMITE920           = (*ECMMIDTMCFG9 )["ECMMITE920"   ];
        ECMMIDTMCFG9_ECMMITE919           = (*ECMMIDTMCFG9 )["ECMMITE919"   ];
        ECMMIDTMCFG9_ECMMITE918           = (*ECMMIDTMCFG9 )["ECMMITE918"   ];
        ECMMIDTMCFG9_ECMMITE917           = (*ECMMIDTMCFG9 )["ECMMITE917"   ];
        ECMMIDTMCFG9_ECMMITE916           = (*ECMMIDTMCFG9 )["ECMMITE916"   ];
        ECMMIDTMCFG9_ECMMITE915           = (*ECMMIDTMCFG9 )["ECMMITE915"   ];
        ECMMIDTMCFG9_ECMMITE914           = (*ECMMIDTMCFG9 )["ECMMITE914"   ];
        ECMMIDTMCFG9_ECMMITE913           = (*ECMMIDTMCFG9 )["ECMMITE913"   ];
        ECMMIDTMCFG9_ECMMITE912           = (*ECMMIDTMCFG9 )["ECMMITE912"   ];
        ECMMIDTMCFG9_ECMMITE911           = (*ECMMIDTMCFG9 )["ECMMITE911"   ];
        ECMMIDTMCFG9_ECMMITE910           = (*ECMMIDTMCFG9 )["ECMMITE910"   ];
        ECMMIDTMCFG9_ECMMITE909           = (*ECMMIDTMCFG9 )["ECMMITE909"   ];
        ECMMIDTMCFG9_ECMMITE908           = (*ECMMIDTMCFG9 )["ECMMITE908"   ];
        ECMMIDTMCFG9_ECMMITE907           = (*ECMMIDTMCFG9 )["ECMMITE907"   ];
        ECMMIDTMCFG9_ECMMITE906           = (*ECMMIDTMCFG9 )["ECMMITE906"   ];
        ECMMIDTMCFG9_ECMMITE905           = (*ECMMIDTMCFG9 )["ECMMITE905"   ];
        ECMMIDTMCFG9_ECMMITE904           = (*ECMMIDTMCFG9 )["ECMMITE904"   ];
        ECMMIDTMCFG9_ECMMITE903           = (*ECMMIDTMCFG9 )["ECMMITE903"   ];
        ECMMIDTMCFG9_ECMMITE902           = (*ECMMIDTMCFG9 )["ECMMITE902"   ];
        ECMMIDTMCFG9_ECMMITE901           = (*ECMMIDTMCFG9 )["ECMMITE901"   ];
        ECMMIDTMCFG9_ECMMITE900           = (*ECMMIDTMCFG9 )["ECMMITE900"   ];
        return;
    }
    if (addr == 0x022C) {
        ECMNMIDTMCFG0_ECMNMITE031         = (*ECMNMIDTMCFG0)["ECMNMITE031"  ];
        ECMNMIDTMCFG0_ECMNMITE030         = (*ECMNMIDTMCFG0)["ECMNMITE030"  ];
        ECMNMIDTMCFG0_ECMNMITE029         = (*ECMNMIDTMCFG0)["ECMNMITE029"  ];
        ECMNMIDTMCFG0_ECMNMITE028         = (*ECMNMIDTMCFG0)["ECMNMITE028"  ];
        ECMNMIDTMCFG0_ECMNMITE027         = (*ECMNMIDTMCFG0)["ECMNMITE027"  ];
        ECMNMIDTMCFG0_ECMNMITE026         = (*ECMNMIDTMCFG0)["ECMNMITE026"  ];
        ECMNMIDTMCFG0_ECMNMITE025         = (*ECMNMIDTMCFG0)["ECMNMITE025"  ];
        ECMNMIDTMCFG0_ECMNMITE024         = (*ECMNMIDTMCFG0)["ECMNMITE024"  ];
        ECMNMIDTMCFG0_ECMNMITE023         = (*ECMNMIDTMCFG0)["ECMNMITE023"  ];
        ECMNMIDTMCFG0_ECMNMITE022         = (*ECMNMIDTMCFG0)["ECMNMITE022"  ];
        ECMNMIDTMCFG0_ECMNMITE021         = (*ECMNMIDTMCFG0)["ECMNMITE021"  ];
        ECMNMIDTMCFG0_ECMNMITE020         = (*ECMNMIDTMCFG0)["ECMNMITE020"  ];
        ECMNMIDTMCFG0_ECMNMITE019         = (*ECMNMIDTMCFG0)["ECMNMITE019"  ];
        ECMNMIDTMCFG0_ECMNMITE018         = (*ECMNMIDTMCFG0)["ECMNMITE018"  ];
        ECMNMIDTMCFG0_ECMNMITE017         = (*ECMNMIDTMCFG0)["ECMNMITE017"  ];
        ECMNMIDTMCFG0_ECMNMITE016         = (*ECMNMIDTMCFG0)["ECMNMITE016"  ];
        ECMNMIDTMCFG0_ECMNMITE01514       = (*ECMNMIDTMCFG0)["ECMNMITE01514"];
        ECMNMIDTMCFG0_ECMNMITE01312       = (*ECMNMIDTMCFG0)["ECMNMITE01312"];
        ECMNMIDTMCFG0_ECMNMITE01110       = (*ECMNMIDTMCFG0)["ECMNMITE01110"];
        ECMNMIDTMCFG0_ECMNMITE00908       = (*ECMNMIDTMCFG0)["ECMNMITE00908"];
        ECMNMIDTMCFG0_ECMNMITE00706       = (*ECMNMIDTMCFG0)["ECMNMITE00706"];
        ECMNMIDTMCFG0_ECMNMITE00504       = (*ECMNMIDTMCFG0)["ECMNMITE00504"];
        ECMNMIDTMCFG0_ECMNMITE00302       = (*ECMNMIDTMCFG0)["ECMNMITE00302"];
        ECMNMIDTMCFG0_ECMNMITE00100       = (*ECMNMIDTMCFG0)["ECMNMITE00100"];
        return;
    }
    if ((0x0230 <= addr) && (addr <= (0x0230)+(4*7)) && ((addr-0x0230)%4 == 0) ) {
        uint i = (addr - 0x0230)/4 + 1;
        ECMNMIDTMCFG_ECMNMITE31          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE31"   ];
        ECMNMIDTMCFG_ECMNMITE30          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE30"   ];
        ECMNMIDTMCFG_ECMNMITE29          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE29"   ];
        ECMNMIDTMCFG_ECMNMITE28          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE28"   ];
        ECMNMIDTMCFG_ECMNMITE27          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE27"   ];
        ECMNMIDTMCFG_ECMNMITE26          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE26"   ];
        ECMNMIDTMCFG_ECMNMITE25          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE25"   ];
        ECMNMIDTMCFG_ECMNMITE24          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE24"   ];
        ECMNMIDTMCFG_ECMNMITE23          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE23"   ];
        ECMNMIDTMCFG_ECMNMITE22          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE22"   ];
        ECMNMIDTMCFG_ECMNMITE21          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE21"   ];
        ECMNMIDTMCFG_ECMNMITE20          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE20"   ];
        ECMNMIDTMCFG_ECMNMITE19          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE19"   ];
        ECMNMIDTMCFG_ECMNMITE18          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE18"   ];
        ECMNMIDTMCFG_ECMNMITE17          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE17"   ];
        ECMNMIDTMCFG_ECMNMITE16          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE16"   ];
        ECMNMIDTMCFG_ECMNMITE15          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE15"   ];
        ECMNMIDTMCFG_ECMNMITE14          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE14"   ];
        ECMNMIDTMCFG_ECMNMITE13          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE13"   ];
        ECMNMIDTMCFG_ECMNMITE12          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE12"   ];
        ECMNMIDTMCFG_ECMNMITE11          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE11"   ];
        ECMNMIDTMCFG_ECMNMITE10          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE10"   ];
        ECMNMIDTMCFG_ECMNMITE09          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE09"   ];
        ECMNMIDTMCFG_ECMNMITE08          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE08"   ];
        ECMNMIDTMCFG_ECMNMITE07          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE07"   ];
        ECMNMIDTMCFG_ECMNMITE06          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE06"   ];
        ECMNMIDTMCFG_ECMNMITE05          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE05"   ];
        ECMNMIDTMCFG_ECMNMITE04          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE04"   ];
        ECMNMIDTMCFG_ECMNMITE03          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE03"   ];
        ECMNMIDTMCFG_ECMNMITE02          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE02"   ];
        ECMNMIDTMCFG_ECMNMITE01          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE01"   ];
        ECMNMIDTMCFG_ECMNMITE00          [i] = (*(ECMNMIDTMCFG [i]))["ECMNMITE00"   ];
        return;
    }
    if (addr == 0x0250) {
        ECMNMIDTMCFG9_ECMNMITE928         = (*ECMNMIDTMCFG9)["ECMNMITE928"  ];
        ECMNMIDTMCFG9_ECMNMITE927         = (*ECMNMIDTMCFG9)["ECMNMITE927"  ];
        ECMNMIDTMCFG9_ECMNMITE926         = (*ECMNMIDTMCFG9)["ECMNMITE926"  ];
        ECMNMIDTMCFG9_ECMNMITE925         = (*ECMNMIDTMCFG9)["ECMNMITE925"  ];
        ECMNMIDTMCFG9_ECMNMITE924         = (*ECMNMIDTMCFG9)["ECMNMITE924"  ];
        ECMNMIDTMCFG9_ECMNMITE923         = (*ECMNMIDTMCFG9)["ECMNMITE923"  ];
        ECMNMIDTMCFG9_ECMNMITE922         = (*ECMNMIDTMCFG9)["ECMNMITE922"  ];
        ECMNMIDTMCFG9_ECMNMITE921         = (*ECMNMIDTMCFG9)["ECMNMITE921"  ];
        ECMNMIDTMCFG9_ECMNMITE920         = (*ECMNMIDTMCFG9)["ECMNMITE920"  ];
        ECMNMIDTMCFG9_ECMNMITE919         = (*ECMNMIDTMCFG9)["ECMNMITE919"  ];
        ECMNMIDTMCFG9_ECMNMITE918         = (*ECMNMIDTMCFG9)["ECMNMITE918"  ];
        ECMNMIDTMCFG9_ECMNMITE917         = (*ECMNMIDTMCFG9)["ECMNMITE917"  ];
        ECMNMIDTMCFG9_ECMNMITE916         = (*ECMNMIDTMCFG9)["ECMNMITE916"  ];
        ECMNMIDTMCFG9_ECMNMITE915         = (*ECMNMIDTMCFG9)["ECMNMITE915"  ];
        ECMNMIDTMCFG9_ECMNMITE914         = (*ECMNMIDTMCFG9)["ECMNMITE914"  ];
        ECMNMIDTMCFG9_ECMNMITE913         = (*ECMNMIDTMCFG9)["ECMNMITE913"  ];
        ECMNMIDTMCFG9_ECMNMITE912         = (*ECMNMIDTMCFG9)["ECMNMITE912"  ];
        ECMNMIDTMCFG9_ECMNMITE911         = (*ECMNMIDTMCFG9)["ECMNMITE911"  ];
        ECMNMIDTMCFG9_ECMNMITE910         = (*ECMNMIDTMCFG9)["ECMNMITE910"  ];
        ECMNMIDTMCFG9_ECMNMITE909         = (*ECMNMIDTMCFG9)["ECMNMITE909"  ];
        ECMNMIDTMCFG9_ECMNMITE908         = (*ECMNMIDTMCFG9)["ECMNMITE908"  ];
        ECMNMIDTMCFG9_ECMNMITE907         = (*ECMNMIDTMCFG9)["ECMNMITE907"  ];
        ECMNMIDTMCFG9_ECMNMITE906         = (*ECMNMIDTMCFG9)["ECMNMITE906"  ];
        ECMNMIDTMCFG9_ECMNMITE905         = (*ECMNMIDTMCFG9)["ECMNMITE905"  ];
        ECMNMIDTMCFG9_ECMNMITE904         = (*ECMNMIDTMCFG9)["ECMNMITE904"  ];
        ECMNMIDTMCFG9_ECMNMITE903         = (*ECMNMIDTMCFG9)["ECMNMITE903"  ];
        ECMNMIDTMCFG9_ECMNMITE902         = (*ECMNMIDTMCFG9)["ECMNMITE902"  ];
        ECMNMIDTMCFG9_ECMNMITE901         = (*ECMNMIDTMCFG9)["ECMNMITE901"  ];
        ECMNMIDTMCFG9_ECMNMITE900         = (*ECMNMIDTMCFG9)["ECMNMITE900"  ];
        return;
    }
    if (addr == 0x0254) {
        ECMEOCCFG_EOCIEN                  = (*ECMEOCCFG    )["EOCIEN"       ];
        ECMEOCCFG_CMPW                    = (*ECMEOCCFG    )["CMPW"         ];
        ECMEOCCFG_ECMEOUTCLRT             = (*ECMEOCCFG    )["ECMEOUTCLRT"  ];
        return;
    }
    if (addr == 0x0258) {
        ECMPEM_MSKM                       = (*ECMPEM       )["MSKM"         ];
        ECMPEM_MSKC                       = (*ECMPEM       )["MSKC"         ];
        return;
    }
}


/// Update local value to bit value
/// @return None
void Cecm_e2_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ECMmESET     )["ECMmEST"      ] = ECMmESET_ECMmEST;
        return;
    }
    if (addr == 0x0004) {
        (*ECMmECLR     )["ECMmECT"      ] = ECMmECLR_ECMmECT;
        return;
    }
    if (addr == 0x0008) {
        (*ECMmESSTR0   )["ECMmSSE031"   ] = ECMmESSTR0_ECMmSSE031;
        (*ECMmESSTR0   )["ECMmSSE030"   ] = ECMmESSTR0_ECMmSSE030;
        (*ECMmESSTR0   )["ECMmSSE029"   ] = ECMmESSTR0_ECMmSSE029;
        (*ECMmESSTR0   )["ECMmSSE028"   ] = ECMmESSTR0_ECMmSSE028;
        (*ECMmESSTR0   )["ECMmSSE027"   ] = ECMmESSTR0_ECMmSSE027;
        (*ECMmESSTR0   )["ECMmSSE026"   ] = ECMmESSTR0_ECMmSSE026;
        (*ECMmESSTR0   )["ECMmSSE025"   ] = ECMmESSTR0_ECMmSSE025;
        (*ECMmESSTR0   )["ECMmSSE024"   ] = ECMmESSTR0_ECMmSSE024;
        (*ECMmESSTR0   )["ECMmSSE023"   ] = ECMmESSTR0_ECMmSSE023;
        (*ECMmESSTR0   )["ECMmSSE022"   ] = ECMmESSTR0_ECMmSSE022;
        (*ECMmESSTR0   )["ECMmSSE021"   ] = ECMmESSTR0_ECMmSSE021;
        (*ECMmESSTR0   )["ECMmSSE020"   ] = ECMmESSTR0_ECMmSSE020;
        (*ECMmESSTR0   )["ECMmSSE019"   ] = ECMmESSTR0_ECMmSSE019;
        (*ECMmESSTR0   )["ECMmSSE018"   ] = ECMmESSTR0_ECMmSSE018;
        (*ECMmESSTR0   )["ECMmSSE017"   ] = ECMmESSTR0_ECMmSSE017;
        (*ECMmESSTR0   )["ECMmSSE016"   ] = ECMmESSTR0_ECMmSSE016;
        (*ECMmESSTR0   )["ECMmSSE01514" ] = ECMmESSTR0_ECMmSSE01514;
        (*ECMmESSTR0   )["ECMmSSE01312" ] = ECMmESSTR0_ECMmSSE01312;
        (*ECMmESSTR0   )["ECMmSSE01110" ] = ECMmESSTR0_ECMmSSE01110;
        (*ECMmESSTR0   )["ECMmSSE00908" ] = ECMmESSTR0_ECMmSSE00908;
        (*ECMmESSTR0   )["ECMmSSE00706" ] = ECMmESSTR0_ECMmSSE00706;
        (*ECMmESSTR0   )["ECMmSSE00504" ] = ECMmESSTR0_ECMmSSE00504;
        (*ECMmESSTR0   )["ECMmSSE00302" ] = ECMmESSTR0_ECMmSSE00302;
        (*ECMmESSTR0   )["ECMmSSE00100" ] = ECMmESSTR0_ECMmSSE00100;
        return;
    }
    if ((0x000C <= addr) && (addr <= (0x000C)+(4*7)) && ((addr-0x000C)%4 == 0) ) {
        uint i = (addr - 0x000C)/4 + 1;
        (*(ECMmESSTR    [i]))["ECMmSSE31"    ] = ECMmESSTR_ECMmSSE31[i];
        (*(ECMmESSTR    [i]))["ECMmSSE30"    ] = ECMmESSTR_ECMmSSE30[i];
        (*(ECMmESSTR    [i]))["ECMmSSE29"    ] = ECMmESSTR_ECMmSSE29[i];
        (*(ECMmESSTR    [i]))["ECMmSSE28"    ] = ECMmESSTR_ECMmSSE28[i];
        (*(ECMmESSTR    [i]))["ECMmSSE27"    ] = ECMmESSTR_ECMmSSE27[i];
        (*(ECMmESSTR    [i]))["ECMmSSE26"    ] = ECMmESSTR_ECMmSSE26[i];
        (*(ECMmESSTR    [i]))["ECMmSSE25"    ] = ECMmESSTR_ECMmSSE25[i];
        (*(ECMmESSTR    [i]))["ECMmSSE24"    ] = ECMmESSTR_ECMmSSE24[i];
        (*(ECMmESSTR    [i]))["ECMmSSE23"    ] = ECMmESSTR_ECMmSSE23[i];
        (*(ECMmESSTR    [i]))["ECMmSSE22"    ] = ECMmESSTR_ECMmSSE22[i];
        (*(ECMmESSTR    [i]))["ECMmSSE21"    ] = ECMmESSTR_ECMmSSE21[i];
        (*(ECMmESSTR    [i]))["ECMmSSE20"    ] = ECMmESSTR_ECMmSSE20[i];
        (*(ECMmESSTR    [i]))["ECMmSSE19"    ] = ECMmESSTR_ECMmSSE19[i];
        (*(ECMmESSTR    [i]))["ECMmSSE18"    ] = ECMmESSTR_ECMmSSE18[i];
        (*(ECMmESSTR    [i]))["ECMmSSE17"    ] = ECMmESSTR_ECMmSSE17[i];
        (*(ECMmESSTR    [i]))["ECMmSSE16"    ] = ECMmESSTR_ECMmSSE16[i];
        (*(ECMmESSTR    [i]))["ECMmSSE15"    ] = ECMmESSTR_ECMmSSE15[i];
        (*(ECMmESSTR    [i]))["ECMmSSE14"    ] = ECMmESSTR_ECMmSSE14[i];
        (*(ECMmESSTR    [i]))["ECMmSSE13"    ] = ECMmESSTR_ECMmSSE13[i];
        (*(ECMmESSTR    [i]))["ECMmSSE12"    ] = ECMmESSTR_ECMmSSE12[i];
        (*(ECMmESSTR    [i]))["ECMmSSE11"    ] = ECMmESSTR_ECMmSSE11[i];
        (*(ECMmESSTR    [i]))["ECMmSSE10"    ] = ECMmESSTR_ECMmSSE10[i];
        (*(ECMmESSTR    [i]))["ECMmSSE09"    ] = ECMmESSTR_ECMmSSE09[i];
        (*(ECMmESSTR    [i]))["ECMmSSE08"    ] = ECMmESSTR_ECMmSSE08[i];
        (*(ECMmESSTR    [i]))["ECMmSSE07"    ] = ECMmESSTR_ECMmSSE07[i];
        (*(ECMmESSTR    [i]))["ECMmSSE06"    ] = ECMmESSTR_ECMmSSE06[i];
        (*(ECMmESSTR    [i]))["ECMmSSE05"    ] = ECMmESSTR_ECMmSSE05[i];
        (*(ECMmESSTR    [i]))["ECMmSSE04"    ] = ECMmESSTR_ECMmSSE04[i];
        (*(ECMmESSTR    [i]))["ECMmSSE03"    ] = ECMmESSTR_ECMmSSE03[i];
        (*(ECMmESSTR    [i]))["ECMmSSE02"    ] = ECMmESSTR_ECMmSSE02[i];
        (*(ECMmESSTR    [i]))["ECMmSSE01"    ] = ECMmESSTR_ECMmSSE01[i];
        (*(ECMmESSTR    [i]))["ECMmSSE00"    ] = ECMmESSTR_ECMmSSE00[i];
        return;
    }
    if (addr == 0x002C) {
        (*ECMmESSTR9   )["ECMmSSE931"   ] = ECMmESSTR9_ECMmSSE931;
        (*ECMmESSTR9   )["ECMmSSE930"   ] = ECMmESSTR9_ECMmSSE930;
        (*ECMmESSTR9   )["ECMmSSE929"   ] = ECMmESSTR9_ECMmSSE929;
        (*ECMmESSTR9   )["ECMmSSE928"   ] = ECMmESSTR9_ECMmSSE928;
        (*ECMmESSTR9   )["ECMmSSE927"   ] = ECMmESSTR9_ECMmSSE927;
        (*ECMmESSTR9   )["ECMmSSE926"   ] = ECMmESSTR9_ECMmSSE926;
        (*ECMmESSTR9   )["ECMmSSE925"   ] = ECMmESSTR9_ECMmSSE925;
        (*ECMmESSTR9   )["ECMmSSE924"   ] = ECMmESSTR9_ECMmSSE924;
        (*ECMmESSTR9   )["ECMmSSE923"   ] = ECMmESSTR9_ECMmSSE923;
        (*ECMmESSTR9   )["ECMmSSE922"   ] = ECMmESSTR9_ECMmSSE922;
        (*ECMmESSTR9   )["ECMmSSE921"   ] = ECMmESSTR9_ECMmSSE921;
        (*ECMmESSTR9   )["ECMmSSE920"   ] = ECMmESSTR9_ECMmSSE920;
        (*ECMmESSTR9   )["ECMmSSE919"   ] = ECMmESSTR9_ECMmSSE919;
        (*ECMmESSTR9   )["ECMmSSE918"   ] = ECMmESSTR9_ECMmSSE918;
        (*ECMmESSTR9   )["ECMmSSE917"   ] = ECMmESSTR9_ECMmSSE917;
        (*ECMmESSTR9   )["ECMmSSE916"   ] = ECMmESSTR9_ECMmSSE916;
        (*ECMmESSTR9   )["ECMmSSE915"   ] = ECMmESSTR9_ECMmSSE915;
        (*ECMmESSTR9   )["ECMmSSE914"   ] = ECMmESSTR9_ECMmSSE914;
        (*ECMmESSTR9   )["ECMmSSE913"   ] = ECMmESSTR9_ECMmSSE913;
        (*ECMmESSTR9   )["ECMmSSE912"   ] = ECMmESSTR9_ECMmSSE912;
        (*ECMmESSTR9   )["ECMmSSE911"   ] = ECMmESSTR9_ECMmSSE911;
        (*ECMmESSTR9   )["ECMmSSE910"   ] = ECMmESSTR9_ECMmSSE910;
        (*ECMmESSTR9   )["ECMmSSE909"   ] = ECMmESSTR9_ECMmSSE909;
        (*ECMmESSTR9   )["ECMmSSE908"   ] = ECMmESSTR9_ECMmSSE908;
        (*ECMmESSTR9   )["ECMmSSE907"   ] = ECMmESSTR9_ECMmSSE907;
        (*ECMmESSTR9   )["ECMmSSE906"   ] = ECMmESSTR9_ECMmSSE906;
        (*ECMmESSTR9   )["ECMmSSE905"   ] = ECMmESSTR9_ECMmSSE905;
        (*ECMmESSTR9   )["ECMmSSE904"   ] = ECMmESSTR9_ECMmSSE904;
        (*ECMmESSTR9   )["ECMmSSE903"   ] = ECMmESSTR9_ECMmSSE903;
        (*ECMmESSTR9   )["ECMmSSE902"   ] = ECMmESSTR9_ECMmSSE902;
        (*ECMmESSTR9   )["ECMmSSE901"   ] = ECMmESSTR9_ECMmSSE901;
        (*ECMmESSTR9   )["ECMmSSE900"   ] = ECMmESSTR9_ECMmSSE900;
        return;
    }
    if (addr == 0x0100) {
        (*ECMEPCFG     )["ECMSL0"       ] = ECMEPCFG_ECMSL0;
        return;
    }
    if (addr == 0x0104) {
        (*ECMMICFG0    )["ECMMIE031"    ] = ECMMICFG0_ECMMIE031;
        (*ECMMICFG0    )["ECMMIE030"    ] = ECMMICFG0_ECMMIE030;
        (*ECMMICFG0    )["ECMMIE029"    ] = ECMMICFG0_ECMMIE029;
        (*ECMMICFG0    )["ECMMIE028"    ] = ECMMICFG0_ECMMIE028;
        (*ECMMICFG0    )["ECMMIE027"    ] = ECMMICFG0_ECMMIE027;
        (*ECMMICFG0    )["ECMMIE026"    ] = ECMMICFG0_ECMMIE026;
        (*ECMMICFG0    )["ECMMIE025"    ] = ECMMICFG0_ECMMIE025;
        (*ECMMICFG0    )["ECMMIE024"    ] = ECMMICFG0_ECMMIE024;
        (*ECMMICFG0    )["ECMMIE023"    ] = ECMMICFG0_ECMMIE023;
        (*ECMMICFG0    )["ECMMIE022"    ] = ECMMICFG0_ECMMIE022;
        (*ECMMICFG0    )["ECMMIE021"    ] = ECMMICFG0_ECMMIE021;
        (*ECMMICFG0    )["ECMMIE020"    ] = ECMMICFG0_ECMMIE020;
        (*ECMMICFG0    )["ECMMIE019"    ] = ECMMICFG0_ECMMIE019;
        (*ECMMICFG0    )["ECMMIE018"    ] = ECMMICFG0_ECMMIE018;
        (*ECMMICFG0    )["ECMMIE017"    ] = ECMMICFG0_ECMMIE017;
        (*ECMMICFG0    )["ECMMIE016"    ] = ECMMICFG0_ECMMIE016;
        (*ECMMICFG0    )["ECMMIE01514"  ] = ECMMICFG0_ECMMIE01514;
        (*ECMMICFG0    )["ECMMIE01312"  ] = ECMMICFG0_ECMMIE01312;
        (*ECMMICFG0    )["ECMMIE01110"  ] = ECMMICFG0_ECMMIE01110;
        (*ECMMICFG0    )["ECMMIE00908"  ] = ECMMICFG0_ECMMIE00908;
        (*ECMMICFG0    )["ECMMIE00706"  ] = ECMMICFG0_ECMMIE00706;
        (*ECMMICFG0    )["ECMMIE00504"  ] = ECMMICFG0_ECMMIE00504;
        (*ECMMICFG0    )["ECMMIE00302"  ] = ECMMICFG0_ECMMIE00302;
        (*ECMMICFG0    )["ECMMIE00100"  ] = ECMMICFG0_ECMMIE00100;
        return;
    }
    if ((0x0108 <= addr) && (addr <= (0x0108)+(4*7)) && ((addr-0x0108)%4 == 0) ) {
        uint i = (addr - 0x0108)/4 + 1;
        (*(ECMMICFG     [i]))["ECMMIE31"     ] = ECMMICFG_ECMMIE31[i];
        (*(ECMMICFG     [i]))["ECMMIE30"     ] = ECMMICFG_ECMMIE30[i];
        (*(ECMMICFG     [i]))["ECMMIE29"     ] = ECMMICFG_ECMMIE29[i];
        (*(ECMMICFG     [i]))["ECMMIE28"     ] = ECMMICFG_ECMMIE28[i];
        (*(ECMMICFG     [i]))["ECMMIE27"     ] = ECMMICFG_ECMMIE27[i];
        (*(ECMMICFG     [i]))["ECMMIE26"     ] = ECMMICFG_ECMMIE26[i];
        (*(ECMMICFG     [i]))["ECMMIE25"     ] = ECMMICFG_ECMMIE25[i];
        (*(ECMMICFG     [i]))["ECMMIE24"     ] = ECMMICFG_ECMMIE24[i];
        (*(ECMMICFG     [i]))["ECMMIE23"     ] = ECMMICFG_ECMMIE23[i];
        (*(ECMMICFG     [i]))["ECMMIE22"     ] = ECMMICFG_ECMMIE22[i];
        (*(ECMMICFG     [i]))["ECMMIE21"     ] = ECMMICFG_ECMMIE21[i];
        (*(ECMMICFG     [i]))["ECMMIE20"     ] = ECMMICFG_ECMMIE20[i];
        (*(ECMMICFG     [i]))["ECMMIE19"     ] = ECMMICFG_ECMMIE19[i];
        (*(ECMMICFG     [i]))["ECMMIE18"     ] = ECMMICFG_ECMMIE18[i];
        (*(ECMMICFG     [i]))["ECMMIE17"     ] = ECMMICFG_ECMMIE17[i];
        (*(ECMMICFG     [i]))["ECMMIE16"     ] = ECMMICFG_ECMMIE16[i];
        (*(ECMMICFG     [i]))["ECMMIE15"     ] = ECMMICFG_ECMMIE15[i];
        (*(ECMMICFG     [i]))["ECMMIE14"     ] = ECMMICFG_ECMMIE14[i];
        (*(ECMMICFG     [i]))["ECMMIE13"     ] = ECMMICFG_ECMMIE13[i];
        (*(ECMMICFG     [i]))["ECMMIE12"     ] = ECMMICFG_ECMMIE12[i];
        (*(ECMMICFG     [i]))["ECMMIE11"     ] = ECMMICFG_ECMMIE11[i];
        (*(ECMMICFG     [i]))["ECMMIE10"     ] = ECMMICFG_ECMMIE10[i];
        (*(ECMMICFG     [i]))["ECMMIE09"     ] = ECMMICFG_ECMMIE09[i];
        (*(ECMMICFG     [i]))["ECMMIE08"     ] = ECMMICFG_ECMMIE08[i];
        (*(ECMMICFG     [i]))["ECMMIE07"     ] = ECMMICFG_ECMMIE07[i];
        (*(ECMMICFG     [i]))["ECMMIE06"     ] = ECMMICFG_ECMMIE06[i];
        (*(ECMMICFG     [i]))["ECMMIE05"     ] = ECMMICFG_ECMMIE05[i];
        (*(ECMMICFG     [i]))["ECMMIE04"     ] = ECMMICFG_ECMMIE04[i];
        (*(ECMMICFG     [i]))["ECMMIE03"     ] = ECMMICFG_ECMMIE03[i];
        (*(ECMMICFG     [i]))["ECMMIE02"     ] = ECMMICFG_ECMMIE02[i];
        (*(ECMMICFG     [i]))["ECMMIE01"     ] = ECMMICFG_ECMMIE01[i];
        (*(ECMMICFG     [i]))["ECMMIE00"     ] = ECMMICFG_ECMMIE00[i];
        return;
    }
    if (addr == 0x0128) {
        (*ECMMICFG9    )["ECMMIE928"    ] = ECMMICFG9_ECMMIE928;
        (*ECMMICFG9    )["ECMMIE927"    ] = ECMMICFG9_ECMMIE927;
        (*ECMMICFG9    )["ECMMIE926"    ] = ECMMICFG9_ECMMIE926;
        (*ECMMICFG9    )["ECMMIE925"    ] = ECMMICFG9_ECMMIE925;
        (*ECMMICFG9    )["ECMMIE924"    ] = ECMMICFG9_ECMMIE924;
        (*ECMMICFG9    )["ECMMIE923"    ] = ECMMICFG9_ECMMIE923;
        (*ECMMICFG9    )["ECMMIE922"    ] = ECMMICFG9_ECMMIE922;
        (*ECMMICFG9    )["ECMMIE921"    ] = ECMMICFG9_ECMMIE921;
        (*ECMMICFG9    )["ECMMIE920"    ] = ECMMICFG9_ECMMIE920;
        (*ECMMICFG9    )["ECMMIE919"    ] = ECMMICFG9_ECMMIE919;
        (*ECMMICFG9    )["ECMMIE918"    ] = ECMMICFG9_ECMMIE918;
        (*ECMMICFG9    )["ECMMIE917"    ] = ECMMICFG9_ECMMIE917;
        (*ECMMICFG9    )["ECMMIE916"    ] = ECMMICFG9_ECMMIE916;
        (*ECMMICFG9    )["ECMMIE915"    ] = ECMMICFG9_ECMMIE915;
        (*ECMMICFG9    )["ECMMIE914"    ] = ECMMICFG9_ECMMIE914;
        (*ECMMICFG9    )["ECMMIE913"    ] = ECMMICFG9_ECMMIE913;
        (*ECMMICFG9    )["ECMMIE912"    ] = ECMMICFG9_ECMMIE912;
        (*ECMMICFG9    )["ECMMIE911"    ] = ECMMICFG9_ECMMIE911;
        (*ECMMICFG9    )["ECMMIE910"    ] = ECMMICFG9_ECMMIE910;
        (*ECMMICFG9    )["ECMMIE909"    ] = ECMMICFG9_ECMMIE909;
        (*ECMMICFG9    )["ECMMIE908"    ] = ECMMICFG9_ECMMIE908;
        (*ECMMICFG9    )["ECMMIE907"    ] = ECMMICFG9_ECMMIE907;
        (*ECMMICFG9    )["ECMMIE906"    ] = ECMMICFG9_ECMMIE906;
        (*ECMMICFG9    )["ECMMIE905"    ] = ECMMICFG9_ECMMIE905;
        (*ECMMICFG9    )["ECMMIE904"    ] = ECMMICFG9_ECMMIE904;
        (*ECMMICFG9    )["ECMMIE903"    ] = ECMMICFG9_ECMMIE903;
        (*ECMMICFG9    )["ECMMIE902"    ] = ECMMICFG9_ECMMIE902;
        (*ECMMICFG9    )["ECMMIE901"    ] = ECMMICFG9_ECMMIE901;
        (*ECMMICFG9    )["ECMMIE900"    ] = ECMMICFG9_ECMMIE900;
        return;
    }
    if (addr == 0x012C) {
        (*ECMNMICFG0   )["ECMNMIE031"   ] = ECMNMICFG0_ECMNMIE031;
        (*ECMNMICFG0   )["ECMNMIE030"   ] = ECMNMICFG0_ECMNMIE030;
        (*ECMNMICFG0   )["ECMNMIE029"   ] = ECMNMICFG0_ECMNMIE029;
        (*ECMNMICFG0   )["ECMNMIE028"   ] = ECMNMICFG0_ECMNMIE028;
        (*ECMNMICFG0   )["ECMNMIE027"   ] = ECMNMICFG0_ECMNMIE027;
        (*ECMNMICFG0   )["ECMNMIE026"   ] = ECMNMICFG0_ECMNMIE026;
        (*ECMNMICFG0   )["ECMNMIE025"   ] = ECMNMICFG0_ECMNMIE025;
        (*ECMNMICFG0   )["ECMNMIE024"   ] = ECMNMICFG0_ECMNMIE024;
        (*ECMNMICFG0   )["ECMNMIE023"   ] = ECMNMICFG0_ECMNMIE023;
        (*ECMNMICFG0   )["ECMNMIE022"   ] = ECMNMICFG0_ECMNMIE022;
        (*ECMNMICFG0   )["ECMNMIE021"   ] = ECMNMICFG0_ECMNMIE021;
        (*ECMNMICFG0   )["ECMNMIE020"   ] = ECMNMICFG0_ECMNMIE020;
        (*ECMNMICFG0   )["ECMNMIE019"   ] = ECMNMICFG0_ECMNMIE019;
        (*ECMNMICFG0   )["ECMNMIE018"   ] = ECMNMICFG0_ECMNMIE018;
        (*ECMNMICFG0   )["ECMNMIE017"   ] = ECMNMICFG0_ECMNMIE017;
        (*ECMNMICFG0   )["ECMNMIE016"   ] = ECMNMICFG0_ECMNMIE016;
        (*ECMNMICFG0   )["ECMNMIE01514" ] = ECMNMICFG0_ECMNMIE01514;
        (*ECMNMICFG0   )["ECMNMIE01312" ] = ECMNMICFG0_ECMNMIE01312;
        (*ECMNMICFG0   )["ECMNMIE01110" ] = ECMNMICFG0_ECMNMIE01110;
        (*ECMNMICFG0   )["ECMNMIE00908" ] = ECMNMICFG0_ECMNMIE00908;
        (*ECMNMICFG0   )["ECMNMIE00706" ] = ECMNMICFG0_ECMNMIE00706;
        (*ECMNMICFG0   )["ECMNMIE00504" ] = ECMNMICFG0_ECMNMIE00504;
        (*ECMNMICFG0   )["ECMNMIE00302" ] = ECMNMICFG0_ECMNMIE00302;
        (*ECMNMICFG0   )["ECMNMIE00100" ] = ECMNMICFG0_ECMNMIE00100;
        return;
    }
    if ((0x0130 <= addr) && (addr <= (0x0130)+(4*7)) && ((addr-0x0130)%4 == 0) ) {
        uint i = (addr - 0x0130)/4 + 1;
        (*(ECMNMICFG    [i]))["ECMNMIE31"    ] = ECMNMICFG_ECMNMIE31[i];
        (*(ECMNMICFG    [i]))["ECMNMIE30"    ] = ECMNMICFG_ECMNMIE30[i];
        (*(ECMNMICFG    [i]))["ECMNMIE29"    ] = ECMNMICFG_ECMNMIE29[i];
        (*(ECMNMICFG    [i]))["ECMNMIE28"    ] = ECMNMICFG_ECMNMIE28[i];
        (*(ECMNMICFG    [i]))["ECMNMIE27"    ] = ECMNMICFG_ECMNMIE27[i];
        (*(ECMNMICFG    [i]))["ECMNMIE26"    ] = ECMNMICFG_ECMNMIE26[i];
        (*(ECMNMICFG    [i]))["ECMNMIE25"    ] = ECMNMICFG_ECMNMIE25[i];
        (*(ECMNMICFG    [i]))["ECMNMIE24"    ] = ECMNMICFG_ECMNMIE24[i];
        (*(ECMNMICFG    [i]))["ECMNMIE23"    ] = ECMNMICFG_ECMNMIE23[i];
        (*(ECMNMICFG    [i]))["ECMNMIE22"    ] = ECMNMICFG_ECMNMIE22[i];
        (*(ECMNMICFG    [i]))["ECMNMIE21"    ] = ECMNMICFG_ECMNMIE21[i];
        (*(ECMNMICFG    [i]))["ECMNMIE20"    ] = ECMNMICFG_ECMNMIE20[i];
        (*(ECMNMICFG    [i]))["ECMNMIE19"    ] = ECMNMICFG_ECMNMIE19[i];
        (*(ECMNMICFG    [i]))["ECMNMIE18"    ] = ECMNMICFG_ECMNMIE18[i];
        (*(ECMNMICFG    [i]))["ECMNMIE17"    ] = ECMNMICFG_ECMNMIE17[i];
        (*(ECMNMICFG    [i]))["ECMNMIE16"    ] = ECMNMICFG_ECMNMIE16[i];
        (*(ECMNMICFG    [i]))["ECMNMIE15"    ] = ECMNMICFG_ECMNMIE15[i];
        (*(ECMNMICFG    [i]))["ECMNMIE14"    ] = ECMNMICFG_ECMNMIE14[i];
        (*(ECMNMICFG    [i]))["ECMNMIE13"    ] = ECMNMICFG_ECMNMIE13[i];
        (*(ECMNMICFG    [i]))["ECMNMIE12"    ] = ECMNMICFG_ECMNMIE12[i];
        (*(ECMNMICFG    [i]))["ECMNMIE11"    ] = ECMNMICFG_ECMNMIE11[i];
        (*(ECMNMICFG    [i]))["ECMNMIE10"    ] = ECMNMICFG_ECMNMIE10[i];
        (*(ECMNMICFG    [i]))["ECMNMIE09"    ] = ECMNMICFG_ECMNMIE09[i];
        (*(ECMNMICFG    [i]))["ECMNMIE08"    ] = ECMNMICFG_ECMNMIE08[i];
        (*(ECMNMICFG    [i]))["ECMNMIE07"    ] = ECMNMICFG_ECMNMIE07[i];
        (*(ECMNMICFG    [i]))["ECMNMIE06"    ] = ECMNMICFG_ECMNMIE06[i];
        (*(ECMNMICFG    [i]))["ECMNMIE05"    ] = ECMNMICFG_ECMNMIE05[i];
        (*(ECMNMICFG    [i]))["ECMNMIE04"    ] = ECMNMICFG_ECMNMIE04[i];
        (*(ECMNMICFG    [i]))["ECMNMIE03"    ] = ECMNMICFG_ECMNMIE03[i];
        (*(ECMNMICFG    [i]))["ECMNMIE02"    ] = ECMNMICFG_ECMNMIE02[i];
        (*(ECMNMICFG    [i]))["ECMNMIE01"    ] = ECMNMICFG_ECMNMIE01[i];
        (*(ECMNMICFG    [i]))["ECMNMIE00"    ] = ECMNMICFG_ECMNMIE00[i];
        return;
    }
    if (addr == 0x0150) {
        (*ECMNMICFG9   )["ECMNMIE928"   ] = ECMNMICFG9_ECMNMIE928;
        (*ECMNMICFG9   )["ECMNMIE927"   ] = ECMNMICFG9_ECMNMIE927;
        (*ECMNMICFG9   )["ECMNMIE926"   ] = ECMNMICFG9_ECMNMIE926;
        (*ECMNMICFG9   )["ECMNMIE925"   ] = ECMNMICFG9_ECMNMIE925;
        (*ECMNMICFG9   )["ECMNMIE924"   ] = ECMNMICFG9_ECMNMIE924;
        (*ECMNMICFG9   )["ECMNMIE923"   ] = ECMNMICFG9_ECMNMIE923;
        (*ECMNMICFG9   )["ECMNMIE922"   ] = ECMNMICFG9_ECMNMIE922;
        (*ECMNMICFG9   )["ECMNMIE921"   ] = ECMNMICFG9_ECMNMIE921;
        (*ECMNMICFG9   )["ECMNMIE920"   ] = ECMNMICFG9_ECMNMIE920;
        (*ECMNMICFG9   )["ECMNMIE919"   ] = ECMNMICFG9_ECMNMIE919;
        (*ECMNMICFG9   )["ECMNMIE918"   ] = ECMNMICFG9_ECMNMIE918;
        (*ECMNMICFG9   )["ECMNMIE917"   ] = ECMNMICFG9_ECMNMIE917;
        (*ECMNMICFG9   )["ECMNMIE916"   ] = ECMNMICFG9_ECMNMIE916;
        (*ECMNMICFG9   )["ECMNMIE915"   ] = ECMNMICFG9_ECMNMIE915;
        (*ECMNMICFG9   )["ECMNMIE914"   ] = ECMNMICFG9_ECMNMIE914;
        (*ECMNMICFG9   )["ECMNMIE913"   ] = ECMNMICFG9_ECMNMIE913;
        (*ECMNMICFG9   )["ECMNMIE912"   ] = ECMNMICFG9_ECMNMIE912;
        (*ECMNMICFG9   )["ECMNMIE911"   ] = ECMNMICFG9_ECMNMIE911;
        (*ECMNMICFG9   )["ECMNMIE910"   ] = ECMNMICFG9_ECMNMIE910;
        (*ECMNMICFG9   )["ECMNMIE909"   ] = ECMNMICFG9_ECMNMIE909;
        (*ECMNMICFG9   )["ECMNMIE908"   ] = ECMNMICFG9_ECMNMIE908;
        (*ECMNMICFG9   )["ECMNMIE907"   ] = ECMNMICFG9_ECMNMIE907;
        (*ECMNMICFG9   )["ECMNMIE906"   ] = ECMNMICFG9_ECMNMIE906;
        (*ECMNMICFG9   )["ECMNMIE905"   ] = ECMNMICFG9_ECMNMIE905;
        (*ECMNMICFG9   )["ECMNMIE904"   ] = ECMNMICFG9_ECMNMIE904;
        (*ECMNMICFG9   )["ECMNMIE903"   ] = ECMNMICFG9_ECMNMIE903;
        (*ECMNMICFG9   )["ECMNMIE902"   ] = ECMNMICFG9_ECMNMIE902;
        (*ECMNMICFG9   )["ECMNMIE901"   ] = ECMNMICFG9_ECMNMIE901;
        (*ECMNMICFG9   )["ECMNMIE900"   ] = ECMNMICFG9_ECMNMIE900;
        return;
    }
    if (addr == 0x0154) {
        (*ECMIRCFG0    )["ECMIRE031"    ] = ECMIRCFG0_ECMIRE031;
        (*ECMIRCFG0    )["ECMIRE030"    ] = ECMIRCFG0_ECMIRE030;
        (*ECMIRCFG0    )["ECMIRE029"    ] = ECMIRCFG0_ECMIRE029;
        (*ECMIRCFG0    )["ECMIRE028"    ] = ECMIRCFG0_ECMIRE028;
        (*ECMIRCFG0    )["ECMIRE027"    ] = ECMIRCFG0_ECMIRE027;
        (*ECMIRCFG0    )["ECMIRE026"    ] = ECMIRCFG0_ECMIRE026;
        (*ECMIRCFG0    )["ECMIRE025"    ] = ECMIRCFG0_ECMIRE025;
        (*ECMIRCFG0    )["ECMIRE024"    ] = ECMIRCFG0_ECMIRE024;
        (*ECMIRCFG0    )["ECMIRE023"    ] = ECMIRCFG0_ECMIRE023;
        (*ECMIRCFG0    )["ECMIRE022"    ] = ECMIRCFG0_ECMIRE022;
        (*ECMIRCFG0    )["ECMIRE021"    ] = ECMIRCFG0_ECMIRE021;
        (*ECMIRCFG0    )["ECMIRE020"    ] = ECMIRCFG0_ECMIRE020;
        (*ECMIRCFG0    )["ECMIRE019"    ] = ECMIRCFG0_ECMIRE019;
        (*ECMIRCFG0    )["ECMIRE018"    ] = ECMIRCFG0_ECMIRE018;
        (*ECMIRCFG0    )["ECMIRE017"    ] = ECMIRCFG0_ECMIRE017;
        (*ECMIRCFG0    )["ECMIRE016"    ] = ECMIRCFG0_ECMIRE016;
        (*ECMIRCFG0    )["ECMIRE01514"  ] = ECMIRCFG0_ECMIRE01514;
        (*ECMIRCFG0    )["ECMIRE01312"  ] = ECMIRCFG0_ECMIRE01312;
        (*ECMIRCFG0    )["ECMIRE01110"  ] = ECMIRCFG0_ECMIRE01110;
        (*ECMIRCFG0    )["ECMIRE00908"  ] = ECMIRCFG0_ECMIRE00908;
        (*ECMIRCFG0    )["ECMIRE00706"  ] = ECMIRCFG0_ECMIRE00706;
        (*ECMIRCFG0    )["ECMIRE00504"  ] = ECMIRCFG0_ECMIRE00504;
        (*ECMIRCFG0    )["ECMIRE00302"  ] = ECMIRCFG0_ECMIRE00302;
        (*ECMIRCFG0    )["ECMIRE00100"  ] = ECMIRCFG0_ECMIRE00100;
        return;
    }
    if ((0x0158 <= addr) && (addr <= (0x0158)+(4*7)) && ((addr-0x0158)%4 == 0) ) {
        uint i = (addr - 0x0158)/4 + 1;
        (*(ECMIRCFG     [i]))["ECMIRE31"     ] = ECMIRCFG_ECMIRE31[i];
        (*(ECMIRCFG     [i]))["ECMIRE30"     ] = ECMIRCFG_ECMIRE30[i];
        (*(ECMIRCFG     [i]))["ECMIRE29"     ] = ECMIRCFG_ECMIRE29[i];
        (*(ECMIRCFG     [i]))["ECMIRE28"     ] = ECMIRCFG_ECMIRE28[i];
        (*(ECMIRCFG     [i]))["ECMIRE27"     ] = ECMIRCFG_ECMIRE27[i];
        (*(ECMIRCFG     [i]))["ECMIRE26"     ] = ECMIRCFG_ECMIRE26[i];
        (*(ECMIRCFG     [i]))["ECMIRE25"     ] = ECMIRCFG_ECMIRE25[i];
        (*(ECMIRCFG     [i]))["ECMIRE24"     ] = ECMIRCFG_ECMIRE24[i];
        (*(ECMIRCFG     [i]))["ECMIRE23"     ] = ECMIRCFG_ECMIRE23[i];
        (*(ECMIRCFG     [i]))["ECMIRE22"     ] = ECMIRCFG_ECMIRE22[i];
        (*(ECMIRCFG     [i]))["ECMIRE21"     ] = ECMIRCFG_ECMIRE21[i];
        (*(ECMIRCFG     [i]))["ECMIRE20"     ] = ECMIRCFG_ECMIRE20[i];
        (*(ECMIRCFG     [i]))["ECMIRE19"     ] = ECMIRCFG_ECMIRE19[i];
        (*(ECMIRCFG     [i]))["ECMIRE18"     ] = ECMIRCFG_ECMIRE18[i];
        (*(ECMIRCFG     [i]))["ECMIRE17"     ] = ECMIRCFG_ECMIRE17[i];
        (*(ECMIRCFG     [i]))["ECMIRE16"     ] = ECMIRCFG_ECMIRE16[i];
        (*(ECMIRCFG     [i]))["ECMIRE15"     ] = ECMIRCFG_ECMIRE15[i];
        (*(ECMIRCFG     [i]))["ECMIRE14"     ] = ECMIRCFG_ECMIRE14[i];
        (*(ECMIRCFG     [i]))["ECMIRE13"     ] = ECMIRCFG_ECMIRE13[i];
        (*(ECMIRCFG     [i]))["ECMIRE12"     ] = ECMIRCFG_ECMIRE12[i];
        (*(ECMIRCFG     [i]))["ECMIRE11"     ] = ECMIRCFG_ECMIRE11[i];
        (*(ECMIRCFG     [i]))["ECMIRE10"     ] = ECMIRCFG_ECMIRE10[i];
        (*(ECMIRCFG     [i]))["ECMIRE09"     ] = ECMIRCFG_ECMIRE09[i];
        (*(ECMIRCFG     [i]))["ECMIRE08"     ] = ECMIRCFG_ECMIRE08[i];
        (*(ECMIRCFG     [i]))["ECMIRE07"     ] = ECMIRCFG_ECMIRE07[i];
        (*(ECMIRCFG     [i]))["ECMIRE06"     ] = ECMIRCFG_ECMIRE06[i];
        (*(ECMIRCFG     [i]))["ECMIRE05"     ] = ECMIRCFG_ECMIRE05[i];
        (*(ECMIRCFG     [i]))["ECMIRE04"     ] = ECMIRCFG_ECMIRE04[i];
        (*(ECMIRCFG     [i]))["ECMIRE03"     ] = ECMIRCFG_ECMIRE03[i];
        (*(ECMIRCFG     [i]))["ECMIRE02"     ] = ECMIRCFG_ECMIRE02[i];
        (*(ECMIRCFG     [i]))["ECMIRE01"     ] = ECMIRCFG_ECMIRE01[i];
        (*(ECMIRCFG     [i]))["ECMIRE00"     ] = ECMIRCFG_ECMIRE00[i];
        return;
    }
    if (addr == 0x0178) {
        (*ECMIRCFG9    )["ECMIRE929"    ] = ECMIRCFG9_ECMIRE929;
        (*ECMIRCFG9    )["ECMIRE928"    ] = ECMIRCFG9_ECMIRE928;
        (*ECMIRCFG9    )["ECMIRE927"    ] = ECMIRCFG9_ECMIRE927;
        (*ECMIRCFG9    )["ECMIRE926"    ] = ECMIRCFG9_ECMIRE926;
        (*ECMIRCFG9    )["ECMIRE925"    ] = ECMIRCFG9_ECMIRE925;
        (*ECMIRCFG9    )["ECMIRE924"    ] = ECMIRCFG9_ECMIRE924;
        (*ECMIRCFG9    )["ECMIRE923"    ] = ECMIRCFG9_ECMIRE923;
        (*ECMIRCFG9    )["ECMIRE922"    ] = ECMIRCFG9_ECMIRE922;
        (*ECMIRCFG9    )["ECMIRE921"    ] = ECMIRCFG9_ECMIRE921;
        (*ECMIRCFG9    )["ECMIRE920"    ] = ECMIRCFG9_ECMIRE920;
        (*ECMIRCFG9    )["ECMIRE919"    ] = ECMIRCFG9_ECMIRE919;
        (*ECMIRCFG9    )["ECMIRE918"    ] = ECMIRCFG9_ECMIRE918;
        (*ECMIRCFG9    )["ECMIRE917"    ] = ECMIRCFG9_ECMIRE917;
        (*ECMIRCFG9    )["ECMIRE916"    ] = ECMIRCFG9_ECMIRE916;
        (*ECMIRCFG9    )["ECMIRE915"    ] = ECMIRCFG9_ECMIRE915;
        (*ECMIRCFG9    )["ECMIRE914"    ] = ECMIRCFG9_ECMIRE914;
        (*ECMIRCFG9    )["ECMIRE913"    ] = ECMIRCFG9_ECMIRE913;
        (*ECMIRCFG9    )["ECMIRE912"    ] = ECMIRCFG9_ECMIRE912;
        (*ECMIRCFG9    )["ECMIRE911"    ] = ECMIRCFG9_ECMIRE911;
        (*ECMIRCFG9    )["ECMIRE910"    ] = ECMIRCFG9_ECMIRE910;
        (*ECMIRCFG9    )["ECMIRE909"    ] = ECMIRCFG9_ECMIRE909;
        (*ECMIRCFG9    )["ECMIRE908"    ] = ECMIRCFG9_ECMIRE908;
        (*ECMIRCFG9    )["ECMIRE907"    ] = ECMIRCFG9_ECMIRE907;
        (*ECMIRCFG9    )["ECMIRE906"    ] = ECMIRCFG9_ECMIRE906;
        (*ECMIRCFG9    )["ECMIRE905"    ] = ECMIRCFG9_ECMIRE905;
        (*ECMIRCFG9    )["ECMIRE904"    ] = ECMIRCFG9_ECMIRE904;
        (*ECMIRCFG9    )["ECMIRE903"    ] = ECMIRCFG9_ECMIRE903;
        (*ECMIRCFG9    )["ECMIRE902"    ] = ECMIRCFG9_ECMIRE902;
        (*ECMIRCFG9    )["ECMIRE901"    ] = ECMIRCFG9_ECMIRE901;
        (*ECMIRCFG9    )["ECMIRE900"    ] = ECMIRCFG9_ECMIRE900;
        return;
    }
    if (addr == 0x017C) {
        (*ECMEMK0      )["ECMEMK031"    ] = ECMEMK0_ECMEMK031;
        (*ECMEMK0      )["ECMEMK030"    ] = ECMEMK0_ECMEMK030;
        (*ECMEMK0      )["ECMEMK029"    ] = ECMEMK0_ECMEMK029;
        (*ECMEMK0      )["ECMEMK028"    ] = ECMEMK0_ECMEMK028;
        (*ECMEMK0      )["ECMEMK027"    ] = ECMEMK0_ECMEMK027;
        (*ECMEMK0      )["ECMEMK026"    ] = ECMEMK0_ECMEMK026;
        (*ECMEMK0      )["ECMEMK025"    ] = ECMEMK0_ECMEMK025;
        (*ECMEMK0      )["ECMEMK024"    ] = ECMEMK0_ECMEMK024;
        (*ECMEMK0      )["ECMEMK023"    ] = ECMEMK0_ECMEMK023;
        (*ECMEMK0      )["ECMEMK022"    ] = ECMEMK0_ECMEMK022;
        (*ECMEMK0      )["ECMEMK021"    ] = ECMEMK0_ECMEMK021;
        (*ECMEMK0      )["ECMEMK020"    ] = ECMEMK0_ECMEMK020;
        (*ECMEMK0      )["ECMEMK019"    ] = ECMEMK0_ECMEMK019;
        (*ECMEMK0      )["ECMEMK018"    ] = ECMEMK0_ECMEMK018;
        (*ECMEMK0      )["ECMEMK017"    ] = ECMEMK0_ECMEMK017;
        (*ECMEMK0      )["ECMEMK016"    ] = ECMEMK0_ECMEMK016;
        (*ECMEMK0      )["ECMEMK01514"  ] = ECMEMK0_ECMEMK01514;
        (*ECMEMK0      )["ECMEMK01312"  ] = ECMEMK0_ECMEMK01312;
        (*ECMEMK0      )["ECMEMK01110"  ] = ECMEMK0_ECMEMK01110;
        (*ECMEMK0      )["ECMEMK00908"  ] = ECMEMK0_ECMEMK00908;
        (*ECMEMK0      )["ECMEMK00706"  ] = ECMEMK0_ECMEMK00706;
        (*ECMEMK0      )["ECMEMK00504"  ] = ECMEMK0_ECMEMK00504;
        (*ECMEMK0      )["ECMEMK00302"  ] = ECMEMK0_ECMEMK00302;
        (*ECMEMK0      )["ECMEMK00100"  ] = ECMEMK0_ECMEMK00100;
        return;
    }
    if ((0x0180 <= addr) && (addr <= (0x0180)+(4*7)) && ((addr-0x0180)%4 == 0) ) {
        uint i = (addr - 0x0180)/4 + 1;
        (*(ECMEMK       [i]))["ECMEMK31"     ] = ECMEMK_ECMEMK31[i];
        (*(ECMEMK       [i]))["ECMEMK30"     ] = ECMEMK_ECMEMK30[i];
        (*(ECMEMK       [i]))["ECMEMK29"     ] = ECMEMK_ECMEMK29[i];
        (*(ECMEMK       [i]))["ECMEMK28"     ] = ECMEMK_ECMEMK28[i];
        (*(ECMEMK       [i]))["ECMEMK27"     ] = ECMEMK_ECMEMK27[i];
        (*(ECMEMK       [i]))["ECMEMK26"     ] = ECMEMK_ECMEMK26[i];
        (*(ECMEMK       [i]))["ECMEMK25"     ] = ECMEMK_ECMEMK25[i];
        (*(ECMEMK       [i]))["ECMEMK24"     ] = ECMEMK_ECMEMK24[i];
        (*(ECMEMK       [i]))["ECMEMK23"     ] = ECMEMK_ECMEMK23[i];
        (*(ECMEMK       [i]))["ECMEMK22"     ] = ECMEMK_ECMEMK22[i];
        (*(ECMEMK       [i]))["ECMEMK21"     ] = ECMEMK_ECMEMK21[i];
        (*(ECMEMK       [i]))["ECMEMK20"     ] = ECMEMK_ECMEMK20[i];
        (*(ECMEMK       [i]))["ECMEMK19"     ] = ECMEMK_ECMEMK19[i];
        (*(ECMEMK       [i]))["ECMEMK18"     ] = ECMEMK_ECMEMK18[i];
        (*(ECMEMK       [i]))["ECMEMK17"     ] = ECMEMK_ECMEMK17[i];
        (*(ECMEMK       [i]))["ECMEMK16"     ] = ECMEMK_ECMEMK16[i];
        (*(ECMEMK       [i]))["ECMEMK15"     ] = ECMEMK_ECMEMK15[i];
        (*(ECMEMK       [i]))["ECMEMK14"     ] = ECMEMK_ECMEMK14[i];
        (*(ECMEMK       [i]))["ECMEMK13"     ] = ECMEMK_ECMEMK13[i];
        (*(ECMEMK       [i]))["ECMEMK12"     ] = ECMEMK_ECMEMK12[i];
        (*(ECMEMK       [i]))["ECMEMK11"     ] = ECMEMK_ECMEMK11[i];
        (*(ECMEMK       [i]))["ECMEMK10"     ] = ECMEMK_ECMEMK10[i];
        (*(ECMEMK       [i]))["ECMEMK09"     ] = ECMEMK_ECMEMK09[i];
        (*(ECMEMK       [i]))["ECMEMK08"     ] = ECMEMK_ECMEMK08[i];
        (*(ECMEMK       [i]))["ECMEMK07"     ] = ECMEMK_ECMEMK07[i];
        (*(ECMEMK       [i]))["ECMEMK06"     ] = ECMEMK_ECMEMK06[i];
        (*(ECMEMK       [i]))["ECMEMK05"     ] = ECMEMK_ECMEMK05[i];
        (*(ECMEMK       [i]))["ECMEMK04"     ] = ECMEMK_ECMEMK04[i];
        (*(ECMEMK       [i]))["ECMEMK03"     ] = ECMEMK_ECMEMK03[i];
        (*(ECMEMK       [i]))["ECMEMK02"     ] = ECMEMK_ECMEMK02[i];
        (*(ECMEMK       [i]))["ECMEMK01"     ] = ECMEMK_ECMEMK01[i];
        (*(ECMEMK       [i]))["ECMEMK00"     ] = ECMEMK_ECMEMK00[i];
        return;
    }
    if (addr == 0x01A0) {
        (*ECMEMK9      )["ECMEMK931"    ] = ECMEMK9_ECMEMK931;
        (*ECMEMK9      )["ECMEMK930"    ] = ECMEMK9_ECMEMK930;
        (*ECMEMK9      )["ECMEMK929"    ] = ECMEMK9_ECMEMK929;
        (*ECMEMK9      )["ECMEMK928"    ] = ECMEMK9_ECMEMK928;
        (*ECMEMK9      )["ECMEMK927"    ] = ECMEMK9_ECMEMK927;
        (*ECMEMK9      )["ECMEMK926"    ] = ECMEMK9_ECMEMK926;
        (*ECMEMK9      )["ECMEMK925"    ] = ECMEMK9_ECMEMK925;
        (*ECMEMK9      )["ECMEMK924"    ] = ECMEMK9_ECMEMK924;
        (*ECMEMK9      )["ECMEMK923"    ] = ECMEMK9_ECMEMK923;
        (*ECMEMK9      )["ECMEMK922"    ] = ECMEMK9_ECMEMK922;
        (*ECMEMK9      )["ECMEMK921"    ] = ECMEMK9_ECMEMK921;
        (*ECMEMK9      )["ECMEMK920"    ] = ECMEMK9_ECMEMK920;
        (*ECMEMK9      )["ECMEMK919"    ] = ECMEMK9_ECMEMK919;
        (*ECMEMK9      )["ECMEMK918"    ] = ECMEMK9_ECMEMK918;
        (*ECMEMK9      )["ECMEMK917"    ] = ECMEMK9_ECMEMK917;
        (*ECMEMK9      )["ECMEMK916"    ] = ECMEMK9_ECMEMK916;
        (*ECMEMK9      )["ECMEMK915"    ] = ECMEMK9_ECMEMK915;
        (*ECMEMK9      )["ECMEMK914"    ] = ECMEMK9_ECMEMK914;
        (*ECMEMK9      )["ECMEMK913"    ] = ECMEMK9_ECMEMK913;
        (*ECMEMK9      )["ECMEMK912"    ] = ECMEMK9_ECMEMK912;
        (*ECMEMK9      )["ECMEMK911"    ] = ECMEMK9_ECMEMK911;
        (*ECMEMK9      )["ECMEMK910"    ] = ECMEMK9_ECMEMK910;
        (*ECMEMK9      )["ECMEMK909"    ] = ECMEMK9_ECMEMK909;
        (*ECMEMK9      )["ECMEMK908"    ] = ECMEMK9_ECMEMK908;
        (*ECMEMK9      )["ECMEMK907"    ] = ECMEMK9_ECMEMK907;
        (*ECMEMK9      )["ECMEMK906"    ] = ECMEMK9_ECMEMK906;
        (*ECMEMK9      )["ECMEMK905"    ] = ECMEMK9_ECMEMK905;
        (*ECMEMK9      )["ECMEMK904"    ] = ECMEMK9_ECMEMK904;
        (*ECMEMK9      )["ECMEMK903"    ] = ECMEMK9_ECMEMK903;
        (*ECMEMK9      )["ECMEMK902"    ] = ECMEMK9_ECMEMK902;
        (*ECMEMK9      )["ECMEMK901"    ] = ECMEMK9_ECMEMK901;
        (*ECMEMK9      )["ECMEMK900"    ] = ECMEMK9_ECMEMK900;
        return;
    }
    if (addr == 0x01A4) {
        (*ECMESSTC0    )["ECMCLSSE031"  ] = ECMESSTC0_ECMCLSSE031;
        (*ECMESSTC0    )["ECMCLSSE030"  ] = ECMESSTC0_ECMCLSSE030;
        (*ECMESSTC0    )["ECMCLSSE029"  ] = ECMESSTC0_ECMCLSSE029;
        (*ECMESSTC0    )["ECMCLSSE028"  ] = ECMESSTC0_ECMCLSSE028;
        (*ECMESSTC0    )["ECMCLSSE027"  ] = ECMESSTC0_ECMCLSSE027;
        (*ECMESSTC0    )["ECMCLSSE026"  ] = ECMESSTC0_ECMCLSSE026;
        (*ECMESSTC0    )["ECMCLSSE025"  ] = ECMESSTC0_ECMCLSSE025;
        (*ECMESSTC0    )["ECMCLSSE024"  ] = ECMESSTC0_ECMCLSSE024;
        (*ECMESSTC0    )["ECMCLSSE023"  ] = ECMESSTC0_ECMCLSSE023;
        (*ECMESSTC0    )["ECMCLSSE022"  ] = ECMESSTC0_ECMCLSSE022;
        (*ECMESSTC0    )["ECMCLSSE021"  ] = ECMESSTC0_ECMCLSSE021;
        (*ECMESSTC0    )["ECMCLSSE020"  ] = ECMESSTC0_ECMCLSSE020;
        (*ECMESSTC0    )["ECMCLSSE019"  ] = ECMESSTC0_ECMCLSSE019;
        (*ECMESSTC0    )["ECMCLSSE018"  ] = ECMESSTC0_ECMCLSSE018;
        (*ECMESSTC0    )["ECMCLSSE017"  ] = ECMESSTC0_ECMCLSSE017;
        (*ECMESSTC0    )["ECMCLSSE016"  ] = ECMESSTC0_ECMCLSSE016;
        (*ECMESSTC0    )["ECMCLSSE01514"] = ECMESSTC0_ECMCLSSE01514;
        (*ECMESSTC0    )["ECMCLSSE01312"] = ECMESSTC0_ECMCLSSE01312;
        (*ECMESSTC0    )["ECMCLSSE01110"] = ECMESSTC0_ECMCLSSE01110;
        (*ECMESSTC0    )["ECMCLSSE00908"] = ECMESSTC0_ECMCLSSE00908;
        (*ECMESSTC0    )["ECMCLSSE00706"] = ECMESSTC0_ECMCLSSE00706;
        (*ECMESSTC0    )["ECMCLSSE00504"] = ECMESSTC0_ECMCLSSE00504;
        (*ECMESSTC0    )["ECMCLSSE00302"] = ECMESSTC0_ECMCLSSE00302;
        (*ECMESSTC0    )["ECMCLSSE00100"] = ECMESSTC0_ECMCLSSE00100;
        return;
    }
    if ((0x01A8 <= addr) && (addr <= (0x01A8)+(4*7)) && ((addr-0x01A8)%4 == 0) ) {
        uint i = (addr - 0x01A8)/4 + 1;
        (*(ECMESSTC     [i]))["ECMCLSSE31"   ] = ECMESSTC_ECMCLSSE31[i];
        (*(ECMESSTC     [i]))["ECMCLSSE30"   ] = ECMESSTC_ECMCLSSE30[i];
        (*(ECMESSTC     [i]))["ECMCLSSE29"   ] = ECMESSTC_ECMCLSSE29[i];
        (*(ECMESSTC     [i]))["ECMCLSSE28"   ] = ECMESSTC_ECMCLSSE28[i];
        (*(ECMESSTC     [i]))["ECMCLSSE27"   ] = ECMESSTC_ECMCLSSE27[i];
        (*(ECMESSTC     [i]))["ECMCLSSE26"   ] = ECMESSTC_ECMCLSSE26[i];
        (*(ECMESSTC     [i]))["ECMCLSSE25"   ] = ECMESSTC_ECMCLSSE25[i];
        (*(ECMESSTC     [i]))["ECMCLSSE24"   ] = ECMESSTC_ECMCLSSE24[i];
        (*(ECMESSTC     [i]))["ECMCLSSE23"   ] = ECMESSTC_ECMCLSSE23[i];
        (*(ECMESSTC     [i]))["ECMCLSSE22"   ] = ECMESSTC_ECMCLSSE22[i];
        (*(ECMESSTC     [i]))["ECMCLSSE21"   ] = ECMESSTC_ECMCLSSE21[i];
        (*(ECMESSTC     [i]))["ECMCLSSE20"   ] = ECMESSTC_ECMCLSSE20[i];
        (*(ECMESSTC     [i]))["ECMCLSSE19"   ] = ECMESSTC_ECMCLSSE19[i];
        (*(ECMESSTC     [i]))["ECMCLSSE18"   ] = ECMESSTC_ECMCLSSE18[i];
        (*(ECMESSTC     [i]))["ECMCLSSE17"   ] = ECMESSTC_ECMCLSSE17[i];
        (*(ECMESSTC     [i]))["ECMCLSSE16"   ] = ECMESSTC_ECMCLSSE16[i];
        (*(ECMESSTC     [i]))["ECMCLSSE15"   ] = ECMESSTC_ECMCLSSE15[i];
        (*(ECMESSTC     [i]))["ECMCLSSE14"   ] = ECMESSTC_ECMCLSSE14[i];
        (*(ECMESSTC     [i]))["ECMCLSSE13"   ] = ECMESSTC_ECMCLSSE13[i];
        (*(ECMESSTC     [i]))["ECMCLSSE12"   ] = ECMESSTC_ECMCLSSE12[i];
        (*(ECMESSTC     [i]))["ECMCLSSE11"   ] = ECMESSTC_ECMCLSSE11[i];
        (*(ECMESSTC     [i]))["ECMCLSSE10"   ] = ECMESSTC_ECMCLSSE10[i];
        (*(ECMESSTC     [i]))["ECMCLSSE09"   ] = ECMESSTC_ECMCLSSE09[i];
        (*(ECMESSTC     [i]))["ECMCLSSE08"   ] = ECMESSTC_ECMCLSSE08[i];
        (*(ECMESSTC     [i]))["ECMCLSSE07"   ] = ECMESSTC_ECMCLSSE07[i];
        (*(ECMESSTC     [i]))["ECMCLSSE06"   ] = ECMESSTC_ECMCLSSE06[i];
        (*(ECMESSTC     [i]))["ECMCLSSE05"   ] = ECMESSTC_ECMCLSSE05[i];
        (*(ECMESSTC     [i]))["ECMCLSSE04"   ] = ECMESSTC_ECMCLSSE04[i];
        (*(ECMESSTC     [i]))["ECMCLSSE03"   ] = ECMESSTC_ECMCLSSE03[i];
        (*(ECMESSTC     [i]))["ECMCLSSE02"   ] = ECMESSTC_ECMCLSSE02[i];
        (*(ECMESSTC     [i]))["ECMCLSSE01"   ] = ECMESSTC_ECMCLSSE01[i];
        (*(ECMESSTC     [i]))["ECMCLSSE00"   ] = ECMESSTC_ECMCLSSE00[i];
        return;
    }
    if (addr == 0x01C8) {
        (*ECMESSTC9    )["ECMCLSSE930"  ] = ECMESSTC9_ECMCLSSE930;
        (*ECMESSTC9    )["ECMCLSSE929"  ] = ECMESSTC9_ECMCLSSE929;
        (*ECMESSTC9    )["ECMCLSSE928"  ] = ECMESSTC9_ECMCLSSE928;
        (*ECMESSTC9    )["ECMCLSSE927"  ] = ECMESSTC9_ECMCLSSE927;
        (*ECMESSTC9    )["ECMCLSSE926"  ] = ECMESSTC9_ECMCLSSE926;
        (*ECMESSTC9    )["ECMCLSSE925"  ] = ECMESSTC9_ECMCLSSE925;
        (*ECMESSTC9    )["ECMCLSSE924"  ] = ECMESSTC9_ECMCLSSE924;
        (*ECMESSTC9    )["ECMCLSSE923"  ] = ECMESSTC9_ECMCLSSE923;
        (*ECMESSTC9    )["ECMCLSSE922"  ] = ECMESSTC9_ECMCLSSE922;
        (*ECMESSTC9    )["ECMCLSSE921"  ] = ECMESSTC9_ECMCLSSE921;
        (*ECMESSTC9    )["ECMCLSSE920"  ] = ECMESSTC9_ECMCLSSE920;
        (*ECMESSTC9    )["ECMCLSSE919"  ] = ECMESSTC9_ECMCLSSE919;
        (*ECMESSTC9    )["ECMCLSSE918"  ] = ECMESSTC9_ECMCLSSE918;
        (*ECMESSTC9    )["ECMCLSSE917"  ] = ECMESSTC9_ECMCLSSE917;
        (*ECMESSTC9    )["ECMCLSSE916"  ] = ECMESSTC9_ECMCLSSE916;
        (*ECMESSTC9    )["ECMCLSSE915"  ] = ECMESSTC9_ECMCLSSE915;
        (*ECMESSTC9    )["ECMCLSSE914"  ] = ECMESSTC9_ECMCLSSE914;
        (*ECMESSTC9    )["ECMCLSSE913"  ] = ECMESSTC9_ECMCLSSE913;
        (*ECMESSTC9    )["ECMCLSSE912"  ] = ECMESSTC9_ECMCLSSE912;
        (*ECMESSTC9    )["ECMCLSSE911"  ] = ECMESSTC9_ECMCLSSE911;
        (*ECMESSTC9    )["ECMCLSSE910"  ] = ECMESSTC9_ECMCLSSE910;
        (*ECMESSTC9    )["ECMCLSSE909"  ] = ECMESSTC9_ECMCLSSE909;
        (*ECMESSTC9    )["ECMCLSSE908"  ] = ECMESSTC9_ECMCLSSE908;
        (*ECMESSTC9    )["ECMCLSSE907"  ] = ECMESSTC9_ECMCLSSE907;
        (*ECMESSTC9    )["ECMCLSSE906"  ] = ECMESSTC9_ECMCLSSE906;
        (*ECMESSTC9    )["ECMCLSSE905"  ] = ECMESSTC9_ECMCLSSE905;
        (*ECMESSTC9    )["ECMCLSSE904"  ] = ECMESSTC9_ECMCLSSE904;
        (*ECMESSTC9    )["ECMCLSSE903"  ] = ECMESSTC9_ECMCLSSE903;
        (*ECMESSTC9    )["ECMCLSSE902"  ] = ECMESSTC9_ECMCLSSE902;
        (*ECMESSTC9    )["ECMCLSSE901"  ] = ECMESSTC9_ECMCLSSE901;
        (*ECMESSTC9    )["ECMCLSSE900"  ] = ECMESSTC9_ECMCLSSE900;
        return;
    }
    if (addr == 0x01CC) {
        (*ECMKCPROT    )["KCPROT"       ] = ECMKCPROT_KCPROT;
        (*ECMKCPROT    )["KCE"          ] = ECMKCPROT_KCE;
        return;
    }
    if (addr == 0x01D0) {
        (*ECMPE0       )["ECMPE031"     ] = ECMPE0_ECMPE031;
        (*ECMPE0       )["ECMPE030"     ] = ECMPE0_ECMPE030;
        (*ECMPE0       )["ECMPE029"     ] = ECMPE0_ECMPE029;
        (*ECMPE0       )["ECMPE028"     ] = ECMPE0_ECMPE028;
        (*ECMPE0       )["ECMPE027"     ] = ECMPE0_ECMPE027;
        (*ECMPE0       )["ECMPE026"     ] = ECMPE0_ECMPE026;
        (*ECMPE0       )["ECMPE025"     ] = ECMPE0_ECMPE025;
        (*ECMPE0       )["ECMPE024"     ] = ECMPE0_ECMPE024;
        (*ECMPE0       )["ECMPE023"     ] = ECMPE0_ECMPE023;
        (*ECMPE0       )["ECMPE022"     ] = ECMPE0_ECMPE022;
        (*ECMPE0       )["ECMPE021"     ] = ECMPE0_ECMPE021;
        (*ECMPE0       )["ECMPE020"     ] = ECMPE0_ECMPE020;
        (*ECMPE0       )["ECMPE019"     ] = ECMPE0_ECMPE019;
        (*ECMPE0       )["ECMPE018"     ] = ECMPE0_ECMPE018;
        (*ECMPE0       )["ECMPE017"     ] = ECMPE0_ECMPE017;
        (*ECMPE0       )["ECMPE016"     ] = ECMPE0_ECMPE016;
        (*ECMPE0       )["ECMPE01514"   ] = ECMPE0_ECMPE01514;
        (*ECMPE0       )["ECMPE01312"   ] = ECMPE0_ECMPE01312;
        (*ECMPE0       )["ECMPE01110"   ] = ECMPE0_ECMPE01110;
        (*ECMPE0       )["ECMPE00908"   ] = ECMPE0_ECMPE00908;
        (*ECMPE0       )["ECMPE00706"   ] = ECMPE0_ECMPE00706;
        (*ECMPE0       )["ECMPE00504"   ] = ECMPE0_ECMPE00504;
        (*ECMPE0       )["ECMPE00302"   ] = ECMPE0_ECMPE00302;
        (*ECMPE0       )["ECMPE00100"   ] = ECMPE0_ECMPE00100;
        return;
    }
    if ((0x01D4 <= addr) && (addr <= (0x01D4)+(4*7)) && ((addr-0x01D4)%4 == 0) ) {
        uint i = (addr - 0x01D4)/4 + 1;
        (*(ECMPE        [i]))["ECMPE31"      ] = ECMPE_ECMPE31[i];
        (*(ECMPE        [i]))["ECMPE30"      ] = ECMPE_ECMPE30[i];
        (*(ECMPE        [i]))["ECMPE29"      ] = ECMPE_ECMPE29[i];
        (*(ECMPE        [i]))["ECMPE28"      ] = ECMPE_ECMPE28[i];
        (*(ECMPE        [i]))["ECMPE27"      ] = ECMPE_ECMPE27[i];
        (*(ECMPE        [i]))["ECMPE26"      ] = ECMPE_ECMPE26[i];
        (*(ECMPE        [i]))["ECMPE25"      ] = ECMPE_ECMPE25[i];
        (*(ECMPE        [i]))["ECMPE24"      ] = ECMPE_ECMPE24[i];
        (*(ECMPE        [i]))["ECMPE23"      ] = ECMPE_ECMPE23[i];
        (*(ECMPE        [i]))["ECMPE22"      ] = ECMPE_ECMPE22[i];
        (*(ECMPE        [i]))["ECMPE21"      ] = ECMPE_ECMPE21[i];
        (*(ECMPE        [i]))["ECMPE20"      ] = ECMPE_ECMPE20[i];
        (*(ECMPE        [i]))["ECMPE19"      ] = ECMPE_ECMPE19[i];
        (*(ECMPE        [i]))["ECMPE18"      ] = ECMPE_ECMPE18[i];
        (*(ECMPE        [i]))["ECMPE17"      ] = ECMPE_ECMPE17[i];
        (*(ECMPE        [i]))["ECMPE16"      ] = ECMPE_ECMPE16[i];
        (*(ECMPE        [i]))["ECMPE15"      ] = ECMPE_ECMPE15[i];
        (*(ECMPE        [i]))["ECMPE14"      ] = ECMPE_ECMPE14[i];
        (*(ECMPE        [i]))["ECMPE13"      ] = ECMPE_ECMPE13[i];
        (*(ECMPE        [i]))["ECMPE12"      ] = ECMPE_ECMPE12[i];
        (*(ECMPE        [i]))["ECMPE11"      ] = ECMPE_ECMPE11[i];
        (*(ECMPE        [i]))["ECMPE10"      ] = ECMPE_ECMPE10[i];
        (*(ECMPE        [i]))["ECMPE09"      ] = ECMPE_ECMPE09[i];
        (*(ECMPE        [i]))["ECMPE08"      ] = ECMPE_ECMPE08[i];
        (*(ECMPE        [i]))["ECMPE07"      ] = ECMPE_ECMPE07[i];
        (*(ECMPE        [i]))["ECMPE06"      ] = ECMPE_ECMPE06[i];
        (*(ECMPE        [i]))["ECMPE05"      ] = ECMPE_ECMPE05[i];
        (*(ECMPE        [i]))["ECMPE04"      ] = ECMPE_ECMPE04[i];
        (*(ECMPE        [i]))["ECMPE03"      ] = ECMPE_ECMPE03[i];
        (*(ECMPE        [i]))["ECMPE02"      ] = ECMPE_ECMPE02[i];
        (*(ECMPE        [i]))["ECMPE01"      ] = ECMPE_ECMPE01[i];
        (*(ECMPE        [i]))["ECMPE00"      ] = ECMPE_ECMPE00[i];
        return;
    }
    if (addr == 0x01F4) {
        (*ECMPE9       )["ECMPE929"     ] = ECMPE9_ECMPE929;
        (*ECMPE9       )["ECMPE928"     ] = ECMPE9_ECMPE928;
        (*ECMPE9       )["ECMPE927"     ] = ECMPE9_ECMPE927;
        (*ECMPE9       )["ECMPE926"     ] = ECMPE9_ECMPE926;
        (*ECMPE9       )["ECMPE925"     ] = ECMPE9_ECMPE925;
        (*ECMPE9       )["ECMPE924"     ] = ECMPE9_ECMPE924;
        (*ECMPE9       )["ECMPE923"     ] = ECMPE9_ECMPE923;
        (*ECMPE9       )["ECMPE922"     ] = ECMPE9_ECMPE922;
        (*ECMPE9       )["ECMPE921"     ] = ECMPE9_ECMPE921;
        (*ECMPE9       )["ECMPE920"     ] = ECMPE9_ECMPE920;
        (*ECMPE9       )["ECMPE919"     ] = ECMPE9_ECMPE919;
        (*ECMPE9       )["ECMPE918"     ] = ECMPE9_ECMPE918;
        (*ECMPE9       )["ECMPE917"     ] = ECMPE9_ECMPE917;
        (*ECMPE9       )["ECMPE916"     ] = ECMPE9_ECMPE916;
        (*ECMPE9       )["ECMPE915"     ] = ECMPE9_ECMPE915;
        (*ECMPE9       )["ECMPE914"     ] = ECMPE9_ECMPE914;
        (*ECMPE9       )["ECMPE913"     ] = ECMPE9_ECMPE913;
        (*ECMPE9       )["ECMPE912"     ] = ECMPE9_ECMPE912;
        (*ECMPE9       )["ECMPE911"     ] = ECMPE9_ECMPE911;
        (*ECMPE9       )["ECMPE910"     ] = ECMPE9_ECMPE910;
        (*ECMPE9       )["ECMPE909"     ] = ECMPE9_ECMPE909;
        (*ECMPE9       )["ECMPE908"     ] = ECMPE9_ECMPE908;
        (*ECMPE9       )["ECMPE907"     ] = ECMPE9_ECMPE907;
        (*ECMPE9       )["ECMPE906"     ] = ECMPE9_ECMPE906;
        (*ECMPE9       )["ECMPE905"     ] = ECMPE9_ECMPE905;
        (*ECMPE9       )["ECMPE904"     ] = ECMPE9_ECMPE904;
        (*ECMPE9       )["ECMPE903"     ] = ECMPE9_ECMPE903;
        (*ECMPE9       )["ECMPE902"     ] = ECMPE9_ECMPE902;
        (*ECMPE9       )["ECMPE901"     ] = ECMPE9_ECMPE901;
        (*ECMPE9       )["ECMPE900"     ] = ECMPE9_ECMPE900;
        return;
    }
    if (addr == 0x01F8) {
        (*ECMDTMCTL    )["DTMSTACNTCLK" ] = ECMDTMCTL_DTMSTACNTCLK;
        (*ECMDTMCTL    )["DTMSTP"       ] = ECMDTMCTL_DTMSTP;
        (*ECMDTMCTL    )["DTMSTA"       ] = ECMDTMCTL_DTMSTA;
        return;
    }
    if (addr == 0x01FC) {
        (*ECMDTMR      )["ECMDTMR"      ] = ECMDTMR_ECMDTMR;
        return;
    }
    if (addr == 0x0200) {
        (*ECMDTMCMP    )["CMPW"         ] = ECMDTMCMP_CMPW;
        (*ECMDTMCMP    )["ECMDTMCMP"    ] = ECMDTMCMP_ECMDTMCMP;
        return;
    }
    if (addr == 0x0204) {
        (*ECMMIDTMCFG0 )["ECMMITE031"   ] = ECMMIDTMCFG0_ECMMITE031;
        (*ECMMIDTMCFG0 )["ECMMITE030"   ] = ECMMIDTMCFG0_ECMMITE030;
        (*ECMMIDTMCFG0 )["ECMMITE029"   ] = ECMMIDTMCFG0_ECMMITE029;
        (*ECMMIDTMCFG0 )["ECMMITE028"   ] = ECMMIDTMCFG0_ECMMITE028;
        (*ECMMIDTMCFG0 )["ECMMITE027"   ] = ECMMIDTMCFG0_ECMMITE027;
        (*ECMMIDTMCFG0 )["ECMMITE026"   ] = ECMMIDTMCFG0_ECMMITE026;
        (*ECMMIDTMCFG0 )["ECMMITE025"   ] = ECMMIDTMCFG0_ECMMITE025;
        (*ECMMIDTMCFG0 )["ECMMITE024"   ] = ECMMIDTMCFG0_ECMMITE024;
        (*ECMMIDTMCFG0 )["ECMMITE023"   ] = ECMMIDTMCFG0_ECMMITE023;
        (*ECMMIDTMCFG0 )["ECMMITE022"   ] = ECMMIDTMCFG0_ECMMITE022;
        (*ECMMIDTMCFG0 )["ECMMITE021"   ] = ECMMIDTMCFG0_ECMMITE021;
        (*ECMMIDTMCFG0 )["ECMMITE020"   ] = ECMMIDTMCFG0_ECMMITE020;
        (*ECMMIDTMCFG0 )["ECMMITE019"   ] = ECMMIDTMCFG0_ECMMITE019;
        (*ECMMIDTMCFG0 )["ECMMITE018"   ] = ECMMIDTMCFG0_ECMMITE018;
        (*ECMMIDTMCFG0 )["ECMMITE017"   ] = ECMMIDTMCFG0_ECMMITE017;
        (*ECMMIDTMCFG0 )["ECMMITE016"   ] = ECMMIDTMCFG0_ECMMITE016;
        (*ECMMIDTMCFG0 )["ECMMITE01514" ] = ECMMIDTMCFG0_ECMMITE01514;
        (*ECMMIDTMCFG0 )["ECMMITE01312" ] = ECMMIDTMCFG0_ECMMITE01312;
        (*ECMMIDTMCFG0 )["ECMMITE01110" ] = ECMMIDTMCFG0_ECMMITE01110;
        (*ECMMIDTMCFG0 )["ECMMITE00908" ] = ECMMIDTMCFG0_ECMMITE00908;
        (*ECMMIDTMCFG0 )["ECMMITE00706" ] = ECMMIDTMCFG0_ECMMITE00706;
        (*ECMMIDTMCFG0 )["ECMMITE00504" ] = ECMMIDTMCFG0_ECMMITE00504;
        (*ECMMIDTMCFG0 )["ECMMITE00302" ] = ECMMIDTMCFG0_ECMMITE00302;
        (*ECMMIDTMCFG0 )["ECMMITE00100" ] = ECMMIDTMCFG0_ECMMITE00100;
        return;
    }
    if ((0x0208 <= addr) && (addr <= (0x0208)+(4*7)) && ((addr-0x0208)%4 == 0) ) {
        uint i = (addr - 0x0208)/4 + 1;
        (*(ECMMIDTMCFG  [i]))["ECMMITE31"    ] = ECMMIDTMCFG_ECMMITE31[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE30"    ] = ECMMIDTMCFG_ECMMITE30[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE29"    ] = ECMMIDTMCFG_ECMMITE29[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE28"    ] = ECMMIDTMCFG_ECMMITE28[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE27"    ] = ECMMIDTMCFG_ECMMITE27[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE26"    ] = ECMMIDTMCFG_ECMMITE26[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE25"    ] = ECMMIDTMCFG_ECMMITE25[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE24"    ] = ECMMIDTMCFG_ECMMITE24[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE23"    ] = ECMMIDTMCFG_ECMMITE23[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE22"    ] = ECMMIDTMCFG_ECMMITE22[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE21"    ] = ECMMIDTMCFG_ECMMITE21[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE20"    ] = ECMMIDTMCFG_ECMMITE20[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE19"    ] = ECMMIDTMCFG_ECMMITE19[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE18"    ] = ECMMIDTMCFG_ECMMITE18[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE17"    ] = ECMMIDTMCFG_ECMMITE17[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE16"    ] = ECMMIDTMCFG_ECMMITE16[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE15"    ] = ECMMIDTMCFG_ECMMITE15[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE14"    ] = ECMMIDTMCFG_ECMMITE14[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE13"    ] = ECMMIDTMCFG_ECMMITE13[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE12"    ] = ECMMIDTMCFG_ECMMITE12[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE11"    ] = ECMMIDTMCFG_ECMMITE11[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE10"    ] = ECMMIDTMCFG_ECMMITE10[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE09"    ] = ECMMIDTMCFG_ECMMITE09[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE08"    ] = ECMMIDTMCFG_ECMMITE08[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE07"    ] = ECMMIDTMCFG_ECMMITE07[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE06"    ] = ECMMIDTMCFG_ECMMITE06[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE05"    ] = ECMMIDTMCFG_ECMMITE05[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE04"    ] = ECMMIDTMCFG_ECMMITE04[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE03"    ] = ECMMIDTMCFG_ECMMITE03[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE02"    ] = ECMMIDTMCFG_ECMMITE02[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE01"    ] = ECMMIDTMCFG_ECMMITE01[i];
        (*(ECMMIDTMCFG  [i]))["ECMMITE00"    ] = ECMMIDTMCFG_ECMMITE00[i];
        return;
    }
    if (addr == 0x0228) {
        (*ECMMIDTMCFG9 )["ECMMITE928"   ] = ECMMIDTMCFG9_ECMMITE928;
        (*ECMMIDTMCFG9 )["ECMMITE927"   ] = ECMMIDTMCFG9_ECMMITE927;
        (*ECMMIDTMCFG9 )["ECMMITE926"   ] = ECMMIDTMCFG9_ECMMITE926;
        (*ECMMIDTMCFG9 )["ECMMITE925"   ] = ECMMIDTMCFG9_ECMMITE925;
        (*ECMMIDTMCFG9 )["ECMMITE924"   ] = ECMMIDTMCFG9_ECMMITE924;
        (*ECMMIDTMCFG9 )["ECMMITE923"   ] = ECMMIDTMCFG9_ECMMITE923;
        (*ECMMIDTMCFG9 )["ECMMITE922"   ] = ECMMIDTMCFG9_ECMMITE922;
        (*ECMMIDTMCFG9 )["ECMMITE921"   ] = ECMMIDTMCFG9_ECMMITE921;
        (*ECMMIDTMCFG9 )["ECMMITE920"   ] = ECMMIDTMCFG9_ECMMITE920;
        (*ECMMIDTMCFG9 )["ECMMITE919"   ] = ECMMIDTMCFG9_ECMMITE919;
        (*ECMMIDTMCFG9 )["ECMMITE918"   ] = ECMMIDTMCFG9_ECMMITE918;
        (*ECMMIDTMCFG9 )["ECMMITE917"   ] = ECMMIDTMCFG9_ECMMITE917;
        (*ECMMIDTMCFG9 )["ECMMITE916"   ] = ECMMIDTMCFG9_ECMMITE916;
        (*ECMMIDTMCFG9 )["ECMMITE915"   ] = ECMMIDTMCFG9_ECMMITE915;
        (*ECMMIDTMCFG9 )["ECMMITE914"   ] = ECMMIDTMCFG9_ECMMITE914;
        (*ECMMIDTMCFG9 )["ECMMITE913"   ] = ECMMIDTMCFG9_ECMMITE913;
        (*ECMMIDTMCFG9 )["ECMMITE912"   ] = ECMMIDTMCFG9_ECMMITE912;
        (*ECMMIDTMCFG9 )["ECMMITE911"   ] = ECMMIDTMCFG9_ECMMITE911;
        (*ECMMIDTMCFG9 )["ECMMITE910"   ] = ECMMIDTMCFG9_ECMMITE910;
        (*ECMMIDTMCFG9 )["ECMMITE909"   ] = ECMMIDTMCFG9_ECMMITE909;
        (*ECMMIDTMCFG9 )["ECMMITE908"   ] = ECMMIDTMCFG9_ECMMITE908;
        (*ECMMIDTMCFG9 )["ECMMITE907"   ] = ECMMIDTMCFG9_ECMMITE907;
        (*ECMMIDTMCFG9 )["ECMMITE906"   ] = ECMMIDTMCFG9_ECMMITE906;
        (*ECMMIDTMCFG9 )["ECMMITE905"   ] = ECMMIDTMCFG9_ECMMITE905;
        (*ECMMIDTMCFG9 )["ECMMITE904"   ] = ECMMIDTMCFG9_ECMMITE904;
        (*ECMMIDTMCFG9 )["ECMMITE903"   ] = ECMMIDTMCFG9_ECMMITE903;
        (*ECMMIDTMCFG9 )["ECMMITE902"   ] = ECMMIDTMCFG9_ECMMITE902;
        (*ECMMIDTMCFG9 )["ECMMITE901"   ] = ECMMIDTMCFG9_ECMMITE901;
        (*ECMMIDTMCFG9 )["ECMMITE900"   ] = ECMMIDTMCFG9_ECMMITE900;
        return;
    }
    if (addr == 0x022C) {
        (*ECMNMIDTMCFG0)["ECMNMITE031"  ] = ECMNMIDTMCFG0_ECMNMITE031;
        (*ECMNMIDTMCFG0)["ECMNMITE030"  ] = ECMNMIDTMCFG0_ECMNMITE030;
        (*ECMNMIDTMCFG0)["ECMNMITE029"  ] = ECMNMIDTMCFG0_ECMNMITE029;
        (*ECMNMIDTMCFG0)["ECMNMITE028"  ] = ECMNMIDTMCFG0_ECMNMITE028;
        (*ECMNMIDTMCFG0)["ECMNMITE027"  ] = ECMNMIDTMCFG0_ECMNMITE027;
        (*ECMNMIDTMCFG0)["ECMNMITE026"  ] = ECMNMIDTMCFG0_ECMNMITE026;
        (*ECMNMIDTMCFG0)["ECMNMITE025"  ] = ECMNMIDTMCFG0_ECMNMITE025;
        (*ECMNMIDTMCFG0)["ECMNMITE024"  ] = ECMNMIDTMCFG0_ECMNMITE024;
        (*ECMNMIDTMCFG0)["ECMNMITE023"  ] = ECMNMIDTMCFG0_ECMNMITE023;
        (*ECMNMIDTMCFG0)["ECMNMITE022"  ] = ECMNMIDTMCFG0_ECMNMITE022;
        (*ECMNMIDTMCFG0)["ECMNMITE021"  ] = ECMNMIDTMCFG0_ECMNMITE021;
        (*ECMNMIDTMCFG0)["ECMNMITE020"  ] = ECMNMIDTMCFG0_ECMNMITE020;
        (*ECMNMIDTMCFG0)["ECMNMITE019"  ] = ECMNMIDTMCFG0_ECMNMITE019;
        (*ECMNMIDTMCFG0)["ECMNMITE018"  ] = ECMNMIDTMCFG0_ECMNMITE018;
        (*ECMNMIDTMCFG0)["ECMNMITE017"  ] = ECMNMIDTMCFG0_ECMNMITE017;
        (*ECMNMIDTMCFG0)["ECMNMITE016"  ] = ECMNMIDTMCFG0_ECMNMITE016;
        (*ECMNMIDTMCFG0)["ECMNMITE01514"] = ECMNMIDTMCFG0_ECMNMITE01514;
        (*ECMNMIDTMCFG0)["ECMNMITE01312"] = ECMNMIDTMCFG0_ECMNMITE01312;
        (*ECMNMIDTMCFG0)["ECMNMITE01110"] = ECMNMIDTMCFG0_ECMNMITE01110;
        (*ECMNMIDTMCFG0)["ECMNMITE00908"] = ECMNMIDTMCFG0_ECMNMITE00908;
        (*ECMNMIDTMCFG0)["ECMNMITE00706"] = ECMNMIDTMCFG0_ECMNMITE00706;
        (*ECMNMIDTMCFG0)["ECMNMITE00504"] = ECMNMIDTMCFG0_ECMNMITE00504;
        (*ECMNMIDTMCFG0)["ECMNMITE00302"] = ECMNMIDTMCFG0_ECMNMITE00302;
        (*ECMNMIDTMCFG0)["ECMNMITE00100"] = ECMNMIDTMCFG0_ECMNMITE00100;
        return;
    }
    if ((0x0230 <= addr) && (addr <= (0x0230)+(4*7)) && ((addr-0x0230)%4 == 0) ) {
        uint i = (addr - 0x0230)/4 + 1;
        (*(ECMNMIDTMCFG [i]))["ECMNMITE31"   ] = ECMNMIDTMCFG_ECMNMITE31[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE30"   ] = ECMNMIDTMCFG_ECMNMITE30[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE29"   ] = ECMNMIDTMCFG_ECMNMITE29[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE28"   ] = ECMNMIDTMCFG_ECMNMITE28[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE27"   ] = ECMNMIDTMCFG_ECMNMITE27[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE26"   ] = ECMNMIDTMCFG_ECMNMITE26[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE25"   ] = ECMNMIDTMCFG_ECMNMITE25[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE24"   ] = ECMNMIDTMCFG_ECMNMITE24[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE23"   ] = ECMNMIDTMCFG_ECMNMITE23[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE22"   ] = ECMNMIDTMCFG_ECMNMITE22[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE21"   ] = ECMNMIDTMCFG_ECMNMITE21[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE20"   ] = ECMNMIDTMCFG_ECMNMITE20[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE19"   ] = ECMNMIDTMCFG_ECMNMITE19[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE18"   ] = ECMNMIDTMCFG_ECMNMITE18[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE17"   ] = ECMNMIDTMCFG_ECMNMITE17[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE16"   ] = ECMNMIDTMCFG_ECMNMITE16[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE15"   ] = ECMNMIDTMCFG_ECMNMITE15[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE14"   ] = ECMNMIDTMCFG_ECMNMITE14[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE13"   ] = ECMNMIDTMCFG_ECMNMITE13[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE12"   ] = ECMNMIDTMCFG_ECMNMITE12[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE11"   ] = ECMNMIDTMCFG_ECMNMITE11[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE10"   ] = ECMNMIDTMCFG_ECMNMITE10[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE09"   ] = ECMNMIDTMCFG_ECMNMITE09[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE08"   ] = ECMNMIDTMCFG_ECMNMITE08[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE07"   ] = ECMNMIDTMCFG_ECMNMITE07[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE06"   ] = ECMNMIDTMCFG_ECMNMITE06[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE05"   ] = ECMNMIDTMCFG_ECMNMITE05[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE04"   ] = ECMNMIDTMCFG_ECMNMITE04[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE03"   ] = ECMNMIDTMCFG_ECMNMITE03[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE02"   ] = ECMNMIDTMCFG_ECMNMITE02[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE01"   ] = ECMNMIDTMCFG_ECMNMITE01[i];
        (*(ECMNMIDTMCFG [i]))["ECMNMITE00"   ] = ECMNMIDTMCFG_ECMNMITE00[i];
        return;
    }
    if (addr == 0x0250) {
        (*ECMNMIDTMCFG9)["ECMNMITE928"  ] = ECMNMIDTMCFG9_ECMNMITE928;
        (*ECMNMIDTMCFG9)["ECMNMITE927"  ] = ECMNMIDTMCFG9_ECMNMITE927;
        (*ECMNMIDTMCFG9)["ECMNMITE926"  ] = ECMNMIDTMCFG9_ECMNMITE926;
        (*ECMNMIDTMCFG9)["ECMNMITE925"  ] = ECMNMIDTMCFG9_ECMNMITE925;
        (*ECMNMIDTMCFG9)["ECMNMITE924"  ] = ECMNMIDTMCFG9_ECMNMITE924;
        (*ECMNMIDTMCFG9)["ECMNMITE923"  ] = ECMNMIDTMCFG9_ECMNMITE923;
        (*ECMNMIDTMCFG9)["ECMNMITE922"  ] = ECMNMIDTMCFG9_ECMNMITE922;
        (*ECMNMIDTMCFG9)["ECMNMITE921"  ] = ECMNMIDTMCFG9_ECMNMITE921;
        (*ECMNMIDTMCFG9)["ECMNMITE920"  ] = ECMNMIDTMCFG9_ECMNMITE920;
        (*ECMNMIDTMCFG9)["ECMNMITE919"  ] = ECMNMIDTMCFG9_ECMNMITE919;
        (*ECMNMIDTMCFG9)["ECMNMITE918"  ] = ECMNMIDTMCFG9_ECMNMITE918;
        (*ECMNMIDTMCFG9)["ECMNMITE917"  ] = ECMNMIDTMCFG9_ECMNMITE917;
        (*ECMNMIDTMCFG9)["ECMNMITE916"  ] = ECMNMIDTMCFG9_ECMNMITE916;
        (*ECMNMIDTMCFG9)["ECMNMITE915"  ] = ECMNMIDTMCFG9_ECMNMITE915;
        (*ECMNMIDTMCFG9)["ECMNMITE914"  ] = ECMNMIDTMCFG9_ECMNMITE914;
        (*ECMNMIDTMCFG9)["ECMNMITE913"  ] = ECMNMIDTMCFG9_ECMNMITE913;
        (*ECMNMIDTMCFG9)["ECMNMITE912"  ] = ECMNMIDTMCFG9_ECMNMITE912;
        (*ECMNMIDTMCFG9)["ECMNMITE911"  ] = ECMNMIDTMCFG9_ECMNMITE911;
        (*ECMNMIDTMCFG9)["ECMNMITE910"  ] = ECMNMIDTMCFG9_ECMNMITE910;
        (*ECMNMIDTMCFG9)["ECMNMITE909"  ] = ECMNMIDTMCFG9_ECMNMITE909;
        (*ECMNMIDTMCFG9)["ECMNMITE908"  ] = ECMNMIDTMCFG9_ECMNMITE908;
        (*ECMNMIDTMCFG9)["ECMNMITE907"  ] = ECMNMIDTMCFG9_ECMNMITE907;
        (*ECMNMIDTMCFG9)["ECMNMITE906"  ] = ECMNMIDTMCFG9_ECMNMITE906;
        (*ECMNMIDTMCFG9)["ECMNMITE905"  ] = ECMNMIDTMCFG9_ECMNMITE905;
        (*ECMNMIDTMCFG9)["ECMNMITE904"  ] = ECMNMIDTMCFG9_ECMNMITE904;
        (*ECMNMIDTMCFG9)["ECMNMITE903"  ] = ECMNMIDTMCFG9_ECMNMITE903;
        (*ECMNMIDTMCFG9)["ECMNMITE902"  ] = ECMNMIDTMCFG9_ECMNMITE902;
        (*ECMNMIDTMCFG9)["ECMNMITE901"  ] = ECMNMIDTMCFG9_ECMNMITE901;
        (*ECMNMIDTMCFG9)["ECMNMITE900"  ] = ECMNMIDTMCFG9_ECMNMITE900;
        return;
    }
    if (addr == 0x0254) {
        (*ECMEOCCFG    )["EOCIEN"       ] = ECMEOCCFG_EOCIEN;
        (*ECMEOCCFG    )["CMPW"         ] = ECMEOCCFG_CMPW;
        (*ECMEOCCFG    )["ECMEOUTCLRT"  ] = ECMEOCCFG_ECMEOUTCLRT;
        return;
    }
    if (addr == 0x0258) {
        (*ECMPEM       )["MSKM"         ] = ECMPEM_MSKM;
        (*ECMPEM       )["MSKC"         ] = ECMPEM_MSKC;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cecm_e2_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cecm_e2_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cecm_e2_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,10, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cecm_e2_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<10)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cecm_e2_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cecm_e2_regif::next_reg_object()
{
    assert(mCurReg != NULL);
    mCurReg = mCurReg->prev;
    if (mCurReg != NULL) {
        return mCurReg->my_p;
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cecm_e2_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cecm_e2_regif::uint Cecm_e2_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cecm_e2_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

}

/// Get file name and line number
/// @return none
void Cecm_e2_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cecm_e2_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cecm_e2_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }
    // Initialize local variable
    if (is_active) {
        InitLocalVal();
    }
}

#ifdef USE_CWR_SYSTEMC
uint Cecm_e2_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Cecm_e2_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Cecm_e2_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
