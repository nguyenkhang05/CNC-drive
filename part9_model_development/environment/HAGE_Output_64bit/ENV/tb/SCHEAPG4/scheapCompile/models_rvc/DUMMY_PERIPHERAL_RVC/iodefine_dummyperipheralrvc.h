// -----------------------------------------------------------------------------
// $Id: copyright.txt,v 1.3 2014/10/13 03:21:49 sontran Exp $
//
// Copyright(c) 2010-2014 Renesas Electronics Corporation
// Copyright(c) 2010-2014 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//
// Input file : DummyperipheralRvc/DummyperipheralRvc_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DummyPeripheralRVC
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  5
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name                           reg_name                     wsize   rsize        length  offset  factor_start    factor_end  factor_index    factor_step access   init   support  callback
//     %%REG      JUDGE_REG                      JUDGE_REG                    32      8|16|32      32      0x00    -               -           -               -           R/W      0x0     TRUE     -
//     %%REG      RESET_REG                      RESET_REG                    32      8|16|32      32      0x04    -               -           -               -           R/W      0x1     TRUE     -
//     %%REG      APP1_RST_N_REG                 APP1_RST_N_REG               32      8|16|32      32      0x08    -               -           -               -           R/W      0x1     TRUE     -
//     %%REG      SVSTOP_REG                     SVSTOP_REG                   32      8|16|32      32      0x0C    -               -           -               -           R/W      0x1     TRUE     -
//     %%REG      PCLK_REG                       PCLK_REG                     32      8|16|32      32      0x10    0               1           -               -           R/W      0x0     TRUE     -
//     
// %REG_NAME JUDGE_REG                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    JUDGE               0       0       0      R|W     TRUE        W
// 
// %REG_NAME RESET_REG
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    PRESETn             0       0       1      R|W     TRUE        W
// 
// %REG_NAME APP1_RST_N_REG
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    app1_rst_n          0       0       1      R|W     TRUE        W
// 
// %REG_NAME SVSTOP_REG
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SVSTOP              0       0       1      R|W     TRUE        W	
// 	
// %REG_NAME PCLK_REG   
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    PCLK               31       0       0      R|W     TRUE        W
// 
////////////////////////////////////////////////////////////////////////////////
/// The structure of all registers for DUMMYPERIPHERALRVC model
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __IODEFINE_DUMMYPERIPHERALRVC_H__
#define __IODEFINE_DUMMYPERIPHERALRVC_H__
struct st_dummyperipheralrvc {
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long JUDGE : 1;
        } BIT;
    } JUDGE_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long PRESETn : 1;
        } BIT;
    } RESET_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long app1_rst_n : 1;
        } BIT;
    } APP1_RST_N_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long SVSTOP : 1;
        } BIT;
    } SVSTOP_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } PCLK_REG0;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } PCLK_REG1;
};
#endif // __IODEFINE_DUMMYPERIPHERALRVC_H__
