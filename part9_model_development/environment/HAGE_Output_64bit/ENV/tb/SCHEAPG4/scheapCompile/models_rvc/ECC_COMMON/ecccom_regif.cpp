// -----------------------------------------------------------------------------
// $Id: ecccom_regif.cpp,v 1.2 2014/03/07 01:20:05 dungvannguyen Exp $
//
// Copyright(c) 2010-2013 Renesas Electronics Corporation
// Copyright(c) 2010-2013 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_cpp.skl 1.52 2014/05/19 02:28:22 sontran
//
// Input file : ecccom_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECCCom
//     #                 name       offset_size
//     %%REG_INSTANCE    reg_def        8
// 
// %REG_CHANNEL reg_def
//     %%TITLE     group   name        reg_name     wsize    rsize    length   offset  factor_start  factor_end  factor_index  access   init  support  callback
//     %%REG       -       ECCCTL      ECCCTL      16|32    8|16|32   32       0x0         -           -             -         W|R       0     TRUE     -
//     %%REG       -       ERRINT      ERRINT      8|16|32  8|16|32   32       0x4         -           -             -         W|R       0     TRUE     -
//     %%REG       -       SSTCLR      SSTCLR      8|16|32  8|16|32   32       0x8         -           -             -         W         0     TRUE     -
//     %%REG       -       DSTCLR      DSTCLR      8|16|32  8|16|32   32       0xC         -           -             -         W         0     TRUE     -
//     %%REG       -       OVFSTR      OVFSTR      8|16|32  8|16|32   32       0x10        -           -             -         R         0     TRUE     -
//     %%REG       -       S1STERSTR   S1STERSTR   8|16|32  8|16|32   32       0x20        -           -             -         R         0     TRUE     -
//     %%REG       -       S2NDERSTR   S2NDERSTR   8|16|32  8|16|32   32       0x24        -           -             -         R         0     TRUE     -
//     %%REG       -       S3RDERSTR   S3RDERSTR   8|16|32  8|16|32   32       0x28        -           -             -         R         0     TRUE     -
//     %%REG       -       S4THERSTR   S4THERSTR   8|16|32  8|16|32   32       0x2C        -           -             -         R         0     TRUE     -
//     %%REG       -       S5THERSTR   S5THERSTR   8|16|32  8|16|32   32       0x30        -           -             -         R         0     TRUE     -
//     %%REG       -       S6THERSTR   S6THERSTR   8|16|32  8|16|32   32       0x34        -           -             -         R         0     TRUE     -
//     %%REG       -       S7THERSTR   S7THERSTR   8|16|32  8|16|32   32       0x38        -           -             -         R         0     TRUE     -
//     %%REG       -       S8THERSTR   S8THERSTR   8|16|32  8|16|32   32       0x3C        -           -             -         R         0     TRUE     -
//     %%REG       -       SEDERSTR    SEDERSTR    8|16|32  8|16|32   32       0x40        -           -             -         R         0     TRUE     -
//     %%REG       -       D1STERSTR   D1STERSTR   8|16|32  8|16|32   32       0x50        -           -             -         R         0     TRUE     -
//     %%REG       -       S1STEADR    S1STEADR    32       8|16|32   32       0x60        0           3             -         R         0     TRUE     -
//     %%REG       -       S2NDEADR    S2NDEADR    32       8|16|32   32       0x70        0           3             -         R         0     TRUE     -
//     %%REG       -       S3RDEADR    S3RDEADR    32       8|16|32   32       0x80        0           3             -         R         0     TRUE     -
//     %%REG       -       S4THEADR    S4THEADR    32       8|16|32   32       0x90        0           3             -         R         0     TRUE     -
//     %%REG       -       S5THEADR    S5THEADR    32       8|16|32   32       0xA0        0           3             -         R         0     TRUE     -
//     %%REG       -       S6THEADR    S6THEADR    32       8|16|32   32       0xB0        0           3             -         R         0     TRUE     -
//     %%REG       -       S7THEADR    S7THEADR    32       8|16|32   32       0xC0        0           3             -         R         0     TRUE     -
//     %%REG       -       S8THEADR    S8THEADR    32       8|16|32   32       0xD0        0           3             -         R         0     TRUE     -
//     %%REG       -       D1STEADR    D1STEADR    32       8|16|32   32       0xE0        0           3             -         R         0     TRUE     -
//     %%REG       -       STSTCTL     STSTCTL     16|32    8|16|32   32       0xF0        -           -             -         W|R       0     TRUE     -
// 
// %REG_NAME ECCCTL
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    ECCDIS      0      0      0     W|R      TRUE     W
//     %%BIT    SECDIS      1      1      0     W|R      TRUE     -
//     %%BIT    AECCDIS     2      2      0     W|R      TRUE     -
//     %%BIT    ASECDIS     3      3      0     W|R      TRUE     -
//     %%BIT    PROT0       14     14     0     W|R      TRUE     -
//     %%BIT    PROT1       15     15     0     W|R      TRUE     -
// 
// %REG_NAME ERRINT
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDIE       0      0      0     W|R      TRUE     -
//     %%BIT    DEDIE       1      1      0     W|R      TRUE     -
//     %%BIT    APEIE       2      2      0     W|R      TRUE     -
//     %%BIT    PBEIE       3      3      0     W|R      TRUE     -
//     %%BIT    ASEDIE      4      4      0     W|R      TRUE     -
//     %%BIT    ADEDIE      5      5      0     W|R      TRUE     -
//     %%BIT    SEOVFIE     6      6      0     W|R      TRUE     -
// 
// %REG_NAME SSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SSTCLR10    0      0      0     W        TRUE     W
//     %%BIT    SSTCLR11    1      1      0     W        TRUE     -
//     %%BIT    SSTCLR12    2      2      0     W        TRUE     -
//     %%BIT    SSTCLR13    3      3      0     W        TRUE     -
//     %%BIT    SSTCLR20    4      4      0     W        TRUE     -
//     %%BIT    SSTCLR21    5      5      0     W        TRUE     -
//     %%BIT    SSTCLR22    6      6      0     W        TRUE     -
//     %%BIT    SSTCLR23    7      7      0     W        TRUE     -
//     %%BIT    SSTCLR30    8      8      0     W        TRUE     -
//     %%BIT    SSTCLR31    9      9      0     W        TRUE     -
//     %%BIT    SSTCLR32    10     10     0     W        TRUE     -
//     %%BIT    SSTCLR33    11     11     0     W        TRUE     -
//     %%BIT    SSTCLR40    12     12     0     W        TRUE     -
//     %%BIT    SSTCLR41    13     13     0     W        TRUE     -
//     %%BIT    SSTCLR42    14     14     0     W        TRUE     -
//     %%BIT    SSTCLR43    15     15     0     W        TRUE     -
//     %%BIT    SSTCLR50    16     16     0     W        TRUE     -
//     %%BIT    SSTCLR51    17     17     0     W        TRUE     -
//     %%BIT    SSTCLR52    18     18     0     W        TRUE     -
//     %%BIT    SSTCLR53    19     19     0     W        TRUE     -
//     %%BIT    SSTCLR60    20     20     0     W        TRUE     -
//     %%BIT    SSTCLR61    21     21     0     W        TRUE     -
//     %%BIT    SSTCLR62    22     22     0     W        TRUE     -
//     %%BIT    SSTCLR63    23     23     0     W        TRUE     -
//     %%BIT    SSTCLR70    24     24     0     W        TRUE     -
//     %%BIT    SSTCLR71    25     25     0     W        TRUE     -
//     %%BIT    SSTCLR72    26     26     0     W        TRUE     -
//     %%BIT    SSTCLR73    27     27     0     W        TRUE     -
//     %%BIT    SSTCLR80    28     28     0     W        TRUE     -
//     %%BIT    SSTCLR81    29     29     0     W        TRUE     -
//     %%BIT    SSTCLR82    30     30     0     W        TRUE     -
//     %%BIT    SSTCLR83    31     31     0     W        TRUE     -
// 
// %REG_NAME DSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DSTCLR0     0      0      0     W        TRUE     W
//     %%BIT    DSTCLR1     1      1      0     W        TRUE     -
//     %%BIT    DSTCLR2     2      2      0     W        TRUE     -
//     %%BIT    DSTCLR3     3      3      0     W        TRUE     -
// 
// %REG_NAME OVFSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SERROVF0     0      0      0    R        TRUE    -
//     %%BIT    SERROVF1     1      1      0    R        TRUE    -
//     %%BIT    SERROVF2     2      2      0    R        TRUE    -
//     %%BIT    SERROVF3     3      3      0    R        TRUE    -
//     %%BIT    DERROVF0     4      4      0    R        TRUE    -
//     %%BIT    DERROVF1     5      5      0    R        TRUE    -
//     %%BIT    DERROVF2     6      6      0    R        TRUE    -
//     %%BIT    DERROVF3     7      7      0    R        TRUE    -
// 
// %REG_NAME S1STERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF10       0      0      0    R        TRUE    -
//     %%BIT    PBEF10       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF10     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF10    6      6      0    R        TRUE    -
//     %%BIT    SEDF11       8      8      0    R        TRUE    -
//     %%BIT    PBEF11       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF11     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF11    14     14     0    R        TRUE    -
//     %%BIT    SEDF12       16     16     0    R        TRUE    -
//     %%BIT    PBEF12       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF12     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF12    22     22     0    R        TRUE    -
//     %%BIT    SEDF13       24     24     0    R        TRUE    -
//     %%BIT    PBEF13       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF13     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF13    30     30     0    R        TRUE    -
// 
// %REG_NAME S2NDERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF20       0      0      0    R        TRUE    -
//     %%BIT    PBEF20       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF20     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF20    6      6      0    R        TRUE    -
//     %%BIT    SEDF21       8      8      0    R        TRUE    -
//     %%BIT    PBEF21       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF21     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF21    14     14     0    R        TRUE    -
//     %%BIT    SEDF22       16     16     0    R        TRUE    -
//     %%BIT    PBEF22       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF22     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF22    22     22     0    R        TRUE    -
//     %%BIT    SEDF23       24     24     0    R        TRUE    -
//     %%BIT    PBEF23       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF23     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF23    30     30     0    R        TRUE    -
// 
// %REG_NAME S3RDERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF30       0      0      0    R        TRUE    -
//     %%BIT    PBEF30       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF30     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF30    6      6      0    R        TRUE    -
//     %%BIT    SEDF31       8      8      0    R        TRUE    -
//     %%BIT    PBEF31       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF31     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF31    14     14     0    R        TRUE    -
//     %%BIT    SEDF32       16     16     0    R        TRUE    -
//     %%BIT    PBEF32       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF32     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF32    22     22     0    R        TRUE    -
//     %%BIT    SEDF33       24     24     0    R        TRUE    -
//     %%BIT    PBEF33       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF33     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF33    30     30     0    R        TRUE    -
// 
// %REG_NAME S4THERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF40       0      0      0    R        TRUE    -
//     %%BIT    PBEF40       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF40     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF40    6      6      0    R        TRUE    -
//     %%BIT    SEDF41       8      8      0    R        TRUE    -
//     %%BIT    PBEF41       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF41     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF41    14     14     0    R        TRUE    -
//     %%BIT    SEDF42       16     16     0    R        TRUE    -
//     %%BIT    PBEF42       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF42     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF42    22     22     0    R        TRUE    -
//     %%BIT    SEDF43       24     24     0    R        TRUE    -
//     %%BIT    PBEF43       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF43     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF43    30     30     0    R        TRUE    -
// 
// %REG_NAME S5THERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF50       0      0      0    R        TRUE    -
//     %%BIT    PBEF50       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF50     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF50    6      6      0    R        TRUE    -
//     %%BIT    SEDF51       8      8      0    R        TRUE    -
//     %%BIT    PBEF51       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF51     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF51    14     14     0    R        TRUE    -
//     %%BIT    SEDF52       16     16     0    R        TRUE    -
//     %%BIT    PBEF52       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF52     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF52    22     22     0    R        TRUE    -
//     %%BIT    SEDF53       24     24     0    R        TRUE    -
//     %%BIT    PBEF53       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF53     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF53    30     30     0    R        TRUE    -
// 
// %REG_NAME S6THERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF60       0      0      0    R        TRUE    -
//     %%BIT    PBEF60       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF60     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF60    6      6      0    R        TRUE    -
//     %%BIT    SEDF61       8      8      0    R        TRUE    -
//     %%BIT    PBEF61       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF61     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF61    14     14     0    R        TRUE    -
//     %%BIT    SEDF62       16     16     0    R        TRUE    -
//     %%BIT    PBEF62       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF62     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF62    22     22     0    R        TRUE    -
//     %%BIT    SEDF63       24     24     0    R        TRUE    -
//     %%BIT    PBEF63       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF63     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF63    30     30     0    R        TRUE    -
// 
// %REG_NAME S7THERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF70       0      0      0    R        TRUE    -
//     %%BIT    PBEF70       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF70     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF70    6      6      0    R        TRUE    -
//     %%BIT    SEDF71       8      8      0    R        TRUE    -
//     %%BIT    PBEF71       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF71     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF71    14     14     0    R        TRUE    -
//     %%BIT    SEDF72       16     16     0    R        TRUE    -
//     %%BIT    PBEF72       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF72     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF72    22     22     0    R        TRUE    -
//     %%BIT    SEDF73       24     24     0    R        TRUE    -
//     %%BIT    PBEF73       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF73     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF73    30     30     0    R        TRUE    -
// 
// %REG_NAME S8THERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF80       0      0      0    R        TRUE    -
//     %%BIT    PBEF80       3      3      0    R        TRUE    -
//     %%BIT    EXSEDF80     4      4      0    R        TRUE    -
//     %%BIT    AECSEDF80    6      6      0    R        TRUE    -
//     %%BIT    SEDF81       8      8      0    R        TRUE    -
//     %%BIT    PBEF81       11     11     0    R        TRUE    -
//     %%BIT    EXSEDF81     12     12     0    R        TRUE    -
//     %%BIT    AECSEDF81    14     14     0    R        TRUE    -
//     %%BIT    SEDF82       16     16     0    R        TRUE    -
//     %%BIT    PBEF82       19     19     0    R        TRUE    -
//     %%BIT    EXSEDF82     20     20     0    R        TRUE    -
//     %%BIT    AECSEDF82    22     22     0    R        TRUE    -
//     %%BIT    SEDF83       24     24     0    R        TRUE    -
//     %%BIT    PBEF83       27     27     0    R        TRUE    -
//     %%BIT    EXSEDF83     28     28     0    R        TRUE    -
//     %%BIT    AECSEDF83    30     30     0    R        TRUE    -
// 
// %REG_NAME SEDERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF10       0      0      0    R        TRUE    -
//     %%BIT    SEDF11       1      1      0    R        TRUE    -
//     %%BIT    SEDF12       2      2      0    R        TRUE    -
//     %%BIT    SEDF13       3      3      0    R        TRUE    -
//     %%BIT    SEDF20       4      4      0    R        TRUE    -
//     %%BIT    SEDF21       5      5      0    R        TRUE    -
//     %%BIT    SEDF22       6      6      0    R        TRUE    -
//     %%BIT    SEDF23       7      7      0    R        TRUE    -
//     %%BIT    SEDF30       8      8      0    R        TRUE    -
//     %%BIT    SEDF31       9      9      0    R        TRUE    -
//     %%BIT    SEDF32       10     10     0    R        TRUE    -
//     %%BIT    SEDF33       11     11     0    R        TRUE    -
//     %%BIT    SEDF40       12     12     0    R        TRUE    -
//     %%BIT    SEDF41       13     13     0    R        TRUE    -
//     %%BIT    SEDF42       14     14     0    R        TRUE    -
//     %%BIT    SEDF43       15     15     0    R        TRUE    -
//     %%BIT    SEDF50       16     16     0    R        TRUE    -
//     %%BIT    SEDF51       17     17     0    R        TRUE    -
//     %%BIT    SEDF52       18     18     0    R        TRUE    -
//     %%BIT    SEDF53       19     19     0    R        TRUE    -
//     %%BIT    SEDF60       20     20     0    R        TRUE    -
//     %%BIT    SEDF61       21     21     0    R        TRUE    -
//     %%BIT    SEDF62       22     22     0    R        TRUE    -
//     %%BIT    SEDF63       23     23     0    R        TRUE    -
//     %%BIT    SEDF70       24     24     0    R        TRUE    -
//     %%BIT    SEDF71       25     25     0    R        TRUE    -
//     %%BIT    SEDF72       26     26     0    R        TRUE    -
//     %%BIT    SEDF73       27     27     0    R        TRUE    -
//     %%BIT    SEDF80       28     28     0    R        TRUE    -
//     %%BIT    SEDF81       29     29     0    R        TRUE    -
//     %%BIT    SEDF82       30     30     0    R        TRUE    -
//     %%BIT    SEDF83       31     31     0    R        TRUE    -
// 
// %REG_NAME D1STERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEDF0        1      1      0    R        TRUE    -
//     %%BIT    APEF0        2      2      0    R        TRUE    -
//     %%BIT    EXDEDF0      5      5      0    R        TRUE    -
//     %%BIT    AECDEDF0     7      7      0    R        TRUE    -
//     %%BIT    DEDF1        9      9      0    R        TRUE    -
//     %%BIT    APEF1        10     10     0    R        TRUE    -
//     %%BIT    EXDEDF1      13     13     0    R        TRUE    -
//     %%BIT    AECDEDF1     15     15     0    R        TRUE    -
//     %%BIT    DEDF2        17     17     0    R        TRUE    -
//     %%BIT    APEF2        18     18     0    R        TRUE    -
//     %%BIT    EXDEDF2      21     21     0    R        TRUE    -
//     %%BIT    AECDEDF2     23     23     0    R        TRUE    -
//     %%BIT    DEDF3        25     25     0    R        TRUE    -
//     %%BIT    APEF3        26     26     0    R        TRUE    -
//     %%BIT    EXDEDF3      29     29     0    R        TRUE    -
//     %%BIT    AECDEDF3     31     31     0    R        TRUE    -
// 
// %REG_NAME S1STEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR1       31      0      0    R        TRUE    -
// 
// %REG_NAME S2NDEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR2       31      0      0    R        TRUE    -
// 
// %REG_NAME S3RDEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR3       31      0      0    R        TRUE    -
// 
// %REG_NAME S4THEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR4       31      0      0    R        TRUE    -
// 
// %REG_NAME S5THEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR5       31      0      0    R        TRUE    -
// 
// %REG_NAME S6THEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR6       31      0      0    R        TRUE    -
// 
// %REG_NAME S7THEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR7       31      0      0    R        TRUE    -
// 
// %REG_NAME S8THEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR8       31      0      0    R        TRUE    -
// 
// %REG_NAME D1STEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEADR        31      0      0    R        TRUE    -
// 
// %REG_NAME STSTCTL
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    ECCTST       0       0      0    W|R      TRUE    W
//     %%BIT    PROT0        14      14     0    W|R      TRUE    -
//     %%BIT    PROT1        15      15     0    W|R      TRUE    -
////////////////////////////////////////////////////////////////////////////////
/// @file ecccom_regif.cpp
/// @brief Register IF class of model ECCCOM
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "ecccom_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cecccom_regif::Cecccom_regif(std::string name,
                             uint buswidth,
                             uint ECCCTLInitial,
                             uint ERRINTInitial,
                             bool UeabMode)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xF4/4))
    #endif
{
    CommandInit();
    ECCCTL    = new vpcl::re_register(0x0000, this, "ECCCTL"   , name.c_str());
    ERRINT    = new vpcl::re_register(0x0004, this, "ERRINT"   , name.c_str());
    SSTCLR    = new vpcl::re_register(0x0008, this, "SSTCLR"   , name.c_str());
    DSTCLR    = new vpcl::re_register(0x000C, this, "DSTCLR"   , name.c_str());
    OVFSTR    = new vpcl::re_register(0x0010, this, "OVFSTR"   , name.c_str());
    S1STERSTR = new vpcl::re_register(0x0020, this, "S1STERSTR", name.c_str());
    S2NDERSTR = new vpcl::re_register(0x0024, this, "S2NDERSTR", name.c_str());
    S3RDERSTR = new vpcl::re_register(0x0028, this, "S3RDERSTR", name.c_str());
    S4THERSTR = new vpcl::re_register(0x002C, this, "S4THERSTR", name.c_str());
    S5THERSTR = new vpcl::re_register(0x0030, this, "S5THERSTR", name.c_str());
    S6THERSTR = new vpcl::re_register(0x0034, this, "S6THERSTR", name.c_str());
    S7THERSTR = new vpcl::re_register(0x0038, this, "S7THERSTR", name.c_str());
    S8THERSTR = new vpcl::re_register(0x003C, this, "S8THERSTR", name.c_str());
    SEDERSTR  = new vpcl::re_register(0x0040, this, "SEDERSTR" , name.c_str());
    D1STERSTR = new vpcl::re_register(0x0050, this, "D1STERSTR", name.c_str());
    STSTCTL   = new vpcl::re_register(0x00F0, this, "STSTCTL"  , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_S1STEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S1STEADR"<< i;
        S1STEADR [i] = new vpcl::re_register((0x0060) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S2NDEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S2NDEADR"<< i;
        S2NDEADR [i] = new vpcl::re_register((0x0070) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S3RDEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S3RDEADR"<< i;
        S3RDEADR [i] = new vpcl::re_register((0x0080) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S4THEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S4THEADR"<< i;
        S4THEADR [i] = new vpcl::re_register((0x0090) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S5THEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S5THEADR"<< i;
        S5THEADR [i] = new vpcl::re_register((0x00A0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S6THEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S6THEADR"<< i;
        S6THEADR [i] = new vpcl::re_register((0x00B0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S7THEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S7THEADR"<< i;
        S7THEADR [i] = new vpcl::re_register((0x00C0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_S8THEADR; i++) {
        str_tmp.str("");
        str_tmp<<"S8THEADR"<< i;
        S8THEADR [i] = new vpcl::re_register((0x00D0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_D1STEADR; i++) {
        str_tmp.str("");
        str_tmp<<"D1STEADR"<< i;
        D1STEADR [i] = new vpcl::re_register((0x00E0) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    for(uint i = 0; i < emNUM_S1STEADR; i++) {
        mRegMap[(0x0060)     + i*4 ] = index;
        mRegMap[(0x0060 + 1) + i*4 ] = index;
        mRegMap[(0x0060 + 2) + i*4 ] = index;
        mRegMap[(0x0060 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S2NDEADR; i++) {
        mRegMap[(0x0070)     + i*4 ] = index;
        mRegMap[(0x0070 + 1) + i*4 ] = index;
        mRegMap[(0x0070 + 2) + i*4 ] = index;
        mRegMap[(0x0070 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S3RDEADR; i++) {
        mRegMap[(0x0080)     + i*4 ] = index;
        mRegMap[(0x0080 + 1) + i*4 ] = index;
        mRegMap[(0x0080 + 2) + i*4 ] = index;
        mRegMap[(0x0080 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S4THEADR; i++) {
        mRegMap[(0x0090)     + i*4 ] = index;
        mRegMap[(0x0090 + 1) + i*4 ] = index;
        mRegMap[(0x0090 + 2) + i*4 ] = index;
        mRegMap[(0x0090 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S5THEADR; i++) {
        mRegMap[(0x00A0)     + i*4 ] = index;
        mRegMap[(0x00A0 + 1) + i*4 ] = index;
        mRegMap[(0x00A0 + 2) + i*4 ] = index;
        mRegMap[(0x00A0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S6THEADR; i++) {
        mRegMap[(0x00B0)     + i*4 ] = index;
        mRegMap[(0x00B0 + 1) + i*4 ] = index;
        mRegMap[(0x00B0 + 2) + i*4 ] = index;
        mRegMap[(0x00B0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S7THEADR; i++) {
        mRegMap[(0x00C0)     + i*4 ] = index;
        mRegMap[(0x00C0 + 1) + i*4 ] = index;
        mRegMap[(0x00C0 + 2) + i*4 ] = index;
        mRegMap[(0x00C0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_S8THEADR; i++) {
        mRegMap[(0x00D0)     + i*4 ] = index;
        mRegMap[(0x00D0 + 1) + i*4 ] = index;
        mRegMap[(0x00D0 + 2) + i*4 ] = index;
        mRegMap[(0x00D0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_D1STEADR; i++) {
        mRegMap[(0x00E0)     + i*4 ] = index;
        mRegMap[(0x00E0 + 1) + i*4 ] = index;
        mRegMap[(0x00E0 + 2) + i*4 ] = index;
        mRegMap[(0x00E0 + 3) + i*4 ] = index++;
    }
    mRegMap[0x00F0]     = index;
    mRegMap[0x00F0 + 1] = index;
    mRegMap[0x00F0 + 2] = index;
    mRegMap[0x00F0 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_ECCCTL     , ECCCTL->name()   , ECCCTL->addr()   );
    cw_instantiate_reg(CW_ERRINT     , ERRINT->name()   , ERRINT->addr()   );
    cw_instantiate_reg(CW_SSTCLR     , SSTCLR->name()   , SSTCLR->addr()   );
    cw_instantiate_reg(CW_DSTCLR     , DSTCLR->name()   , DSTCLR->addr()   );
    cw_instantiate_reg(CW_OVFSTR     , OVFSTR->name()   , OVFSTR->addr()   );
    cw_instantiate_reg(CW_S1STERSTR  , S1STERSTR->name(), S1STERSTR->addr());
    cw_instantiate_reg(CW_S2NDERSTR  , S2NDERSTR->name(), S2NDERSTR->addr());
    cw_instantiate_reg(CW_S3RDERSTR  , S3RDERSTR->name(), S3RDERSTR->addr());
    cw_instantiate_reg(CW_S4THERSTR  , S4THERSTR->name(), S4THERSTR->addr());
    cw_instantiate_reg(CW_S5THERSTR  , S5THERSTR->name(), S5THERSTR->addr());
    cw_instantiate_reg(CW_S6THERSTR  , S6THERSTR->name(), S6THERSTR->addr());
    cw_instantiate_reg(CW_S7THERSTR  , S7THERSTR->name(), S7THERSTR->addr());
    cw_instantiate_reg(CW_S8THERSTR  , S8THERSTR->name(), S8THERSTR->addr());
    cw_instantiate_reg(CW_SEDERSTR   , SEDERSTR->name() , SEDERSTR->addr() );
    cw_instantiate_reg(CW_D1STERSTR  , D1STERSTR->name(), D1STERSTR->addr());
    for(uint i = 0; i < emNUM_S1STEADR ; i++) cw_instantiate_reg(CW_S1STEADR   [i], S1STEADR [i]->name(), S1STEADR [i]->addr());
    for(uint i = 0; i < emNUM_S2NDEADR ; i++) cw_instantiate_reg(CW_S2NDEADR   [i], S2NDEADR [i]->name(), S2NDEADR [i]->addr());
    for(uint i = 0; i < emNUM_S3RDEADR ; i++) cw_instantiate_reg(CW_S3RDEADR   [i], S3RDEADR [i]->name(), S3RDEADR [i]->addr());
    for(uint i = 0; i < emNUM_S4THEADR ; i++) cw_instantiate_reg(CW_S4THEADR   [i], S4THEADR [i]->name(), S4THEADR [i]->addr());
    for(uint i = 0; i < emNUM_S5THEADR ; i++) cw_instantiate_reg(CW_S5THEADR   [i], S5THEADR [i]->name(), S5THEADR [i]->addr());
    for(uint i = 0; i < emNUM_S6THEADR ; i++) cw_instantiate_reg(CW_S6THEADR   [i], S6THEADR [i]->name(), S6THEADR [i]->addr());
    for(uint i = 0; i < emNUM_S7THEADR ; i++) cw_instantiate_reg(CW_S7THEADR   [i], S7THEADR [i]->name(), S7THEADR [i]->addr());
    for(uint i = 0; i < emNUM_S8THEADR ; i++) cw_instantiate_reg(CW_S8THEADR   [i], S8THEADR [i]->name(), S8THEADR [i]->addr());
    for(uint i = 0; i < emNUM_D1STEADR ; i++) cw_instantiate_reg(CW_D1STEADR   [i], D1STEADR [i]->name(), D1STEADR [i]->addr());
    cw_instantiate_reg(CW_STSTCTL    , STSTCTL->name()  , STSTCTL->addr()  );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(ECCCTL     , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ERRINT     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SSTCLR     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSTCLR     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(OVFSTR     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S1STERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S2NDERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S3RDERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S4THERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S5THERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S6THERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S7THERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(S8THERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SEDERSTR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(D1STERSTR  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_S1STEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S1STEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S2NDEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S2NDEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S3RDEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S3RDEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S4THEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S4THEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S5THEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S5THEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S6THEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S6THEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S7THEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S7THEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_S8THEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(S8THEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_D1STEADR ; i++) mCurReg = mRegArray[index++] = new SRegList(D1STEADR   [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(STSTCTL    , mCurReg, 0,  4,   "16|32", "8|16|32");

    mRegList = mCurReg;

    (*ECCCTL     ) ( 0,  0, "ECCDIS"  , (ECCCTLInitial)&0x1     , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL     ) ( 1,  1, "SECDIS"  , (ECCCTLInitial>>1)&0x1  , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL     ) ( 2,  2, "AECCDIS" , (ECCCTLInitial>>2)&0x1  , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL     ) ( 3,  3, "ASECDIS" , (ECCCTLInitial>>3)&0x1  , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL     ) (14, 14, "PROT0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL     ) (15, 15, "PROT1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    if (UeabMode == true) {
        (*ERRINT   ) ( 0,  0, "SEDIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 1,  1, "DEDIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 2,  2, "APEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 3,  3, "PBEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 4,  4, "ASEDIE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 5,  5, "ADEDIE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 6,  6, "SEOVFIE" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    } else {
        (*ERRINT   ) ( 0,  0, "SEDIE"   , (ERRINTInitial)&0x1       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 1,  1, "DEDIE"   , (ERRINTInitial>>1)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 2,  2, "APEIE"   , (ERRINTInitial>>2)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 3,  3, "PBEIE"   , (ERRINTInitial>>3)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 4,  4, "ASEDIE"  , (ERRINTInitial>>4)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 5,  5, "ADEDIE"  , (ERRINTInitial>>5)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT   ) ( 6,  6, "SEOVFIE" , (ERRINTInitial>>6)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
    }
    (*SSTCLR     ) ( 0,  0, "SSTCLR10", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 1,  1, "SSTCLR11", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 2,  2, "SSTCLR12", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 3,  3, "SSTCLR13", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 4,  4, "SSTCLR20", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 5,  5, "SSTCLR21", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 6,  6, "SSTCLR22", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 7,  7, "SSTCLR23", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 8,  8, "SSTCLR30", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) ( 9,  9, "SSTCLR31", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (10, 10, "SSTCLR32", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (11, 11, "SSTCLR33", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (12, 12, "SSTCLR40", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (13, 13, "SSTCLR41", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (14, 14, "SSTCLR42", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (15, 15, "SSTCLR43", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (16, 16, "SSTCLR50", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (17, 17, "SSTCLR51", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (18, 18, "SSTCLR52", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (19, 19, "SSTCLR53", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (20, 20, "SSTCLR60", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (21, 21, "SSTCLR61", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (22, 22, "SSTCLR62", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (23, 23, "SSTCLR63", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (24, 24, "SSTCLR70", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (25, 25, "SSTCLR71", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (26, 26, "SSTCLR72", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (27, 27, "SSTCLR73", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (28, 28, "SSTCLR80", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (29, 29, "SSTCLR81", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (30, 30, "SSTCLR82", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR     ) (31, 31, "SSTCLR83", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSTCLR     ) ( 0,  0, "DSTCLR0" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSTCLR     ) ( 1,  1, "DSTCLR1" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSTCLR     ) ( 2,  2, "DSTCLR2" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSTCLR     ) ( 3,  3, "DSTCLR3" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 0,  0, "SERROVF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 1,  1, "SERROVF1", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 2,  2, "SERROVF2", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 3,  3, "SERROVF3", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 4,  4, "DERROVF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 5,  5, "DERROVF1", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 6,  6, "DERROVF2", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OVFSTR     ) ( 7,  7, "DERROVF3", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) ( 0,  0, "SEDF10"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) ( 3,  3, "PBEF10"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) ( 4,  4, "EXSEDF10", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) ( 6,  6, "AECSEDF10", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) ( 8,  8, "SEDF11"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (11, 11, "PBEF11"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (12, 12, "EXSEDF11", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (14, 14, "AECSEDF11", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (16, 16, "SEDF12"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (19, 19, "PBEF12"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (20, 20, "EXSEDF12", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (22, 22, "AECSEDF12", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (24, 24, "SEDF13"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (27, 27, "PBEF13"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (28, 28, "EXSEDF13", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S1STERSTR  ) (30, 30, "AECSEDF13", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) ( 0,  0, "SEDF20"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) ( 3,  3, "PBEF20"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) ( 4,  4, "EXSEDF20", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) ( 6,  6, "AECSEDF20", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) ( 8,  8, "SEDF21"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (11, 11, "PBEF21"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (12, 12, "EXSEDF21", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (14, 14, "AECSEDF21", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (16, 16, "SEDF22"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (19, 19, "PBEF22"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (20, 20, "EXSEDF22", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (22, 22, "AECSEDF22", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (24, 24, "SEDF23"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (27, 27, "PBEF23"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (28, 28, "EXSEDF23", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S2NDERSTR  ) (30, 30, "AECSEDF23", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) ( 0,  0, "SEDF30"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) ( 3,  3, "PBEF30"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) ( 4,  4, "EXSEDF30", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) ( 6,  6, "AECSEDF30", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) ( 8,  8, "SEDF31"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (11, 11, "PBEF31"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (12, 12, "EXSEDF31", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (14, 14, "AECSEDF31", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (16, 16, "SEDF32"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (19, 19, "PBEF32"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (20, 20, "EXSEDF32", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (22, 22, "AECSEDF32", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (24, 24, "SEDF33"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (27, 27, "PBEF33"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (28, 28, "EXSEDF33", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S3RDERSTR  ) (30, 30, "AECSEDF33", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) ( 0,  0, "SEDF40"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) ( 3,  3, "PBEF40"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) ( 4,  4, "EXSEDF40", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) ( 6,  6, "AECSEDF40", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) ( 8,  8, "SEDF41"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (11, 11, "PBEF41"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (12, 12, "EXSEDF41", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (14, 14, "AECSEDF41", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (16, 16, "SEDF42"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (19, 19, "PBEF42"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (20, 20, "EXSEDF42", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (22, 22, "AECSEDF42", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (24, 24, "SEDF43"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (27, 27, "PBEF43"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (28, 28, "EXSEDF43", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S4THERSTR  ) (30, 30, "AECSEDF43", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) ( 0,  0, "SEDF50"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) ( 3,  3, "PBEF50"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) ( 4,  4, "EXSEDF50", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) ( 6,  6, "AECSEDF50", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) ( 8,  8, "SEDF51"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (11, 11, "PBEF51"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (12, 12, "EXSEDF51", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (14, 14, "AECSEDF51", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (16, 16, "SEDF52"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (19, 19, "PBEF52"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (20, 20, "EXSEDF52", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (22, 22, "AECSEDF52", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (24, 24, "SEDF53"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (27, 27, "PBEF53"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (28, 28, "EXSEDF53", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S5THERSTR  ) (30, 30, "AECSEDF53", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) ( 0,  0, "SEDF60"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) ( 3,  3, "PBEF60"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) ( 4,  4, "EXSEDF60", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) ( 6,  6, "AECSEDF60", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) ( 8,  8, "SEDF61"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (11, 11, "PBEF61"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (12, 12, "EXSEDF61", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (14, 14, "AECSEDF61", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (16, 16, "SEDF62"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (19, 19, "PBEF62"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (20, 20, "EXSEDF62", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (22, 22, "AECSEDF62", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (24, 24, "SEDF63"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (27, 27, "PBEF63"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (28, 28, "EXSEDF63", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S6THERSTR  ) (30, 30, "AECSEDF63", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) ( 0,  0, "SEDF70"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) ( 3,  3, "PBEF70"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) ( 4,  4, "EXSEDF70", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) ( 6,  6, "AECSEDF70", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) ( 8,  8, "SEDF71"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (11, 11, "PBEF71"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (12, 12, "EXSEDF71", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (14, 14, "AECSEDF71", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (16, 16, "SEDF72"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (19, 19, "PBEF72"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (20, 20, "EXSEDF72", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (22, 22, "AECSEDF72", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (24, 24, "SEDF73"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (27, 27, "PBEF73"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (28, 28, "EXSEDF73", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S7THERSTR  ) (30, 30, "AECSEDF73", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) ( 0,  0, "SEDF80"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) ( 3,  3, "PBEF80"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) ( 4,  4, "EXSEDF80", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) ( 6,  6, "AECSEDF80", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) ( 8,  8, "SEDF81"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (11, 11, "PBEF81"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (12, 12, "EXSEDF81", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (14, 14, "AECSEDF81", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (16, 16, "SEDF82"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (19, 19, "PBEF82"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (20, 20, "EXSEDF82", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (22, 22, "AECSEDF82", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (24, 24, "SEDF83"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (27, 27, "PBEF83"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (28, 28, "EXSEDF83", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*S8THERSTR  ) (30, 30, "AECSEDF83", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 0,  0, "SEDF10"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 1,  1, "SEDF11"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 2,  2, "SEDF12"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 3,  3, "SEDF13"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 4,  4, "SEDF20"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 5,  5, "SEDF21"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 6,  6, "SEDF22"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 7,  7, "SEDF23"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 8,  8, "SEDF30"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) ( 9,  9, "SEDF31"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (10, 10, "SEDF32"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (11, 11, "SEDF33"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (12, 12, "SEDF40"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (13, 13, "SEDF41"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (14, 14, "SEDF42"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (15, 15, "SEDF43"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (16, 16, "SEDF50"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (17, 17, "SEDF51"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (18, 18, "SEDF52"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (19, 19, "SEDF53"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (20, 20, "SEDF60"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (21, 21, "SEDF61"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (22, 22, "SEDF62"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (23, 23, "SEDF63"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (24, 24, "SEDF70"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (25, 25, "SEDF71"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (26, 26, "SEDF72"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (27, 27, "SEDF73"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (28, 28, "SEDF80"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (29, 29, "SEDF81"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (30, 30, "SEDF82"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SEDERSTR   ) (31, 31, "SEDF83"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) ( 1,  1, "DEDF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) ( 2,  2, "APEF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) ( 5,  5, "EXDEDF0" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) ( 7,  7, "AECDEDF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) ( 9,  9, "DEDF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (10, 10, "APEF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (13, 13, "EXDEDF1" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (15, 15, "AECDEDF1", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (17, 17, "DEDF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (18, 18, "APEF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (21, 21, "EXDEDF2" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (23, 23, "AECDEDF2", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (25, 25, "DEDF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (26, 26, "APEF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (29, 29, "EXDEDF3" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*D1STERSTR  ) (31, 31, "AECDEDF3", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*STSTCTL    ) ( 0,  0, "ECCTST"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*STSTCTL    ) (14, 14, "PROT0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*STSTCTL    ) (15, 15, "PROT1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_S1STEADR; i++) {
        (*S1STEADR   [i]) (31,  0, "SEADR1"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S2NDEADR; i++) {
        (*S2NDEADR   [i]) (31,  0, "SEADR2"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S8THEADR; i++) {
        (*S8THEADR   [i]) (31,  0, "SEADR8"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S3RDEADR; i++) {
        (*S3RDEADR   [i]) (31,  0, "SEADR3"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_D1STEADR; i++) {
        (*D1STEADR   [i]) (31,  0, "DEADR"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S5THEADR; i++) {
        (*S5THEADR   [i]) (31,  0, "SEADR5"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S6THEADR; i++) {
        (*S6THEADR   [i]) (31,  0, "SEADR6"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S4THEADR; i++) {
        (*S4THEADR   [i]) (31,  0, "SEADR4"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_S7THEADR; i++) {
        (*S7THEADR   [i]) (31,  0, "SEADR7"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ECCCTL" ]["ECCDIS" ] = &Cecccom_regif::cb_ECCCTL_ECCDIS;
    mWrCbAPI["SSTCLR" ]["SSTCLR10"] = &Cecccom_regif::cb_SSTCLR_SSTCLR10;
    mWrCbAPI["DSTCLR" ]["DSTCLR0"] = &Cecccom_regif::cb_DSTCLR_DSTCLR0;
    mWrCbAPI["STSTCTL"]["ECCTST" ] = &Cecccom_regif::cb_STSTCTL_ECCTST;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cecccom_regif::~Cecccom_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cecccom_regif::uint Cecccom_regif::bit_select(
                           cuint val,    ///< [in] Writting address
                           cuint start,  ///< [in] start bit position
                           cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecccom_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                           const unsigned char *p_data,   ///< [in] Writing data
                           cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecccom_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                           unsigned char *p_data,   ///< [out] Reading data
                           cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecccom_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                               const unsigned char *p_data,   ///< [in] Writing data
                               cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecccom_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                               unsigned char *p_data,   ///< [out] Reading data
                               cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecccom_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                   const unsigned char *p_data,  ///< [in] Writing data
                                   cuint size,                   ///< [in] Data size (byte)
                                   bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecccom_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                   unsigned char *p_data,   ///< [out] Reading data
                                   cuint size,              ///< [in]  Data size (byte)
                                   bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cecccom_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                unsigned char *p_data,          ///< [out] Reading data
                                cuint size,                     ///< [in]  Data size (byte)
                                cuint reg_index,                ///< [in] Register index
                                bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cecccom_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                const unsigned char *p_data,      ///< [in] Writing data
                                cuint size,                       ///< [in] Data size (byte)
                                cuint reg_index,                  ///< [in] Register index
                                bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cecccom_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cecccom_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cecccom_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cecccom_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cecccom_regif::InitLocalVal()
{
    // Initialize local variables
    ECCCTL_ECCDIS = 0x0;
    ECCCTL_SECDIS = 0x0;
    ECCCTL_AECCDIS = 0x0;
    ECCCTL_ASECDIS = 0x0;
    ECCCTL_PROT0 = 0x0;
    ECCCTL_PROT1 = 0x0;
    ERRINT_SEDIE = 0x0;
    ERRINT_DEDIE = 0x0;
    ERRINT_APEIE = 0x0;
    ERRINT_PBEIE = 0x0;
    ERRINT_ASEDIE = 0x0;
    ERRINT_ADEDIE = 0x0;
    ERRINT_SEOVFIE = 0x0;
    SSTCLR_SSTCLR10 = 0x0;
    SSTCLR_SSTCLR11 = 0x0;
    SSTCLR_SSTCLR12 = 0x0;
    SSTCLR_SSTCLR13 = 0x0;
    SSTCLR_SSTCLR20 = 0x0;
    SSTCLR_SSTCLR21 = 0x0;
    SSTCLR_SSTCLR22 = 0x0;
    SSTCLR_SSTCLR23 = 0x0;
    SSTCLR_SSTCLR30 = 0x0;
    SSTCLR_SSTCLR31 = 0x0;
    SSTCLR_SSTCLR32 = 0x0;
    SSTCLR_SSTCLR33 = 0x0;
    SSTCLR_SSTCLR40 = 0x0;
    SSTCLR_SSTCLR41 = 0x0;
    SSTCLR_SSTCLR42 = 0x0;
    SSTCLR_SSTCLR43 = 0x0;
    SSTCLR_SSTCLR50 = 0x0;
    SSTCLR_SSTCLR51 = 0x0;
    SSTCLR_SSTCLR52 = 0x0;
    SSTCLR_SSTCLR53 = 0x0;
    SSTCLR_SSTCLR60 = 0x0;
    SSTCLR_SSTCLR61 = 0x0;
    SSTCLR_SSTCLR62 = 0x0;
    SSTCLR_SSTCLR63 = 0x0;
    SSTCLR_SSTCLR70 = 0x0;
    SSTCLR_SSTCLR71 = 0x0;
    SSTCLR_SSTCLR72 = 0x0;
    SSTCLR_SSTCLR73 = 0x0;
    SSTCLR_SSTCLR80 = 0x0;
    SSTCLR_SSTCLR81 = 0x0;
    SSTCLR_SSTCLR82 = 0x0;
    SSTCLR_SSTCLR83 = 0x0;
    DSTCLR_DSTCLR0 = 0x0;
    DSTCLR_DSTCLR1 = 0x0;
    DSTCLR_DSTCLR2 = 0x0;
    DSTCLR_DSTCLR3 = 0x0;
    OVFSTR_SERROVF0 = 0x0;
    OVFSTR_SERROVF1 = 0x0;
    OVFSTR_SERROVF2 = 0x0;
    OVFSTR_SERROVF3 = 0x0;
    OVFSTR_DERROVF0 = 0x0;
    OVFSTR_DERROVF1 = 0x0;
    OVFSTR_DERROVF2 = 0x0;
    OVFSTR_DERROVF3 = 0x0;
    S1STERSTR_SEDF10 = 0x0;
    S1STERSTR_PBEF10 = 0x0;
    S1STERSTR_EXSEDF10 = 0x0;
    S1STERSTR_AECSEDF10 = 0x0;
    S1STERSTR_SEDF11 = 0x0;
    S1STERSTR_PBEF11 = 0x0;
    S1STERSTR_EXSEDF11 = 0x0;
    S1STERSTR_AECSEDF11 = 0x0;
    S1STERSTR_SEDF12 = 0x0;
    S1STERSTR_PBEF12 = 0x0;
    S1STERSTR_EXSEDF12 = 0x0;
    S1STERSTR_AECSEDF12 = 0x0;
    S1STERSTR_SEDF13 = 0x0;
    S1STERSTR_PBEF13 = 0x0;
    S1STERSTR_EXSEDF13 = 0x0;
    S1STERSTR_AECSEDF13 = 0x0;
    S2NDERSTR_SEDF20 = 0x0;
    S2NDERSTR_PBEF20 = 0x0;
    S2NDERSTR_EXSEDF20 = 0x0;
    S2NDERSTR_AECSEDF20 = 0x0;
    S2NDERSTR_SEDF21 = 0x0;
    S2NDERSTR_PBEF21 = 0x0;
    S2NDERSTR_EXSEDF21 = 0x0;
    S2NDERSTR_AECSEDF21 = 0x0;
    S2NDERSTR_SEDF22 = 0x0;
    S2NDERSTR_PBEF22 = 0x0;
    S2NDERSTR_EXSEDF22 = 0x0;
    S2NDERSTR_AECSEDF22 = 0x0;
    S2NDERSTR_SEDF23 = 0x0;
    S2NDERSTR_PBEF23 = 0x0;
    S2NDERSTR_EXSEDF23 = 0x0;
    S2NDERSTR_AECSEDF23 = 0x0;
    S3RDERSTR_SEDF30 = 0x0;
    S3RDERSTR_PBEF30 = 0x0;
    S3RDERSTR_EXSEDF30 = 0x0;
    S3RDERSTR_AECSEDF30 = 0x0;
    S3RDERSTR_SEDF31 = 0x0;
    S3RDERSTR_PBEF31 = 0x0;
    S3RDERSTR_EXSEDF31 = 0x0;
    S3RDERSTR_AECSEDF31 = 0x0;
    S3RDERSTR_SEDF32 = 0x0;
    S3RDERSTR_PBEF32 = 0x0;
    S3RDERSTR_EXSEDF32 = 0x0;
    S3RDERSTR_AECSEDF32 = 0x0;
    S3RDERSTR_SEDF33 = 0x0;
    S3RDERSTR_PBEF33 = 0x0;
    S3RDERSTR_EXSEDF33 = 0x0;
    S3RDERSTR_AECSEDF33 = 0x0;
    S4THERSTR_SEDF40 = 0x0;
    S4THERSTR_PBEF40 = 0x0;
    S4THERSTR_EXSEDF40 = 0x0;
    S4THERSTR_AECSEDF40 = 0x0;
    S4THERSTR_SEDF41 = 0x0;
    S4THERSTR_PBEF41 = 0x0;
    S4THERSTR_EXSEDF41 = 0x0;
    S4THERSTR_AECSEDF41 = 0x0;
    S4THERSTR_SEDF42 = 0x0;
    S4THERSTR_PBEF42 = 0x0;
    S4THERSTR_EXSEDF42 = 0x0;
    S4THERSTR_AECSEDF42 = 0x0;
    S4THERSTR_SEDF43 = 0x0;
    S4THERSTR_PBEF43 = 0x0;
    S4THERSTR_EXSEDF43 = 0x0;
    S4THERSTR_AECSEDF43 = 0x0;
    S5THERSTR_SEDF50 = 0x0;
    S5THERSTR_PBEF50 = 0x0;
    S5THERSTR_EXSEDF50 = 0x0;
    S5THERSTR_AECSEDF50 = 0x0;
    S5THERSTR_SEDF51 = 0x0;
    S5THERSTR_PBEF51 = 0x0;
    S5THERSTR_EXSEDF51 = 0x0;
    S5THERSTR_AECSEDF51 = 0x0;
    S5THERSTR_SEDF52 = 0x0;
    S5THERSTR_PBEF52 = 0x0;
    S5THERSTR_EXSEDF52 = 0x0;
    S5THERSTR_AECSEDF52 = 0x0;
    S5THERSTR_SEDF53 = 0x0;
    S5THERSTR_PBEF53 = 0x0;
    S5THERSTR_EXSEDF53 = 0x0;
    S5THERSTR_AECSEDF53 = 0x0;
    S6THERSTR_SEDF60 = 0x0;
    S6THERSTR_PBEF60 = 0x0;
    S6THERSTR_EXSEDF60 = 0x0;
    S6THERSTR_AECSEDF60 = 0x0;
    S6THERSTR_SEDF61 = 0x0;
    S6THERSTR_PBEF61 = 0x0;
    S6THERSTR_EXSEDF61 = 0x0;
    S6THERSTR_AECSEDF61 = 0x0;
    S6THERSTR_SEDF62 = 0x0;
    S6THERSTR_PBEF62 = 0x0;
    S6THERSTR_EXSEDF62 = 0x0;
    S6THERSTR_AECSEDF62 = 0x0;
    S6THERSTR_SEDF63 = 0x0;
    S6THERSTR_PBEF63 = 0x0;
    S6THERSTR_EXSEDF63 = 0x0;
    S6THERSTR_AECSEDF63 = 0x0;
    S7THERSTR_SEDF70 = 0x0;
    S7THERSTR_PBEF70 = 0x0;
    S7THERSTR_EXSEDF70 = 0x0;
    S7THERSTR_AECSEDF70 = 0x0;
    S7THERSTR_SEDF71 = 0x0;
    S7THERSTR_PBEF71 = 0x0;
    S7THERSTR_EXSEDF71 = 0x0;
    S7THERSTR_AECSEDF71 = 0x0;
    S7THERSTR_SEDF72 = 0x0;
    S7THERSTR_PBEF72 = 0x0;
    S7THERSTR_EXSEDF72 = 0x0;
    S7THERSTR_AECSEDF72 = 0x0;
    S7THERSTR_SEDF73 = 0x0;
    S7THERSTR_PBEF73 = 0x0;
    S7THERSTR_EXSEDF73 = 0x0;
    S7THERSTR_AECSEDF73 = 0x0;
    S8THERSTR_SEDF80 = 0x0;
    S8THERSTR_PBEF80 = 0x0;
    S8THERSTR_EXSEDF80 = 0x0;
    S8THERSTR_AECSEDF80 = 0x0;
    S8THERSTR_SEDF81 = 0x0;
    S8THERSTR_PBEF81 = 0x0;
    S8THERSTR_EXSEDF81 = 0x0;
    S8THERSTR_AECSEDF81 = 0x0;
    S8THERSTR_SEDF82 = 0x0;
    S8THERSTR_PBEF82 = 0x0;
    S8THERSTR_EXSEDF82 = 0x0;
    S8THERSTR_AECSEDF82 = 0x0;
    S8THERSTR_SEDF83 = 0x0;
    S8THERSTR_PBEF83 = 0x0;
    S8THERSTR_EXSEDF83 = 0x0;
    S8THERSTR_AECSEDF83 = 0x0;
    SEDERSTR_SEDF10 = 0x0;
    SEDERSTR_SEDF11 = 0x0;
    SEDERSTR_SEDF12 = 0x0;
    SEDERSTR_SEDF13 = 0x0;
    SEDERSTR_SEDF20 = 0x0;
    SEDERSTR_SEDF21 = 0x0;
    SEDERSTR_SEDF22 = 0x0;
    SEDERSTR_SEDF23 = 0x0;
    SEDERSTR_SEDF30 = 0x0;
    SEDERSTR_SEDF31 = 0x0;
    SEDERSTR_SEDF32 = 0x0;
    SEDERSTR_SEDF33 = 0x0;
    SEDERSTR_SEDF40 = 0x0;
    SEDERSTR_SEDF41 = 0x0;
    SEDERSTR_SEDF42 = 0x0;
    SEDERSTR_SEDF43 = 0x0;
    SEDERSTR_SEDF50 = 0x0;
    SEDERSTR_SEDF51 = 0x0;
    SEDERSTR_SEDF52 = 0x0;
    SEDERSTR_SEDF53 = 0x0;
    SEDERSTR_SEDF60 = 0x0;
    SEDERSTR_SEDF61 = 0x0;
    SEDERSTR_SEDF62 = 0x0;
    SEDERSTR_SEDF63 = 0x0;
    SEDERSTR_SEDF70 = 0x0;
    SEDERSTR_SEDF71 = 0x0;
    SEDERSTR_SEDF72 = 0x0;
    SEDERSTR_SEDF73 = 0x0;
    SEDERSTR_SEDF80 = 0x0;
    SEDERSTR_SEDF81 = 0x0;
    SEDERSTR_SEDF82 = 0x0;
    SEDERSTR_SEDF83 = 0x0;
    D1STERSTR_DEDF0 = 0x0;
    D1STERSTR_APEF0 = 0x0;
    D1STERSTR_EXDEDF0 = 0x0;
    D1STERSTR_AECDEDF0 = 0x0;
    D1STERSTR_DEDF1 = 0x0;
    D1STERSTR_APEF1 = 0x0;
    D1STERSTR_EXDEDF1 = 0x0;
    D1STERSTR_AECDEDF1 = 0x0;
    D1STERSTR_DEDF2 = 0x0;
    D1STERSTR_APEF2 = 0x0;
    D1STERSTR_EXDEDF2 = 0x0;
    D1STERSTR_AECDEDF2 = 0x0;
    D1STERSTR_DEDF3 = 0x0;
    D1STERSTR_APEF3 = 0x0;
    D1STERSTR_EXDEDF3 = 0x0;
    D1STERSTR_AECDEDF3 = 0x0;
    for(uint i = 0; i < emNUM_S1STEADR; i++) {
        S1STEADR_SEADR1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S2NDEADR; i++) {
        S2NDEADR_SEADR2[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S3RDEADR; i++) {
        S3RDEADR_SEADR3[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S4THEADR; i++) {
        S4THEADR_SEADR4[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S5THEADR; i++) {
        S5THEADR_SEADR5[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S6THEADR; i++) {
        S6THEADR_SEADR6[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S7THEADR; i++) {
        S7THEADR_SEADR7[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_S8THEADR; i++) {
        S8THEADR_SEADR8[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_D1STEADR; i++) {
        D1STEADR_DEADR[i] = 0x0;
    }
    STSTCTL_ECCTST = 0x0;
    STSTCTL_PROT0 = 0x0;
    STSTCTL_PROT1 = 0x0;
}

/// Update bit value to local value
/// @return None
void Cecccom_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ECCCTL_ECCDIS                 = (*ECCCTL   )["ECCDIS"   ];
        ECCCTL_SECDIS                 = (*ECCCTL   )["SECDIS"   ];
        ECCCTL_AECCDIS                = (*ECCCTL   )["AECCDIS"  ];
        ECCCTL_ASECDIS                = (*ECCCTL   )["ASECDIS"  ];
        ECCCTL_PROT0                  = (*ECCCTL   )["PROT0"    ];
        ECCCTL_PROT1                  = (*ECCCTL   )["PROT1"    ];
        return;
    }
    if (addr == 0x0004) {
        ERRINT_SEDIE                  = (*ERRINT   )["SEDIE"    ];
        ERRINT_DEDIE                  = (*ERRINT   )["DEDIE"    ];
        ERRINT_APEIE                  = (*ERRINT   )["APEIE"    ];
        ERRINT_PBEIE                  = (*ERRINT   )["PBEIE"    ];
        ERRINT_ASEDIE                 = (*ERRINT   )["ASEDIE"   ];
        ERRINT_ADEDIE                 = (*ERRINT   )["ADEDIE"   ];
        ERRINT_SEOVFIE                = (*ERRINT   )["SEOVFIE"  ];
        return;
    }
    if (addr == 0x0008) {
        SSTCLR_SSTCLR10               = (*SSTCLR   )["SSTCLR10" ];
        SSTCLR_SSTCLR11               = (*SSTCLR   )["SSTCLR11" ];
        SSTCLR_SSTCLR12               = (*SSTCLR   )["SSTCLR12" ];
        SSTCLR_SSTCLR13               = (*SSTCLR   )["SSTCLR13" ];
        SSTCLR_SSTCLR20               = (*SSTCLR   )["SSTCLR20" ];
        SSTCLR_SSTCLR21               = (*SSTCLR   )["SSTCLR21" ];
        SSTCLR_SSTCLR22               = (*SSTCLR   )["SSTCLR22" ];
        SSTCLR_SSTCLR23               = (*SSTCLR   )["SSTCLR23" ];
        SSTCLR_SSTCLR30               = (*SSTCLR   )["SSTCLR30" ];
        SSTCLR_SSTCLR31               = (*SSTCLR   )["SSTCLR31" ];
        SSTCLR_SSTCLR32               = (*SSTCLR   )["SSTCLR32" ];
        SSTCLR_SSTCLR33               = (*SSTCLR   )["SSTCLR33" ];
        SSTCLR_SSTCLR40               = (*SSTCLR   )["SSTCLR40" ];
        SSTCLR_SSTCLR41               = (*SSTCLR   )["SSTCLR41" ];
        SSTCLR_SSTCLR42               = (*SSTCLR   )["SSTCLR42" ];
        SSTCLR_SSTCLR43               = (*SSTCLR   )["SSTCLR43" ];
        SSTCLR_SSTCLR50               = (*SSTCLR   )["SSTCLR50" ];
        SSTCLR_SSTCLR51               = (*SSTCLR   )["SSTCLR51" ];
        SSTCLR_SSTCLR52               = (*SSTCLR   )["SSTCLR52" ];
        SSTCLR_SSTCLR53               = (*SSTCLR   )["SSTCLR53" ];
        SSTCLR_SSTCLR60               = (*SSTCLR   )["SSTCLR60" ];
        SSTCLR_SSTCLR61               = (*SSTCLR   )["SSTCLR61" ];
        SSTCLR_SSTCLR62               = (*SSTCLR   )["SSTCLR62" ];
        SSTCLR_SSTCLR63               = (*SSTCLR   )["SSTCLR63" ];
        SSTCLR_SSTCLR70               = (*SSTCLR   )["SSTCLR70" ];
        SSTCLR_SSTCLR71               = (*SSTCLR   )["SSTCLR71" ];
        SSTCLR_SSTCLR72               = (*SSTCLR   )["SSTCLR72" ];
        SSTCLR_SSTCLR73               = (*SSTCLR   )["SSTCLR73" ];
        SSTCLR_SSTCLR80               = (*SSTCLR   )["SSTCLR80" ];
        SSTCLR_SSTCLR81               = (*SSTCLR   )["SSTCLR81" ];
        SSTCLR_SSTCLR82               = (*SSTCLR   )["SSTCLR82" ];
        SSTCLR_SSTCLR83               = (*SSTCLR   )["SSTCLR83" ];
        return;
    }
    if (addr == 0x000C) {
        DSTCLR_DSTCLR0                = (*DSTCLR   )["DSTCLR0"  ];
        DSTCLR_DSTCLR1                = (*DSTCLR   )["DSTCLR1"  ];
        DSTCLR_DSTCLR2                = (*DSTCLR   )["DSTCLR2"  ];
        DSTCLR_DSTCLR3                = (*DSTCLR   )["DSTCLR3"  ];
        return;
    }
    if (addr == 0x0010) {
        OVFSTR_SERROVF0               = (*OVFSTR   )["SERROVF0" ];
        OVFSTR_SERROVF1               = (*OVFSTR   )["SERROVF1" ];
        OVFSTR_SERROVF2               = (*OVFSTR   )["SERROVF2" ];
        OVFSTR_SERROVF3               = (*OVFSTR   )["SERROVF3" ];
        OVFSTR_DERROVF0               = (*OVFSTR   )["DERROVF0" ];
        OVFSTR_DERROVF1               = (*OVFSTR   )["DERROVF1" ];
        OVFSTR_DERROVF2               = (*OVFSTR   )["DERROVF2" ];
        OVFSTR_DERROVF3               = (*OVFSTR   )["DERROVF3" ];
        return;
    }
    if (addr == 0x0020) {
        S1STERSTR_SEDF10              = (*S1STERSTR)["SEDF10"   ];
        S1STERSTR_PBEF10              = (*S1STERSTR)["PBEF10"   ];
        S1STERSTR_EXSEDF10            = (*S1STERSTR)["EXSEDF10" ];
        S1STERSTR_AECSEDF10           = (*S1STERSTR)["AECSEDF10"];
        S1STERSTR_SEDF11              = (*S1STERSTR)["SEDF11"   ];
        S1STERSTR_PBEF11              = (*S1STERSTR)["PBEF11"   ];
        S1STERSTR_EXSEDF11            = (*S1STERSTR)["EXSEDF11" ];
        S1STERSTR_AECSEDF11           = (*S1STERSTR)["AECSEDF11"];
        S1STERSTR_SEDF12              = (*S1STERSTR)["SEDF12"   ];
        S1STERSTR_PBEF12              = (*S1STERSTR)["PBEF12"   ];
        S1STERSTR_EXSEDF12            = (*S1STERSTR)["EXSEDF12" ];
        S1STERSTR_AECSEDF12           = (*S1STERSTR)["AECSEDF12"];
        S1STERSTR_SEDF13              = (*S1STERSTR)["SEDF13"   ];
        S1STERSTR_PBEF13              = (*S1STERSTR)["PBEF13"   ];
        S1STERSTR_EXSEDF13            = (*S1STERSTR)["EXSEDF13" ];
        S1STERSTR_AECSEDF13           = (*S1STERSTR)["AECSEDF13"];
        return;
    }
    if (addr == 0x0024) {
        S2NDERSTR_SEDF20              = (*S2NDERSTR)["SEDF20"   ];
        S2NDERSTR_PBEF20              = (*S2NDERSTR)["PBEF20"   ];
        S2NDERSTR_EXSEDF20            = (*S2NDERSTR)["EXSEDF20" ];
        S2NDERSTR_AECSEDF20           = (*S2NDERSTR)["AECSEDF20"];
        S2NDERSTR_SEDF21              = (*S2NDERSTR)["SEDF21"   ];
        S2NDERSTR_PBEF21              = (*S2NDERSTR)["PBEF21"   ];
        S2NDERSTR_EXSEDF21            = (*S2NDERSTR)["EXSEDF21" ];
        S2NDERSTR_AECSEDF21           = (*S2NDERSTR)["AECSEDF21"];
        S2NDERSTR_SEDF22              = (*S2NDERSTR)["SEDF22"   ];
        S2NDERSTR_PBEF22              = (*S2NDERSTR)["PBEF22"   ];
        S2NDERSTR_EXSEDF22            = (*S2NDERSTR)["EXSEDF22" ];
        S2NDERSTR_AECSEDF22           = (*S2NDERSTR)["AECSEDF22"];
        S2NDERSTR_SEDF23              = (*S2NDERSTR)["SEDF23"   ];
        S2NDERSTR_PBEF23              = (*S2NDERSTR)["PBEF23"   ];
        S2NDERSTR_EXSEDF23            = (*S2NDERSTR)["EXSEDF23" ];
        S2NDERSTR_AECSEDF23           = (*S2NDERSTR)["AECSEDF23"];
        return;
    }
    if (addr == 0x0028) {
        S3RDERSTR_SEDF30              = (*S3RDERSTR)["SEDF30"   ];
        S3RDERSTR_PBEF30              = (*S3RDERSTR)["PBEF30"   ];
        S3RDERSTR_EXSEDF30            = (*S3RDERSTR)["EXSEDF30" ];
        S3RDERSTR_AECSEDF30           = (*S3RDERSTR)["AECSEDF30"];
        S3RDERSTR_SEDF31              = (*S3RDERSTR)["SEDF31"   ];
        S3RDERSTR_PBEF31              = (*S3RDERSTR)["PBEF31"   ];
        S3RDERSTR_EXSEDF31            = (*S3RDERSTR)["EXSEDF31" ];
        S3RDERSTR_AECSEDF31           = (*S3RDERSTR)["AECSEDF31"];
        S3RDERSTR_SEDF32              = (*S3RDERSTR)["SEDF32"   ];
        S3RDERSTR_PBEF32              = (*S3RDERSTR)["PBEF32"   ];
        S3RDERSTR_EXSEDF32            = (*S3RDERSTR)["EXSEDF32" ];
        S3RDERSTR_AECSEDF32           = (*S3RDERSTR)["AECSEDF32"];
        S3RDERSTR_SEDF33              = (*S3RDERSTR)["SEDF33"   ];
        S3RDERSTR_PBEF33              = (*S3RDERSTR)["PBEF33"   ];
        S3RDERSTR_EXSEDF33            = (*S3RDERSTR)["EXSEDF33" ];
        S3RDERSTR_AECSEDF33           = (*S3RDERSTR)["AECSEDF33"];
        return;
    }
    if (addr == 0x002C) {
        S4THERSTR_SEDF40              = (*S4THERSTR)["SEDF40"   ];
        S4THERSTR_PBEF40              = (*S4THERSTR)["PBEF40"   ];
        S4THERSTR_EXSEDF40            = (*S4THERSTR)["EXSEDF40" ];
        S4THERSTR_AECSEDF40           = (*S4THERSTR)["AECSEDF40"];
        S4THERSTR_SEDF41              = (*S4THERSTR)["SEDF41"   ];
        S4THERSTR_PBEF41              = (*S4THERSTR)["PBEF41"   ];
        S4THERSTR_EXSEDF41            = (*S4THERSTR)["EXSEDF41" ];
        S4THERSTR_AECSEDF41           = (*S4THERSTR)["AECSEDF41"];
        S4THERSTR_SEDF42              = (*S4THERSTR)["SEDF42"   ];
        S4THERSTR_PBEF42              = (*S4THERSTR)["PBEF42"   ];
        S4THERSTR_EXSEDF42            = (*S4THERSTR)["EXSEDF42" ];
        S4THERSTR_AECSEDF42           = (*S4THERSTR)["AECSEDF42"];
        S4THERSTR_SEDF43              = (*S4THERSTR)["SEDF43"   ];
        S4THERSTR_PBEF43              = (*S4THERSTR)["PBEF43"   ];
        S4THERSTR_EXSEDF43            = (*S4THERSTR)["EXSEDF43" ];
        S4THERSTR_AECSEDF43           = (*S4THERSTR)["AECSEDF43"];
        return;
    }
    if (addr == 0x0030) {
        S5THERSTR_SEDF50              = (*S5THERSTR)["SEDF50"   ];
        S5THERSTR_PBEF50              = (*S5THERSTR)["PBEF50"   ];
        S5THERSTR_EXSEDF50            = (*S5THERSTR)["EXSEDF50" ];
        S5THERSTR_AECSEDF50           = (*S5THERSTR)["AECSEDF50"];
        S5THERSTR_SEDF51              = (*S5THERSTR)["SEDF51"   ];
        S5THERSTR_PBEF51              = (*S5THERSTR)["PBEF51"   ];
        S5THERSTR_EXSEDF51            = (*S5THERSTR)["EXSEDF51" ];
        S5THERSTR_AECSEDF51           = (*S5THERSTR)["AECSEDF51"];
        S5THERSTR_SEDF52              = (*S5THERSTR)["SEDF52"   ];
        S5THERSTR_PBEF52              = (*S5THERSTR)["PBEF52"   ];
        S5THERSTR_EXSEDF52            = (*S5THERSTR)["EXSEDF52" ];
        S5THERSTR_AECSEDF52           = (*S5THERSTR)["AECSEDF52"];
        S5THERSTR_SEDF53              = (*S5THERSTR)["SEDF53"   ];
        S5THERSTR_PBEF53              = (*S5THERSTR)["PBEF53"   ];
        S5THERSTR_EXSEDF53            = (*S5THERSTR)["EXSEDF53" ];
        S5THERSTR_AECSEDF53           = (*S5THERSTR)["AECSEDF53"];
        return;
    }
    if (addr == 0x0034) {
        S6THERSTR_SEDF60              = (*S6THERSTR)["SEDF60"   ];
        S6THERSTR_PBEF60              = (*S6THERSTR)["PBEF60"   ];
        S6THERSTR_EXSEDF60            = (*S6THERSTR)["EXSEDF60" ];
        S6THERSTR_AECSEDF60           = (*S6THERSTR)["AECSEDF60"];
        S6THERSTR_SEDF61              = (*S6THERSTR)["SEDF61"   ];
        S6THERSTR_PBEF61              = (*S6THERSTR)["PBEF61"   ];
        S6THERSTR_EXSEDF61            = (*S6THERSTR)["EXSEDF61" ];
        S6THERSTR_AECSEDF61           = (*S6THERSTR)["AECSEDF61"];
        S6THERSTR_SEDF62              = (*S6THERSTR)["SEDF62"   ];
        S6THERSTR_PBEF62              = (*S6THERSTR)["PBEF62"   ];
        S6THERSTR_EXSEDF62            = (*S6THERSTR)["EXSEDF62" ];
        S6THERSTR_AECSEDF62           = (*S6THERSTR)["AECSEDF62"];
        S6THERSTR_SEDF63              = (*S6THERSTR)["SEDF63"   ];
        S6THERSTR_PBEF63              = (*S6THERSTR)["PBEF63"   ];
        S6THERSTR_EXSEDF63            = (*S6THERSTR)["EXSEDF63" ];
        S6THERSTR_AECSEDF63           = (*S6THERSTR)["AECSEDF63"];
        return;
    }
    if (addr == 0x0038) {
        S7THERSTR_SEDF70              = (*S7THERSTR)["SEDF70"   ];
        S7THERSTR_PBEF70              = (*S7THERSTR)["PBEF70"   ];
        S7THERSTR_EXSEDF70            = (*S7THERSTR)["EXSEDF70" ];
        S7THERSTR_AECSEDF70           = (*S7THERSTR)["AECSEDF70"];
        S7THERSTR_SEDF71              = (*S7THERSTR)["SEDF71"   ];
        S7THERSTR_PBEF71              = (*S7THERSTR)["PBEF71"   ];
        S7THERSTR_EXSEDF71            = (*S7THERSTR)["EXSEDF71" ];
        S7THERSTR_AECSEDF71           = (*S7THERSTR)["AECSEDF71"];
        S7THERSTR_SEDF72              = (*S7THERSTR)["SEDF72"   ];
        S7THERSTR_PBEF72              = (*S7THERSTR)["PBEF72"   ];
        S7THERSTR_EXSEDF72            = (*S7THERSTR)["EXSEDF72" ];
        S7THERSTR_AECSEDF72           = (*S7THERSTR)["AECSEDF72"];
        S7THERSTR_SEDF73              = (*S7THERSTR)["SEDF73"   ];
        S7THERSTR_PBEF73              = (*S7THERSTR)["PBEF73"   ];
        S7THERSTR_EXSEDF73            = (*S7THERSTR)["EXSEDF73" ];
        S7THERSTR_AECSEDF73           = (*S7THERSTR)["AECSEDF73"];
        return;
    }
    if (addr == 0x003C) {
        S8THERSTR_SEDF80              = (*S8THERSTR)["SEDF80"   ];
        S8THERSTR_PBEF80              = (*S8THERSTR)["PBEF80"   ];
        S8THERSTR_EXSEDF80            = (*S8THERSTR)["EXSEDF80" ];
        S8THERSTR_AECSEDF80           = (*S8THERSTR)["AECSEDF80"];
        S8THERSTR_SEDF81              = (*S8THERSTR)["SEDF81"   ];
        S8THERSTR_PBEF81              = (*S8THERSTR)["PBEF81"   ];
        S8THERSTR_EXSEDF81            = (*S8THERSTR)["EXSEDF81" ];
        S8THERSTR_AECSEDF81           = (*S8THERSTR)["AECSEDF81"];
        S8THERSTR_SEDF82              = (*S8THERSTR)["SEDF82"   ];
        S8THERSTR_PBEF82              = (*S8THERSTR)["PBEF82"   ];
        S8THERSTR_EXSEDF82            = (*S8THERSTR)["EXSEDF82" ];
        S8THERSTR_AECSEDF82           = (*S8THERSTR)["AECSEDF82"];
        S8THERSTR_SEDF83              = (*S8THERSTR)["SEDF83"   ];
        S8THERSTR_PBEF83              = (*S8THERSTR)["PBEF83"   ];
        S8THERSTR_EXSEDF83            = (*S8THERSTR)["EXSEDF83" ];
        S8THERSTR_AECSEDF83           = (*S8THERSTR)["AECSEDF83"];
        return;
    }
    if (addr == 0x0040) {
        SEDERSTR_SEDF10               = (*SEDERSTR )["SEDF10"   ];
        SEDERSTR_SEDF11               = (*SEDERSTR )["SEDF11"   ];
        SEDERSTR_SEDF12               = (*SEDERSTR )["SEDF12"   ];
        SEDERSTR_SEDF13               = (*SEDERSTR )["SEDF13"   ];
        SEDERSTR_SEDF20               = (*SEDERSTR )["SEDF20"   ];
        SEDERSTR_SEDF21               = (*SEDERSTR )["SEDF21"   ];
        SEDERSTR_SEDF22               = (*SEDERSTR )["SEDF22"   ];
        SEDERSTR_SEDF23               = (*SEDERSTR )["SEDF23"   ];
        SEDERSTR_SEDF30               = (*SEDERSTR )["SEDF30"   ];
        SEDERSTR_SEDF31               = (*SEDERSTR )["SEDF31"   ];
        SEDERSTR_SEDF32               = (*SEDERSTR )["SEDF32"   ];
        SEDERSTR_SEDF33               = (*SEDERSTR )["SEDF33"   ];
        SEDERSTR_SEDF40               = (*SEDERSTR )["SEDF40"   ];
        SEDERSTR_SEDF41               = (*SEDERSTR )["SEDF41"   ];
        SEDERSTR_SEDF42               = (*SEDERSTR )["SEDF42"   ];
        SEDERSTR_SEDF43               = (*SEDERSTR )["SEDF43"   ];
        SEDERSTR_SEDF50               = (*SEDERSTR )["SEDF50"   ];
        SEDERSTR_SEDF51               = (*SEDERSTR )["SEDF51"   ];
        SEDERSTR_SEDF52               = (*SEDERSTR )["SEDF52"   ];
        SEDERSTR_SEDF53               = (*SEDERSTR )["SEDF53"   ];
        SEDERSTR_SEDF60               = (*SEDERSTR )["SEDF60"   ];
        SEDERSTR_SEDF61               = (*SEDERSTR )["SEDF61"   ];
        SEDERSTR_SEDF62               = (*SEDERSTR )["SEDF62"   ];
        SEDERSTR_SEDF63               = (*SEDERSTR )["SEDF63"   ];
        SEDERSTR_SEDF70               = (*SEDERSTR )["SEDF70"   ];
        SEDERSTR_SEDF71               = (*SEDERSTR )["SEDF71"   ];
        SEDERSTR_SEDF72               = (*SEDERSTR )["SEDF72"   ];
        SEDERSTR_SEDF73               = (*SEDERSTR )["SEDF73"   ];
        SEDERSTR_SEDF80               = (*SEDERSTR )["SEDF80"   ];
        SEDERSTR_SEDF81               = (*SEDERSTR )["SEDF81"   ];
        SEDERSTR_SEDF82               = (*SEDERSTR )["SEDF82"   ];
        SEDERSTR_SEDF83               = (*SEDERSTR )["SEDF83"   ];
        return;
    }
    if (addr == 0x0050) {
        D1STERSTR_DEDF0               = (*D1STERSTR)["DEDF0"    ];
        D1STERSTR_APEF0               = (*D1STERSTR)["APEF0"    ];
        D1STERSTR_EXDEDF0             = (*D1STERSTR)["EXDEDF0"  ];
        D1STERSTR_AECDEDF0            = (*D1STERSTR)["AECDEDF0" ];
        D1STERSTR_DEDF1               = (*D1STERSTR)["DEDF1"    ];
        D1STERSTR_APEF1               = (*D1STERSTR)["APEF1"    ];
        D1STERSTR_EXDEDF1             = (*D1STERSTR)["EXDEDF1"  ];
        D1STERSTR_AECDEDF1            = (*D1STERSTR)["AECDEDF1" ];
        D1STERSTR_DEDF2               = (*D1STERSTR)["DEDF2"    ];
        D1STERSTR_APEF2               = (*D1STERSTR)["APEF2"    ];
        D1STERSTR_EXDEDF2             = (*D1STERSTR)["EXDEDF2"  ];
        D1STERSTR_AECDEDF2            = (*D1STERSTR)["AECDEDF2" ];
        D1STERSTR_DEDF3               = (*D1STERSTR)["DEDF3"    ];
        D1STERSTR_APEF3               = (*D1STERSTR)["APEF3"    ];
        D1STERSTR_EXDEDF3             = (*D1STERSTR)["EXDEDF3"  ];
        D1STERSTR_AECDEDF3            = (*D1STERSTR)["AECDEDF3" ];
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(4*3)) && ((addr-0x0060)%4 == 0)) {
        uint i = (addr - 0x0060)/4;
        S1STEADR_SEADR1              [i] = (*(S1STEADR [i]))["SEADR1"   ];
        return;
    }
    if ((0x0070 <= addr) && (addr <= (0x0070)+(4*3)) && ((addr-0x0070)%4 == 0)) {
        uint i = (addr - 0x0070)/4;
        S2NDEADR_SEADR2              [i] = (*(S2NDEADR [i]))["SEADR2"   ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        S3RDEADR_SEADR3              [i] = (*(S3RDEADR [i]))["SEADR3"   ];
        return;
    }
    if ((0x0090 <= addr) && (addr <= (0x0090)+(4*3)) && ((addr-0x0090)%4 == 0)) {
        uint i = (addr - 0x0090)/4;
        S4THEADR_SEADR4              [i] = (*(S4THEADR [i]))["SEADR4"   ];
        return;
    }
    if ((0x00A0 <= addr) && (addr <= (0x00A0)+(4*3)) && ((addr-0x00A0)%4 == 0)) {
        uint i = (addr - 0x00A0)/4;
        S5THEADR_SEADR5              [i] = (*(S5THEADR [i]))["SEADR5"   ];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(4*3)) && ((addr-0x00B0)%4 == 0)) {
        uint i = (addr - 0x00B0)/4;
        S6THEADR_SEADR6              [i] = (*(S6THEADR [i]))["SEADR6"   ];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(4*3)) && ((addr-0x00C0)%4 == 0)) {
        uint i = (addr - 0x00C0)/4;
        S7THEADR_SEADR7              [i] = (*(S7THEADR [i]))["SEADR7"   ];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(4*3)) && ((addr-0x00D0)%4 == 0)) {
        uint i = (addr - 0x00D0)/4;
        S8THEADR_SEADR8              [i] = (*(S8THEADR [i]))["SEADR8"   ];
        return;
    }
    if ((0x00E0 <= addr) && (addr <= (0x00E0)+(4*3)) && ((addr-0x00E0)%4 == 0)) {
        uint i = (addr - 0x00E0)/4;
        D1STEADR_DEADR               [i] = (*(D1STEADR [i]))["DEADR"    ];
        return;
    }
    if (addr == 0x00F0) {
        STSTCTL_ECCTST                = (*STSTCTL  )["ECCTST"   ];
        STSTCTL_PROT0                 = (*STSTCTL  )["PROT0"    ];
        STSTCTL_PROT1                 = (*STSTCTL  )["PROT1"    ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cecccom_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ECCCTL   )["ECCDIS"   ] = ECCCTL_ECCDIS;
        (*ECCCTL   )["SECDIS"   ] = ECCCTL_SECDIS;
        (*ECCCTL   )["AECCDIS"  ] = ECCCTL_AECCDIS;
        (*ECCCTL   )["ASECDIS"  ] = ECCCTL_ASECDIS;
        (*ECCCTL   )["PROT0"    ] = ECCCTL_PROT0;
        (*ECCCTL   )["PROT1"    ] = ECCCTL_PROT1;
        return;
    }
    if (addr == 0x0004) {
        (*ERRINT   )["SEDIE"    ] = ERRINT_SEDIE;
        (*ERRINT   )["DEDIE"    ] = ERRINT_DEDIE;
        (*ERRINT   )["APEIE"    ] = ERRINT_APEIE;
        (*ERRINT   )["PBEIE"    ] = ERRINT_PBEIE;
        (*ERRINT   )["ASEDIE"   ] = ERRINT_ASEDIE;
        (*ERRINT   )["ADEDIE"   ] = ERRINT_ADEDIE;
        (*ERRINT   )["SEOVFIE"  ] = ERRINT_SEOVFIE;
        return;
    }
    if (addr == 0x0008) {
        (*SSTCLR   )["SSTCLR10" ] = SSTCLR_SSTCLR10;
        (*SSTCLR   )["SSTCLR11" ] = SSTCLR_SSTCLR11;
        (*SSTCLR   )["SSTCLR12" ] = SSTCLR_SSTCLR12;
        (*SSTCLR   )["SSTCLR13" ] = SSTCLR_SSTCLR13;
        (*SSTCLR   )["SSTCLR20" ] = SSTCLR_SSTCLR20;
        (*SSTCLR   )["SSTCLR21" ] = SSTCLR_SSTCLR21;
        (*SSTCLR   )["SSTCLR22" ] = SSTCLR_SSTCLR22;
        (*SSTCLR   )["SSTCLR23" ] = SSTCLR_SSTCLR23;
        (*SSTCLR   )["SSTCLR30" ] = SSTCLR_SSTCLR30;
        (*SSTCLR   )["SSTCLR31" ] = SSTCLR_SSTCLR31;
        (*SSTCLR   )["SSTCLR32" ] = SSTCLR_SSTCLR32;
        (*SSTCLR   )["SSTCLR33" ] = SSTCLR_SSTCLR33;
        (*SSTCLR   )["SSTCLR40" ] = SSTCLR_SSTCLR40;
        (*SSTCLR   )["SSTCLR41" ] = SSTCLR_SSTCLR41;
        (*SSTCLR   )["SSTCLR42" ] = SSTCLR_SSTCLR42;
        (*SSTCLR   )["SSTCLR43" ] = SSTCLR_SSTCLR43;
        (*SSTCLR   )["SSTCLR50" ] = SSTCLR_SSTCLR50;
        (*SSTCLR   )["SSTCLR51" ] = SSTCLR_SSTCLR51;
        (*SSTCLR   )["SSTCLR52" ] = SSTCLR_SSTCLR52;
        (*SSTCLR   )["SSTCLR53" ] = SSTCLR_SSTCLR53;
        (*SSTCLR   )["SSTCLR60" ] = SSTCLR_SSTCLR60;
        (*SSTCLR   )["SSTCLR61" ] = SSTCLR_SSTCLR61;
        (*SSTCLR   )["SSTCLR62" ] = SSTCLR_SSTCLR62;
        (*SSTCLR   )["SSTCLR63" ] = SSTCLR_SSTCLR63;
        (*SSTCLR   )["SSTCLR70" ] = SSTCLR_SSTCLR70;
        (*SSTCLR   )["SSTCLR71" ] = SSTCLR_SSTCLR71;
        (*SSTCLR   )["SSTCLR72" ] = SSTCLR_SSTCLR72;
        (*SSTCLR   )["SSTCLR73" ] = SSTCLR_SSTCLR73;
        (*SSTCLR   )["SSTCLR80" ] = SSTCLR_SSTCLR80;
        (*SSTCLR   )["SSTCLR81" ] = SSTCLR_SSTCLR81;
        (*SSTCLR   )["SSTCLR82" ] = SSTCLR_SSTCLR82;
        (*SSTCLR   )["SSTCLR83" ] = SSTCLR_SSTCLR83;
        return;
    }
    if (addr == 0x000C) {
        (*DSTCLR   )["DSTCLR0"  ] = DSTCLR_DSTCLR0;
        (*DSTCLR   )["DSTCLR1"  ] = DSTCLR_DSTCLR1;
        (*DSTCLR   )["DSTCLR2"  ] = DSTCLR_DSTCLR2;
        (*DSTCLR   )["DSTCLR3"  ] = DSTCLR_DSTCLR3;
        return;
    }
    if (addr == 0x0010) {
        (*OVFSTR   )["SERROVF0" ] = OVFSTR_SERROVF0;
        (*OVFSTR   )["SERROVF1" ] = OVFSTR_SERROVF1;
        (*OVFSTR   )["SERROVF2" ] = OVFSTR_SERROVF2;
        (*OVFSTR   )["SERROVF3" ] = OVFSTR_SERROVF3;
        (*OVFSTR   )["DERROVF0" ] = OVFSTR_DERROVF0;
        (*OVFSTR   )["DERROVF1" ] = OVFSTR_DERROVF1;
        (*OVFSTR   )["DERROVF2" ] = OVFSTR_DERROVF2;
        (*OVFSTR   )["DERROVF3" ] = OVFSTR_DERROVF3;
        return;
    }
    if (addr == 0x0020) {
        (*S1STERSTR)["SEDF10"   ] = S1STERSTR_SEDF10;
        (*S1STERSTR)["PBEF10"   ] = S1STERSTR_PBEF10;
        (*S1STERSTR)["EXSEDF10" ] = S1STERSTR_EXSEDF10;
        (*S1STERSTR)["AECSEDF10"] = S1STERSTR_AECSEDF10;
        (*S1STERSTR)["SEDF11"   ] = S1STERSTR_SEDF11;
        (*S1STERSTR)["PBEF11"   ] = S1STERSTR_PBEF11;
        (*S1STERSTR)["EXSEDF11" ] = S1STERSTR_EXSEDF11;
        (*S1STERSTR)["AECSEDF11"] = S1STERSTR_AECSEDF11;
        (*S1STERSTR)["SEDF12"   ] = S1STERSTR_SEDF12;
        (*S1STERSTR)["PBEF12"   ] = S1STERSTR_PBEF12;
        (*S1STERSTR)["EXSEDF12" ] = S1STERSTR_EXSEDF12;
        (*S1STERSTR)["AECSEDF12"] = S1STERSTR_AECSEDF12;
        (*S1STERSTR)["SEDF13"   ] = S1STERSTR_SEDF13;
        (*S1STERSTR)["PBEF13"   ] = S1STERSTR_PBEF13;
        (*S1STERSTR)["EXSEDF13" ] = S1STERSTR_EXSEDF13;
        (*S1STERSTR)["AECSEDF13"] = S1STERSTR_AECSEDF13;
        return;
    }
    if (addr == 0x0024) {
        (*S2NDERSTR)["SEDF20"   ] = S2NDERSTR_SEDF20;
        (*S2NDERSTR)["PBEF20"   ] = S2NDERSTR_PBEF20;
        (*S2NDERSTR)["EXSEDF20" ] = S2NDERSTR_EXSEDF20;
        (*S2NDERSTR)["AECSEDF20"] = S2NDERSTR_AECSEDF20;
        (*S2NDERSTR)["SEDF21"   ] = S2NDERSTR_SEDF21;
        (*S2NDERSTR)["PBEF21"   ] = S2NDERSTR_PBEF21;
        (*S2NDERSTR)["EXSEDF21" ] = S2NDERSTR_EXSEDF21;
        (*S2NDERSTR)["AECSEDF21"] = S2NDERSTR_AECSEDF21;
        (*S2NDERSTR)["SEDF22"   ] = S2NDERSTR_SEDF22;
        (*S2NDERSTR)["PBEF22"   ] = S2NDERSTR_PBEF22;
        (*S2NDERSTR)["EXSEDF22" ] = S2NDERSTR_EXSEDF22;
        (*S2NDERSTR)["AECSEDF22"] = S2NDERSTR_AECSEDF22;
        (*S2NDERSTR)["SEDF23"   ] = S2NDERSTR_SEDF23;
        (*S2NDERSTR)["PBEF23"   ] = S2NDERSTR_PBEF23;
        (*S2NDERSTR)["EXSEDF23" ] = S2NDERSTR_EXSEDF23;
        (*S2NDERSTR)["AECSEDF23"] = S2NDERSTR_AECSEDF23;
        return;
    }
    if (addr == 0x0028) {
        (*S3RDERSTR)["SEDF30"   ] = S3RDERSTR_SEDF30;
        (*S3RDERSTR)["PBEF30"   ] = S3RDERSTR_PBEF30;
        (*S3RDERSTR)["EXSEDF30" ] = S3RDERSTR_EXSEDF30;
        (*S3RDERSTR)["AECSEDF30"] = S3RDERSTR_AECSEDF30;
        (*S3RDERSTR)["SEDF31"   ] = S3RDERSTR_SEDF31;
        (*S3RDERSTR)["PBEF31"   ] = S3RDERSTR_PBEF31;
        (*S3RDERSTR)["EXSEDF31" ] = S3RDERSTR_EXSEDF31;
        (*S3RDERSTR)["AECSEDF31"] = S3RDERSTR_AECSEDF31;
        (*S3RDERSTR)["SEDF32"   ] = S3RDERSTR_SEDF32;
        (*S3RDERSTR)["PBEF32"   ] = S3RDERSTR_PBEF32;
        (*S3RDERSTR)["EXSEDF32" ] = S3RDERSTR_EXSEDF32;
        (*S3RDERSTR)["AECSEDF32"] = S3RDERSTR_AECSEDF32;
        (*S3RDERSTR)["SEDF33"   ] = S3RDERSTR_SEDF33;
        (*S3RDERSTR)["PBEF33"   ] = S3RDERSTR_PBEF33;
        (*S3RDERSTR)["EXSEDF33" ] = S3RDERSTR_EXSEDF33;
        (*S3RDERSTR)["AECSEDF33"] = S3RDERSTR_AECSEDF33;
        return;
    }
    if (addr == 0x002C) {
        (*S4THERSTR)["SEDF40"   ] = S4THERSTR_SEDF40;
        (*S4THERSTR)["PBEF40"   ] = S4THERSTR_PBEF40;
        (*S4THERSTR)["EXSEDF40" ] = S4THERSTR_EXSEDF40;
        (*S4THERSTR)["AECSEDF40"] = S4THERSTR_AECSEDF40;
        (*S4THERSTR)["SEDF41"   ] = S4THERSTR_SEDF41;
        (*S4THERSTR)["PBEF41"   ] = S4THERSTR_PBEF41;
        (*S4THERSTR)["EXSEDF41" ] = S4THERSTR_EXSEDF41;
        (*S4THERSTR)["AECSEDF41"] = S4THERSTR_AECSEDF41;
        (*S4THERSTR)["SEDF42"   ] = S4THERSTR_SEDF42;
        (*S4THERSTR)["PBEF42"   ] = S4THERSTR_PBEF42;
        (*S4THERSTR)["EXSEDF42" ] = S4THERSTR_EXSEDF42;
        (*S4THERSTR)["AECSEDF42"] = S4THERSTR_AECSEDF42;
        (*S4THERSTR)["SEDF43"   ] = S4THERSTR_SEDF43;
        (*S4THERSTR)["PBEF43"   ] = S4THERSTR_PBEF43;
        (*S4THERSTR)["EXSEDF43" ] = S4THERSTR_EXSEDF43;
        (*S4THERSTR)["AECSEDF43"] = S4THERSTR_AECSEDF43;
        return;
    }
    if (addr == 0x0030) {
        (*S5THERSTR)["SEDF50"   ] = S5THERSTR_SEDF50;
        (*S5THERSTR)["PBEF50"   ] = S5THERSTR_PBEF50;
        (*S5THERSTR)["EXSEDF50" ] = S5THERSTR_EXSEDF50;
        (*S5THERSTR)["AECSEDF50"] = S5THERSTR_AECSEDF50;
        (*S5THERSTR)["SEDF51"   ] = S5THERSTR_SEDF51;
        (*S5THERSTR)["PBEF51"   ] = S5THERSTR_PBEF51;
        (*S5THERSTR)["EXSEDF51" ] = S5THERSTR_EXSEDF51;
        (*S5THERSTR)["AECSEDF51"] = S5THERSTR_AECSEDF51;
        (*S5THERSTR)["SEDF52"   ] = S5THERSTR_SEDF52;
        (*S5THERSTR)["PBEF52"   ] = S5THERSTR_PBEF52;
        (*S5THERSTR)["EXSEDF52" ] = S5THERSTR_EXSEDF52;
        (*S5THERSTR)["AECSEDF52"] = S5THERSTR_AECSEDF52;
        (*S5THERSTR)["SEDF53"   ] = S5THERSTR_SEDF53;
        (*S5THERSTR)["PBEF53"   ] = S5THERSTR_PBEF53;
        (*S5THERSTR)["EXSEDF53" ] = S5THERSTR_EXSEDF53;
        (*S5THERSTR)["AECSEDF53"] = S5THERSTR_AECSEDF53;
        return;
    }
    if (addr == 0x0034) {
        (*S6THERSTR)["SEDF60"   ] = S6THERSTR_SEDF60;
        (*S6THERSTR)["PBEF60"   ] = S6THERSTR_PBEF60;
        (*S6THERSTR)["EXSEDF60" ] = S6THERSTR_EXSEDF60;
        (*S6THERSTR)["AECSEDF60"] = S6THERSTR_AECSEDF60;
        (*S6THERSTR)["SEDF61"   ] = S6THERSTR_SEDF61;
        (*S6THERSTR)["PBEF61"   ] = S6THERSTR_PBEF61;
        (*S6THERSTR)["EXSEDF61" ] = S6THERSTR_EXSEDF61;
        (*S6THERSTR)["AECSEDF61"] = S6THERSTR_AECSEDF61;
        (*S6THERSTR)["SEDF62"   ] = S6THERSTR_SEDF62;
        (*S6THERSTR)["PBEF62"   ] = S6THERSTR_PBEF62;
        (*S6THERSTR)["EXSEDF62" ] = S6THERSTR_EXSEDF62;
        (*S6THERSTR)["AECSEDF62"] = S6THERSTR_AECSEDF62;
        (*S6THERSTR)["SEDF63"   ] = S6THERSTR_SEDF63;
        (*S6THERSTR)["PBEF63"   ] = S6THERSTR_PBEF63;
        (*S6THERSTR)["EXSEDF63" ] = S6THERSTR_EXSEDF63;
        (*S6THERSTR)["AECSEDF63"] = S6THERSTR_AECSEDF63;
        return;
    }
    if (addr == 0x0038) {
        (*S7THERSTR)["SEDF70"   ] = S7THERSTR_SEDF70;
        (*S7THERSTR)["PBEF70"   ] = S7THERSTR_PBEF70;
        (*S7THERSTR)["EXSEDF70" ] = S7THERSTR_EXSEDF70;
        (*S7THERSTR)["AECSEDF70"] = S7THERSTR_AECSEDF70;
        (*S7THERSTR)["SEDF71"   ] = S7THERSTR_SEDF71;
        (*S7THERSTR)["PBEF71"   ] = S7THERSTR_PBEF71;
        (*S7THERSTR)["EXSEDF71" ] = S7THERSTR_EXSEDF71;
        (*S7THERSTR)["AECSEDF71"] = S7THERSTR_AECSEDF71;
        (*S7THERSTR)["SEDF72"   ] = S7THERSTR_SEDF72;
        (*S7THERSTR)["PBEF72"   ] = S7THERSTR_PBEF72;
        (*S7THERSTR)["EXSEDF72" ] = S7THERSTR_EXSEDF72;
        (*S7THERSTR)["AECSEDF72"] = S7THERSTR_AECSEDF72;
        (*S7THERSTR)["SEDF73"   ] = S7THERSTR_SEDF73;
        (*S7THERSTR)["PBEF73"   ] = S7THERSTR_PBEF73;
        (*S7THERSTR)["EXSEDF73" ] = S7THERSTR_EXSEDF73;
        (*S7THERSTR)["AECSEDF73"] = S7THERSTR_AECSEDF73;
        return;
    }
    if (addr == 0x003C) {
        (*S8THERSTR)["SEDF80"   ] = S8THERSTR_SEDF80;
        (*S8THERSTR)["PBEF80"   ] = S8THERSTR_PBEF80;
        (*S8THERSTR)["EXSEDF80" ] = S8THERSTR_EXSEDF80;
        (*S8THERSTR)["AECSEDF80"] = S8THERSTR_AECSEDF80;
        (*S8THERSTR)["SEDF81"   ] = S8THERSTR_SEDF81;
        (*S8THERSTR)["PBEF81"   ] = S8THERSTR_PBEF81;
        (*S8THERSTR)["EXSEDF81" ] = S8THERSTR_EXSEDF81;
        (*S8THERSTR)["AECSEDF81"] = S8THERSTR_AECSEDF81;
        (*S8THERSTR)["SEDF82"   ] = S8THERSTR_SEDF82;
        (*S8THERSTR)["PBEF82"   ] = S8THERSTR_PBEF82;
        (*S8THERSTR)["EXSEDF82" ] = S8THERSTR_EXSEDF82;
        (*S8THERSTR)["AECSEDF82"] = S8THERSTR_AECSEDF82;
        (*S8THERSTR)["SEDF83"   ] = S8THERSTR_SEDF83;
        (*S8THERSTR)["PBEF83"   ] = S8THERSTR_PBEF83;
        (*S8THERSTR)["EXSEDF83" ] = S8THERSTR_EXSEDF83;
        (*S8THERSTR)["AECSEDF83"] = S8THERSTR_AECSEDF83;
        return;
    }
    if (addr == 0x0040) {
        (*SEDERSTR )["SEDF10"   ] = SEDERSTR_SEDF10;
        (*SEDERSTR )["SEDF11"   ] = SEDERSTR_SEDF11;
        (*SEDERSTR )["SEDF12"   ] = SEDERSTR_SEDF12;
        (*SEDERSTR )["SEDF13"   ] = SEDERSTR_SEDF13;
        (*SEDERSTR )["SEDF20"   ] = SEDERSTR_SEDF20;
        (*SEDERSTR )["SEDF21"   ] = SEDERSTR_SEDF21;
        (*SEDERSTR )["SEDF22"   ] = SEDERSTR_SEDF22;
        (*SEDERSTR )["SEDF23"   ] = SEDERSTR_SEDF23;
        (*SEDERSTR )["SEDF30"   ] = SEDERSTR_SEDF30;
        (*SEDERSTR )["SEDF31"   ] = SEDERSTR_SEDF31;
        (*SEDERSTR )["SEDF32"   ] = SEDERSTR_SEDF32;
        (*SEDERSTR )["SEDF33"   ] = SEDERSTR_SEDF33;
        (*SEDERSTR )["SEDF40"   ] = SEDERSTR_SEDF40;
        (*SEDERSTR )["SEDF41"   ] = SEDERSTR_SEDF41;
        (*SEDERSTR )["SEDF42"   ] = SEDERSTR_SEDF42;
        (*SEDERSTR )["SEDF43"   ] = SEDERSTR_SEDF43;
        (*SEDERSTR )["SEDF50"   ] = SEDERSTR_SEDF50;
        (*SEDERSTR )["SEDF51"   ] = SEDERSTR_SEDF51;
        (*SEDERSTR )["SEDF52"   ] = SEDERSTR_SEDF52;
        (*SEDERSTR )["SEDF53"   ] = SEDERSTR_SEDF53;
        (*SEDERSTR )["SEDF60"   ] = SEDERSTR_SEDF60;
        (*SEDERSTR )["SEDF61"   ] = SEDERSTR_SEDF61;
        (*SEDERSTR )["SEDF62"   ] = SEDERSTR_SEDF62;
        (*SEDERSTR )["SEDF63"   ] = SEDERSTR_SEDF63;
        (*SEDERSTR )["SEDF70"   ] = SEDERSTR_SEDF70;
        (*SEDERSTR )["SEDF71"   ] = SEDERSTR_SEDF71;
        (*SEDERSTR )["SEDF72"   ] = SEDERSTR_SEDF72;
        (*SEDERSTR )["SEDF73"   ] = SEDERSTR_SEDF73;
        (*SEDERSTR )["SEDF80"   ] = SEDERSTR_SEDF80;
        (*SEDERSTR )["SEDF81"   ] = SEDERSTR_SEDF81;
        (*SEDERSTR )["SEDF82"   ] = SEDERSTR_SEDF82;
        (*SEDERSTR )["SEDF83"   ] = SEDERSTR_SEDF83;
        return;
    }
    if (addr == 0x0050) {
        (*D1STERSTR)["DEDF0"    ] = D1STERSTR_DEDF0;
        (*D1STERSTR)["APEF0"    ] = D1STERSTR_APEF0;
        (*D1STERSTR)["EXDEDF0"  ] = D1STERSTR_EXDEDF0;
        (*D1STERSTR)["AECDEDF0" ] = D1STERSTR_AECDEDF0;
        (*D1STERSTR)["DEDF1"    ] = D1STERSTR_DEDF1;
        (*D1STERSTR)["APEF1"    ] = D1STERSTR_APEF1;
        (*D1STERSTR)["EXDEDF1"  ] = D1STERSTR_EXDEDF1;
        (*D1STERSTR)["AECDEDF1" ] = D1STERSTR_AECDEDF1;
        (*D1STERSTR)["DEDF2"    ] = D1STERSTR_DEDF2;
        (*D1STERSTR)["APEF2"    ] = D1STERSTR_APEF2;
        (*D1STERSTR)["EXDEDF2"  ] = D1STERSTR_EXDEDF2;
        (*D1STERSTR)["AECDEDF2" ] = D1STERSTR_AECDEDF2;
        (*D1STERSTR)["DEDF3"    ] = D1STERSTR_DEDF3;
        (*D1STERSTR)["APEF3"    ] = D1STERSTR_APEF3;
        (*D1STERSTR)["EXDEDF3"  ] = D1STERSTR_EXDEDF3;
        (*D1STERSTR)["AECDEDF3" ] = D1STERSTR_AECDEDF3;
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(4*3)) && ((addr-0x0060)%4 == 0)) {
        uint i = (addr - 0x0060)/4;
        (*(S1STEADR [i]))["SEADR1"   ] = S1STEADR_SEADR1[i];
        return;
    }
    if ((0x0070 <= addr) && (addr <= (0x0070)+(4*3)) && ((addr-0x0070)%4 == 0)) {
        uint i = (addr - 0x0070)/4;
        (*(S2NDEADR [i]))["SEADR2"   ] = S2NDEADR_SEADR2[i];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        (*(S3RDEADR [i]))["SEADR3"   ] = S3RDEADR_SEADR3[i];
        return;
    }
    if ((0x0090 <= addr) && (addr <= (0x0090)+(4*3)) && ((addr-0x0090)%4 == 0)) {
        uint i = (addr - 0x0090)/4;
        (*(S4THEADR [i]))["SEADR4"   ] = S4THEADR_SEADR4[i];
        return;
    }
    if ((0x00A0 <= addr) && (addr <= (0x00A0)+(4*3)) && ((addr-0x00A0)%4 == 0)) {
        uint i = (addr - 0x00A0)/4;
        (*(S5THEADR [i]))["SEADR5"   ] = S5THEADR_SEADR5[i];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(4*3)) && ((addr-0x00B0)%4 == 0)) {
        uint i = (addr - 0x00B0)/4;
        (*(S6THEADR [i]))["SEADR6"   ] = S6THEADR_SEADR6[i];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(4*3)) && ((addr-0x00C0)%4 == 0)) {
        uint i = (addr - 0x00C0)/4;
        (*(S7THEADR [i]))["SEADR7"   ] = S7THEADR_SEADR7[i];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(4*3)) && ((addr-0x00D0)%4 == 0)) {
        uint i = (addr - 0x00D0)/4;
        (*(S8THEADR [i]))["SEADR8"   ] = S8THEADR_SEADR8[i];
        return;
    }
    if ((0x00E0 <= addr) && (addr <= (0x00E0)+(4*3)) && ((addr-0x00E0)%4 == 0)) {
        uint i = (addr - 0x00E0)/4;
        (*(D1STEADR [i]))["DEADR"    ] = D1STEADR_DEADR[i];
        return;
    }
    if (addr == 0x00F0) {
        (*STSTCTL  )["ECCTST"   ] = STSTCTL_ECCTST;
        (*STSTCTL  )["PROT0"    ] = STSTCTL_PROT0;
        (*STSTCTL  )["PROT1"    ] = STSTCTL_PROT1;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cecccom_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cecccom_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cecccom_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cecccom_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cecccom_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cecccom_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cecccom_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cecccom_regif::uint Cecccom_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cecccom_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cecccom_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cecccom_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cecccom_regif::EnableReset(const bool is_active, const std::string clock_domain) //Modify for reseting registers according to clock domain
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        if (clock_domain == "pclk_domain") {
            if ((mRegArray[i]->my_p->name() == "ECCCTL") || (mRegArray[i]->my_p->name() == "ERRINT") ||
                (mRegArray[i]->my_p->name() == "SSTCLR") || (mRegArray[i]->my_p->name() == "DSTCLR")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        } else if (clock_domain == "sys_clk_domain") {
            if ((mRegArray[i]->my_p->name() != "ECCCTL") && (mRegArray[i]->my_p->name() != "ERRINT") &&
                (mRegArray[i]->my_p->name() != "SSTCLR") && (mRegArray[i]->my_p->name() != "DSTCLR")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cecccom_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cecccom_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cecccom_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
