// -----------------------------------------------------------------------------
// $Id: ecc_bus_ecccap_regif.h,v 1.8 2020/03/30 10:53:33 thunguyen3 Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : ecc_bus_ecccap_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ecc_bus_ecccap
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  8 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name        reg_name      wsize   rsize      length offset   access   init   support  callback
//     %%REG      ERRINT      ERRINT        8|16|32 8|16|32    32     0x00     R|W      0xF     TRUE     -
//     %%REG      ASSTCLR     ASSTCLR       8|16|32 8|16|32    32     0x10     R|W      0x0     TRUE     W
//     %%REG      ADSTCLR     ADSTCLR       8|16|32 8|16|32    32     0x20     R|W      0x0     TRUE     W
//     %%REG      DSSTCLR     DSSTCLR       8|16|32 8|16|32    32     0x30     R|W      0x0     TRUE     W
//     %%REG      DDSTCLR     DDSTCLR       8|16|32 8|16|32    32     0x40     R|W      0x0     TRUE     W
//     %%REG      ASERSTR     ASERSTR             - 8|16|32    32     0x50     R        0x0     TRUE     -
//     %%REG      ADERSTR     ADERSTR             - 8|16|32    32     0x60     R        0x0     TRUE     -
//     %%REG      DSERSTR     DSERSTR             - 8|16|32    32     0x70     R        0x0     TRUE     -
//     %%REG      DDERSTR     DDERSTR             - 8|16|32    32     0x80     R        0x0     TRUE     -
// 
//     
// %REG_NAME ERRINT
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ADEDIE             3       3       1       R|W     TRUE        -
//     %%BIT    ASEDIE             2       2       1       R|W     TRUE        -
//     %%BIT    DDEDIE             1       1       1       R|W     TRUE        -
//     %%BIT    DSEDIE             0       0       1       R|W     TRUE        W
////////////////////////////////////////////////////////////////////////////////
/// @file ecc_bus_ecccap_regif.h
/// @brief Register IF class of model ECC_BUS_ECCCAP
/// $Id: ecc_bus_ecccap_regif.h,v 1.8 2020/03/30 10:53:33 thunguyen3 Exp $
/// $Date: 2020/03/30 10:53:33 $
/// $Revison$
/// $Author: thunguyen3 $
////////////////////////////////////////////////////////////////////////////////
#ifndef __ECC_BUS_ECCCAP_REGIF_H__
#define __ECC_BUS_ECCCAP_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ECC_BUS_ECCCAP model
class Cecc_bus_ecccap_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cecc_bus_ecccap_regif(std::string name, uint buswidth, std::string err_kind);
    ~Cecc_bus_ecccap_regif();

protected:
    vpcl::re_register *ERRINT ;
    vpcl::re_register *ASSTCLR;
    vpcl::re_register *ADSTCLR;
    vpcl::re_register *DSSTCLR;
    vpcl::re_register *DDSTCLR;
    vpcl::re_register *ASERSTR;
    vpcl::re_register *ADERSTR;
    vpcl::re_register *DSERSTR;
    vpcl::re_register *DDERSTR;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_ERRINT ;
    scml2::reg<uint> *CW_ASSTCLR;
    scml2::reg<uint> *CW_ADSTCLR;
    scml2::reg<uint> *CW_DSSTCLR;
    scml2::reg<uint> *CW_DDSTCLR;
    scml2::reg<uint> *CW_ASERSTR;
    scml2::reg<uint> *CW_ADERSTR;
    scml2::reg<uint> *CW_DSERSTR;
    scml2::reg<uint> *CW_DDERSTR;
    #endif

    uint ERRINT_ADEDIE;
    uint ERRINT_ASEDIE;
    uint ERRINT_DDEDIE;
    uint ERRINT_DSEDIE;
    uint ASSTCLR_ASSTCLR;
    uint ADSTCLR_ADSTCLR;
    uint DSSTCLR_DSSTCLR;
    uint DDSTCLR_DDSTCLR;
    uint ASERSTR_ASERSTR;
    uint ADERSTR_ADERSTR;
    uint DSERSTR_DSERSTR;
    uint DDERSTR_DDERSTR;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_ERRINT_ADEDIE(RegCBstr str) = 0;
    virtual void cb_ERRINT_DSEDIE(RegCBstr str) = 0;
    virtual void cb_ASSTCLR_ASSTCLR(RegCBstr str) = 0;
    virtual void cb_ADSTCLR_ADSTCLR(RegCBstr str) = 0;
    virtual void cb_DSSTCLR_DSSTCLR(RegCBstr str) = 0;
    virtual void cb_DDSTCLR_DDSTCLR(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cecc_bus_ecccap_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cecc_bus_ecccap_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;
    std::string mErr_Kind;      // Kind of error

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);
    
    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ECC_BUS_ECCCAP_REG_DEF_H__
