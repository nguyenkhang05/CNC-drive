// -----------------------------------------------------------------------------
// $Id: hwcore_input_regif.h,v 1.4 2020/10/21 04:27:23 quynhnhunguyen Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_input_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_INPUT
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  11
// 
// %REG_CHANNEL reg_def
//   %%TITLE    name               reg_name             size         wsize         rsize       length      offset    factor_start   factor_end   factor_index   factor_step     init        access    support    callback
//   %%REG      CTRINMD             CTRINMD              16            16         8|16|32        16       0x200        -             -            -             -             0x0000           R|W       TRUE       w
//   %%REG      THTESFT             THTESFT              16            16         8|16|32        16       0x204        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      THTEIBUF            THTEIBUF             16            16         8|16|32        16       0x206        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      EARD                EARD                 16            16         8|16|32        16       0x208        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      THTESEL             THTESEL              16            16         8|16|32        16       0x20A        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      AD0IBUF             AD0IBUF              16            16         8|16|32        16       0x20C        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      AD1IBUF             AD1IBUF              16            16         8|16|32        16       0x20E        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      AD2IBUF             AD2IBUF              16            16         8|16|32        16       0x210        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      AD0OFS              AD0OFS               16            16         8|16|32        16       0x212        -             -            -             -             0x0800           R|W       TRUE       -
//   %%REG      AD1OFS              AD1OFS               16            16         8|16|32        16       0x214        -             -            -             -             0x0800           R|W       TRUE       -
//   %%REG      AD2OFS              AD2OFS               16            16         8|16|32        16       0x216        -             -            -             -             0x0800           R|W       TRUE       -
//   %%REG      DIVLSB              DIVLSB               32            32         8|16|32        32       0x218        -             -            -             -             0x00010000       R|W       TRUE       -
//   %%REG      IUFIX               IUFIX                32            32         8|16|32        32       0x21C        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      IVFIX               IVFIX                32            32         8|16|32        32       0x220        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      IWFIX               IWFIX                32            32         8|16|32        32       0x224        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      KCLCTR              KCLCTR               16            16         8|16|32        16       0x228        -             -            -             -             0x0000           R|W       TRUE       -
//   %%REG      KCLJUD              KCLJUD               32            32         8|16|32        32       0x22C        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      KCLSTAT             KCLSTAT               8             -         8|16|32         8       0x230        -             -            -             -             0x00             R         TRUE       -
//   %%REG      KCLSTATC            KCLSTATC              8             8         8|16|32         8       0x231        -             -            -             -             0x00             R|W       TRUE       w
//   %%REG      KCLCNT              KCLCNT                8             -         8|16|32         8       0x232        -             -            -             -             0x00             R         TRUE       -
//   %%REG      SR2                 SR2                  32            32         8|16|32        32       0x234        -             -            -             -             0x0000D106       R|W       TRUE       -
//   %%REG      IDFIX               IDFIX                32            32         8|16|32        32       0x238        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      IQFIX               IQFIX                32            32         8|16|32        32       0x23C        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      IUFIXOBUF           IUFIXOBUF            32             -         8|16|32        32       0x240        -             -            -             -             0x00000000       R         TRUE       -
//   %%REG      IVFIXOBUF           IVFIXOBUF            32             -         8|16|32        32       0x244        -             -            -             -             0x00000000       R         TRUE       -
//   %%REG      IWFIXOBUF           IWFIXOBUF            32             -         8|16|32        32       0x248        -             -            -             -             0x00000000       R         TRUE       -
//   %%REG      IDFIXOBUF           IDFIXOBUF            32            32         8|16|32        32       0x24C        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      IQFIXOBUF           IQFIXOBUF            32            32         8|16|32        32       0x250        -             -            -             -             0x00000000       R|W       TRUE       -
//   %%REG      THTRESFIXIN         THTRESFIXIN          16             -         8|16|32        16       0x254        -             -            -             -             0x0000           R         TRUE       -
// 
// %REG_NAME CTRINMD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   IIRDQ            12      12     0x0       R|W      TRUE     -
//     %%BIT   INSTCTR           7       6     0x0       R|W      TRUE     w
//     %%BIT   CMUVW             5       3     0x0       R|W      TRUE     -
//     %%BIT   CMES              2       2     0x0       R|W      TRUE     -
//     %%BIT   KCL               1       1     0x0       R|W      TRUE     -
//     %%BIT   FREGIN            0       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTESFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTEIBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME EARD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTESEL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     w
// 
// %REG_NAME AD0IBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     w
// 
// %REG_NAME AD1IBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     w
// 
// %REG_NAME AD2IBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     w
// 
// %REG_NAME AD0OFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0800    R|W      TRUE     -
// 
// %REG_NAME AD1OFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0800    R|W      TRUE     -
// 
// %REG_NAME AD2OFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0800    R|W      TRUE     -
// 
// %REG_NAME DIVLSB
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x10000    R|W      TRUE     -
// 
// %REG_NAME IUFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     w
// 
// %REG_NAME IVFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     w
// 
// %REG_NAME IWFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     w
// 
// %REG_NAME KCLCTR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   EN                8       8     0x0       R|W      TRUE     -
//     %%BIT   DATA              7       0     0x0       R|W      TRUE     -
// 
// %REG_NAME KCLJUD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x0       R|W      TRUE     -
// 
// %REG_NAME KCLSTAT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   ST                0       0     0x0       R        TRUE     -
// 
// %REG_NAME KCLSTATC
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   CLR               0       0     0x0       R|W      TRUE     w
// 
// %REG_NAME KCLCNT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA              7       0     0x0       R        TRUE     -
// 
// %REG_NAME SR2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0xD106    R|W      TRUE     -
// 
// %REG_NAME IDFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME IQFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME IUFIXOBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R        TRUE     -
// 
// %REG_NAME IVFIXOBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R        TRUE     -
// 
// %REG_NAME IWFIXOBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R        TRUE     -
// 
// %REG_NAME IDFIXOBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     w
// 
// %REG_NAME IQFIXOBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     w
// 
// %REG_NAME THTRESFIXIN
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R        TRUE     -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_input_regif.h
/// @brief Register IF class of model HWCORE_INPUT
/// $Id: hwcore_input_regif.h,v 1.4 2020/10/21 04:27:23 quynhnhunguyen Exp $
/// $Date: 2020/10/21 04:27:23 $
/// $Revison$
/// $Author: quynhnhunguyen $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_INPUT_REGIF_H__
#define __HWCORE_INPUT_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_INPUT model
class Chwcore_input_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_input_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_input_regif(std::string name, uint buswidth);
    ~Chwcore_input_regif();

protected:
    vpcl::re_register *CTRINMD    ;
    vpcl::re_register *THTESFT    ;
    vpcl::re_register *THTEIBUF   ;
    vpcl::re_register *EARD       ;
    vpcl::re_register *THTESEL    ;
    vpcl::re_register *AD0IBUF    ;
    vpcl::re_register *AD1IBUF    ;
    vpcl::re_register *AD2IBUF    ;
    vpcl::re_register *AD0OFS     ;
    vpcl::re_register *AD1OFS     ;
    vpcl::re_register *AD2OFS     ;
    vpcl::re_register *DIVLSB     ;
    vpcl::re_register *IUFIX      ;
    vpcl::re_register *IVFIX      ;
    vpcl::re_register *IWFIX      ;
    vpcl::re_register *KCLCTR     ;
    vpcl::re_register *KCLJUD     ;
    vpcl::re_register *KCLSTAT    ;
    vpcl::re_register *KCLSTATC   ;
    vpcl::re_register *KCLCNT     ;
    vpcl::re_register *SR2        ;
    vpcl::re_register *IDFIX      ;
    vpcl::re_register *IQFIX      ;
    vpcl::re_register *IUFIXOBUF  ;
    vpcl::re_register *IVFIXOBUF  ;
    vpcl::re_register *IWFIXOBUF  ;
    vpcl::re_register *IDFIXOBUF  ;
    vpcl::re_register *IQFIXOBUF  ;
    vpcl::re_register *THTRESFIXIN;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_CTRINMD_INSTCTR(RegCBstr str) = 0;
    virtual void cb_THTESEL_DATA(RegCBstr str) = 0;
    virtual void cb_AD0IBUF_DATA(RegCBstr str) = 0;
    virtual void cb_AD1IBUF_DATA(RegCBstr str) = 0;
    virtual void cb_AD2IBUF_DATA(RegCBstr str) = 0;
    virtual void cb_IUFIX_DATA(RegCBstr str) = 0;
    virtual void cb_IVFIX_DATA(RegCBstr str) = 0;
    virtual void cb_IWFIX_DATA(RegCBstr str) = 0;
    virtual void cb_KCLSTATC_CLR(RegCBstr str) = 0;
    virtual void cb_IDFIXOBUF_DATA(RegCBstr str) = 0;
    virtual void cb_IQFIXOBUF_DATA(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_input_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_input_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_input_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_input_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_INPUT_REGIF_H__
