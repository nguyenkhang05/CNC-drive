// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2018 Renesas Electronics Corporation
// Copyright(c) 2010-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : bist_u2a_info.txt
////////////////////////////////////////////////////////////////////////////////
// # -----------------------------------------------------------------------------
// # $Id$
// #
// # Copyright(c) 2018 Renesas Electronics Corporation
// # Copyright(c) 2018 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # -----------------------------------------------------------------------------
// 
// %MODULE bist_u2a
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL   reg_def
//   %%TITLE  name         reg_name     wsize  rsize    length  offset    init        access  support  callback
//   %%REG    LBISTREF1    LBISTREF1    32     8|16|32  32      0x100    -           -       -        -
//   %%REG    LBISTREF2    LBISTREF2    32     8|16|32  32      0x104    -           -       -        -
//   %%REG    MBISTREF1    MBISTREF1    32     8|16|32  32      0x108    -           -       -        -
//   %%REG    MBISTREF2    MBISTREF2    32     8|16|32  32      0x10C    -           -       -        -
//   %%REG    MBISTREF3    MBISTREF3    32     8|16|32  32      0x110    -           -       -        -
//   %%REG    LBISTSIG1    LBISTSIG1    32     8|16|32  32      0x114    -           -       -        -
//   %%REG    LBISTSIG2    LBISTSIG2    32     8|16|32  32      0x118    -           -       -        -
//   %%REG    MBISTSIG1    MBISTSIG1    32     8|16|32  32      0x11C    -           -       -        -
//   %%REG    MBISTSIG2    MBISTSIG2    32     8|16|32  32      0x120    -           -       -        -
//   %%REG    MBISTSIG3    MBISTSIG3    32     8|16|32  32      0x124    -           -       -        -
//   %%REG    MBIST1FTAG0  MBIST1FTAG0  32     8|16|32  32      0x128    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG1  MBIST1FTAG1  32     8|16|32  32      0x12C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG2  MBIST1FTAG2  32     8|16|32  32      0x130    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG3  MBIST1FTAG3  32     8|16|32  32      0x134    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG4  MBIST1FTAG4  32     8|16|32  32      0x138    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG5  MBIST1FTAG5  32     8|16|32  32      0x13C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG6  MBIST1FTAG6  32     8|16|32  32      0x140    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1FTAG7  MBIST1FTAG7  32     8|16|32  32      0x144    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG0  MBIST2FTAG0  32     8|16|32  32      0x148    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG1  MBIST2FTAG1  32     8|16|32  32      0x14C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG2  MBIST2FTAG2  32     8|16|32  32      0x150    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG3  MBIST2FTAG3  32     8|16|32  32      0x154    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG4  MBIST2FTAG4  32     8|16|32  32      0x158    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG5  MBIST2FTAG5  32     8|16|32  32      0x15C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG6  MBIST2FTAG6  32     8|16|32  32      0x160    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2FTAG7  MBIST2FTAG7  32     8|16|32  32      0x164    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG0  MBIST3FTAG0  32     8|16|32  32      0x168    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG1  MBIST3FTAG1  32     8|16|32  32      0x16C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG2  MBIST3FTAG2  32     8|16|32  32      0x170    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG3  MBIST3FTAG3  32     8|16|32  32      0x174    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG4  MBIST3FTAG4  32     8|16|32  32      0x178    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG5  MBIST3FTAG5  32     8|16|32  32      0x17C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG6  MBIST3FTAG6  32     8|16|32  32      0x180    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3FTAG7  MBIST3FTAG7  32     8|16|32  32      0x184    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC0   MBIST1ECC0   32     8|16|32  32      0x188    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC1   MBIST1ECC1   32     8|16|32  32      0x18C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC2   MBIST1ECC2   32     8|16|32  32      0x190    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC3   MBIST1ECC3   32     8|16|32  32      0x194    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC4   MBIST1ECC4   32     8|16|32  32      0x198    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC5   MBIST1ECC5   32     8|16|32  32      0x19C    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC6   MBIST1ECC6   32     8|16|32  32      0x1A0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST1ECC7   MBIST1ECC7   32     8|16|32  32      0x1A4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC0   MBIST2ECC0   32     8|16|32  32      0x1A8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC1   MBIST2ECC1   32     8|16|32  32      0x1AC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC2   MBIST2ECC2   32     8|16|32  32      0x1B0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC3   MBIST2ECC3   32     8|16|32  32      0x1B4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC4   MBIST2ECC4   32     8|16|32  32      0x1B8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC5   MBIST2ECC5   32     8|16|32  32      0x1BC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC6   MBIST2ECC6   32     8|16|32  32      0x1C0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST2ECC7   MBIST2ECC7   32     8|16|32  32      0x1C4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC0   MBIST3ECC0   32     8|16|32  32      0x1C8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC1   MBIST3ECC1   32     8|16|32  32      0x1CC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC2   MBIST3ECC2   32     8|16|32  32      0x1D0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC3   MBIST3ECC3   32     8|16|32  32      0x1D4    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC4   MBIST3ECC4   32     8|16|32  32      0x1D8    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC5   MBIST3ECC5   32     8|16|32  32      0x1DC    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC6   MBIST3ECC6   32     8|16|32  32      0x1E0    0xFFFFFFFF  R       TRUE     -
//   %%REG    MBIST3ECC7   MBIST3ECC7   32     8|16|32  32      0x1E4    0xFFFFFFFF  R       TRUE     -
//   %%REG    BSEQ0ST      BSEQ0ST      32     8|16|32  32      0x000    -           -       -        -
//   %%REG    BSEQ0STB     BSEQ0STB     32     8|16|32  32      0x004    -           -       -        -
//   %%REG    BISTST       BISTST       32     8|16|32  32      0x008    -           -       -        -
//   %%REG    BSEQ0SEL     BSEQ0SEL     32     8|16|32  32      0x00C    -           -       -        -
// 
// 
// %REG_NAME  LBISTREF1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTREF1   19      0       0xA5A5A   R        -         -
// 
// %REG_NAME  LBISTREF2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTREF2   19      0       0x5A5A5   R        -         -
// 
// %REG_NAME  MBISTREF1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF1   19      0       0xAA55A   R        -         -
// 
// %REG_NAME  MBISTREF2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF2   19      0       0x55AA5   R        -         -
// 
// %REG_NAME  MBISTREF3
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTREF3   19      0       0xAAA55   R        -         -
// 
// %REG_NAME  LBISTSIG1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTSIG1   19      0       0x5A5A5   R        -         -
// 
// %REG_NAME  LBISTSIG2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    LBISTSIG2   19      0       0xA5A5A   R        -         -
// 
// %REG_NAME  MBISTSIG1
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG1   19      0       0x55AA5   R        -         -
// 
// %REG_NAME  MBISTSIG2
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG2   19      0       0xAA55A   R        -         -
// 
// %REG_NAME  MBISTSIG3
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBISTSIG3   19      0       0x555AA   R        -         -
// 
// %REG_NAME  BSEQ0ST
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    BISTEND     1       1       0         R        -         -
//    %%BIT    CMPERR      0       0       1         R        -         -
// 
// %REG_NAME  BSEQ0STB
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    BISTENDB    1       1       1         R        -         -
//    %%BIT    CMPERRB     0       0       0         R        -         -
// 
// %REG_NAME  BISTST
//    %%TITLE  name        upper   lower   init      access   support   callback
//    %%BIT    MBIST3ST    4       4       1         R        -         -
//    %%BIT    MBIST2ST    3       3       1         R        -         -
//    %%BIT    MBIST1ST    2       2       1         R        -         -
//    %%BIT    LBIST2ST    1       1       1         R        -         -
//    %%BIT    LBIST1ST    0       0       1         R        -         -
// 
// %REG_NAME  BSEQ0SEL
//    %%TITLE  name        upper   lower   init      access   support   callback   value
//    %%BIT    PARAMSEL    15      15      0         R|W      -         -          -
//    %%BIT    POSTCKSEL   10      8       0         R|W      -         -          -
//    %%BIT    HWTESTSET   5       4       0x3       R|W      -         -          "b01,b10,b11"
//    %%BIT    HWLBISTSEL  3       0       0         R|W      -         -          -
// 
// 
// %CMD_BASEID  tgt reg
// %CMD_NODUMP_API CommandCB DumpProfile ClearProfile EnableInsertInput EnableDumpResult AssertReset
// 
// %CMD_ACTION SetCLKfreq  <clk_name: std::string> <clk_freq: double> : void   @ Set clock frequency for pclk port
// %CMD_ACTION AssertBISTReset <rst_name: std::string> <start_time: double> <period: double> : void @ Assert and de-assert reset signal to the BIST model 
// 
////////////////////////////////////////////////////////////////////////////////
/// @file bist_u2a_regif.cpp
/// @brief Register IF class of model BIST_U2A
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "bist_u2a_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cbist_u2a_regif::Cbist_u2a_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0x10)
    #endif
{
    CommandInit();
    LBISTREF1   = new vpcl::re_register(0x0100, this, "LBISTREF1"  , name.c_str());
    LBISTREF2   = new vpcl::re_register(0x0104, this, "LBISTREF2"  , name.c_str());
    MBISTREF1   = new vpcl::re_register(0x0108, this, "MBISTREF1"  , name.c_str());
    MBISTREF2   = new vpcl::re_register(0x010C, this, "MBISTREF2"  , name.c_str());
    MBISTREF3   = new vpcl::re_register(0x0110, this, "MBISTREF3"  , name.c_str());
    LBISTSIG1   = new vpcl::re_register(0x0114, this, "LBISTSIG1"  , name.c_str());
    LBISTSIG2   = new vpcl::re_register(0x0118, this, "LBISTSIG2"  , name.c_str());
    MBISTSIG1   = new vpcl::re_register(0x011C, this, "MBISTSIG1"  , name.c_str());
    MBISTSIG2   = new vpcl::re_register(0x0120, this, "MBISTSIG2"  , name.c_str());
    MBISTSIG3   = new vpcl::re_register(0x0124, this, "MBISTSIG3"  , name.c_str());
    MBIST1FTAG0 = new vpcl::re_register(0x0128, this, "MBIST1FTAG0", name.c_str());
    MBIST1FTAG1 = new vpcl::re_register(0x012C, this, "MBIST1FTAG1", name.c_str());
    MBIST1FTAG2 = new vpcl::re_register(0x0130, this, "MBIST1FTAG2", name.c_str());
    MBIST1FTAG3 = new vpcl::re_register(0x0134, this, "MBIST1FTAG3", name.c_str());
    MBIST1FTAG4 = new vpcl::re_register(0x0138, this, "MBIST1FTAG4", name.c_str());
    MBIST1FTAG5 = new vpcl::re_register(0x013C, this, "MBIST1FTAG5", name.c_str());
    MBIST1FTAG6 = new vpcl::re_register(0x0140, this, "MBIST1FTAG6", name.c_str());
    MBIST1FTAG7 = new vpcl::re_register(0x0144, this, "MBIST1FTAG7", name.c_str());
    MBIST2FTAG0 = new vpcl::re_register(0x0148, this, "MBIST2FTAG0", name.c_str());
    MBIST2FTAG1 = new vpcl::re_register(0x014C, this, "MBIST2FTAG1", name.c_str());
    MBIST2FTAG2 = new vpcl::re_register(0x0150, this, "MBIST2FTAG2", name.c_str());
    MBIST2FTAG3 = new vpcl::re_register(0x0154, this, "MBIST2FTAG3", name.c_str());
    MBIST2FTAG4 = new vpcl::re_register(0x0158, this, "MBIST2FTAG4", name.c_str());
    MBIST2FTAG5 = new vpcl::re_register(0x015C, this, "MBIST2FTAG5", name.c_str());
    MBIST2FTAG6 = new vpcl::re_register(0x0160, this, "MBIST2FTAG6", name.c_str());
    MBIST2FTAG7 = new vpcl::re_register(0x0164, this, "MBIST2FTAG7", name.c_str());
    MBIST3FTAG0 = new vpcl::re_register(0x0168, this, "MBIST3FTAG0", name.c_str());
    MBIST3FTAG1 = new vpcl::re_register(0x016C, this, "MBIST3FTAG1", name.c_str());
    MBIST3FTAG2 = new vpcl::re_register(0x0170, this, "MBIST3FTAG2", name.c_str());
    MBIST3FTAG3 = new vpcl::re_register(0x0174, this, "MBIST3FTAG3", name.c_str());
    MBIST3FTAG4 = new vpcl::re_register(0x0178, this, "MBIST3FTAG4", name.c_str());
    MBIST3FTAG5 = new vpcl::re_register(0x017C, this, "MBIST3FTAG5", name.c_str());
    MBIST3FTAG6 = new vpcl::re_register(0x0180, this, "MBIST3FTAG6", name.c_str());
    MBIST3FTAG7 = new vpcl::re_register(0x0184, this, "MBIST3FTAG7", name.c_str());
    MBIST1ECC0  = new vpcl::re_register(0x0188, this, "MBIST1ECC0" , name.c_str());
    MBIST1ECC1  = new vpcl::re_register(0x018C, this, "MBIST1ECC1" , name.c_str());
    MBIST1ECC2  = new vpcl::re_register(0x0190, this, "MBIST1ECC2" , name.c_str());
    MBIST1ECC3  = new vpcl::re_register(0x0194, this, "MBIST1ECC3" , name.c_str());
    MBIST1ECC4  = new vpcl::re_register(0x0198, this, "MBIST1ECC4" , name.c_str());
    MBIST1ECC5  = new vpcl::re_register(0x019C, this, "MBIST1ECC5" , name.c_str());
    MBIST1ECC6  = new vpcl::re_register(0x01A0, this, "MBIST1ECC6" , name.c_str());
    MBIST1ECC7  = new vpcl::re_register(0x01A4, this, "MBIST1ECC7" , name.c_str());
    MBIST2ECC0  = new vpcl::re_register(0x01A8, this, "MBIST2ECC0" , name.c_str());
    MBIST2ECC1  = new vpcl::re_register(0x01AC, this, "MBIST2ECC1" , name.c_str());
    MBIST2ECC2  = new vpcl::re_register(0x01B0, this, "MBIST2ECC2" , name.c_str());
    MBIST2ECC3  = new vpcl::re_register(0x01B4, this, "MBIST2ECC3" , name.c_str());
    MBIST2ECC4  = new vpcl::re_register(0x01B8, this, "MBIST2ECC4" , name.c_str());
    MBIST2ECC5  = new vpcl::re_register(0x01BC, this, "MBIST2ECC5" , name.c_str());
    MBIST2ECC6  = new vpcl::re_register(0x01C0, this, "MBIST2ECC6" , name.c_str());
    MBIST2ECC7  = new vpcl::re_register(0x01C4, this, "MBIST2ECC7" , name.c_str());
    MBIST3ECC0  = new vpcl::re_register(0x01C8, this, "MBIST3ECC0" , name.c_str());
    MBIST3ECC1  = new vpcl::re_register(0x01CC, this, "MBIST3ECC1" , name.c_str());
    MBIST3ECC2  = new vpcl::re_register(0x01D0, this, "MBIST3ECC2" , name.c_str());
    MBIST3ECC3  = new vpcl::re_register(0x01D4, this, "MBIST3ECC3" , name.c_str());
    MBIST3ECC4  = new vpcl::re_register(0x01D8, this, "MBIST3ECC4" , name.c_str());
    MBIST3ECC5  = new vpcl::re_register(0x01DC, this, "MBIST3ECC5" , name.c_str());
    MBIST3ECC6  = new vpcl::re_register(0x01E0, this, "MBIST3ECC6" , name.c_str());
    MBIST3ECC7  = new vpcl::re_register(0x01E4, this, "MBIST3ECC7" , name.c_str());
    BSEQ0ST     = new vpcl::re_register(0x0000, this, "BSEQ0ST"    , name.c_str());
    BSEQ0STB    = new vpcl::re_register(0x0004, this, "BSEQ0STB"   , name.c_str());
    BISTST      = new vpcl::re_register(0x0008, this, "BISTST"     , name.c_str());
    BSEQ0SEL    = new vpcl::re_register(0x000C, this, "BSEQ0SEL"   , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0100]     = index;
    mRegMap[0x0100 + 1] = index;
    mRegMap[0x0100 + 2] = index;
    mRegMap[0x0100 + 3] = index++;
    mRegMap[0x0104]     = index;
    mRegMap[0x0104 + 1] = index;
    mRegMap[0x0104 + 2] = index;
    mRegMap[0x0104 + 3] = index++;
    mRegMap[0x0108]     = index;
    mRegMap[0x0108 + 1] = index;
    mRegMap[0x0108 + 2] = index;
    mRegMap[0x0108 + 3] = index++;
    mRegMap[0x010C]     = index;
    mRegMap[0x010C + 1] = index;
    mRegMap[0x010C + 2] = index;
    mRegMap[0x010C + 3] = index++;
    mRegMap[0x0110]     = index;
    mRegMap[0x0110 + 1] = index;
    mRegMap[0x0110 + 2] = index;
    mRegMap[0x0110 + 3] = index++;
    mRegMap[0x0114]     = index;
    mRegMap[0x0114 + 1] = index;
    mRegMap[0x0114 + 2] = index;
    mRegMap[0x0114 + 3] = index++;
    mRegMap[0x0118]     = index;
    mRegMap[0x0118 + 1] = index;
    mRegMap[0x0118 + 2] = index;
    mRegMap[0x0118 + 3] = index++;
    mRegMap[0x011C]     = index;
    mRegMap[0x011C + 1] = index;
    mRegMap[0x011C + 2] = index;
    mRegMap[0x011C + 3] = index++;
    mRegMap[0x0120]     = index;
    mRegMap[0x0120 + 1] = index;
    mRegMap[0x0120 + 2] = index;
    mRegMap[0x0120 + 3] = index++;
    mRegMap[0x0124]     = index;
    mRegMap[0x0124 + 1] = index;
    mRegMap[0x0124 + 2] = index;
    mRegMap[0x0124 + 3] = index++;
    mRegMap[0x0128]     = index;
    mRegMap[0x0128 + 1] = index;
    mRegMap[0x0128 + 2] = index;
    mRegMap[0x0128 + 3] = index++;
    mRegMap[0x012C]     = index;
    mRegMap[0x012C + 1] = index;
    mRegMap[0x012C + 2] = index;
    mRegMap[0x012C + 3] = index++;
    mRegMap[0x0130]     = index;
    mRegMap[0x0130 + 1] = index;
    mRegMap[0x0130 + 2] = index;
    mRegMap[0x0130 + 3] = index++;
    mRegMap[0x0134]     = index;
    mRegMap[0x0134 + 1] = index;
    mRegMap[0x0134 + 2] = index;
    mRegMap[0x0134 + 3] = index++;
    mRegMap[0x0138]     = index;
    mRegMap[0x0138 + 1] = index;
    mRegMap[0x0138 + 2] = index;
    mRegMap[0x0138 + 3] = index++;
    mRegMap[0x013C]     = index;
    mRegMap[0x013C + 1] = index;
    mRegMap[0x013C + 2] = index;
    mRegMap[0x013C + 3] = index++;
    mRegMap[0x0140]     = index;
    mRegMap[0x0140 + 1] = index;
    mRegMap[0x0140 + 2] = index;
    mRegMap[0x0140 + 3] = index++;
    mRegMap[0x0144]     = index;
    mRegMap[0x0144 + 1] = index;
    mRegMap[0x0144 + 2] = index;
    mRegMap[0x0144 + 3] = index++;
    mRegMap[0x0148]     = index;
    mRegMap[0x0148 + 1] = index;
    mRegMap[0x0148 + 2] = index;
    mRegMap[0x0148 + 3] = index++;
    mRegMap[0x014C]     = index;
    mRegMap[0x014C + 1] = index;
    mRegMap[0x014C + 2] = index;
    mRegMap[0x014C + 3] = index++;
    mRegMap[0x0150]     = index;
    mRegMap[0x0150 + 1] = index;
    mRegMap[0x0150 + 2] = index;
    mRegMap[0x0150 + 3] = index++;
    mRegMap[0x0154]     = index;
    mRegMap[0x0154 + 1] = index;
    mRegMap[0x0154 + 2] = index;
    mRegMap[0x0154 + 3] = index++;
    mRegMap[0x0158]     = index;
    mRegMap[0x0158 + 1] = index;
    mRegMap[0x0158 + 2] = index;
    mRegMap[0x0158 + 3] = index++;
    mRegMap[0x015C]     = index;
    mRegMap[0x015C + 1] = index;
    mRegMap[0x015C + 2] = index;
    mRegMap[0x015C + 3] = index++;
    mRegMap[0x0160]     = index;
    mRegMap[0x0160 + 1] = index;
    mRegMap[0x0160 + 2] = index;
    mRegMap[0x0160 + 3] = index++;
    mRegMap[0x0164]     = index;
    mRegMap[0x0164 + 1] = index;
    mRegMap[0x0164 + 2] = index;
    mRegMap[0x0164 + 3] = index++;
    mRegMap[0x0168]     = index;
    mRegMap[0x0168 + 1] = index;
    mRegMap[0x0168 + 2] = index;
    mRegMap[0x0168 + 3] = index++;
    mRegMap[0x016C]     = index;
    mRegMap[0x016C + 1] = index;
    mRegMap[0x016C + 2] = index;
    mRegMap[0x016C + 3] = index++;
    mRegMap[0x0170]     = index;
    mRegMap[0x0170 + 1] = index;
    mRegMap[0x0170 + 2] = index;
    mRegMap[0x0170 + 3] = index++;
    mRegMap[0x0174]     = index;
    mRegMap[0x0174 + 1] = index;
    mRegMap[0x0174 + 2] = index;
    mRegMap[0x0174 + 3] = index++;
    mRegMap[0x0178]     = index;
    mRegMap[0x0178 + 1] = index;
    mRegMap[0x0178 + 2] = index;
    mRegMap[0x0178 + 3] = index++;
    mRegMap[0x017C]     = index;
    mRegMap[0x017C + 1] = index;
    mRegMap[0x017C + 2] = index;
    mRegMap[0x017C + 3] = index++;
    mRegMap[0x0180]     = index;
    mRegMap[0x0180 + 1] = index;
    mRegMap[0x0180 + 2] = index;
    mRegMap[0x0180 + 3] = index++;
    mRegMap[0x0184]     = index;
    mRegMap[0x0184 + 1] = index;
    mRegMap[0x0184 + 2] = index;
    mRegMap[0x0184 + 3] = index++;
    mRegMap[0x0188]     = index;
    mRegMap[0x0188 + 1] = index;
    mRegMap[0x0188 + 2] = index;
    mRegMap[0x0188 + 3] = index++;
    mRegMap[0x018C]     = index;
    mRegMap[0x018C + 1] = index;
    mRegMap[0x018C + 2] = index;
    mRegMap[0x018C + 3] = index++;
    mRegMap[0x0190]     = index;
    mRegMap[0x0190 + 1] = index;
    mRegMap[0x0190 + 2] = index;
    mRegMap[0x0190 + 3] = index++;
    mRegMap[0x0194]     = index;
    mRegMap[0x0194 + 1] = index;
    mRegMap[0x0194 + 2] = index;
    mRegMap[0x0194 + 3] = index++;
    mRegMap[0x0198]     = index;
    mRegMap[0x0198 + 1] = index;
    mRegMap[0x0198 + 2] = index;
    mRegMap[0x0198 + 3] = index++;
    mRegMap[0x019C]     = index;
    mRegMap[0x019C + 1] = index;
    mRegMap[0x019C + 2] = index;
    mRegMap[0x019C + 3] = index++;
    mRegMap[0x01A0]     = index;
    mRegMap[0x01A0 + 1] = index;
    mRegMap[0x01A0 + 2] = index;
    mRegMap[0x01A0 + 3] = index++;
    mRegMap[0x01A4]     = index;
    mRegMap[0x01A4 + 1] = index;
    mRegMap[0x01A4 + 2] = index;
    mRegMap[0x01A4 + 3] = index++;
    mRegMap[0x01A8]     = index;
    mRegMap[0x01A8 + 1] = index;
    mRegMap[0x01A8 + 2] = index;
    mRegMap[0x01A8 + 3] = index++;
    mRegMap[0x01AC]     = index;
    mRegMap[0x01AC + 1] = index;
    mRegMap[0x01AC + 2] = index;
    mRegMap[0x01AC + 3] = index++;
    mRegMap[0x01B0]     = index;
    mRegMap[0x01B0 + 1] = index;
    mRegMap[0x01B0 + 2] = index;
    mRegMap[0x01B0 + 3] = index++;
    mRegMap[0x01B4]     = index;
    mRegMap[0x01B4 + 1] = index;
    mRegMap[0x01B4 + 2] = index;
    mRegMap[0x01B4 + 3] = index++;
    mRegMap[0x01B8]     = index;
    mRegMap[0x01B8 + 1] = index;
    mRegMap[0x01B8 + 2] = index;
    mRegMap[0x01B8 + 3] = index++;
    mRegMap[0x01BC]     = index;
    mRegMap[0x01BC + 1] = index;
    mRegMap[0x01BC + 2] = index;
    mRegMap[0x01BC + 3] = index++;
    mRegMap[0x01C0]     = index;
    mRegMap[0x01C0 + 1] = index;
    mRegMap[0x01C0 + 2] = index;
    mRegMap[0x01C0 + 3] = index++;
    mRegMap[0x01C4]     = index;
    mRegMap[0x01C4 + 1] = index;
    mRegMap[0x01C4 + 2] = index;
    mRegMap[0x01C4 + 3] = index++;
    mRegMap[0x01C8]     = index;
    mRegMap[0x01C8 + 1] = index;
    mRegMap[0x01C8 + 2] = index;
    mRegMap[0x01C8 + 3] = index++;
    mRegMap[0x01CC]     = index;
    mRegMap[0x01CC + 1] = index;
    mRegMap[0x01CC + 2] = index;
    mRegMap[0x01CC + 3] = index++;
    mRegMap[0x01D0]     = index;
    mRegMap[0x01D0 + 1] = index;
    mRegMap[0x01D0 + 2] = index;
    mRegMap[0x01D0 + 3] = index++;
    mRegMap[0x01D4]     = index;
    mRegMap[0x01D4 + 1] = index;
    mRegMap[0x01D4 + 2] = index;
    mRegMap[0x01D4 + 3] = index++;
    mRegMap[0x01D8]     = index;
    mRegMap[0x01D8 + 1] = index;
    mRegMap[0x01D8 + 2] = index;
    mRegMap[0x01D8 + 3] = index++;
    mRegMap[0x01DC]     = index;
    mRegMap[0x01DC + 1] = index;
    mRegMap[0x01DC + 2] = index;
    mRegMap[0x01DC + 3] = index++;
    mRegMap[0x01E0]     = index;
    mRegMap[0x01E0 + 1] = index;
    mRegMap[0x01E0 + 2] = index;
    mRegMap[0x01E0 + 3] = index++;
    mRegMap[0x01E4]     = index;
    mRegMap[0x01E4 + 1] = index;
    mRegMap[0x01E4 + 2] = index;
    mRegMap[0x01E4 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(BSEQ0ST      , mCurReg, 0,  4,      "32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(BSEQ0ST      , mCurReg, 0,  4,      "32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(BSEQ0STB     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(BISTST       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(BSEQ0SEL     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBISTREF1    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBISTREF2    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTREF1    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTREF2    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTREF3    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBISTSIG1    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBISTSIG2    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTSIG1    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTSIG2    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBISTSIG3    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG0  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG1  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG2  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG3  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG4  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG5  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG6  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1FTAG7  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG0  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG1  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG2  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG3  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG4  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG5  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG6  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2FTAG7  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG0  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG1  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG2  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG3  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG4  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG5  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG6  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3FTAG7  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC3   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC4   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC5   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC6   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST1ECC7   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC3   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC4   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC5   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC6   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST2ECC7   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC3   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC4   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC5   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC6   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MBIST3ECC7   , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*LBISTREF1    ) (19,  0, "LBISTREF1", 0xA5A5A   , "R"     , vpcl::SPP_ENABLE);
    (*LBISTREF2    ) (19,  0, "LBISTREF2", 0x5A5A5   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTREF1    ) (19,  0, "MBISTREF1", 0xAA55A   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTREF2    ) (19,  0, "MBISTREF2", 0x55AA5   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTREF3    ) (19,  0, "MBISTREF3", 0xAAA55   , "R"     , vpcl::SPP_ENABLE);
    (*LBISTSIG1    ) (19,  0, "LBISTSIG1", 0x5A5A5   , "R"     , vpcl::SPP_ENABLE);
    (*LBISTSIG2    ) (19,  0, "LBISTSIG2", 0xA5A5A   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTSIG1    ) (19,  0, "MBISTSIG1", 0x55AA5   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTSIG2    ) (19,  0, "MBISTSIG2", 0xAA55A   , "R"     , vpcl::SPP_ENABLE);
    (*MBISTSIG3    ) (19,  0, "MBISTSIG3", 0x555AA   , "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG0  ) (31,  0, "MBIST1FTAG0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG1  ) (31,  0, "MBIST1FTAG1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG2  ) (31,  0, "MBIST1FTAG2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG3  ) (31,  0, "MBIST1FTAG3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG4  ) (31,  0, "MBIST1FTAG4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG5  ) (31,  0, "MBIST1FTAG5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG6  ) (31,  0, "MBIST1FTAG6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1FTAG7  ) (31,  0, "MBIST1FTAG7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG0  ) (31,  0, "MBIST2FTAG0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG1  ) (31,  0, "MBIST2FTAG1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG2  ) (31,  0, "MBIST2FTAG2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG3  ) (31,  0, "MBIST2FTAG3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG4  ) (31,  0, "MBIST2FTAG4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG5  ) (31,  0, "MBIST2FTAG5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG6  ) (31,  0, "MBIST2FTAG6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2FTAG7  ) (31,  0, "MBIST2FTAG7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG0  ) (31,  0, "MBIST3FTAG0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG1  ) (31,  0, "MBIST3FTAG1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG2  ) (31,  0, "MBIST3FTAG2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG3  ) (31,  0, "MBIST3FTAG3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG4  ) (31,  0, "MBIST3FTAG4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG5  ) (31,  0, "MBIST3FTAG5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG6  ) (31,  0, "MBIST3FTAG6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3FTAG7  ) (31,  0, "MBIST3FTAG7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC0   ) (31,  0, "MBIST1ECC0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC1   ) (31,  0, "MBIST1ECC1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC2   ) (31,  0, "MBIST1ECC2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC3   ) (31,  0, "MBIST1ECC3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC4   ) (31,  0, "MBIST1ECC4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC5   ) (31,  0, "MBIST1ECC5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC6   ) (31,  0, "MBIST1ECC6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST1ECC7   ) (31,  0, "MBIST1ECC7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC0   ) (31,  0, "MBIST2ECC0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC1   ) (31,  0, "MBIST2ECC1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC2   ) (31,  0, "MBIST2ECC2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC3   ) (31,  0, "MBIST2ECC3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC4   ) (31,  0, "MBIST2ECC4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC5   ) (31,  0, "MBIST2ECC5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC6   ) (31,  0, "MBIST2ECC6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST2ECC7   ) (31,  0, "MBIST2ECC7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC0   ) (31,  0, "MBIST3ECC0", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC1   ) (31,  0, "MBIST3ECC1", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC2   ) (31,  0, "MBIST3ECC2", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC3   ) (31,  0, "MBIST3ECC3", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC4   ) (31,  0, "MBIST3ECC4", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC5   ) (31,  0, "MBIST3ECC5", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC6   ) (31,  0, "MBIST3ECC6", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*MBIST3ECC7   ) (31,  0, "MBIST3ECC7", 0xFFFFFFFF, "R"     , vpcl::SPP_ENABLE);
    (*BSEQ0ST      ) ( 1,  1, "BISTEND" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*BSEQ0ST      ) ( 0,  0, "CMPERR"  , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BSEQ0STB     ) ( 1,  1, "BISTENDB", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BSEQ0STB     ) ( 0,  0, "CMPERRB" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*BISTST       ) ( 4,  4, "MBIST3ST", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BISTST       ) ( 3,  3, "MBIST2ST", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BISTST       ) ( 2,  2, "MBIST1ST", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BISTST       ) ( 1,  1, "LBIST2ST", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BISTST       ) ( 0,  0, "LBIST1ST", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*BSEQ0SEL     ) (15, 15, "PARAMSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*BSEQ0SEL     ) (10,  8, "POSTCKSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*BSEQ0SEL     ) ( 5,  4, "HWTESTSET", 0x3       , "R|W"   , vpcl::SPP_ENABLE, "b01,b10,b11");
    (*BSEQ0SEL     ) ( 3,  0, "HWLBISTSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register

    InitLocalVal();
    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Cbist_u2a_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Cbist_u2a_regif::~Cbist_u2a_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Cbist_u2a_regif::uint Cbist_u2a_regif::bit_select(cuint val,    ///< [in] Writting address
                                                  cuint start,  ///< [in] start bit position
                                                  cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cbist_u2a_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cbist_u2a_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cbist_u2a_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cbist_u2a_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cbist_u2a_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                     const unsigned char *p_data,  ///< [in] Writing data
                                     cuint size,                   ///< [in] Data size (byte)
                                     bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cbist_u2a_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size,              ///< [in]  Data size (byte)
                                     bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cbist_u2a_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                  unsigned char *p_data,          ///< [out] Reading data
                                  cuint size,                     ///< [in]  Data size (byte)
                                  cuint reg_index,                ///< [in]  Register index
                                  bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    if (!IsDbgFunc) {
        if (mIsReset) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            
            pst_data = Register->read();

        }
    }
    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cbist_u2a_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                  const unsigned char *p_data,      ///< [in] Writing data
                                  cuint size,                       ///< [in] Data size (byte)
                                  cuint reg_index,                  ///< [in] Register index
                                  bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cbist_u2a_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cbist_u2a_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cbist_u2a_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cbist_u2a_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Cbist_u2a_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Cbist_u2a_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Cbist_u2a_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif

/// Initialize local variables
/// @return none
void Cbist_u2a_regif::InitLocalVal()
{
    // Initialize local variables
    LBISTREF1_LBISTREF1 = 0xA5A5A;
    LBISTREF2_LBISTREF2 = 0x5A5A5;
    MBISTREF1_MBISTREF1 = 0xAA55A;
    MBISTREF2_MBISTREF2 = 0x55AA5;
    MBISTREF3_MBISTREF3 = 0xAAA55;
    LBISTSIG1_LBISTSIG1 = 0x5A5A5;
    LBISTSIG2_LBISTSIG2 = 0xA5A5A;
    MBISTSIG1_MBISTSIG1 = 0x55AA5;
    MBISTSIG2_MBISTSIG2 = 0xAA55A;
    MBISTSIG3_MBISTSIG3 = 0x555AA;
    MBIST1FTAG0_MBIST1FTAG0 = 0xFFFFFFFF;
    MBIST1FTAG1_MBIST1FTAG1 = 0xFFFFFFFF;
    MBIST1FTAG2_MBIST1FTAG2 = 0xFFFFFFFF;
    MBIST1FTAG3_MBIST1FTAG3 = 0xFFFFFFFF;
    MBIST1FTAG4_MBIST1FTAG4 = 0xFFFFFFFF;
    MBIST1FTAG5_MBIST1FTAG5 = 0xFFFFFFFF;
    MBIST1FTAG6_MBIST1FTAG6 = 0xFFFFFFFF;
    MBIST1FTAG7_MBIST1FTAG7 = 0xFFFFFFFF;
    MBIST2FTAG0_MBIST2FTAG0 = 0xFFFFFFFF;
    MBIST2FTAG1_MBIST2FTAG1 = 0xFFFFFFFF;
    MBIST2FTAG2_MBIST2FTAG2 = 0xFFFFFFFF;
    MBIST2FTAG3_MBIST2FTAG3 = 0xFFFFFFFF;
    MBIST2FTAG4_MBIST2FTAG4 = 0xFFFFFFFF;
    MBIST2FTAG5_MBIST2FTAG5 = 0xFFFFFFFF;
    MBIST2FTAG6_MBIST2FTAG6 = 0xFFFFFFFF;
    MBIST2FTAG7_MBIST2FTAG7 = 0xFFFFFFFF;
    MBIST3FTAG0_MBIST3FTAG0 = 0xFFFFFFFF;
    MBIST3FTAG1_MBIST3FTAG1 = 0xFFFFFFFF;
    MBIST3FTAG2_MBIST3FTAG2 = 0xFFFFFFFF;
    MBIST3FTAG3_MBIST3FTAG3 = 0xFFFFFFFF;
    MBIST3FTAG4_MBIST3FTAG4 = 0xFFFFFFFF;
    MBIST3FTAG5_MBIST3FTAG5 = 0xFFFFFFFF;
    MBIST3FTAG6_MBIST3FTAG6 = 0xFFFFFFFF;
    MBIST3FTAG7_MBIST3FTAG7 = 0xFFFFFFFF;
    MBIST1ECC0_MBIST1ECC0 = 0xFFFFFFFF;
    MBIST1ECC1_MBIST1ECC1 = 0xFFFFFFFF;
    MBIST1ECC2_MBIST1ECC2 = 0xFFFFFFFF;
    MBIST1ECC3_MBIST1ECC3 = 0xFFFFFFFF;
    MBIST1ECC4_MBIST1ECC4 = 0xFFFFFFFF;
    MBIST1ECC5_MBIST1ECC5 = 0xFFFFFFFF;
    MBIST1ECC6_MBIST1ECC6 = 0xFFFFFFFF;
    MBIST1ECC7_MBIST1ECC7 = 0xFFFFFFFF;
    MBIST2ECC0_MBIST2ECC0 = 0xFFFFFFFF;
    MBIST2ECC1_MBIST2ECC1 = 0xFFFFFFFF;
    MBIST2ECC2_MBIST2ECC2 = 0xFFFFFFFF;
    MBIST2ECC3_MBIST2ECC3 = 0xFFFFFFFF;
    MBIST2ECC4_MBIST2ECC4 = 0xFFFFFFFF;
    MBIST2ECC5_MBIST2ECC5 = 0xFFFFFFFF;
    MBIST2ECC6_MBIST2ECC6 = 0xFFFFFFFF;
    MBIST2ECC7_MBIST2ECC7 = 0xFFFFFFFF;
    MBIST3ECC0_MBIST3ECC0 = 0xFFFFFFFF;
    MBIST3ECC1_MBIST3ECC1 = 0xFFFFFFFF;
    MBIST3ECC2_MBIST3ECC2 = 0xFFFFFFFF;
    MBIST3ECC3_MBIST3ECC3 = 0xFFFFFFFF;
    MBIST3ECC4_MBIST3ECC4 = 0xFFFFFFFF;
    MBIST3ECC5_MBIST3ECC5 = 0xFFFFFFFF;
    MBIST3ECC6_MBIST3ECC6 = 0xFFFFFFFF;
    MBIST3ECC7_MBIST3ECC7 = 0xFFFFFFFF;
    BSEQ0ST_BISTEND = 0x0;
    BSEQ0ST_CMPERR = 0x1;
    BSEQ0STB_BISTENDB = 0x1;
    BSEQ0STB_CMPERRB = 0x0;
    BISTST_MBIST3ST = 0x1;
    BISTST_MBIST2ST = 0x1;
    BISTST_MBIST1ST = 0x1;
    BISTST_LBIST2ST = 0x1;
    BISTST_LBIST1ST = 0x1;
    BSEQ0SEL_PARAMSEL = 0x0;
    BSEQ0SEL_POSTCKSEL = 0x0;
    BSEQ0SEL_HWTESTSET = 0x3;
    BSEQ0SEL_HWLBISTSEL = 0x0;
}

/// Update bit value to local value
/// @return None
void Cbist_u2a_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0100) {
        LBISTREF1_LBISTREF1             = (*LBISTREF1  )["LBISTREF1"  ];
        return;
    }
    if (addr == 0x0104) {
        LBISTREF2_LBISTREF2             = (*LBISTREF2  )["LBISTREF2"  ];
        return;
    }
    if (addr == 0x0108) {
        MBISTREF1_MBISTREF1             = (*MBISTREF1  )["MBISTREF1"  ];
        return;
    }
    if (addr == 0x010C) {
        MBISTREF2_MBISTREF2             = (*MBISTREF2  )["MBISTREF2"  ];
        return;
    }
    if (addr == 0x0110) {
        MBISTREF3_MBISTREF3             = (*MBISTREF3  )["MBISTREF3"  ];
        return;
    }
    if (addr == 0x0114) {
        LBISTSIG1_LBISTSIG1             = (*LBISTSIG1  )["LBISTSIG1"  ];
        return;
    }
    if (addr == 0x0118) {
        LBISTSIG2_LBISTSIG2             = (*LBISTSIG2  )["LBISTSIG2"  ];
        return;
    }
    if (addr == 0x011C) {
        MBISTSIG1_MBISTSIG1             = (*MBISTSIG1  )["MBISTSIG1"  ];
        return;
    }
    if (addr == 0x0120) {
        MBISTSIG2_MBISTSIG2             = (*MBISTSIG2  )["MBISTSIG2"  ];
        return;
    }
    if (addr == 0x0124) {
        MBISTSIG3_MBISTSIG3             = (*MBISTSIG3  )["MBISTSIG3"  ];
        return;
    }
    if (addr == 0x0128) {
        MBIST1FTAG0_MBIST1FTAG0         = (*MBIST1FTAG0)["MBIST1FTAG0"];
        return;
    }
    if (addr == 0x012C) {
        MBIST1FTAG1_MBIST1FTAG1         = (*MBIST1FTAG1)["MBIST1FTAG1"];
        return;
    }
    if (addr == 0x0130) {
        MBIST1FTAG2_MBIST1FTAG2         = (*MBIST1FTAG2)["MBIST1FTAG2"];
        return;
    }
    if (addr == 0x0134) {
        MBIST1FTAG3_MBIST1FTAG3         = (*MBIST1FTAG3)["MBIST1FTAG3"];
        return;
    }
    if (addr == 0x0138) {
        MBIST1FTAG4_MBIST1FTAG4         = (*MBIST1FTAG4)["MBIST1FTAG4"];
        return;
    }
    if (addr == 0x013C) {
        MBIST1FTAG5_MBIST1FTAG5         = (*MBIST1FTAG5)["MBIST1FTAG5"];
        return;
    }
    if (addr == 0x0140) {
        MBIST1FTAG6_MBIST1FTAG6         = (*MBIST1FTAG6)["MBIST1FTAG6"];
        return;
    }
    if (addr == 0x0144) {
        MBIST1FTAG7_MBIST1FTAG7         = (*MBIST1FTAG7)["MBIST1FTAG7"];
        return;
    }
    if (addr == 0x0148) {
        MBIST2FTAG0_MBIST2FTAG0         = (*MBIST2FTAG0)["MBIST2FTAG0"];
        return;
    }
    if (addr == 0x014C) {
        MBIST2FTAG1_MBIST2FTAG1         = (*MBIST2FTAG1)["MBIST2FTAG1"];
        return;
    }
    if (addr == 0x0150) {
        MBIST2FTAG2_MBIST2FTAG2         = (*MBIST2FTAG2)["MBIST2FTAG2"];
        return;
    }
    if (addr == 0x0154) {
        MBIST2FTAG3_MBIST2FTAG3         = (*MBIST2FTAG3)["MBIST2FTAG3"];
        return;
    }
    if (addr == 0x0158) {
        MBIST2FTAG4_MBIST2FTAG4         = (*MBIST2FTAG4)["MBIST2FTAG4"];
        return;
    }
    if (addr == 0x015C) {
        MBIST2FTAG5_MBIST2FTAG5         = (*MBIST2FTAG5)["MBIST2FTAG5"];
        return;
    }
    if (addr == 0x0160) {
        MBIST2FTAG6_MBIST2FTAG6         = (*MBIST2FTAG6)["MBIST2FTAG6"];
        return;
    }
    if (addr == 0x0164) {
        MBIST2FTAG7_MBIST2FTAG7         = (*MBIST2FTAG7)["MBIST2FTAG7"];
        return;
    }
    if (addr == 0x0168) {
        MBIST3FTAG0_MBIST3FTAG0         = (*MBIST3FTAG0)["MBIST3FTAG0"];
        return;
    }
    if (addr == 0x016C) {
        MBIST3FTAG1_MBIST3FTAG1         = (*MBIST3FTAG1)["MBIST3FTAG1"];
        return;
    }
    if (addr == 0x0170) {
        MBIST3FTAG2_MBIST3FTAG2         = (*MBIST3FTAG2)["MBIST3FTAG2"];
        return;
    }
    if (addr == 0x0174) {
        MBIST3FTAG3_MBIST3FTAG3         = (*MBIST3FTAG3)["MBIST3FTAG3"];
        return;
    }
    if (addr == 0x0178) {
        MBIST3FTAG4_MBIST3FTAG4         = (*MBIST3FTAG4)["MBIST3FTAG4"];
        return;
    }
    if (addr == 0x017C) {
        MBIST3FTAG5_MBIST3FTAG5         = (*MBIST3FTAG5)["MBIST3FTAG5"];
        return;
    }
    if (addr == 0x0180) {
        MBIST3FTAG6_MBIST3FTAG6         = (*MBIST3FTAG6)["MBIST3FTAG6"];
        return;
    }
    if (addr == 0x0184) {
        MBIST3FTAG7_MBIST3FTAG7         = (*MBIST3FTAG7)["MBIST3FTAG7"];
        return;
    }
    if (addr == 0x0188) {
        MBIST1ECC0_MBIST1ECC0           = (*MBIST1ECC0 )["MBIST1ECC0" ];
        return;
    }
    if (addr == 0x018C) {
        MBIST1ECC1_MBIST1ECC1           = (*MBIST1ECC1 )["MBIST1ECC1" ];
        return;
    }
    if (addr == 0x0190) {
        MBIST1ECC2_MBIST1ECC2           = (*MBIST1ECC2 )["MBIST1ECC2" ];
        return;
    }
    if (addr == 0x0194) {
        MBIST1ECC3_MBIST1ECC3           = (*MBIST1ECC3 )["MBIST1ECC3" ];
        return;
    }
    if (addr == 0x0198) {
        MBIST1ECC4_MBIST1ECC4           = (*MBIST1ECC4 )["MBIST1ECC4" ];
        return;
    }
    if (addr == 0x019C) {
        MBIST1ECC5_MBIST1ECC5           = (*MBIST1ECC5 )["MBIST1ECC5" ];
        return;
    }
    if (addr == 0x01A0) {
        MBIST1ECC6_MBIST1ECC6           = (*MBIST1ECC6 )["MBIST1ECC6" ];
        return;
    }
    if (addr == 0x01A4) {
        MBIST1ECC7_MBIST1ECC7           = (*MBIST1ECC7 )["MBIST1ECC7" ];
        return;
    }
    if (addr == 0x01A8) {
        MBIST2ECC0_MBIST2ECC0           = (*MBIST2ECC0 )["MBIST2ECC0" ];
        return;
    }
    if (addr == 0x01AC) {
        MBIST2ECC1_MBIST2ECC1           = (*MBIST2ECC1 )["MBIST2ECC1" ];
        return;
    }
    if (addr == 0x01B0) {
        MBIST2ECC2_MBIST2ECC2           = (*MBIST2ECC2 )["MBIST2ECC2" ];
        return;
    }
    if (addr == 0x01B4) {
        MBIST2ECC3_MBIST2ECC3           = (*MBIST2ECC3 )["MBIST2ECC3" ];
        return;
    }
    if (addr == 0x01B8) {
        MBIST2ECC4_MBIST2ECC4           = (*MBIST2ECC4 )["MBIST2ECC4" ];
        return;
    }
    if (addr == 0x01BC) {
        MBIST2ECC5_MBIST2ECC5           = (*MBIST2ECC5 )["MBIST2ECC5" ];
        return;
    }
    if (addr == 0x01C0) {
        MBIST2ECC6_MBIST2ECC6           = (*MBIST2ECC6 )["MBIST2ECC6" ];
        return;
    }
    if (addr == 0x01C4) {
        MBIST2ECC7_MBIST2ECC7           = (*MBIST2ECC7 )["MBIST2ECC7" ];
        return;
    }
    if (addr == 0x01C8) {
        MBIST3ECC0_MBIST3ECC0           = (*MBIST3ECC0 )["MBIST3ECC0" ];
        return;
    }
    if (addr == 0x01CC) {
        MBIST3ECC1_MBIST3ECC1           = (*MBIST3ECC1 )["MBIST3ECC1" ];
        return;
    }
    if (addr == 0x01D0) {
        MBIST3ECC2_MBIST3ECC2           = (*MBIST3ECC2 )["MBIST3ECC2" ];
        return;
    }
    if (addr == 0x01D4) {
        MBIST3ECC3_MBIST3ECC3           = (*MBIST3ECC3 )["MBIST3ECC3" ];
        return;
    }
    if (addr == 0x01D8) {
        MBIST3ECC4_MBIST3ECC4           = (*MBIST3ECC4 )["MBIST3ECC4" ];
        return;
    }
    if (addr == 0x01DC) {
        MBIST3ECC5_MBIST3ECC5           = (*MBIST3ECC5 )["MBIST3ECC5" ];
        return;
    }
    if (addr == 0x01E0) {
        MBIST3ECC6_MBIST3ECC6           = (*MBIST3ECC6 )["MBIST3ECC6" ];
        return;
    }
    if (addr == 0x01E4) {
        MBIST3ECC7_MBIST3ECC7           = (*MBIST3ECC7 )["MBIST3ECC7" ];
        return;
    }
    if (addr == 0x0000) {
        BSEQ0ST_BISTEND                 = (*BSEQ0ST    )["BISTEND"    ];
        BSEQ0ST_CMPERR                  = (*BSEQ0ST    )["CMPERR"     ];
        return;
    }
    if (addr == 0x0004) {
        BSEQ0STB_BISTENDB               = (*BSEQ0STB   )["BISTENDB"   ];
        BSEQ0STB_CMPERRB                = (*BSEQ0STB   )["CMPERRB"    ];
        return;
    }
    if (addr == 0x0008) {
        BISTST_MBIST3ST                 = (*BISTST     )["MBIST3ST"   ];
        BISTST_MBIST2ST                 = (*BISTST     )["MBIST2ST"   ];
        BISTST_MBIST1ST                 = (*BISTST     )["MBIST1ST"   ];
        BISTST_LBIST2ST                 = (*BISTST     )["LBIST2ST"   ];
        BISTST_LBIST1ST                 = (*BISTST     )["LBIST1ST"   ];
        return;
    }
    if (addr == 0x000C) {
        BSEQ0SEL_PARAMSEL               = (*BSEQ0SEL   )["PARAMSEL"   ];
        BSEQ0SEL_POSTCKSEL              = (*BSEQ0SEL   )["POSTCKSEL"  ];
        BSEQ0SEL_HWTESTSET              = (*BSEQ0SEL   )["HWTESTSET"  ];
        BSEQ0SEL_HWLBISTSEL             = (*BSEQ0SEL   )["HWLBISTSEL" ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cbist_u2a_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0100) {
        (*LBISTREF1  )["LBISTREF1"  ] = LBISTREF1_LBISTREF1;
        return;
    }
    if (addr == 0x0104) {
        (*LBISTREF2  )["LBISTREF2"  ] = LBISTREF2_LBISTREF2;
        return;
    }
    if (addr == 0x0108) {
        (*MBISTREF1  )["MBISTREF1"  ] = MBISTREF1_MBISTREF1;
        return;
    }
    if (addr == 0x010C) {
        (*MBISTREF2  )["MBISTREF2"  ] = MBISTREF2_MBISTREF2;
        return;
    }
    if (addr == 0x0110) {
        (*MBISTREF3  )["MBISTREF3"  ] = MBISTREF3_MBISTREF3;
        return;
    }
    if (addr == 0x0114) {
        (*LBISTSIG1  )["LBISTSIG1"  ] = LBISTSIG1_LBISTSIG1;
        return;
    }
    if (addr == 0x0118) {
        (*LBISTSIG2  )["LBISTSIG2"  ] = LBISTSIG2_LBISTSIG2;
        return;
    }
    if (addr == 0x011C) {
        (*MBISTSIG1  )["MBISTSIG1"  ] = MBISTSIG1_MBISTSIG1;
        return;
    }
    if (addr == 0x0120) {
        (*MBISTSIG2  )["MBISTSIG2"  ] = MBISTSIG2_MBISTSIG2;
        return;
    }
    if (addr == 0x0124) {
        (*MBISTSIG3  )["MBISTSIG3"  ] = MBISTSIG3_MBISTSIG3;
        return;
    }
    if (addr == 0x0128) {
        (*MBIST1FTAG0)["MBIST1FTAG0"] = MBIST1FTAG0_MBIST1FTAG0;
        return;
    }
    if (addr == 0x012C) {
        (*MBIST1FTAG1)["MBIST1FTAG1"] = MBIST1FTAG1_MBIST1FTAG1;
        return;
    }
    if (addr == 0x0130) {
        (*MBIST1FTAG2)["MBIST1FTAG2"] = MBIST1FTAG2_MBIST1FTAG2;
        return;
    }
    if (addr == 0x0134) {
        (*MBIST1FTAG3)["MBIST1FTAG3"] = MBIST1FTAG3_MBIST1FTAG3;
        return;
    }
    if (addr == 0x0138) {
        (*MBIST1FTAG4)["MBIST1FTAG4"] = MBIST1FTAG4_MBIST1FTAG4;
        return;
    }
    if (addr == 0x013C) {
        (*MBIST1FTAG5)["MBIST1FTAG5"] = MBIST1FTAG5_MBIST1FTAG5;
        return;
    }
    if (addr == 0x0140) {
        (*MBIST1FTAG6)["MBIST1FTAG6"] = MBIST1FTAG6_MBIST1FTAG6;
        return;
    }
    if (addr == 0x0144) {
        (*MBIST1FTAG7)["MBIST1FTAG7"] = MBIST1FTAG7_MBIST1FTAG7;
        return;
    }
    if (addr == 0x0148) {
        (*MBIST2FTAG0)["MBIST2FTAG0"] = MBIST2FTAG0_MBIST2FTAG0;
        return;
    }
    if (addr == 0x014C) {
        (*MBIST2FTAG1)["MBIST2FTAG1"] = MBIST2FTAG1_MBIST2FTAG1;
        return;
    }
    if (addr == 0x0150) {
        (*MBIST2FTAG2)["MBIST2FTAG2"] = MBIST2FTAG2_MBIST2FTAG2;
        return;
    }
    if (addr == 0x0154) {
        (*MBIST2FTAG3)["MBIST2FTAG3"] = MBIST2FTAG3_MBIST2FTAG3;
        return;
    }
    if (addr == 0x0158) {
        (*MBIST2FTAG4)["MBIST2FTAG4"] = MBIST2FTAG4_MBIST2FTAG4;
        return;
    }
    if (addr == 0x015C) {
        (*MBIST2FTAG5)["MBIST2FTAG5"] = MBIST2FTAG5_MBIST2FTAG5;
        return;
    }
    if (addr == 0x0160) {
        (*MBIST2FTAG6)["MBIST2FTAG6"] = MBIST2FTAG6_MBIST2FTAG6;
        return;
    }
    if (addr == 0x0164) {
        (*MBIST2FTAG7)["MBIST2FTAG7"] = MBIST2FTAG7_MBIST2FTAG7;
        return;
    }
    if (addr == 0x0168) {
        (*MBIST3FTAG0)["MBIST3FTAG0"] = MBIST3FTAG0_MBIST3FTAG0;
        return;
    }
    if (addr == 0x016C) {
        (*MBIST3FTAG1)["MBIST3FTAG1"] = MBIST3FTAG1_MBIST3FTAG1;
        return;
    }
    if (addr == 0x0170) {
        (*MBIST3FTAG2)["MBIST3FTAG2"] = MBIST3FTAG2_MBIST3FTAG2;
        return;
    }
    if (addr == 0x0174) {
        (*MBIST3FTAG3)["MBIST3FTAG3"] = MBIST3FTAG3_MBIST3FTAG3;
        return;
    }
    if (addr == 0x0178) {
        (*MBIST3FTAG4)["MBIST3FTAG4"] = MBIST3FTAG4_MBIST3FTAG4;
        return;
    }
    if (addr == 0x017C) {
        (*MBIST3FTAG5)["MBIST3FTAG5"] = MBIST3FTAG5_MBIST3FTAG5;
        return;
    }
    if (addr == 0x0180) {
        (*MBIST3FTAG6)["MBIST3FTAG6"] = MBIST3FTAG6_MBIST3FTAG6;
        return;
    }
    if (addr == 0x0184) {
        (*MBIST3FTAG7)["MBIST3FTAG7"] = MBIST3FTAG7_MBIST3FTAG7;
        return;
    }
    if (addr == 0x0188) {
        (*MBIST1ECC0 )["MBIST1ECC0" ] = MBIST1ECC0_MBIST1ECC0;
        return;
    }
    if (addr == 0x018C) {
        (*MBIST1ECC1 )["MBIST1ECC1" ] = MBIST1ECC1_MBIST1ECC1;
        return;
    }
    if (addr == 0x0190) {
        (*MBIST1ECC2 )["MBIST1ECC2" ] = MBIST1ECC2_MBIST1ECC2;
        return;
    }
    if (addr == 0x0194) {
        (*MBIST1ECC3 )["MBIST1ECC3" ] = MBIST1ECC3_MBIST1ECC3;
        return;
    }
    if (addr == 0x0198) {
        (*MBIST1ECC4 )["MBIST1ECC4" ] = MBIST1ECC4_MBIST1ECC4;
        return;
    }
    if (addr == 0x019C) {
        (*MBIST1ECC5 )["MBIST1ECC5" ] = MBIST1ECC5_MBIST1ECC5;
        return;
    }
    if (addr == 0x01A0) {
        (*MBIST1ECC6 )["MBIST1ECC6" ] = MBIST1ECC6_MBIST1ECC6;
        return;
    }
    if (addr == 0x01A4) {
        (*MBIST1ECC7 )["MBIST1ECC7" ] = MBIST1ECC7_MBIST1ECC7;
        return;
    }
    if (addr == 0x01A8) {
        (*MBIST2ECC0 )["MBIST2ECC0" ] = MBIST2ECC0_MBIST2ECC0;
        return;
    }
    if (addr == 0x01AC) {
        (*MBIST2ECC1 )["MBIST2ECC1" ] = MBIST2ECC1_MBIST2ECC1;
        return;
    }
    if (addr == 0x01B0) {
        (*MBIST2ECC2 )["MBIST2ECC2" ] = MBIST2ECC2_MBIST2ECC2;
        return;
    }
    if (addr == 0x01B4) {
        (*MBIST2ECC3 )["MBIST2ECC3" ] = MBIST2ECC3_MBIST2ECC3;
        return;
    }
    if (addr == 0x01B8) {
        (*MBIST2ECC4 )["MBIST2ECC4" ] = MBIST2ECC4_MBIST2ECC4;
        return;
    }
    if (addr == 0x01BC) {
        (*MBIST2ECC5 )["MBIST2ECC5" ] = MBIST2ECC5_MBIST2ECC5;
        return;
    }
    if (addr == 0x01C0) {
        (*MBIST2ECC6 )["MBIST2ECC6" ] = MBIST2ECC6_MBIST2ECC6;
        return;
    }
    if (addr == 0x01C4) {
        (*MBIST2ECC7 )["MBIST2ECC7" ] = MBIST2ECC7_MBIST2ECC7;
        return;
    }
    if (addr == 0x01C8) {
        (*MBIST3ECC0 )["MBIST3ECC0" ] = MBIST3ECC0_MBIST3ECC0;
        return;
    }
    if (addr == 0x01CC) {
        (*MBIST3ECC1 )["MBIST3ECC1" ] = MBIST3ECC1_MBIST3ECC1;
        return;
    }
    if (addr == 0x01D0) {
        (*MBIST3ECC2 )["MBIST3ECC2" ] = MBIST3ECC2_MBIST3ECC2;
        return;
    }
    if (addr == 0x01D4) {
        (*MBIST3ECC3 )["MBIST3ECC3" ] = MBIST3ECC3_MBIST3ECC3;
        return;
    }
    if (addr == 0x01D8) {
        (*MBIST3ECC4 )["MBIST3ECC4" ] = MBIST3ECC4_MBIST3ECC4;
        return;
    }
    if (addr == 0x01DC) {
        (*MBIST3ECC5 )["MBIST3ECC5" ] = MBIST3ECC5_MBIST3ECC5;
        return;
    }
    if (addr == 0x01E0) {
        (*MBIST3ECC6 )["MBIST3ECC6" ] = MBIST3ECC6_MBIST3ECC6;
        return;
    }
    if (addr == 0x01E4) {
        (*MBIST3ECC7 )["MBIST3ECC7" ] = MBIST3ECC7_MBIST3ECC7;
        return;
    }
    if (addr == 0x0000) {
        (*BSEQ0ST    )["BISTEND"    ] = BSEQ0ST_BISTEND;
        (*BSEQ0ST    )["CMPERR"     ] = BSEQ0ST_CMPERR;
        return;
    }
    if (addr == 0x0004) {
        (*BSEQ0STB   )["BISTENDB"   ] = BSEQ0STB_BISTENDB;
        (*BSEQ0STB   )["CMPERRB"    ] = BSEQ0STB_CMPERRB;
        return;
    }
    if (addr == 0x0008) {
        (*BISTST     )["MBIST3ST"   ] = BISTST_MBIST3ST;
        (*BISTST     )["MBIST2ST"   ] = BISTST_MBIST2ST;
        (*BISTST     )["MBIST1ST"   ] = BISTST_MBIST1ST;
        (*BISTST     )["LBIST2ST"   ] = BISTST_LBIST2ST;
        (*BISTST     )["LBIST1ST"   ] = BISTST_LBIST1ST;
        return;
    }
    if (addr == 0x000C) {
        (*BSEQ0SEL   )["PARAMSEL"   ] = BSEQ0SEL_PARAMSEL;
        (*BSEQ0SEL   )["POSTCKSEL"  ] = BSEQ0SEL_POSTCKSEL;
        (*BSEQ0SEL   )["HWTESTSET"  ] = BSEQ0SEL_HWTESTSET;
        (*BSEQ0SEL   )["HWLBISTSEL" ] = BSEQ0SEL_HWLBISTSEL;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cbist_u2a_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cbist_u2a_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cbist_u2a_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cbist_u2a_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cbist_u2a_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cbist_u2a_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cbist_u2a_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cbist_u2a_regif::uint Cbist_u2a_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cbist_u2a_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    } else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cbist_u2a_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cbist_u2a_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cbist_u2a_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if (is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USE_CWR_SYSTEMC
uint Cbist_u2a_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Cbist_u2a_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Cbist_u2a_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
