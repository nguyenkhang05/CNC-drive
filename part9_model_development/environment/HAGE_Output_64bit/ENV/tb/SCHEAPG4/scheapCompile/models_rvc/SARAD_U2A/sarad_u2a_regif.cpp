// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2017-2019 Renesas Electronics Corporation
// Copyright(c) 2017-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : sarad_u2a_info.txt
////////////////////////////////////////////////////////////////////////////////
// # -----------------------------------------------------------------------------
// # $Id$
// #
// # Copyright(c) 2012-2019 Renesas System Design Co., Ltd.
// # Copyright(c) 2012-2019 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # -----------------------------------------------------------------------------
// 
// ####################################################
// ## For PORTs
// ####################################################
// %MODULE sarad_u2a
// %HEADER_FILES sarad_u2a.h
// %IMPLEMENTATION_FILES sarad_u2a.cpp sarad_u2a_regif.cpp adc_u2a.cpp adc_u2a_regif.cpp
// %PORT  pclk                          64        in        sc_dt::uint64
// %PORT  ADCLK                         64        in        sc_dt::uint64
// %PORT  CLKA_ADC                      64        in        sc_dt::uint64
// %PORT  preset_n                      1         in        bool
// %PORT  RESETAD_N                     1         in        bool
// %PORT  preset2_n                     1         in        bool
// %PORT  RESETAD2_N                    1         in        bool
// %PORT  AVREFH0                       64        in        double
// %PORT  AVREFH1                       64        in        double
// %PORT  AVREFH2                       64        in        double
// %PORT  AD0SG0TRG                     1         in        bool
// %PORT  AD0SG1TRG                     1         in        bool
// %PORT  AD0SG2TRG                     1         in        bool
// %PORT  AD0SG3TRG                     1         in        bool
// %PORT  AD0SG4TRG                     1         in        bool
// %PORT  AD1SG0TRG                     1         in        bool
// %PORT  AD1SG1TRG                     1         in        bool
// %PORT  AD1SG2TRG                     1         in        bool
// %PORT  AD1SG3TRG                     1         in        bool
// %PORT  AD1SG4TRG                     1         in        bool
// %PORT  AD2SG0TRG                     1         in        bool
// %PORT  AD2SG1TRG                     1         in        bool
// %PORT  AD2SG2TRG                     1         in        bool
// %PORT  AD2SG3TRG                     1         in        bool
// %PORT  AD2SG4TRG                     1         in        bool
// %PORT  AD2TAUD2I7                    1         in        bool
// %PORT  AD2TAUD2I15                   1         in        bool
// %PORT  AD2TAUJ2                      1         in        bool
// %PORT  AD2TAUJ3                      1         in        bool
// %PORT  AD2LPS                        1         in        bool
// #%PORT  ADSTART_I                     1         in        bool
// #%PORT  ADSTART_O                     1         out       bool
// #%PORT  ADTSTART_I                    1         in        bool
// #%PORT  ADTSTART_O                    1         out       bool
// %PORT  AN000                         64        in        double
// %PORT  AN001                         64        in        double
// %PORT  AN002                         64        in        double
// %PORT  AN003                         64        in        double
// %PORT  AN010                         64        in        double
// %PORT  AN011                         64        in        double
// %PORT  AN012                         64        in        double
// %PORT  AN013                         64        in        double
// %PORT  AN020                         64        in        double
// %PORT  AN021                         64        in        double
// %PORT  AN022                         64        in        double
// %PORT  AN023                         64        in        double
// %PORT  AN030                         64        in        double
// %PORT  AN031                         64        in        double
// %PORT  AN032                         64        in        double
// %PORT  AN033                         64        in        double
// %PORT  AN040                         64        in        double
// %PORT  AN041                         64        in        double
// %PORT  AN042                         64        in        double
// %PORT  AN043                         64        in        double
// %PORT  VMON_VCC                      64        in        double
// %PORT  VMON_E0VCC                    64        in        double
// %PORT  VMON_ISOVDD                   64        in        double
// %PORT  VMON_AWOVDD                   64        in        double
// %PORT  AN050                         64        in        double
// %PORT  AN051                         64        in        double
// %PORT  AN052                         64        in        double
// %PORT  AN053                         64        in        double
// %PORT  AN060                         64        in        double
// %PORT  AN061                         64        in        double
// %PORT  AN062                         64        in        double
// %PORT  AN063                         64        in        double
// %PORT  AN070                         64        in        double
// %PORT  AN071                         64        in        double
// %PORT  AN100                         64        in        double
// %PORT  AN101                         64        in        double
// %PORT  AN102                         64        in        double
// %PORT  AN103                         64        in        double
// %PORT  AN110                         64        in        double
// %PORT  AN111                         64        in        double
// %PORT  AN112                         64        in        double
// %PORT  AN113                         64        in        double
// %PORT  AN120                         64        in        double
// %PORT  AN121                         64        in        double
// %PORT  AN122                         64        in        double
// %PORT  AN123                         64        in        double
// %PORT  AN130                         64        in        double
// %PORT  AN131                         64        in        double
// %PORT  AN132                         64        in        double
// %PORT  AN133                         64        in        double
// %PORT  AN140                         64        in        double
// %PORT  AN141                         64        in        double
// %PORT  AN142                         64        in        double
// %PORT  AN143                         64        in        double
// %PORT  AN150                         64        in        double
// %PORT  AN151                         64        in        double
// %PORT  AN152                         64        in        double
// %PORT  AN153                         64        in        double
// %PORT  AN160                         64        in        double
// %PORT  AN161                         64        in        double
// %PORT  AN162                         64        in        double
// %PORT  AN163                         64        in        double
// %PORT  AN170                         64        in        double
// %PORT  AN171                         64        in        double
// %PORT  AN172                         64        in        double
// %PORT  AN173                         64        in        double
// %PORT  AN180                         64        in        double
// %PORT  AN181                         64        in        double
// %PORT  AN200                         64        in        double
// %PORT  AN201                         64        in        double
// %PORT  AN202                         64        in        double
// %PORT  AN203                         64        in        double
// %PORT  AN210                         64        in        double
// %PORT  AN211                         64        in        double
// %PORT  AN212                         64        in        double
// %PORT  AN213                         64        in        double
// %PORT  AN220                         64        in        double
// %PORT  AN221                         64        in        double
// %PORT  AN222                         64        in        double
// %PORT  AN223                         64        in        double
// %PORT  AN230                         64        in        double
// %PORT  AN231                         64        in        double
// %PORT  AN232                         64        in        double
// %PORT  AN233                         64        in        double
// %PORT  AN240                         64        in        double
// %PORT  AN241                         64        in        double
// %PORT  AN242                         64        in        double
// %PORT  AN243                         64        in        double
// %PORT  AN250                         64        in        double
// %PORT  AN251                         64        in        double
// %PORT  AN252                         64        in        double
// %PORT  AN253                         64        in        double
// %PORT  AN260                         64        in        double
// %PORT  AN261                         64        in        double
// %PORT  AN262                         64        in        double
// %PORT  AN263                         64        in        double
// %PORT  AN270                         64        in        double
// %PORT  AN271                         64        in        double
// %PORT  IFVCH0                        7         in        sc_uint
// %PORT  IFVCH1                        7         in        sc_uint
// %PORT  IFVCH2                        7         in        sc_uint
// %PORT  IFRD0                         1         in        bool
// %PORT  IFRD1                         1         in        bool
// %PORT  IFRD2                         1         in        bool
// %PORT  IFRE0                         1         in        bool
// %PORT  IFRE1                         1         in        bool
// %PORT  IFRE2                         1         in        bool
// %PORT  INT_AD00                      1         out       bool
// %PORT  INT_AD01                      1         out       bool
// %PORT  INT_AD02                      1         out       bool
// %PORT  INT_AD03                      1         out       bool
// %PORT  INT_AD04                      1         out       bool
// %PORT  INT_AD10                      1         out       bool
// %PORT  INT_AD11                      1         out       bool
// %PORT  INT_AD12                      1         out       bool
// %PORT  INT_AD13                      1         out       bool
// %PORT  INT_AD14                      1         out       bool
// %PORT  INT_AD20                      1         out       bool
// %PORT  INT_AD21                      1         out       bool
// %PORT  INT_AD22                      1         out       bool
// %PORT  INT_AD23                      1         out       bool
// %PORT  INT_AD24                      1         out       bool
// %PORT  INT_MPX0                      1         out       bool
// %PORT  INT_MPX1                      1         out       bool
// %PORT  INT_MPX2                      1         out       bool
// ##%PORT  INT_ADE0                      1         out       bool
// ##%PORT  INT_ADE1                      1         out       bool
// %PORT  ADPE0                         1         out       bool
// %PORT  ADPE1                         1         out       bool
// %PORT  ADPE2                         1         out       bool
// %PORT  ADEND00                       1         out       bool
// %PORT  ADEND01                       1         out       bool
// %PORT  ADEND02                       1         out       bool
// %PORT  ADEND03                       1         out       bool
// %PORT  ADEND04                       1         out       bool
// %PORT  ADEND10                       1         out       bool
// %PORT  ADEND11                       1         out       bool
// %PORT  ADEND12                       1         out       bool
// %PORT  ADEND13                       1         out       bool
// %PORT  ADEND14                       1         out       bool
// %PORT  ADEND20                       1         out       bool
// %PORT  ADEND21                       1         out       bool
// %PORT  ADEND22                       1         out       bool
// %PORT  ADEND23                       1         out       bool
// %PORT  ADEND24                       1         out       bool
// %PORT  ULE_LPS0                      8         out       uint8_t
// %PORT  ULE_LPS1                      8         out       uint8_t
// %PORT  ULE_LPS2                      8         out       uint8_t
// %PORT  INT_ERR0                      1         out       bool
// %PORT  INT_ERR1                      1         out       bool
// %PORT  INT_ERR2                      1         out       bool
// #%PORT  INT_UL0                       1         out       bool
// #%PORT  INT_UL1                       1         out       bool
// #%PORT  INT_SD0                       1         out       bool
// #%PORT  INT_SD1                       1         out       bool
// %PORT  ADC0_IFDATA                   16        out       sc_uint
// %PORT  ADC1_IFDATA                   16        out       sc_uint
// %PORT  ADC2_IFDATA                   16        out       sc_uint
// %PORT  DFREQ0                        1         out       bool
// %PORT  DFREQ1                        1         out       bool
// %PORT  DFREQ2                        1         out       bool
// #%PORT  ASREQ0                        1         out       bool
// #%PORT  ASREQ1                        1         out       bool
// %PORT  DFTAG0                        4         out       sc_uint
// %PORT  DFTAG1                        4         out       sc_uint
// %PORT  DFTAG2                        4         out       sc_uint
// %PORT  DFDATA0                       16        out       sc_uint
// %PORT  DFDATA1                       16        out       sc_uint
// %PORT  DFDATA2                       16        out       sc_uint
// %PORT  PVCR_VALUE0                   32        in        uint32_t
// %PORT  PVCR_VALUE1                   32        in        uint32_t
// %PORT  PVCR_VALUE2                   32        in        uint32_t
// %PORT  PVCR_TRG0                     1         in        bool
// %PORT  PVCR_TRG1                     1         in        bool
// %PORT  PVCR_TRG2                     1         in        bool
// %PORT  PVCR_END0                     1         in        bool
// %PORT  PVCR_END1                     1         in        bool
// %PORT  PVCR_END2                     1         in        bool
// %PORT  PVCR_PWDDR0                   16        in        uint16_t
// %PORT  PVCR_PWDDR1                   16        in        uint16_t
// %PORT  PVCR_PWDDR2                   16        in        uint16_t
// %PORT  *VCEND0[96]                   1         out       bool
// %PORT  PWM_VCEND0                    1         out       bool
// %PORT  VCULMO0                       1         out       bool
// %PORT  VCLLMO0                       1         out       bool
// %PORT  *VCEND1[96]                   1         out       bool
// %PORT  PWM_VCEND1                    1         out       bool
// %PORT  VCULMO1                       1         out       bool
// %PORT  VCLLMO1                       1         out       bool
// %PORT  *VCEND2[96]                   1         out       bool
// %PORT  PWM_VCEND2                    1         out       bool
// %PORT  VCULMO2                       1         out       bool
// %PORT  VCLLMO2                       1         out       bool
// %PORT  MPXCUR0                       3         out       sc_uint
// %PORT  MPXCUR1                       3         out       sc_uint
// %PORT  MPXCUR2                       3         out       sc_uint
// %PORT  SV_MODE                       1         in        bool
// 
// ####################################################
// ## For Registers
// ####################################################
// %MODULE sarad_u2a
//     #              name     offset_size  
//     %%REG_INSTANCE reg_def  11           
// 
// %REG_CHANNEL   reg_def
//      %%TITLE    name        reg_name     wsize     rsize     length   offset   factor_start   factor_end    factor_index    factor_step  init        access  support  callback
//      %%REG      ADSYNSTCR   ADSYNSTCR    8|16|32   8|16|32   8        0x610    -              -             -               -            0           W|R     TRUE     -
//      %%REG      ADTSYNSTCR  ADTSYNSTCR   8|16|32   8|16|32   8        0x614    -              -             -               -            0           W|R     TRUE     - 
//      %%REG      VMONVDCR1   VMONVDCR1    8|16|32   8|16|32   8        0x740    -              -             -               -            0           W|R     TRUE     -
//      %%REG      VMONVDCR2   VMONVDCR2    8|16|32   8|16|32   8        0x744    -              -             -               -            0           W|R     TRUE     - 
// 
// %REG_NAME  ADSYNSTCR 
//    %%TITLE     name       upper   lower     init    access      support     callback    
//    %%BIT       ADSTART    0        0        0       W|R         TRUE        W
// 
// %REG_NAME  ADTSYNSTCR
//    %%TITLE     name       upper   lower     init    access      support     callback    
//    %%BIT       ADTSTART   0        0        0       W|R         TRUE        W
// 
// %REG_NAME  VMONVDCR1
//    %%TITLE     name       upper   lower     init    access      support     callback  
//    %%BIT       VDE1       0       0         0       W|R         TRUE        W
// 
// %REG_NAME  VMONVDCR2
//    %%TITLE     name       upper   lower     init    access      support     callback 
//    %%BIT       VDE2       0       0         0       W|R         TRUE        W
// 
// ####################################################
// ## For command I/F
// ####################################################
// %CMD_BASEID  tgt reg
// %CMD_NODUMP_API EnableInsertInput EnableDumpResult DumpProfile ClearProfile AssertReset
// %CMD_RW DumpInterrupt      <enable: bool=false>             @ Display interrupt information when interrupt get set[ns]
// %CMD_RW EnableConvertInfo  <enable: bool=false>             @ Display AD convert activity
// 
// %CMD_RW Avrefh0_Val        <Avrefh0: double=3.3>            @ Reference voltage of AVREFH0
// %CMD_RW Avrefh1_Val        <Avrefh1: double=3.3>            @ Reference voltage of AVREFH1
// %CMD_RW Avrefh2_Val        <Avrefh2: double=3.3>            @ Reference voltage of AVREFH2
// %CMD_RW AVcc0              <AVcc0: double=3.3>              @ Reference voltage of AVCC0
// %CMD_RW AVcc1              <AVcc1: double=3.3>              @ Reference voltage of AVCC1
// %CMD_RW AVcc2              <AVcc2: double=3.3>              @ Reference voltage of AVCC2
// %CMD_RW EVcc0              <EVcc0: double=3.3>              @ Reference voltage of EVCC0
// %CMD_RW EVcc1              <EVcc1: double=3.3>              @ Reference voltage of EVCC1
// %CMD_RW EVcc2              <EVcc2: double=3.3>              @ Reference voltage of EVCC2
// 
// %CMD_RW tTSPL              <tTSPL: double=27>               @ Number of sampling cycles in T&H circuit (AD clock)
// %CMD_RW tTHSD              <tTHSD: double=5>                @ Delay time from detecting a hold trigger until starting to hold an analog input (AD clock)
// %CMD_RW tTHLD              <tTHLD: double=10>               @ Delay time from starting to hold an analog input until starting AD conversion (AD clock)
// %CMD_RW ExSmpt             <ExSmpt: unsigned int=60>        @ Default number of extended sampling cycles in AD conversion (AD clock)
// %CMD_RW Smpt               <Smpt: unsigned int=18>          @ Default number of sampling cycles in AD conversion (AD clock)
// %CMD_RW tSAR               <tSAR: double=0>                 @ Successive approximation AD convert cycle (AD clock)
// %CMD_RW tD                 <tD: double=0>                   @ Delay time until starting scan group (APB clock)
// %CMD_RW tED                <tED: double=0>                  @ Delay time until complete scan group (APB clock)
// 
// %CMD_RW ForcedIdError0     <enable: bool=false>             @ The ID error occurs forcibly into ADCA0 when writting DRn
// %CMD_RW ForcedIdError1     <enable: bool=false>             @ The ID error occurs forcibly into ADCA1 when writting DRn
// %CMD_RW ForcedIdError2     <enable: bool=false>             @ The ID error occurs forcibly into ADCA2 when writting DRn
// %CMD_RW ForcedParityError0 <enable: bool=false>             @ The parity error occurs forcibly into ADCA0 when reading DRn or DIRn
// %CMD_RW ForcedParityError1 <enable: bool=false>             @ The parity error occurs forcibly into ADCA1 when reading DRn or DIRn
// %CMD_RW ForcedParityError2 <enable: bool=false>             @ The parity error occurs forcibly into ADCA2 when reading DRn or DIRn
// %CMD_RW ForcedOpenError0   <enable: bool=false>             @ The open circuit error occurs forcibly into ADCA0 when VCRn.PUE or PDE is 1
// %CMD_RW ForcedOpenError1   <enable: bool=false>             @ The open circuit error occurs forcibly into ADCA1 when VCRn.PUE or PDE is 1
// %CMD_RW ForcedOpenError2   <enable: bool=false>             @ The open circuit error occurs forcibly into ADCA2 when VCRn.PUE or PDE is 1
// %CMD_RW ForcedBreak0       <enable: bool=false>             @ The break circuit error occurs forcibly into ADCA0 when ODCR.ODDE = 1
// %CMD_RW ForcedBreak1       <enable: bool=false>             @ The break circuit error occurs forcibly into ADCA1 when ODCR.ODDE = 1
// %CMD_RW ForcedBreak2       <enable: bool=false>             @ The break circuit error occurs forcibly into ADCA2 when ODCR.ODDE = 1
// %CMD_RW ForcedDataPathError0       <enable: bool=false>             @ The data path error occurs forcibly into ADCA0
// %CMD_RW ForcedDataPathError1       <enable: bool=false>             @ The data path error occurs forcibly into ADCA1
// %CMD_RW ForcedDataPathError2       <enable: bool=false>             @ The data path error occurs forcibly into ADCA2
// 
// #%CMD_RW StartAddrADCA0     <addr: unsigned int=0x1000>      @ The start address of ADCA0 module
// #%CMD_RW StartAddrADCA1     <addr: unsigned int=0x2000>      @ The start address of ADCA1 module
// #%CMD_RW StartAddrADCA2     <addr: unsigned int=0x3000>      @ The start address of ADCA2 module
// #%CMD_RW EndAddressADCA0    <addr: unsigned int=0x1FFF>      @ The end address of ADCA0 module
// #%CMD_RW EndAddressADCA1    <addr: unsigned int=0x2FFF>      @ The end address of ADCA1 module
// #%CMD_RW EndAddressADCA2    <addr: unsigned int=0x3FFF>      @ The end address of ADCA2 module
// #%CMD_RW OffsetAddMask      <addr: unsigned int=0x7FFF>      @ The offset address mask
// 
// %CMD_RW EnableTimeCalculation   <enable: bool=true>         @ Enable using formula to calculate the delay times
// 
// %CMD_RW AVccMax            <AVccMax: double=3.6>            @ The maximum value of AVCCm
// %CMD_RW AVccMin            <AVccMin: double=3>              @ The minimum value of AVCCm
// %CMD_RW EVccMax            <EVccMax: double=3.6>            @ The maximum value of EVCCm
// %CMD_RW EVccMin            <EVccMin: double=3>              @ The minimum value of EVCCm
// %CMD_RW AvrefhMin          <AvrefhMin: double=3>            @ The minimum value of Avrefhm
// 
// %CMD_ACTION DumpStatInfo : void @ Dump the statistical information about SAR model activity
// %CMD_ACTION SetCLKfreq <clk_name: std::string> <clk_freq: double>: void @ Setup the new clock frequency
// %CMD_ACTION AssertPReset <start_time: double> <period: double>: void @ Assert preset_n for ADC0 and ADC2
// %CMD_ACTION AssertADReset <start_time: double> <period: double>: void @ Assert RESETAD_N for ADC0 and ADC2
// %CMD_ACTION AssertPReset2 <start_time: double> <period: double>: void @ Assert preset_n for ADC2
// %CMD_ACTION AssertADReset2 <start_time: double> <period: double>: void @ Assert RESETAD_N for ADC2
// %CMD_ACTION AssignTHCircuit <adc_index: unsigned int> <th_channel: unsigned int> <group_channel: unsigned int> <physic_channel: unsigned int>: void @ Assign the T&H channel to corresponding analog channel
// 
////////////////////////////////////////////////////////////////////////////////
/// @file sarad_u2a_regif.cpp
/// @brief Register IF class of model SARAD_U2A
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "sarad_u2a_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Csarad_u2a_regif::Csarad_u2a_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0x745)
    #endif
{
    CommandInit();
    ADSYNSTCR  = new vpcl::re_register(0x0610, this, "ADSYNSTCR" , name.c_str());
    ADTSYNSTCR = new vpcl::re_register(0x0614, this, "ADTSYNSTCR", name.c_str());
    VMONVDCR1  = new vpcl::re_register(0x0740, this, "VMONVDCR1" , name.c_str());
    VMONVDCR2  = new vpcl::re_register(0x0744, this, "VMONVDCR2" , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<11];
    for (uint i = 0; i < (1<<11); i++) {
        mRegMap[i] = (1<<11);
    }

    mRegMap[0x0610]     = index++;
    mRegMap[0x0614]     = index++;
    mRegMap[0x0740]     = index++;
    mRegMap[0x0744]     = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(ADSYNSTCR   , mCurReg, 0,  1, "8|16|32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(ADSYNSTCR   , mCurReg, 0,  1, "8|16|32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(ADTSYNSTCR  , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VMONVDCR1   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VMONVDCR2   , mCurReg, 0,  1, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*ADSYNSTCR   ) ( 0,  0, "ADSTART" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ADTSYNSTCR  ) ( 0,  0, "ADTSTART", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*VMONVDCR1   ) ( 0,  0, "VDE1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*VMONVDCR2   ) ( 0,  0, "VDE2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ADSYNSTCR"]["ADSTART" ] = &Csarad_u2a_regif::cb_ADSYNSTCR_ADSTART;
    mWrCbAPI["ADTSYNSTCR"]["ADTSTART"] = &Csarad_u2a_regif::cb_ADTSYNSTCR_ADTSTART;
    mWrCbAPI["VMONVDCR1"]["VDE1"    ] = &Csarad_u2a_regif::cb_VMONVDCR1_VDE1;
    mWrCbAPI["VMONVDCR2"]["VDE2"    ] = &Csarad_u2a_regif::cb_VMONVDCR2_VDE2;

    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Csarad_u2a_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Csarad_u2a_regif::~Csarad_u2a_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Csarad_u2a_regif::uint Csarad_u2a_regif::bit_select(cuint val,    ///< [in] Writting address
                                                    cuint start,  ///< [in] start bit position
                                                    cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csarad_u2a_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                              const unsigned char *p_data,   ///< [in] Writing data
                              cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csarad_u2a_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                              unsigned char *p_data,   ///< [out] Reading data
                              cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csarad_u2a_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                  const unsigned char *p_data,   ///< [in] Writing data
                                  cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csarad_u2a_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                  unsigned char *p_data,   ///< [out] Reading data
                                  cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csarad_u2a_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                      const unsigned char *p_data,  ///< [in] Writing data
                                      cuint size,                   ///< [in] Data size (byte)
                                      bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 11-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csarad_u2a_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                      unsigned char *p_data,   ///< [out] Reading data
                                      cuint size,              ///< [in]  Data size (byte)
                                      bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 11-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Csarad_u2a_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                   unsigned char *p_data,          ///< [out] Reading data
                                   cuint size,                     ///< [in]  Data size (byte)
                                   cuint reg_index,                ///< [in]  Register index
                                   bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }

    if (mIsReset) {
        re_printf("warning", "Cannot launch call-back function during reset period\n");
    } else {
        if (size < reg_length) {
            re_printf("warning","Should read all bit in a register\n");
        }
        
        pst_data = Register->read();

    }

    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Csarad_u2a_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                   const unsigned char *p_data,      ///< [in] Writing data
                                   cuint size,                       ///< [in] Data size (byte)
                                   cuint reg_index,                  ///< [in] Register index
                                   bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Csarad_u2a_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoull((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Csarad_u2a_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Csarad_u2a_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                if (mDumpRegisterRW) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                if (mAPBAccessMode) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                if (mDumpBitInfo) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Csarad_u2a_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoull(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoull(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Csarad_u2a_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Csarad_u2a_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Csarad_u2a_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif








/// convert string to vector
/// @return vector
std::vector<std::string> Csarad_u2a_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Csarad_u2a_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Csarad_u2a_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(19)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,11, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Csarad_u2a_regif::get_reg_index(cuint access_addr)
{
    if (access_addr < (1<<11)) {
        if (mRegMap[access_addr] != (1<<11)) {
            return mRegMap[access_addr];
        }
    }
    return -1;
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Csarad_u2a_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Csarad_u2a_regif::next_reg_object()
{
    assert(mCurReg != NULL);
    mCurReg = mCurReg->prev;
    if (mCurReg != NULL) {
        return mCurReg->my_p;
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Csarad_u2a_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Csarad_u2a_regif::uint Csarad_u2a_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Csarad_u2a_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

}

/// Get file name and line number
/// @return none
void Csarad_u2a_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Csarad_u2a_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Csarad_u2a_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

}

#ifdef USE_CWR_SYSTEMC
unsigned char Csarad_u2a_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

unsigned char Csarad_u2a_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Csarad_u2a_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
