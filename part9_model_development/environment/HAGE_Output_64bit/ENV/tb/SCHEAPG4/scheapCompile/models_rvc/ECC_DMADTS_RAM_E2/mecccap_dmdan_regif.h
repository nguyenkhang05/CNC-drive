// -----------------------------------------------------------------------------
// $Id: mecccap_dmdan_regif.h,v 1.2 2019/03/05 04:17:12 synguyen Exp $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : mecccap_dmdan_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE mecccap_dmdan
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  8 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name                           reg_name                     wsize   rsize      length offset  factor_start    factor_end  factor_index    factor_step access   init   support  callback
//     %%REG      DA_ERRINT                     DA_ERRINT                   8|16|32 8|16|32      8      0x00    -               -           -               -           R/W      0x0     TRUE     -
//     %%REG      DA_SSTCLR                     DA_SSTCLR                   8|16|32 8|16|32      8      0x10    -               -           -               -           W        0x0     TRUE     -
//     %%REG      DA_DSTCLR                     DA_DSTCLR                   8|16|32 8|16|32      8      0x14    -               -           -               -           W        0x0     TRUE     -
//     %%REG      DA_OVFCLR                     DA_OVFCLR                   8|16|32 8|16|32      8      0x18    -               -           -               -           W        0x0     TRUE     -
//     %%REG      DA_SERSTR                     DA_SERSTR                   -       8|16|32      8      0x20    -               -           -               -           R        0x0     TRUE     -
//     %%REG      DA_DERSTR                     DA_DERSTR                   8|16|32 8|16|32      8      0x24    -               -           -               -           R        0x0     TRUE     -
//     %%REG      DA_OVFSTR                     DA_OVFSTR                   8|16|32 8|16|32      8      0x28    -               -           -               -           R        0x0     TRUE     -
//     %%REG      DA_SERINF                     DA_SERINF                   8|16|32 8|16|32      8      0x30    -               -           -               -           R        0x0     TRUE     -
//     %%REG      DA_nSEADR                     DA_nSEADR                   -       8|16|32      32     0x70    0               31          -               4           R        0x0     TRUE     -
//     %%REG      DA_00DEADR                    DA_00DEADR                  -       8|16|32      32     0xF0    -               -           -               -           R        0x0     TRUE     -
//     
// %REG_NAME DA_ERRINT                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SEOVFIE            7        7      1       R|W     TRUE        -
//     %%BIT    DEDIE              1        1      1       R|W     TRUE        -
//     %%BIT    SEDIE              0        0      1       R|W     TRUE        -
// 
// %REG_NAME DA_SSTCLR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SSTCLR00           0        0      0       W       TRUE        W
// 
// %REG_NAME DA_DSTCLR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DSTCLR00           0        0      0       W       TRUE        W
// 
// %REG_NAME DA_OVFCLR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SERROVFCLR1        1        1      0       W       TRUE        -
//     %%BIT    SERROVFCLR0        0        0      0       W       TRUE        W
// 
// %REG_NAME DA_SERSTR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SEDF00             0        0      0       R       TRUE        -
// 
// %REG_NAME DA_DERSTR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DEDF00             1        1      0       R       TRUE        -
// 
// %REG_NAME DA_OVFSTR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SERROVF1           1        1      0       R       TRUE        -
//     %%BIT    SERROVF0           0        0      0       R       TRUE        -
// 
// %REG_NAME DA_SERINF                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SEDLINF00          0        0      0       R       TRUE        -
// 
// %REG_NAME DA_nSEADR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SEDL               31       27     0       R       TRUE        -
//     %%BIT    SEADR0             26       2      0       R       TRUE        -
// 
// %REG_NAME DA_00DEADR                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DEDL               31       27     0       R       TRUE        -
//     %%BIT    DEADR0             26       2      0       R       TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file mecccap_dmdan_regif.h
/// @brief Register IF class of model MECCCAP_DMDAN
/// $Id: mecccap_dmdan_regif.h,v 1.2 2019/03/05 04:17:12 synguyen Exp $
/// $Date: 2019/03/05 04:17:12 $
/// $Revison$
/// $Author: synguyen $
////////////////////////////////////////////////////////////////////////////////
#ifndef __MECCCAP_DMDAN_REGIF_H__
#define __MECCCAP_DMDAN_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of MECCCAP_DMDAN model
class Cmecccap_dmdan_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_DA_nSEADR  = 32
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cmecccap_dmdan_regif(std::string name, uint buswidth);
    ~Cmecccap_dmdan_regif();

protected:
    vpcl::re_register *DA_ERRINT ;
    vpcl::re_register *DA_SSTCLR ;
    vpcl::re_register *DA_DSTCLR ;
    vpcl::re_register *DA_OVFCLR ;
    vpcl::re_register *DA_SERSTR ;
    vpcl::re_register *DA_DERSTR ;
    vpcl::re_register *DA_OVFSTR ;
    vpcl::re_register *DA_SERINF ;
    vpcl::re_register *DA_nSEADR [32];
    vpcl::re_register *DA_00DEADR;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_DA_ERRINT_;
    scml2::reg<uint>      *CW_DA_SSTCLR_;
    scml2::reg<uint>      *CW_DA_DSTCLR_;
    scml2::reg<uint>      *CW_DA_OVFCLR_;
    scml2::reg<uint>      *CW_DA_SERSTR_;
    scml2::reg<uint>      *CW_DA_DERSTR_;
    scml2::reg<uint>      *CW_DA_OVFSTR_;
    scml2::reg<uint>      *CW_DA_SERINF_;
    scml2::bitfield<uint> *CW_DA_ERRINT ;
    scml2::bitfield<uint> *CW_DA_SSTCLR ;
    scml2::bitfield<uint> *CW_DA_DSTCLR ;
    scml2::bitfield<uint> *CW_DA_OVFCLR ;
    scml2::bitfield<uint> *CW_DA_SERSTR ;
    scml2::bitfield<uint> *CW_DA_DERSTR ;
    scml2::bitfield<uint> *CW_DA_OVFSTR ;
    scml2::bitfield<uint> *CW_DA_SERINF ;
    scml2::reg<uint>      *CW_DA_nSEADR [32];
    scml2::reg<uint>      *CW_DA_00DEADR;
    #endif

    uint DA_ERRINT_SEOVFIE;
    uint DA_ERRINT_DEDIE;
    uint DA_ERRINT_SEDIE;
    uint DA_SSTCLR_SSTCLR00;
    uint DA_DSTCLR_DSTCLR00;
    uint DA_OVFCLR_SERROVFCLR1;
    uint DA_OVFCLR_SERROVFCLR0;
    uint DA_SERSTR_SEDF00;
    uint DA_DERSTR_DEDF00;
    uint DA_OVFSTR_SERROVF1;
    uint DA_OVFSTR_SERROVF0;
    uint DA_SERINF_SEDLINF00;
    uint DA_nSEADR_SEDL[32];
    uint DA_nSEADR_SEADR0[32];
    uint DA_00DEADR_DEDL;
    uint DA_00DEADR_DEADR0;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DA_SSTCLR_SSTCLR00(RegCBstr str) = 0;
    virtual void cb_DA_DSTCLR_DSTCLR00(RegCBstr str) = 0;
    virtual void cb_DA_OVFCLR_SERROVFCLR0(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cmecccap_dmdan_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cmecccap_dmdan_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__MECCCAP_DMDAN_REG_DEF_H__
