// -----------------------------------------------------------------------------
// $Id: hwcore_adtrg_regif.cpp,v 1.5 2020/10/23 02:46:01 huepham Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : hwcore_adtrg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_ADTRG
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE     name                 reg_name               wsize       rsize      length       offset     factor_start    factor_end  factor_index    factor_step      access   init           support  callback
//     %%REG       ADCTR                 ADCTR                   8         8|16|32       8           0x180          -              -          -               -              R|W    0x00             TRUE      -
//     %%REG       SMCTR                 SMCTR                   8         8|16|32       8           0x181          -              -          -               -              R|W    0x00             TRUE      -
//     %%REG       ADSFTTRG              ADSFTTRG                8         8|16|32       8           0x182          -              -          -               -              R|W    0x00             TRUE       W
//     %%REG       ADSMTRG               ADSMTRG                32         8|16|32      32           0x184          -              -          -               -              R|W    0x00000000       TRUE       -
//     %%REG       ADSMOFS               ADSMOFS                32         8|16|32      32           0x188          -              -          -               -              R|W    0x00000000       TRUE       -
//     %%REG       ADTRGM                ADTRGM                 16         8|16|32      16           0x18C          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADTRGCTR              ADTRGCTR               8          8|16|32       8           0x190          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       TRGGCM                TRGGCM                 16         8|16|32      16           0x194          -              -          -               -              R|W    0x3000           TRUE       -
//     %%REG       ADEDM                 ADEDM                  16         8|16|32      16           0x198          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMWCTR               ADMWCTR                8          8|16|32       8           0x19C          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADMOFS2               ADMOFS2                16         8|16|32      16           0x1A0          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMNCNT               ADMNCNT                16         8|16|32      16           0x1A4          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMNMON               ADMNMON                -          8|16|32      16           0x1A6          -              -          -               -              R      0x0000           TRUE       -
//     %%REG       ADBUFSEL              ADBUFSEL               8          8|16|32      8            0x1AC          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADENDCTR              ADENDCTR               8          8|16|32      8            0x1AD          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADDCNT                ADDCNT                 32         8|16|32      32           0x1B0          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       RDDCNT                RDDCNT                 32         8|16|32      32           0x1B4          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADTRG                 ADTRG                  8|16       8|16|32      16           0x1B8          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADMON                 ADMON                  -          8|16|32      16           0x1BC          -              -          -               -              R      0x00             TRUE       -
//     %%REG       ADMONC                ADMONC                 8|16       8|16|32      16           0x1C0          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       THTE                  THTE                   -          8|16|32      16           0x1C4          -              -          -               -              R      0x00             TRUE       -
//     %%REG       THTR                  THTR                   -          8|16|32      16           0x1C6          -              -          -               -              R      0x00             TRUE       -
//     %%REG       AD                    AD                     16         8|16|32      16           0x1C8          0              2          -               0x2            R|W    0x00             TRUE       W
// 
// %REG_NAME ADCTR
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IE4                 2      2     0x0          R|W      TRUE           -
//     %%BIT       IE3                 1      1     0x0          R|W      TRUE           -
//     %%BIT       ADRM                0      0     0x0          R|W      TRUE           -
//                                                                                 
// %REG_NAME SMCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMVEN                1      1     0x0          R|W      TRUE           -
//     %%BIT       SMMEN                0      0     0x0          R|W      TRUE           -
// 
//                                                                                 
// %REG_NAME ADSFTTRG                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SFTAD                0     0     0x0          R|W      TRUE            W
//                                  
// %REG_NAME ADSMTRG              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMNUM                27     24   0x0          R|W      TRUE            -
//     %%BIT       SMCNT                17      0   0x0          R|W      TRUE            -
//                                                                                     
// %REG_NAME ADSMOFS                                                             
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMOFS                17     0     0x0         R|W      TRUE            -
//                                                                                     
// %REG_NAME ADTRGM                                                            
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       M                   15     0     0x0           R|W      TRUE           -
//                                                                                  
// %REG_NAME TRGGCM                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       TRGSEL              13     12   0x3           R|W      TRUE           -
//     %%BIT       TRG0SEL              8      8   0x0            R|W      TRUE           -
//     %%BIT       TRG1CNT              7      4   0x0            R|W      TRUE           -
//     %%BIT       TRG0CNT              3      0   0x0            R|W      TRUE           -
//                                                                                     
// %REG_NAME ADEDM                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       M                   15     0     0x0           R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMWCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       THTSEL              2       2   0x0            R|W      TRUE           -
//     %%BIT       MTRGSEL             1       1   0x0            R|W      TRUE           -
//     %%BIT       EN                  0       0   0x0            R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMOFS2                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                15     0     0x0000        R|W      TRUE           W
//                                                                                     
// %REG_NAME ADMNCNT                                                          
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0    0x000          R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMNMON                                                             
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       MNSEL               15     15    0x0           R        TRUE           -
//     %%BIT       MNNUM               11     0     0x0           R        TRUE           -
//                                                                                     
// %REG_NAME ADBUFSEL                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       AD2BUFSEL           5      4     0x0           R|W      TRUE           -
//     %%BIT       AD1BUFSEL           3      2     0x0           R|W      TRUE           -
//     %%BIT       AD0BUFSEL           1      0     0x0           R|W      TRUE           W
// 
// %REG_NAME ADENDCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       ADEND               1      0     0x0           R|W      TRUE           W
//     
// %REG_NAME ADDCNT                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       ADDATA              17     0     0x0           R|W      TRUE           -  
// 
// %REG_NAME RDDCNT                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       RDDATA              17     0     0x0           R|W      TRUE           -   
//     
// %REG_NAME ADTRG                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WAD              10     10    0x0           R|W      TRUE           -  
//     %%BIT       IR3VAD              9      9     0x0           R|W      TRUE           -  
//     %%BIT       IR3UAD              8      8     0x0           R|W      TRUE           -  
//     %%BIT       CMPVSL              5      5     0x0           R|W      TRUE           -  
//     %%BIT       CMPMSL              4      4     0x0           R|W      TRUE           -  
//     %%BIT       CMPAD               2      2     0x0           R|W      TRUE           -  
//     %%BIT       CAVALAD             1      1     0x0           R|W      TRUE           -  
//     %%BIT       CAMOUAD             0      0     0x0           R|W      TRUE           -  
// 
// %REG_NAME ADMON                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WADM             10     10    0x0            R       TRUE           -
//     %%BIT       IR3VADM              9     9     0x0            R       TRUE           -
//     %%BIT       IR3UADM              8     8     0x0            R       TRUE           -
//     %%BIT       SFTADM               3     3     0x0            R       TRUE           -
//     %%BIT       CMPADM               2     2     0x0            R       TRUE           -
//     %%BIT       CAVALADM             1     1     0x0            R       TRUE           -
//     %%BIT       CAMOUADM             0     0     0x0            R       TRUE           -
//     
// %REG_NAME ADMONC                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WADMC            10     10    0x0           R|W      TRUE           -
//     %%BIT       IR3VADMC             9     9     0x0           R|W      TRUE           -
//     %%BIT       IR3UADMC             8     8     0x0           R|W      TRUE           -
//     %%BIT       SFTADMC              3     3     0x0           R|W      TRUE           -
//     %%BIT       CMPADMC              2     2     0x0           R|W      TRUE           -
//     %%BIT       CAVALADMC            1     1     0x0           R|W      TRUE           -
//     %%BIT       CAMOUADMC            0     0     0x0           R|W      TRUE           W
//                                                               
// %REG_NAME THTE                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R        TRUE           -    
// 
// %REG_NAME THTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R        TRUE           -    
// 
// %REG_NAME AD                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R|W        TRUE         W      
// 
// %REG_NAME ADTRGCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       GCMEN               0      0     0x0           R|W        TRUE         -      
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_adtrg_regif.cpp
/// @brief Register IF class of model HWCORE_ADTRG
/// $Id: hwcore_adtrg_regif.cpp,v 1.5 2020/10/23 02:46:01 huepham Exp $
/// $Date: 2020/10/23 02:46:01 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#include "hwcore_adtrg_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
// Ref: {HWCORE_ADTRG_UD_ATT1_008, HWCORE_ADTRG_UD_ATT1_009, HWCORE_ADTRG_UD_Register_001, HWCORE_ADTRG_UD_Register_002, HWCORE_ADTRG_UD_Register_003, HWCORE_ADTRG_UD_Register_004, HWCORE_ADTRG_UD_Register_005, HWCORE_ADTRG_UD_Register_006, HWCORE_ADTRG_UD_Register_007, HWCORE_ADTRG_UD_Register_008, HWCORE_ADTRG_UD_Register_009, HWCORE_ADTRG_UD_Register_010, HWCORE_ADTRG_UD_Register_011, HWCORE_ADTRG_UD_Register_012, HWCORE_ADTRG_UD_Register_013, HWCORE_ADTRG_UD_Register_014, HWCORE_ADTRG_UD_Register_015, HWCORE_ADTRG_UD_Register_016, HWCORE_ADTRG_UD_Register_017, HWCORE_ADTRG_UD_Register_018, HWCORE_ADTRG_UD_Register_019, HWCORE_ADTRG_UD_Register_020, HWCORE_ADTRG_UD_Register_021, HWCORE_ADTRG_UD_Register_022, HWCORE_ADTRG_UD_Register_023, HWCORE_ADTRG_UD_Register_024, HWCORE_ADTRG_UD_Direction_015, HWCORE_ADTRG_UD_Direction_016, HWCORE_ADTRG_UD_Direction_017, HWCORE_ADTRG_UD_Direction_019, HWCORE_ADTRG_UD_Direction_020, HWCORE_ADTRG_UD_Direction_021, HWCORE_ADTRG_UD_Direction_022, HWCORE_ADTRG_UD_Direction_027, HWCORE_ADTRG_UD_Direction_031, HWCORE_ADTRG_UD_Direction_033, HWCORE_ADTRG_UD_Direction_038}
Chwcore_adtrg_regif::Chwcore_adtrg_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", 0x1D0)
    #endif
{
    CommandInit();
    ADCTR    = new vpcl::re_register(0x0180, this, "ADCTR"   , name.c_str());
    SMCTR    = new vpcl::re_register(0x0181, this, "SMCTR"   , name.c_str());
    ADSFTTRG = new vpcl::re_register(0x0182, this, "ADSFTTRG", name.c_str());
    ADSMTRG  = new vpcl::re_register(0x0184, this, "ADSMTRG" , name.c_str());
    ADSMOFS  = new vpcl::re_register(0x0188, this, "ADSMOFS" , name.c_str());
    ADTRGM   = new vpcl::re_register(0x018C, this, "ADTRGM"  , name.c_str());
    ADTRGCTR = new vpcl::re_register(0x0190, this, "ADTRGCTR", name.c_str());
    TRGGCM   = new vpcl::re_register(0x0194, this, "TRGGCM"  , name.c_str());
    ADEDM    = new vpcl::re_register(0x0198, this, "ADEDM"   , name.c_str());
    ADMWCTR  = new vpcl::re_register(0x019C, this, "ADMWCTR" , name.c_str());
    ADMOFS2  = new vpcl::re_register(0x01A0, this, "ADMOFS2" , name.c_str());
    ADMNCNT  = new vpcl::re_register(0x01A4, this, "ADMNCNT" , name.c_str());
    ADMNMON  = new vpcl::re_register(0x01A6, this, "ADMNMON" , name.c_str());
    ADBUFSEL = new vpcl::re_register(0x01AC, this, "ADBUFSEL", name.c_str());
    ADENDCTR = new vpcl::re_register(0x01AD, this, "ADENDCTR", name.c_str());
    ADDCNT   = new vpcl::re_register(0x01B0, this, "ADDCNT"  , name.c_str());
    RDDCNT   = new vpcl::re_register(0x01B4, this, "RDDCNT"  , name.c_str());
    ADTRG    = new vpcl::re_register(0x01B8, this, "ADTRG"   , name.c_str());
    ADMON    = new vpcl::re_register(0x01BC, this, "ADMON"   , name.c_str());
    ADMONC   = new vpcl::re_register(0x01C0, this, "ADMONC"  , name.c_str());
    THTE     = new vpcl::re_register(0x01C4, this, "THTE"    , name.c_str());
    THTR     = new vpcl::re_register(0x01C6, this, "THTR"    , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_AD; i++) {
        str_tmp.str("");
        str_tmp<<"AD"<< i;
        AD      [i] = new vpcl::re_register((0x01C8) + 2*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0180]     = index++;
    mRegMap[0x0181]     = index++;
    mRegMap[0x0182]     = index++;
    mRegMap[0x0184]     = index;
    mRegMap[0x0184 + 1] = index;
    mRegMap[0x0184 + 2] = index;
    mRegMap[0x0184 + 3] = index++;
    mRegMap[0x0188]     = index;
    mRegMap[0x0188 + 1] = index;
    mRegMap[0x0188 + 2] = index;
    mRegMap[0x0188 + 3] = index++;
    mRegMap[0x018C]     = index;
    mRegMap[0x018C + 1] = index++;
    mRegMap[0x0190]     = index++;
    mRegMap[0x0194]     = index;
    mRegMap[0x0194 + 1] = index++;
    mRegMap[0x0198]     = index;
    mRegMap[0x0198 + 1] = index++;
    mRegMap[0x019C]     = index++;
    mRegMap[0x01A0]     = index;
    mRegMap[0x01A0 + 1] = index++;
    mRegMap[0x01A4]     = index;
    mRegMap[0x01A4 + 1] = index++;
    mRegMap[0x01A6]     = index;
    mRegMap[0x01A6 + 1] = index++;
    mRegMap[0x01AC]     = index++;
    mRegMap[0x01AD]     = index++;
    mRegMap[0x01B0]     = index;
    mRegMap[0x01B0 + 1] = index;
    mRegMap[0x01B0 + 2] = index;
    mRegMap[0x01B0 + 3] = index++;
    mRegMap[0x01B4]     = index;
    mRegMap[0x01B4 + 1] = index;
    mRegMap[0x01B4 + 2] = index;
    mRegMap[0x01B4 + 3] = index++;
    mRegMap[0x01B8]     = index;
    mRegMap[0x01B8 + 1] = index++;
    mRegMap[0x01BC]     = index;
    mRegMap[0x01BC + 1] = index++;
    mRegMap[0x01C0]     = index;
    mRegMap[0x01C0 + 1] = index++;
    mRegMap[0x01C4]     = index;
    mRegMap[0x01C4 + 1] = index++;
    mRegMap[0x01C6]     = index;
    mRegMap[0x01C6 + 1] = index++;
    for(uint i = 0; i < emNUM_AD;      i++) {
        mRegMap[(0x01C8)     + i*2 ] = index;
        mRegMap[(0x01C8 + 1) + i*2 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USR_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(ADCTR     , mCurReg, 0,  1,       "8", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(ADCTR     , mCurReg, 0,  1,       "8", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(SMCTR     , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADSFTTRG  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADSMTRG   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADSMOFS   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADTRGM    , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADTRGCTR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TRGGCM    , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADEDM     , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMWCTR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMOFS2   , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMNCNT   , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMNMON   , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADBUFSEL  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADENDCTR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADDCNT    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RDDCNT    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADTRG     , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMON     , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ADMONC    , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(THTE      , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(THTR      , mCurReg, 0,  2,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_AD      ; i++) mCurReg = mRegArray[index++] = new SRegList(AD        [i], mCurReg, i,  2,      "16", "8|16|32");

    mRegList = mCurReg;

    (*ADCTR     ) ( 2,  2, "IE4"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADCTR     ) ( 1,  1, "IE3"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADCTR     ) ( 0,  0, "ADRM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMCTR     ) ( 1,  1, "SMVEN"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMCTR     ) ( 0,  0, "SMMEN"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADSFTTRG  ) ( 0,  0, "SFTAD"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADSMTRG   ) (27, 24, "SMNUM"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADSMTRG   ) (17,  0, "SMCNT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADSMOFS   ) (17,  0, "SMOFS"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRGM    ) (15,  0, "M"       , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRGCTR  ) ( 0,  0, "GCMEN"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TRGGCM    ) (13, 12, "TRGSEL"  , 0x3       , "R|W"   , vpcl::SPP_ENABLE);
    (*TRGGCM    ) ( 8,  8, "TRG0SEL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TRGGCM    ) ( 7,  4, "TRG1CNT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TRGGCM    ) ( 3,  0, "TRG0CNT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADEDM     ) (15,  0, "M"       , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMWCTR   ) ( 2,  2, "THTSEL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMWCTR   ) ( 1,  1, "MTRGSEL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMWCTR   ) ( 0,  0, "EN"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMOFS2   ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMNCNT   ) (11,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMNMON   ) (15, 15, "MNSEL"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMNMON   ) (11,  0, "MNNUM"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADBUFSEL  ) ( 5,  4, "AD2BUFSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADBUFSEL  ) ( 3,  2, "AD1BUFSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADBUFSEL  ) ( 1,  0, "AD0BUFSEL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADENDCTR  ) ( 1,  0, "ADEND"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADDCNT    ) (17,  0, "ADDATA"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RDDCNT    ) (17,  0, "RDDATA"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) (10, 10, "IR3WAD"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 9,  9, "IR3VAD"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 8,  8, "IR3UAD"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 5,  5, "CMPVSL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 4,  4, "CMPMSL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 2,  2, "CMPAD"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 1,  1, "CAVALAD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADTRG     ) ( 0,  0, "CAMOUAD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMON     ) (10, 10, "IR3WADM" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 9,  9, "IR3VADM" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 8,  8, "IR3UADM" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 3,  3, "SFTADM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 2,  2, "CMPADM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 1,  1, "CAVALADM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMON     ) ( 0,  0, "CAMOUADM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ADMONC    ) (10, 10, "IR3WADMC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 9,  9, "IR3VADMC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 8,  8, "IR3UADMC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 3,  3, "SFTADMC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 2,  2, "CMPADMC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 1,  1, "CAVALADMC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ADMONC    ) ( 0,  0, "CAMOUADMC", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*THTE      ) (11,  0, "DATA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*THTR      ) (11,  0, "DATA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_AD; i++) {
        (*AD        [i]) (11,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    // Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ADSFTTRG"]["SFTAD" ] = &Chwcore_adtrg_regif::cb_ADSFTTRG_SFTAD;
    mWrCbAPI["ADMOFS2"]["DATA"  ] = &Chwcore_adtrg_regif::cb_ADMOFS2_DATA;
    mWrCbAPI["ADBUFSEL"]["AD0BUFSEL"] = &Chwcore_adtrg_regif::cb_ADBUFSEL_AD0BUFSEL;
    mWrCbAPI["ADENDCTR"]["ADEND" ] = &Chwcore_adtrg_regif::cb_ADENDCTR_ADEND;
    mWrCbAPI["ADMONC"]["CAMOUADMC"] = &Chwcore_adtrg_regif::cb_ADMONC_CAMOUADMC;

    for(uint i = 0; i < emNUM_AD; i++) {
        str_tmp.str("");
        str_tmp<<"AD"<< i;
        mWrCbAPI[str_tmp.str()]["DATA"] = &Chwcore_adtrg_regif::cb_AD_DATA;
    }

    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Chwcore_adtrg_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Chwcore_adtrg_regif::~Chwcore_adtrg_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Chwcore_adtrg_regif::uint Chwcore_adtrg_regif::bit_select(cuint val,    ///< [in] Writting address
                                                          cuint start,  ///< [in] start bit position
                                                          cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chwcore_adtrg_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chwcore_adtrg_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chwcore_adtrg_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                     const unsigned char *p_data,   ///< [in] Writing data
                                     cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chwcore_adtrg_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chwcore_adtrg_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                         const unsigned char *p_data,  ///< [in] Writing data
                                         cuint size,                   ///< [in] Data size (byte)
                                         bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chwcore_adtrg_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                         unsigned char *p_data,   ///< [out] Reading data
                                         cuint size,              ///< [in]  Data size (byte)
                                         bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Chwcore_adtrg_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                      unsigned char *p_data,          ///< [out] Reading data
                                      cuint size,                     ///< [in]  Data size (byte)
                                      cuint reg_index,                ///< [in]  Register index
                                      bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }

    if (mIsReset) {
        re_printf("warning", "Cannot launch call-back function during reset period\n");
    } else {
        if (size < reg_length) {
            re_printf("warning","Should read all bit in a register\n");
        }
        
        pst_data = Register->read();

    }

    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Chwcore_adtrg_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                      const unsigned char *p_data,      ///< [in] Writing data
                                      cuint size,                       ///< [in] Data size (byte)
                                      cuint reg_index,                  ///< [in] Register index
                                      bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc) {
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Chwcore_adtrg_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoull((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Chwcore_adtrg_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Chwcore_adtrg_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                if (mDumpRegisterRW) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                if (mAPBAccessMode) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                if (mDumpBitInfo) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Chwcore_adtrg_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoull(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoull(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Chwcore_adtrg_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Chwcore_adtrg_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Chwcore_adtrg_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif








/// convert string to vector
/// @return vector
std::vector<std::string> Chwcore_adtrg_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Chwcore_adtrg_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Chwcore_adtrg_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(18)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Chwcore_adtrg_regif::get_reg_index(cuint access_addr)
{
    if (access_addr < (1<<9)) {
        if (mRegMap[access_addr] != (1<<9)) {
            return mRegMap[access_addr];
        }
    }
    return -1;
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Chwcore_adtrg_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Chwcore_adtrg_regif::next_reg_object()
{
    assert(mCurReg != NULL);
    mCurReg = mCurReg->prev;
    if (mCurReg != NULL) {
        return mCurReg->my_p;
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Chwcore_adtrg_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Chwcore_adtrg_regif::uint Chwcore_adtrg_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Chwcore_adtrg_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

}

/// Get file name and line number
/// @return none
void Chwcore_adtrg_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Chwcore_adtrg_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Chwcore_adtrg_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

}

#ifdef USR_CWR_SYSTEMC
uint Chwcore_adtrg_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Chwcore_adtrg_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Chwcore_adtrg_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
