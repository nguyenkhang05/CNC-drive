// -----------------------------------------------------------------------------
// $Id: dsadc_unit_regif.h 1398 2019-11-26 06:16:27Z chuonghoangle $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : dsadc_unit_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DSADC_UNIT
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access init        support callback
//     %%REG    DSADnVCR      DSADnVCR      8|16|32  8|16|32  32      0x00    0             7           -             -            W|R    0           TRUE    -
//     %%REG    DSADnDIR      DSADnDIR      8|16|32  8|16|32  32      0x20    0             7           -             -            R      0           TRUE    -
//     %%REG    DSADnADSTCR   DSADnADSTCR   8        8|16|32  8       0x40    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnADENDCR  DSADnADENDCR  8        8|16|32  8       0x44    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnCLBSTCR  DSADnCLBSTCR  8        8|16|32  8       0x48    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnCLBEDCR  DSADnCLBEDCR  8        8|16|32  8       0x4C    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnADTCR    DSADnADTCR    8        8|16|32  8       0x50    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnUCR      DSADnUCR      8|16|32  8|16|32  32      0x54    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnVCPTRR   DSADnVCPTRR   8        8|16|32  8       0x58    -             -           -             -            W|R    0           TRUE    W
//     %%REG    DSADnADSR     DSADnADSR     8|16|32  8|16|32  8       0x60    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnUDPTRR   DSADnUDPTRR   8|16|32  8|16|32  8       0x64    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnUDIR     DSADnUDIR     8|16|32  8|16|32  32      0x68    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnTSVAL    DSADnTSVAL    8|16|32  8|16|32  32      0x6C    -             -           -             -            R      0x007F0000  TRUE    -
//     %%REG    DSADnSFTCR    DSADnSFTCR    8        8|16|32  8       0x70    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnECR      DSADnECR      8        8|16|32  8       0x74    -             -           -             -            W      0           TRUE    W
//     %%REG    DSADnER       DSADnER       8|16|32  8|16|32  32      0x78    -             -           -             -            R      0           TRUE    -
//     %%REG    DSADnTDLVR    DSADnTDLVR    8        8|16|32  8       0x7C    -             -           -             -            W|R    0           TRUE    -
//     %%REG    DSADnULTBR    DSADnULTBR    16|32    8|16|32  32      0x80    0             3           -             -            W|R    0x7FFF8000  TRUE    -
// 
// 
// %REG_NAME DSADnVCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    GAIN        29     28     0     W|R     TRUE     -
//     %%BIT    VCULME      27     27     0     W|R     TRUE     -
//     %%BIT    VCLLME      26     26     0     W|R     TRUE     -
//     %%BIT    VCULLMTBS   25     24     0     W|R     TRUE     -
//     %%BIT    ORT         23     23     0     W|R     TRUE     -
//     %%BIT    TPVSL       22     20     0     W|R     TRUE     -
//     %%BIT    DSDFTYP     17     16     0     W|R     TRUE     -
//     %%BIT    ADIE        15     15     0     W|R     TRUE     -
//     %%BIT    ULEIE       14     14     0     W|R     TRUE     -
//     %%BIT    DFENT       12     12     0     W|R     TRUE     -
//     %%BIT    DFTAG       11     8      0     W|R     TRUE     -
//     %%BIT    CNVCLS      5      4      0     W|R     TRUE     -
//     %%BIT    GCTRL       3      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    IDEF        26     26     0     R       TRUE     -
//     %%BIT    WFLG        25     25     0     R       TRUE     -
//     %%BIT    PRTY        24     24     0     R       TRUE     -
//     %%BIT    DR          15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnADSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADST        0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnADENDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADEND       0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnCLBSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBST       0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnCLBEDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBEND      0      0      0     W       TRUE     W
// 
// %REG_NAME DSADnADTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADSTTE      6      6      0     W|R     TRUE     -
//     %%BIT    ENDTRGE     1      1      0     W|R     TRUE     -
//     %%BIT    STTRGE      0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnUCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    VPRSTE      29     29     0     W|R     TRUE     -
//     %%BIT    RDMA        28     28     0     W|R     TRUE     -
//     %%BIT    RESO0       26     26     0     W|R     TRUE     -
//     %%BIT    DFES        24     24     0     W|R     TRUE     -
//     %%BIT    DFMT        11     8      0     W|R     TRUE     -
//     %%BIT    VCEP        2      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnVCPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    VCPTR       2      0      0     W|R     TRUE     W
// 
// %REG_NAME DSADnADSR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CLBACT      1      1      0     R       TRUE     -
//     %%BIT    ADACT       0      0      0     R       TRUE     -
// 
// %REG_NAME DSADnUDPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    UDPTR       2      0      0     R       TRUE     -
// 
// %REG_NAME DSADnUDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CHNUM       31     29     0     R       TRUE     -
//     %%BIT    UIDEF       26     26     0     R       TRUE     -
//     %%BIT    UWFLG       25     25     0     R       TRUE     -
//     %%BIT    UPRTY       24     24     0     R       TRUE     -
//     %%BIT    UDR         15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnTSVAL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    TSVAL       22     16     0x7F  R       TRUE     -
//     %%BIT    TSDR        15     0      0     R       TRUE     -
// 
// %REG_NAME DSADnSFTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RDCLRE      7      7      0     W|R     TRUE     -
//     %%BIT    OWEIE       2      2      0     W|R     TRUE     -
//     %%BIT    PEIE        1      1      0     W|R     TRUE     -
//     %%BIT    IDEIE       0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnECR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ULEC        4      4      0     W       TRUE     -
//     %%BIT    LLEC        3      3      0     W       TRUE     -
//     %%BIT    OWEC        2      2      0     W       TRUE     -
//     %%BIT    PEC         1      1      0     W       TRUE     W
// 
// %REG_NAME DSADnER
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ULE         31     31     0     R       TRUE     -
//     %%BIT    LLE         30     30     0     R       TRUE     -
//     %%BIT    ULECAP      26     24     0     R       TRUE     -
//     %%BIT    OWE         23     23     0     R       TRUE     -
//     %%BIT    OWECAP      18     16     0     R       TRUE     -
//     %%BIT    PE          15     15     0     R       TRUE     -
//     %%BIT    PECAP       10     8      0     R       TRUE     -
// 
// %REG_NAME DSADnTDLVR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    AN3NLV      7      7      0     W|R     TRUE     -
//     %%BIT    AN3PLV      6      6      0     W|R     TRUE     -
//     %%BIT    AN2NLV      5      5      0     W|R     TRUE     -
//     %%BIT    AN2PLV      4      4      0     W|R     TRUE     -
//     %%BIT    AN1NLV      3      3      0     W|R     TRUE     -
//     %%BIT    AN1PLV      2      2      0     W|R     TRUE     -
//     %%BIT    AN0NLV      1      1      0     W|R     TRUE     -
//     %%BIT    AN0PLV      0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADnULTBR
//     %%TITLE  name        upper  lower  init    access  support  callback
//     %%BIT    ULMTB       31     16     0x7FFF  W|R     TRUE     -
//     %%BIT    LLMTB       15     0      0x8000  W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file dsadc_unit_regif.h
/// @brief Register IF class of model DSADC_UNIT
/// $Id: dsadc_unit_regif.h 1398 2019-11-26 06:16:27Z chuonghoangle $
/// $Date: 2019-11-26 15:16:27 +0900 (2019/11/26 (火)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#ifndef __DSADC_UNIT_REGIF_H__
#define __DSADC_UNIT_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of DSADC_UNIT model
class Cdsadc_unit_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_DSADnVCR     = 8,
        emNUM_DSADnDIR     = 8,
        emNUM_DSADnULTBR   = 4
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cdsadc_unit_regif(std::string name, uint buswidth, uint ch_num);
    ~Cdsadc_unit_regif();

protected:
    vpcl::re_register *DSADnVCR    [8];
    vpcl::re_register *DSADnDIR    [8];
    vpcl::re_register *DSADnADSTCR ;
    vpcl::re_register *DSADnADENDCR;
    vpcl::re_register *DSADnCLBSTCR;
    vpcl::re_register *DSADnCLBEDCR;
    vpcl::re_register *DSADnADTCR  ;
    vpcl::re_register *DSADnUCR    ;
    vpcl::re_register *DSADnVCPTRR ;
    vpcl::re_register *DSADnADSR   ;
    vpcl::re_register *DSADnUDPTRR ;
    vpcl::re_register *DSADnUDIR   ;
    vpcl::re_register *DSADnTSVAL  ;
    vpcl::re_register *DSADnSFTCR  ;
    vpcl::re_register *DSADnECR    ;
    vpcl::re_register *DSADnER     ;
    vpcl::re_register *DSADnTDLVR  ;
    vpcl::re_register *DSADnULTBR  [4];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_DSADnADSTCR_;
    scml2::reg<uint>      *CW_DSADnADENDCR_;
    scml2::reg<uint>      *CW_DSADnCLBSTCR_;
    scml2::reg<uint>      *CW_DSADnCLBEDCR_;
    scml2::reg<uint>      *CW_DSADnADTCR_ ;
    scml2::reg<uint>      *CW_DSADnVCPTRR_;
    scml2::reg<uint>      *CW_DSADnADSR_  ;
    scml2::reg<uint>      *CW_DSADnUDPTRR_;
    scml2::reg<uint>      *CW_DSADnSFTCR_ ;
    scml2::reg<uint>      *CW_DSADnECR_   ;
    scml2::reg<uint>      *CW_DSADnTDLVR_ ;
    scml2::reg<uint>      *CW_DSADnVCR    [8];
    scml2::reg<uint>      *CW_DSADnDIR    [8];
    scml2::bitfield<uint> *CW_DSADnADSTCR ;
    scml2::bitfield<uint> *CW_DSADnADENDCR;
    scml2::bitfield<uint> *CW_DSADnCLBSTCR;
    scml2::bitfield<uint> *CW_DSADnCLBEDCR;
    scml2::bitfield<uint> *CW_DSADnADTCR  ;
    scml2::reg<uint>      *CW_DSADnUCR    ;
    scml2::bitfield<uint> *CW_DSADnVCPTRR ;
    scml2::bitfield<uint> *CW_DSADnADSR   ;
    scml2::bitfield<uint> *CW_DSADnUDPTRR ;
    scml2::reg<uint>      *CW_DSADnUDIR   ;
    scml2::reg<uint>      *CW_DSADnTSVAL  ;
    scml2::bitfield<uint> *CW_DSADnSFTCR  ;
    scml2::bitfield<uint> *CW_DSADnECR    ;
    scml2::reg<uint>      *CW_DSADnER     ;
    scml2::bitfield<uint> *CW_DSADnTDLVR  ;
    scml2::reg<uint>      *CW_DSADnULTBR  [4];
    #endif

    uint DSADnVCR_GAIN[8];
    uint DSADnVCR_VCULME[8];
    uint DSADnVCR_VCLLME[8];
    uint DSADnVCR_VCULLMTBS[8];
    uint DSADnVCR_ORT [8];
    uint DSADnVCR_TPVSL[8];
    uint DSADnVCR_DSDFTYP[8];
    uint DSADnVCR_ADIE[8];
    uint DSADnVCR_ULEIE[8];
    uint DSADnVCR_DFENT[8];
    uint DSADnVCR_DFTAG[8];
    uint DSADnVCR_CNVCLS[8];
    uint DSADnVCR_GCTRL[8];
    uint DSADnDIR_IDEF[8];
    uint DSADnDIR_WFLG[8];
    uint DSADnDIR_PRTY[8];
    uint DSADnDIR_DR  [8];
    uint DSADnADSTCR_ADST;
    uint DSADnADENDCR_ADEND;
    uint DSADnCLBSTCR_CLBST;
    uint DSADnCLBEDCR_CLBEND;
    uint DSADnADTCR_ADSTTE;
    uint DSADnADTCR_ENDTRGE;
    uint DSADnADTCR_STTRGE;
    uint DSADnUCR_VPRSTE;
    uint DSADnUCR_RDMA;
    uint DSADnUCR_RESO0;
    uint DSADnUCR_DFES;
    uint DSADnUCR_DFMT;
    uint DSADnUCR_VCEP;
    uint DSADnVCPTRR_VCPTR;
    uint DSADnADSR_CLBACT;
    uint DSADnADSR_ADACT;
    uint DSADnUDPTRR_UDPTR;
    uint DSADnUDIR_CHNUM;
    uint DSADnUDIR_UIDEF;
    uint DSADnUDIR_UWFLG;
    uint DSADnUDIR_UPRTY;
    uint DSADnUDIR_UDR;
    uint DSADnTSVAL_TSVAL;
    uint DSADnTSVAL_TSDR;
    uint DSADnSFTCR_RDCLRE;
    uint DSADnSFTCR_OWEIE;
    uint DSADnSFTCR_PEIE;
    uint DSADnSFTCR_IDEIE;
    uint DSADnECR_ULEC;
    uint DSADnECR_LLEC;
    uint DSADnECR_OWEC;
    uint DSADnECR_PEC ;
    uint DSADnER_ULE  ;
    uint DSADnER_LLE  ;
    uint DSADnER_ULECAP;
    uint DSADnER_OWE  ;
    uint DSADnER_OWECAP;
    uint DSADnER_PE   ;
    uint DSADnER_PECAP;
    uint DSADnTDLVR_AN3NLV;
    uint DSADnTDLVR_AN3PLV;
    uint DSADnTDLVR_AN2NLV;
    uint DSADnTDLVR_AN2PLV;
    uint DSADnTDLVR_AN1NLV;
    uint DSADnTDLVR_AN1PLV;
    uint DSADnTDLVR_AN0NLV;
    uint DSADnTDLVR_AN0PLV;
    uint DSADnULTBR_ULMTB[4];
    uint DSADnULTBR_LLMTB[4];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DSADnADSTCR_ADST(RegCBstr str) = 0;
    virtual void cb_DSADnADENDCR_ADEND(RegCBstr str) = 0;
    virtual void cb_DSADnCLBSTCR_CLBST(RegCBstr str) = 0;
    virtual void cb_DSADnCLBEDCR_CLBEND(RegCBstr str) = 0;
    virtual void cb_DSADnVCPTRR_VCPTR(RegCBstr str) = 0;
    virtual void cb_DSADnECR_PEC(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cdsadc_unit_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cdsadc_unit_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;
    
    uint mCh_num;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__DSADC_UNIT_REG_DEF_H__
