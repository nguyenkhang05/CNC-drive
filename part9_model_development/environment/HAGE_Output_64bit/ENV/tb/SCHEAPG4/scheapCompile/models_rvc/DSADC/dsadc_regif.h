// ---------------------------------------------------------------------
// $Id: dsadc_regif.h 1398 2019-11-26 06:16:27Z chuonghoangle $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// ---------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : dsadc_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DSADC
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         4
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access init  support callback
//     %%REG    DSADCSYNSTCR  DSADCSYNSTCR  8        8|16|32  8       0x00    -             -           -             -            W      0     TRUE    W
//     %%REG    DSADCADGCR    DSADCADGCR    8        8|16|32  8       0x04    -             -           -             -            W|R    0     TRUE    -
//     %%REG    DSADCTDCR     DSADCTDCR     8        8|16|32  8       0x0C    -             -           -             -            W|R    0     TRUE    -
// 
// 
// %REG_NAME DSADCSYNSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ADSTART     0      0      0     W       TRUE     W
// 
// %REG_NAME DSADCADGCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ODDE        5      5      0     W|R     TRUE     -
//     %%BIT    ODE         4      4      0     W|R     TRUE     -
//     %%BIT    UNSND       0      0      0     W|R     TRUE     -
// 
// %REG_NAME DSADCTDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    TDE         0      0      0     W|R     TRUE     W
////////////////////////////////////////////////////////////////////////////////
/// @file dsadc_regif.h
/// @brief Register IF class of model DSADC
/// $Id: dsadc_regif.h 1398 2019-11-26 06:16:27Z chuonghoangle $
/// $Date: 2019-11-26 15:16:27 +0900 (2019/11/26 (ÁÅ´)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#ifndef __DSADC_REGIF_H__
#define __DSADC_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of DSADC model
class Cdsadc_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cdsadc_regif(std::string name, uint buswidth);
    ~Cdsadc_regif();

protected:
    vpcl::re_register *DSADCSYNSTCR;
    vpcl::re_register *DSADCADGCR  ;
    vpcl::re_register *DSADCTDCR   ;

    #ifdef CWR_SYSTEMC
    scml2::memory<unsigned char> cwmem;
    scml2::reg<unsigned char> *CW_DSADCSYNSTCR;
    scml2::reg<unsigned char> *CW_DSADCADGCR  ;
    scml2::reg<unsigned char> *CW_DSADCTDCR   ;
    #endif

    uint DSADCSYNSTCR_ADSTART;
    uint DSADCADGCR_ODDE;
    uint DSADCADGCR_ODE;
    uint DSADCADGCR_UNSND;
    uint DSADCTDCR_TDE;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DSADCSYNSTCR_ADSTART(RegCBstr str) = 0;
    virtual void cb_DSADCTDCR_TDE(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cdsadc_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cdsadc_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    unsigned char cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    unsigned char cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<unsigned char> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__DSADC_REG_DEF_H__
