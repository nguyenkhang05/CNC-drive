// -----------------------------------------------------------------------------
// $Id: hsif020_unit_regif.h,v 1.7 2020/04/08 07:39:39 quynhnhunguyen Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : ../../../input/rhsif/hsif020_unit_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HSIF020_UNIT
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         7
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access   init        support callback
//     %%REG    HSIFnCMD    HSIFnCMD    8|16|32     8|16|32     32    0x00          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCCT    HSIFnCCT    8|16|32     8|16|32     32    0x08          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCST    HSIFnCST    8|16|32     8|16|32     32    0x10          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCSC    HSIFnCSC    8|16|32     8|16|32     32    0x18          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCIE    HSIFnCIE    8|16|32     8|16|32     32    0x20          -             -          -            -          R|W    0x0          TRUE        -  
//     %%REG    HSIFnCAR    HSIFnCAR    8|16|32     8|16|32     32    0x28          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCWD    HSIFnCWD    8|16|32     8|16|32     32    0x30          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCRD    HSIFnCRD    8|16|32     8|16|32     32    0x38          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCEST   HSIFnCEST   8|16|32     8|16|32     32    0x60          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCESC   HSIFnCESC   8|16|32     8|16|32     32    0x68          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCEIE   HSIFnCEIE   8|16|32     8|16|32     32    0x70          -             -          -            -          R|W    0x0          TRUE        -
// 
//      
// %REG_NAME HSIFnCMD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    INME             0       0     0         R|W     TRUE     -
//     %%BIT    TNME             16      16    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCCT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CTY              4       0     0         R|W     TRUE     -
//     %%BIT    CTYW             7       7     0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RAR              0       0     0         R       TRUE     -
//     %%BIT    AKR              1       1     0         R       TRUE     -
//     %%BIT    AKE              2       2     0         R       TRUE     -
//     %%BIT    TOE              4       4     0         R       TRUE     -
//     %%BIT    IDE              5       5     0         R       TRUE     -
//     %%BIT    AOE              7       7     0         R       TRUE     -
//     %%BIT    RDY              15      15    0         R       TRUE     -
//     %%BIT    TER              16      16    0         R       TRUE     -
//     %%BIT    BRE              20      20    0         R       TRUE     -
//     %%BIT    CRE              31      31    0         R       TRUE     W
//                                                               
// %REG_NAME HSIFnCSC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RARC             0       0     0         R|W     TRUE     -
//     %%BIT    AKRC             1       1     0         R|W     TRUE     -
//     %%BIT    AKEC             2       2     0         R|W     TRUE     -
//     %%BIT    TOEC             4       4     0         R|W     TRUE     -
//     %%BIT    IDEC             5       5     0         R|W     TRUE     -
//     %%BIT    AOEC             7       7     0         R|W     TRUE     -
//     %%BIT    TERC             16      16    0         R|W     TRUE     -
//     %%BIT    BREC             20      20    0         R|W     TRUE     -
//     %%BIT    CREC             31      31    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RARE             0       0     0         R|W     TRUE     -
//     %%BIT    AKRE             1       1     0         R|W     TRUE     -
//     %%BIT    AKEE             2       2     0         R|W     TRUE     -
//     %%BIT    TOEE             4       4     0         R|W     TRUE     -
//     %%BIT    IDEE             5       5     0         R|W     TRUE     -
//     %%BIT    AOEE             7       7     0         R|W     TRUE     -
//     %%BIT    TERE             16      16    0         R|W     TRUE     -
//     %%BIT    BREE             20      20    0         R|W     TRUE     -
//     %%BIT    CREE             31      31    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCAR
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CAR              31       0     0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCWD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CWD              31       0     0         R|W     TRUE     W
//     
// %REG_NAME HSIFnCRD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CRD              31       0     0         R       TRUE     W
// 
// %REG_NAME HSIFnCEST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMR              31     31     0         R       TRUE     -
//     %%BIT    TMN              28     28     0         R       TRUE     -
//     %%BIT    TMS              27     27     0         R       TRUE     -
//     %%BIT    TDD              26     26     0         R       TRUE     -
//     %%BIT    TDS              25     25     0         R       TRUE     -
//     %%BIT    TDW              24     24     0         R       TRUE     -
//     %%BIT    TDR              23     23     0         R       TRUE     -
//     %%BIT    TDI              22     22     0         R       TRUE     -
//     %%BIT    TDE              21     21     0         R       TRUE     -
//     %%BIT    TAW              20     20     0         R       TRUE     -
//     %%BIT    TAR              19     19     0         R       TRUE     -
//     %%BIT    TPM              18     18     0         R       TRUE     -
//     %%BIT    TCN              17     17     0         R       TRUE     -
//     %%BIT    TPL              16     16     0         R       TRUE     -
//     %%BIT    ISN              5      5      0         R       TRUE     -
//     %%BIT    IPM              3      3      0         R       TRUE     -
//     %%BIT    ICM              2      2      0         R       TRUE     -
//     %%BIT    ICN              1      1      0         R       TRUE     -
//     %%BIT    IUE              0      0      0         R       TRUE     -
// 
// %REG_NAME HSIFnCESC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMRC              31     31     0         R|W     TRUE     -
//     %%BIT    TMNC              28     28     0         R|W     TRUE     -
//     %%BIT    TMSC              27     27     0         R|W     TRUE     -
//     %%BIT    TDDC              26     26     0         R|W     TRUE     -
//     %%BIT    TDSC              25     25     0         R|W     TRUE     -
//     %%BIT    TDWC              24     24     0         R|W     TRUE     -
//     %%BIT    TDRC              23     23     0         R|W     TRUE     -
//     %%BIT    TDIC              22     22     0         R|W     TRUE     -
//     %%BIT    TDEC              21     21     0         R|W     TRUE     -
//     %%BIT    TAWC              20     20     0         R|W     TRUE     -
//     %%BIT    TARC              19     19     0         R|W     TRUE     -
//     %%BIT    TPMC              18     18     0         R|W     TRUE     -
//     %%BIT    TCNC              17     17     0         R|W     TRUE     -
//     %%BIT    TPLC              16     16     0         R|W     TRUE     -
//     %%BIT    ISNC              5      5      0         R|W     TRUE     -
//     %%BIT    IPMC              3      3      0         R|W     TRUE     -
//     %%BIT    ICMC              2      2      0         R|W     TRUE     -
//     %%BIT    ICNC              1      1      0         R|W     TRUE     -
//     %%BIT    IUEC              0      0      0         R|W     TRUE     -
//  
// %REG_NAME HSIFnCEIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMRE              31     31     0         R|W     TRUE     -
//     %%BIT    TMNE              28     28     0         R|W     TRUE     -
//     %%BIT    TMSE              27     27     0         R|W     TRUE     -
//     %%BIT    TDDE              26     26     0         R|W     TRUE     -
//     %%BIT    TDSE              25     25     0         R|W     TRUE     -
//     %%BIT    TDWE              24     24     0         R|W     TRUE     -
//     %%BIT    TDRE              23     23     0         R|W     TRUE     -
//     %%BIT    TDIE              22     22     0         R|W     TRUE     -
//     %%BIT    TDEE              21     21     0         R|W     TRUE     -
//     %%BIT    TAWE              20     20     0         R|W     TRUE     -
//     %%BIT    TARE              19     19     0         R|W     TRUE     -
//     %%BIT    TPME              18     18     0         R|W     TRUE     -
//     %%BIT    TCNE              17     17     0         R|W     TRUE     -
//     %%BIT    TPLE              16     16     0         R|W     TRUE     -
//     %%BIT    ISNE              5      5      0         R|W     TRUE     -
//     %%BIT    IPME              3      3      0         R|W     TRUE     -
//     %%BIT    ICME              2      2      0         R|W     TRUE     -
//     %%BIT    ICNE              1      1      0         R|W     TRUE     -
//     %%BIT    IUEE              0      0      0         R|W     TRUE     -
//  
////////////////////////////////////////////////////////////////////////////////
/// @file hsif020_unit_regif.h
/// @brief Register IF class of model HSIF020_UNIT
/// $Id: hsif020_unit_regif.h,v 1.7 2020/04/08 07:39:39 quynhnhunguyen Exp $
/// $Date: 2020/04/08 07:39:39 $
/// $Revison$
/// $Author: quynhnhunguyen $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HSIF020_UNIT_REGIF_H__
#define __HSIF020_UNIT_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of HSIF020_UNIT model
class Chsif020_unit_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Chsif020_unit_regif(std::string name, uint buswidth);
    ~Chsif020_unit_regif();

protected:
    vpcl::re_register *HSIFnCMD ;
    vpcl::re_register *HSIFnCCT ;
    vpcl::re_register *HSIFnCST ;
    vpcl::re_register *HSIFnCSC ;
    vpcl::re_register *HSIFnCIE ;
    vpcl::re_register *HSIFnCAR ;
    vpcl::re_register *HSIFnCWD ;
    vpcl::re_register *HSIFnCRD ;
    vpcl::re_register *HSIFnCEST;
    vpcl::re_register *HSIFnCESC;
    vpcl::re_register *HSIFnCEIE;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_HSIFnCMD ;
    scml2::reg<uint> *CW_HSIFnCCT ;
    scml2::reg<uint> *CW_HSIFnCST ;
    scml2::reg<uint> *CW_HSIFnCSC ;
    scml2::reg<uint> *CW_HSIFnCIE ;
    scml2::reg<uint> *CW_HSIFnCAR ;
    scml2::reg<uint> *CW_HSIFnCWD ;
    scml2::reg<uint> *CW_HSIFnCRD ;
    scml2::reg<uint> *CW_HSIFnCEST;
    scml2::reg<uint> *CW_HSIFnCESC;
    scml2::reg<uint> *CW_HSIFnCEIE;
    #endif

    uint HSIFnCMD_INME;
    uint HSIFnCMD_TNME;
    uint HSIFnCCT_CTY;
    uint HSIFnCCT_CTYW;
    uint HSIFnCST_RAR;
    uint HSIFnCST_AKR;
    uint HSIFnCST_AKE;
    uint HSIFnCST_TOE;
    uint HSIFnCST_IDE;
    uint HSIFnCST_AOE;
    uint HSIFnCST_RDY;
    uint HSIFnCST_TER;
    uint HSIFnCST_BRE;
    uint HSIFnCST_CRE;
    uint HSIFnCSC_RARC;
    uint HSIFnCSC_AKRC;
    uint HSIFnCSC_AKEC;
    uint HSIFnCSC_TOEC;
    uint HSIFnCSC_IDEC;
    uint HSIFnCSC_AOEC;
    uint HSIFnCSC_TERC;
    uint HSIFnCSC_BREC;
    uint HSIFnCSC_CREC;
    uint HSIFnCIE_RARE;
    uint HSIFnCIE_AKRE;
    uint HSIFnCIE_AKEE;
    uint HSIFnCIE_TOEE;
    uint HSIFnCIE_IDEE;
    uint HSIFnCIE_AOEE;
    uint HSIFnCIE_TERE;
    uint HSIFnCIE_BREE;
    uint HSIFnCIE_CREE;
    uint HSIFnCAR_CAR;
    uint HSIFnCWD_CWD;
    uint HSIFnCRD_CRD;
    uint HSIFnCEST_CMR;
    uint HSIFnCEST_TMN;
    uint HSIFnCEST_TMS;
    uint HSIFnCEST_TDD;
    uint HSIFnCEST_TDS;
    uint HSIFnCEST_TDW;
    uint HSIFnCEST_TDR;
    uint HSIFnCEST_TDI;
    uint HSIFnCEST_TDE;
    uint HSIFnCEST_TAW;
    uint HSIFnCEST_TAR;
    uint HSIFnCEST_TPM;
    uint HSIFnCEST_TCN;
    uint HSIFnCEST_TPL;
    uint HSIFnCEST_ISN;
    uint HSIFnCEST_IPM;
    uint HSIFnCEST_ICM;
    uint HSIFnCEST_ICN;
    uint HSIFnCEST_IUE;
    uint HSIFnCESC_CMRC;
    uint HSIFnCESC_TMNC;
    uint HSIFnCESC_TMSC;
    uint HSIFnCESC_TDDC;
    uint HSIFnCESC_TDSC;
    uint HSIFnCESC_TDWC;
    uint HSIFnCESC_TDRC;
    uint HSIFnCESC_TDIC;
    uint HSIFnCESC_TDEC;
    uint HSIFnCESC_TAWC;
    uint HSIFnCESC_TARC;
    uint HSIFnCESC_TPMC;
    uint HSIFnCESC_TCNC;
    uint HSIFnCESC_TPLC;
    uint HSIFnCESC_ISNC;
    uint HSIFnCESC_IPMC;
    uint HSIFnCESC_ICMC;
    uint HSIFnCESC_ICNC;
    uint HSIFnCESC_IUEC;
    uint HSIFnCEIE_CMRE;
    uint HSIFnCEIE_TMNE;
    uint HSIFnCEIE_TMSE;
    uint HSIFnCEIE_TDDE;
    uint HSIFnCEIE_TDSE;
    uint HSIFnCEIE_TDWE;
    uint HSIFnCEIE_TDRE;
    uint HSIFnCEIE_TDIE;
    uint HSIFnCEIE_TDEE;
    uint HSIFnCEIE_TAWE;
    uint HSIFnCEIE_TARE;
    uint HSIFnCEIE_TPME;
    uint HSIFnCEIE_TCNE;
    uint HSIFnCEIE_TPLE;
    uint HSIFnCEIE_ISNE;
    uint HSIFnCEIE_IPME;
    uint HSIFnCEIE_ICME;
    uint HSIFnCEIE_ICNE;
    uint HSIFnCEIE_IUEE;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_HSIFnCMD_TNME(RegCBstr str) = 0;
    virtual void cb_HSIFnCCT_CTYW(RegCBstr str) = 0;
    virtual void cb_HSIFnCSC_CREC(RegCBstr str) = 0;
    virtual void cb_HSIFnCIE_CREE(RegCBstr str) = 0;
    virtual void cb_HSIFnCAR_CAR(RegCBstr str) = 0;
    virtual void cb_HSIFnCWD_CWD(RegCBstr str) = 0;
    virtual void cb_HSIFnCRD_CRD(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chsif020_unit_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chsif020_unit_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__HSIF020_UNIT_REG_DEF_H__
