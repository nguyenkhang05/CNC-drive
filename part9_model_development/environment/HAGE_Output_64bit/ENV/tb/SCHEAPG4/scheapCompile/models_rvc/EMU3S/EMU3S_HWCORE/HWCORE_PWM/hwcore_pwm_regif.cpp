// -----------------------------------------------------------------------------
// $Id: hwcore_pwm_regif.cpp,v 1.3 2020/10/06 03:56:40 ducla Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : hwcore_pwm_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_PWM
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  11
// 
// %REG_CHANNEL reg_def
//   %%TITLE    name               reg_name              rsize        wsize       length      offset     init             access    support    callback
//   %%REG      PWMCTR             PWMCTR              8|16|32        32          32          0x340      0x00000000       R|W       TRUE       w
//   %%REG      PWMDT              PWMDT               8|16|32         8           8          0x344      0x00             R|W       TRUE       -
//   %%REG      VDCRCT             VDCRCT              8|16|32        32          32          0x348      0x00000000       R|W       TRUE       -
//   %%REG      VQCRCT             VQCRCT              8|16|32        32          32          0x34C      0x00000000       R|W       TRUE       -
//   %%REG      VEL                VEL                 8|16|32         -          32          0x350      0x00000000       R         TRUE       -
//   %%REG      VELSFT             VELSFT              8|16|32        32          32          0x354      0x00000000       R|W       TRUE       -
//   %%REG      DECVELG            DECVELG             8|16|32        32          32          0x358      0x00000000       R|W       TRUE       -
//   %%REG      DECFLUX            DECFLUX             8|16|32        32          32          0x35C      0x00000000       R|W       TRUE       -
//   %%REG      DECLD              DECLD               8|16|32        32          32          0x360      0x00000000       R|W       TRUE       -
//   %%REG      DECLQ              DECLQ               8|16|32        32          32          0x364      0x00000000       R|W       TRUE       -
//   %%REG      VD2MAX             VD2MAX              8|16|32        32          32          0x368      0x00000000       R|W       TRUE       -
//   %%REG      VQ2MAX             VQ2MAX              8|16|32        32          32          0x36C      0x00000000       R|W       TRUE       -
//   %%REG      VD2                VD2                 8|16|32        32          32          0x370      0x00000000       R|W       TRUE       -
//   %%REG      VQ2                VQ2                 8|16|32        32          32          0x374      0x00000000       R|W       TRUE       -
//   %%REG      GTHT               GTHT                8|16|32        32          32          0x378      0x00000000       R|W       TRUE       -
//   %%REG      PHI                PHI                 8|16|32        16          16          0x37C      0x0000           R|W       TRUE       -
//   %%REG      THTFORESFT         THTFORESFT          8|16|32        16          16          0x37E      0x0000           R|W       TRUE       -
//   %%REG      THTEPWM            THTEPWM             8|16|32        16          16          0x380      0x0000           R|W       TRUE       -
//   %%REG      THTVSFT            THTVSFT             8|16|32        16          16          0x382      0x0000           R|W       TRUE       -
//   %%REG      VDQSFT             VDQSFT              8|16|32        32          32          0x384      0x00000000       R|W       TRUE       -
//   %%REG      SR23               SR23                8|16|32        32          32          0x388      0x0000D106       R|W       TRUE       -
//   %%REG      VU                 VU                  8|16|32        32          32          0x38C      0x00000000       R|W       TRUE       -
//   %%REG      VV                 VV                  8|16|32        32          32          0x390      0x00000000       R|W       TRUE       -
//   %%REG      VW                 VW                  8|16|32        32          32          0x394      0x00000000       R|W       TRUE       -
//   %%REG      TMAX               TMAX                8|16|32        32          32          0x398      0x00000000       R|W       TRUE       -
//   %%REG      VU0                VU0                 8|16|32        32          32          0x39C      0x00000000       R|W       TRUE       -
//   %%REG      VV0                VV0                 8|16|32        32          32          0x3A0      0x00000000       R|W       TRUE       -
//   %%REG      VW0                VW0                 8|16|32        32          32          0x3A4      0x00000000       R|W       TRUE       -
//   %%REG      PWMK1              PWMK1               8|16|32        32          32          0x3A8      0x00000000       R|W       TRUE       -
//   %%REG      VOLV               VOLV                8|16|32        16          16          0x3AC      0x0000           R|W       TRUE       -
//   %%REG      VU1                VU1                 8|16|32        32          32          0x3B0      0x00000000       R|W       TRUE       -
//   %%REG      VV1                VV1                 8|16|32        32          32          0x3B4      0x00000000       R|W       TRUE       -
//   %%REG      VW1                VW1                 8|16|32        32          32          0x3B8      0x00000000       R|W       TRUE       -
//   %%REG      VUOFS              VUOFS               8|16|32        16          16          0x3BC      0x0000           R|W       TRUE       -
//   %%REG      VVOFS              VVOFS               8|16|32        16          16          0x3BE      0x0000           R|W       TRUE       -
//   %%REG      VWOFS              VWOFS               8|16|32        16          16          0x3C0      0x0000           R|W       TRUE       -
//   %%REG      VU2                VU2                 8|16|32        32          32          0x3C4      0x00000000       R|W       TRUE       -
//   %%REG      VV2                VV2                 8|16|32        32          32          0x3C8      0x00000000       R|W       TRUE       -
//   %%REG      VW2                VW2                 8|16|32        32          32          0x3CC      0x00000000       R|W       TRUE       -
//   %%REG      DTUL               DTUL                8|16|32        32          32          0x3D0      0x00000000       R|W       TRUE       -
//   %%REG      DTLL               DTLL                8|16|32        32          32          0x3D4      0x00000000       R|W       TRUE       -
//   %%REG      VUFIX              VUFIX               8|16|32        32          32          0x3D8      0x00000000       R|W       TRUE       -
//   %%REG      VVFIX              VVFIX               8|16|32        32          32          0x3DC      0x00000000       R|W       TRUE       -
//   %%REG      VWFIX              VWFIX               8|16|32        32          32          0x3E0      0x00000000       R|W       TRUE       -
//   %%REG      PWMK2              PWMK2               8|16|32        32          32          0x3E4      0x00000000       R|W       TRUE       -
//   %%REG      DTT                DTT                 8|16|32        32          32          0x3E8      0x00000FFF       R|W       TRUE       -
//   %%REG      CARR               CARR                8|16|32        32          32          0x3EC      0x00007FFF       R|W       TRUE       -
//   %%REG      CARRBUF            CARRBUF             8|16|32        32          32          0x3F0      0x0000FFFF       R|W       TRUE       -
//   %%REG      PWMU0              PWMU0               8|16|32        32          32          0x3F4      0x00000000       R|W       TRUE       -
//   %%REG      PWMV0              PWMV0               8|16|32        32          32          0x3F8      0x00000000       R|W       TRUE       -
//   %%REG      PWMW0              PWMW0               8|16|32        32          32          0x3FC      0x00000000       R|W       TRUE       -
//   %%REG      DTOTH              DTOTH               8|16|32        32          32          0x400      0x7FFFFFFF       R|W       TRUE       -
//   %%REG      DTOPV              DTOPV               8|16|32        32          32          0x404      0x00000000       R|W       TRUE       -
//   %%REG      DTONV              DTONV               8|16|32        32          32          0x408      0x00000000       R|W       TRUE       -
//   %%REG      PWMUDT             PWMUDT              8|16|32        32          32          0x40C      0x00000000       R|W       TRUE       -
//   %%REG      PWMVDT             PWMVDT              8|16|32        32          32          0x410      0x00000000       R|W       TRUE       -
//   %%REG      PWMWDT             PWMWDT              8|16|32        32          32          0x414      0x00000000       R|W       TRUE       -
//   %%REG      PWMUL              PWMUL               8|16|32        32          32          0x418      0x00000000       R|W       TRUE       -
//   %%REG      PWMLL              PWMLL               8|16|32        32          32          0x41C      0x00000000       R|W       TRUE       -
//   %%REG      PWMUIP             PWMUIP              8|16|32        32          32          0x420      0x00000000       R|W       TRUE       -
//   %%REG      PWMVIP             PWMVIP              8|16|32        32          32          0x424      0x00000000       R|W       TRUE       -
//   %%REG      PWMWIP             PWMWIP              8|16|32        32          32          0x428      0x00000000       R|W       TRUE       -
//   %%REG      PWMU               PWMU                8|16|32        32          32          0x42C      0x000047FF       R|W       TRUE       -
//   %%REG      PWMV               PWMV                8|16|32        32          32          0x430      0x000047FF       R|W       TRUE       -
//   %%REG      PWMW               PWMW                8|16|32        32          32          0x434      0x000047FF       R|W       TRUE       -
// 
// %REG_NAME PWMCTR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   FPWMIBTH         20      20     0x0       R|W      TRUE     -
//     %%BIT   SETDTO           15      15     0x0       R|W      TRUE     -
//     %%BIT   PWMOP            14      13     0x0       R|W      TRUE     w
//     %%BIT   SETDEC           12      12     0x0       R|W      TRUE     -
//     %%BIT   DECIDQ           11      10     0x0       R|W      TRUE     -
//     %%BIT   SETVEL            9       9     0x0       R|W      TRUE     -
//     %%BIT   VDQSEL            8       8     0x0       R|W      TRUE     -
//     %%BIT   PWMSEL            7       7     0x0       R|W      TRUE     -
//     %%BIT   SHIPWM            6       6     0x0       R|W      TRUE     -
//     %%BIT   FLININIP          5       4     0x0       R|W      TRUE     -
//     %%BIT   SETHARM           3       1     0x0       R|W      TRUE     -
//     %%BIT   SETPWM            0       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   PWMDT             0       0     0x0       R|W      TRUE     w
// 
// %REG_NAME VDCRCT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQCRCT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VEL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R        TRUE     -
// 
// %REG_NAME VELSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECVELG
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECFLUX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECLD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECLQ
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VD2MAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQ2MAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VD2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQ2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME GTHT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PHI
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTFORESFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTEPWM
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTVSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VDQSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME SR23
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0000D106      R|W      TRUE     -
// 
// %REG_NAME VU
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME TMAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMK1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VOLV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VUOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VVOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VWOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTUL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTLL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VUFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VVFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VWFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMK2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0xFFF      R|W      TRUE     -
// 
// %REG_NAME CARR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x7FFF      R|W      TRUE     -
// 
// %REG_NAME CARRBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0xFFFF      R|W      TRUE     -
// 
// %REG_NAME PWMU0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMV0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMW0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTOTH
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x7FFFFFFF      R|W      TRUE     -
// 
// %REG_NAME DTOPV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTONV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMVDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMWDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMLL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMVIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMWIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMU
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
// 
// %REG_NAME PWMV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
// 
// %REG_NAME PWMW
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_pwm_regif.cpp
/// @brief Register IF class of model HWCORE_PWM
/// $Id: hwcore_pwm_regif.cpp,v 1.3 2020/10/06 03:56:40 ducla Exp $
/// $Date: 2020/10/06 03:56:40 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#include "hwcore_pwm_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
// Description: CHWCORE_PWM_regif
// Ref: {HWCORE_PWM_UD_Registers_001, HWCORE_PWM_UD_Registers_002, HWCORE_PWM_UD_Registers_003, HWCORE_PWM_UD_Registers_004, HWCORE_PWM_UD_Registers_005}
// Ref: {HWCORE_PWM_UD_Registers_006, HWCORE_PWM_UD_Registers_007, HWCORE_PWM_UD_Registers_008, HWCORE_PWM_UD_Registers_009, HWCORE_PWM_UD_Registers_010}
// Ref: {HWCORE_PWM_UD_Registers_011, HWCORE_PWM_UD_Registers_012, HWCORE_PWM_UD_Registers_013, HWCORE_PWM_UD_Registers_014, HWCORE_PWM_UD_Registers_015}
// Ref: {HWCORE_PWM_UD_Registers_016, HWCORE_PWM_UD_Registers_017, HWCORE_PWM_UD_Registers_018, HWCORE_PWM_UD_Registers_019, HWCORE_PWM_UD_Registers_020}
// Ref: {HWCORE_PWM_UD_Registers_021, HWCORE_PWM_UD_Registers_022, HWCORE_PWM_UD_Registers_023, HWCORE_PWM_UD_Registers_024, HWCORE_PWM_UD_Registers_025}
// Ref: {HWCORE_PWM_UD_Registers_026, HWCORE_PWM_UD_Registers_027, HWCORE_PWM_UD_Registers_028, HWCORE_PWM_UD_Registers_029, HWCORE_PWM_UD_Registers_030}
// Ref: {HWCORE_PWM_UD_Registers_031, HWCORE_PWM_UD_Registers_032, HWCORE_PWM_UD_Registers_033, HWCORE_PWM_UD_Registers_034, HWCORE_PWM_UD_Registers_035}
// Ref: {HWCORE_PWM_UD_Registers_036, HWCORE_PWM_UD_Registers_037, HWCORE_PWM_UD_Registers_038, HWCORE_PWM_UD_Registers_039, HWCORE_PWM_UD_Registers_040}
// Ref: {HWCORE_PWM_UD_Registers_041, HWCORE_PWM_UD_Registers_042, HWCORE_PWM_UD_Registers_043, HWCORE_PWM_UD_Registers_044, HWCORE_PWM_UD_Registers_045}
// Ref: {HWCORE_PWM_UD_Registers_046, HWCORE_PWM_UD_Registers_047, HWCORE_PWM_UD_Registers_048, HWCORE_PWM_UD_Registers_049, HWCORE_PWM_UD_Registers_050}
// Ref: {HWCORE_PWM_UD_Registers_051, HWCORE_PWM_UD_Registers_052, HWCORE_PWM_UD_Registers_053, HWCORE_PWM_UD_Registers_054, HWCORE_PWM_UD_Registers_055}
// Ref: {HWCORE_PWM_UD_Registers_056, HWCORE_PWM_UD_Registers_057, HWCORE_PWM_UD_Registers_058, HWCORE_PWM_UD_Registers_059, HWCORE_PWM_UD_Registers_060}
// Ref: {HWCORE_PWM_UD_Registers_061, HWCORE_PWM_UD_Registers_062, HWCORE_PWM_UD_Registers_063, HWCORE_PWM_UD_Registers_064, HWCORE_PWM_UD_Registers_065}
// Ref: {HWCORE_PWM_UD_Registers_066, HWCORE_PWM_UD_ATT1_001, HWCORE_PWM_UD_ATT1_006, HWCORE_PWM_UD_ATT1_007, HWCORE_PWM_UD_ATT1_008}
Chwcore_pwm_regif::Chwcore_pwm_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", 0x438)
    #endif
{
    CommandInit();
    PWMCTR     = new vpcl::re_register(0x0340, this, "PWMCTR"    , name.c_str());
    PWMDT      = new vpcl::re_register(0x0344, this, "PWMDT"     , name.c_str());
    VDCRCT     = new vpcl::re_register(0x0348, this, "VDCRCT"    , name.c_str());
    VQCRCT     = new vpcl::re_register(0x034C, this, "VQCRCT"    , name.c_str());
    VEL        = new vpcl::re_register(0x0350, this, "VEL"       , name.c_str());
    VELSFT     = new vpcl::re_register(0x0354, this, "VELSFT"    , name.c_str());
    DECVELG    = new vpcl::re_register(0x0358, this, "DECVELG"   , name.c_str());
    DECFLUX    = new vpcl::re_register(0x035C, this, "DECFLUX"   , name.c_str());
    DECLD      = new vpcl::re_register(0x0360, this, "DECLD"     , name.c_str());
    DECLQ      = new vpcl::re_register(0x0364, this, "DECLQ"     , name.c_str());
    VD2MAX     = new vpcl::re_register(0x0368, this, "VD2MAX"    , name.c_str());
    VQ2MAX     = new vpcl::re_register(0x036C, this, "VQ2MAX"    , name.c_str());
    VD2        = new vpcl::re_register(0x0370, this, "VD2"       , name.c_str());
    VQ2        = new vpcl::re_register(0x0374, this, "VQ2"       , name.c_str());
    GTHT       = new vpcl::re_register(0x0378, this, "GTHT"      , name.c_str());
    PHI        = new vpcl::re_register(0x037C, this, "PHI"       , name.c_str());
    THTFORESFT = new vpcl::re_register(0x037E, this, "THTFORESFT", name.c_str());
    THTEPWM    = new vpcl::re_register(0x0380, this, "THTEPWM"   , name.c_str());
    THTVSFT    = new vpcl::re_register(0x0382, this, "THTVSFT"   , name.c_str());
    VDQSFT     = new vpcl::re_register(0x0384, this, "VDQSFT"    , name.c_str());
    SR23       = new vpcl::re_register(0x0388, this, "SR23"      , name.c_str());
    VU         = new vpcl::re_register(0x038C, this, "VU"        , name.c_str());
    VV         = new vpcl::re_register(0x0390, this, "VV"        , name.c_str());
    VW         = new vpcl::re_register(0x0394, this, "VW"        , name.c_str());
    TMAX       = new vpcl::re_register(0x0398, this, "TMAX"      , name.c_str());
    VU0        = new vpcl::re_register(0x039C, this, "VU0"       , name.c_str());
    VV0        = new vpcl::re_register(0x03A0, this, "VV0"       , name.c_str());
    VW0        = new vpcl::re_register(0x03A4, this, "VW0"       , name.c_str());
    PWMK1      = new vpcl::re_register(0x03A8, this, "PWMK1"     , name.c_str());
    VOLV       = new vpcl::re_register(0x03AC, this, "VOLV"      , name.c_str());
    VU1        = new vpcl::re_register(0x03B0, this, "VU1"       , name.c_str());
    VV1        = new vpcl::re_register(0x03B4, this, "VV1"       , name.c_str());
    VW1        = new vpcl::re_register(0x03B8, this, "VW1"       , name.c_str());
    VUOFS      = new vpcl::re_register(0x03BC, this, "VUOFS"     , name.c_str());
    VVOFS      = new vpcl::re_register(0x03BE, this, "VVOFS"     , name.c_str());
    VWOFS      = new vpcl::re_register(0x03C0, this, "VWOFS"     , name.c_str());
    VU2        = new vpcl::re_register(0x03C4, this, "VU2"       , name.c_str());
    VV2        = new vpcl::re_register(0x03C8, this, "VV2"       , name.c_str());
    VW2        = new vpcl::re_register(0x03CC, this, "VW2"       , name.c_str());
    DTUL       = new vpcl::re_register(0x03D0, this, "DTUL"      , name.c_str());
    DTLL       = new vpcl::re_register(0x03D4, this, "DTLL"      , name.c_str());
    VUFIX      = new vpcl::re_register(0x03D8, this, "VUFIX"     , name.c_str());
    VVFIX      = new vpcl::re_register(0x03DC, this, "VVFIX"     , name.c_str());
    VWFIX      = new vpcl::re_register(0x03E0, this, "VWFIX"     , name.c_str());
    PWMK2      = new vpcl::re_register(0x03E4, this, "PWMK2"     , name.c_str());
    DTT        = new vpcl::re_register(0x03E8, this, "DTT"       , name.c_str());
    CARR       = new vpcl::re_register(0x03EC, this, "CARR"      , name.c_str());
    CARRBUF    = new vpcl::re_register(0x03F0, this, "CARRBUF"   , name.c_str());
    PWMU0      = new vpcl::re_register(0x03F4, this, "PWMU0"     , name.c_str());
    PWMV0      = new vpcl::re_register(0x03F8, this, "PWMV0"     , name.c_str());
    PWMW0      = new vpcl::re_register(0x03FC, this, "PWMW0"     , name.c_str());
    DTOTH      = new vpcl::re_register(0x0400, this, "DTOTH"     , name.c_str());
    DTOPV      = new vpcl::re_register(0x0404, this, "DTOPV"     , name.c_str());
    DTONV      = new vpcl::re_register(0x0408, this, "DTONV"     , name.c_str());
    PWMUDT     = new vpcl::re_register(0x040C, this, "PWMUDT"    , name.c_str());
    PWMVDT     = new vpcl::re_register(0x0410, this, "PWMVDT"    , name.c_str());
    PWMWDT     = new vpcl::re_register(0x0414, this, "PWMWDT"    , name.c_str());
    PWMUL      = new vpcl::re_register(0x0418, this, "PWMUL"     , name.c_str());
    PWMLL      = new vpcl::re_register(0x041C, this, "PWMLL"     , name.c_str());
    PWMUIP     = new vpcl::re_register(0x0420, this, "PWMUIP"    , name.c_str());
    PWMVIP     = new vpcl::re_register(0x0424, this, "PWMVIP"    , name.c_str());
    PWMWIP     = new vpcl::re_register(0x0428, this, "PWMWIP"    , name.c_str());
    PWMU       = new vpcl::re_register(0x042C, this, "PWMU"      , name.c_str());
    PWMV       = new vpcl::re_register(0x0430, this, "PWMV"      , name.c_str());
    PWMW       = new vpcl::re_register(0x0434, this, "PWMW"      , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<11];
    for (uint i = 0; i < (1<<11); i++) {
        mRegMap[i] = (1<<11);
    }

    mRegMap[0x0340]     = index;
    mRegMap[0x0340 + 1] = index;
    mRegMap[0x0340 + 2] = index;
    mRegMap[0x0340 + 3] = index++;
    mRegMap[0x0344]     = index++;
    mRegMap[0x0348]     = index;
    mRegMap[0x0348 + 1] = index;
    mRegMap[0x0348 + 2] = index;
    mRegMap[0x0348 + 3] = index++;
    mRegMap[0x034C]     = index;
    mRegMap[0x034C + 1] = index;
    mRegMap[0x034C + 2] = index;
    mRegMap[0x034C + 3] = index++;
    mRegMap[0x0350]     = index;
    mRegMap[0x0350 + 1] = index;
    mRegMap[0x0350 + 2] = index;
    mRegMap[0x0350 + 3] = index++;
    mRegMap[0x0354]     = index;
    mRegMap[0x0354 + 1] = index;
    mRegMap[0x0354 + 2] = index;
    mRegMap[0x0354 + 3] = index++;
    mRegMap[0x0358]     = index;
    mRegMap[0x0358 + 1] = index;
    mRegMap[0x0358 + 2] = index;
    mRegMap[0x0358 + 3] = index++;
    mRegMap[0x035C]     = index;
    mRegMap[0x035C + 1] = index;
    mRegMap[0x035C + 2] = index;
    mRegMap[0x035C + 3] = index++;
    mRegMap[0x0360]     = index;
    mRegMap[0x0360 + 1] = index;
    mRegMap[0x0360 + 2] = index;
    mRegMap[0x0360 + 3] = index++;
    mRegMap[0x0364]     = index;
    mRegMap[0x0364 + 1] = index;
    mRegMap[0x0364 + 2] = index;
    mRegMap[0x0364 + 3] = index++;
    mRegMap[0x0368]     = index;
    mRegMap[0x0368 + 1] = index;
    mRegMap[0x0368 + 2] = index;
    mRegMap[0x0368 + 3] = index++;
    mRegMap[0x036C]     = index;
    mRegMap[0x036C + 1] = index;
    mRegMap[0x036C + 2] = index;
    mRegMap[0x036C + 3] = index++;
    mRegMap[0x0370]     = index;
    mRegMap[0x0370 + 1] = index;
    mRegMap[0x0370 + 2] = index;
    mRegMap[0x0370 + 3] = index++;
    mRegMap[0x0374]     = index;
    mRegMap[0x0374 + 1] = index;
    mRegMap[0x0374 + 2] = index;
    mRegMap[0x0374 + 3] = index++;
    mRegMap[0x0378]     = index;
    mRegMap[0x0378 + 1] = index;
    mRegMap[0x0378 + 2] = index;
    mRegMap[0x0378 + 3] = index++;
    mRegMap[0x037C]     = index;
    mRegMap[0x037C + 1] = index++;
    mRegMap[0x037E]     = index;
    mRegMap[0x037E + 1] = index++;
    mRegMap[0x0380]     = index;
    mRegMap[0x0380 + 1] = index++;
    mRegMap[0x0382]     = index;
    mRegMap[0x0382 + 1] = index++;
    mRegMap[0x0384]     = index;
    mRegMap[0x0384 + 1] = index;
    mRegMap[0x0384 + 2] = index;
    mRegMap[0x0384 + 3] = index++;
    mRegMap[0x0388]     = index;
    mRegMap[0x0388 + 1] = index;
    mRegMap[0x0388 + 2] = index;
    mRegMap[0x0388 + 3] = index++;
    mRegMap[0x038C]     = index;
    mRegMap[0x038C + 1] = index;
    mRegMap[0x038C + 2] = index;
    mRegMap[0x038C + 3] = index++;
    mRegMap[0x0390]     = index;
    mRegMap[0x0390 + 1] = index;
    mRegMap[0x0390 + 2] = index;
    mRegMap[0x0390 + 3] = index++;
    mRegMap[0x0394]     = index;
    mRegMap[0x0394 + 1] = index;
    mRegMap[0x0394 + 2] = index;
    mRegMap[0x0394 + 3] = index++;
    mRegMap[0x0398]     = index;
    mRegMap[0x0398 + 1] = index;
    mRegMap[0x0398 + 2] = index;
    mRegMap[0x0398 + 3] = index++;
    mRegMap[0x039C]     = index;
    mRegMap[0x039C + 1] = index;
    mRegMap[0x039C + 2] = index;
    mRegMap[0x039C + 3] = index++;
    mRegMap[0x03A0]     = index;
    mRegMap[0x03A0 + 1] = index;
    mRegMap[0x03A0 + 2] = index;
    mRegMap[0x03A0 + 3] = index++;
    mRegMap[0x03A4]     = index;
    mRegMap[0x03A4 + 1] = index;
    mRegMap[0x03A4 + 2] = index;
    mRegMap[0x03A4 + 3] = index++;
    mRegMap[0x03A8]     = index;
    mRegMap[0x03A8 + 1] = index;
    mRegMap[0x03A8 + 2] = index;
    mRegMap[0x03A8 + 3] = index++;
    mRegMap[0x03AC]     = index;
    mRegMap[0x03AC + 1] = index++;
    mRegMap[0x03B0]     = index;
    mRegMap[0x03B0 + 1] = index;
    mRegMap[0x03B0 + 2] = index;
    mRegMap[0x03B0 + 3] = index++;
    mRegMap[0x03B4]     = index;
    mRegMap[0x03B4 + 1] = index;
    mRegMap[0x03B4 + 2] = index;
    mRegMap[0x03B4 + 3] = index++;
    mRegMap[0x03B8]     = index;
    mRegMap[0x03B8 + 1] = index;
    mRegMap[0x03B8 + 2] = index;
    mRegMap[0x03B8 + 3] = index++;
    mRegMap[0x03BC]     = index;
    mRegMap[0x03BC + 1] = index++;
    mRegMap[0x03BE]     = index;
    mRegMap[0x03BE + 1] = index++;
    mRegMap[0x03C0]     = index;
    mRegMap[0x03C0 + 1] = index++;
    mRegMap[0x03C4]     = index;
    mRegMap[0x03C4 + 1] = index;
    mRegMap[0x03C4 + 2] = index;
    mRegMap[0x03C4 + 3] = index++;
    mRegMap[0x03C8]     = index;
    mRegMap[0x03C8 + 1] = index;
    mRegMap[0x03C8 + 2] = index;
    mRegMap[0x03C8 + 3] = index++;
    mRegMap[0x03CC]     = index;
    mRegMap[0x03CC + 1] = index;
    mRegMap[0x03CC + 2] = index;
    mRegMap[0x03CC + 3] = index++;
    mRegMap[0x03D0]     = index;
    mRegMap[0x03D0 + 1] = index;
    mRegMap[0x03D0 + 2] = index;
    mRegMap[0x03D0 + 3] = index++;
    mRegMap[0x03D4]     = index;
    mRegMap[0x03D4 + 1] = index;
    mRegMap[0x03D4 + 2] = index;
    mRegMap[0x03D4 + 3] = index++;
    mRegMap[0x03D8]     = index;
    mRegMap[0x03D8 + 1] = index;
    mRegMap[0x03D8 + 2] = index;
    mRegMap[0x03D8 + 3] = index++;
    mRegMap[0x03DC]     = index;
    mRegMap[0x03DC + 1] = index;
    mRegMap[0x03DC + 2] = index;
    mRegMap[0x03DC + 3] = index++;
    mRegMap[0x03E0]     = index;
    mRegMap[0x03E0 + 1] = index;
    mRegMap[0x03E0 + 2] = index;
    mRegMap[0x03E0 + 3] = index++;
    mRegMap[0x03E4]     = index;
    mRegMap[0x03E4 + 1] = index;
    mRegMap[0x03E4 + 2] = index;
    mRegMap[0x03E4 + 3] = index++;
    mRegMap[0x03E8]     = index;
    mRegMap[0x03E8 + 1] = index;
    mRegMap[0x03E8 + 2] = index;
    mRegMap[0x03E8 + 3] = index++;
    mRegMap[0x03EC]     = index;
    mRegMap[0x03EC + 1] = index;
    mRegMap[0x03EC + 2] = index;
    mRegMap[0x03EC + 3] = index++;
    mRegMap[0x03F0]     = index;
    mRegMap[0x03F0 + 1] = index;
    mRegMap[0x03F0 + 2] = index;
    mRegMap[0x03F0 + 3] = index++;
    mRegMap[0x03F4]     = index;
    mRegMap[0x03F4 + 1] = index;
    mRegMap[0x03F4 + 2] = index;
    mRegMap[0x03F4 + 3] = index++;
    mRegMap[0x03F8]     = index;
    mRegMap[0x03F8 + 1] = index;
    mRegMap[0x03F8 + 2] = index;
    mRegMap[0x03F8 + 3] = index++;
    mRegMap[0x03FC]     = index;
    mRegMap[0x03FC + 1] = index;
    mRegMap[0x03FC + 2] = index;
    mRegMap[0x03FC + 3] = index++;
    mRegMap[0x0400]     = index;
    mRegMap[0x0400 + 1] = index;
    mRegMap[0x0400 + 2] = index;
    mRegMap[0x0400 + 3] = index++;
    mRegMap[0x0404]     = index;
    mRegMap[0x0404 + 1] = index;
    mRegMap[0x0404 + 2] = index;
    mRegMap[0x0404 + 3] = index++;
    mRegMap[0x0408]     = index;
    mRegMap[0x0408 + 1] = index;
    mRegMap[0x0408 + 2] = index;
    mRegMap[0x0408 + 3] = index++;
    mRegMap[0x040C]     = index;
    mRegMap[0x040C + 1] = index;
    mRegMap[0x040C + 2] = index;
    mRegMap[0x040C + 3] = index++;
    mRegMap[0x0410]     = index;
    mRegMap[0x0410 + 1] = index;
    mRegMap[0x0410 + 2] = index;
    mRegMap[0x0410 + 3] = index++;
    mRegMap[0x0414]     = index;
    mRegMap[0x0414 + 1] = index;
    mRegMap[0x0414 + 2] = index;
    mRegMap[0x0414 + 3] = index++;
    mRegMap[0x0418]     = index;
    mRegMap[0x0418 + 1] = index;
    mRegMap[0x0418 + 2] = index;
    mRegMap[0x0418 + 3] = index++;
    mRegMap[0x041C]     = index;
    mRegMap[0x041C + 1] = index;
    mRegMap[0x041C + 2] = index;
    mRegMap[0x041C + 3] = index++;
    mRegMap[0x0420]     = index;
    mRegMap[0x0420 + 1] = index;
    mRegMap[0x0420 + 2] = index;
    mRegMap[0x0420 + 3] = index++;
    mRegMap[0x0424]     = index;
    mRegMap[0x0424 + 1] = index;
    mRegMap[0x0424 + 2] = index;
    mRegMap[0x0424 + 3] = index++;
    mRegMap[0x0428]     = index;
    mRegMap[0x0428 + 1] = index;
    mRegMap[0x0428 + 2] = index;
    mRegMap[0x0428 + 3] = index++;
    mRegMap[0x042C]     = index;
    mRegMap[0x042C + 1] = index;
    mRegMap[0x042C + 2] = index;
    mRegMap[0x042C + 3] = index++;
    mRegMap[0x0430]     = index;
    mRegMap[0x0430 + 1] = index;
    mRegMap[0x0430 + 2] = index;
    mRegMap[0x0430 + 3] = index++;
    mRegMap[0x0434]     = index;
    mRegMap[0x0434 + 1] = index;
    mRegMap[0x0434 + 2] = index;
    mRegMap[0x0434 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USR_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(PWMCTR      , mCurReg, 0,  4,      "32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(PWMCTR      , mCurReg, 0,  4,      "32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(PWMDT       , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VDCRCT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VQCRCT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VEL         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VELSFT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DECVELG     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DECFLUX     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DECLD       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DECLQ       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VD2MAX      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VQ2MAX      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VD2         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VQ2         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GTHT        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PHI         , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(THTFORESFT  , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(THTEPWM     , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(THTVSFT     , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VDQSFT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SR23        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VU          , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VV          , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VW          , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TMAX        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VU0         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VV0         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VW0         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMK1       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VOLV        , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VU1         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VV1         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VW1         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VUOFS       , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VVOFS       , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VWOFS       , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VU2         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VV2         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VW2         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTUL        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTLL        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VUFIX       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VVFIX       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(VWFIX       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMK2       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTT         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CARR        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CARRBUF     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMU0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMV0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMW0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTOTH       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTOPV       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DTONV       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMUDT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMVDT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMWDT      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMUL       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMLL       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMUIP      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMVIP      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMWIP      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMU        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMV        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PWMW        , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*PWMCTR      ) (20, 20, "FPWMIBTH", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) (15, 15, "SETDTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) (14, 13, "PWMOP"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) (12, 12, "SETDEC"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) (11, 10, "DECIDQ"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 9,  9, "SETVEL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 8,  8, "VDQSEL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 7,  7, "PWMSEL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 6,  6, "SHIPWM"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 5,  4, "FLININIP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 3,  1, "SETHARM" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMCTR      ) ( 0,  0, "SETPWM"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMDT       ) ( 0,  0, "PWMDT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VDCRCT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VQCRCT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VEL         ) (31,  0, "DATA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*VELSFT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DECVELG     ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DECFLUX     ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DECLD       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DECLQ       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VD2MAX      ) (30,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VQ2MAX      ) (30,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VD2         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VQ2         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*GTHT        ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PHI         ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*THTFORESFT  ) (11,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*THTEPWM     ) (11,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*THTVSFT     ) (11,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VDQSFT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SR23        ) (31,  0, "DATA"    , 0xD106    , "R|W"   , vpcl::SPP_ENABLE);
    (*VU          ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VV          ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VW          ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TMAX        ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VU0         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VV0         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VW0         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMK1       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VOLV        ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VU1         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VV1         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VW1         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VUOFS       ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VVOFS       ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VWOFS       ) (15,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VU2         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VV2         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VW2         ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DTUL        ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DTLL        ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VUFIX       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VVFIX       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*VWFIX       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMK2       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DTT         ) (17,  0, "DATA"    , 0xFFF     , "R|W"   , vpcl::SPP_ENABLE);
    (*CARR        ) (17,  0, "DATA"    , 0x7FFF    , "R|W"   , vpcl::SPP_ENABLE);
    (*CARRBUF     ) (17,  0, "DATA"    , 0xFFFF    , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMU0       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMV0       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMW0       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DTOTH       ) (30,  0, "DATA"    , 0x7FFFFFFF, "R|W"   , vpcl::SPP_ENABLE);
    (*DTOPV       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DTONV       ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMUDT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMVDT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMWDT      ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMUL       ) (17,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMLL       ) (17,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMUIP      ) (17,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMVIP      ) (17,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMWIP      ) (17,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMU        ) (17,  0, "DATA"    , 0x47FF    , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMV        ) (17,  0, "DATA"    , 0x47FF    , "R|W"   , vpcl::SPP_ENABLE);
    (*PWMW        ) (17,  0, "DATA"    , 0x47FF    , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    // Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["PWMCTR"  ]["PWMOP"   ] = &Chwcore_pwm_regif::cb_PWMCTR_PWMOP;
    mWrCbAPI["PWMDT"   ]["PWMDT"   ] = &Chwcore_pwm_regif::cb_PWMDT_PWMDT;

    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Chwcore_pwm_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Chwcore_pwm_regif::~Chwcore_pwm_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Chwcore_pwm_regif::uint Chwcore_pwm_regif::bit_select(cuint val,    ///< [in] Writting address
                                                      cuint start,  ///< [in] start bit position
                                                      cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chwcore_pwm_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                               const unsigned char *p_data,   ///< [in] Writing data
                               cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chwcore_pwm_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                               unsigned char *p_data,   ///< [out] Reading data
                               cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chwcore_pwm_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                   const unsigned char *p_data,   ///< [in] Writing data
                                   cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chwcore_pwm_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                   unsigned char *p_data,   ///< [out] Reading data
                                   cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
// Description: reg_wr_process
// Ref: {HWCORE_PWM_UD_Direction_036, HWCORE_PWM_UD_Direction_026, HWCORE_PWM_UD_Direction_021}
bool Chwcore_pwm_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                       const unsigned char *p_data,  ///< [in] Writing data
                                       cuint size,                   ///< [in] Data size (byte)
                                       bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 11-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
// Description: reg_rd_process
// Ref: {HWCORE_PWM_UD_Direction_025, HWCORE_PWM_UD_Direction_021}
bool Chwcore_pwm_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                       unsigned char *p_data,   ///< [out] Reading data
                                       cuint size,              ///< [in]  Data size (byte)
                                       bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 11-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
// Description: reg_rd_func
// Ref: {HWCORE_PWM_UD_Direction_031}
bool Chwcore_pwm_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                    unsigned char *p_data,          ///< [out] Reading data
                                    cuint size,                     ///< [in]  Data size (byte)
                                    cuint reg_index,                ///< [in]  Register index
                                    bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }

    if (mIsReset) {
        re_printf("warning", "Cannot launch call-back function during reset period\n");
    } else {
        if (size < reg_length) {
            re_printf("warning","Should read all bit in a register\n");
        }
        
        pst_data = Register->read();

    }

    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
// Description: reg_wr_func
// Ref: {HWCORE_PWM_UD_Direction_037, HWCORE_PWM_UD_Direction_034, HWCORE_PWM_UD_Direction_031}
bool Chwcore_pwm_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                    const unsigned char *p_data,      ///< [in] Writing data
                                    cuint size,                       ///< [in] Data size (byte)
                                    cuint reg_index,                  ///< [in] Register index
                                    bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc) {
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
// Description: ChkSize
// Ref: {HWCORE_PWM_UD_Direction_021, HWCORE_PWM_UD_Direction_020}
bool Chwcore_pwm_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoull((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
// Description: reg_handle_command
// Ref: {HWCORE_PWM_UD_Direction_023, HWCORE_PWM_UD_Direction_024, HWCORE_PWM_UD_Direction_030}
void Chwcore_pwm_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Chwcore_pwm_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                if (mDumpRegisterRW) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                if (mAPBAccessMode) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                if (mDumpBitInfo) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Chwcore_pwm_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoull(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoull(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Chwcore_pwm_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Chwcore_pwm_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Chwcore_pwm_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif








/// convert string to vector
/// @return vector
std::vector<std::string> Chwcore_pwm_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Chwcore_pwm_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Chwcore_pwm_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(19)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,11, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Chwcore_pwm_regif::get_reg_index(cuint access_addr)
{
    if (access_addr < (1<<11)) {
        if (mRegMap[access_addr] != (1<<11)) {
            return mRegMap[access_addr];
        }
    }
    return -1;
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Chwcore_pwm_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Chwcore_pwm_regif::next_reg_object()
{
    assert(mCurReg != NULL);
    mCurReg = mCurReg->prev;
    if (mCurReg != NULL) {
        return mCurReg->my_p;
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Chwcore_pwm_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Chwcore_pwm_regif::uint Chwcore_pwm_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Chwcore_pwm_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

}

/// Get file name and line number
/// @return none
void Chwcore_pwm_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Chwcore_pwm_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
// Description: EnableReset
// Ref: {HWCORE_PWM_UD_Direction_042}
void Chwcore_pwm_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

}

#ifdef USR_CWR_SYSTEMC
uint Chwcore_pwm_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Chwcore_pwm_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Chwcore_pwm_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
