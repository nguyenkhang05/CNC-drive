// -----------------------------------------------------------------------------
// $Id: pic1a_regif.cpp,v 1.2 2014/12/31 06:33:44 dungvannguyen Exp $
//
// Copyright(c) 2010-2014 Renesas Electronics Corporation
// Copyright(c) 2010-2014 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : pic1a_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE PIC1A
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name            reg_name        wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access  init  support  callback
//     %%REG    PIC0EN          PIC0EN          8|16|32  8|16|32  8       0x00    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0SST         PIC0SST         8|16|32  8|16|32  8       0x04    -             -           -             -            W       0     TRUE     W
//     %%REG    PIC0SSER0       PIC0SSER0       16|32    8|16|32  16      0x10    -             -           -             -            W|R     0     TRUE     -
//     %%REG    PIC0SSER1       PIC0SSER1       16|32    8|16|32  16      0x14    -             -           -             -            W|R     0     TRUE     -
//     %%REG    PIC0SSER2       PIC0SSER2       16|32    8|16|32  16      0x18    -             -           -             -            W|R     0     TRUE     -
//     %%REG    PIC0SSER3       PIC0SSER3       16|32    8|16|32  16      0x1C    -             -           -             -            W|R     0     TRUE     -
//     %%REG    PIC0INI0        PIC0INI0        8|16|32  8|16|32  8       0x20    0             1           -             0x0C         W       0     TRUE     W
//     %%REG    PIC0INI1        PIC0INI1        8|16|32  8|16|32  8       0x24    0             1           -             0x0C         W       0     TRUE     W
//     %%REG    PIC0INI2        PIC0INI2        8|16|32  8|16|32  8       0x28    0             1           -             0x0C         W       0     TRUE     W
//     %%REG    PIC0WNGMK       PIC0WNGMK       8|16|32  8|16|32  8       0x38    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0WNGS        PIC0WNGS        8|16|32  8|16|32  8       0x40    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0WNGF        PIC0WNGF        8|16|32  8|16|32  8       0x48    0             1           -             0x04         W|R     0     TRUE     -
//     %%REG    PIC0WNGFCLR     PIC0WNGFCLR     8|16|32  8|16|32  8       0x50    0             1           -             0x04         W       0     TRUE     W
//     %%REG    PIC0RTO         PIC0RTO         16|32    8|16|32  16      0x58    0             1           -             0x04         W|R     0     TRUE     -
//     %%REG    PIC0LHSEL       PIC0LHSEL       8|16|32  8|16|32  8       0x60    0             1           -             0x08         W|R     0     TRUE     W
//     %%REG    PIC0TSGOUTCTR   PIC0TSGOUTCTR   8|16|32  8|16|32  8       0x64    0             1           -             0x08         W|R     0     TRUE     W
//     %%REG    PIC0HALLSEL     PIC0HALLSEL     8|16|32  8|16|32  8       0x74    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0TAUDSEL     PIC0TAUDSEL     32       8|16|32  32      0x78    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0HIZCEN      PIC0HIZCEN      8|16|32  8|16|32  8       0x80    0             3           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0SATTSEL40   PIC0SATTSEL40   8|16|32  8|16|32  8       0xA8    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0DGFTSSEL40  PIC0DGFTSSEL40  8|16|32  8|16|32  8       0xB0    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0ENCSEL40    PIC0ENCSEL40    8|16|32  8|16|32  8       0xB8    0             1           -             0x04         W|R     0     TRUE     W
//     %%REG    PIC0REG20       PIC0REG20       32       8|16|32  32      0xC0    0             1           -             0x14         W|R     0     TRUE     W
//     %%REG    PIC0REG21       PIC0REG21       32       8|16|32  32      0xC4    0             1           -             0x14         W|R     0     TRUE     W
//     %%REG    PIC0REG22       PIC0REG22       32       8|16|32  32      0xC8    0             1           -             0x14         W|R     0     TRUE     W
//     %%REG    PIC0REG23       PIC0REG23       32       8|16|32  32      0xCC    0             1           -             0x14         W|R     0     TRUE     W
//     %%REG    PIC0REG24       PIC0REG24       16|32    8|16|32  16      0xD0    0             1           -             0x14         W|R     0     TRUE     W
//     %%REG    PIC0REG30       PIC0REG30       32       8|16|32  32      0xE8    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0REG31       PIC0REG31       32       8|16|32  32      0xEC    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0REG32       PIC0REG32       16|32    8|16|32  16      0xF0    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0REG33       PIC0REG33       8|16|32  8|16|32  8       0xF4    -             -           -             -            W|R     0     TRUE     W
//     %%REG    PIC0REG5        PIC0REG5        16|32    8|16|32  16      0xF8    0             1           -             0x04         W|R     0     TRUE     W
// 
// %REG_NAME PIC0EN
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0EN0     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0SST
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    SYNCTRG     0      0      0     W       TRUE     W
// 
// %REG_NAME PIC0SSER0
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0SSER0n  15     0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0SSER1
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0SSER1n  15     0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0SSER2
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0SSER215     15     15      0     W|R     TRUE     -
//     %%BIT    PIC0SSER214     14     14      0     W|R     TRUE     -
//     %%BIT    PIC0SSER213     13     13      0     W|R     TRUE     -
//     %%BIT    PIC0SSER212     12     12      0     W|R     TRUE     -
//     %%BIT    PIC0SSER211     11     11      0     W|R     TRUE     -
//     %%BIT    PIC0SSER210     10     10      0     W|R     TRUE     -
//     %%BIT    PIC0SSER209     9      9       0     W|R     TRUE     -
//     %%BIT    PIC0SSER208     8      8       0     W|R     TRUE     -
//     %%BIT    PIC0SSER207     7      7       0     W|R     TRUE     -
//     %%BIT    PIC0SSER206     6      6       0     W|R     TRUE     -
//     %%BIT    PIC0SSER205     5      5       0     W|R     TRUE     -
//     %%BIT    PIC0SSER204     4      4       0     W|R     TRUE     -
//     %%BIT    PIC0SSER203     3      3       0     W|R     TRUE     -
//     %%BIT    PIC0SSER202     2      2       0     W|R     TRUE     -
//     %%BIT    PIC0SSER201     1      1       0     W|R     TRUE     -
//     %%BIT    PIC0SSER200     0      0       0     W|R     TRUE     -
// 
// %REG_NAME PIC0SSER3
//     %%TITLE  name         upper  lower  init  access  support  callback
//     %%BIT    PIC0SSER303  3      3      0     W|R     TRUE     -
//     %%BIT    PIC0SSER302  2      2      0     W|R     TRUE     -
//     %%BIT    PIC0SSER301  1      1      0     W|R     TRUE     -
//     %%BIT    PIC0SSER300  0      0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0INI0
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0INI07   7      7      0     W       TRUE     -
//     %%BIT    PIC0INI06   6      6      0     W       TRUE     -
//     %%BIT    PIC0INI05   5      5      0     W       TRUE     -
//     %%BIT    PIC0INI04   4      4      0     W       TRUE     -
//     %%BIT    PIC0INI03   3      3      0     W       TRUE     -
//     %%BIT    PIC0INI02   2      2      0     W       TRUE     -
//     %%BIT    PIC0INI01   1      1      0     W       TRUE     -
//     %%BIT    PIC0INI00   0      0      0     W       TRUE     W
// 
// %REG_NAME PIC0INI1
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0INI102  2      2      0     W       TRUE     -
//     %%BIT    PIC0INI101  1      1      0     W       TRUE     -
//     %%BIT    PIC0INI100  0      0      0     W       TRUE     W
// 
// %REG_NAME PIC0INI2
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0INI22   2      2      0     W       TRUE     -
//     %%BIT    PIC0INI21   1      1      0     W       TRUE     -
//     %%BIT    PIC0INI20   0      0      0     W       TRUE     W
// 
// %REG_NAME PIC0WNGMK
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    WNGMK2      2      2      0     W|R     TRUE     -
//     %%BIT    WNGMK1      1      1      0     W|R     TRUE     -
//     %%BIT    WNGMK0      0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0WNGS
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0WNGS5   5      5      0     W|R     TRUE     -
//     %%BIT    PIC0WNGS4   4      4      0     W|R     TRUE     -
//     %%BIT    PIC0WNGS3   3      3      0     W|R     TRUE     -
//     %%BIT    PIC0WNGS2   2      2      0     W|R     TRUE     -
//     %%BIT    PIC0WNGS1   1      1      0     W|R     TRUE     -
//     %%BIT    PIC0WNGS0   0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0WNGF
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0WNGF2   2      2      0     W|R     TRUE     -
//     %%BIT    PIC0WNGF1   1      1      0     W|R     TRUE     -
//     %%BIT    PIC0WNGF0   0      0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0WNGFCLR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    WNGFCLR2    2      2      0     W       TRUE     -
//     %%BIT    WNGFCLR1    1      1      0     W       TRUE     -
//     %%BIT    WNGFCLR0    0      0      0     W       TRUE     W
// 
// %REG_NAME PIC0RTO
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    RTOTRO5     11     11     0     W|R     TRUE     -
//     %%BIT    RTOTME5     10     10     0     W|R     TRUE     -
//     %%BIT    RTOTRO4     9      9      0     W|R     TRUE     -
//     %%BIT    RTOTME4     8      8      0     W|R     TRUE     -
//     %%BIT    RTOTRO3     7      7      0     W|R     TRUE     -
//     %%BIT    RTOTME3     6      6      0     W|R     TRUE     -
//     %%BIT    RTOTRO2     5      5      0     W|R     TRUE     -
//     %%BIT    RTOTME2     4      4      0     W|R     TRUE     -
//     %%BIT    RTOTRO1     3      3      0     W|R     TRUE     -
//     %%BIT    RTOTME1     2      2      0     W|R     TRUE     -
//     %%BIT    RTOTRO0     1      1      0     W|R     TRUE     -
//     %%BIT    RTOTME0     0      0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0LHSEL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PIC0LHSEL6  6      6      0     W|R     TRUE     -
//     %%BIT    PIC0LHSEL5  5      5      0     W|R     TRUE     -
//     %%BIT    PIC0LHSEL4  4      4      0     W|R     TRUE     -
//     %%BIT    PIC0LHSEL3  3      3      0     W|R     TRUE     -
//     %%BIT    PIC0LHSEL2  2      2      0     W|R     TRUE     -
//     %%BIT    PIC0LHSEL1  1      1      0     W|R     TRUE     W
// 
// %REG_NAME PIC0TSGOUTCTR
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0TSGOUTCTR6  6      6      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR5  5      5      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR4  4      4      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR3  3      3      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR2  2      2      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR1  1      1      0     W|R     TRUE     -
//     %%BIT    PIC0TSGOUTCTR0  0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0HALLSEL
//     %%TITLE  name          upper  lower  init  access  support  callback
//     %%BIT    PIC0HALLSEL1  1      1      0     W|R     TRUE     -
//     %%BIT    PIC0HALLSEL0  0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0TAUDSEL
//     %%TITLE  name              upper  lower  init  access  support  callback
//     %%BIT    PIC0TAUDIN143     31     31     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN142     30     30     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN141     29     29     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN140     28     28     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN123     27     27     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN122     26     26     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN121     25     25     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN120     24     24     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN103     23     23     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN102     22     22     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN101     21     21     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN100     20     20     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN83      19     19     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN82      18     18     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN81      17     17     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN80      16     16     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN63      15     15     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN62      14     14     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN61      13     13     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN60      12     12     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN43      11     11     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN42      10     10     0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN41      9      9      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN40      8      8      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN23      7      7      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN22      6      6      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN21      5      5      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN20      4      4      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN03      3      3      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN02      2      2      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN01      1      1      0     W|R     TRUE     -
//     %%BIT    PIC0TAUDIN00      0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0HIZCEN
//     %%TITLE  name          upper  lower  init  access  support  callback
//     %%BIT    PIC0HIZCEN7   7      7      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN6   6      6      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN5   5      5      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN4   4      4      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN3   3      3      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN2   2      2      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN1   1      1      0     W|R     TRUE     -
//     %%BIT    PIC0HIZCEN0   0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0SATTSEL40
//     %%TITLE  name              upper  lower  init  access  support  callback
//     %%BIT    PIC0SATTSEL407    7      7      0     W|R     TRUE     -
//     %%BIT    PIC0SATTSEL403_0  3      0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0DGFTSSEL40
//     %%TITLE  name               upper  lower  init  access  support  callback
//     %%BIT    PIC0DGFTSSEL407    7      7      0     W|R     TRUE     -
//     %%BIT    PIC0DGFTSSEL403_0  3      0      0     W|R     TRUE     -
// 
// %REG_NAME PIC0ENCSEL40
//     %%TITLE  name             upper  lower  init  access  support  callback
//     %%BIT    PIC0ENCSEL407    7      7      0     W|R     TRUE     -
//     %%BIT    PIC0ENCSEL403_0  3      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG20
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG2028     28     28     0     W|R     TRUE     -
//     %%BIT    PIC0REG2025_24  25     24     0     W|R     TRUE     -
//     %%BIT    PIC0REG2020     20     20     0     W|R     TRUE     -
//     %%BIT    PIC0REG2018     18     18     0     W|R     TRUE     -
//     %%BIT    PIC0REG2017     17     17     0     W|R     TRUE     -
//     %%BIT    PIC0REG2016     16     16     0     W|R     TRUE     -
//     %%BIT    PIC0REG2013_12  13     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG2011_10  11     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG2009_08  9      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG2005     5      5      0     W|R     TRUE     -
//     %%BIT    PIC0REG2004     4      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG2003     3      3      0     W|R     TRUE     -
//     %%BIT    PIC0REG2002     2      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG2001     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG2000     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG21
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG2127_26  27     26     0     W|R     TRUE     -
//     %%BIT    PIC0REG2125_24  25     24     0     W|R     TRUE     -
//     %%BIT    PIC0REG2123_22  23     22     0     W|R     TRUE     -
//     %%BIT    PIC0REG2121_20  21     20     0     W|R     TRUE     -
//     %%BIT    PIC0REG2119_18  19     18     0     W|R     TRUE     -
//     %%BIT    PIC0REG2117_16  17     16     0     W|R     TRUE     -
//     %%BIT    PIC0REG2111_10  11     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG2109_08  9      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG2107_06  7      6      0     W|R     TRUE     -
//     %%BIT    PIC0REG2105_04  5      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG2103_02  3      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG2101_00  1      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG22
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG2230     30     30     0     W|R     TRUE     -
//     %%BIT    PIC0REG2229     29     29     0     W|R     TRUE     -
//     %%BIT    PIC0REG2228     28     28     0     W|R     TRUE     -
//     %%BIT    PIC0REG2227_26  27     26     0     W|R     TRUE     -
//     %%BIT    PIC0REG2225_24  25     24     0     W|R     TRUE     -
//     %%BIT    PIC0REG2223_22  23     22     0     W|R     TRUE     -
//     %%BIT    PIC0REG2221_20  21     20     0     W|R     TRUE     -
//     %%BIT    PIC0REG2219_18  19     18     0     W|R     TRUE     -
//     %%BIT    PIC0REG2217_16  17     16     0     W|R     TRUE     -
//     %%BIT    PIC0REG2213     13     13     0     W|R     TRUE     -
//     %%BIT    PIC0REG2212     12     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG2211     11     11     0     W|R     TRUE     -
//     %%BIT    PIC0REG2210     10     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG2209     9      9      0     W|R     TRUE     -
//     %%BIT    PIC0REG2208     8      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG2207     7      7      0     W|R     TRUE     -
//     %%BIT    PIC0REG2206     6      6      0     W|R     TRUE     -
//     %%BIT    PIC0REG2205     5      5      0     W|R     TRUE     -
//     %%BIT    PIC0REG2204     4      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG2203     3      3      0     W|R     TRUE     -
//     %%BIT    PIC0REG2202     2      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG2201     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG2200     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG23
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG2322_20  22     20     0     W|R     TRUE     -
//     %%BIT    PIC0REG2318_16  18     16     0     W|R     TRUE     -
//     %%BIT    PIC0REG2314_12  14     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG2310_08  10     8      0     W|R     TRUE     -
//     %%BIT    PIC0REG2306_04  6      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG2302_00  2      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG24
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG2415     15     15     0     W|R     TRUE     -
//     %%BIT    PIC0REG2414     14     14     0     W|R     TRUE     -
//     %%BIT    PIC0REG2413     13     13     0     W|R     TRUE     -
//     %%BIT    PIC0REG2412     12     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG2411     11     11     0     W|R     TRUE     -
//     %%BIT    PIC0REG2410     10     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG2409     9      9      0     W|R     TRUE     -
//     %%BIT    PIC0REG2408     8      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG2407     7      7      0     W|R     TRUE     -
//     %%BIT    PIC0REG2406     6      6      0     W|R     TRUE     -
//     %%BIT    PIC0REG2405     5      5      0     W|R     TRUE     -
//     %%BIT    PIC0REG2404     4      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG2403     3      3      0     W|R     TRUE     -
//     %%BIT    PIC0REG2402     2      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG2401     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG2400     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG30
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG3024     24     24     0     W|R     TRUE     -
//     %%BIT    PIC0REG3023     23     23     0     W|R     TRUE     -
//     %%BIT    PIC0REG3022     22     22     0     W|R     TRUE     -
//     %%BIT    PIC0REG3021     21     21     0     W|R     TRUE     -
//     %%BIT    PIC0REG3020_19  20     19     0     W|R     TRUE     -
//     %%BIT    PIC0REG3018     18     18     0     W|R     TRUE     -
//     %%BIT    PIC0REG3017_16  17     16     0     W|R     TRUE     -
//     %%BIT    PIC0REG3015_12  15     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG3011_10  11     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG3009_08  9      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG3007_06  7      6      0     W|R     TRUE     -
//     %%BIT    PIC0REG3005_02  5      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG3001     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG3000     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG31
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG3126     26     26     0     W|R     TRUE     -
//     %%BIT    PIC0REG3125     25     25     0     W|R     TRUE     -
//     %%BIT    PIC0REG3124     24     24     0     W|R     TRUE     -
//     %%BIT    PIC0REG3123     23     23     0     W|R     TRUE     -
//     %%BIT    PIC0REG3122_21  22     21     0     W|R     TRUE     -
//     %%BIT    PIC0REG3120     20     20     0     W|R     TRUE     -
//     %%BIT    PIC0REG3119_18  19     18     0     W|R     TRUE     -
//     %%BIT    PIC0REG3117_15  17     15     0     W|R     TRUE     -
//     %%BIT    PIC0REG3114     14     14     0     W|R     TRUE     -
//     %%BIT    PIC0REG3113_12  13     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG3111     11     11     0     W|R     TRUE     -
//     %%BIT    PIC0REG3110_09  10     9      0     W|R     TRUE     -
//     %%BIT    PIC0REG3108_06  8      6      0     W|R     TRUE     -
//     %%BIT    PIC0REG3105_04  5      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG3103     3      3      0     W|R     TRUE     -
//     %%BIT    PIC0REG3102_01  2      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG3100     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG32
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG3213     13     13     0     W|R     TRUE     -
//     %%BIT    PIC0REG3212     12     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG3211_10  11     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG3209     9      9      0     W|R     TRUE     -
//     %%BIT    PIC0REG3208     8      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG3205     5      5      0     W|R     TRUE     -
//     %%BIT    PIC0REG3204     4      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG3203_02  3      2      0     W|R     TRUE     -
//     %%BIT    PIC0REG3201     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG3200     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG33
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG3301     1      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG3300     0      0      0     W|R     TRUE     W
// 
// %REG_NAME PIC0REG5
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    PIC0REG514      14     14     0     W|R     TRUE     -
//     %%BIT    PIC0REG513      13     13     0     W|R     TRUE     -
//     %%BIT    PIC0REG512      12     12     0     W|R     TRUE     -
//     %%BIT    PIC0REG510      10     10     0     W|R     TRUE     -
//     %%BIT    PIC0REG508      8      8      0     W|R     TRUE     -
//     %%BIT    PIC0REG507      7      7      0     W|R     TRUE     -
//     %%BIT    PIC0REG506_05   6      5      0     W|R     TRUE     -
//     %%BIT    PIC0REG504      4      4      0     W|R     TRUE     -
//     %%BIT    PIC0REG503      3      3      0     W|R     TRUE     -
//     %%BIT    PIC0REG502_01   2      1      0     W|R     TRUE     -
//     %%BIT    PIC0REG500      0      0      0     W|R     TRUE     W
////////////////////////////////////////////////////////////////////////////////
/// @file pic1a_regif.cpp
/// @brief Register IF class of model PIC1A
/// $Id: pic1a_regif.cpp,v 1.2 2014/12/31 06:33:44 dungvannguyen Exp $
/// $Date: 2014/12/31 06:33:44 $
/// $Revison$
/// $Author: dungvannguyen $
////////////////////////////////////////////////////////////////////////////////
#include "pic1a_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cpic1a_regif::Cpic1a_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x100/4))
    #endif
{
    CommandInit();
    PIC0EN         = new vpcl::re_register(0x0000, this, "PIC0EN"        , name.c_str());
    PIC0SST        = new vpcl::re_register(0x0004, this, "PIC0SST"       , name.c_str());
    PIC0SSER0      = new vpcl::re_register(0x0010, this, "PIC0SSER0"     , name.c_str());
    PIC0SSER1      = new vpcl::re_register(0x0014, this, "PIC0SSER1"     , name.c_str());
    PIC0SSER2      = new vpcl::re_register(0x0018, this, "PIC0SSER2"     , name.c_str());
    PIC0SSER3      = new vpcl::re_register(0x001C, this, "PIC0SSER3"     , name.c_str());
    PIC0HALLSEL    = new vpcl::re_register(0x0074, this, "PIC0HALLSEL"   , name.c_str());
    PIC0REG30      = new vpcl::re_register(0x00E8, this, "PIC0REG30"     , name.c_str());
    PIC0REG31      = new vpcl::re_register(0x00EC, this, "PIC0REG31"     , name.c_str());
    PIC0REG32      = new vpcl::re_register(0x00F0, this, "PIC0REG32"     , name.c_str());
    PIC0REG33      = new vpcl::re_register(0x00F4, this, "PIC0REG33"     , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_PIC0INI0; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI0"<< i;
        PIC0INI0      [i] = new vpcl::re_register((0x0020) + 12*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0INI1; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI1"<< i;
        PIC0INI1      [i] = new vpcl::re_register((0x0024) + 12*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0INI2; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI2"<< i;
        PIC0INI2      [i] = new vpcl::re_register((0x0028) + 12*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGMK"<< i;
        PIC0WNGMK     [i] = new vpcl::re_register((0x0038) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0WNGS; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGS"<< i;
        PIC0WNGS      [i] = new vpcl::re_register((0x0040) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0WNGF; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGF"<< i;
        PIC0WNGF      [i] = new vpcl::re_register((0x0048) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGFCLR"<< i;
        PIC0WNGFCLR   [i] = new vpcl::re_register((0x0050) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0RTO; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0RTO"<< i;
        PIC0RTO       [i] = new vpcl::re_register((0x0058) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0LHSEL"<< i;
        PIC0LHSEL     [i] = new vpcl::re_register((0x0060) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0TSGOUTCTR"<< i;
        PIC0TSGOUTCTR [i] = new vpcl::re_register((0x0064) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0TAUDSEL; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0TAUDSEL"<< i;
        PIC0TAUDSEL   [i] = new vpcl::re_register((0x0078) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0HIZCEN; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0HIZCEN"<< i;
        PIC0HIZCEN    [i] = new vpcl::re_register((0x0080) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0SATTSEL40; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0SATTSEL40"<< i;
        PIC0SATTSEL40 [i] = new vpcl::re_register((0x00A8) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0DGFTSSEL40"<< i;
        PIC0DGFTSSEL40[i] = new vpcl::re_register((0x00B0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0ENCSEL40"<< i;
        PIC0ENCSEL40  [i] = new vpcl::re_register((0x00B8) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG20; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG20"<< i;
        PIC0REG20     [i] = new vpcl::re_register((0x00C0) + 20*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG21; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG21"<< i;
        PIC0REG21     [i] = new vpcl::re_register((0x00C4) + 20*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG22; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG22"<< i;
        PIC0REG22     [i] = new vpcl::re_register((0x00C8) + 20*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG23; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG23"<< i;
        PIC0REG23     [i] = new vpcl::re_register((0x00CC) + 20*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG24; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG24"<< i;
        PIC0REG24     [i] = new vpcl::re_register((0x00D0) + 20*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_PIC0REG5; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG5"<< i;
        PIC0REG5      [i] = new vpcl::re_register((0x00F8) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index++;
    for(uint i = 0; i < emNUM_PIC0INI0;      i++) {
        mRegMap[(0x0020)     + i*12] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0INI1;      i++) {
        mRegMap[(0x0024)     + i*12] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0INI2;      i++) {
        mRegMap[(0x0028)     + i*12] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK;     i++) {
        mRegMap[(0x0038)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0WNGS;      i++) {
        mRegMap[(0x0040)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0WNGF;      i++) {
        mRegMap[(0x0048)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR;   i++) {
        mRegMap[(0x0050)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0RTO;       i++) {
        mRegMap[(0x0058)     + i*4 ] = index;
        mRegMap[(0x0058 + 1) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL;     i++) {
        mRegMap[(0x0060)     + i*8 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR; i++) {
        mRegMap[(0x0064)     + i*8 ] = index++;
    }
    mRegMap[0x0074]     = index++;
    for(uint i = 0; i < emNUM_PIC0TAUDSEL;   i++) {
        mRegMap[(0x0078)     + i*4 ] = index;
        mRegMap[(0x0078 + 1) + i*4 ] = index;
        mRegMap[(0x0078 + 2) + i*4 ] = index;
        mRegMap[(0x0078 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0HIZCEN;    i++) {
        mRegMap[(0x0080)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0SATTSEL40; i++) {
        mRegMap[(0x00A8)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) {
        mRegMap[(0x00B0)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40;  i++) {
        mRegMap[(0x00B8)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0REG20;     i++) {
        mRegMap[(0x00C0)     + i*20] = index;
        mRegMap[(0x00C0 + 1) + i*20] = index;
        mRegMap[(0x00C0 + 2) + i*20] = index;
        mRegMap[(0x00C0 + 3) + i*20] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0REG21;     i++) {
        mRegMap[(0x00C4)     + i*20] = index;
        mRegMap[(0x00C4 + 1) + i*20] = index;
        mRegMap[(0x00C4 + 2) + i*20] = index;
        mRegMap[(0x00C4 + 3) + i*20] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0REG22;     i++) {
        mRegMap[(0x00C8)     + i*20] = index;
        mRegMap[(0x00C8 + 1) + i*20] = index;
        mRegMap[(0x00C8 + 2) + i*20] = index;
        mRegMap[(0x00C8 + 3) + i*20] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0REG23;     i++) {
        mRegMap[(0x00CC)     + i*20] = index;
        mRegMap[(0x00CC + 1) + i*20] = index;
        mRegMap[(0x00CC + 2) + i*20] = index;
        mRegMap[(0x00CC + 3) + i*20] = index++;
    }
    for(uint i = 0; i < emNUM_PIC0REG24;     i++) {
        mRegMap[(0x00D0)     + i*20] = index;
        mRegMap[(0x00D0 + 1) + i*20] = index++;
    }
    mRegMap[0x00E8]     = index;
    mRegMap[0x00E8 + 1] = index;
    mRegMap[0x00E8 + 2] = index;
    mRegMap[0x00E8 + 3] = index++;
    mRegMap[0x00EC]     = index;
    mRegMap[0x00EC + 1] = index;
    mRegMap[0x00EC + 2] = index;
    mRegMap[0x00EC + 3] = index++;
    mRegMap[0x00F0]     = index;
    mRegMap[0x00F0 + 1] = index++;
    mRegMap[0x00F4]     = index++;
    for(uint i = 0; i < emNUM_PIC0REG5;      i++) {
        mRegMap[(0x00F8)     + i*4 ] = index;
        mRegMap[(0x00F8 + 1) + i*4 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_PIC0EN_, "PIC0EN_", 0x0000);
    CW_PIC0EN         = new scml2::bitfield<uint>(PIC0EN->name()        , CW_PIC0EN_                     ,  0,  8);
    cw_instantiate_reg(CW_PIC0SST_, "PIC0SST_", 0x0004);
    CW_PIC0SST        = new scml2::bitfield<uint>(PIC0SST->name()       , CW_PIC0SST_                    ,  0,  8);
    cw_instantiate_reg(CW_PIC0SSER0_, "PIC0SSER0_", 0x0010);
    CW_PIC0SSER0      = new scml2::bitfield<uint>(PIC0SSER0->name()     , CW_PIC0SSER0_                  ,  0, 16);
    cw_instantiate_reg(CW_PIC0SSER1_, "PIC0SSER1_", 0x0014);
    CW_PIC0SSER1      = new scml2::bitfield<uint>(PIC0SSER1->name()     , CW_PIC0SSER1_                  ,  0, 16);
    cw_instantiate_reg(CW_PIC0SSER2_, "PIC0SSER2_", 0x0018);
    CW_PIC0SSER2      = new scml2::bitfield<uint>(PIC0SSER2->name()     , CW_PIC0SSER2_                  ,  0, 16);
    cw_instantiate_reg(CW_PIC0SSER3_, "PIC0SSER3_", 0x001C);
    CW_PIC0SSER3      = new scml2::bitfield<uint>(PIC0SSER3->name()     , CW_PIC0SSER3_                  ,  0, 16);
    for(uint i = 0; i < emNUM_PIC0INI0      ; i++) {
        cw_instantiate_reg(CW_PIC0INI0_[i], PIC0INI0      [i]->name(), PIC0INI0      [i]->addr());
        CW_PIC0INI0      [i] = new scml2::bitfield<uint>(PIC0INI0->name()      , CW_PIC0INI0_      [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0INI1      ; i++) {
        cw_instantiate_reg(CW_PIC0INI1_[i], PIC0INI1      [i]->name(), PIC0INI1      [i]->addr());
        CW_PIC0INI1      [i] = new scml2::bitfield<uint>(PIC0INI1->name()      , CW_PIC0INI1_      [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0INI2      ; i++) {
        cw_instantiate_reg(CW_PIC0INI2_[i], PIC0INI2      [i]->name(), PIC0INI2      [i]->addr());
        CW_PIC0INI2      [i] = new scml2::bitfield<uint>(PIC0INI2->name()      , CW_PIC0INI2_      [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK     ; i++) {
        cw_instantiate_reg(CW_PIC0WNGMK_[i], PIC0WNGMK     [i]->name(), PIC0WNGMK     [i]->addr());
        CW_PIC0WNGMK     [i] = new scml2::bitfield<uint>(PIC0WNGMK->name()     , CW_PIC0WNGMK_     [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0WNGS      ; i++) {
        cw_instantiate_reg(CW_PIC0WNGS_[i], PIC0WNGS      [i]->name(), PIC0WNGS      [i]->addr());
        CW_PIC0WNGS      [i] = new scml2::bitfield<uint>(PIC0WNGS->name()      , CW_PIC0WNGS_      [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0WNGF      ; i++) {
        cw_instantiate_reg(CW_PIC0WNGF_[i], PIC0WNGF      [i]->name(), PIC0WNGF      [i]->addr());
        CW_PIC0WNGF      [i] = new scml2::bitfield<uint>(PIC0WNGF->name()      , CW_PIC0WNGF_      [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR   ; i++) {
        cw_instantiate_reg(CW_PIC0WNGFCLR_[i], PIC0WNGFCLR   [i]->name(), PIC0WNGFCLR   [i]->addr());
        CW_PIC0WNGFCLR   [i] = new scml2::bitfield<uint>(PIC0WNGFCLR->name()   , CW_PIC0WNGFCLR_   [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0RTO       ; i++) {
        cw_instantiate_reg(CW_PIC0RTO_[i], PIC0RTO       [i]->name(), PIC0RTO       [i]->addr());
        CW_PIC0RTO       [i] = new scml2::bitfield<uint>(PIC0RTO->name()       , CW_PIC0RTO_       [i],  0, 16);
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL     ; i++) {
        cw_instantiate_reg(CW_PIC0LHSEL_[i], PIC0LHSEL     [i]->name(), PIC0LHSEL     [i]->addr());
        CW_PIC0LHSEL     [i] = new scml2::bitfield<uint>(PIC0LHSEL->name()     , CW_PIC0LHSEL_     [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR ; i++) {
        cw_instantiate_reg(CW_PIC0TSGOUTCTR_[i], PIC0TSGOUTCTR [i]->name(), PIC0TSGOUTCTR [i]->addr());
        CW_PIC0TSGOUTCTR [i] = new scml2::bitfield<uint>(PIC0TSGOUTCTR->name() , CW_PIC0TSGOUTCTR_ [i],  0,  8);
    }
    cw_instantiate_reg(CW_PIC0HALLSEL_, "PIC0HALLSEL_", 0x0074);
    CW_PIC0HALLSEL    = new scml2::bitfield<uint>(PIC0HALLSEL->name()   , CW_PIC0HALLSEL_                ,  0,  8);
    for(uint i = 0; i < emNUM_PIC0HIZCEN    ; i++) {
        cw_instantiate_reg(CW_PIC0HIZCEN_[i], PIC0HIZCEN    [i]->name(), PIC0HIZCEN    [i]->addr());
        CW_PIC0HIZCEN    [i] = new scml2::bitfield<uint>(PIC0HIZCEN->name()    , CW_PIC0HIZCEN_    [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0SATTSEL40 ; i++) {
        cw_instantiate_reg(CW_PIC0SATTSEL40_[i], PIC0SATTSEL40 [i]->name(), PIC0SATTSEL40 [i]->addr());
        CW_PIC0SATTSEL40 [i] = new scml2::bitfield<uint>(PIC0SATTSEL40->name() , CW_PIC0SATTSEL40_ [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) {
        cw_instantiate_reg(CW_PIC0DGFTSSEL40_[i], PIC0DGFTSSEL40[i]->name(), PIC0DGFTSSEL40[i]->addr());
        CW_PIC0DGFTSSEL40[i] = new scml2::bitfield<uint>(PIC0DGFTSSEL40->name(), CW_PIC0DGFTSSEL40_[i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40  ; i++) {
        cw_instantiate_reg(CW_PIC0ENCSEL40_[i], PIC0ENCSEL40  [i]->name(), PIC0ENCSEL40  [i]->addr());
        CW_PIC0ENCSEL40  [i] = new scml2::bitfield<uint>(PIC0ENCSEL40->name()  , CW_PIC0ENCSEL40_  [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_PIC0REG24     ; i++) {
        cw_instantiate_reg(CW_PIC0REG24_[i], PIC0REG24     [i]->name(), PIC0REG24     [i]->addr());
        CW_PIC0REG24     [i] = new scml2::bitfield<uint>(PIC0REG24->name()     , CW_PIC0REG24_     [i],  0, 16);
    }
    cw_instantiate_reg(CW_PIC0REG32_, "PIC0REG32_", 0x00F0);
    CW_PIC0REG32      = new scml2::bitfield<uint>(PIC0REG32->name()     , CW_PIC0REG32_                  ,  0, 16);
    cw_instantiate_reg(CW_PIC0REG33_, "PIC0REG33_", 0x00F4);
    CW_PIC0REG33      = new scml2::bitfield<uint>(PIC0REG33->name()     , CW_PIC0REG33_                  ,  0,  8);
    for(uint i = 0; i < emNUM_PIC0REG5      ; i++) {
        cw_instantiate_reg(CW_PIC0REG5_[i], PIC0REG5      [i]->name(), PIC0REG5      [i]->addr());
        CW_PIC0REG5      [i] = new scml2::bitfield<uint>(PIC0REG5->name()      , CW_PIC0REG5_      [i],  0, 16);
    }
    for(uint i = 0; i < emNUM_PIC0TAUDSEL   ; i++) cw_instantiate_reg(CW_PIC0TAUDSEL     [i], PIC0TAUDSEL   [i]->name(), PIC0TAUDSEL   [i]->addr());
    for(uint i = 0; i < emNUM_PIC0REG20     ; i++) cw_instantiate_reg(CW_PIC0REG20       [i], PIC0REG20     [i]->name(), PIC0REG20     [i]->addr());
    for(uint i = 0; i < emNUM_PIC0REG21     ; i++) cw_instantiate_reg(CW_PIC0REG21       [i], PIC0REG21     [i]->name(), PIC0REG21     [i]->addr());
    for(uint i = 0; i < emNUM_PIC0REG22     ; i++) cw_instantiate_reg(CW_PIC0REG22       [i], PIC0REG22     [i]->name(), PIC0REG22     [i]->addr());
    for(uint i = 0; i < emNUM_PIC0REG23     ; i++) cw_instantiate_reg(CW_PIC0REG23       [i], PIC0REG23     [i]->name(), PIC0REG23     [i]->addr());
    cw_instantiate_reg(CW_PIC0REG30       , PIC0REG30->name()     , PIC0REG30->addr()     );
    cw_instantiate_reg(CW_PIC0REG31       , PIC0REG31->name()     , PIC0REG31->addr()     );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(PIC0EN          , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0SST         , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0SSER0       , mCurReg, 0,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0SSER1       , mCurReg, 0,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0SSER2       , mCurReg, 0,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0SSER3       , mCurReg, 0,  2,   "16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0INI0      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0INI0        [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0INI1      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0INI1        [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0INI2      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0INI2        [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0WNGMK     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0WNGMK       [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0WNGS      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0WNGS        [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0WNGF      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0WNGF        [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0WNGFCLR   ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0WNGFCLR     [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0RTO       ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0RTO         [i], mCurReg, i,  2,   "16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0LHSEL     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0LHSEL       [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0TSGOUTCTR   [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0HALLSEL     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0TAUDSEL   ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0TAUDSEL     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0HIZCEN    ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0HIZCEN      [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0SATTSEL40 ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0SATTSEL40   [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0DGFTSSEL40  [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0ENCSEL40  ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0ENCSEL40    [i], mCurReg, i,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG20     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG20       [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG21     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG21       [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG22     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG22       [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG23     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG23       [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG24     ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG24       [i], mCurReg, i,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0REG30       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0REG31       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0REG32       , mCurReg, 0,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PIC0REG33       , mCurReg, 0,  1, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_PIC0REG5      ; i++) mCurReg = mRegArray[index++] = new SRegList(PIC0REG5        [i], mCurReg, i,  2,   "16|32", "8|16|32");

    mRegList = mCurReg;

    (*PIC0EN          ) ( 0,  0, "PIC0EN0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SST         ) ( 0,  0, "SYNCTRG" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*PIC0SSER0       ) (15,  0, "PIC0SSER0n", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER1       ) (15,  0, "PIC0SSER1n", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (15, 15, "PIC0SSER215", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (14, 14, "PIC0SSER214", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (13, 13, "PIC0SSER213", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (12, 12, "PIC0SSER212", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (11, 11, "PIC0SSER211", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) (10, 10, "PIC0SSER210", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 9,  9, "PIC0SSER209", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 8,  8, "PIC0SSER208", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 7,  7, "PIC0SSER207", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 6,  6, "PIC0SSER206", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 5,  5, "PIC0SSER205", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 4,  4, "PIC0SSER204", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 3,  3, "PIC0SSER203", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 2,  2, "PIC0SSER202", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 1,  1, "PIC0SSER201", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER2       ) ( 0,  0, "PIC0SSER200", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER3       ) ( 3,  3, "PIC0SSER303", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER3       ) ( 2,  2, "PIC0SSER302", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER3       ) ( 1,  1, "PIC0SSER301", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0SSER3       ) ( 0,  0, "PIC0SSER300", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0HALLSEL     ) ( 1,  1, "PIC0HALLSEL1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0HALLSEL     ) ( 0,  0, "PIC0HALLSEL0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (24, 24, "PIC0REG3024", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (23, 23, "PIC0REG3023", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (22, 22, "PIC0REG3022", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (21, 21, "PIC0REG3021", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (20, 19, "PIC0REG3020_19", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (18, 18, "PIC0REG3018", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (17, 16, "PIC0REG3017_16", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (15, 12, "PIC0REG3015_12", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) (11, 10, "PIC0REG3011_10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) ( 9,  8, "PIC0REG3009_08", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) ( 7,  6, "PIC0REG3007_06", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) ( 5,  2, "PIC0REG3005_02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) ( 1,  1, "PIC0REG3001", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG30       ) ( 0,  0, "PIC0REG3000", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (26, 26, "PIC0REG3126", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (25, 25, "PIC0REG3125", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (24, 24, "PIC0REG3124", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (23, 23, "PIC0REG3123", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (22, 21, "PIC0REG3122_21", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (20, 20, "PIC0REG3120", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (19, 18, "PIC0REG3119_18", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (17, 15, "PIC0REG3117_15", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (14, 14, "PIC0REG3114", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (13, 12, "PIC0REG3113_12", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (11, 11, "PIC0REG3111", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) (10,  9, "PIC0REG3110_09", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) ( 8,  6, "PIC0REG3108_06", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) ( 5,  4, "PIC0REG3105_04", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) ( 3,  3, "PIC0REG3103", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) ( 2,  1, "PIC0REG3102_01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG31       ) ( 0,  0, "PIC0REG3100", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) (13, 13, "PIC0REG3213", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) (12, 12, "PIC0REG3212", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) (11, 10, "PIC0REG3211_10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 9,  9, "PIC0REG3209", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 8,  8, "PIC0REG3208", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 5,  5, "PIC0REG3205", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 4,  4, "PIC0REG3204", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 3,  2, "PIC0REG3203_02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 1,  1, "PIC0REG3201", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG32       ) ( 0,  0, "PIC0REG3200", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG33       ) ( 1,  1, "PIC0REG3301", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PIC0REG33       ) ( 0,  0, "PIC0REG3300", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_PIC0INI2; i++) {
        (*PIC0INI2        [i]) ( 2,  2, "PIC0INI22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI2        [i]) ( 1,  1, "PIC0INI21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI2        [i]) ( 0,  0, "PIC0INI20", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0TAUDSEL; i++) {
        (*PIC0TAUDSEL     [i]) (31, 31, "PIC0TAUDIN143", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (30, 30, "PIC0TAUDIN142", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (29, 29, "PIC0TAUDIN141", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (28, 28, "PIC0TAUDIN140", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (27, 27, "PIC0TAUDIN123", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (26, 26, "PIC0TAUDIN122", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (25, 25, "PIC0TAUDIN121", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (24, 24, "PIC0TAUDIN120", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (23, 23, "PIC0TAUDIN103", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (22, 22, "PIC0TAUDIN102", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (21, 21, "PIC0TAUDIN101", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (20, 20, "PIC0TAUDIN100", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (19, 19, "PIC0TAUDIN83", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (18, 18, "PIC0TAUDIN82", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (17, 17, "PIC0TAUDIN81", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (16, 16, "PIC0TAUDIN80", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (15, 15, "PIC0TAUDIN63", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (14, 14, "PIC0TAUDIN62", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (13, 13, "PIC0TAUDIN61", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (12, 12, "PIC0TAUDIN60", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (11, 11, "PIC0TAUDIN43", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) (10, 10, "PIC0TAUDIN42", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 9,  9, "PIC0TAUDIN41", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 8,  8, "PIC0TAUDIN40", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 7,  7, "PIC0TAUDIN23", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 6,  6, "PIC0TAUDIN22", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 5,  5, "PIC0TAUDIN21", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 4,  4, "PIC0TAUDIN20", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 3,  3, "PIC0TAUDIN03", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 2,  2, "PIC0TAUDIN02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 1,  1, "PIC0TAUDIN01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TAUDSEL     [i]) ( 0,  0, "PIC0TAUDIN00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0INI0; i++) {
        (*PIC0INI0        [i]) ( 7,  7, "PIC0INI07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 6,  6, "PIC0INI06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 5,  5, "PIC0INI05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 4,  4, "PIC0INI04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 3,  3, "PIC0INI03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 2,  2, "PIC0INI02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 1,  1, "PIC0INI01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI0        [i]) ( 0,  0, "PIC0INI00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0INI1; i++) {
        (*PIC0INI1        [i]) ( 2,  2, "PIC0INI102", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI1        [i]) ( 1,  1, "PIC0INI101", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0INI1        [i]) ( 0,  0, "PIC0INI100", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0WNGF; i++) {
        (*PIC0WNGF        [i]) ( 2,  2, "PIC0WNGF2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGF        [i]) ( 1,  1, "PIC0WNGF1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGF        [i]) ( 0,  0, "PIC0WNGF0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0SATTSEL40; i++) {
        (*PIC0SATTSEL40   [i]) ( 7,  7, "PIC0SATTSEL407", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0SATTSEL40   [i]) ( 3,  0, "PIC0SATTSEL403_0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG21; i++) {
        (*PIC0REG21       [i]) (27, 26, "PIC0REG2127_26", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (25, 24, "PIC0REG2125_24", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (23, 22, "PIC0REG2123_22", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (21, 20, "PIC0REG2121_20", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (19, 18, "PIC0REG2119_18", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (17, 16, "PIC0REG2117_16", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) (11, 10, "PIC0REG2111_10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) ( 9,  8, "PIC0REG2109_08", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) ( 7,  6, "PIC0REG2107_06", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) ( 5,  4, "PIC0REG2105_04", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) ( 3,  2, "PIC0REG2103_02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG21       [i]) ( 1,  0, "PIC0REG2101_00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG20; i++) {
        (*PIC0REG20       [i]) (28, 28, "PIC0REG2028", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (25, 24, "PIC0REG2025_24", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (20, 20, "PIC0REG2020", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (18, 18, "PIC0REG2018", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (17, 17, "PIC0REG2017", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (16, 16, "PIC0REG2016", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (13, 12, "PIC0REG2013_12", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) (11, 10, "PIC0REG2011_10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 9,  8, "PIC0REG2009_08", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 5,  5, "PIC0REG2005", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 4,  4, "PIC0REG2004", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 3,  3, "PIC0REG2003", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 2,  2, "PIC0REG2002", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 1,  1, "PIC0REG2001", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG20       [i]) ( 0,  0, "PIC0REG2000", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40; i++) {
        (*PIC0ENCSEL40    [i]) ( 7,  7, "PIC0ENCSEL407", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0ENCSEL40    [i]) ( 3,  0, "PIC0ENCSEL403_0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG22; i++) {
        (*PIC0REG22       [i]) (30, 30, "PIC0REG2230", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (29, 29, "PIC0REG2229", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (28, 28, "PIC0REG2228", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (27, 26, "PIC0REG2227_26", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (25, 24, "PIC0REG2225_24", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (23, 22, "PIC0REG2223_22", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (21, 20, "PIC0REG2221_20", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (19, 18, "PIC0REG2219_18", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (17, 16, "PIC0REG2217_16", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (13, 13, "PIC0REG2213", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (12, 12, "PIC0REG2212", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (11, 11, "PIC0REG2211", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) (10, 10, "PIC0REG2210", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 9,  9, "PIC0REG2209", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 8,  8, "PIC0REG2208", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 7,  7, "PIC0REG2207", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 6,  6, "PIC0REG2206", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 5,  5, "PIC0REG2205", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 4,  4, "PIC0REG2204", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 3,  3, "PIC0REG2203", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 2,  2, "PIC0REG2202", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 1,  1, "PIC0REG2201", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG22       [i]) ( 0,  0, "PIC0REG2200", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR; i++) {
        (*PIC0TSGOUTCTR   [i]) ( 6,  6, "PIC0TSGOUTCTR6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 5,  5, "PIC0TSGOUTCTR5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 4,  4, "PIC0TSGOUTCTR4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 3,  3, "PIC0TSGOUTCTR3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 2,  2, "PIC0TSGOUTCTR2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 1,  1, "PIC0TSGOUTCTR1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0TSGOUTCTR   [i]) ( 0,  0, "PIC0TSGOUTCTR0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) {
        (*PIC0DGFTSSEL40  [i]) ( 7,  7, "PIC0DGFTSSEL407", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0DGFTSSEL40  [i]) ( 3,  0, "PIC0DGFTSSEL403_0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0WNGS; i++) {
        (*PIC0WNGS        [i]) ( 5,  5, "PIC0WNGS5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGS        [i]) ( 4,  4, "PIC0WNGS4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGS        [i]) ( 3,  3, "PIC0WNGS3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGS        [i]) ( 2,  2, "PIC0WNGS2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGS        [i]) ( 1,  1, "PIC0WNGS1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGS        [i]) ( 0,  0, "PIC0WNGS0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR; i++) {
        (*PIC0WNGFCLR     [i]) ( 2,  2, "WNGFCLR2", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0WNGFCLR     [i]) ( 1,  1, "WNGFCLR1", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*PIC0WNGFCLR     [i]) ( 0,  0, "WNGFCLR0", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG23; i++) {
        (*PIC0REG23       [i]) (22, 20, "PIC0REG2322_20", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG23       [i]) (18, 16, "PIC0REG2318_16", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG23       [i]) (14, 12, "PIC0REG2314_12", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG23       [i]) (10,  8, "PIC0REG2310_08", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG23       [i]) ( 6,  4, "PIC0REG2306_04", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG23       [i]) ( 2,  0, "PIC0REG2302_00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0RTO; i++) {
        (*PIC0RTO         [i]) (11, 11, "RTOTRO5" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) (10, 10, "RTOTME5" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 9,  9, "RTOTRO4" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 8,  8, "RTOTME4" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 7,  7, "RTOTRO3" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 6,  6, "RTOTME3" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 5,  5, "RTOTRO2" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 4,  4, "RTOTME2" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 3,  3, "RTOTRO1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 2,  2, "RTOTME1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 1,  1, "RTOTRO0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0RTO         [i]) ( 0,  0, "RTOTME0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK; i++) {
        (*PIC0WNGMK       [i]) ( 2,  2, "WNGMK2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGMK       [i]) ( 1,  1, "WNGMK1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0WNGMK       [i]) ( 0,  0, "WNGMK0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG24; i++) {
        (*PIC0REG24       [i]) (15, 15, "PIC0REG2415", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) (14, 14, "PIC0REG2414", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) (13, 13, "PIC0REG2413", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) (12, 12, "PIC0REG2412", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) (11, 11, "PIC0REG2411", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) (10, 10, "PIC0REG2410", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 9,  9, "PIC0REG2409", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 8,  8, "PIC0REG2408", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 7,  7, "PIC0REG2407", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 6,  6, "PIC0REG2406", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 5,  5, "PIC0REG2405", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 4,  4, "PIC0REG2404", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 3,  3, "PIC0REG2403", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 2,  2, "PIC0REG2402", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 1,  1, "PIC0REG2401", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG24       [i]) ( 0,  0, "PIC0REG2400", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0HIZCEN; i++) {
        (*PIC0HIZCEN      [i]) ( 7,  7, "PIC0HIZCEN7", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 6,  6, "PIC0HIZCEN6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 5,  5, "PIC0HIZCEN5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 4,  4, "PIC0HIZCEN4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 3,  3, "PIC0HIZCEN3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 2,  2, "PIC0HIZCEN2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 1,  1, "PIC0HIZCEN1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0HIZCEN      [i]) ( 0,  0, "PIC0HIZCEN0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL; i++) {
        (*PIC0LHSEL       [i]) ( 6,  6, "PIC0LHSEL6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0LHSEL       [i]) ( 5,  5, "PIC0LHSEL5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0LHSEL       [i]) ( 4,  4, "PIC0LHSEL4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0LHSEL       [i]) ( 3,  3, "PIC0LHSEL3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0LHSEL       [i]) ( 2,  2, "PIC0LHSEL2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0LHSEL       [i]) ( 1,  1, "PIC0LHSEL1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_PIC0REG5; i++) {
        (*PIC0REG5        [i]) (14, 14, "PIC0REG514", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) (13, 13, "PIC0REG513", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) (12, 12, "PIC0REG512", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) (10, 10, "PIC0REG510", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 8,  8, "PIC0REG508", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 7,  7, "PIC0REG507", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 6,  5, "PIC0REG506_05", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 4,  4, "PIC0REG504", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 3,  3, "PIC0REG503", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 2,  1, "PIC0REG502_01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*PIC0REG5        [i]) ( 0,  0, "PIC0REG500", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["PIC0EN"      ]["PIC0EN0"     ] = &Cpic1a_regif::cb_PIC0EN_PIC0EN0;
    mWrCbAPI["PIC0SST"     ]["SYNCTRG"     ] = &Cpic1a_regif::cb_PIC0SST_SYNCTRG;
    mWrCbAPI["PIC0HALLSEL" ]["PIC0HALLSEL0"] = &Cpic1a_regif::cb_PIC0HALLSEL_PIC0HALLSEL0;
    mWrCbAPI["PIC0REG30"   ]["PIC0REG3000" ] = &Cpic1a_regif::cb_PIC0REG30_PIC0REG3000;
    mWrCbAPI["PIC0REG31"   ]["PIC0REG3100" ] = &Cpic1a_regif::cb_PIC0REG31_PIC0REG3100;
    mWrCbAPI["PIC0REG32"   ]["PIC0REG3200" ] = &Cpic1a_regif::cb_PIC0REG32_PIC0REG3200;
    mWrCbAPI["PIC0REG33"   ]["PIC0REG3300" ] = &Cpic1a_regif::cb_PIC0REG33_PIC0REG3300;

    for(uint i = 0; i < emNUM_PIC0INI0; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI0"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0INI00"] = &Cpic1a_regif::cb_PIC0INI0_PIC0INI00;
    }
    for(uint i = 0; i < emNUM_PIC0INI1; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI1"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0INI100"] = &Cpic1a_regif::cb_PIC0INI1_PIC0INI100;
    }
    for(uint i = 0; i < emNUM_PIC0INI2; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0INI2"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0INI20"] = &Cpic1a_regif::cb_PIC0INI2_PIC0INI20;
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGMK"<< i;
        mWrCbAPI[str_tmp.str()]["WNGMK0"] = &Cpic1a_regif::cb_PIC0WNGMK_WNGMK0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGS; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGS"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0WNGS0"] = &Cpic1a_regif::cb_PIC0WNGS_PIC0WNGS0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0WNGFCLR"<< i;
        mWrCbAPI[str_tmp.str()]["WNGFCLR0"] = &Cpic1a_regif::cb_PIC0WNGFCLR_WNGFCLR0;
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0LHSEL"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0LHSEL1"] = &Cpic1a_regif::cb_PIC0LHSEL_PIC0LHSEL1;
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0TSGOUTCTR"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0TSGOUTCTR0"] = &Cpic1a_regif::cb_PIC0TSGOUTCTR_PIC0TSGOUTCTR0;
    }
    for(uint i = 0; i < emNUM_PIC0TAUDSEL; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0TAUDSEL"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0TAUDIN00"] = &Cpic1a_regif::cb_PIC0TAUDSEL_PIC0TAUDIN00;
    }
    for(uint i = 0; i < emNUM_PIC0HIZCEN; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0HIZCEN"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0HIZCEN0"] = &Cpic1a_regif::cb_PIC0HIZCEN_PIC0HIZCEN0;
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0ENCSEL40"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0ENCSEL403_0"] = &Cpic1a_regif::cb_PIC0ENCSEL40_PIC0ENCSEL403_0;
    }
    for(uint i = 0; i < emNUM_PIC0REG20; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG20"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG2000"] = &Cpic1a_regif::cb_PIC0REG20_PIC0REG2000;
    }
    for(uint i = 0; i < emNUM_PIC0REG21; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG21"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG2101_00"] = &Cpic1a_regif::cb_PIC0REG21_PIC0REG2101_00;
    }
    for(uint i = 0; i < emNUM_PIC0REG22; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG22"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG2200"] = &Cpic1a_regif::cb_PIC0REG22_PIC0REG2200;
    }
    for(uint i = 0; i < emNUM_PIC0REG23; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG23"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG2302_00"] = &Cpic1a_regif::cb_PIC0REG23_PIC0REG2302_00;
    }
    for(uint i = 0; i < emNUM_PIC0REG24; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG24"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG2400"] = &Cpic1a_regif::cb_PIC0REG24_PIC0REG2400;
    }
    for(uint i = 0; i < emNUM_PIC0REG5; i++) {
        str_tmp.str("");
        str_tmp<<"PIC0REG5"<< i;
        mWrCbAPI[str_tmp.str()]["PIC0REG500"] = &Cpic1a_regif::cb_PIC0REG5_PIC0REG500;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cpic1a_regif::~Cpic1a_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cpic1a_regif::uint Cpic1a_regif::bit_select(
                          cuint val,    ///< [in] Writting address
                          cuint start,  ///< [in] start bit position
                          cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpic1a_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                          const unsigned char *p_data,   ///< [in] Writing data
                          cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpic1a_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                          unsigned char *p_data,   ///< [out] Reading data
                          cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpic1a_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                              const unsigned char *p_data,   ///< [in] Writing data
                              cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpic1a_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                              unsigned char *p_data,   ///< [out] Reading data
                              cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpic1a_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                  const unsigned char *p_data,  ///< [in] Writing data
                                  cuint size,                   ///< [in] Data size (byte)
                                  bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpic1a_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                  unsigned char *p_data,   ///< [out] Reading data
                                  cuint size,              ///< [in]  Data size (byte)
                                  bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cpic1a_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                               unsigned char *p_data,          ///< [out] Reading data
                               cuint size,                     ///< [in]  Data size (byte)
                               cuint reg_index,                ///< [in] Register index
                               bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cpic1a_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                               const unsigned char *p_data,      ///< [in] Writing data
                               cuint size,                       ///< [in] Data size (byte)
                               cuint reg_index,                  ///< [in] Register index
                               bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cpic1a_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cpic1a_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cpic1a_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cpic1a_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cpic1a_regif::InitLocalVal()
{
    // Initialize local variables
    PIC0EN_PIC0EN0    = 0x0;
    PIC0SST_SYNCTRG   = 0x0;
    PIC0SSER0_PIC0SSER0n = 0x0;
    PIC0SSER1_PIC0SSER1n = 0x0;
    PIC0SSER2_PIC0SSER215 = 0x0;
    PIC0SSER2_PIC0SSER214 = 0x0;
    PIC0SSER2_PIC0SSER213 = 0x0;
    PIC0SSER2_PIC0SSER212 = 0x0;
    PIC0SSER2_PIC0SSER211 = 0x0;
    PIC0SSER2_PIC0SSER210 = 0x0;
    PIC0SSER2_PIC0SSER209 = 0x0;
    PIC0SSER2_PIC0SSER208 = 0x0;
    PIC0SSER2_PIC0SSER207 = 0x0;
    PIC0SSER2_PIC0SSER206 = 0x0;
    PIC0SSER2_PIC0SSER205 = 0x0;
    PIC0SSER2_PIC0SSER204 = 0x0;
    PIC0SSER2_PIC0SSER203 = 0x0;
    PIC0SSER2_PIC0SSER202 = 0x0;
    PIC0SSER2_PIC0SSER201 = 0x0;
    PIC0SSER2_PIC0SSER200 = 0x0;
    PIC0SSER3_PIC0SSER303 = 0x0;
    PIC0SSER3_PIC0SSER302 = 0x0;
    PIC0SSER3_PIC0SSER301 = 0x0;
    PIC0SSER3_PIC0SSER300 = 0x0;
    for(uint i = 0; i < emNUM_PIC0INI0;      i++) {
        PIC0INI0_PIC0INI07[i] = 0x0;
        PIC0INI0_PIC0INI06[i] = 0x0;
        PIC0INI0_PIC0INI05[i] = 0x0;
        PIC0INI0_PIC0INI04[i] = 0x0;
        PIC0INI0_PIC0INI03[i] = 0x0;
        PIC0INI0_PIC0INI02[i] = 0x0;
        PIC0INI0_PIC0INI01[i] = 0x0;
        PIC0INI0_PIC0INI00[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0INI1;      i++) {
        PIC0INI1_PIC0INI102[i] = 0x0;
        PIC0INI1_PIC0INI101[i] = 0x0;
        PIC0INI1_PIC0INI100[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0INI2;      i++) {
        PIC0INI2_PIC0INI22[i] = 0x0;
        PIC0INI2_PIC0INI21[i] = 0x0;
        PIC0INI2_PIC0INI20[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGMK;     i++) {
        PIC0WNGMK_WNGMK2 [i] = 0x0;
        PIC0WNGMK_WNGMK1 [i] = 0x0;
        PIC0WNGMK_WNGMK0 [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGS;      i++) {
        PIC0WNGS_PIC0WNGS5[i] = 0x0;
        PIC0WNGS_PIC0WNGS4[i] = 0x0;
        PIC0WNGS_PIC0WNGS3[i] = 0x0;
        PIC0WNGS_PIC0WNGS2[i] = 0x0;
        PIC0WNGS_PIC0WNGS1[i] = 0x0;
        PIC0WNGS_PIC0WNGS0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGF;      i++) {
        PIC0WNGF_PIC0WNGF2[i] = 0x0;
        PIC0WNGF_PIC0WNGF1[i] = 0x0;
        PIC0WNGF_PIC0WNGF0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0WNGFCLR;   i++) {
        PIC0WNGFCLR_WNGFCLR2[i] = 0x0;
        PIC0WNGFCLR_WNGFCLR1[i] = 0x0;
        PIC0WNGFCLR_WNGFCLR0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0RTO;       i++) {
        PIC0RTO_RTOTRO5  [i] = 0x0;
        PIC0RTO_RTOTME5  [i] = 0x0;
        PIC0RTO_RTOTRO4  [i] = 0x0;
        PIC0RTO_RTOTME4  [i] = 0x0;
        PIC0RTO_RTOTRO3  [i] = 0x0;
        PIC0RTO_RTOTME3  [i] = 0x0;
        PIC0RTO_RTOTRO2  [i] = 0x0;
        PIC0RTO_RTOTME2  [i] = 0x0;
        PIC0RTO_RTOTRO1  [i] = 0x0;
        PIC0RTO_RTOTME1  [i] = 0x0;
        PIC0RTO_RTOTRO0  [i] = 0x0;
        PIC0RTO_RTOTME0  [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0LHSEL;     i++) {
        PIC0LHSEL_PIC0LHSEL6[i] = 0x0;
        PIC0LHSEL_PIC0LHSEL5[i] = 0x0;
        PIC0LHSEL_PIC0LHSEL4[i] = 0x0;
        PIC0LHSEL_PIC0LHSEL3[i] = 0x0;
        PIC0LHSEL_PIC0LHSEL2[i] = 0x0;
        PIC0LHSEL_PIC0LHSEL1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0TSGOUTCTR; i++) {
        PIC0TSGOUTCTR_PIC0TSGOUTCTR6[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR5[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR4[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR3[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR2[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR1[i] = 0x0;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR0[i] = 0x0;
    }
    PIC0HALLSEL_PIC0HALLSEL1 = 0x0;
    PIC0HALLSEL_PIC0HALLSEL0 = 0x0;
    for(uint i = 0; i < emNUM_PIC0TAUDSEL;   i++) {
        PIC0TAUDSEL_PIC0TAUDIN143[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN142[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN141[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN140[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN123[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN122[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN121[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN120[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN103[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN102[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN101[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN100[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN83[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN82[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN81[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN80[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN63[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN62[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN61[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN60[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN43[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN42[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN41[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN40[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN23[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN22[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN21[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN20[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN03[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN02[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN01[i] = 0x0;
        PIC0TAUDSEL_PIC0TAUDIN00[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0HIZCEN;    i++) {
        PIC0HIZCEN_PIC0HIZCEN7[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN6[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN5[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN4[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN3[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN2[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN1[i] = 0x0;
        PIC0HIZCEN_PIC0HIZCEN0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0SATTSEL40; i++) {
        PIC0SATTSEL40_PIC0SATTSEL407[i] = 0x0;
        PIC0SATTSEL40_PIC0SATTSEL403_0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0DGFTSSEL40; i++) {
        PIC0DGFTSSEL40_PIC0DGFTSSEL407[i] = 0x0;
        PIC0DGFTSSEL40_PIC0DGFTSSEL403_0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0ENCSEL40;  i++) {
        PIC0ENCSEL40_PIC0ENCSEL407[i] = 0x0;
        PIC0ENCSEL40_PIC0ENCSEL403_0[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0REG20;     i++) {
        PIC0REG20_PIC0REG2028[i] = 0x0;
        PIC0REG20_PIC0REG2025_24[i] = 0x0;
        PIC0REG20_PIC0REG2020[i] = 0x0;
        PIC0REG20_PIC0REG2018[i] = 0x0;
        PIC0REG20_PIC0REG2017[i] = 0x0;
        PIC0REG20_PIC0REG2016[i] = 0x0;
        PIC0REG20_PIC0REG2013_12[i] = 0x0;
        PIC0REG20_PIC0REG2011_10[i] = 0x0;
        PIC0REG20_PIC0REG2009_08[i] = 0x0;
        PIC0REG20_PIC0REG2005[i] = 0x0;
        PIC0REG20_PIC0REG2004[i] = 0x0;
        PIC0REG20_PIC0REG2003[i] = 0x0;
        PIC0REG20_PIC0REG2002[i] = 0x0;
        PIC0REG20_PIC0REG2001[i] = 0x0;
        PIC0REG20_PIC0REG2000[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0REG21;     i++) {
        PIC0REG21_PIC0REG2127_26[i] = 0x0;
        PIC0REG21_PIC0REG2125_24[i] = 0x0;
        PIC0REG21_PIC0REG2123_22[i] = 0x0;
        PIC0REG21_PIC0REG2121_20[i] = 0x0;
        PIC0REG21_PIC0REG2119_18[i] = 0x0;
        PIC0REG21_PIC0REG2117_16[i] = 0x0;
        PIC0REG21_PIC0REG2111_10[i] = 0x0;
        PIC0REG21_PIC0REG2109_08[i] = 0x0;
        PIC0REG21_PIC0REG2107_06[i] = 0x0;
        PIC0REG21_PIC0REG2105_04[i] = 0x0;
        PIC0REG21_PIC0REG2103_02[i] = 0x0;
        PIC0REG21_PIC0REG2101_00[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0REG22;     i++) {
        PIC0REG22_PIC0REG2230[i] = 0x0;
        PIC0REG22_PIC0REG2229[i] = 0x0;
        PIC0REG22_PIC0REG2228[i] = 0x0;
        PIC0REG22_PIC0REG2227_26[i] = 0x0;
        PIC0REG22_PIC0REG2225_24[i] = 0x0;
        PIC0REG22_PIC0REG2223_22[i] = 0x0;
        PIC0REG22_PIC0REG2221_20[i] = 0x0;
        PIC0REG22_PIC0REG2219_18[i] = 0x0;
        PIC0REG22_PIC0REG2217_16[i] = 0x0;
        PIC0REG22_PIC0REG2213[i] = 0x0;
        PIC0REG22_PIC0REG2212[i] = 0x0;
        PIC0REG22_PIC0REG2211[i] = 0x0;
        PIC0REG22_PIC0REG2210[i] = 0x0;
        PIC0REG22_PIC0REG2209[i] = 0x0;
        PIC0REG22_PIC0REG2208[i] = 0x0;
        PIC0REG22_PIC0REG2207[i] = 0x0;
        PIC0REG22_PIC0REG2206[i] = 0x0;
        PIC0REG22_PIC0REG2205[i] = 0x0;
        PIC0REG22_PIC0REG2204[i] = 0x0;
        PIC0REG22_PIC0REG2203[i] = 0x0;
        PIC0REG22_PIC0REG2202[i] = 0x0;
        PIC0REG22_PIC0REG2201[i] = 0x0;
        PIC0REG22_PIC0REG2200[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0REG23;     i++) {
        PIC0REG23_PIC0REG2322_20[i] = 0x0;
        PIC0REG23_PIC0REG2318_16[i] = 0x0;
        PIC0REG23_PIC0REG2314_12[i] = 0x0;
        PIC0REG23_PIC0REG2310_08[i] = 0x0;
        PIC0REG23_PIC0REG2306_04[i] = 0x0;
        PIC0REG23_PIC0REG2302_00[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_PIC0REG24;     i++) {
        PIC0REG24_PIC0REG2415[i] = 0x0;
        PIC0REG24_PIC0REG2414[i] = 0x0;
        PIC0REG24_PIC0REG2413[i] = 0x0;
        PIC0REG24_PIC0REG2412[i] = 0x0;
        PIC0REG24_PIC0REG2411[i] = 0x0;
        PIC0REG24_PIC0REG2410[i] = 0x0;
        PIC0REG24_PIC0REG2409[i] = 0x0;
        PIC0REG24_PIC0REG2408[i] = 0x0;
        PIC0REG24_PIC0REG2407[i] = 0x0;
        PIC0REG24_PIC0REG2406[i] = 0x0;
        PIC0REG24_PIC0REG2405[i] = 0x0;
        PIC0REG24_PIC0REG2404[i] = 0x0;
        PIC0REG24_PIC0REG2403[i] = 0x0;
        PIC0REG24_PIC0REG2402[i] = 0x0;
        PIC0REG24_PIC0REG2401[i] = 0x0;
        PIC0REG24_PIC0REG2400[i] = 0x0;
    }
    PIC0REG30_PIC0REG3024 = 0x0;
    PIC0REG30_PIC0REG3023 = 0x0;
    PIC0REG30_PIC0REG3022 = 0x0;
    PIC0REG30_PIC0REG3021 = 0x0;
    PIC0REG30_PIC0REG3020_19 = 0x0;
    PIC0REG30_PIC0REG3018 = 0x0;
    PIC0REG30_PIC0REG3017_16 = 0x0;
    PIC0REG30_PIC0REG3015_12 = 0x0;
    PIC0REG30_PIC0REG3011_10 = 0x0;
    PIC0REG30_PIC0REG3009_08 = 0x0;
    PIC0REG30_PIC0REG3007_06 = 0x0;
    PIC0REG30_PIC0REG3005_02 = 0x0;
    PIC0REG30_PIC0REG3001 = 0x0;
    PIC0REG30_PIC0REG3000 = 0x0;
    PIC0REG31_PIC0REG3126 = 0x0;
    PIC0REG31_PIC0REG3125 = 0x0;
    PIC0REG31_PIC0REG3124 = 0x0;
    PIC0REG31_PIC0REG3123 = 0x0;
    PIC0REG31_PIC0REG3122_21 = 0x0;
    PIC0REG31_PIC0REG3120 = 0x0;
    PIC0REG31_PIC0REG3119_18 = 0x0;
    PIC0REG31_PIC0REG3117_15 = 0x0;
    PIC0REG31_PIC0REG3114 = 0x0;
    PIC0REG31_PIC0REG3113_12 = 0x0;
    PIC0REG31_PIC0REG3111 = 0x0;
    PIC0REG31_PIC0REG3110_09 = 0x0;
    PIC0REG31_PIC0REG3108_06 = 0x0;
    PIC0REG31_PIC0REG3105_04 = 0x0;
    PIC0REG31_PIC0REG3103 = 0x0;
    PIC0REG31_PIC0REG3102_01 = 0x0;
    PIC0REG31_PIC0REG3100 = 0x0;
    PIC0REG32_PIC0REG3213 = 0x0;
    PIC0REG32_PIC0REG3212 = 0x0;
    PIC0REG32_PIC0REG3211_10 = 0x0;
    PIC0REG32_PIC0REG3209 = 0x0;
    PIC0REG32_PIC0REG3208 = 0x0;
    PIC0REG32_PIC0REG3205 = 0x0;
    PIC0REG32_PIC0REG3204 = 0x0;
    PIC0REG32_PIC0REG3203_02 = 0x0;
    PIC0REG32_PIC0REG3201 = 0x0;
    PIC0REG32_PIC0REG3200 = 0x0;
    PIC0REG33_PIC0REG3301 = 0x0;
    PIC0REG33_PIC0REG3300 = 0x0;
    for(uint i = 0; i < emNUM_PIC0REG5;      i++) {
        PIC0REG5_PIC0REG514[i] = 0x0;
        PIC0REG5_PIC0REG513[i] = 0x0;
        PIC0REG5_PIC0REG512[i] = 0x0;
        PIC0REG5_PIC0REG510[i] = 0x0;
        PIC0REG5_PIC0REG508[i] = 0x0;
        PIC0REG5_PIC0REG507[i] = 0x0;
        PIC0REG5_PIC0REG506_05[i] = 0x0;
        PIC0REG5_PIC0REG504[i] = 0x0;
        PIC0REG5_PIC0REG503[i] = 0x0;
        PIC0REG5_PIC0REG502_01[i] = 0x0;
        PIC0REG5_PIC0REG500[i] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cpic1a_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        PIC0EN_PIC0EN0                     = (*PIC0EN        )["PIC0EN0"       ];
        return;
    }
    if (addr == 0x0004) {
        PIC0SST_SYNCTRG                    = (*PIC0SST       )["SYNCTRG"       ];
        return;
    }
    if (addr == 0x0010) {
        PIC0SSER0_PIC0SSER0n               = (*PIC0SSER0     )["PIC0SSER0n"    ];
        return;
    }
    if (addr == 0x0014) {
        PIC0SSER1_PIC0SSER1n               = (*PIC0SSER1     )["PIC0SSER1n"    ];
        return;
    }
    if (addr == 0x0018) {
        PIC0SSER2_PIC0SSER215              = (*PIC0SSER2     )["PIC0SSER215"   ];
        PIC0SSER2_PIC0SSER214              = (*PIC0SSER2     )["PIC0SSER214"   ];
        PIC0SSER2_PIC0SSER213              = (*PIC0SSER2     )["PIC0SSER213"   ];
        PIC0SSER2_PIC0SSER212              = (*PIC0SSER2     )["PIC0SSER212"   ];
        PIC0SSER2_PIC0SSER211              = (*PIC0SSER2     )["PIC0SSER211"   ];
        PIC0SSER2_PIC0SSER210              = (*PIC0SSER2     )["PIC0SSER210"   ];
        PIC0SSER2_PIC0SSER209              = (*PIC0SSER2     )["PIC0SSER209"   ];
        PIC0SSER2_PIC0SSER208              = (*PIC0SSER2     )["PIC0SSER208"   ];
        PIC0SSER2_PIC0SSER207              = (*PIC0SSER2     )["PIC0SSER207"   ];
        PIC0SSER2_PIC0SSER206              = (*PIC0SSER2     )["PIC0SSER206"   ];
        PIC0SSER2_PIC0SSER205              = (*PIC0SSER2     )["PIC0SSER205"   ];
        PIC0SSER2_PIC0SSER204              = (*PIC0SSER2     )["PIC0SSER204"   ];
        PIC0SSER2_PIC0SSER203              = (*PIC0SSER2     )["PIC0SSER203"   ];
        PIC0SSER2_PIC0SSER202              = (*PIC0SSER2     )["PIC0SSER202"   ];
        PIC0SSER2_PIC0SSER201              = (*PIC0SSER2     )["PIC0SSER201"   ];
        PIC0SSER2_PIC0SSER200              = (*PIC0SSER2     )["PIC0SSER200"   ];
        return;
    }
    if (addr == 0x001C) {
        PIC0SSER3_PIC0SSER303              = (*PIC0SSER3     )["PIC0SSER303"   ];
        PIC0SSER3_PIC0SSER302              = (*PIC0SSER3     )["PIC0SSER302"   ];
        PIC0SSER3_PIC0SSER301              = (*PIC0SSER3     )["PIC0SSER301"   ];
        PIC0SSER3_PIC0SSER300              = (*PIC0SSER3     )["PIC0SSER300"   ];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(12*1)) && ((addr-0x0020)%12 == 0)) {
        uint i = (addr - 0x0020)/12;
        PIC0INI0_PIC0INI07                [i] = (*(PIC0INI0      [i]))["PIC0INI07"     ];
        PIC0INI0_PIC0INI06                [i] = (*(PIC0INI0      [i]))["PIC0INI06"     ];
        PIC0INI0_PIC0INI05                [i] = (*(PIC0INI0      [i]))["PIC0INI05"     ];
        PIC0INI0_PIC0INI04                [i] = (*(PIC0INI0      [i]))["PIC0INI04"     ];
        PIC0INI0_PIC0INI03                [i] = (*(PIC0INI0      [i]))["PIC0INI03"     ];
        PIC0INI0_PIC0INI02                [i] = (*(PIC0INI0      [i]))["PIC0INI02"     ];
        PIC0INI0_PIC0INI01                [i] = (*(PIC0INI0      [i]))["PIC0INI01"     ];
        PIC0INI0_PIC0INI00                [i] = (*(PIC0INI0      [i]))["PIC0INI00"     ];
        return;
    }
    if ((0x0024 <= addr) && (addr <= (0x0024)+(12*1)) && ((addr-0x0024)%12 == 0)) {
        uint i = (addr - 0x0024)/12;
        PIC0INI1_PIC0INI102               [i] = (*(PIC0INI1      [i]))["PIC0INI102"    ];
        PIC0INI1_PIC0INI101               [i] = (*(PIC0INI1      [i]))["PIC0INI101"    ];
        PIC0INI1_PIC0INI100               [i] = (*(PIC0INI1      [i]))["PIC0INI100"    ];
        return;
    }
    if ((0x0028 <= addr) && (addr <= (0x0028)+(12*1)) && ((addr-0x0028)%12 == 0)) {
        uint i = (addr - 0x0028)/12;
        PIC0INI2_PIC0INI22                [i] = (*(PIC0INI2      [i]))["PIC0INI22"     ];
        PIC0INI2_PIC0INI21                [i] = (*(PIC0INI2      [i]))["PIC0INI21"     ];
        PIC0INI2_PIC0INI20                [i] = (*(PIC0INI2      [i]))["PIC0INI20"     ];
        return;
    }
    if ((0x0038 <= addr) && (addr <= (0x0038)+(4*1)) && ((addr-0x0038)%4 == 0)) {
        uint i = (addr - 0x0038)/4;
        PIC0WNGMK_WNGMK2                  [i] = (*(PIC0WNGMK     [i]))["WNGMK2"        ];
        PIC0WNGMK_WNGMK1                  [i] = (*(PIC0WNGMK     [i]))["WNGMK1"        ];
        PIC0WNGMK_WNGMK0                  [i] = (*(PIC0WNGMK     [i]))["WNGMK0"        ];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*1)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        PIC0WNGS_PIC0WNGS5                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS5"     ];
        PIC0WNGS_PIC0WNGS4                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS4"     ];
        PIC0WNGS_PIC0WNGS3                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS3"     ];
        PIC0WNGS_PIC0WNGS2                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS2"     ];
        PIC0WNGS_PIC0WNGS1                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS1"     ];
        PIC0WNGS_PIC0WNGS0                [i] = (*(PIC0WNGS      [i]))["PIC0WNGS0"     ];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(4*1)) && ((addr-0x0048)%4 == 0)) {
        uint i = (addr - 0x0048)/4;
        PIC0WNGF_PIC0WNGF2                [i] = (*(PIC0WNGF      [i]))["PIC0WNGF2"     ];
        PIC0WNGF_PIC0WNGF1                [i] = (*(PIC0WNGF      [i]))["PIC0WNGF1"     ];
        PIC0WNGF_PIC0WNGF0                [i] = (*(PIC0WNGF      [i]))["PIC0WNGF0"     ];
        return;
    }
    if ((0x0050 <= addr) && (addr <= (0x0050)+(4*1)) && ((addr-0x0050)%4 == 0)) {
        uint i = (addr - 0x0050)/4;
        PIC0WNGFCLR_WNGFCLR2              [i] = (*(PIC0WNGFCLR   [i]))["WNGFCLR2"      ];
        PIC0WNGFCLR_WNGFCLR1              [i] = (*(PIC0WNGFCLR   [i]))["WNGFCLR1"      ];
        PIC0WNGFCLR_WNGFCLR0              [i] = (*(PIC0WNGFCLR   [i]))["WNGFCLR0"      ];
        return;
    }
    if ((0x0058 <= addr) && (addr <= (0x0058)+(4*1)) && ((addr-0x0058)%4 == 0)) {
        uint i = (addr - 0x0058)/4;
        PIC0RTO_RTOTRO5                   [i] = (*(PIC0RTO       [i]))["RTOTRO5"       ];
        PIC0RTO_RTOTME5                   [i] = (*(PIC0RTO       [i]))["RTOTME5"       ];
        PIC0RTO_RTOTRO4                   [i] = (*(PIC0RTO       [i]))["RTOTRO4"       ];
        PIC0RTO_RTOTME4                   [i] = (*(PIC0RTO       [i]))["RTOTME4"       ];
        PIC0RTO_RTOTRO3                   [i] = (*(PIC0RTO       [i]))["RTOTRO3"       ];
        PIC0RTO_RTOTME3                   [i] = (*(PIC0RTO       [i]))["RTOTME3"       ];
        PIC0RTO_RTOTRO2                   [i] = (*(PIC0RTO       [i]))["RTOTRO2"       ];
        PIC0RTO_RTOTME2                   [i] = (*(PIC0RTO       [i]))["RTOTME2"       ];
        PIC0RTO_RTOTRO1                   [i] = (*(PIC0RTO       [i]))["RTOTRO1"       ];
        PIC0RTO_RTOTME1                   [i] = (*(PIC0RTO       [i]))["RTOTME1"       ];
        PIC0RTO_RTOTRO0                   [i] = (*(PIC0RTO       [i]))["RTOTRO0"       ];
        PIC0RTO_RTOTME0                   [i] = (*(PIC0RTO       [i]))["RTOTME0"       ];
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(8*1)) && ((addr-0x0060)%8 == 0)) {
        uint i = (addr - 0x0060)/8;
        PIC0LHSEL_PIC0LHSEL6              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL6"    ];
        PIC0LHSEL_PIC0LHSEL5              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL5"    ];
        PIC0LHSEL_PIC0LHSEL4              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL4"    ];
        PIC0LHSEL_PIC0LHSEL3              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL3"    ];
        PIC0LHSEL_PIC0LHSEL2              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL2"    ];
        PIC0LHSEL_PIC0LHSEL1              [i] = (*(PIC0LHSEL     [i]))["PIC0LHSEL1"    ];
        return;
    }
    if ((0x0064 <= addr) && (addr <= (0x0064)+(8*1)) && ((addr-0x0064)%8 == 0)) {
        uint i = (addr - 0x0064)/8;
        PIC0TSGOUTCTR_PIC0TSGOUTCTR6      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR6"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR5      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR5"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR4      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR4"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR3      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR3"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR2      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR2"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR1      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR1"];
        PIC0TSGOUTCTR_PIC0TSGOUTCTR0      [i] = (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR0"];
        return;
    }
    if (addr == 0x0074) {
        PIC0HALLSEL_PIC0HALLSEL1           = (*PIC0HALLSEL   )["PIC0HALLSEL1"  ];
        PIC0HALLSEL_PIC0HALLSEL0           = (*PIC0HALLSEL   )["PIC0HALLSEL0"  ];
        return;
    }
    if ((0x0078 <= addr) && (addr <= (0x0078)+(4*1)) && ((addr-0x0078)%4 == 0)) {
        uint i = (addr - 0x0078)/4;
        PIC0TAUDSEL_PIC0TAUDIN143         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN143" ];
        PIC0TAUDSEL_PIC0TAUDIN142         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN142" ];
        PIC0TAUDSEL_PIC0TAUDIN141         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN141" ];
        PIC0TAUDSEL_PIC0TAUDIN140         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN140" ];
        PIC0TAUDSEL_PIC0TAUDIN123         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN123" ];
        PIC0TAUDSEL_PIC0TAUDIN122         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN122" ];
        PIC0TAUDSEL_PIC0TAUDIN121         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN121" ];
        PIC0TAUDSEL_PIC0TAUDIN120         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN120" ];
        PIC0TAUDSEL_PIC0TAUDIN103         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN103" ];
        PIC0TAUDSEL_PIC0TAUDIN102         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN102" ];
        PIC0TAUDSEL_PIC0TAUDIN101         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN101" ];
        PIC0TAUDSEL_PIC0TAUDIN100         [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN100" ];
        PIC0TAUDSEL_PIC0TAUDIN83          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN83"  ];
        PIC0TAUDSEL_PIC0TAUDIN82          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN82"  ];
        PIC0TAUDSEL_PIC0TAUDIN81          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN81"  ];
        PIC0TAUDSEL_PIC0TAUDIN80          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN80"  ];
        PIC0TAUDSEL_PIC0TAUDIN63          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN63"  ];
        PIC0TAUDSEL_PIC0TAUDIN62          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN62"  ];
        PIC0TAUDSEL_PIC0TAUDIN61          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN61"  ];
        PIC0TAUDSEL_PIC0TAUDIN60          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN60"  ];
        PIC0TAUDSEL_PIC0TAUDIN43          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN43"  ];
        PIC0TAUDSEL_PIC0TAUDIN42          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN42"  ];
        PIC0TAUDSEL_PIC0TAUDIN41          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN41"  ];
        PIC0TAUDSEL_PIC0TAUDIN40          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN40"  ];
        PIC0TAUDSEL_PIC0TAUDIN23          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN23"  ];
        PIC0TAUDSEL_PIC0TAUDIN22          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN22"  ];
        PIC0TAUDSEL_PIC0TAUDIN21          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN21"  ];
        PIC0TAUDSEL_PIC0TAUDIN20          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN20"  ];
        PIC0TAUDSEL_PIC0TAUDIN03          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN03"  ];
        PIC0TAUDSEL_PIC0TAUDIN02          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN02"  ];
        PIC0TAUDSEL_PIC0TAUDIN01          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN01"  ];
        PIC0TAUDSEL_PIC0TAUDIN00          [i] = (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN00"  ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        PIC0HIZCEN_PIC0HIZCEN7            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN7"   ];
        PIC0HIZCEN_PIC0HIZCEN6            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN6"   ];
        PIC0HIZCEN_PIC0HIZCEN5            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN5"   ];
        PIC0HIZCEN_PIC0HIZCEN4            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN4"   ];
        PIC0HIZCEN_PIC0HIZCEN3            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN3"   ];
        PIC0HIZCEN_PIC0HIZCEN2            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN2"   ];
        PIC0HIZCEN_PIC0HIZCEN1            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN1"   ];
        PIC0HIZCEN_PIC0HIZCEN0            [i] = (*(PIC0HIZCEN    [i]))["PIC0HIZCEN0"   ];
        return;
    }
    if ((0x00A8 <= addr) && (addr <= (0x00A8)+(4*1)) && ((addr-0x00A8)%4 == 0)) {
        uint i = (addr - 0x00A8)/4;
        PIC0SATTSEL40_PIC0SATTSEL407      [i] = (*(PIC0SATTSEL40 [i]))["PIC0SATTSEL407"];
        PIC0SATTSEL40_PIC0SATTSEL403_0    [i] = (*(PIC0SATTSEL40 [i]))["PIC0SATTSEL403_0"];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(4*1)) && ((addr-0x00B0)%4 == 0)) {
        uint i = (addr - 0x00B0)/4;
        PIC0DGFTSSEL40_PIC0DGFTSSEL407    [i] = (*(PIC0DGFTSSEL40[i]))["PIC0DGFTSSEL407"];
        PIC0DGFTSSEL40_PIC0DGFTSSEL403_0  [i] = (*(PIC0DGFTSSEL40[i]))["PIC0DGFTSSEL403_0"];
        return;
    }
    if ((0x00B8 <= addr) && (addr <= (0x00B8)+(4*1)) && ((addr-0x00B8)%4 == 0)) {
        uint i = (addr - 0x00B8)/4;
        PIC0ENCSEL40_PIC0ENCSEL407        [i] = (*(PIC0ENCSEL40  [i]))["PIC0ENCSEL407" ];
        PIC0ENCSEL40_PIC0ENCSEL403_0      [i] = (*(PIC0ENCSEL40  [i]))["PIC0ENCSEL403_0"];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(20*1)) && ((addr-0x00C0)%20 == 0)) {
        uint i = (addr - 0x00C0)/20;
        PIC0REG20_PIC0REG2028             [i] = (*(PIC0REG20     [i]))["PIC0REG2028"   ];
        PIC0REG20_PIC0REG2025_24          [i] = (*(PIC0REG20     [i]))["PIC0REG2025_24"];
        PIC0REG20_PIC0REG2020             [i] = (*(PIC0REG20     [i]))["PIC0REG2020"   ];
        PIC0REG20_PIC0REG2018             [i] = (*(PIC0REG20     [i]))["PIC0REG2018"   ];
        PIC0REG20_PIC0REG2017             [i] = (*(PIC0REG20     [i]))["PIC0REG2017"   ];
        PIC0REG20_PIC0REG2016             [i] = (*(PIC0REG20     [i]))["PIC0REG2016"   ];
        PIC0REG20_PIC0REG2013_12          [i] = (*(PIC0REG20     [i]))["PIC0REG2013_12"];
        PIC0REG20_PIC0REG2011_10          [i] = (*(PIC0REG20     [i]))["PIC0REG2011_10"];
        PIC0REG20_PIC0REG2009_08          [i] = (*(PIC0REG20     [i]))["PIC0REG2009_08"];
        PIC0REG20_PIC0REG2005             [i] = (*(PIC0REG20     [i]))["PIC0REG2005"   ];
        PIC0REG20_PIC0REG2004             [i] = (*(PIC0REG20     [i]))["PIC0REG2004"   ];
        PIC0REG20_PIC0REG2003             [i] = (*(PIC0REG20     [i]))["PIC0REG2003"   ];
        PIC0REG20_PIC0REG2002             [i] = (*(PIC0REG20     [i]))["PIC0REG2002"   ];
        PIC0REG20_PIC0REG2001             [i] = (*(PIC0REG20     [i]))["PIC0REG2001"   ];
        PIC0REG20_PIC0REG2000             [i] = (*(PIC0REG20     [i]))["PIC0REG2000"   ];
        return;
    }
    if ((0x00C4 <= addr) && (addr <= (0x00C4)+(20*1)) && ((addr-0x00C4)%20 == 0)) {
        uint i = (addr - 0x00C4)/20;
        PIC0REG21_PIC0REG2127_26          [i] = (*(PIC0REG21     [i]))["PIC0REG2127_26"];
        PIC0REG21_PIC0REG2125_24          [i] = (*(PIC0REG21     [i]))["PIC0REG2125_24"];
        PIC0REG21_PIC0REG2123_22          [i] = (*(PIC0REG21     [i]))["PIC0REG2123_22"];
        PIC0REG21_PIC0REG2121_20          [i] = (*(PIC0REG21     [i]))["PIC0REG2121_20"];
        PIC0REG21_PIC0REG2119_18          [i] = (*(PIC0REG21     [i]))["PIC0REG2119_18"];
        PIC0REG21_PIC0REG2117_16          [i] = (*(PIC0REG21     [i]))["PIC0REG2117_16"];
        PIC0REG21_PIC0REG2111_10          [i] = (*(PIC0REG21     [i]))["PIC0REG2111_10"];
        PIC0REG21_PIC0REG2109_08          [i] = (*(PIC0REG21     [i]))["PIC0REG2109_08"];
        PIC0REG21_PIC0REG2107_06          [i] = (*(PIC0REG21     [i]))["PIC0REG2107_06"];
        PIC0REG21_PIC0REG2105_04          [i] = (*(PIC0REG21     [i]))["PIC0REG2105_04"];
        PIC0REG21_PIC0REG2103_02          [i] = (*(PIC0REG21     [i]))["PIC0REG2103_02"];
        PIC0REG21_PIC0REG2101_00          [i] = (*(PIC0REG21     [i]))["PIC0REG2101_00"];
        return;
    }
    if ((0x00C8 <= addr) && (addr <= (0x00C8)+(20*1)) && ((addr-0x00C8)%20 == 0)) {
        uint i = (addr - 0x00C8)/20;
        PIC0REG22_PIC0REG2230             [i] = (*(PIC0REG22     [i]))["PIC0REG2230"   ];
        PIC0REG22_PIC0REG2229             [i] = (*(PIC0REG22     [i]))["PIC0REG2229"   ];
        PIC0REG22_PIC0REG2228             [i] = (*(PIC0REG22     [i]))["PIC0REG2228"   ];
        PIC0REG22_PIC0REG2227_26          [i] = (*(PIC0REG22     [i]))["PIC0REG2227_26"];
        PIC0REG22_PIC0REG2225_24          [i] = (*(PIC0REG22     [i]))["PIC0REG2225_24"];
        PIC0REG22_PIC0REG2223_22          [i] = (*(PIC0REG22     [i]))["PIC0REG2223_22"];
        PIC0REG22_PIC0REG2221_20          [i] = (*(PIC0REG22     [i]))["PIC0REG2221_20"];
        PIC0REG22_PIC0REG2219_18          [i] = (*(PIC0REG22     [i]))["PIC0REG2219_18"];
        PIC0REG22_PIC0REG2217_16          [i] = (*(PIC0REG22     [i]))["PIC0REG2217_16"];
        PIC0REG22_PIC0REG2213             [i] = (*(PIC0REG22     [i]))["PIC0REG2213"   ];
        PIC0REG22_PIC0REG2212             [i] = (*(PIC0REG22     [i]))["PIC0REG2212"   ];
        PIC0REG22_PIC0REG2211             [i] = (*(PIC0REG22     [i]))["PIC0REG2211"   ];
        PIC0REG22_PIC0REG2210             [i] = (*(PIC0REG22     [i]))["PIC0REG2210"   ];
        PIC0REG22_PIC0REG2209             [i] = (*(PIC0REG22     [i]))["PIC0REG2209"   ];
        PIC0REG22_PIC0REG2208             [i] = (*(PIC0REG22     [i]))["PIC0REG2208"   ];
        PIC0REG22_PIC0REG2207             [i] = (*(PIC0REG22     [i]))["PIC0REG2207"   ];
        PIC0REG22_PIC0REG2206             [i] = (*(PIC0REG22     [i]))["PIC0REG2206"   ];
        PIC0REG22_PIC0REG2205             [i] = (*(PIC0REG22     [i]))["PIC0REG2205"   ];
        PIC0REG22_PIC0REG2204             [i] = (*(PIC0REG22     [i]))["PIC0REG2204"   ];
        PIC0REG22_PIC0REG2203             [i] = (*(PIC0REG22     [i]))["PIC0REG2203"   ];
        PIC0REG22_PIC0REG2202             [i] = (*(PIC0REG22     [i]))["PIC0REG2202"   ];
        PIC0REG22_PIC0REG2201             [i] = (*(PIC0REG22     [i]))["PIC0REG2201"   ];
        PIC0REG22_PIC0REG2200             [i] = (*(PIC0REG22     [i]))["PIC0REG2200"   ];
        return;
    }
    if ((0x00CC <= addr) && (addr <= (0x00CC)+(20*1)) && ((addr-0x00CC)%20 == 0)) {
        uint i = (addr - 0x00CC)/20;
        PIC0REG23_PIC0REG2322_20          [i] = (*(PIC0REG23     [i]))["PIC0REG2322_20"];
        PIC0REG23_PIC0REG2318_16          [i] = (*(PIC0REG23     [i]))["PIC0REG2318_16"];
        PIC0REG23_PIC0REG2314_12          [i] = (*(PIC0REG23     [i]))["PIC0REG2314_12"];
        PIC0REG23_PIC0REG2310_08          [i] = (*(PIC0REG23     [i]))["PIC0REG2310_08"];
        PIC0REG23_PIC0REG2306_04          [i] = (*(PIC0REG23     [i]))["PIC0REG2306_04"];
        PIC0REG23_PIC0REG2302_00          [i] = (*(PIC0REG23     [i]))["PIC0REG2302_00"];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(20*1)) && ((addr-0x00D0)%20 == 0)) {
        uint i = (addr - 0x00D0)/20;
        PIC0REG24_PIC0REG2415             [i] = (*(PIC0REG24     [i]))["PIC0REG2415"   ];
        PIC0REG24_PIC0REG2414             [i] = (*(PIC0REG24     [i]))["PIC0REG2414"   ];
        PIC0REG24_PIC0REG2413             [i] = (*(PIC0REG24     [i]))["PIC0REG2413"   ];
        PIC0REG24_PIC0REG2412             [i] = (*(PIC0REG24     [i]))["PIC0REG2412"   ];
        PIC0REG24_PIC0REG2411             [i] = (*(PIC0REG24     [i]))["PIC0REG2411"   ];
        PIC0REG24_PIC0REG2410             [i] = (*(PIC0REG24     [i]))["PIC0REG2410"   ];
        PIC0REG24_PIC0REG2409             [i] = (*(PIC0REG24     [i]))["PIC0REG2409"   ];
        PIC0REG24_PIC0REG2408             [i] = (*(PIC0REG24     [i]))["PIC0REG2408"   ];
        PIC0REG24_PIC0REG2407             [i] = (*(PIC0REG24     [i]))["PIC0REG2407"   ];
        PIC0REG24_PIC0REG2406             [i] = (*(PIC0REG24     [i]))["PIC0REG2406"   ];
        PIC0REG24_PIC0REG2405             [i] = (*(PIC0REG24     [i]))["PIC0REG2405"   ];
        PIC0REG24_PIC0REG2404             [i] = (*(PIC0REG24     [i]))["PIC0REG2404"   ];
        PIC0REG24_PIC0REG2403             [i] = (*(PIC0REG24     [i]))["PIC0REG2403"   ];
        PIC0REG24_PIC0REG2402             [i] = (*(PIC0REG24     [i]))["PIC0REG2402"   ];
        PIC0REG24_PIC0REG2401             [i] = (*(PIC0REG24     [i]))["PIC0REG2401"   ];
        PIC0REG24_PIC0REG2400             [i] = (*(PIC0REG24     [i]))["PIC0REG2400"   ];
        return;
    }
    if (addr == 0x00E8) {
        PIC0REG30_PIC0REG3024              = (*PIC0REG30     )["PIC0REG3024"   ];
        PIC0REG30_PIC0REG3023              = (*PIC0REG30     )["PIC0REG3023"   ];
        PIC0REG30_PIC0REG3022              = (*PIC0REG30     )["PIC0REG3022"   ];
        PIC0REG30_PIC0REG3021              = (*PIC0REG30     )["PIC0REG3021"   ];
        PIC0REG30_PIC0REG3020_19           = (*PIC0REG30     )["PIC0REG3020_19"];
        PIC0REG30_PIC0REG3018              = (*PIC0REG30     )["PIC0REG3018"   ];
        PIC0REG30_PIC0REG3017_16           = (*PIC0REG30     )["PIC0REG3017_16"];
        PIC0REG30_PIC0REG3015_12           = (*PIC0REG30     )["PIC0REG3015_12"];
        PIC0REG30_PIC0REG3011_10           = (*PIC0REG30     )["PIC0REG3011_10"];
        PIC0REG30_PIC0REG3009_08           = (*PIC0REG30     )["PIC0REG3009_08"];
        PIC0REG30_PIC0REG3007_06           = (*PIC0REG30     )["PIC0REG3007_06"];
        PIC0REG30_PIC0REG3005_02           = (*PIC0REG30     )["PIC0REG3005_02"];
        PIC0REG30_PIC0REG3001              = (*PIC0REG30     )["PIC0REG3001"   ];
        PIC0REG30_PIC0REG3000              = (*PIC0REG30     )["PIC0REG3000"   ];
        return;
    }
    if (addr == 0x00EC) {
        PIC0REG31_PIC0REG3126              = (*PIC0REG31     )["PIC0REG3126"   ];
        PIC0REG31_PIC0REG3125              = (*PIC0REG31     )["PIC0REG3125"   ];
        PIC0REG31_PIC0REG3124              = (*PIC0REG31     )["PIC0REG3124"   ];
        PIC0REG31_PIC0REG3123              = (*PIC0REG31     )["PIC0REG3123"   ];
        PIC0REG31_PIC0REG3122_21           = (*PIC0REG31     )["PIC0REG3122_21"];
        PIC0REG31_PIC0REG3120              = (*PIC0REG31     )["PIC0REG3120"   ];
        PIC0REG31_PIC0REG3119_18           = (*PIC0REG31     )["PIC0REG3119_18"];
        PIC0REG31_PIC0REG3117_15           = (*PIC0REG31     )["PIC0REG3117_15"];
        PIC0REG31_PIC0REG3114              = (*PIC0REG31     )["PIC0REG3114"   ];
        PIC0REG31_PIC0REG3113_12           = (*PIC0REG31     )["PIC0REG3113_12"];
        PIC0REG31_PIC0REG3111              = (*PIC0REG31     )["PIC0REG3111"   ];
        PIC0REG31_PIC0REG3110_09           = (*PIC0REG31     )["PIC0REG3110_09"];
        PIC0REG31_PIC0REG3108_06           = (*PIC0REG31     )["PIC0REG3108_06"];
        PIC0REG31_PIC0REG3105_04           = (*PIC0REG31     )["PIC0REG3105_04"];
        PIC0REG31_PIC0REG3103              = (*PIC0REG31     )["PIC0REG3103"   ];
        PIC0REG31_PIC0REG3102_01           = (*PIC0REG31     )["PIC0REG3102_01"];
        PIC0REG31_PIC0REG3100              = (*PIC0REG31     )["PIC0REG3100"   ];
        return;
    }
    if (addr == 0x00F0) {
        PIC0REG32_PIC0REG3213              = (*PIC0REG32     )["PIC0REG3213"   ];
        PIC0REG32_PIC0REG3212              = (*PIC0REG32     )["PIC0REG3212"   ];
        PIC0REG32_PIC0REG3211_10           = (*PIC0REG32     )["PIC0REG3211_10"];
        PIC0REG32_PIC0REG3209              = (*PIC0REG32     )["PIC0REG3209"   ];
        PIC0REG32_PIC0REG3208              = (*PIC0REG32     )["PIC0REG3208"   ];
        PIC0REG32_PIC0REG3205              = (*PIC0REG32     )["PIC0REG3205"   ];
        PIC0REG32_PIC0REG3204              = (*PIC0REG32     )["PIC0REG3204"   ];
        PIC0REG32_PIC0REG3203_02           = (*PIC0REG32     )["PIC0REG3203_02"];
        PIC0REG32_PIC0REG3201              = (*PIC0REG32     )["PIC0REG3201"   ];
        PIC0REG32_PIC0REG3200              = (*PIC0REG32     )["PIC0REG3200"   ];
        return;
    }
    if (addr == 0x00F4) {
        PIC0REG33_PIC0REG3301              = (*PIC0REG33     )["PIC0REG3301"   ];
        PIC0REG33_PIC0REG3300              = (*PIC0REG33     )["PIC0REG3300"   ];
        return;
    }
    if ((0x00F8 <= addr) && (addr <= (0x00F8)+(4*1)) && ((addr-0x00F8)%4 == 0)) {
        uint i = (addr - 0x00F8)/4;
        PIC0REG5_PIC0REG514               [i] = (*(PIC0REG5      [i]))["PIC0REG514"    ];
        PIC0REG5_PIC0REG513               [i] = (*(PIC0REG5      [i]))["PIC0REG513"    ];
        PIC0REG5_PIC0REG512               [i] = (*(PIC0REG5      [i]))["PIC0REG512"    ];
        PIC0REG5_PIC0REG510               [i] = (*(PIC0REG5      [i]))["PIC0REG510"    ];
        PIC0REG5_PIC0REG508               [i] = (*(PIC0REG5      [i]))["PIC0REG508"    ];
        PIC0REG5_PIC0REG507               [i] = (*(PIC0REG5      [i]))["PIC0REG507"    ];
        PIC0REG5_PIC0REG506_05            [i] = (*(PIC0REG5      [i]))["PIC0REG506_05" ];
        PIC0REG5_PIC0REG504               [i] = (*(PIC0REG5      [i]))["PIC0REG504"    ];
        PIC0REG5_PIC0REG503               [i] = (*(PIC0REG5      [i]))["PIC0REG503"    ];
        PIC0REG5_PIC0REG502_01            [i] = (*(PIC0REG5      [i]))["PIC0REG502_01" ];
        PIC0REG5_PIC0REG500               [i] = (*(PIC0REG5      [i]))["PIC0REG500"    ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cpic1a_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*PIC0EN        )["PIC0EN0"       ] = PIC0EN_PIC0EN0;
        return;
    }
    if (addr == 0x0004) {
        (*PIC0SST       )["SYNCTRG"       ] = PIC0SST_SYNCTRG;
        return;
    }
    if (addr == 0x0010) {
        (*PIC0SSER0     )["PIC0SSER0n"    ] = PIC0SSER0_PIC0SSER0n;
        return;
    }
    if (addr == 0x0014) {
        (*PIC0SSER1     )["PIC0SSER1n"    ] = PIC0SSER1_PIC0SSER1n;
        return;
    }
    if (addr == 0x0018) {
        (*PIC0SSER2     )["PIC0SSER215"   ] = PIC0SSER2_PIC0SSER215;
        (*PIC0SSER2     )["PIC0SSER214"   ] = PIC0SSER2_PIC0SSER214;
        (*PIC0SSER2     )["PIC0SSER213"   ] = PIC0SSER2_PIC0SSER213;
        (*PIC0SSER2     )["PIC0SSER212"   ] = PIC0SSER2_PIC0SSER212;
        (*PIC0SSER2     )["PIC0SSER211"   ] = PIC0SSER2_PIC0SSER211;
        (*PIC0SSER2     )["PIC0SSER210"   ] = PIC0SSER2_PIC0SSER210;
        (*PIC0SSER2     )["PIC0SSER209"   ] = PIC0SSER2_PIC0SSER209;
        (*PIC0SSER2     )["PIC0SSER208"   ] = PIC0SSER2_PIC0SSER208;
        (*PIC0SSER2     )["PIC0SSER207"   ] = PIC0SSER2_PIC0SSER207;
        (*PIC0SSER2     )["PIC0SSER206"   ] = PIC0SSER2_PIC0SSER206;
        (*PIC0SSER2     )["PIC0SSER205"   ] = PIC0SSER2_PIC0SSER205;
        (*PIC0SSER2     )["PIC0SSER204"   ] = PIC0SSER2_PIC0SSER204;
        (*PIC0SSER2     )["PIC0SSER203"   ] = PIC0SSER2_PIC0SSER203;
        (*PIC0SSER2     )["PIC0SSER202"   ] = PIC0SSER2_PIC0SSER202;
        (*PIC0SSER2     )["PIC0SSER201"   ] = PIC0SSER2_PIC0SSER201;
        (*PIC0SSER2     )["PIC0SSER200"   ] = PIC0SSER2_PIC0SSER200;
        return;
    }
    if (addr == 0x001C) {
        (*PIC0SSER3     )["PIC0SSER303"   ] = PIC0SSER3_PIC0SSER303;
        (*PIC0SSER3     )["PIC0SSER302"   ] = PIC0SSER3_PIC0SSER302;
        (*PIC0SSER3     )["PIC0SSER301"   ] = PIC0SSER3_PIC0SSER301;
        (*PIC0SSER3     )["PIC0SSER300"   ] = PIC0SSER3_PIC0SSER300;
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(12*1)) && ((addr-0x0020)%12 == 0)) {
        uint i = (addr - 0x0020)/12;
        (*(PIC0INI0      [i]))["PIC0INI07"     ] = PIC0INI0_PIC0INI07[i];
        (*(PIC0INI0      [i]))["PIC0INI06"     ] = PIC0INI0_PIC0INI06[i];
        (*(PIC0INI0      [i]))["PIC0INI05"     ] = PIC0INI0_PIC0INI05[i];
        (*(PIC0INI0      [i]))["PIC0INI04"     ] = PIC0INI0_PIC0INI04[i];
        (*(PIC0INI0      [i]))["PIC0INI03"     ] = PIC0INI0_PIC0INI03[i];
        (*(PIC0INI0      [i]))["PIC0INI02"     ] = PIC0INI0_PIC0INI02[i];
        (*(PIC0INI0      [i]))["PIC0INI01"     ] = PIC0INI0_PIC0INI01[i];
        (*(PIC0INI0      [i]))["PIC0INI00"     ] = PIC0INI0_PIC0INI00[i];
        return;
    }
    if ((0x0024 <= addr) && (addr <= (0x0024)+(12*1)) && ((addr-0x0024)%12 == 0)) {
        uint i = (addr - 0x0024)/12;
        (*(PIC0INI1      [i]))["PIC0INI102"    ] = PIC0INI1_PIC0INI102[i];
        (*(PIC0INI1      [i]))["PIC0INI101"    ] = PIC0INI1_PIC0INI101[i];
        (*(PIC0INI1      [i]))["PIC0INI100"    ] = PIC0INI1_PIC0INI100[i];
        return;
    }
    if ((0x0028 <= addr) && (addr <= (0x0028)+(12*1)) && ((addr-0x0028)%12 == 0)) {
        uint i = (addr - 0x0028)/12;
        (*(PIC0INI2      [i]))["PIC0INI22"     ] = PIC0INI2_PIC0INI22[i];
        (*(PIC0INI2      [i]))["PIC0INI21"     ] = PIC0INI2_PIC0INI21[i];
        (*(PIC0INI2      [i]))["PIC0INI20"     ] = PIC0INI2_PIC0INI20[i];
        return;
    }
    if ((0x0038 <= addr) && (addr <= (0x0038)+(4*1)) && ((addr-0x0038)%4 == 0)) {
        uint i = (addr - 0x0038)/4;
        (*(PIC0WNGMK     [i]))["WNGMK2"        ] = PIC0WNGMK_WNGMK2[i];
        (*(PIC0WNGMK     [i]))["WNGMK1"        ] = PIC0WNGMK_WNGMK1[i];
        (*(PIC0WNGMK     [i]))["WNGMK0"        ] = PIC0WNGMK_WNGMK0[i];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*1)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        (*(PIC0WNGS      [i]))["PIC0WNGS5"     ] = PIC0WNGS_PIC0WNGS5[i];
        (*(PIC0WNGS      [i]))["PIC0WNGS4"     ] = PIC0WNGS_PIC0WNGS4[i];
        (*(PIC0WNGS      [i]))["PIC0WNGS3"     ] = PIC0WNGS_PIC0WNGS3[i];
        (*(PIC0WNGS      [i]))["PIC0WNGS2"     ] = PIC0WNGS_PIC0WNGS2[i];
        (*(PIC0WNGS      [i]))["PIC0WNGS1"     ] = PIC0WNGS_PIC0WNGS1[i];
        (*(PIC0WNGS      [i]))["PIC0WNGS0"     ] = PIC0WNGS_PIC0WNGS0[i];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(4*1)) && ((addr-0x0048)%4 == 0)) {
        uint i = (addr - 0x0048)/4;
        (*(PIC0WNGF      [i]))["PIC0WNGF2"     ] = PIC0WNGF_PIC0WNGF2[i];
        (*(PIC0WNGF      [i]))["PIC0WNGF1"     ] = PIC0WNGF_PIC0WNGF1[i];
        (*(PIC0WNGF      [i]))["PIC0WNGF0"     ] = PIC0WNGF_PIC0WNGF0[i];
        return;
    }
    if ((0x0050 <= addr) && (addr <= (0x0050)+(4*1)) && ((addr-0x0050)%4 == 0)) {
        uint i = (addr - 0x0050)/4;
        (*(PIC0WNGFCLR   [i]))["WNGFCLR2"      ] = PIC0WNGFCLR_WNGFCLR2[i];
        (*(PIC0WNGFCLR   [i]))["WNGFCLR1"      ] = PIC0WNGFCLR_WNGFCLR1[i];
        (*(PIC0WNGFCLR   [i]))["WNGFCLR0"      ] = PIC0WNGFCLR_WNGFCLR0[i];
        return;
    }
    if ((0x0058 <= addr) && (addr <= (0x0058)+(4*1)) && ((addr-0x0058)%4 == 0)) {
        uint i = (addr - 0x0058)/4;
        (*(PIC0RTO       [i]))["RTOTRO5"       ] = PIC0RTO_RTOTRO5[i];
        (*(PIC0RTO       [i]))["RTOTME5"       ] = PIC0RTO_RTOTME5[i];
        (*(PIC0RTO       [i]))["RTOTRO4"       ] = PIC0RTO_RTOTRO4[i];
        (*(PIC0RTO       [i]))["RTOTME4"       ] = PIC0RTO_RTOTME4[i];
        (*(PIC0RTO       [i]))["RTOTRO3"       ] = PIC0RTO_RTOTRO3[i];
        (*(PIC0RTO       [i]))["RTOTME3"       ] = PIC0RTO_RTOTME3[i];
        (*(PIC0RTO       [i]))["RTOTRO2"       ] = PIC0RTO_RTOTRO2[i];
        (*(PIC0RTO       [i]))["RTOTME2"       ] = PIC0RTO_RTOTME2[i];
        (*(PIC0RTO       [i]))["RTOTRO1"       ] = PIC0RTO_RTOTRO1[i];
        (*(PIC0RTO       [i]))["RTOTME1"       ] = PIC0RTO_RTOTME1[i];
        (*(PIC0RTO       [i]))["RTOTRO0"       ] = PIC0RTO_RTOTRO0[i];
        (*(PIC0RTO       [i]))["RTOTME0"       ] = PIC0RTO_RTOTME0[i];
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(8*1)) && ((addr-0x0060)%8 == 0)) {
        uint i = (addr - 0x0060)/8;
        (*(PIC0LHSEL     [i]))["PIC0LHSEL6"    ] = PIC0LHSEL_PIC0LHSEL6[i];
        (*(PIC0LHSEL     [i]))["PIC0LHSEL5"    ] = PIC0LHSEL_PIC0LHSEL5[i];
        (*(PIC0LHSEL     [i]))["PIC0LHSEL4"    ] = PIC0LHSEL_PIC0LHSEL4[i];
        (*(PIC0LHSEL     [i]))["PIC0LHSEL3"    ] = PIC0LHSEL_PIC0LHSEL3[i];
        (*(PIC0LHSEL     [i]))["PIC0LHSEL2"    ] = PIC0LHSEL_PIC0LHSEL2[i];
        (*(PIC0LHSEL     [i]))["PIC0LHSEL1"    ] = PIC0LHSEL_PIC0LHSEL1[i];
        return;
    }
    if ((0x0064 <= addr) && (addr <= (0x0064)+(8*1)) && ((addr-0x0064)%8 == 0)) {
        uint i = (addr - 0x0064)/8;
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR6"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR6[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR5"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR5[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR4"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR4[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR3"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR3[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR2"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR2[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR1"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR1[i];
        (*(PIC0TSGOUTCTR [i]))["PIC0TSGOUTCTR0"] = PIC0TSGOUTCTR_PIC0TSGOUTCTR0[i];
        return;
    }
    if (addr == 0x0074) {
        (*PIC0HALLSEL   )["PIC0HALLSEL1"  ] = PIC0HALLSEL_PIC0HALLSEL1;
        (*PIC0HALLSEL   )["PIC0HALLSEL0"  ] = PIC0HALLSEL_PIC0HALLSEL0;
        return;
    }
    if ((0x0078 <= addr) && (addr <= (0x0078)+(4*1)) && ((addr-0x0078)%4 == 0)) {
        uint i = (addr - 0x0078)/4;
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN143" ] = PIC0TAUDSEL_PIC0TAUDIN143[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN142" ] = PIC0TAUDSEL_PIC0TAUDIN142[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN141" ] = PIC0TAUDSEL_PIC0TAUDIN141[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN140" ] = PIC0TAUDSEL_PIC0TAUDIN140[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN123" ] = PIC0TAUDSEL_PIC0TAUDIN123[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN122" ] = PIC0TAUDSEL_PIC0TAUDIN122[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN121" ] = PIC0TAUDSEL_PIC0TAUDIN121[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN120" ] = PIC0TAUDSEL_PIC0TAUDIN120[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN103" ] = PIC0TAUDSEL_PIC0TAUDIN103[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN102" ] = PIC0TAUDSEL_PIC0TAUDIN102[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN101" ] = PIC0TAUDSEL_PIC0TAUDIN101[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN100" ] = PIC0TAUDSEL_PIC0TAUDIN100[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN83"  ] = PIC0TAUDSEL_PIC0TAUDIN83[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN82"  ] = PIC0TAUDSEL_PIC0TAUDIN82[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN81"  ] = PIC0TAUDSEL_PIC0TAUDIN81[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN80"  ] = PIC0TAUDSEL_PIC0TAUDIN80[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN63"  ] = PIC0TAUDSEL_PIC0TAUDIN63[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN62"  ] = PIC0TAUDSEL_PIC0TAUDIN62[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN61"  ] = PIC0TAUDSEL_PIC0TAUDIN61[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN60"  ] = PIC0TAUDSEL_PIC0TAUDIN60[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN43"  ] = PIC0TAUDSEL_PIC0TAUDIN43[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN42"  ] = PIC0TAUDSEL_PIC0TAUDIN42[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN41"  ] = PIC0TAUDSEL_PIC0TAUDIN41[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN40"  ] = PIC0TAUDSEL_PIC0TAUDIN40[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN23"  ] = PIC0TAUDSEL_PIC0TAUDIN23[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN22"  ] = PIC0TAUDSEL_PIC0TAUDIN22[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN21"  ] = PIC0TAUDSEL_PIC0TAUDIN21[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN20"  ] = PIC0TAUDSEL_PIC0TAUDIN20[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN03"  ] = PIC0TAUDSEL_PIC0TAUDIN03[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN02"  ] = PIC0TAUDSEL_PIC0TAUDIN02[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN01"  ] = PIC0TAUDSEL_PIC0TAUDIN01[i];
        (*(PIC0TAUDSEL   [i]))["PIC0TAUDIN00"  ] = PIC0TAUDSEL_PIC0TAUDIN00[i];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN7"   ] = PIC0HIZCEN_PIC0HIZCEN7[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN6"   ] = PIC0HIZCEN_PIC0HIZCEN6[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN5"   ] = PIC0HIZCEN_PIC0HIZCEN5[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN4"   ] = PIC0HIZCEN_PIC0HIZCEN4[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN3"   ] = PIC0HIZCEN_PIC0HIZCEN3[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN2"   ] = PIC0HIZCEN_PIC0HIZCEN2[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN1"   ] = PIC0HIZCEN_PIC0HIZCEN1[i];
        (*(PIC0HIZCEN    [i]))["PIC0HIZCEN0"   ] = PIC0HIZCEN_PIC0HIZCEN0[i];
        return;
    }
    if ((0x00A8 <= addr) && (addr <= (0x00A8)+(4*1)) && ((addr-0x00A8)%4 == 0)) {
        uint i = (addr - 0x00A8)/4;
        (*(PIC0SATTSEL40 [i]))["PIC0SATTSEL407"] = PIC0SATTSEL40_PIC0SATTSEL407[i];
        (*(PIC0SATTSEL40 [i]))["PIC0SATTSEL403_0"] = PIC0SATTSEL40_PIC0SATTSEL403_0[i];
        return;
    }
    if ((0x00B0 <= addr) && (addr <= (0x00B0)+(4*1)) && ((addr-0x00B0)%4 == 0)) {
        uint i = (addr - 0x00B0)/4;
        (*(PIC0DGFTSSEL40[i]))["PIC0DGFTSSEL407"] = PIC0DGFTSSEL40_PIC0DGFTSSEL407[i];
        (*(PIC0DGFTSSEL40[i]))["PIC0DGFTSSEL403_0"] = PIC0DGFTSSEL40_PIC0DGFTSSEL403_0[i];
        return;
    }
    if ((0x00B8 <= addr) && (addr <= (0x00B8)+(4*1)) && ((addr-0x00B8)%4 == 0)) {
        uint i = (addr - 0x00B8)/4;
        (*(PIC0ENCSEL40  [i]))["PIC0ENCSEL407" ] = PIC0ENCSEL40_PIC0ENCSEL407[i];
        (*(PIC0ENCSEL40  [i]))["PIC0ENCSEL403_0"] = PIC0ENCSEL40_PIC0ENCSEL403_0[i];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(20*1)) && ((addr-0x00C0)%20 == 0)) {
        uint i = (addr - 0x00C0)/20;
        (*(PIC0REG20     [i]))["PIC0REG2028"   ] = PIC0REG20_PIC0REG2028[i];
        (*(PIC0REG20     [i]))["PIC0REG2025_24"] = PIC0REG20_PIC0REG2025_24[i];
        (*(PIC0REG20     [i]))["PIC0REG2020"   ] = PIC0REG20_PIC0REG2020[i];
        (*(PIC0REG20     [i]))["PIC0REG2018"   ] = PIC0REG20_PIC0REG2018[i];
        (*(PIC0REG20     [i]))["PIC0REG2017"   ] = PIC0REG20_PIC0REG2017[i];
        (*(PIC0REG20     [i]))["PIC0REG2016"   ] = PIC0REG20_PIC0REG2016[i];
        (*(PIC0REG20     [i]))["PIC0REG2013_12"] = PIC0REG20_PIC0REG2013_12[i];
        (*(PIC0REG20     [i]))["PIC0REG2011_10"] = PIC0REG20_PIC0REG2011_10[i];
        (*(PIC0REG20     [i]))["PIC0REG2009_08"] = PIC0REG20_PIC0REG2009_08[i];
        (*(PIC0REG20     [i]))["PIC0REG2005"   ] = PIC0REG20_PIC0REG2005[i];
        (*(PIC0REG20     [i]))["PIC0REG2004"   ] = PIC0REG20_PIC0REG2004[i];
        (*(PIC0REG20     [i]))["PIC0REG2003"   ] = PIC0REG20_PIC0REG2003[i];
        (*(PIC0REG20     [i]))["PIC0REG2002"   ] = PIC0REG20_PIC0REG2002[i];
        (*(PIC0REG20     [i]))["PIC0REG2001"   ] = PIC0REG20_PIC0REG2001[i];
        (*(PIC0REG20     [i]))["PIC0REG2000"   ] = PIC0REG20_PIC0REG2000[i];
        return;
    }
    if ((0x00C4 <= addr) && (addr <= (0x00C4)+(20*1)) && ((addr-0x00C4)%20 == 0)) {
        uint i = (addr - 0x00C4)/20;
        (*(PIC0REG21     [i]))["PIC0REG2127_26"] = PIC0REG21_PIC0REG2127_26[i];
        (*(PIC0REG21     [i]))["PIC0REG2125_24"] = PIC0REG21_PIC0REG2125_24[i];
        (*(PIC0REG21     [i]))["PIC0REG2123_22"] = PIC0REG21_PIC0REG2123_22[i];
        (*(PIC0REG21     [i]))["PIC0REG2121_20"] = PIC0REG21_PIC0REG2121_20[i];
        (*(PIC0REG21     [i]))["PIC0REG2119_18"] = PIC0REG21_PIC0REG2119_18[i];
        (*(PIC0REG21     [i]))["PIC0REG2117_16"] = PIC0REG21_PIC0REG2117_16[i];
        (*(PIC0REG21     [i]))["PIC0REG2111_10"] = PIC0REG21_PIC0REG2111_10[i];
        (*(PIC0REG21     [i]))["PIC0REG2109_08"] = PIC0REG21_PIC0REG2109_08[i];
        (*(PIC0REG21     [i]))["PIC0REG2107_06"] = PIC0REG21_PIC0REG2107_06[i];
        (*(PIC0REG21     [i]))["PIC0REG2105_04"] = PIC0REG21_PIC0REG2105_04[i];
        (*(PIC0REG21     [i]))["PIC0REG2103_02"] = PIC0REG21_PIC0REG2103_02[i];
        (*(PIC0REG21     [i]))["PIC0REG2101_00"] = PIC0REG21_PIC0REG2101_00[i];
        return;
    }
    if ((0x00C8 <= addr) && (addr <= (0x00C8)+(20*1)) && ((addr-0x00C8)%20 == 0)) {
        uint i = (addr - 0x00C8)/20;
        (*(PIC0REG22     [i]))["PIC0REG2230"   ] = PIC0REG22_PIC0REG2230[i];
        (*(PIC0REG22     [i]))["PIC0REG2229"   ] = PIC0REG22_PIC0REG2229[i];
        (*(PIC0REG22     [i]))["PIC0REG2228"   ] = PIC0REG22_PIC0REG2228[i];
        (*(PIC0REG22     [i]))["PIC0REG2227_26"] = PIC0REG22_PIC0REG2227_26[i];
        (*(PIC0REG22     [i]))["PIC0REG2225_24"] = PIC0REG22_PIC0REG2225_24[i];
        (*(PIC0REG22     [i]))["PIC0REG2223_22"] = PIC0REG22_PIC0REG2223_22[i];
        (*(PIC0REG22     [i]))["PIC0REG2221_20"] = PIC0REG22_PIC0REG2221_20[i];
        (*(PIC0REG22     [i]))["PIC0REG2219_18"] = PIC0REG22_PIC0REG2219_18[i];
        (*(PIC0REG22     [i]))["PIC0REG2217_16"] = PIC0REG22_PIC0REG2217_16[i];
        (*(PIC0REG22     [i]))["PIC0REG2213"   ] = PIC0REG22_PIC0REG2213[i];
        (*(PIC0REG22     [i]))["PIC0REG2212"   ] = PIC0REG22_PIC0REG2212[i];
        (*(PIC0REG22     [i]))["PIC0REG2211"   ] = PIC0REG22_PIC0REG2211[i];
        (*(PIC0REG22     [i]))["PIC0REG2210"   ] = PIC0REG22_PIC0REG2210[i];
        (*(PIC0REG22     [i]))["PIC0REG2209"   ] = PIC0REG22_PIC0REG2209[i];
        (*(PIC0REG22     [i]))["PIC0REG2208"   ] = PIC0REG22_PIC0REG2208[i];
        (*(PIC0REG22     [i]))["PIC0REG2207"   ] = PIC0REG22_PIC0REG2207[i];
        (*(PIC0REG22     [i]))["PIC0REG2206"   ] = PIC0REG22_PIC0REG2206[i];
        (*(PIC0REG22     [i]))["PIC0REG2205"   ] = PIC0REG22_PIC0REG2205[i];
        (*(PIC0REG22     [i]))["PIC0REG2204"   ] = PIC0REG22_PIC0REG2204[i];
        (*(PIC0REG22     [i]))["PIC0REG2203"   ] = PIC0REG22_PIC0REG2203[i];
        (*(PIC0REG22     [i]))["PIC0REG2202"   ] = PIC0REG22_PIC0REG2202[i];
        (*(PIC0REG22     [i]))["PIC0REG2201"   ] = PIC0REG22_PIC0REG2201[i];
        (*(PIC0REG22     [i]))["PIC0REG2200"   ] = PIC0REG22_PIC0REG2200[i];
        return;
    }
    if ((0x00CC <= addr) && (addr <= (0x00CC)+(20*1)) && ((addr-0x00CC)%20 == 0)) {
        uint i = (addr - 0x00CC)/20;
        (*(PIC0REG23     [i]))["PIC0REG2322_20"] = PIC0REG23_PIC0REG2322_20[i];
        (*(PIC0REG23     [i]))["PIC0REG2318_16"] = PIC0REG23_PIC0REG2318_16[i];
        (*(PIC0REG23     [i]))["PIC0REG2314_12"] = PIC0REG23_PIC0REG2314_12[i];
        (*(PIC0REG23     [i]))["PIC0REG2310_08"] = PIC0REG23_PIC0REG2310_08[i];
        (*(PIC0REG23     [i]))["PIC0REG2306_04"] = PIC0REG23_PIC0REG2306_04[i];
        (*(PIC0REG23     [i]))["PIC0REG2302_00"] = PIC0REG23_PIC0REG2302_00[i];
        return;
    }
    if ((0x00D0 <= addr) && (addr <= (0x00D0)+(20*1)) && ((addr-0x00D0)%20 == 0)) {
        uint i = (addr - 0x00D0)/20;
        (*(PIC0REG24     [i]))["PIC0REG2415"   ] = PIC0REG24_PIC0REG2415[i];
        (*(PIC0REG24     [i]))["PIC0REG2414"   ] = PIC0REG24_PIC0REG2414[i];
        (*(PIC0REG24     [i]))["PIC0REG2413"   ] = PIC0REG24_PIC0REG2413[i];
        (*(PIC0REG24     [i]))["PIC0REG2412"   ] = PIC0REG24_PIC0REG2412[i];
        (*(PIC0REG24     [i]))["PIC0REG2411"   ] = PIC0REG24_PIC0REG2411[i];
        (*(PIC0REG24     [i]))["PIC0REG2410"   ] = PIC0REG24_PIC0REG2410[i];
        (*(PIC0REG24     [i]))["PIC0REG2409"   ] = PIC0REG24_PIC0REG2409[i];
        (*(PIC0REG24     [i]))["PIC0REG2408"   ] = PIC0REG24_PIC0REG2408[i];
        (*(PIC0REG24     [i]))["PIC0REG2407"   ] = PIC0REG24_PIC0REG2407[i];
        (*(PIC0REG24     [i]))["PIC0REG2406"   ] = PIC0REG24_PIC0REG2406[i];
        (*(PIC0REG24     [i]))["PIC0REG2405"   ] = PIC0REG24_PIC0REG2405[i];
        (*(PIC0REG24     [i]))["PIC0REG2404"   ] = PIC0REG24_PIC0REG2404[i];
        (*(PIC0REG24     [i]))["PIC0REG2403"   ] = PIC0REG24_PIC0REG2403[i];
        (*(PIC0REG24     [i]))["PIC0REG2402"   ] = PIC0REG24_PIC0REG2402[i];
        (*(PIC0REG24     [i]))["PIC0REG2401"   ] = PIC0REG24_PIC0REG2401[i];
        (*(PIC0REG24     [i]))["PIC0REG2400"   ] = PIC0REG24_PIC0REG2400[i];
        return;
    }
    if (addr == 0x00E8) {
        (*PIC0REG30     )["PIC0REG3024"   ] = PIC0REG30_PIC0REG3024;
        (*PIC0REG30     )["PIC0REG3023"   ] = PIC0REG30_PIC0REG3023;
        (*PIC0REG30     )["PIC0REG3022"   ] = PIC0REG30_PIC0REG3022;
        (*PIC0REG30     )["PIC0REG3021"   ] = PIC0REG30_PIC0REG3021;
        (*PIC0REG30     )["PIC0REG3020_19"] = PIC0REG30_PIC0REG3020_19;
        (*PIC0REG30     )["PIC0REG3018"   ] = PIC0REG30_PIC0REG3018;
        (*PIC0REG30     )["PIC0REG3017_16"] = PIC0REG30_PIC0REG3017_16;
        (*PIC0REG30     )["PIC0REG3015_12"] = PIC0REG30_PIC0REG3015_12;
        (*PIC0REG30     )["PIC0REG3011_10"] = PIC0REG30_PIC0REG3011_10;
        (*PIC0REG30     )["PIC0REG3009_08"] = PIC0REG30_PIC0REG3009_08;
        (*PIC0REG30     )["PIC0REG3007_06"] = PIC0REG30_PIC0REG3007_06;
        (*PIC0REG30     )["PIC0REG3005_02"] = PIC0REG30_PIC0REG3005_02;
        (*PIC0REG30     )["PIC0REG3001"   ] = PIC0REG30_PIC0REG3001;
        (*PIC0REG30     )["PIC0REG3000"   ] = PIC0REG30_PIC0REG3000;
        return;
    }
    if (addr == 0x00EC) {
        (*PIC0REG31     )["PIC0REG3126"   ] = PIC0REG31_PIC0REG3126;
        (*PIC0REG31     )["PIC0REG3125"   ] = PIC0REG31_PIC0REG3125;
        (*PIC0REG31     )["PIC0REG3124"   ] = PIC0REG31_PIC0REG3124;
        (*PIC0REG31     )["PIC0REG3123"   ] = PIC0REG31_PIC0REG3123;
        (*PIC0REG31     )["PIC0REG3122_21"] = PIC0REG31_PIC0REG3122_21;
        (*PIC0REG31     )["PIC0REG3120"   ] = PIC0REG31_PIC0REG3120;
        (*PIC0REG31     )["PIC0REG3119_18"] = PIC0REG31_PIC0REG3119_18;
        (*PIC0REG31     )["PIC0REG3117_15"] = PIC0REG31_PIC0REG3117_15;
        (*PIC0REG31     )["PIC0REG3114"   ] = PIC0REG31_PIC0REG3114;
        (*PIC0REG31     )["PIC0REG3113_12"] = PIC0REG31_PIC0REG3113_12;
        (*PIC0REG31     )["PIC0REG3111"   ] = PIC0REG31_PIC0REG3111;
        (*PIC0REG31     )["PIC0REG3110_09"] = PIC0REG31_PIC0REG3110_09;
        (*PIC0REG31     )["PIC0REG3108_06"] = PIC0REG31_PIC0REG3108_06;
        (*PIC0REG31     )["PIC0REG3105_04"] = PIC0REG31_PIC0REG3105_04;
        (*PIC0REG31     )["PIC0REG3103"   ] = PIC0REG31_PIC0REG3103;
        (*PIC0REG31     )["PIC0REG3102_01"] = PIC0REG31_PIC0REG3102_01;
        (*PIC0REG31     )["PIC0REG3100"   ] = PIC0REG31_PIC0REG3100;
        return;
    }
    if (addr == 0x00F0) {
        (*PIC0REG32     )["PIC0REG3213"   ] = PIC0REG32_PIC0REG3213;
        (*PIC0REG32     )["PIC0REG3212"   ] = PIC0REG32_PIC0REG3212;
        (*PIC0REG32     )["PIC0REG3211_10"] = PIC0REG32_PIC0REG3211_10;
        (*PIC0REG32     )["PIC0REG3209"   ] = PIC0REG32_PIC0REG3209;
        (*PIC0REG32     )["PIC0REG3208"   ] = PIC0REG32_PIC0REG3208;
        (*PIC0REG32     )["PIC0REG3205"   ] = PIC0REG32_PIC0REG3205;
        (*PIC0REG32     )["PIC0REG3204"   ] = PIC0REG32_PIC0REG3204;
        (*PIC0REG32     )["PIC0REG3203_02"] = PIC0REG32_PIC0REG3203_02;
        (*PIC0REG32     )["PIC0REG3201"   ] = PIC0REG32_PIC0REG3201;
        (*PIC0REG32     )["PIC0REG3200"   ] = PIC0REG32_PIC0REG3200;
        return;
    }
    if (addr == 0x00F4) {
        (*PIC0REG33     )["PIC0REG3301"   ] = PIC0REG33_PIC0REG3301;
        (*PIC0REG33     )["PIC0REG3300"   ] = PIC0REG33_PIC0REG3300;
        return;
    }
    if ((0x00F8 <= addr) && (addr <= (0x00F8)+(4*1)) && ((addr-0x00F8)%4 == 0)) {
        uint i = (addr - 0x00F8)/4;
        (*(PIC0REG5      [i]))["PIC0REG514"    ] = PIC0REG5_PIC0REG514[i];
        (*(PIC0REG5      [i]))["PIC0REG513"    ] = PIC0REG5_PIC0REG513[i];
        (*(PIC0REG5      [i]))["PIC0REG512"    ] = PIC0REG5_PIC0REG512[i];
        (*(PIC0REG5      [i]))["PIC0REG510"    ] = PIC0REG5_PIC0REG510[i];
        (*(PIC0REG5      [i]))["PIC0REG508"    ] = PIC0REG5_PIC0REG508[i];
        (*(PIC0REG5      [i]))["PIC0REG507"    ] = PIC0REG5_PIC0REG507[i];
        (*(PIC0REG5      [i]))["PIC0REG506_05" ] = PIC0REG5_PIC0REG506_05[i];
        (*(PIC0REG5      [i]))["PIC0REG504"    ] = PIC0REG5_PIC0REG504[i];
        (*(PIC0REG5      [i]))["PIC0REG503"    ] = PIC0REG5_PIC0REG503[i];
        (*(PIC0REG5      [i]))["PIC0REG502_01" ] = PIC0REG5_PIC0REG502_01[i];
        (*(PIC0REG5      [i]))["PIC0REG500"    ] = PIC0REG5_PIC0REG500[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cpic1a_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cpic1a_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cpic1a_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cpic1a_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cpic1a_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cpic1a_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cpic1a_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cpic1a_regif::uint Cpic1a_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cpic1a_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cpic1a_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cpic1a_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cpic1a_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cpic1a_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cpic1a_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cpic1a_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
