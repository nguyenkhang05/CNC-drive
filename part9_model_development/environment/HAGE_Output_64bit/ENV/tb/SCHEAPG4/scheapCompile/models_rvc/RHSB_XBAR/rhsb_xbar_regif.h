// -----------------------------------------------------------------------------
// $Id: rhsb_xbar_regif.h 1339 2019-11-14 09:01:36Z chuonghoangle $
//
// Copyright(c) 2016-2019 Renesas Electronics Corporation
// Copyright(c) 2016-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : RHSB_XBAR_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE RHSB_XBAR
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         6
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name       reg_name   wsize   rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access  init        support  callback
//     %%REG    RHSBGCR0H  RHSBGCR0H  8|16|32 8|16|32  32      0x0000  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR0L  RHSBGCR0L  8|16|32 8|16|32  32      0x0004  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCRO0  RHSBGCRO0  8|16|32 8|16|32  32      0x0020  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR1H  RHSBGCR1H  8|16|32 8|16|32  32      0x0008  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR1L  RHSBGCR1L  8|16|32 8|16|32  32      0x000C  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCRO1  RHSBGCRO1  8|16|32 8|16|32  32      0x0024  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR2H  RHSBGCR2H  8|16|32 8|16|32  32      0x0010  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR2L  RHSBGCR2L  8|16|32 8|16|32  32      0x0014  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCRO2  RHSBGCRO2  8|16|32 8|16|32  32      0x0028  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR3H  RHSBGCR3H  8|16|32 8|16|32  32      0x0018  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCR3L  RHSBGCR3L  8|16|32 8|16|32  32      0x001C  -             -           -             -             W|R      0           TRUE     -
//     %%REG    RHSBGCRO3  RHSBGCRO3  8|16|32 8|16|32  32      0x002C  -             -           -             -             W|R      0           TRUE     -
// 
// %REG_NAME RHSBGCR0H
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD015       31      28     0     W|R     TRUE     -
//     %%BIT    MMD014       27      24     0     W|R     TRUE     -
//     %%BIT    MMD013       23      20     0     W|R     TRUE     -
//     %%BIT    MMD012       19      16     0     W|R     TRUE     -
//     %%BIT    MMD011       15      12     0     W|R     TRUE     -
//     %%BIT    MMD010       11      8      0     W|R     TRUE     -
//     %%BIT    MMD09        7       4      0     W|R     TRUE     -
//     %%BIT    MMD08        3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR0L
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD07       31      28     0     W|R     TRUE     -
//     %%BIT    MMD06       27      24     0     W|R     TRUE     -
//     %%BIT    MMD05       23      20     0     W|R     TRUE     -
//     %%BIT    MMD04       19      16     0     W|R     TRUE     -
//     %%BIT    MMD03       15      12     0     W|R     TRUE     -
//     %%BIT    MMD02       11      8      0     W|R     TRUE     -
//     %%BIT    MMD01       7       4      0     W|R     TRUE     -
//     %%BIT    MMD00       3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCRO0
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMDO015       31     30     0     W|R     TRUE     -
//     %%BIT    MMDO014       29     28     0     W|R     TRUE     -
//     %%BIT    MMDO013       27     26     0     W|R     TRUE     -
//     %%BIT    MMDO012       25     24     0     W|R     TRUE     -
//     %%BIT    MMDO011       23     22     0     W|R     TRUE     -
//     %%BIT    MMDO010       21     20     0     W|R     TRUE     -
//     %%BIT    MMDO09        19     18     0     W|R     TRUE     -
//     %%BIT    MMDO08        17     16     0     W|R     TRUE     -
//     %%BIT    MMDO07        15     14     0     W|R     TRUE     -
//     %%BIT    MMDO06        13     12     0     W|R     TRUE     -
//     %%BIT    MMDO05        11     10     0     W|R     TRUE     -
//     %%BIT    MMDO04        9      8      0     W|R     TRUE     -
//     %%BIT    MMDO03        7      6      0     W|R     TRUE     -
//     %%BIT    MMDO02        5      4      0     W|R     TRUE     -
//     %%BIT    MMDO01        3      2      0     W|R     TRUE     -
//     %%BIT    MMDO00        1      0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR1H
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD115       31      28     0     W|R     TRUE     -
//     %%BIT    MMD114       27      24     0     W|R     TRUE     -
//     %%BIT    MMD113       23      20     0     W|R     TRUE     -
//     %%BIT    MMD112       19      16     0     W|R     TRUE     -
//     %%BIT    MMD111       15      12     0     W|R     TRUE     -
//     %%BIT    MMD110       11      8      0     W|R     TRUE     -
//     %%BIT    MMD19        7       4      0     W|R     TRUE     -
//     %%BIT    MMD18        3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR1L
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD17       31      28     0     W|R     TRUE     -
//     %%BIT    MMD16       27      24     0     W|R     TRUE     -
//     %%BIT    MMD15       23      20     0     W|R     TRUE     -
//     %%BIT    MMD14       19      16     0     W|R     TRUE     -
//     %%BIT    MMD13       15      12     0     W|R     TRUE     -
//     %%BIT    MMD12       11      8      0     W|R     TRUE     -
//     %%BIT    MMD11       7       4      0     W|R     TRUE     -
//     %%BIT    MMD10       3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCRO1
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMDO115       31     30     0     W|R     TRUE     -
//     %%BIT    MMDO114       29     28     0     W|R     TRUE     -
//     %%BIT    MMDO113       27     26     0     W|R     TRUE     -
//     %%BIT    MMDO112       25     24     0     W|R     TRUE     -
//     %%BIT    MMDO111       23     22     0     W|R     TRUE     -
//     %%BIT    MMDO110       21     20     0     W|R     TRUE     -
//     %%BIT    MMDO19        19     18     0     W|R     TRUE     -
//     %%BIT    MMDO18        17     16     0     W|R     TRUE     -
//     %%BIT    MMDO17        15     14     0     W|R     TRUE     -
//     %%BIT    MMDO16        13     12     0     W|R     TRUE     -
//     %%BIT    MMDO15        11     10     0     W|R     TRUE     -
//     %%BIT    MMDO14        9      8      0     W|R     TRUE     -
//     %%BIT    MMDO13        7      6      0     W|R     TRUE     -
//     %%BIT    MMDO12        5      4      0     W|R     TRUE     -
//     %%BIT    MMDO11        3      2      0     W|R     TRUE     -
//     %%BIT    MMDO10        1      0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR2H
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD215       31      28     0     W|R     TRUE     -
//     %%BIT    MMD214       27      24     0     W|R     TRUE     -
//     %%BIT    MMD213       23      20     0     W|R     TRUE     -
//     %%BIT    MMD212       19      16     0     W|R     TRUE     -
//     %%BIT    MMD211       15      12     0     W|R     TRUE     -
//     %%BIT    MMD210       11      8      0     W|R     TRUE     -
//     %%BIT    MMD29        7       4      0     W|R     TRUE     -
//     %%BIT    MMD28        3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR2L
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD27       31      28     0     W|R     TRUE     -
//     %%BIT    MMD26       27      24     0     W|R     TRUE     -
//     %%BIT    MMD25       23      20     0     W|R     TRUE     -
//     %%BIT    MMD24       19      16     0     W|R     TRUE     -
//     %%BIT    MMD23       15      12     0     W|R     TRUE     -
//     %%BIT    MMD22       11      8      0     W|R     TRUE     -
//     %%BIT    MMD21       7       4      0     W|R     TRUE     -
//     %%BIT    MMD20       3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCRO2
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMDO215       31     30     0     W|R     TRUE     -
//     %%BIT    MMDO214       29     28     0     W|R     TRUE     -
//     %%BIT    MMDO213       27     26     0     W|R     TRUE     -
//     %%BIT    MMDO212       25     24     0     W|R     TRUE     -
//     %%BIT    MMDO211       23     22     0     W|R     TRUE     -
//     %%BIT    MMDO210       21     20     0     W|R     TRUE     -
//     %%BIT    MMDO29        19     18     0     W|R     TRUE     -
//     %%BIT    MMDO28        17     16     0     W|R     TRUE     -
//     %%BIT    MMDO27        15     14     0     W|R     TRUE     -
//     %%BIT    MMDO26        13     12     0     W|R     TRUE     -
//     %%BIT    MMDO25        11     10     0     W|R     TRUE     -
//     %%BIT    MMDO24        9      8      0     W|R     TRUE     -
//     %%BIT    MMDO23        7      6      0     W|R     TRUE     -
//     %%BIT    MMDO22        5      4      0     W|R     TRUE     -
//     %%BIT    MMDO21        3      2      0     W|R     TRUE     -
//     %%BIT    MMDO20        1      0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR3H
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD315       31      28     0     W|R     TRUE     -
//     %%BIT    MMD314       27      24     0     W|R     TRUE     -
//     %%BIT    MMD313       23      20     0     W|R     TRUE     -
//     %%BIT    MMD312       19      16     0     W|R     TRUE     -
//     %%BIT    MMD311       15      12     0     W|R     TRUE     -
//     %%BIT    MMD310       11      8      0     W|R     TRUE     -
//     %%BIT    MMD39        7       4      0     W|R     TRUE     -
//     %%BIT    MMD38        3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCR3L
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMD37       31      28     0     W|R     TRUE     -
//     %%BIT    MMD36       27      24     0     W|R     TRUE     -
//     %%BIT    MMD35       23      20     0     W|R     TRUE     -
//     %%BIT    MMD34       19      16     0     W|R     TRUE     -
//     %%BIT    MMD33       15      12     0     W|R     TRUE     -
//     %%BIT    MMD32       11      8      0     W|R     TRUE     -
//     %%BIT    MMD31       7       4      0     W|R     TRUE     -
//     %%BIT    MMD30       3       0      0     W|R     TRUE     -
// 
// %REG_NAME RHSBGCRO3
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    MMDO315       31     30     0     W|R     TRUE     -
//     %%BIT    MMDO314       29     28     0     W|R     TRUE     -
//     %%BIT    MMDO313       27     26     0     W|R     TRUE     -
//     %%BIT    MMDO312       25     24     0     W|R     TRUE     -
//     %%BIT    MMDO311       23     22     0     W|R     TRUE     -
//     %%BIT    MMDO310       21     20     0     W|R     TRUE     -
//     %%BIT    MMDO39        19     18     0     W|R     TRUE     -
//     %%BIT    MMDO38        17     16     0     W|R     TRUE     -
//     %%BIT    MMDO37        15     14     0     W|R     TRUE     -
//     %%BIT    MMDO36        13     12     0     W|R     TRUE     -
//     %%BIT    MMDO35        11     10     0     W|R     TRUE     -
//     %%BIT    MMDO34        9      8      0     W|R     TRUE     -
//     %%BIT    MMDO33        7      6      0     W|R     TRUE     -
//     %%BIT    MMDO32        5      4      0     W|R     TRUE     -
//     %%BIT    MMDO31        3      2      0     W|R     TRUE     -
//     %%BIT    MMDO30        1      0      0     W|R     TRUE     -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file rhsb_xbar_regif.h
/// @brief Register IF class of model RHSB_XBAR
/// $Id: rhsb_xbar_regif.h 1339 2019-11-14 09:01:36Z chuonghoangle $
/// $Date: 2019-11-14 18:01:36 +0900 (2019/11/14 (木)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#ifndef __RHSB_XBAR_REGIF_H__
#define __RHSB_XBAR_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of RHSB_XBAR model
class Crhsb_xbar_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Crhsb_xbar_regif(std::string name, uint buswidth);
    ~Crhsb_xbar_regif();

protected:
    vpcl::re_register *RHSBGCR0H;
    vpcl::re_register *RHSBGCR0L;
    vpcl::re_register *RHSBGCRO0;
    vpcl::re_register *RHSBGCR1H;
    vpcl::re_register *RHSBGCR1L;
    vpcl::re_register *RHSBGCRO1;
    vpcl::re_register *RHSBGCR2H;
    vpcl::re_register *RHSBGCR2L;
    vpcl::re_register *RHSBGCRO2;
    vpcl::re_register *RHSBGCR3H;
    vpcl::re_register *RHSBGCR3L;
    vpcl::re_register *RHSBGCRO3;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_RHSBGCR0H;
    scml2::reg<uint> *CW_RHSBGCR0L;
    scml2::reg<uint> *CW_RHSBGCRO0;
    scml2::reg<uint> *CW_RHSBGCR1H;
    scml2::reg<uint> *CW_RHSBGCR1L;
    scml2::reg<uint> *CW_RHSBGCRO1;
    scml2::reg<uint> *CW_RHSBGCR2H;
    scml2::reg<uint> *CW_RHSBGCR2L;
    scml2::reg<uint> *CW_RHSBGCRO2;
    scml2::reg<uint> *CW_RHSBGCR3H;
    scml2::reg<uint> *CW_RHSBGCR3L;
    scml2::reg<uint> *CW_RHSBGCRO3;
    #endif

    uint RHSBGCR0H_MMD015;
    uint RHSBGCR0H_MMD014;
    uint RHSBGCR0H_MMD013;
    uint RHSBGCR0H_MMD012;
    uint RHSBGCR0H_MMD011;
    uint RHSBGCR0H_MMD010;
    uint RHSBGCR0H_MMD09;
    uint RHSBGCR0H_MMD08;
    uint RHSBGCR0L_MMD07;
    uint RHSBGCR0L_MMD06;
    uint RHSBGCR0L_MMD05;
    uint RHSBGCR0L_MMD04;
    uint RHSBGCR0L_MMD03;
    uint RHSBGCR0L_MMD02;
    uint RHSBGCR0L_MMD01;
    uint RHSBGCR0L_MMD00;
    uint RHSBGCRO0_MMDO015;
    uint RHSBGCRO0_MMDO014;
    uint RHSBGCRO0_MMDO013;
    uint RHSBGCRO0_MMDO012;
    uint RHSBGCRO0_MMDO011;
    uint RHSBGCRO0_MMDO010;
    uint RHSBGCRO0_MMDO09;
    uint RHSBGCRO0_MMDO08;
    uint RHSBGCRO0_MMDO07;
    uint RHSBGCRO0_MMDO06;
    uint RHSBGCRO0_MMDO05;
    uint RHSBGCRO0_MMDO04;
    uint RHSBGCRO0_MMDO03;
    uint RHSBGCRO0_MMDO02;
    uint RHSBGCRO0_MMDO01;
    uint RHSBGCRO0_MMDO00;
    uint RHSBGCR1H_MMD115;
    uint RHSBGCR1H_MMD114;
    uint RHSBGCR1H_MMD113;
    uint RHSBGCR1H_MMD112;
    uint RHSBGCR1H_MMD111;
    uint RHSBGCR1H_MMD110;
    uint RHSBGCR1H_MMD19;
    uint RHSBGCR1H_MMD18;
    uint RHSBGCR1L_MMD17;
    uint RHSBGCR1L_MMD16;
    uint RHSBGCR1L_MMD15;
    uint RHSBGCR1L_MMD14;
    uint RHSBGCR1L_MMD13;
    uint RHSBGCR1L_MMD12;
    uint RHSBGCR1L_MMD11;
    uint RHSBGCR1L_MMD10;
    uint RHSBGCRO1_MMDO115;
    uint RHSBGCRO1_MMDO114;
    uint RHSBGCRO1_MMDO113;
    uint RHSBGCRO1_MMDO112;
    uint RHSBGCRO1_MMDO111;
    uint RHSBGCRO1_MMDO110;
    uint RHSBGCRO1_MMDO19;
    uint RHSBGCRO1_MMDO18;
    uint RHSBGCRO1_MMDO17;
    uint RHSBGCRO1_MMDO16;
    uint RHSBGCRO1_MMDO15;
    uint RHSBGCRO1_MMDO14;
    uint RHSBGCRO1_MMDO13;
    uint RHSBGCRO1_MMDO12;
    uint RHSBGCRO1_MMDO11;
    uint RHSBGCRO1_MMDO10;
    uint RHSBGCR2H_MMD215;
    uint RHSBGCR2H_MMD214;
    uint RHSBGCR2H_MMD213;
    uint RHSBGCR2H_MMD212;
    uint RHSBGCR2H_MMD211;
    uint RHSBGCR2H_MMD210;
    uint RHSBGCR2H_MMD29;
    uint RHSBGCR2H_MMD28;
    uint RHSBGCR2L_MMD27;
    uint RHSBGCR2L_MMD26;
    uint RHSBGCR2L_MMD25;
    uint RHSBGCR2L_MMD24;
    uint RHSBGCR2L_MMD23;
    uint RHSBGCR2L_MMD22;
    uint RHSBGCR2L_MMD21;
    uint RHSBGCR2L_MMD20;
    uint RHSBGCRO2_MMDO215;
    uint RHSBGCRO2_MMDO214;
    uint RHSBGCRO2_MMDO213;
    uint RHSBGCRO2_MMDO212;
    uint RHSBGCRO2_MMDO211;
    uint RHSBGCRO2_MMDO210;
    uint RHSBGCRO2_MMDO29;
    uint RHSBGCRO2_MMDO28;
    uint RHSBGCRO2_MMDO27;
    uint RHSBGCRO2_MMDO26;
    uint RHSBGCRO2_MMDO25;
    uint RHSBGCRO2_MMDO24;
    uint RHSBGCRO2_MMDO23;
    uint RHSBGCRO2_MMDO22;
    uint RHSBGCRO2_MMDO21;
    uint RHSBGCRO2_MMDO20;
    uint RHSBGCR3H_MMD315;
    uint RHSBGCR3H_MMD314;
    uint RHSBGCR3H_MMD313;
    uint RHSBGCR3H_MMD312;
    uint RHSBGCR3H_MMD311;
    uint RHSBGCR3H_MMD310;
    uint RHSBGCR3H_MMD39;
    uint RHSBGCR3H_MMD38;
    uint RHSBGCR3L_MMD37;
    uint RHSBGCR3L_MMD36;
    uint RHSBGCR3L_MMD35;
    uint RHSBGCR3L_MMD34;
    uint RHSBGCR3L_MMD33;
    uint RHSBGCR3L_MMD32;
    uint RHSBGCR3L_MMD31;
    uint RHSBGCR3L_MMD30;
    uint RHSBGCRO3_MMDO315;
    uint RHSBGCRO3_MMDO314;
    uint RHSBGCRO3_MMDO313;
    uint RHSBGCRO3_MMDO312;
    uint RHSBGCRO3_MMDO311;
    uint RHSBGCRO3_MMDO310;
    uint RHSBGCRO3_MMDO39;
    uint RHSBGCRO3_MMDO38;
    uint RHSBGCRO3_MMDO37;
    uint RHSBGCRO3_MMDO36;
    uint RHSBGCRO3_MMDO35;
    uint RHSBGCRO3_MMDO34;
    uint RHSBGCRO3_MMDO33;
    uint RHSBGCRO3_MMDO32;
    uint RHSBGCRO3_MMDO31;
    uint RHSBGCRO3_MMDO30;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);


    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Crhsb_xbar_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Crhsb_xbar_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__RHSB_XBAR_REG_DEF_H__
