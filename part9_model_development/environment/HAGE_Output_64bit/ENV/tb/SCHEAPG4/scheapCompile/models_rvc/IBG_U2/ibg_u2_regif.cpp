// -----------------------------------------------------------------------------
// $Id: ibg_u2_regif.cpp,v 1.3 2020/02/26 06:51:33 duongphan Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : /home/truongvv2/RHSIF/GenSrc/ibg_input/ibg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE IBG_U2
//     # the IBG_U2 contains 4 parts of registers with base addresses
//     #    32'hFFC6_A000 BARR
//     # consider these part as a continous range, the range of the whole IBG_U2
//     # becomes from 32'hFFC6_A000 to 32'hFFC6_A1FF, with base address 
//     # is 32'hFFC6_A000 and offset part specifies the range from 0x000 to 0x1FF
//     # size of offset part (0x1FF = 9'b111111111) should be 9 bit
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// %REG_CHANNEL reg_def
// #######################################################################################################################################################
// #  Module Name  Register Name                               Symbol                  Address                               Access      Access Protection
// #  GUARD_BARR  Guard Error Overflow Clear Register          GOVFCLR                 <GUARD_base> + 00H                    8|32
// #              Guard Error Overflow Status Register         GOVFSTAT                <GUARD_base> + 04H                    8|32
// #              Guard Error Address Register                 GERRADDR                <GUARD_base> + 08H                    32
// #              Guard Error Access Information Register      GERRTYPE                <GUARD_base> + 0CH                    16|32
// #              Guard Error SPID Error Clear Register        GSPIDERRCLR             <GUARD_base> + 10H                    32
// #              Guard Error SPID Error  Status Register      GSPIDERRSTAT            <GUARD_base> + 14H                    32
// #              Guard Key Code Protection Register           GKCPROT                 <GUARD_base> + 18H                    32
// #              Guard Protection Control Register            GPROT0_n (n = 0-16)     <GUARD_base> + 80H  + (n*08H)         8|16|32     GKCPROT
// #              Guard SPID Setting Register                  GPROT1_n (n = 0-16)     <GUARD_base> + 84H  + (n*08H)         8|16|32     GKCPROT
// #######################################################################################################################################################
// %%TITLE    name          reg_name      wsize     rsize      length    offset    factor_start    factor_end    factor_index    factor_step    access     init             support     callback
// %%REG      GOVFCLR       GOVFCLR       8|32      8|16|32    32        0x000     -               -             -               -              R|W1:0     0x00000000       TRUE        -
// %%REG      GOVFSTAT      GOVFSTAT      8|32      8|16|32    32        0x004     -               -             -               -              R          0x00000000       TRUE        -
// %%REG      GERRADDR      GERRADDR      32        8|16|32    32        0x008     -               -             -               -              R          0x00000000       TRUE        -
// %%REG      GERRTYPE      GERRTYPE      16|32     8|16|32    32        0x00C     -               -             -               -              R          0x00000000       TRUE        -
// %%REG      GSPIDERRCLR   GSPIDERRCLR   32        8|16|32    32        0x010     -               -             -               -              R|W1:0     0x00000000       TRUE        -
// %%REG      GSPIDERRSTAT  GSPIDERRSTAT  32        8|16|32    32        0x014     -               -             -               -              R          0x00000000       TRUE        -
// %%REG      GKCPROT       GKCPROT       32        8|16|32    32        0x018     -               -             -               -              R|W        0x00000000       TRUE        -
// %%REG      GPROT0        GPROT0_       8|16|32   8|16|32    32        0x080     0               16            -               0x08           R|W        0x00000000       TRUE        -
// %%REG      GPROT1        GPROT1_       8|16|32   8|16|32    32        0x084     0               16            -               0x08           R|W        0x00000000       TRUE        -
// 
// #-------------------------------------------------------------------------------
// # Guard Error Overflow Clear Register
// #-------------------------------------------------------------------------------
// %REG_NAME GOVFCLR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CLRO    1        1        0       R|W1:0    TRUE       W
// 
// #-------------------------------------------------------------------------------
// #  Guard Error Overflow Status Register
// #-------------------------------------------------------------------------------
// %REG_NAME GOVFSTAT
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      OVF     1        1        0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard Error Address Register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRADDR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      ADDR    31       0        0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard Error Access Information Register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRTYPE
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      WRITE   0        0        0       R         TRUE       -
// %%BIT      SPID    10       6        0       R         TRUE       -
// %%BIT      UM      11       11       0       R         TRUE       -
// %%BIT      DBG     12       12       0       R         TRUE       -
// %%BIT      SEC     13       13       0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard Error SPID Error Clear Register
// #-------------------------------------------------------------------------------
// %REG_NAME GSPIDERRCLR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      SPIDCLR 31       0        0       R|W1:0    TRUE       W
// 
// #-------------------------------------------------------------------------------
// #  Guard Error SPID Error  Status Register
// #-------------------------------------------------------------------------------
// %REG_NAME GSPIDERRSTAT
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      SPIDERR 31       0        0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard Key Code Protection Register
// #-------------------------------------------------------------------------------
// %REG_NAME GKCPROT
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      KCE     0        0        0       R|W       TRUE       W
// %%BIT      KCPROT  31       1        0       R|W1:0    TRUE       -
// 
// 
// #-------------------------------------------------------------------------------
// #  Guard Protection Control Register
// #-------------------------------------------------------------------------------
// %REG_NAME GPROT0
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      RG      0        0        0       R|W       TRUE       W
// %%BIT      WG      1        1        0       R|W       TRUE       -
// %%BIT      UM      4        4        0       R|W       TRUE       -
// %%BIT      DBG     6        6        0       R|W       TRUE       -
// %%BIT      GEN     8        8        0       R|W       TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard SPID Setting Register
// #-------------------------------------------------------------------------------
// %REG_NAME GPROT1
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      SPID    31       0        0       R|W       TRUE       W
// 
// #######################################################################################################################################################
// # vim:nowrap
// #######################################################################################################################################################
////////////////////////////////////////////////////////////////////////////////
/// @file ibg_u2_regif.cpp
/// @brief Register IF class of model IBG_U2
/// $Id: ibg_u2_regif.cpp,v 1.3 2020/02/26 06:51:33 duongphan Exp $
/// $Date: 2020/02/26 06:51:33 $
/// $Revison$
/// $Author: duongphan $
////////////////////////////////////////////////////////////////////////////////
#include "ibg_u2_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cibg_u2_regif::Cibg_u2_regif(std::string name, uint buswidth, uint ichanNum)
    :vpcl::reg_super()
    ,chanNum(ichanNum)
    ,strModelName(name)
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x108/4))
    #endif
{
    CommandInit();
    GOVFCLR      = new vpcl::re_register(0x0000, this, "GOVFCLR"     , name.c_str());
    GOVFSTAT     = new vpcl::re_register(0x0004, this, "GOVFSTAT"    , name.c_str());
    GERRADDR     = new vpcl::re_register(0x0008, this, "GERRADDR"    , name.c_str());
    GERRTYPE     = new vpcl::re_register(0x000C, this, "GERRTYPE"    , name.c_str());
    GSPIDERRCLR  = new vpcl::re_register(0x0010, this, "GSPIDERRCLR" , name.c_str());
    GSPIDERRSTAT = new vpcl::re_register(0x0014, this, "GSPIDERRSTAT", name.c_str());
    GKCPROT      = new vpcl::re_register(0x0018, this, "GKCPROT"     , name.c_str());
    std::ostringstream str_tmp;

    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            GPROT0      [i] = new vpcl::re_register((0x0080) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            GPROT1      [i] = new vpcl::re_register((0x0084) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        // Inititial common channels
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 8;
        GPROT0      [8] = new vpcl::re_register((0x0080) + 8*8, this, str_tmp.str(), strModelName.c_str());    
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 8;
        GPROT1      [8] = new vpcl::re_register((0x0084) + 8*8, this, str_tmp.str(), strModelName.c_str());
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            GPROT0      [i] = new vpcl::re_register((0x0080) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            GPROT1      [i] = new vpcl::re_register((0x0084) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        
        // Inititial common channels
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 16;
        GPROT0      [16] = new vpcl::re_register((0x0080) + 8*16, this, str_tmp.str(), strModelName.c_str());
            
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 16;
        GPROT1      [16] = new vpcl::re_register((0x0084) + 8*16, this, str_tmp.str(), strModelName.c_str());
    }
    else if (strModelName == "IBG_U2_TPTG") {
        // Inititial channels which its index is smaller 4
        for(uint i = 0; i < ichanNum-2; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            GPROT0      [i] = new vpcl::re_register((0x0080) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        for(uint i = 0; i < ichanNum-2; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            GPROT1      [i] = new vpcl::re_register((0x0084) + 8*i, this, str_tmp.str(), strModelName.c_str());
        }
        
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 8;
        GPROT0      [8] = new vpcl::re_register((0x0080) + 8*8, this, str_tmp.str(), strModelName.c_str());
        
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 8;
        GPROT1      [8] = new vpcl::re_register((0x0084) + 8*8, this, str_tmp.str(), strModelName.c_str());
        
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 9;
        GPROT0      [9] = new vpcl::re_register((0x0080) + 8*9, this, str_tmp.str(), strModelName.c_str());
        
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 9;
        GPROT1      [9] = new vpcl::re_register((0x0084) + 8*9, this, str_tmp.str(), strModelName.c_str());

    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1;     i++) {
            mRegMap[(0x0080)     + i*8 ] = index;
            mRegMap[(0x0080 + 1) + i*8 ] = index;
            mRegMap[(0x0080 + 2) + i*8 ] = index;
            mRegMap[(0x0080 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0080)     + 8*8 ] = index;
        mRegMap[(0x0080 + 1) + 8*8 ] = index;
        mRegMap[(0x0080 + 2) + 8*8 ] = index;
        mRegMap[(0x0080 + 3) + 8*8 ] = index++;
        for(uint i = 0; i < ichanNum-1;     i++) {
            mRegMap[(0x0084)     + i*8 ] = index;
            mRegMap[(0x0084 + 1) + i*8 ] = index;
            mRegMap[(0x0084 + 2) + i*8 ] = index;
            mRegMap[(0x0084 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0084)     + 8*8 ] = index;
        mRegMap[(0x0084 + 1) + 8*8 ] = index;
        mRegMap[(0x0084 + 2) + 8*8 ] = index;
        mRegMap[(0x0084 + 3) + 8*8 ] = index++;
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1;     i++) {
            mRegMap[(0x0080)     + i*8 ] = index;
            mRegMap[(0x0080 + 1) + i*8 ] = index;
            mRegMap[(0x0080 + 2) + i*8 ] = index;
            mRegMap[(0x0080 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0080)     + 16*8 ] = index;
        mRegMap[(0x0080 + 1) + 16*8 ] = index;
        mRegMap[(0x0080 + 2) + 16*8 ] = index;
        mRegMap[(0x0080 + 3) + 16*8 ] = index++;
        for(uint i = 0; i < ichanNum-1;     i++) {
            mRegMap[(0x0084)     + i*8 ] = index;
            mRegMap[(0x0084 + 1) + i*8 ] = index;
            mRegMap[(0x0084 + 2) + i*8 ] = index;
            mRegMap[(0x0084 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0084)     + 16*8 ] = index;
        mRegMap[(0x0084 + 1) + 16*8 ] = index;
        mRegMap[(0x0084 + 2) + 16*8 ] = index;
        mRegMap[(0x0084 + 3) + 16*8 ] = index++;
        
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < ichanNum-2;     i++) {
            mRegMap[(0x0080)     + i*8 ] = index;
            mRegMap[(0x0080 + 1) + i*8 ] = index;
            mRegMap[(0x0080 + 2) + i*8 ] = index;
            mRegMap[(0x0080 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0080)     + 8*8 ] = index;
        mRegMap[(0x0080 + 1) + 8*8 ] = index;
        mRegMap[(0x0080 + 2) + 8*8 ] = index;
        mRegMap[(0x0080 + 3) + 8*8 ] = index++;
        mRegMap[(0x0080)     + 9*8 ] = index;
        mRegMap[(0x0080 + 1) + 9*8 ] = index;
        mRegMap[(0x0080 + 2) + 9*8 ] = index;
        mRegMap[(0x0080 + 3) + 9*8 ] = index++;
        for(uint i = 0; i < ichanNum-2;     i++) {
            mRegMap[(0x0084)     + i*8 ] = index;
            mRegMap[(0x0084 + 1) + i*8 ] = index;
            mRegMap[(0x0084 + 2) + i*8 ] = index;
            mRegMap[(0x0084 + 3) + i*8 ] = index++;
        }
        mRegMap[(0x0084)     + 8*8 ] = index;
        mRegMap[(0x0084 + 1) + 8*8 ] = index;
        mRegMap[(0x0084 + 2) + 8*8 ] = index;
        mRegMap[(0x0084 + 3) + 8*8 ] = index++;
        mRegMap[(0x0084)     + 9*8 ] = index;
        mRegMap[(0x0084 + 1) + 9*8 ] = index;
        mRegMap[(0x0084 + 2) + 9*8 ] = index;
        mRegMap[(0x0084 + 3) + 9*8 ] = index++;
        
    }
    else{
    index += 32;
    //re_printf("error", "The module name %s is not supported\n", strModelName.c_str());

    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_GOVFCLR       , GOVFCLR->name()     , GOVFCLR->addr()     );
    cw_instantiate_reg(CW_GOVFSTAT      , GOVFSTAT->name()    , GOVFSTAT->addr()    );
    cw_instantiate_reg(CW_GERRADDR      , GERRADDR->name()    , GERRADDR->addr()    );
    cw_instantiate_reg(CW_GERRTYPE      , GERRTYPE->name()    , GERRTYPE->addr()    );
    cw_instantiate_reg(CW_GSPIDERRCLR   , GSPIDERRCLR->name() , GSPIDERRCLR->addr() );
    cw_instantiate_reg(CW_GSPIDERRSTAT  , GSPIDERRSTAT->name(), GSPIDERRSTAT->addr());
    cw_instantiate_reg(CW_GKCPROT       , GKCPROT->name()     , GKCPROT->addr()     );
    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1     ; i++) cw_instantiate_reg(CW_GPROT0        [i], GPROT0      [i]->name(), GPROT0      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT0        [8], GPROT0      [8]->name(), GPROT0      [8]->addr());
        for(uint i = 0; i < ichanNum-1     ; i++) cw_instantiate_reg(CW_GPROT1        [i], GPROT1      [i]->name(), GPROT1      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT1        [8], GPROT1      [8]->name(), GPROT1      [8]->addr());
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1     ; i++) cw_instantiate_reg(CW_GPROT0        [i], GPROT0      [i]->name(), GPROT0      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT0        [16], GPROT0     [16]->name(), GPROT0     [16]->addr());
        for(uint i = 0; i < ichanNum-1     ; i++) cw_instantiate_reg(CW_GPROT1        [i], GPROT1      [i]->name(), GPROT1      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT1        [16], GPROT1     [16]->name(), GPROT1     [16]->addr());
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < ichanNum-2     ; i++) cw_instantiate_reg(CW_GPROT0        [i], GPROT0      [i]->name(), GPROT0      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT0        [8], GPROT0      [8]->name(), GPROT0      [8]->addr());
                                                cw_instantiate_reg(CW_GPROT0        [9], GPROT0      [9]->name(), GPROT0      [9]->addr());
        for(uint i = 0; i < ichanNum-2     ; i++) cw_instantiate_reg(CW_GPROT1        [i], GPROT1      [i]->name(), GPROT1      [i]->addr());
                                                cw_instantiate_reg(CW_GPROT1        [8], GPROT1      [8]->name(), GPROT1      [8]->addr());
                                                cw_instantiate_reg(CW_GPROT1        [9], GPROT1      [9]->name(), GPROT1      [9]->addr());
    }
    #endif
    mCurReg = mRegArray[index++] = new SRegList(GOVFCLR       , mCurReg, 0,  4,    "8|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GOVFSTAT      , mCurReg, 0,  4,    "8|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GERRADDR      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GERRTYPE      , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GSPIDERRCLR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GSPIDERRSTAT  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(GKCPROT       , mCurReg, 0,  4,      "32", "8|16|32");

    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT0        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT0        [8], mCurReg, 8,  4, "8|16|32", "8|16|32");
        for(uint i = 0; i < ichanNum-1     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT1        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT1        [8], mCurReg, 8,  4, "8|16|32", "8|16|32");
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT0        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT0        [16], mCurReg, 16,  4, "8|16|32", "8|16|32");
        for(uint i = 0; i < ichanNum-1     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT1        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT1        [16], mCurReg, 16,  4, "8|16|32", "8|16|32");
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < ichanNum-2     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT0        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT0        [8], mCurReg, 8,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT0        [9], mCurReg, 9,  4, "8|16|32", "8|16|32");
        for(uint i = 0; i < ichanNum-2     ; i++) mCurReg = mRegArray[index++] = new SRegList(GPROT1        [i], mCurReg, i,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT1        [8], mCurReg, 8,  4, "8|16|32", "8|16|32");
                                                mCurReg = mRegArray[index++] = new SRegList(GPROT1        [9], mCurReg, 9,  4, "8|16|32", "8|16|32");
    }

    mRegList = mCurReg;

    (*GOVFCLR       ) ( 1,  1, "CLRO"    , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*GOVFSTAT      ) ( 1,  1, "OVF"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRADDR      ) (31,  0, "ADDR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRTYPE      ) ( 0,  0, "WRITE"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRTYPE      ) (10,  6, "SPID"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRTYPE      ) (11, 11, "UM"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRTYPE      ) (12, 12, "DBG"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GERRTYPE      ) (13, 13, "SEC"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GSPIDERRCLR   ) (31,  0, "SPIDCLR" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*GSPIDERRSTAT  ) (31,  0, "SPIDERR" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*GKCPROT       ) ( 0,  0, "KCE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*GKCPROT       ) (31,  1, "KCPROT"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            (*GPROT0        [i]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT0        [8]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        for(uint i = 0; i < ichanNum-1; i++) {
            (*GPROT1        [i]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT1        [8]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            (*GPROT0        [i]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT0        [16]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [16]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [16]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [16]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [16]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        for(uint i = 0; i < ichanNum-1; i++) {
            (*GPROT1        [i]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT1        [16]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < ichanNum-2; i++) {
            (*GPROT0        [i]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
            (*GPROT0        [i]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT0        [8]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [8]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [9]) ( 0,  0, "RG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [9]) ( 1,  1, "WG"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [9]) ( 4,  4, "UM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [9]) ( 6,  6, "DBG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT0        [9]) ( 8,  8, "GEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        for(uint i = 0; i < ichanNum-2; i++) {
            (*GPROT1        [i]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        }
        (*GPROT1        [8]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*GPROT1        [9]) (31,  0, "SPID"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;
    
    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }
    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["GOVFCLR"   ]["CLRO"      ] = &Cibg_u2_regif::cb_GOVFCLR_CLRO;
    mWrCbAPI["GSPIDERRCLR"]["SPIDCLR"   ] = &Cibg_u2_regif::cb_GSPIDERRCLR_SPIDCLR;
    mWrCbAPI["GKCPROT"   ]["KCE"       ] = &Cibg_u2_regif::cb_GKCPROT_KCE;
    
    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        }
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
        }
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 8;
        mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 8;
        mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        }
        for(uint i = 0; i < ichanNum-1; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
        }
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 16;
        mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 16;
        mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < ichanNum-2; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT0_"<< i;
            mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        }
        for(uint i = 0; i < ichanNum-2; i++) {
            str_tmp.str("");
            str_tmp<<"GPROT1_"<< i;
            mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
        }
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 8;
        mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 8;
        mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
        str_tmp.str("");
        str_tmp<<"GPROT0_"<< 9;
        mWrCbAPI[str_tmp.str()]["RG"] = &Cibg_u2_regif::cb_GPROT0_RG;
        str_tmp.str("");
        str_tmp<<"GPROT1_"<< 9;
        mWrCbAPI[str_tmp.str()]["SPID"] = &Cibg_u2_regif::cb_GPROT1_SPID;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cibg_u2_regif::~Cibg_u2_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cibg_u2_regif::uint Cibg_u2_regif::bit_select(
                           cuint val,    ///< [in] Writting address
                           cuint start,  ///< [in] start bit position
                           cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cibg_u2_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                           const unsigned char *p_data,   ///< [in] Writing data
                           cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cibg_u2_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                           unsigned char *p_data,   ///< [out] Reading data
                           cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cibg_u2_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                               const unsigned char *p_data,   ///< [in] Writing data
                               cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cibg_u2_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                               unsigned char *p_data,   ///< [out] Reading data
                               cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cibg_u2_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                   const unsigned char *p_data,  ///< [in] Writing data
                                   cuint size,                   ///< [in] Data size (byte)
                                   bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cibg_u2_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                   unsigned char *p_data,   ///< [out] Reading data
                                   cuint size,              ///< [in]  Data size (byte)
                                   bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cibg_u2_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                unsigned char *p_data,          ///< [out] Reading data
                                cuint size,                     ///< [in]  Data size (byte)
                                cuint reg_index,                ///< [in] Register index
                                bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cibg_u2_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                const unsigned char *p_data,      ///< [in] Writing data
                                cuint size,                       ///< [in] Data size (byte)
                                cuint reg_index,                  ///< [in] Register index
                                bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cibg_u2_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cibg_u2_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cibg_u2_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cibg_u2_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cibg_u2_regif::InitLocalVal()
{
    // Initialize local variables
    GOVFCLR_CLRO = 0x0;
    GOVFSTAT_OVF = 0x0;
    GERRADDR_ADDR = 0x0;
    GERRTYPE_WRITE = 0x0;
    GERRTYPE_SPID = 0x0;
    GERRTYPE_UM  = 0x0;
    GERRTYPE_DBG = 0x0;
    GERRTYPE_SEC = 0x0;
    GSPIDERRCLR_SPIDCLR = 0x0;
    GSPIDERRSTAT_SPIDERR = 0x0;
    GKCPROT_KCE  = 0x0;
    GKCPROT_KCPROT = 0x0;
    if (strModelName == "IBG_U2_IPIG") {
        for(uint i = 0; i < chanNum-1;     i++) {
            GPROT0_RG   [i] = 0x0;
            GPROT0_WG   [i] = 0x0;
            GPROT0_UM   [i] = 0x0;
            GPROT0_DBG  [i] = 0x0;
            GPROT0_GEN  [i] = 0x0;
        }
        GPROT0_RG   [8] = 0x0;
        GPROT0_WG   [8] = 0x0;
        GPROT0_UM   [8] = 0x0;
        GPROT0_DBG  [8] = 0x0;
        GPROT0_GEN  [8] = 0x0;
        for(uint i = 0; i < chanNum-1;     i++) {
            GPROT1_SPID [i] = 0x0;
        }
        GPROT1_SPID [8] = 0x0;
    }
    else if (strModelName == "IBG_U2_BRG") {
        for(uint i = 0; i < chanNum-1;     i++) {
            GPROT0_RG   [i] = 0x0;
            GPROT0_WG   [i] = 0x0;
            GPROT0_UM   [i] = 0x0;
            GPROT0_DBG  [i] = 0x0;
            GPROT0_GEN  [i] = 0x0;
        }
        GPROT0_RG   [16] = 0x0;
        GPROT0_WG   [16] = 0x0;
        GPROT0_UM   [16] = 0x0;
        GPROT0_DBG  [16] = 0x0;
        GPROT0_GEN  [16] = 0x0;
        for(uint i = 0; i < chanNum-1;     i++) {
            GPROT1_SPID [i] = 0x0;
        }
        GPROT1_SPID [16] = 0x0;      
    }
    else if (strModelName == "IBG_U2_TPTG") {
        for(uint i = 0; i < chanNum-2;     i++) {
            GPROT0_RG   [i] = 0x0;
            GPROT0_WG   [i] = 0x0;
            GPROT0_UM   [i] = 0x0;
            GPROT0_DBG  [i] = 0x0;
            GPROT0_GEN  [i] = 0x0;
        }
        GPROT0_RG   [8] = 0x0;
        GPROT0_WG   [8] = 0x0;
        GPROT0_UM   [8] = 0x0;
        GPROT0_DBG  [8] = 0x0;
        GPROT0_GEN  [8] = 0x0;
        GPROT0_RG   [9] = 0x0;
        GPROT0_WG   [9] = 0x0;
        GPROT0_UM   [9] = 0x0;
        GPROT0_DBG  [9] = 0x0;
        GPROT0_GEN  [9] = 0x0;
        for(uint i = 0; i < chanNum-2;     i++) {
            GPROT1_SPID [i] = 0x0;
        }
        GPROT1_SPID [8] = 0x0;
        GPROT1_SPID [9] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cibg_u2_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        GOVFCLR_CLRO                     = (*GOVFCLR     )["CLRO"        ];
        return;
    }
    if (addr == 0x0004) {
        GOVFSTAT_OVF                     = (*GOVFSTAT    )["OVF"         ];
        return;
    }
    if (addr == 0x0008) {
        GERRADDR_ADDR                    = (*GERRADDR    )["ADDR"        ];
        return;
    }
    if (addr == 0x000C) {
        GERRTYPE_WRITE                   = (*GERRTYPE    )["WRITE"       ];
        GERRTYPE_SPID                    = (*GERRTYPE    )["SPID"        ];
        GERRTYPE_UM                      = (*GERRTYPE    )["UM"          ];
        GERRTYPE_DBG                     = (*GERRTYPE    )["DBG"         ];
        GERRTYPE_SEC                     = (*GERRTYPE    )["SEC"         ];
        return;
    }
    if (addr == 0x0010) {
        GSPIDERRCLR_SPIDCLR              = (*GSPIDERRCLR )["SPIDCLR"     ];
        return;
    }
    if (addr == 0x0014) {
        GSPIDERRSTAT_SPIDERR             = (*GSPIDERRSTAT)["SPIDERR"     ];
        return;
    }
    if (addr == 0x0018) {
        GKCPROT_KCE                      = (*GKCPROT     )["KCE"         ];
        GKCPROT_KCPROT                   = (*GKCPROT     )["KCPROT"      ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(8*16)) && ((addr-0x0080)%8 == 0)) {
        uint i = (addr - 0x0080)/8;
        if (strModelName == "IBG_U2_TPTG") {
            if (i != 8 && i != 9) {
                GPROT0_RG                       [i] = (*(GPROT0      [i]))["RG"          ];
                GPROT0_WG                       [i] = (*(GPROT0      [i]))["WG"          ];
                GPROT0_UM                       [i] = (*(GPROT0      [i]))["UM"          ];
                GPROT0_DBG                      [i] = (*(GPROT0      [i]))["DBG"         ];
                GPROT0_GEN                      [i] = (*(GPROT0      [i]))["GEN"         ];
            }
            else if (i == 8) {
                GPROT0_RG                       [8] = (*(GPROT0      [8]))["RG"          ];
                GPROT0_WG                       [8] = (*(GPROT0      [8]))["WG"          ];
                GPROT0_UM                       [8] = (*(GPROT0      [8]))["UM"          ];
                GPROT0_DBG                      [8] = (*(GPROT0      [8]))["DBG"         ];
                GPROT0_GEN                      [8] = (*(GPROT0      [8]))["GEN"         ];
            }
            else if (i == 9) {
                GPROT0_RG                       [9] = (*(GPROT0      [9]))["RG"          ];
                GPROT0_WG                       [9] = (*(GPROT0      [9]))["WG"          ];
                GPROT0_UM                       [9] = (*(GPROT0      [9]))["UM"          ];
                GPROT0_DBG                      [9] = (*(GPROT0      [9]))["DBG"         ];
                GPROT0_GEN                      [9] = (*(GPROT0      [9]))["GEN"         ];
            }
        }
        else {
            GPROT0_RG                       [i] = (*(GPROT0      [i]))["RG"          ];
            GPROT0_WG                       [i] = (*(GPROT0      [i]))["WG"          ];
            GPROT0_UM                       [i] = (*(GPROT0      [i]))["UM"          ];
            GPROT0_DBG                      [i] = (*(GPROT0      [i]))["DBG"         ];
            GPROT0_GEN                      [i] = (*(GPROT0      [i]))["GEN"         ];
        }
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(8*16)) && ((addr-0x0084)%8 == 0)) {
        uint i = (addr - 0x0084)/8;
        
        if (strModelName == "IBG_U2_TPTG") {
            if (i != 8 && i != 9) {
                GPROT1_SPID                     [i] = (*(GPROT1      [i]))["SPID"        ];
            }
            else if (i == 8) {
                GPROT1_SPID                     [8] = (*(GPROT1      [8]))["SPID"        ];
            }
            else if (i == 9) {
                GPROT1_SPID                     [9] = (*(GPROT1      [9]))["SPID"        ];
            }
        }
        else {
            GPROT1_SPID                     [i] = (*(GPROT1      [i]))["SPID"        ];
        }
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cibg_u2_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*GOVFCLR     )["CLRO"        ] = GOVFCLR_CLRO;
        return;
    }
    if (addr == 0x0004) {
        (*GOVFSTAT    )["OVF"         ] = GOVFSTAT_OVF;
        return;
    }
    if (addr == 0x0008) {
        (*GERRADDR    )["ADDR"        ] = GERRADDR_ADDR;
        return;
    }
    if (addr == 0x000C) {
        (*GERRTYPE    )["WRITE"       ] = GERRTYPE_WRITE;
        (*GERRTYPE    )["SPID"        ] = GERRTYPE_SPID;
        (*GERRTYPE    )["UM"          ] = GERRTYPE_UM;
        (*GERRTYPE    )["DBG"         ] = GERRTYPE_DBG;
        (*GERRTYPE    )["SEC"         ] = GERRTYPE_SEC;
        return;
    }
    if (addr == 0x0010) {
        (*GSPIDERRCLR )["SPIDCLR"     ] = GSPIDERRCLR_SPIDCLR;
        return;
    }
    if (addr == 0x0014) {
        (*GSPIDERRSTAT)["SPIDERR"     ] = GSPIDERRSTAT_SPIDERR;
        return;
    }
    if (addr == 0x0018) {
        (*GKCPROT     )["KCE"         ] = GKCPROT_KCE;
        (*GKCPROT     )["KCPROT"      ] = GKCPROT_KCPROT;
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(8*16)) && ((addr-0x0080)%8 == 0)) {
        uint i = (addr - 0x0080)/8;
        if (strModelName == "IBG_U2_TPTG") {
            if (i != 8 && i != 9) {
                (*(GPROT0      [i]))["RG"          ] = GPROT0_RG[i];
                (*(GPROT0      [i]))["WG"          ] = GPROT0_WG[i];
                (*(GPROT0      [i]))["UM"          ] = GPROT0_UM[i];
                (*(GPROT0      [i]))["DBG"         ] = GPROT0_DBG[i];
                (*(GPROT0      [i]))["GEN"         ] = GPROT0_GEN[i];
            }
            else if (i == 8) {
                (*(GPROT0      [8]))["RG"          ] = GPROT0_RG[8];
                (*(GPROT0      [8]))["WG"          ] = GPROT0_WG[8];
                (*(GPROT0      [8]))["UM"          ] = GPROT0_UM[8];
                (*(GPROT0      [8]))["DBG"         ] = GPROT0_DBG[8];
                (*(GPROT0      [8]))["GEN"         ] = GPROT0_GEN[8];
            }
            else if (i == 9) {
                (*(GPROT0      [9]))["RG"          ] = GPROT0_RG[9];
                (*(GPROT0      [9]))["WG"          ] = GPROT0_WG[9];
                (*(GPROT0      [9]))["UM"          ] = GPROT0_UM[9];
                (*(GPROT0      [9]))["DBG"         ] = GPROT0_DBG[9];
                (*(GPROT0      [9]))["GEN"         ] = GPROT0_GEN[9];
            }
        }
        else {
            (*(GPROT0      [i]))["RG"          ] = GPROT0_RG[i];
            (*(GPROT0      [i]))["WG"          ] = GPROT0_WG[i];
            (*(GPROT0      [i]))["UM"          ] = GPROT0_UM[i];
            (*(GPROT0      [i]))["DBG"         ] = GPROT0_DBG[i];
            (*(GPROT0      [i]))["GEN"         ] = GPROT0_GEN[i];
        }
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(8*16)) && ((addr-0x0084)%8 == 0)) {
        uint i = (addr - 0x0084)/8;
        if (strModelName == "IBG_U2_TPTG") {
            if (i != 8 && i != 9) {
                (*(GPROT1      [i]))["SPID"        ] = GPROT1_SPID[i];
            }
            else if (i == 8) {
                (*(GPROT1      [8]))["SPID"        ] = GPROT1_SPID[8];
            }
            else if (i == 9) {
                (*(GPROT1      [9]))["SPID"        ] = GPROT1_SPID[9];
            }
        }
        else {
            (*(GPROT1      [i]))["SPID"        ] = GPROT1_SPID[i];
        }
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cibg_u2_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cibg_u2_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cibg_u2_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cibg_u2_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cibg_u2_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cibg_u2_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cibg_u2_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cibg_u2_regif::uint Cibg_u2_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cibg_u2_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cibg_u2_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cibg_u2_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cibg_u2_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cibg_u2_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cibg_u2_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cibg_u2_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
