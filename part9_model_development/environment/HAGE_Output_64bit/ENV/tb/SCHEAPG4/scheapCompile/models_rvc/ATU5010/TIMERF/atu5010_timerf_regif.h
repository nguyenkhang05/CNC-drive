// -----------------------------------------------------------------------------
// $Id: $
//
// Copyright(c) 2015 Renesas Electronics Corporation
// Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : /home/truongvv2/ATU5_r106_Ouput/src/ATU5/TIMERF/atu5010_timerf_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5010_TIMERF
//     #              name      offset_size
//     %%REG_INSTANCE  reg_def   15
// 
// %REG_CHANNEL reg_def
//     %%TITLE      name      reg_name  wsize     rsize     length    offset    factor_start   factor_end  factor_index    factor_step     access    init         support   callback
//     %%REG        TSTRF     TSTRF     8|16|32   8|16|32   32        0x5000    -              -           -               -               R|W       0x00000000   TRUE      W
//     %%REG        NCMCR1F   NCMCR1F   8|16|32   8|16|32   32        0x5004    -              -           -               -               R|W       0x00000000   TRUE      -
//     %%REG        NCMCR2F   NCMCR2F   8|16|32   8|16|32   32        0x5008    -              -           -               -               R|W       0x00000000   TRUE      -
//     %%REG        NCCRF     NCCRF     8|16|32   8|16|32   32        0x500C    -              -           -               -               R|W       0x00000000   TRUE      -
//     %%REG        PVFCRF    PVFCRF    16        8|16|32   16        0x5010    -              -           -               -               R|W       0x0000       TRUE      W
// 
// 
// 
// 
// 
// 
// %REG_NAME        TSTRF
// %%TITLE          name      upper     lower     init         access    support   callback
// %%BIT            STRF0     0         0         0            R|W       TRUE      W
// %%BIT            STRF1     1         1         0            R|W       TRUE      W
// %%BIT            STRF2     2         2         0            R|W       TRUE      W
// %%BIT            STRF3     3         3         0            R|W       TRUE      W
// %%BIT            STRF4     4         4         0            R|W       TRUE      W
// %%BIT            STRF5     5         5         0            R|W       TRUE      W
// %%BIT            STRF6     6         6         0            R|W       TRUE      W
// %%BIT            STRF7     7         7         0            R|W       TRUE      W
// %%BIT            STRF8     8         8         0            R|W       TRUE      W
// %%BIT            STRF9     9         9         0            R|W       TRUE      W
// %%BIT            STRF10    10        10        0            R|W       TRUE      W
// %%BIT            STRF11    11        11        0            R|W       TRUE      W
// %%BIT            STRF12    12        12        0            R|W       TRUE      W
// %%BIT            STRF13    13        13        0            R|W       TRUE      W
// %%BIT            STRF14    14        14        0            R|W       TRUE      W
// %%BIT            STRF15    15        15        0            R|W       TRUE      W
// %%BIT            STRF16    16        16        0            R|W       TRUE      W
// %%BIT            STRF17    17        17        0            R|W       TRUE      W
// %%BIT            STRF18    18        18        0            R|W       TRUE      W
// %%BIT            STRF19    19        19        0            R|W       TRUE      W
// 
// 
// %REG_NAME        NCMCR1F
// %%TITLE          name      upper     lower     init         access    support   callback
// %%BIT            NCM1F     19        0         0            R|W       TRUE      -
// 
// 
// %REG_NAME        NCMCR2F
// %%TITLE          name      upper     lower     init         access    support   callback
// %%BIT            NCM2F     19        0         0            R|W       TRUE      -
// 
// 
// %REG_NAME        NCCRF
// %%TITLE          name      upper     lower     init         access    support   callback
// %%BIT            NCEF      19        0         0            R|W       TRUE      -
// 
// 
// %REG_NAME        PVFCRF
// %%TITLE          name      upper     lower     init         access    support   callback
// %%BIT            PVFCRKEY  15        8         0            R|W       TRUE      W
// %%BIT            GRDFCMEN  1         1         0            R|W       TRUE      -
// %%BIT            BKCRWEN   0         0         0            R|W       TRUE      -
////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timerf_regif.h
/// @brief Register IF class of model ATU5010_TIMERF
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ATU5010_TIMERF_REGIF_H__
#define __ATU5010_TIMERF_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ATU5010_TIMERF model
class Catu5010_timerf_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Catu5010_timerf_regif(std::string name, uint buswidth);
    ~Catu5010_timerf_regif();

protected:
    vpcl::re_register *TSTRF  ;
    vpcl::re_register *NCMCR1F;
    vpcl::re_register *NCMCR2F;
    vpcl::re_register *NCCRF  ;
    vpcl::re_register *PVFCRF ;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_PVFCRF_;
    scml2::reg<uint>      *CW_TSTRF  ;
    scml2::reg<uint>      *CW_NCMCR1F;
    scml2::reg<uint>      *CW_NCMCR2F;
    scml2::reg<uint>      *CW_NCCRF  ;
    scml2::bitfield<uint> *CW_PVFCRF ;
    #endif

    uint TSTRF_STRF0;
    uint TSTRF_STRF1;
    uint TSTRF_STRF2;
    uint TSTRF_STRF3;
    uint TSTRF_STRF4;
    uint TSTRF_STRF5;
    uint TSTRF_STRF6;
    uint TSTRF_STRF7;
    uint TSTRF_STRF8;
    uint TSTRF_STRF9;
    uint TSTRF_STRF10;
    uint TSTRF_STRF11;
    uint TSTRF_STRF12;
    uint TSTRF_STRF13;
    uint TSTRF_STRF14;
    uint TSTRF_STRF15;
    uint TSTRF_STRF16;
    uint TSTRF_STRF17;
    uint TSTRF_STRF18;
    uint TSTRF_STRF19;
    uint NCMCR1F_NCM1F;
    uint NCMCR2F_NCM2F;
    uint NCCRF_NCEF;
    uint PVFCRF_PVFCRKEY;
    uint PVFCRF_GRDFCMEN;
    uint PVFCRF_BKCRWEN;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_TSTRF_STRF0(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF1(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF2(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF3(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF4(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF5(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF6(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF7(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF8(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF9(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF10(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF11(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF12(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF13(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF14(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF15(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF16(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF17(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF18(RegCBstr str) = 0;
    virtual void cb_TSTRF_STRF19(RegCBstr str) = 0;
    virtual void cb_PVFCRF_PVFCRKEY(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Catu5010_timerf_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Catu5010_timerf_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ATU5010_TIMERF_REG_DEF_H__
