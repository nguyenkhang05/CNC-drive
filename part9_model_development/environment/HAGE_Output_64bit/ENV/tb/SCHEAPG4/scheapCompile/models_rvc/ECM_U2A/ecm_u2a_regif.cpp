// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2017-2019 Renesas Electronics Corporation
// Copyright(c) 2017-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : /shsv/IP12/SLD/trungpham/99_Working/02_SLD/01_SYSTEMC/progress/06_ECM_U2A/ipd2_prj00021_17009_ecm_u2a/02_Output/DATA/src/ecm_u2a_regif.txt
////////////////////////////////////////////////////////////////////////////////
// ## ----------------------------------------------------------------------
// ## $Id: $
// ##
// ## Copyright(c) 2017-2019 Renesas System Design Co., Ltd.
// ## Copyright(c) 2017-2019 Renesas Design Vietnam Co., Ltd.
// ## RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// ## This program must be used solely for the purpose for which
// ## it was furnished by Renesas Electronics Corporation. No part of this
// ## program may be reproduced or disclosed to others, in any
// ## form, without the prior written permission of Renesas Electronics
// ## Corporation.
// ## ----------------------------------------------------------------------
// 
// %MODULE ECM_U2A 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  12
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name         reg_name       size       wsize      length  offset    factor_start factor_end  factor_step access  init     support  callback
//     %%REG	ECMmESET	ECMmESET	8|16|32	32	32	0x000	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmECLR	ECMmECLR	8|16|32	32	32	0x004	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmESET0	ECMmESET0	8|16|32	32	32	0x008	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmECLR0	ECMmECLR0	8|16|32	32	32	0x00C	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmESET1	ECMmESET1	8|16|32	32	32	0x010	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmECLR1	ECMmECLR1	8|16|32	32	32	0x014	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmESET2	ECMmESET2	8|16|32	32	32	0x018	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmECLR2	ECMmECLR2	8|16|32	32	32	0x01C	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmESET3	ECMmESET3	8|16|32	32	32	0x020	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmECLR3	ECMmECLR3	8|16|32	32	32	0x024	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMmESSTR	ECMmESSTR	8|16|32	32	32	0x048	    0	            10	        0x4	    R	    0	    TRUE	-
//     										    	            	        	    
//     %%REG	ECMEPCFG	ECMEPCFG	8|16|32	32	32	0x100	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMISCFG	ECMISCFG	8|16|32	32	32	0x104	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMINCFG0	ECMINCFG0	8|16|32	32	32	0x140	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMINCFG1	ECMINCFG1	8|16|32	32	32	0x17C	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMINCFG2	ECMINCFG2	8|16|32	32	32	0x1B8	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMINCFG3	ECMINCFG3	8|16|32	32	32	0x1F4	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMIRCFG	ECMIRCFG	8|16|32	32	32	0x320	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMEMK	        ECMEMK	        8|16|32	32	32	0x35C	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMETMK0	ECMETMK0	8|16|32	32	32	0x398	    0	            10	        0x4	    W	    0xFFFFFFFF	    TRUE	-
//     %%REG	ECMETMK1	ECMETMK1	8|16|32	32	32	0x3D4	    0	            10	        0x4	    W	    0xFFFFFFFF	    TRUE	-
//     %%REG	ECMETMK2	ECMETMK2	8|16|32	32	32	0x410	    0	            10	        0x4	    W	    0xFFFFFFFF	    TRUE	-
//     %%REG	ECMETMK3	ECMETMK3	8|16|32	32	32	0x44C	    0	            10	        0x4	    W	    0xFFFFFFFF	    TRUE	-
//     %%REG	ECMESSTC	ECMESSTC	8|16|32	32	32	0x578	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMKCPROT	ECMKCPROT	8|16|32	32	32	0x5B4	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMPE	        ECMPE	        8|16|32	32	32	0x5B8	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMDTMCTL	ECMDTMCTL	8|16|32	32	32	0x5F4	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMDTMR	        ECMDTMR	        8|16|32	32	32	0x5F8	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMDTMCMP	ECMDTMCMP	8|16|32	32	32	0x5FC	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMDTMCFG	ECMDTMCFG	8|16|32	32	32	0x600	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMDTMCFG0	ECMDTMCFG0	8|16|32	32	32	0x63C	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMDTMCFG1	ECMDTMCFG1	8|16|32	32	32	0x678	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMDTMCFG2	ECMDTMCFG2	8|16|32	32	32	0x6B4	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMDTMCFG3	ECMDTMCFG3	8|16|32	32	32	0x6F0	    0	            10	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMEOCCFG	ECMEOCCFG	8|16|32	32	32	0x81C	    -	            -	        -	    W	    0	    TRUE	-
//     %%REG	ECMETCCFG	ECMETCCFG	8|16|32	32	32	0x820	    0	            3	        0x4	    W	    0	    TRUE	-
//     %%REG	ECMPEM	        ECMPEM	        8|16|32	32	32	0x840	    -	            -	        -	    W	    0	    TRUE	-
// 
// 
// %REG_NAME ECMmESET	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmEST        0      0      0     R:0|W1       TRUE     W   
// 	
// %REG_NAME ECMmESET0	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmEST        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmESET1	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmEST        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmESET2	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmEST        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmESET3	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmEST        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmECLR	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmECT        0      0      0     R:0|W1       TRUE     W   
// 	
// %REG_NAME ECMmECLR0
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmECT        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmECLR1
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmECT        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmECLR2
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmECT        0      0      0     R:0|W1       TRUE     W   
// 
// %REG_NAME ECMmECLR3
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmECT        0      0      0     R:0|W1       TRUE     W   
// 
// 
// %REG_NAME ECMmESSTR
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMmSSE31      31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE30      30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE29      29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE28      28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE27      27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE26      26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE25      25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE24      24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE23      23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE22      22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE21      21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE20      20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE19      19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE18      18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE17      17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE16      16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE15      15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE14      14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE13      13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE12      12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE11      11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE10      10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE09      9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE08      8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE07      7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE06      6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE05      5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE04      4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE03      3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE02      2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE01      1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE00      0      0      0     R       TRUE     -    
// 	
// %REG_NAME ECMEPCFG	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMSL0         0      0      0     R|W     TRUE     -   
// 	
// %REG_NAME ECMISCFG 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIS31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIS30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIS29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIS28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIS27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIS26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIS25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIS24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIS23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIS22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIS21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIS20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIS19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIS18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIS17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIS16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIS15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIS14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIS13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIS12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIS11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIS10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIS09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIS08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIS07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIS06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIS05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIS04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIS03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIS02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIS01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIS00     0      0      0     R|W     TRUE     W    
// 	
// %REG_NAME ECMINCFG0	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIE00     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMINCFG1	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIE00     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMINCFG2	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIE00     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMINCFG3	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIE00     0      0      0     R|W     TRUE     W    
// 	
// %REG_NAME ECMIRCFG	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMIRE31     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIRE30     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIRE29     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE28     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE27     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE26     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIRE25     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE24     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE23     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE22     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE21     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE20     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE19     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE18     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE17     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE16     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE15     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE14     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE13     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE12     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE11     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE10     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE09     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE08     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE07     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE06     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE05     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE04     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE03     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE02     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE01     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE00     0      0      0     R|W     TRUE     W    
// 	
// %REG_NAME ECMEMK 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMEMK31      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMEMK30      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMEMK29      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK28      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK27      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK26      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMEMK25      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK24      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK23      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK22      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK21      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK20      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK19      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK18      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK17      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK16      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK15      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK14      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK13      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK12      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK11      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK10      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK09      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK08      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK07      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK06      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK05      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK04      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK03      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK02      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK01      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK00      0      0      0     R|W     TRUE     W    
// 	
// %REG_NAME ECMETMK0
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMETMK31      31     31     1     R|W     TRUE     -    
//     %%BIT    ECMETMK30      30     30     1     R|W     TRUE     -    
//     %%BIT    ECMETMK29      29     29     1     R|W     TRUE     -    
//     %%BIT    ECMETMK28      28     28     1     R|W     TRUE     -    
//     %%BIT    ECMETMK27      27     27     1     R|W     TRUE     -    
//     %%BIT    ECMETMK26      26     26     1     R|W     TRUE     -    
//     %%BIT    ECMETMK25      25     25     1     R|W     TRUE     -    
//     %%BIT    ECMETMK24      24     24     1     R|W     TRUE     -    
//     %%BIT    ECMETMK23      23     23     1     R|W     TRUE     -    
//     %%BIT    ECMETMK22      22     22     1     R|W     TRUE     -    
//     %%BIT    ECMETMK21      21     21     1     R|W     TRUE     -    
//     %%BIT    ECMETMK20      20     20     1     R|W     TRUE     -    
//     %%BIT    ECMETMK19      19     19     1     R|W     TRUE     -    
//     %%BIT    ECMETMK18      18     18     1     R|W     TRUE     -    
//     %%BIT    ECMETMK17      17     17     1     R|W     TRUE     -    
//     %%BIT    ECMETMK16      16     16     1     R|W     TRUE     -    
//     %%BIT    ECMETMK15      15     15     1     R|W     TRUE     -    
//     %%BIT    ECMETMK14      14     14     1     R|W     TRUE     -    
//     %%BIT    ECMETMK13      13     13     1     R|W     TRUE     -    
//     %%BIT    ECMETMK12      12     12     1     R|W     TRUE     -    
//     %%BIT    ECMETMK11      11     11     1     R|W     TRUE     -    
//     %%BIT    ECMETMK10      10     10     1     R|W     TRUE     -    
//     %%BIT    ECMETMK09      9      9      1     R|W     TRUE     -    
//     %%BIT    ECMETMK08      8      8      1     R|W     TRUE     -    
//     %%BIT    ECMETMK07      7      7      1     R|W     TRUE     -    
//     %%BIT    ECMETMK06      6      6      1     R|W     TRUE     -    
//     %%BIT    ECMETMK05      5      5      1     R|W     TRUE     -    
//     %%BIT    ECMETMK04      4      4      1     R|W     TRUE     -    
//     %%BIT    ECMETMK03      3      3      1     R|W     TRUE     -    
//     %%BIT    ECMETMK02      2      2      1     R|W     TRUE     -    
//     %%BIT    ECMETMK01      1      1      1     R|W     TRUE     -    
//     %%BIT    ECMETMK00      0      0      1     R|W     TRUE     W    
// 
// %REG_NAME ECMETMK1 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMETMK31      31     31     1     R|W     TRUE     -    
//     %%BIT    ECMETMK30      30     30     1     R|W     TRUE     -    
//     %%BIT    ECMETMK29      29     29     1     R|W     TRUE     -    
//     %%BIT    ECMETMK28      28     28     1     R|W     TRUE     -    
//     %%BIT    ECMETMK27      27     27     1     R|W     TRUE     -    
//     %%BIT    ECMETMK26      26     26     1     R|W     TRUE     -    
//     %%BIT    ECMETMK25      25     25     1     R|W     TRUE     -    
//     %%BIT    ECMETMK24      24     24     1     R|W     TRUE     -    
//     %%BIT    ECMETMK23      23     23     1     R|W     TRUE     -    
//     %%BIT    ECMETMK22      22     22     1     R|W     TRUE     -    
//     %%BIT    ECMETMK21      21     21     1     R|W     TRUE     -    
//     %%BIT    ECMETMK20      20     20     1     R|W     TRUE     -    
//     %%BIT    ECMETMK19      19     19     1     R|W     TRUE     -    
//     %%BIT    ECMETMK18      18     18     1     R|W     TRUE     -    
//     %%BIT    ECMETMK17      17     17     1     R|W     TRUE     -    
//     %%BIT    ECMETMK16      16     16     1     R|W     TRUE     -    
//     %%BIT    ECMETMK15      15     15     1     R|W     TRUE     -    
//     %%BIT    ECMETMK14      14     14     1     R|W     TRUE     -    
//     %%BIT    ECMETMK13      13     13     1     R|W     TRUE     -    
//     %%BIT    ECMETMK12      12     12     1     R|W     TRUE     -    
//     %%BIT    ECMETMK11      11     11     1     R|W     TRUE     -    
//     %%BIT    ECMETMK10      10     10     1     R|W     TRUE     -    
//     %%BIT    ECMETMK09      9      9      1     R|W     TRUE     -    
//     %%BIT    ECMETMK08      8      8      1     R|W     TRUE     -    
//     %%BIT    ECMETMK07      7      7      1     R|W     TRUE     -    
//     %%BIT    ECMETMK06      6      6      1     R|W     TRUE     -    
//     %%BIT    ECMETMK05      5      5      1     R|W     TRUE     -    
//     %%BIT    ECMETMK04      4      4      1     R|W     TRUE     -    
//     %%BIT    ECMETMK03      3      3      1     R|W     TRUE     -    
//     %%BIT    ECMETMK02      2      2      1     R|W     TRUE     -    
//     %%BIT    ECMETMK01      1      1      1     R|W     TRUE     -    
//     %%BIT    ECMETMK00      0      0      1     R|W     TRUE     W    
// 		
// %REG_NAME ECMETMK2 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMETMK31      31     31     1     R|W     TRUE     -    
//     %%BIT    ECMETMK30      30     30     1     R|W     TRUE     -    
//     %%BIT    ECMETMK29      29     29     1     R|W     TRUE     -    
//     %%BIT    ECMETMK28      28     28     1     R|W     TRUE     -    
//     %%BIT    ECMETMK27      27     27     1     R|W     TRUE     -    
//     %%BIT    ECMETMK26      26     26     1     R|W     TRUE     -    
//     %%BIT    ECMETMK25      25     25     1     R|W     TRUE     -    
//     %%BIT    ECMETMK24      24     24     1     R|W     TRUE     -    
//     %%BIT    ECMETMK23      23     23     1     R|W     TRUE     -    
//     %%BIT    ECMETMK22      22     22     1     R|W     TRUE     -    
//     %%BIT    ECMETMK21      21     21     1     R|W     TRUE     -    
//     %%BIT    ECMETMK20      20     20     1     R|W     TRUE     -    
//     %%BIT    ECMETMK19      19     19     1     R|W     TRUE     -    
//     %%BIT    ECMETMK18      18     18     1     R|W     TRUE     -    
//     %%BIT    ECMETMK17      17     17     1     R|W     TRUE     -    
//     %%BIT    ECMETMK16      16     16     1     R|W     TRUE     -    
//     %%BIT    ECMETMK15      15     15     1     R|W     TRUE     -    
//     %%BIT    ECMETMK14      14     14     1     R|W     TRUE     -    
//     %%BIT    ECMETMK13      13     13     1     R|W     TRUE     -    
//     %%BIT    ECMETMK12      12     12     1     R|W     TRUE     -    
//     %%BIT    ECMETMK11      11     11     1     R|W     TRUE     -    
//     %%BIT    ECMETMK10      10     10     1     R|W     TRUE     -    
//     %%BIT    ECMETMK09      9      9      1     R|W     TRUE     -    
//     %%BIT    ECMETMK08      8      8      1     R|W     TRUE     -    
//     %%BIT    ECMETMK07      7      7      1     R|W     TRUE     -    
//     %%BIT    ECMETMK06      6      6      1     R|W     TRUE     -    
//     %%BIT    ECMETMK05      5      5      1     R|W     TRUE     -    
//     %%BIT    ECMETMK04      4      4      1     R|W     TRUE     -    
//     %%BIT    ECMETMK03      3      3      1     R|W     TRUE     -    
//     %%BIT    ECMETMK02      2      2      1     R|W     TRUE     -    
//     %%BIT    ECMETMK01      1      1      1     R|W     TRUE     -    
//     %%BIT    ECMETMK00      0      0      1     R|W     TRUE     W    
// 
// %REG_NAME ECMETMK3 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMETMK31      31     31     1     R|W     TRUE     -    
//     %%BIT    ECMETMK30      30     30     1     R|W     TRUE     -    
//     %%BIT    ECMETMK29      29     29     1     R|W     TRUE     -    
//     %%BIT    ECMETMK28      28     28     1     R|W     TRUE     -    
//     %%BIT    ECMETMK27      27     27     1     R|W     TRUE     -    
//     %%BIT    ECMETMK26      26     26     1     R|W     TRUE     -    
//     %%BIT    ECMETMK25      25     25     1     R|W     TRUE     -    
//     %%BIT    ECMETMK24      24     24     1     R|W     TRUE     -    
//     %%BIT    ECMETMK23      23     23     1     R|W     TRUE     -    
//     %%BIT    ECMETMK22      22     22     1     R|W     TRUE     -    
//     %%BIT    ECMETMK21      21     21     1     R|W     TRUE     -    
//     %%BIT    ECMETMK20      20     20     1     R|W     TRUE     -    
//     %%BIT    ECMETMK19      19     19     1     R|W     TRUE     -    
//     %%BIT    ECMETMK18      18     18     1     R|W     TRUE     -    
//     %%BIT    ECMETMK17      17     17     1     R|W     TRUE     -    
//     %%BIT    ECMETMK16      16     16     1     R|W     TRUE     -    
//     %%BIT    ECMETMK15      15     15     1     R|W     TRUE     -    
//     %%BIT    ECMETMK14      14     14     1     R|W     TRUE     -    
//     %%BIT    ECMETMK13      13     13     1     R|W     TRUE     -    
//     %%BIT    ECMETMK12      12     12     1     R|W     TRUE     -    
//     %%BIT    ECMETMK11      11     11     1     R|W     TRUE     -    
//     %%BIT    ECMETMK10      10     10     1     R|W     TRUE     -    
//     %%BIT    ECMETMK09      9      9      1     R|W     TRUE     -    
//     %%BIT    ECMETMK08      8      8      1     R|W     TRUE     -    
//     %%BIT    ECMETMK07      7      7      1     R|W     TRUE     -    
//     %%BIT    ECMETMK06      6      6      1     R|W     TRUE     -    
//     %%BIT    ECMETMK05      5      5      1     R|W     TRUE     -    
//     %%BIT    ECMETMK04      4      4      1     R|W     TRUE     -    
//     %%BIT    ECMETMK03      3      3      1     R|W     TRUE     -    
//     %%BIT    ECMETMK02      2      2      1     R|W     TRUE     -    
//     %%BIT    ECMETMK01      1      1      1     R|W     TRUE     -    
//     %%BIT    ECMETMK00      0      0      1     R|W     TRUE     W    
// 
// %REG_NAME ECMESSTC
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMCLSSE31    31     31     0     W       TRUE     -    
//     %%BIT    ECMCLSSE30    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE29    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE28    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE27    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE26    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE25    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE24    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE23    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE22    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE21    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE20    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE19    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE18    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE17    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE16    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE15    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE14    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE13    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE12    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE11    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE10    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE09    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE08    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE07    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE06    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE05    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE04    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE03    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE02    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE01    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE00    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMKCPROT	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    KCPROT         31     1      0     W       TRUE     -    
//     %%BIT    KCE            0      0      0     R|W     TRUE     W    
// 	
// %REG_NAME ECMPE 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMPE31       31     31     0     W       TRUE     -    
//     %%BIT    ECMPE30       30     30     0     W       TRUE     -    
//     %%BIT    ECMPE29       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE28       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE27       27     27     0     W       TRUE     -    
//     %%BIT    ECMPE26       26     26     0     W       TRUE     -    
//     %%BIT    ECMPE25       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE24       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE23       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE22       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE21       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE20       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE19       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE18       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE17       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE16       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE15       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE14       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE13       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE12       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE11       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE10       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE09       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE08       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE07       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE06       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE05       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE04       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE03       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE02       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE01       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCTL	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DTMSTACNTCLK   4      4      0     R       TRUE     -    
//     %%BIT    DTMSTP         1      1      0     W       TRUE     W    
//     %%BIT    DTMSTA         0      0      0     R|W     TRUE     -    
// 	
// %REG_NAME ECMDTMR	
//     %%TITLE  name           upper  lower  init  access  support  callback  callbackDBG
//     %%BIT    ECMDTMR        23     0      0     R       TRUE     R         R
// 
// %REG_NAME ECMDTMCMP	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    CMPW           24     24     0     R       TRUE     -    
//     %%BIT    ECMDTMCMP      23     0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMDTME31       31     31     0     W       TRUE     -    
//     %%BIT    ECMDTME30       30     30     0     W       TRUE     -    
//     %%BIT    ECMDTME29       29     29     0     W       TRUE     -    
//     %%BIT    ECMDTME28       28     28     0     W       TRUE     -    
//     %%BIT    ECMDTME27       27     27     0     W       TRUE     -    
//     %%BIT    ECMDTME26       26     26     0     W       TRUE     -    
//     %%BIT    ECMDTME25       25     25     0     W       TRUE     -    
//     %%BIT    ECMDTME24       24     24     0     W       TRUE     -    
//     %%BIT    ECMDTME23       23     23     0     W       TRUE     -    
//     %%BIT    ECMDTME22       22     22     0     W       TRUE     -    
//     %%BIT    ECMDTME21       21     21     0     W       TRUE     -    
//     %%BIT    ECMDTME20       20     20     0     W       TRUE     -    
//     %%BIT    ECMDTME19       19     19     0     W       TRUE     -    
//     %%BIT    ECMDTME18       18     18     0     W       TRUE     -    
//     %%BIT    ECMDTME17       17     17     0     W       TRUE     -    
//     %%BIT    ECMDTME16       16     16     0     W       TRUE     -    
//     %%BIT    ECMDTME15       15     15     0     W       TRUE     -    
//     %%BIT    ECMDTME14       14     14     0     W       TRUE     -    
//     %%BIT    ECMDTME13       13     13     0     W       TRUE     -    
//     %%BIT    ECMDTME12       12     12     0     W       TRUE     -    
//     %%BIT    ECMDTME11       11     11     0     W       TRUE     -    
//     %%BIT    ECMDTME10       10     10     0     W       TRUE     -    
//     %%BIT    ECMDTME09       9      9      0     W       TRUE     -    
//     %%BIT    ECMDTME08       8      8      0     W       TRUE     -    
//     %%BIT    ECMDTME07       7      7      0     W       TRUE     -    
//     %%BIT    ECMDTME06       6      6      0     W       TRUE     -    
//     %%BIT    ECMDTME05       5      5      0     W       TRUE     -    
//     %%BIT    ECMDTME04       4      4      0     W       TRUE     -    
//     %%BIT    ECMDTME03       3      3      0     W       TRUE     -    
//     %%BIT    ECMDTME02       2      2      0     W       TRUE     -    
//     %%BIT    ECMDTME01       1      1      0     W       TRUE     -    
//     %%BIT    ECMDTME00       0      0      0     W       TRUE     W    
// 	
// %REG_NAME ECMDTMCFG0
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMDTME31       31     31     0     W       TRUE     -    
//     %%BIT    ECMDTME30       30     30     0     W       TRUE     -    
//     %%BIT    ECMDTME29       29     29     0     W       TRUE     -    
//     %%BIT    ECMDTME28       28     28     0     W       TRUE     -    
//     %%BIT    ECMDTME27       27     27     0     W       TRUE     -    
//     %%BIT    ECMDTME26       26     26     0     W       TRUE     -    
//     %%BIT    ECMDTME25       25     25     0     W       TRUE     -    
//     %%BIT    ECMDTME24       24     24     0     W       TRUE     -    
//     %%BIT    ECMDTME23       23     23     0     W       TRUE     -    
//     %%BIT    ECMDTME22       22     22     0     W       TRUE     -    
//     %%BIT    ECMDTME21       21     21     0     W       TRUE     -    
//     %%BIT    ECMDTME20       20     20     0     W       TRUE     -    
//     %%BIT    ECMDTME19       19     19     0     W       TRUE     -    
//     %%BIT    ECMDTME18       18     18     0     W       TRUE     -    
//     %%BIT    ECMDTME17       17     17     0     W       TRUE     -    
//     %%BIT    ECMDTME16       16     16     0     W       TRUE     -    
//     %%BIT    ECMDTME15       15     15     0     W       TRUE     -    
//     %%BIT    ECMDTME14       14     14     0     W       TRUE     -    
//     %%BIT    ECMDTME13       13     13     0     W       TRUE     -    
//     %%BIT    ECMDTME12       12     12     0     W       TRUE     -    
//     %%BIT    ECMDTME11       11     11     0     W       TRUE     -    
//     %%BIT    ECMDTME10       10     10     0     W       TRUE     -    
//     %%BIT    ECMDTME09       9      9      0     W       TRUE     -    
//     %%BIT    ECMDTME08       8      8      0     W       TRUE     -    
//     %%BIT    ECMDTME07       7      7      0     W       TRUE     -    
//     %%BIT    ECMDTME06       6      6      0     W       TRUE     -    
//     %%BIT    ECMDTME05       5      5      0     W       TRUE     -    
//     %%BIT    ECMDTME04       4      4      0     W       TRUE     -    
//     %%BIT    ECMDTME03       3      3      0     W       TRUE     -    
//     %%BIT    ECMDTME02       2      2      0     W       TRUE     -    
//     %%BIT    ECMDTME01       1      1      0     W       TRUE     -    
//     %%BIT    ECMDTME00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCFG1
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMDTME31       31     31     0     W       TRUE     -    
//     %%BIT    ECMDTME30       30     30     0     W       TRUE     -    
//     %%BIT    ECMDTME29       29     29     0     W       TRUE     -    
//     %%BIT    ECMDTME28       28     28     0     W       TRUE     -    
//     %%BIT    ECMDTME27       27     27     0     W       TRUE     -    
//     %%BIT    ECMDTME26       26     26     0     W       TRUE     -    
//     %%BIT    ECMDTME25       25     25     0     W       TRUE     -    
//     %%BIT    ECMDTME24       24     24     0     W       TRUE     -    
//     %%BIT    ECMDTME23       23     23     0     W       TRUE     -    
//     %%BIT    ECMDTME22       22     22     0     W       TRUE     -    
//     %%BIT    ECMDTME21       21     21     0     W       TRUE     -    
//     %%BIT    ECMDTME20       20     20     0     W       TRUE     -    
//     %%BIT    ECMDTME19       19     19     0     W       TRUE     -    
//     %%BIT    ECMDTME18       18     18     0     W       TRUE     -    
//     %%BIT    ECMDTME17       17     17     0     W       TRUE     -    
//     %%BIT    ECMDTME16       16     16     0     W       TRUE     -    
//     %%BIT    ECMDTME15       15     15     0     W       TRUE     -    
//     %%BIT    ECMDTME14       14     14     0     W       TRUE     -    
//     %%BIT    ECMDTME13       13     13     0     W       TRUE     -    
//     %%BIT    ECMDTME12       12     12     0     W       TRUE     -    
//     %%BIT    ECMDTME11       11     11     0     W       TRUE     -    
//     %%BIT    ECMDTME10       10     10     0     W       TRUE     -    
//     %%BIT    ECMDTME09       9      9      0     W       TRUE     -    
//     %%BIT    ECMDTME08       8      8      0     W       TRUE     -    
//     %%BIT    ECMDTME07       7      7      0     W       TRUE     -    
//     %%BIT    ECMDTME06       6      6      0     W       TRUE     -    
//     %%BIT    ECMDTME05       5      5      0     W       TRUE     -    
//     %%BIT    ECMDTME04       4      4      0     W       TRUE     -    
//     %%BIT    ECMDTME03       3      3      0     W       TRUE     -    
//     %%BIT    ECMDTME02       2      2      0     W       TRUE     -    
//     %%BIT    ECMDTME01       1      1      0     W       TRUE     -    
//     %%BIT    ECMDTME00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCFG2
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMDTME31       31     31     0     W       TRUE     -    
//     %%BIT    ECMDTME30       30     30     0     W       TRUE     -    
//     %%BIT    ECMDTME29       29     29     0     W       TRUE     -    
//     %%BIT    ECMDTME28       28     28     0     W       TRUE     -    
//     %%BIT    ECMDTME27       27     27     0     W       TRUE     -    
//     %%BIT    ECMDTME26       26     26     0     W       TRUE     -    
//     %%BIT    ECMDTME25       25     25     0     W       TRUE     -    
//     %%BIT    ECMDTME24       24     24     0     W       TRUE     -    
//     %%BIT    ECMDTME23       23     23     0     W       TRUE     -    
//     %%BIT    ECMDTME22       22     22     0     W       TRUE     -    
//     %%BIT    ECMDTME21       21     21     0     W       TRUE     -    
//     %%BIT    ECMDTME20       20     20     0     W       TRUE     -    
//     %%BIT    ECMDTME19       19     19     0     W       TRUE     -    
//     %%BIT    ECMDTME18       18     18     0     W       TRUE     -    
//     %%BIT    ECMDTME17       17     17     0     W       TRUE     -    
//     %%BIT    ECMDTME16       16     16     0     W       TRUE     -    
//     %%BIT    ECMDTME15       15     15     0     W       TRUE     -    
//     %%BIT    ECMDTME14       14     14     0     W       TRUE     -    
//     %%BIT    ECMDTME13       13     13     0     W       TRUE     -    
//     %%BIT    ECMDTME12       12     12     0     W       TRUE     -    
//     %%BIT    ECMDTME11       11     11     0     W       TRUE     -    
//     %%BIT    ECMDTME10       10     10     0     W       TRUE     -    
//     %%BIT    ECMDTME09       9      9      0     W       TRUE     -    
//     %%BIT    ECMDTME08       8      8      0     W       TRUE     -    
//     %%BIT    ECMDTME07       7      7      0     W       TRUE     -    
//     %%BIT    ECMDTME06       6      6      0     W       TRUE     -    
//     %%BIT    ECMDTME05       5      5      0     W       TRUE     -    
//     %%BIT    ECMDTME04       4      4      0     W       TRUE     -    
//     %%BIT    ECMDTME03       3      3      0     W       TRUE     -    
//     %%BIT    ECMDTME02       2      2      0     W       TRUE     -    
//     %%BIT    ECMDTME01       1      1      0     W       TRUE     -    
//     %%BIT    ECMDTME00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCFG3
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECMDTME31       31     31     0     W       TRUE     -    
//     %%BIT    ECMDTME30       30     30     0     W       TRUE     -    
//     %%BIT    ECMDTME29       29     29     0     W       TRUE     -    
//     %%BIT    ECMDTME28       28     28     0     W       TRUE     -    
//     %%BIT    ECMDTME27       27     27     0     W       TRUE     -    
//     %%BIT    ECMDTME26       26     26     0     W       TRUE     -    
//     %%BIT    ECMDTME25       25     25     0     W       TRUE     -    
//     %%BIT    ECMDTME24       24     24     0     W       TRUE     -    
//     %%BIT    ECMDTME23       23     23     0     W       TRUE     -    
//     %%BIT    ECMDTME22       22     22     0     W       TRUE     -    
//     %%BIT    ECMDTME21       21     21     0     W       TRUE     -    
//     %%BIT    ECMDTME20       20     20     0     W       TRUE     -    
//     %%BIT    ECMDTME19       19     19     0     W       TRUE     -    
//     %%BIT    ECMDTME18       18     18     0     W       TRUE     -    
//     %%BIT    ECMDTME17       17     17     0     W       TRUE     -    
//     %%BIT    ECMDTME16       16     16     0     W       TRUE     -    
//     %%BIT    ECMDTME15       15     15     0     W       TRUE     -    
//     %%BIT    ECMDTME14       14     14     0     W       TRUE     -    
//     %%BIT    ECMDTME13       13     13     0     W       TRUE     -    
//     %%BIT    ECMDTME12       12     12     0     W       TRUE     -    
//     %%BIT    ECMDTME11       11     11     0     W       TRUE     -    
//     %%BIT    ECMDTME10       10     10     0     W       TRUE     -    
//     %%BIT    ECMDTME09       9      9      0     W       TRUE     -    
//     %%BIT    ECMDTME08       8      8      0     W       TRUE     -    
//     %%BIT    ECMDTME07       7      7      0     W       TRUE     -    
//     %%BIT    ECMDTME06       6      6      0     W       TRUE     -    
//     %%BIT    ECMDTME05       5      5      0     W       TRUE     -    
//     %%BIT    ECMDTME04       4      4      0     W       TRUE     -    
//     %%BIT    ECMDTME03       3      3      0     W       TRUE     -    
//     %%BIT    ECMDTME02       2      2      0     W       TRUE     -    
//     %%BIT    ECMDTME01       1      1      0     W       TRUE     -    
//     %%BIT    ECMDTME00       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMEOCCFG	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    EOCIEN             31     31      0     R|W     TRUE     -    
//     %%BIT    CMPW               24     24      0     R       TRUE     -    
//     %%BIT    ECMEOUTCLRT        23     0       0     R|W     TRUE     W    
// 	
// %REG_NAME ECMETCCFG	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    EOCIEN             31     31      0     R|W     TRUE     -    
//     %%BIT    CMPW               24     24      0     R       TRUE     -    
//     %%BIT    ECMEOUTCLRT        23     0       0     R|W     TRUE     W    
// 	
// %REG_NAME ECMPEM 	
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    MSKM               1      1       0     R|W     TRUE     -    
//     %%BIT    MSKC               0      0       0     R|W     TRUE     W    
////////////////////////////////////////////////////////////////////////////////
/// @file ecm_u2a_regif.cpp
/// @brief Register IF class of model ECM_U2A
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "ecm_u2a_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cecm_u2a_regif::Cecm_u2a_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0x844)
    #endif
{
    CommandInit();
    ECMmESET   = new vpcl::re_register(0x0000, this, "ECMmESET"  , name.c_str());
    ECMmECLR   = new vpcl::re_register(0x0004, this, "ECMmECLR"  , name.c_str());
    ECMmESET0  = new vpcl::re_register(0x0008, this, "ECMmESET0" , name.c_str());
    ECMmECLR0  = new vpcl::re_register(0x000C, this, "ECMmECLR0" , name.c_str());
    ECMmESET1  = new vpcl::re_register(0x0010, this, "ECMmESET1" , name.c_str());
    ECMmECLR1  = new vpcl::re_register(0x0014, this, "ECMmECLR1" , name.c_str());
    ECMmESET2  = new vpcl::re_register(0x0018, this, "ECMmESET2" , name.c_str());
    ECMmECLR2  = new vpcl::re_register(0x001C, this, "ECMmECLR2" , name.c_str());
    ECMmESET3  = new vpcl::re_register(0x0020, this, "ECMmESET3" , name.c_str());
    ECMmECLR3  = new vpcl::re_register(0x0024, this, "ECMmECLR3" , name.c_str());
    ECMEPCFG   = new vpcl::re_register(0x0100, this, "ECMEPCFG"  , name.c_str());
    ECMKCPROT  = new vpcl::re_register(0x05B4, this, "ECMKCPROT" , name.c_str());
    ECMDTMCTL  = new vpcl::re_register(0x05F4, this, "ECMDTMCTL" , name.c_str());
    ECMDTMR    = new vpcl::re_register(0x05F8, this, "ECMDTMR"   , name.c_str());
    ECMDTMCMP  = new vpcl::re_register(0x05FC, this, "ECMDTMCMP" , name.c_str());
    ECMEOCCFG  = new vpcl::re_register(0x081C, this, "ECMEOCCFG" , name.c_str());
    ECMPEM     = new vpcl::re_register(0x0840, this, "ECMPEM"    , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        str_tmp.str("");
        str_tmp<<"ECMmESSTR"<< i;
        ECMmESSTR [i] = new vpcl::re_register((0x0048) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMISCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMISCFG"<< i;
        ECMISCFG  [i] = new vpcl::re_register((0x0104) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMINCFG0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG0"<< i;
        ECMINCFG0 [i] = new vpcl::re_register((0x0140) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMINCFG1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG1"<< i;
        ECMINCFG1 [i] = new vpcl::re_register((0x017C) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMINCFG2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG2"<< i;
        ECMINCFG2 [i] = new vpcl::re_register((0x01B8) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMINCFG3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG3"<< i;
        ECMINCFG3 [i] = new vpcl::re_register((0x01F4) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMIRCFG"<< i;
        ECMIRCFG  [i] = new vpcl::re_register((0x0320) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        str_tmp.str("");
        str_tmp<<"ECMEMK"<< i;
        ECMEMK    [i] = new vpcl::re_register((0x035C) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMETMK0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK0"<< i;
        ECMETMK0  [i] = new vpcl::re_register((0x0398) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMETMK1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK1"<< i;
        ECMETMK1  [i] = new vpcl::re_register((0x03D4) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMETMK2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK2"<< i;
        ECMETMK2  [i] = new vpcl::re_register((0x0410) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMETMK3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK3"<< i;
        ECMETMK3  [i] = new vpcl::re_register((0x044C) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        str_tmp.str("");
        str_tmp<<"ECMESSTC"<< i;
        ECMESSTC  [i] = new vpcl::re_register((0x0578) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        str_tmp.str("");
        str_tmp<<"ECMPE"<< i;
        ECMPE     [i] = new vpcl::re_register((0x05B8) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG"<< i;
        ECMDTMCFG [i] = new vpcl::re_register((0x0600) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG0"<< i;
        ECMDTMCFG0[i] = new vpcl::re_register((0x063C) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG1"<< i;
        ECMDTMCFG1[i] = new vpcl::re_register((0x0678) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG2"<< i;
        ECMDTMCFG2[i] = new vpcl::re_register((0x06B4) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG3"<< i;
        ECMDTMCFG3[i] = new vpcl::re_register((0x06F0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ECMETCCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETCCFG"<< i;
        ECMETCCFG [i] = new vpcl::re_register((0x0820) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index;
    mRegMap[0x001C + 2] = index;
    mRegMap[0x001C + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        mRegMap[(0x0048)     + i*4 ] = index;
        mRegMap[(0x0048 + 1) + i*4 ] = index;
        mRegMap[(0x0048 + 2) + i*4 ] = index;
        mRegMap[(0x0048 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0100]     = index;
    mRegMap[0x0100 + 1] = index;
    mRegMap[0x0100 + 2] = index;
    mRegMap[0x0100 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMISCFG;  i++) {
        mRegMap[(0x0104)     + i*4 ] = index;
        mRegMap[(0x0104 + 1) + i*4 ] = index;
        mRegMap[(0x0104 + 2) + i*4 ] = index;
        mRegMap[(0x0104 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMINCFG0; i++) {
        mRegMap[(0x0140)     + i*4 ] = index;
        mRegMap[(0x0140 + 1) + i*4 ] = index;
        mRegMap[(0x0140 + 2) + i*4 ] = index;
        mRegMap[(0x0140 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMINCFG1; i++) {
        mRegMap[(0x017C)     + i*4 ] = index;
        mRegMap[(0x017C + 1) + i*4 ] = index;
        mRegMap[(0x017C + 2) + i*4 ] = index;
        mRegMap[(0x017C + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMINCFG2; i++) {
        mRegMap[(0x01B8)     + i*4 ] = index;
        mRegMap[(0x01B8 + 1) + i*4 ] = index;
        mRegMap[(0x01B8 + 2) + i*4 ] = index;
        mRegMap[(0x01B8 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMINCFG3; i++) {
        mRegMap[(0x01F4)     + i*4 ] = index;
        mRegMap[(0x01F4 + 1) + i*4 ] = index;
        mRegMap[(0x01F4 + 2) + i*4 ] = index;
        mRegMap[(0x01F4 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMIRCFG;  i++) {
        mRegMap[(0x0320)     + i*4 ] = index;
        mRegMap[(0x0320 + 1) + i*4 ] = index;
        mRegMap[(0x0320 + 2) + i*4 ] = index;
        mRegMap[(0x0320 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMEMK;    i++) {
        mRegMap[(0x035C)     + i*4 ] = index;
        mRegMap[(0x035C + 1) + i*4 ] = index;
        mRegMap[(0x035C + 2) + i*4 ] = index;
        mRegMap[(0x035C + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMETMK0;  i++) {
        mRegMap[(0x0398)     + i*4 ] = index;
        mRegMap[(0x0398 + 1) + i*4 ] = index;
        mRegMap[(0x0398 + 2) + i*4 ] = index;
        mRegMap[(0x0398 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMETMK1;  i++) {
        mRegMap[(0x03D4)     + i*4 ] = index;
        mRegMap[(0x03D4 + 1) + i*4 ] = index;
        mRegMap[(0x03D4 + 2) + i*4 ] = index;
        mRegMap[(0x03D4 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMETMK2;  i++) {
        mRegMap[(0x0410)     + i*4 ] = index;
        mRegMap[(0x0410 + 1) + i*4 ] = index;
        mRegMap[(0x0410 + 2) + i*4 ] = index;
        mRegMap[(0x0410 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMETMK3;  i++) {
        mRegMap[(0x044C)     + i*4 ] = index;
        mRegMap[(0x044C + 1) + i*4 ] = index;
        mRegMap[(0x044C + 2) + i*4 ] = index;
        mRegMap[(0x044C + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMESSTC;  i++) {
        mRegMap[(0x0578)     + i*4 ] = index;
        mRegMap[(0x0578 + 1) + i*4 ] = index;
        mRegMap[(0x0578 + 2) + i*4 ] = index;
        mRegMap[(0x0578 + 3) + i*4 ] = index++;
    }
    mRegMap[0x05B4]     = index;
    mRegMap[0x05B4 + 1] = index;
    mRegMap[0x05B4 + 2] = index;
    mRegMap[0x05B4 + 3] = index++;
    for(uint i = 0; i < emNUM_ECMPE;     i++) {
        mRegMap[(0x05B8)     + i*4 ] = index;
        mRegMap[(0x05B8 + 1) + i*4 ] = index;
        mRegMap[(0x05B8 + 2) + i*4 ] = index;
        mRegMap[(0x05B8 + 3) + i*4 ] = index++;
    }
    mRegMap[0x05F4]     = index;
    mRegMap[0x05F4 + 1] = index;
    mRegMap[0x05F4 + 2] = index;
    mRegMap[0x05F4 + 3] = index++;
    mRegMap[0x05F8]     = index;
    mRegMap[0x05F8 + 1] = index;
    mRegMap[0x05F8 + 2] = index;
    mRegMap[0x05F8 + 3] = index++;
    mRegMap[0x05FC]     = index;
    mRegMap[0x05FC + 1] = index;
    mRegMap[0x05FC + 2] = index;
    mRegMap[0x05FC + 3] = index++;
    for(uint i = 0; i < emNUM_ECMDTMCFG; i++) {
        mRegMap[(0x0600)     + i*4 ] = index;
        mRegMap[(0x0600 + 1) + i*4 ] = index;
        mRegMap[(0x0600 + 2) + i*4 ] = index;
        mRegMap[(0x0600 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG0; i++) {
        mRegMap[(0x063C)     + i*4 ] = index;
        mRegMap[(0x063C + 1) + i*4 ] = index;
        mRegMap[(0x063C + 2) + i*4 ] = index;
        mRegMap[(0x063C + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG1; i++) {
        mRegMap[(0x0678)     + i*4 ] = index;
        mRegMap[(0x0678 + 1) + i*4 ] = index;
        mRegMap[(0x0678 + 2) + i*4 ] = index;
        mRegMap[(0x0678 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG2; i++) {
        mRegMap[(0x06B4)     + i*4 ] = index;
        mRegMap[(0x06B4 + 1) + i*4 ] = index;
        mRegMap[(0x06B4 + 2) + i*4 ] = index;
        mRegMap[(0x06B4 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG3; i++) {
        mRegMap[(0x06F0)     + i*4 ] = index;
        mRegMap[(0x06F0 + 1) + i*4 ] = index;
        mRegMap[(0x06F0 + 2) + i*4 ] = index;
        mRegMap[(0x06F0 + 3) + i*4 ] = index++;
    }
    mRegMap[0x081C]     = index;
    mRegMap[0x081C + 1] = index;
    mRegMap[0x081C + 2] = index;
    mRegMap[0x081C + 3] = index++;
    for(uint i = 0; i < emNUM_ECMETCCFG; i++) {
        mRegMap[(0x0820)     + i*4 ] = index;
        mRegMap[(0x0820 + 1) + i*4 ] = index;
        mRegMap[(0x0820 + 2) + i*4 ] = index;
        mRegMap[(0x0820 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0840]     = index;
    mRegMap[0x0840 + 1] = index;
    mRegMap[0x0840 + 2] = index;
    mRegMap[0x0840 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET    , mCurReg, 0,  4,      "32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET    , mCurReg, 0,  4,      "32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET3   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR3   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMmESSTR ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR   [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEPCFG    , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMISCFG  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMISCFG    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMINCFG0 ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMINCFG0   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMINCFG1 ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMINCFG1   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMINCFG2 ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMINCFG2   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMINCFG3 ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMINCFG3   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMIRCFG  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMEMK    ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMEMK      [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMETMK0  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMETMK0    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMETMK1  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMETMK1    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMETMK2  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMETMK2    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMETMK3  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMETMK3    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMESSTC  ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMESSTC    [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMKCPROT   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMPE     ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMPE       [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCTL   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMR     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCMP   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMDTMCFG ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMDTMCFG0; i++) mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG0  [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMDTMCFG1; i++) mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG1  [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMDTMCFG2; i++) mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG2  [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMDTMCFG3; i++) mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG3  [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEOCCFG   , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_ECMETCCFG ; i++) mCurReg = mRegArray[index++] = new SRegList(ECMETCCFG   [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPEM      , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*ECMmESET    ) ( 0,  0, "ECMmEST" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmECLR    ) ( 0,  0, "ECMmECT" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmESET0   ) ( 0,  0, "ECMmEST" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmECLR0   ) ( 0,  0, "ECMmECT" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmESET1   ) ( 0,  0, "ECMmEST" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmECLR1   ) ( 0,  0, "ECMmECT" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmESET2   ) ( 0,  0, "ECMmEST" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmECLR2   ) ( 0,  0, "ECMmECT" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmESET3   ) ( 0,  0, "ECMmEST" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMmECLR3   ) ( 0,  0, "ECMmECT" , 0x0       , "R:0|W1", vpcl::SPP_ENABLE);
    (*ECMEPCFG    ) ( 0,  0, "ECMSL0"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMKCPROT   ) (31,  1, "KCPROT"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMKCPROT   ) ( 0,  0, "KCE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCTL   ) ( 4,  4, "DTMSTACNTCLK", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL   ) ( 1,  1, "DTMSTP"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL   ) ( 0,  0, "DTMSTA"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMR     ) (23,  0, "ECMDTMR" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCMP   ) (24, 24, "CMPW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCMP   ) (23,  0, "ECMDTMCMP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEOCCFG   ) (31, 31, "EOCIEN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEOCCFG   ) (24, 24, "CMPW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMEOCCFG   ) (23,  0, "ECMEOUTCLRT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMPEM      ) ( 1,  1, "MSKM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMPEM      ) ( 0,  0, "MSKC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_ECMETMK2; i++) {
        (*ECMETMK2    [i]) (31, 31, "ECMETMK31", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (30, 30, "ECMETMK30", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (29, 29, "ECMETMK29", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (28, 28, "ECMETMK28", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (27, 27, "ECMETMK27", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (26, 26, "ECMETMK26", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (25, 25, "ECMETMK25", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (24, 24, "ECMETMK24", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (23, 23, "ECMETMK23", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (22, 22, "ECMETMK22", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (21, 21, "ECMETMK21", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (20, 20, "ECMETMK20", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (19, 19, "ECMETMK19", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (18, 18, "ECMETMK18", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (17, 17, "ECMETMK17", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (16, 16, "ECMETMK16", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (15, 15, "ECMETMK15", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (14, 14, "ECMETMK14", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (13, 13, "ECMETMK13", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (12, 12, "ECMETMK12", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (11, 11, "ECMETMK11", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) (10, 10, "ECMETMK10", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 9,  9, "ECMETMK09", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 8,  8, "ECMETMK08", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 7,  7, "ECMETMK07", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 6,  6, "ECMETMK06", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 5,  5, "ECMETMK05", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 4,  4, "ECMETMK04", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 3,  3, "ECMETMK03", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 2,  2, "ECMETMK02", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 1,  1, "ECMETMK01", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK2    [i]) ( 0,  0, "ECMETMK00", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMETMK3; i++) {
        (*ECMETMK3    [i]) (31, 31, "ECMETMK31", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (30, 30, "ECMETMK30", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (29, 29, "ECMETMK29", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (28, 28, "ECMETMK28", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (27, 27, "ECMETMK27", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (26, 26, "ECMETMK26", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (25, 25, "ECMETMK25", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (24, 24, "ECMETMK24", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (23, 23, "ECMETMK23", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (22, 22, "ECMETMK22", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (21, 21, "ECMETMK21", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (20, 20, "ECMETMK20", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (19, 19, "ECMETMK19", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (18, 18, "ECMETMK18", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (17, 17, "ECMETMK17", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (16, 16, "ECMETMK16", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (15, 15, "ECMETMK15", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (14, 14, "ECMETMK14", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (13, 13, "ECMETMK13", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (12, 12, "ECMETMK12", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (11, 11, "ECMETMK11", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) (10, 10, "ECMETMK10", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 9,  9, "ECMETMK09", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 8,  8, "ECMETMK08", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 7,  7, "ECMETMK07", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 6,  6, "ECMETMK06", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 5,  5, "ECMETMK05", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 4,  4, "ECMETMK04", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 3,  3, "ECMETMK03", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 2,  2, "ECMETMK02", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 1,  1, "ECMETMK01", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK3    [i]) ( 0,  0, "ECMETMK00", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMETMK0; i++) {
        (*ECMETMK0    [i]) (31, 31, "ECMETMK31", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (30, 30, "ECMETMK30", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (29, 29, "ECMETMK29", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (28, 28, "ECMETMK28", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (27, 27, "ECMETMK27", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (26, 26, "ECMETMK26", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (25, 25, "ECMETMK25", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (24, 24, "ECMETMK24", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (23, 23, "ECMETMK23", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (22, 22, "ECMETMK22", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (21, 21, "ECMETMK21", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (20, 20, "ECMETMK20", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (19, 19, "ECMETMK19", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (18, 18, "ECMETMK18", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (17, 17, "ECMETMK17", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (16, 16, "ECMETMK16", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (15, 15, "ECMETMK15", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (14, 14, "ECMETMK14", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (13, 13, "ECMETMK13", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (12, 12, "ECMETMK12", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (11, 11, "ECMETMK11", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) (10, 10, "ECMETMK10", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 9,  9, "ECMETMK09", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 8,  8, "ECMETMK08", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 7,  7, "ECMETMK07", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 6,  6, "ECMETMK06", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 5,  5, "ECMETMK05", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 4,  4, "ECMETMK04", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 3,  3, "ECMETMK03", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 2,  2, "ECMETMK02", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 1,  1, "ECMETMK01", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK0    [i]) ( 0,  0, "ECMETMK00", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMETMK1; i++) {
        (*ECMETMK1    [i]) (31, 31, "ECMETMK31", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (30, 30, "ECMETMK30", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (29, 29, "ECMETMK29", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (28, 28, "ECMETMK28", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (27, 27, "ECMETMK27", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (26, 26, "ECMETMK26", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (25, 25, "ECMETMK25", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (24, 24, "ECMETMK24", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (23, 23, "ECMETMK23", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (22, 22, "ECMETMK22", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (21, 21, "ECMETMK21", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (20, 20, "ECMETMK20", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (19, 19, "ECMETMK19", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (18, 18, "ECMETMK18", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (17, 17, "ECMETMK17", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (16, 16, "ECMETMK16", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (15, 15, "ECMETMK15", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (14, 14, "ECMETMK14", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (13, 13, "ECMETMK13", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (12, 12, "ECMETMK12", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (11, 11, "ECMETMK11", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) (10, 10, "ECMETMK10", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 9,  9, "ECMETMK09", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 8,  8, "ECMETMK08", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 7,  7, "ECMETMK07", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 6,  6, "ECMETMK06", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 5,  5, "ECMETMK05", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 4,  4, "ECMETMK04", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 3,  3, "ECMETMK03", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 2,  2, "ECMETMK02", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 1,  1, "ECMETMK01", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETMK1    [i]) ( 0,  0, "ECMETMK00", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMETCCFG; i++) {
        (*ECMETCCFG   [i]) (31, 31, "EOCIEN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMETCCFG   [i]) (24, 24, "CMPW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMETCCFG   [i]) (23,  0, "ECMEOUTCLRT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG; i++) {
        (*ECMDTMCFG   [i]) (31, 31, "ECMDTME31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (30, 30, "ECMDTME30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (29, 29, "ECMDTME29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (28, 28, "ECMDTME28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (27, 27, "ECMDTME27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (26, 26, "ECMDTME26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (25, 25, "ECMDTME25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (24, 24, "ECMDTME24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (23, 23, "ECMDTME23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (22, 22, "ECMDTME22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (21, 21, "ECMDTME21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (20, 20, "ECMDTME20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (19, 19, "ECMDTME19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (18, 18, "ECMDTME18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (17, 17, "ECMDTME17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (16, 16, "ECMDTME16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (15, 15, "ECMDTME15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (14, 14, "ECMDTME14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (13, 13, "ECMDTME13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (12, 12, "ECMDTME12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (11, 11, "ECMDTME11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) (10, 10, "ECMDTME10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 9,  9, "ECMDTME09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 8,  8, "ECMDTME08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 7,  7, "ECMDTME07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 6,  6, "ECMDTME06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 5,  5, "ECMDTME05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 4,  4, "ECMDTME04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 3,  3, "ECMDTME03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 2,  2, "ECMDTME02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 1,  1, "ECMDTME01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG   [i]) ( 0,  0, "ECMDTME00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        (*ECMPE       [i]) (31, 31, "ECMPE31" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (30, 30, "ECMPE30" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (29, 29, "ECMPE29" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (28, 28, "ECMPE28" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (27, 27, "ECMPE27" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (26, 26, "ECMPE26" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (25, 25, "ECMPE25" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (24, 24, "ECMPE24" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (23, 23, "ECMPE23" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (22, 22, "ECMPE22" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (21, 21, "ECMPE21" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (20, 20, "ECMPE20" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (19, 19, "ECMPE19" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (18, 18, "ECMPE18" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (17, 17, "ECMPE17" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (16, 16, "ECMPE16" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (15, 15, "ECMPE15" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (14, 14, "ECMPE14" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (13, 13, "ECMPE13" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (12, 12, "ECMPE12" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (11, 11, "ECMPE11" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) (10, 10, "ECMPE10" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 9,  9, "ECMPE09" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 8,  8, "ECMPE08" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 7,  7, "ECMPE07" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 6,  6, "ECMPE06" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 5,  5, "ECMPE05" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 4,  4, "ECMPE04" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 3,  3, "ECMPE03" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 2,  2, "ECMPE02" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 1,  1, "ECMPE01" , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMPE       [i]) ( 0,  0, "ECMPE00" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        (*ECMEMK      [i]) (31, 31, "ECMEMK31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (30, 30, "ECMEMK30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (29, 29, "ECMEMK29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (28, 28, "ECMEMK28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (27, 27, "ECMEMK27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (26, 26, "ECMEMK26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (25, 25, "ECMEMK25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (24, 24, "ECMEMK24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (23, 23, "ECMEMK23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (22, 22, "ECMEMK22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (21, 21, "ECMEMK21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (20, 20, "ECMEMK20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (19, 19, "ECMEMK19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (18, 18, "ECMEMK18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (17, 17, "ECMEMK17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (16, 16, "ECMEMK16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (15, 15, "ECMEMK15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (14, 14, "ECMEMK14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (13, 13, "ECMEMK13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (12, 12, "ECMEMK12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (11, 11, "ECMEMK11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) (10, 10, "ECMEMK10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 9,  9, "ECMEMK09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 8,  8, "ECMEMK08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 7,  7, "ECMEMK07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 6,  6, "ECMEMK06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 5,  5, "ECMEMK05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 4,  4, "ECMEMK04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 3,  3, "ECMEMK03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 2,  2, "ECMEMK02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 1,  1, "ECMEMK01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMEMK      [i]) ( 0,  0, "ECMEMK00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMISCFG; i++) {
        (*ECMISCFG    [i]) (31, 31, "ECMIS31" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (30, 30, "ECMIS30" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (29, 29, "ECMIS29" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (28, 28, "ECMIS28" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (27, 27, "ECMIS27" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (26, 26, "ECMIS26" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (25, 25, "ECMIS25" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (24, 24, "ECMIS24" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (23, 23, "ECMIS23" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (22, 22, "ECMIS22" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (21, 21, "ECMIS21" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (20, 20, "ECMIS20" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (19, 19, "ECMIS19" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (18, 18, "ECMIS18" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (17, 17, "ECMIS17" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (16, 16, "ECMIS16" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (15, 15, "ECMIS15" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (14, 14, "ECMIS14" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (13, 13, "ECMIS13" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (12, 12, "ECMIS12" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (11, 11, "ECMIS11" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) (10, 10, "ECMIS10" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 9,  9, "ECMIS09" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 8,  8, "ECMIS08" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 7,  7, "ECMIS07" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 6,  6, "ECMIS06" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 5,  5, "ECMIS05" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 4,  4, "ECMIS04" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 3,  3, "ECMIS03" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 2,  2, "ECMIS02" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 1,  1, "ECMIS01" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMISCFG    [i]) ( 0,  0, "ECMIS00" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMINCFG3; i++) {
        (*ECMINCFG3   [i]) (31, 31, "ECMIE31" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (30, 30, "ECMIE30" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (29, 29, "ECMIE29" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (28, 28, "ECMIE28" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (27, 27, "ECMIE27" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (26, 26, "ECMIE26" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (25, 25, "ECMIE25" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (24, 24, "ECMIE24" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (23, 23, "ECMIE23" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (22, 22, "ECMIE22" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (21, 21, "ECMIE21" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (20, 20, "ECMIE20" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (19, 19, "ECMIE19" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (18, 18, "ECMIE18" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (17, 17, "ECMIE17" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (16, 16, "ECMIE16" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (15, 15, "ECMIE15" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (14, 14, "ECMIE14" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (13, 13, "ECMIE13" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (12, 12, "ECMIE12" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (11, 11, "ECMIE11" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) (10, 10, "ECMIE10" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 9,  9, "ECMIE09" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 8,  8, "ECMIE08" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 7,  7, "ECMIE07" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 6,  6, "ECMIE06" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 5,  5, "ECMIE05" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 4,  4, "ECMIE04" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 3,  3, "ECMIE03" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 2,  2, "ECMIE02" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 1,  1, "ECMIE01" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG3   [i]) ( 0,  0, "ECMIE00" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMINCFG2; i++) {
        (*ECMINCFG2   [i]) (31, 31, "ECMIE31" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (30, 30, "ECMIE30" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (29, 29, "ECMIE29" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (28, 28, "ECMIE28" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (27, 27, "ECMIE27" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (26, 26, "ECMIE26" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (25, 25, "ECMIE25" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (24, 24, "ECMIE24" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (23, 23, "ECMIE23" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (22, 22, "ECMIE22" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (21, 21, "ECMIE21" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (20, 20, "ECMIE20" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (19, 19, "ECMIE19" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (18, 18, "ECMIE18" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (17, 17, "ECMIE17" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (16, 16, "ECMIE16" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (15, 15, "ECMIE15" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (14, 14, "ECMIE14" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (13, 13, "ECMIE13" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (12, 12, "ECMIE12" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (11, 11, "ECMIE11" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) (10, 10, "ECMIE10" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 9,  9, "ECMIE09" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 8,  8, "ECMIE08" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 7,  7, "ECMIE07" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 6,  6, "ECMIE06" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 5,  5, "ECMIE05" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 4,  4, "ECMIE04" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 3,  3, "ECMIE03" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 2,  2, "ECMIE02" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 1,  1, "ECMIE01" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG2   [i]) ( 0,  0, "ECMIE00" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMINCFG1; i++) {
        (*ECMINCFG1   [i]) (31, 31, "ECMIE31" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (30, 30, "ECMIE30" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (29, 29, "ECMIE29" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (28, 28, "ECMIE28" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (27, 27, "ECMIE27" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (26, 26, "ECMIE26" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (25, 25, "ECMIE25" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (24, 24, "ECMIE24" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (23, 23, "ECMIE23" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (22, 22, "ECMIE22" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (21, 21, "ECMIE21" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (20, 20, "ECMIE20" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (19, 19, "ECMIE19" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (18, 18, "ECMIE18" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (17, 17, "ECMIE17" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (16, 16, "ECMIE16" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (15, 15, "ECMIE15" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (14, 14, "ECMIE14" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (13, 13, "ECMIE13" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (12, 12, "ECMIE12" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (11, 11, "ECMIE11" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) (10, 10, "ECMIE10" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 9,  9, "ECMIE09" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 8,  8, "ECMIE08" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 7,  7, "ECMIE07" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 6,  6, "ECMIE06" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 5,  5, "ECMIE05" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 4,  4, "ECMIE04" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 3,  3, "ECMIE03" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 2,  2, "ECMIE02" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 1,  1, "ECMIE01" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG1   [i]) ( 0,  0, "ECMIE00" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMINCFG0; i++) {
        (*ECMINCFG0   [i]) (31, 31, "ECMIE31" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (30, 30, "ECMIE30" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (29, 29, "ECMIE29" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (28, 28, "ECMIE28" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (27, 27, "ECMIE27" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (26, 26, "ECMIE26" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (25, 25, "ECMIE25" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (24, 24, "ECMIE24" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (23, 23, "ECMIE23" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (22, 22, "ECMIE22" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (21, 21, "ECMIE21" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (20, 20, "ECMIE20" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (19, 19, "ECMIE19" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (18, 18, "ECMIE18" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (17, 17, "ECMIE17" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (16, 16, "ECMIE16" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (15, 15, "ECMIE15" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (14, 14, "ECMIE14" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (13, 13, "ECMIE13" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (12, 12, "ECMIE12" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (11, 11, "ECMIE11" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) (10, 10, "ECMIE10" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 9,  9, "ECMIE09" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 8,  8, "ECMIE08" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 7,  7, "ECMIE07" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 6,  6, "ECMIE06" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 5,  5, "ECMIE05" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 4,  4, "ECMIE04" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 3,  3, "ECMIE03" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 2,  2, "ECMIE02" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 1,  1, "ECMIE01" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMINCFG0   [i]) ( 0,  0, "ECMIE00" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG0; i++) {
        (*ECMDTMCFG0  [i]) (31, 31, "ECMDTME31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (30, 30, "ECMDTME30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (29, 29, "ECMDTME29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (28, 28, "ECMDTME28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (27, 27, "ECMDTME27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (26, 26, "ECMDTME26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (25, 25, "ECMDTME25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (24, 24, "ECMDTME24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (23, 23, "ECMDTME23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (22, 22, "ECMDTME22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (21, 21, "ECMDTME21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (20, 20, "ECMDTME20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (19, 19, "ECMDTME19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (18, 18, "ECMDTME18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (17, 17, "ECMDTME17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (16, 16, "ECMDTME16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (15, 15, "ECMDTME15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (14, 14, "ECMDTME14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (13, 13, "ECMDTME13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (12, 12, "ECMDTME12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (11, 11, "ECMDTME11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) (10, 10, "ECMDTME10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 9,  9, "ECMDTME09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 8,  8, "ECMDTME08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 7,  7, "ECMDTME07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 6,  6, "ECMDTME06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 5,  5, "ECMDTME05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 4,  4, "ECMDTME04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 3,  3, "ECMDTME03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 2,  2, "ECMDTME02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 1,  1, "ECMDTME01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG0  [i]) ( 0,  0, "ECMDTME00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG1; i++) {
        (*ECMDTMCFG1  [i]) (31, 31, "ECMDTME31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (30, 30, "ECMDTME30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (29, 29, "ECMDTME29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (28, 28, "ECMDTME28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (27, 27, "ECMDTME27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (26, 26, "ECMDTME26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (25, 25, "ECMDTME25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (24, 24, "ECMDTME24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (23, 23, "ECMDTME23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (22, 22, "ECMDTME22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (21, 21, "ECMDTME21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (20, 20, "ECMDTME20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (19, 19, "ECMDTME19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (18, 18, "ECMDTME18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (17, 17, "ECMDTME17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (16, 16, "ECMDTME16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (15, 15, "ECMDTME15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (14, 14, "ECMDTME14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (13, 13, "ECMDTME13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (12, 12, "ECMDTME12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (11, 11, "ECMDTME11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) (10, 10, "ECMDTME10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 9,  9, "ECMDTME09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 8,  8, "ECMDTME08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 7,  7, "ECMDTME07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 6,  6, "ECMDTME06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 5,  5, "ECMDTME05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 4,  4, "ECMDTME04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 3,  3, "ECMDTME03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 2,  2, "ECMDTME02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 1,  1, "ECMDTME01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG1  [i]) ( 0,  0, "ECMDTME00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG3; i++) {
        (*ECMDTMCFG3  [i]) (31, 31, "ECMDTME31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (30, 30, "ECMDTME30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (29, 29, "ECMDTME29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (28, 28, "ECMDTME28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (27, 27, "ECMDTME27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (26, 26, "ECMDTME26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (25, 25, "ECMDTME25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (24, 24, "ECMDTME24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (23, 23, "ECMDTME23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (22, 22, "ECMDTME22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (21, 21, "ECMDTME21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (20, 20, "ECMDTME20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (19, 19, "ECMDTME19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (18, 18, "ECMDTME18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (17, 17, "ECMDTME17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (16, 16, "ECMDTME16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (15, 15, "ECMDTME15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (14, 14, "ECMDTME14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (13, 13, "ECMDTME13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (12, 12, "ECMDTME12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (11, 11, "ECMDTME11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) (10, 10, "ECMDTME10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 9,  9, "ECMDTME09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 8,  8, "ECMDTME08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 7,  7, "ECMDTME07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 6,  6, "ECMDTME06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 5,  5, "ECMDTME05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 4,  4, "ECMDTME04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 3,  3, "ECMDTME03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 2,  2, "ECMDTME02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 1,  1, "ECMDTME01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG3  [i]) ( 0,  0, "ECMDTME00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        (*ECMIRCFG    [i]) (31, 31, "ECMIRE31", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (30, 30, "ECMIRE30", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (29, 29, "ECMIRE29", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (28, 28, "ECMIRE28", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (27, 27, "ECMIRE27", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (26, 26, "ECMIRE26", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (25, 25, "ECMIRE25", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (24, 24, "ECMIRE24", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (23, 23, "ECMIRE23", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (22, 22, "ECMIRE22", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (21, 21, "ECMIRE21", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (20, 20, "ECMIRE20", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (19, 19, "ECMIRE19", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (18, 18, "ECMIRE18", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (17, 17, "ECMIRE17", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (16, 16, "ECMIRE16", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (15, 15, "ECMIRE15", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (14, 14, "ECMIRE14", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (13, 13, "ECMIRE13", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (12, 12, "ECMIRE12", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (11, 11, "ECMIRE11", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) (10, 10, "ECMIRE10", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 9,  9, "ECMIRE09", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 8,  8, "ECMIRE08", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 7,  7, "ECMIRE07", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 6,  6, "ECMIRE06", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 5,  5, "ECMIRE05", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 4,  4, "ECMIRE04", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 3,  3, "ECMIRE03", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 2,  2, "ECMIRE02", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 1,  1, "ECMIRE01", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*ECMIRCFG    [i]) ( 0,  0, "ECMIRE00", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG2; i++) {
        (*ECMDTMCFG2  [i]) (31, 31, "ECMDTME31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (30, 30, "ECMDTME30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (29, 29, "ECMDTME29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (28, 28, "ECMDTME28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (27, 27, "ECMDTME27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (26, 26, "ECMDTME26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (25, 25, "ECMDTME25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (24, 24, "ECMDTME24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (23, 23, "ECMDTME23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (22, 22, "ECMDTME22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (21, 21, "ECMDTME21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (20, 20, "ECMDTME20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (19, 19, "ECMDTME19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (18, 18, "ECMDTME18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (17, 17, "ECMDTME17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (16, 16, "ECMDTME16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (15, 15, "ECMDTME15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (14, 14, "ECMDTME14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (13, 13, "ECMDTME13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (12, 12, "ECMDTME12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (11, 11, "ECMDTME11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) (10, 10, "ECMDTME10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 9,  9, "ECMDTME09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 8,  8, "ECMDTME08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 7,  7, "ECMDTME07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 6,  6, "ECMDTME06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 5,  5, "ECMDTME05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 4,  4, "ECMDTME04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 3,  3, "ECMDTME03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 2,  2, "ECMDTME02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 1,  1, "ECMDTME01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMDTMCFG2  [i]) ( 0,  0, "ECMDTME00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        (*ECMESSTC    [i]) (31, 31, "ECMCLSSE31", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (30, 30, "ECMCLSSE30", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (29, 29, "ECMCLSSE29", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (28, 28, "ECMCLSSE28", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (27, 27, "ECMCLSSE27", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (26, 26, "ECMCLSSE26", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (25, 25, "ECMCLSSE25", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (24, 24, "ECMCLSSE24", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (23, 23, "ECMCLSSE23", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (22, 22, "ECMCLSSE22", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (21, 21, "ECMCLSSE21", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (20, 20, "ECMCLSSE20", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (19, 19, "ECMCLSSE19", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (18, 18, "ECMCLSSE18", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (17, 17, "ECMCLSSE17", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (16, 16, "ECMCLSSE16", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (15, 15, "ECMCLSSE15", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (14, 14, "ECMCLSSE14", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (13, 13, "ECMCLSSE13", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (12, 12, "ECMCLSSE12", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (11, 11, "ECMCLSSE11", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) (10, 10, "ECMCLSSE10", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 9,  9, "ECMCLSSE09", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 8,  8, "ECMCLSSE08", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 7,  7, "ECMCLSSE07", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 6,  6, "ECMCLSSE06", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 5,  5, "ECMCLSSE05", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 4,  4, "ECMCLSSE04", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 3,  3, "ECMCLSSE03", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 2,  2, "ECMCLSSE02", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 1,  1, "ECMCLSSE01", 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*ECMESSTC    [i]) ( 0,  0, "ECMCLSSE00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ECMmESSTR; i++) {
        (*ECMmESSTR   [i]) (31, 31, "ECMmSSE31", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (30, 30, "ECMmSSE30", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (29, 29, "ECMmSSE29", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (28, 28, "ECMmSSE28", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (27, 27, "ECMmSSE27", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (26, 26, "ECMmSSE26", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (25, 25, "ECMmSSE25", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (24, 24, "ECMmSSE24", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (23, 23, "ECMmSSE23", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (22, 22, "ECMmSSE22", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (21, 21, "ECMmSSE21", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (20, 20, "ECMmSSE20", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (19, 19, "ECMmSSE19", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (18, 18, "ECMmSSE18", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (17, 17, "ECMmSSE17", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (16, 16, "ECMmSSE16", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (15, 15, "ECMmSSE15", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (14, 14, "ECMmSSE14", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (13, 13, "ECMmSSE13", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (12, 12, "ECMmSSE12", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (11, 11, "ECMmSSE11", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) (10, 10, "ECMmSSE10", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 9,  9, "ECMmSSE09", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 8,  8, "ECMmSSE08", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 7,  7, "ECMmSSE07", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 6,  6, "ECMmSSE06", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 5,  5, "ECMmSSE05", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 4,  4, "ECMmSSE04", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 3,  3, "ECMmSSE03", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 2,  2, "ECMmSSE02", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 1,  1, "ECMmSSE01", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ECMmESSTR   [i]) ( 0,  0, "ECMmSSE00", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    // Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ECMmESET"]["ECMmEST" ] = &Cecm_u2a_regif::cb_ECMmESET_ECMmEST;
    mWrCbAPI["ECMmECLR"]["ECMmECT" ] = &Cecm_u2a_regif::cb_ECMmECLR_ECMmECT;
    mWrCbAPI["ECMmESET0"]["ECMmEST" ] = &Cecm_u2a_regif::cb_ECMmESET0_ECMmEST;
    mWrCbAPI["ECMmECLR0"]["ECMmECT" ] = &Cecm_u2a_regif::cb_ECMmECLR0_ECMmECT;
    mWrCbAPI["ECMmESET1"]["ECMmEST" ] = &Cecm_u2a_regif::cb_ECMmESET1_ECMmEST;
    mWrCbAPI["ECMmECLR1"]["ECMmECT" ] = &Cecm_u2a_regif::cb_ECMmECLR1_ECMmECT;
    mWrCbAPI["ECMmESET2"]["ECMmEST" ] = &Cecm_u2a_regif::cb_ECMmESET2_ECMmEST;
    mWrCbAPI["ECMmECLR2"]["ECMmECT" ] = &Cecm_u2a_regif::cb_ECMmECLR2_ECMmECT;
    mWrCbAPI["ECMmESET3"]["ECMmEST" ] = &Cecm_u2a_regif::cb_ECMmESET3_ECMmEST;
    mWrCbAPI["ECMmECLR3"]["ECMmECT" ] = &Cecm_u2a_regif::cb_ECMmECLR3_ECMmECT;
    mWrCbAPI["ECMKCPROT"]["KCE"     ] = &Cecm_u2a_regif::cb_ECMKCPROT_KCE;
    mWrCbAPI["ECMDTMCTL"]["DTMSTP"  ] = &Cecm_u2a_regif::cb_ECMDTMCTL_DTMSTP;
    mWrCbAPI["ECMDTMCMP"]["ECMDTMCMP"] = &Cecm_u2a_regif::cb_ECMDTMCMP_ECMDTMCMP;
    mWrCbAPI["ECMEOCCFG"]["ECMEOUTCLRT"] = &Cecm_u2a_regif::cb_ECMEOCCFG_ECMEOUTCLRT;
    mWrCbAPI["ECMPEM"  ]["MSKC"    ] = &Cecm_u2a_regif::cb_ECMPEM_MSKC;

    mRdCbAPI["ECMDTMR" ]["ECMDTMR" ] = &Cecm_u2a_regif::cb_ECMDTMR_ECMDTMR;

    mRdDbgCbAPI["ECMDTMR" ]["ECMDTMR" ] = &Cecm_u2a_regif::cbDBG_ECMDTMR_ECMDTMR;

    for(uint i = 0; i < emNUM_ECMISCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMISCFG"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIS00"] = &Cecm_u2a_regif::cb_ECMISCFG_ECMIS00;
    }
    for(uint i = 0; i < emNUM_ECMINCFG0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG0"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIE00"] = &Cecm_u2a_regif::cb_ECMINCFG0_ECMIE00;
    }
    for(uint i = 0; i < emNUM_ECMINCFG1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG1"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIE00"] = &Cecm_u2a_regif::cb_ECMINCFG1_ECMIE00;
    }
    for(uint i = 0; i < emNUM_ECMINCFG2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG2"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIE00"] = &Cecm_u2a_regif::cb_ECMINCFG2_ECMIE00;
    }
    for(uint i = 0; i < emNUM_ECMINCFG3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMINCFG3"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIE00"] = &Cecm_u2a_regif::cb_ECMINCFG3_ECMIE00;
    }
    for(uint i = 0; i < emNUM_ECMIRCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMIRCFG"<< i;
        mWrCbAPI[str_tmp.str()]["ECMIRE00"] = &Cecm_u2a_regif::cb_ECMIRCFG_ECMIRE00;
    }
    for(uint i = 0; i < emNUM_ECMEMK; i++) {
        str_tmp.str("");
        str_tmp<<"ECMEMK"<< i;
        mWrCbAPI[str_tmp.str()]["ECMEMK00"] = &Cecm_u2a_regif::cb_ECMEMK_ECMEMK00;
    }
    for(uint i = 0; i < emNUM_ECMETMK0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK0"<< i;
        mWrCbAPI[str_tmp.str()]["ECMETMK00"] = &Cecm_u2a_regif::cb_ECMETMK0_ECMETMK00;
    }
    for(uint i = 0; i < emNUM_ECMETMK1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK1"<< i;
        mWrCbAPI[str_tmp.str()]["ECMETMK00"] = &Cecm_u2a_regif::cb_ECMETMK1_ECMETMK00;
    }
    for(uint i = 0; i < emNUM_ECMETMK2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK2"<< i;
        mWrCbAPI[str_tmp.str()]["ECMETMK00"] = &Cecm_u2a_regif::cb_ECMETMK2_ECMETMK00;
    }
    for(uint i = 0; i < emNUM_ECMETMK3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETMK3"<< i;
        mWrCbAPI[str_tmp.str()]["ECMETMK00"] = &Cecm_u2a_regif::cb_ECMETMK3_ECMETMK00;
    }
    for(uint i = 0; i < emNUM_ECMESSTC; i++) {
        str_tmp.str("");
        str_tmp<<"ECMESSTC"<< i;
        mWrCbAPI[str_tmp.str()]["ECMCLSSE00"] = &Cecm_u2a_regif::cb_ECMESSTC_ECMCLSSE00;
    }
    for(uint i = 0; i < emNUM_ECMPE; i++) {
        str_tmp.str("");
        str_tmp<<"ECMPE"<< i;
        mWrCbAPI[str_tmp.str()]["ECMPE00"] = &Cecm_u2a_regif::cb_ECMPE_ECMPE00;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG"<< i;
        mWrCbAPI[str_tmp.str()]["ECMDTME00"] = &Cecm_u2a_regif::cb_ECMDTMCFG_ECMDTME00;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG0; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG0"<< i;
        mWrCbAPI[str_tmp.str()]["ECMDTME00"] = &Cecm_u2a_regif::cb_ECMDTMCFG0_ECMDTME00;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG1; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG1"<< i;
        mWrCbAPI[str_tmp.str()]["ECMDTME00"] = &Cecm_u2a_regif::cb_ECMDTMCFG1_ECMDTME00;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG2; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG2"<< i;
        mWrCbAPI[str_tmp.str()]["ECMDTME00"] = &Cecm_u2a_regif::cb_ECMDTMCFG2_ECMDTME00;
    }
    for(uint i = 0; i < emNUM_ECMDTMCFG3; i++) {
        str_tmp.str("");
        str_tmp<<"ECMDTMCFG3"<< i;
        mWrCbAPI[str_tmp.str()]["ECMDTME00"] = &Cecm_u2a_regif::cb_ECMDTMCFG3_ECMDTME00;
    }
    for(uint i = 0; i < emNUM_ECMETCCFG; i++) {
        str_tmp.str("");
        str_tmp<<"ECMETCCFG"<< i;
        mWrCbAPI[str_tmp.str()]["ECMEOUTCLRT"] = &Cecm_u2a_regif::cb_ECMETCCFG_ECMEOUTCLRT;
    }

    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Cecm_u2a_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Cecm_u2a_regif::~Cecm_u2a_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Cecm_u2a_regif::uint Cecm_u2a_regif::bit_select(cuint val,    ///< [in] Writting address
                                                cuint start,  ///< [in] start bit position
                                                cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_u2a_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_u2a_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_u2a_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_u2a_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    assert(size != 0);
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_u2a_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                    const unsigned char *p_data,  ///< [in] Writing data
                                    cuint size,                   ///< [in] Data size (byte)
                                    bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_u2a_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size,              ///< [in]  Data size (byte)
                                    bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cecm_u2a_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                 unsigned char *p_data,          ///< [out] Reading data
                                 cuint size,                     ///< [in]  Data size (byte)
                                 cuint reg_index,                ///< [in]  Register index
                                 bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    uint pre_data = 0;
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }

    if (mIsReset) {
        re_printf("warning", "Cannot launch call-back function during reset period\n");
    } else {
        if (size < reg_length) {
            re_printf("warning","Should read all bit in a register\n");
        }
        pre_data = (uint)(*Register);
        pst_data = Register->read();
        if (!IsDbgFunc) {
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        } else {
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdDbgCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdDbgCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }

    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cecm_u2a_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                 const unsigned char *p_data,      ///< [in] Writing data
                                 cuint size,                       ///< [in] Data size (byte)
                                 cuint reg_index,                  ///< [in] Register index
                                 bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc) {
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cecm_u2a_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoull((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cecm_u2a_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cecm_u2a_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                if (mDumpRegisterRW) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                if (mAPBAccessMode) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                if (mDumpBitInfo) {
                    ret = "true";
                } else {
                    ret = "false";
                }
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cecm_u2a_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoull(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoull(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Cecm_u2a_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Cecm_u2a_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Cecm_u2a_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif








/// convert string to vector
/// @return vector
std::vector<std::string> Cecm_u2a_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cecm_u2a_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cecm_u2a_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(23)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cecm_u2a_regif::get_reg_index(cuint access_addr)
{
    if (access_addr < (1<<12)) {
        if (mRegMap[access_addr] != (1<<12)) {
            return mRegMap[access_addr];
        }
    }
    return -1;
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cecm_u2a_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cecm_u2a_regif::next_reg_object()
{
    assert(mCurReg != NULL);
    mCurReg = mCurReg->prev;
    if (mCurReg != NULL) {
        return mCurReg->my_p;
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cecm_u2a_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cecm_u2a_regif::uint Cecm_u2a_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cecm_u2a_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

}

/// Get file name and line number
/// @return none
void Cecm_u2a_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cecm_u2a_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cecm_u2a_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

}

#ifdef USE_CWR_SYSTEMC
uint Cecm_u2a_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Cecm_u2a_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Cecm_u2a_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
