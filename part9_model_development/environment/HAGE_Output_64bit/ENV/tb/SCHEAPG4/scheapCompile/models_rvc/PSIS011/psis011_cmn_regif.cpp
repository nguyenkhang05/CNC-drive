// -----------------------------------------------------------------------------
// $Id: psis011_cmn_regif.cpp,v 1.5 2017/12/07 02:00:02 chanle Exp $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : psis011_cmn_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE psis011_cmn
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  12 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name                           reg_name                     wsize   rsize      length offset  factor_start    factor_end  factor_index    factor_step access   init   support  callback
//     %%REG      PSI5SPUOEB                    PSI5SPUOEB                  8|16|32 8|16|32      32     0x000   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUOMD                    PSI5SPUOMD                  8|16|32 8|16|32      32     0x004   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUOS                     PSI5SPUOS                   8|16|32 8|16|32      32     0x008   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SPUNFST                   PSI5SPUNFST                 8|16|32 8|16|32      32     0x00C   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUSWR                    PSI5SPUSWR                  8|16|32 8|16|32      32     0x010   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPRMBC                    PSI5SPRMBC                  8|16|32 8|16|32      32     0x014   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUCLB                    PSI5SPUCLB                  8|16|32 8|16|32      32     0x020   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUPTS                    PSI5SPUPTS                  8|16|32 8|16|32      32     0x024   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUBCE                    PSI5SPUBCE                  8|16|32 8|16|32      32     0x028   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPUBPR                    PSI5SPUBPR                    16|32 8|16|32      32     0x02C   -               -           -               -           R|W      0x40000 TRUE     -
//     %%REG      PSI5SPTPS                     PSI5SPTPS                        32 8|16|32      32     0x030   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCAS                    PSI5SPTCAS                  8|16|32 8|16|32      32     0x034   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCBS                    PSI5SPTCBS                  8|16|32 8|16|32      32     0x038   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCAE                    PSI5SPTCAE                  8|16|32 8|16|32      32     0x040   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCAC                    PSI5SPTCAC                  8|16|32 8|16|32      32     0x044   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCBE                    PSI5SPTCBE                  8|16|32 8|16|32      32     0x048   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTCBC                    PSI5SPTCBC                  8|16|32 8|16|32      32     0x04C   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPATCE                    PSI5SPATCE                  8|16|32 8|16|32      32     0x050   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPATCC                    PSI5SPATCC                  8|16|32 8|16|32      32     0x054   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SUCRIE                    PSI5SUCRIE                  8|16|32 8|16|32      32     0x058   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SUCTIE                    PSI5SUCTIE                  8|16|32 8|16|32      32     0x05C   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SUCDRE                    PSI5SUCDRE                  8|16|32 8|16|32      32     0x060   -               -           -               -           R|W      0x0     TRUE     -
// 
//     %%REG      PSI5SUCRD                     PSI5SUCRD                   8|16|32 8|16|32      32     0x070   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SUCRS                     PSI5SUCRS                   8|16|32 8|16|32      32     0x074   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SUCRSC                    PSI5SUCRSC                  8|16|32 8|16|32      32     0x078   -               -           -               -           R|W      0x0     TRUE     -
// 
//     %%REG      PSI5SPTFST                    PSI5SPTFST                  8|16|32 8|16|32      32     0x080   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTFNM                    PSI5SPTFNM                  8|16|32 8|16|32      32     0x084   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTFD1                    PSI5SPTFD1                  8|16|32 8|16|32      32     0x088   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTFD2                    PSI5SPTFD2                  8|16|32 8|16|32      32     0x08C   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SPTFS                     PSI5SPTFS                   8|16|32 8|16|32      32     0x090   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SPTFIS                    PSI5SPTFIS                  8|16|32 8|16|32      32     0x094   -               -           -               -           R        0x1     TRUE     -
//     %%REG      PSI5SUCTD                     PSI5SUCTD                   8|16|32 8|16|32      32     0x0A0   -               -           -               -           R|W      0x0     TRUE     -
//     %%REG      PSI5SUCTM                     PSI5SUCTM                   8|16|32 8|16|32      32     0x0A4   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SUCTS                     PSI5SUCTS                   8|16|32 8|16|32      32     0x0A8   -               -           -               -           R        0x0     TRUE     -
//     %%REG      PSI5SUCTSC                    PSI5SUCTSC                  8|16|32 8|16|32      32     0x0AC   -               -           -               -           R|W      0x0     TRUE     -
// 
//     
// %REG_NAME PSI5SPUOEB                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    OPEN               0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUOMD                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    OPMD               0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUOS                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    MSTS               2        2      0       R       TRUE        -
//     %%BIT    ACSTS              1        1      0       R       TRUE        -
//     %%BIT    SWSTS              0        0      0       R       TRUE        -
// 
// %REG_NAME PSI5SPUNFST                                                         
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    NFSET              0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUSWR                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SWRST              0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPRMBC                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    MBCLR              0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUCLB                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TMKV               7        1      0       R|W     TRUE        -
//     %%BIT    LBEN               0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUPTS                                                          
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTPRTY             9        8      0       R|W     TRUE        W
//     %%BIT    URPRTY             1        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUBCE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SCKEN              0        0      0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPUBPR                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    RXOSMP             19      16      4       R|W     TRUE        W
//     %%BIT    SCKDIV             15      8       0       R|W     TRUE        -
//     %%BIT    SCKPRS             6       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTPS                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSPRSU             25      16      0       R|W     TRUE        -
//     %%BIT    TSPRSL             6       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCAS                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCACLS            16      16      0       R|W     TRUE        W
//     %%BIT    TSCAEBS            8       8       0       R|W     TRUE        W
//     %%BIT    TSCACKS            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCBS                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCBCLS            16      16      0       R|W     TRUE        W
//     %%BIT    TSCBEBS            8       8       0       R|W     TRUE        W
//     %%BIT    TSCBCKS            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCAE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCAEB             0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCAC                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCACLR            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCBE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCBEB             0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTCBC                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TSCBCLR            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPATCE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ATSCEB             0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPATCC                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    ATSCCLR            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SUCRIE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    IERFIN             3       3       0       R|W     TRUE        -
//     %%BIT    IEROE              2       2       0       R|W     TRUE        -
//     %%BIT    IERFE              1       1       0       R|W     TRUE        -
//     %%BIT    IERPE              0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SUCTIE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    IETFIN             1       1       0       R|W     TRUE        -
//     %%BIT    IETOWE             0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SUCDRE                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DRQEUTFN           1       1       0       R|W     TRUE        -
//     %%BIT    DRQEURFN           0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SUCRD                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTRDT              7       0       0       R       TRUE        R
// 
// %REG_NAME PSI5SUCRS                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTRFIN             3       3       0       R       TRUE        -
//     %%BIT    UTROE              2       2       0       R       TRUE        -
//     %%BIT    UTRFE              1       1       0       R       TRUE        -
//     %%BIT    UTRPE              0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SUCRSC                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTRFINCL           3       3       0       R|W     TRUE        -
//     %%BIT    UTROECL            2       2       0       R|W     TRUE        -
//     %%BIT    UTRFECL            1       1       0       R|W     TRUE        -
//     %%BIT    UTRPECL            0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTFST                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TXST               0       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTFNM                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TXNUM              2       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTFD1                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TDT4               31      24      0       R|W     TRUE        W
//     %%BIT    TDT3               23      16      0       R|W     TRUE        W
//     %%BIT    TDT2               15      8       0       R|W     TRUE        W
//     %%BIT    TDT1               7       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTFD2                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TDT8               31      24      0       R|W     TRUE        W
//     %%BIT    TDT7               23      16      0       R|W     TRUE        W
//     %%BIT    TDT6               15      8       0       R|W     TRUE        W
//     %%BIT    TDT5               7       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SPTFS                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TXSTS              0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SPTFIS                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    TXFFFL             1       1       0       R       TRUE        -
//     %%BIT    TXFFEP             0       0       1       R       TRUE        -
// 
// %REG_NAME PSI5SUCTD                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTTDT              7       0       0       R|W     TRUE        W
// 
// %REG_NAME PSI5SUCTM                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTTF               1       1       0       R       TRUE        -
//     %%BIT    UTTBBF             0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SUCTS                                                            
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTTFIN             1       1       0       R       TRUE        -
//     %%BIT    UTTOWE             0       0       0       R       TRUE        -
// 
// %REG_NAME PSI5SUCTSC                                                           
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    UTTFINCL           1       1       0       R|W     TRUE        -
//     %%BIT    UTTOWECL           0       0       0       R|W     TRUE        W
////////////////////////////////////////////////////////////////////////////////
/// @file psis011_cmn_regif.cpp
/// @brief Register IF class of model PSIS011_CMN
/// $Id: psis011_cmn_regif.cpp,v 1.5 2017/12/07 02:00:02 chanle Exp $
/// $Date: 2017/12/07 02:00:02 $
/// $Revison$
/// $Author: chanle $
////////////////////////////////////////////////////////////////////////////////
#include "psis011_cmn_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cpsis011_cmn_regif::Cpsis011_cmn_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xB0/4))
    #endif
{
    CommandInit();
    PSI5SPUOEB  = new vpcl::re_register(0x0000, this, "PSI5SPUOEB" , name.c_str());
    PSI5SPUOMD  = new vpcl::re_register(0x0004, this, "PSI5SPUOMD" , name.c_str());
    PSI5SPUOS   = new vpcl::re_register(0x0008, this, "PSI5SPUOS"  , name.c_str());
    PSI5SPUNFST = new vpcl::re_register(0x000C, this, "PSI5SPUNFST", name.c_str());
    PSI5SPUSWR  = new vpcl::re_register(0x0010, this, "PSI5SPUSWR" , name.c_str());
    PSI5SPRMBC  = new vpcl::re_register(0x0014, this, "PSI5SPRMBC" , name.c_str());
    PSI5SPUCLB  = new vpcl::re_register(0x0020, this, "PSI5SPUCLB" , name.c_str());
    PSI5SPUPTS  = new vpcl::re_register(0x0024, this, "PSI5SPUPTS" , name.c_str());
    PSI5SPUBCE  = new vpcl::re_register(0x0028, this, "PSI5SPUBCE" , name.c_str());
    PSI5SPUBPR  = new vpcl::re_register(0x002C, this, "PSI5SPUBPR" , name.c_str());
    PSI5SPTPS   = new vpcl::re_register(0x0030, this, "PSI5SPTPS"  , name.c_str());
    PSI5SPTCAS  = new vpcl::re_register(0x0034, this, "PSI5SPTCAS" , name.c_str());
    PSI5SPTCBS  = new vpcl::re_register(0x0038, this, "PSI5SPTCBS" , name.c_str());
    PSI5SPTCAE  = new vpcl::re_register(0x0040, this, "PSI5SPTCAE" , name.c_str());
    PSI5SPTCAC  = new vpcl::re_register(0x0044, this, "PSI5SPTCAC" , name.c_str());
    PSI5SPTCBE  = new vpcl::re_register(0x0048, this, "PSI5SPTCBE" , name.c_str());
    PSI5SPTCBC  = new vpcl::re_register(0x004C, this, "PSI5SPTCBC" , name.c_str());
    PSI5SPATCE  = new vpcl::re_register(0x0050, this, "PSI5SPATCE" , name.c_str());
    PSI5SPATCC  = new vpcl::re_register(0x0054, this, "PSI5SPATCC" , name.c_str());
    PSI5SUCRIE  = new vpcl::re_register(0x0058, this, "PSI5SUCRIE" , name.c_str());
    PSI5SUCTIE  = new vpcl::re_register(0x005C, this, "PSI5SUCTIE" , name.c_str());
    PSI5SUCDRE  = new vpcl::re_register(0x0060, this, "PSI5SUCDRE" , name.c_str());
    PSI5SUCRD   = new vpcl::re_register(0x0070, this, "PSI5SUCRD"  , name.c_str());
    PSI5SUCRS   = new vpcl::re_register(0x0074, this, "PSI5SUCRS"  , name.c_str());
    PSI5SUCRSC  = new vpcl::re_register(0x0078, this, "PSI5SUCRSC" , name.c_str());
    PSI5SPTFST  = new vpcl::re_register(0x0080, this, "PSI5SPTFST" , name.c_str());
    PSI5SPTFNM  = new vpcl::re_register(0x0084, this, "PSI5SPTFNM" , name.c_str());
    PSI5SPTFD1  = new vpcl::re_register(0x0088, this, "PSI5SPTFD1" , name.c_str());
    PSI5SPTFD2  = new vpcl::re_register(0x008C, this, "PSI5SPTFD2" , name.c_str());
    PSI5SPTFS   = new vpcl::re_register(0x0090, this, "PSI5SPTFS"  , name.c_str());
    PSI5SPTFIS  = new vpcl::re_register(0x0094, this, "PSI5SPTFIS" , name.c_str());
    PSI5SUCTD   = new vpcl::re_register(0x00A0, this, "PSI5SUCTD"  , name.c_str());
    PSI5SUCTM   = new vpcl::re_register(0x00A4, this, "PSI5SUCTM"  , name.c_str());
    PSI5SUCTS   = new vpcl::re_register(0x00A8, this, "PSI5SUCTS"  , name.c_str());
    PSI5SUCTSC  = new vpcl::re_register(0x00AC, this, "PSI5SUCTSC" , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0044]     = index;
    mRegMap[0x0044 + 1] = index;
    mRegMap[0x0044 + 2] = index;
    mRegMap[0x0044 + 3] = index++;
    mRegMap[0x0048]     = index;
    mRegMap[0x0048 + 1] = index;
    mRegMap[0x0048 + 2] = index;
    mRegMap[0x0048 + 3] = index++;
    mRegMap[0x004C]     = index;
    mRegMap[0x004C + 1] = index;
    mRegMap[0x004C + 2] = index;
    mRegMap[0x004C + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mRegMap[0x0058]     = index;
    mRegMap[0x0058 + 1] = index;
    mRegMap[0x0058 + 2] = index;
    mRegMap[0x0058 + 3] = index++;
    mRegMap[0x005C]     = index;
    mRegMap[0x005C + 1] = index;
    mRegMap[0x005C + 2] = index;
    mRegMap[0x005C + 3] = index++;
    mRegMap[0x0060]     = index;
    mRegMap[0x0060 + 1] = index;
    mRegMap[0x0060 + 2] = index;
    mRegMap[0x0060 + 3] = index++;
    mRegMap[0x0070]     = index;
    mRegMap[0x0070 + 1] = index;
    mRegMap[0x0070 + 2] = index;
    mRegMap[0x0070 + 3] = index++;
    mRegMap[0x0074]     = index;
    mRegMap[0x0074 + 1] = index;
    mRegMap[0x0074 + 2] = index;
    mRegMap[0x0074 + 3] = index++;
    mRegMap[0x0078]     = index;
    mRegMap[0x0078 + 1] = index;
    mRegMap[0x0078 + 2] = index;
    mRegMap[0x0078 + 3] = index++;
    mRegMap[0x0080]     = index;
    mRegMap[0x0080 + 1] = index;
    mRegMap[0x0080 + 2] = index;
    mRegMap[0x0080 + 3] = index++;
    mRegMap[0x0084]     = index;
    mRegMap[0x0084 + 1] = index;
    mRegMap[0x0084 + 2] = index;
    mRegMap[0x0084 + 3] = index++;
    mRegMap[0x0088]     = index;
    mRegMap[0x0088 + 1] = index;
    mRegMap[0x0088 + 2] = index;
    mRegMap[0x0088 + 3] = index++;
    mRegMap[0x008C]     = index;
    mRegMap[0x008C + 1] = index;
    mRegMap[0x008C + 2] = index;
    mRegMap[0x008C + 3] = index++;
    mRegMap[0x0090]     = index;
    mRegMap[0x0090 + 1] = index;
    mRegMap[0x0090 + 2] = index;
    mRegMap[0x0090 + 3] = index++;
    mRegMap[0x0094]     = index;
    mRegMap[0x0094 + 1] = index;
    mRegMap[0x0094 + 2] = index;
    mRegMap[0x0094 + 3] = index++;
    mRegMap[0x00A0]     = index;
    mRegMap[0x00A0 + 1] = index;
    mRegMap[0x00A0 + 2] = index;
    mRegMap[0x00A0 + 3] = index++;
    mRegMap[0x00A4]     = index;
    mRegMap[0x00A4 + 1] = index;
    mRegMap[0x00A4 + 2] = index;
    mRegMap[0x00A4 + 3] = index++;
    mRegMap[0x00A8]     = index;
    mRegMap[0x00A8 + 1] = index;
    mRegMap[0x00A8 + 2] = index;
    mRegMap[0x00A8 + 3] = index++;
    mRegMap[0x00AC]     = index;
    mRegMap[0x00AC + 1] = index;
    mRegMap[0x00AC + 2] = index;
    mRegMap[0x00AC + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_PSI5SPUOEB   , PSI5SPUOEB->name() , PSI5SPUOEB->addr() );
    cw_instantiate_reg(CW_PSI5SPUOMD   , PSI5SPUOMD->name() , PSI5SPUOMD->addr() );
    cw_instantiate_reg(CW_PSI5SPUOS    , PSI5SPUOS->name()  , PSI5SPUOS->addr()  );
    cw_instantiate_reg(CW_PSI5SPUNFST  , PSI5SPUNFST->name(), PSI5SPUNFST->addr());
    cw_instantiate_reg(CW_PSI5SPUSWR   , PSI5SPUSWR->name() , PSI5SPUSWR->addr() );
    cw_instantiate_reg(CW_PSI5SPRMBC   , PSI5SPRMBC->name() , PSI5SPRMBC->addr() );
    cw_instantiate_reg(CW_PSI5SPUCLB   , PSI5SPUCLB->name() , PSI5SPUCLB->addr() );
    cw_instantiate_reg(CW_PSI5SPUPTS   , PSI5SPUPTS->name() , PSI5SPUPTS->addr() );
    cw_instantiate_reg(CW_PSI5SPUBCE   , PSI5SPUBCE->name() , PSI5SPUBCE->addr() );
    cw_instantiate_reg(CW_PSI5SPUBPR   , PSI5SPUBPR->name() , PSI5SPUBPR->addr() );
    cw_instantiate_reg(CW_PSI5SPTPS    , PSI5SPTPS->name()  , PSI5SPTPS->addr()  );
    cw_instantiate_reg(CW_PSI5SPTCAS   , PSI5SPTCAS->name() , PSI5SPTCAS->addr() );
    cw_instantiate_reg(CW_PSI5SPTCBS   , PSI5SPTCBS->name() , PSI5SPTCBS->addr() );
    cw_instantiate_reg(CW_PSI5SPTCAE   , PSI5SPTCAE->name() , PSI5SPTCAE->addr() );
    cw_instantiate_reg(CW_PSI5SPTCAC   , PSI5SPTCAC->name() , PSI5SPTCAC->addr() );
    cw_instantiate_reg(CW_PSI5SPTCBE   , PSI5SPTCBE->name() , PSI5SPTCBE->addr() );
    cw_instantiate_reg(CW_PSI5SPTCBC   , PSI5SPTCBC->name() , PSI5SPTCBC->addr() );
    cw_instantiate_reg(CW_PSI5SPATCE   , PSI5SPATCE->name() , PSI5SPATCE->addr() );
    cw_instantiate_reg(CW_PSI5SPATCC   , PSI5SPATCC->name() , PSI5SPATCC->addr() );
    cw_instantiate_reg(CW_PSI5SUCRIE   , PSI5SUCRIE->name() , PSI5SUCRIE->addr() );
    cw_instantiate_reg(CW_PSI5SUCTIE   , PSI5SUCTIE->name() , PSI5SUCTIE->addr() );
    cw_instantiate_reg(CW_PSI5SUCDRE   , PSI5SUCDRE->name() , PSI5SUCDRE->addr() );
    cw_instantiate_reg(CW_PSI5SUCRD    , PSI5SUCRD->name()  , PSI5SUCRD->addr()  );
    cw_instantiate_reg(CW_PSI5SUCRS    , PSI5SUCRS->name()  , PSI5SUCRS->addr()  );
    cw_instantiate_reg(CW_PSI5SUCRSC   , PSI5SUCRSC->name() , PSI5SUCRSC->addr() );
    cw_instantiate_reg(CW_PSI5SPTFST   , PSI5SPTFST->name() , PSI5SPTFST->addr() );
    cw_instantiate_reg(CW_PSI5SPTFNM   , PSI5SPTFNM->name() , PSI5SPTFNM->addr() );
    cw_instantiate_reg(CW_PSI5SPTFD1   , PSI5SPTFD1->name() , PSI5SPTFD1->addr() );
    cw_instantiate_reg(CW_PSI5SPTFD2   , PSI5SPTFD2->name() , PSI5SPTFD2->addr() );
    cw_instantiate_reg(CW_PSI5SPTFS    , PSI5SPTFS->name()  , PSI5SPTFS->addr()  );
    cw_instantiate_reg(CW_PSI5SPTFIS   , PSI5SPTFIS->name() , PSI5SPTFIS->addr() );
    cw_instantiate_reg(CW_PSI5SUCTD    , PSI5SUCTD->name()  , PSI5SUCTD->addr()  );
    cw_instantiate_reg(CW_PSI5SUCTM    , PSI5SUCTM->name()  , PSI5SUCTM->addr()  );
    cw_instantiate_reg(CW_PSI5SUCTS    , PSI5SUCTS->name()  , PSI5SUCTS->addr()  );
    cw_instantiate_reg(CW_PSI5SUCTSC   , PSI5SUCTSC->name() , PSI5SUCTSC->addr() );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUOEB   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUOMD   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUOS    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUNFST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUSWR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPRMBC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUCLB   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUPTS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUBCE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPUBPR   , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTPS    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCAS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCBS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCAE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCAC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCBE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTCBC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPATCE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPATCC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCRIE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCTIE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCDRE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCRD    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCRS    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCRSC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFST   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFNM   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFD1   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFD2   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFS    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SPTFIS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCTD    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCTM    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCTS    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5SUCTSC   , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*PSI5SPUOEB   ) ( 0,  0, "OPEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUOMD   ) ( 0,  0, "OPMD"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUOS    ) ( 2,  2, "MSTS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPUOS    ) ( 1,  1, "ACSTS"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPUOS    ) ( 0,  0, "SWSTS"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPUNFST  ) ( 0,  0, "NFSET"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUSWR   ) ( 0,  0, "SWRST"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPRMBC   ) ( 0,  0, "MBCLR"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUCLB   ) ( 7,  1, "TMKV"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUCLB   ) ( 0,  0, "LBEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUPTS   ) ( 9,  8, "UTPRTY"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUPTS   ) ( 1,  0, "URPRTY"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUBCE   ) ( 0,  0, "SCKEN"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUBPR   ) (19, 16, "RXOSMP"  , 0x4       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUBPR   ) (15,  8, "SCKDIV"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPUBPR   ) ( 6,  0, "SCKPRS"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTPS    ) (25, 16, "TSPRSU"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTPS    ) ( 6,  0, "TSPRSL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCAS   ) (16, 16, "TSCACLS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCAS   ) ( 8,  8, "TSCAEBS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCAS   ) ( 0,  0, "TSCACKS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCBS   ) (16, 16, "TSCBCLS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCBS   ) ( 8,  8, "TSCBEBS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCBS   ) ( 0,  0, "TSCBCKS" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCAE   ) ( 0,  0, "TSCAEB"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCAC   ) ( 0,  0, "TSCACLR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCBE   ) ( 0,  0, "TSCBEB"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTCBC   ) ( 0,  0, "TSCBCLR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPATCE   ) ( 0,  0, "ATSCEB"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPATCC   ) ( 0,  0, "ATSCCLR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRIE   ) ( 3,  3, "IERFIN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRIE   ) ( 2,  2, "IEROE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRIE   ) ( 1,  1, "IERFE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRIE   ) ( 0,  0, "IERPE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCTIE   ) ( 1,  1, "IETFIN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCTIE   ) ( 0,  0, "IETOWE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCDRE   ) ( 1,  1, "DRQEUTFN", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCDRE   ) ( 0,  0, "DRQEURFN", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRD    ) ( 7,  0, "UTRDT"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCRS    ) ( 3,  3, "UTRFIN"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCRS    ) ( 2,  2, "UTROE"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCRS    ) ( 1,  1, "UTRFE"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCRS    ) ( 0,  0, "UTRPE"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCRSC   ) ( 3,  3, "UTRFINCL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRSC   ) ( 2,  2, "UTROECL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRSC   ) ( 1,  1, "UTRFECL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCRSC   ) ( 0,  0, "UTRPECL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFST   ) ( 0,  0, "TXST"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFNM   ) ( 2,  0, "TXNUM"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD1   ) (31, 24, "TDT4"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD1   ) (23, 16, "TDT3"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD1   ) (15,  8, "TDT2"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD1   ) ( 7,  0, "TDT1"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD2   ) (31, 24, "TDT8"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD2   ) (23, 16, "TDT7"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD2   ) (15,  8, "TDT6"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFD2   ) ( 7,  0, "TDT5"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SPTFS    ) ( 0,  0, "TXSTS"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPTFIS   ) ( 1,  1, "TXFFFL"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SPTFIS   ) ( 0,  0, "TXFFEP"  , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCTD    ) ( 7,  0, "UTTDT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCTM    ) ( 1,  1, "UTTF"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCTM    ) ( 0,  0, "UTTBBF"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCTS    ) ( 1,  1, "UTTFIN"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCTS    ) ( 0,  0, "UTTOWE"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5SUCTSC   ) ( 1,  1, "UTTFINCL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*PSI5SUCTSC   ) ( 0,  0, "UTTOWECL", 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["PSI5SPUOEB"]["OPEN"     ] = &Cpsis011_cmn_regif::cb_PSI5SPUOEB_OPEN;
    mWrCbAPI["PSI5SPUOMD"]["OPMD"     ] = &Cpsis011_cmn_regif::cb_PSI5SPUOMD_OPMD;
    mWrCbAPI["PSI5SPUNFST"]["NFSET"    ] = &Cpsis011_cmn_regif::cb_PSI5SPUNFST_NFSET;
    mWrCbAPI["PSI5SPUSWR"]["SWRST"    ] = &Cpsis011_cmn_regif::cb_PSI5SPUSWR_SWRST;
    mWrCbAPI["PSI5SPRMBC"]["MBCLR"    ] = &Cpsis011_cmn_regif::cb_PSI5SPRMBC_MBCLR;
    mWrCbAPI["PSI5SPUCLB"]["LBEN"     ] = &Cpsis011_cmn_regif::cb_PSI5SPUCLB_LBEN;
    mWrCbAPI["PSI5SPUPTS"]["UTPRTY"   ] = &Cpsis011_cmn_regif::cb_PSI5SPUPTS_UTPRTY;
    mWrCbAPI["PSI5SPUPTS"]["URPRTY"   ] = &Cpsis011_cmn_regif::cb_PSI5SPUPTS_URPRTY;
    mWrCbAPI["PSI5SPUBCE"]["SCKEN"    ] = &Cpsis011_cmn_regif::cb_PSI5SPUBCE_SCKEN;
    mWrCbAPI["PSI5SPUBPR"]["RXOSMP"   ] = &Cpsis011_cmn_regif::cb_PSI5SPUBPR_RXOSMP;
    mWrCbAPI["PSI5SPUBPR"]["SCKPRS"   ] = &Cpsis011_cmn_regif::cb_PSI5SPUBPR_SCKPRS;
    mWrCbAPI["PSI5SPTPS"]["TSPRSL"   ] = &Cpsis011_cmn_regif::cb_PSI5SPTPS_TSPRSL;
    mWrCbAPI["PSI5SPTCAS"]["TSCACLS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCAS_TSCACLS;
    mWrCbAPI["PSI5SPTCAS"]["TSCAEBS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCAS_TSCAEBS;
    mWrCbAPI["PSI5SPTCAS"]["TSCACKS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCAS_TSCACKS;
    mWrCbAPI["PSI5SPTCBS"]["TSCBCLS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCBS_TSCBCLS;
    mWrCbAPI["PSI5SPTCBS"]["TSCBEBS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCBS_TSCBEBS;
    mWrCbAPI["PSI5SPTCBS"]["TSCBCKS"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCBS_TSCBCKS;
    mWrCbAPI["PSI5SPTCAE"]["TSCAEB"   ] = &Cpsis011_cmn_regif::cb_PSI5SPTCAE_TSCAEB;
    mWrCbAPI["PSI5SPTCAC"]["TSCACLR"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCAC_TSCACLR;
    mWrCbAPI["PSI5SPTCBE"]["TSCBEB"   ] = &Cpsis011_cmn_regif::cb_PSI5SPTCBE_TSCBEB;
    mWrCbAPI["PSI5SPTCBC"]["TSCBCLR"  ] = &Cpsis011_cmn_regif::cb_PSI5SPTCBC_TSCBCLR;
    mWrCbAPI["PSI5SPATCE"]["ATSCEB"   ] = &Cpsis011_cmn_regif::cb_PSI5SPATCE_ATSCEB;
    mWrCbAPI["PSI5SPATCC"]["ATSCCLR"  ] = &Cpsis011_cmn_regif::cb_PSI5SPATCC_ATSCCLR;
    mWrCbAPI["PSI5SUCRIE"]["IERPE"    ] = &Cpsis011_cmn_regif::cb_PSI5SUCRIE_IERPE;
    mWrCbAPI["PSI5SUCTIE"]["IETOWE"   ] = &Cpsis011_cmn_regif::cb_PSI5SUCTIE_IETOWE;
    mWrCbAPI["PSI5SUCDRE"]["DRQEURFN" ] = &Cpsis011_cmn_regif::cb_PSI5SUCDRE_DRQEURFN;
    mWrCbAPI["PSI5SUCRSC"]["UTRPECL"  ] = &Cpsis011_cmn_regif::cb_PSI5SUCRSC_UTRPECL;
    mWrCbAPI["PSI5SPTFST"]["TXST"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFST_TXST;
    mWrCbAPI["PSI5SPTFNM"]["TXNUM"    ] = &Cpsis011_cmn_regif::cb_PSI5SPTFNM_TXNUM;
    mWrCbAPI["PSI5SPTFD1"]["TDT4"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD1_TDT4;
    mWrCbAPI["PSI5SPTFD1"]["TDT3"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD1_TDT3;
    mWrCbAPI["PSI5SPTFD1"]["TDT2"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD1_TDT2;
    mWrCbAPI["PSI5SPTFD1"]["TDT1"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD1_TDT1;
    mWrCbAPI["PSI5SPTFD2"]["TDT8"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD2_TDT8;
    mWrCbAPI["PSI5SPTFD2"]["TDT7"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD2_TDT7;
    mWrCbAPI["PSI5SPTFD2"]["TDT6"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD2_TDT6;
    mWrCbAPI["PSI5SPTFD2"]["TDT5"     ] = &Cpsis011_cmn_regif::cb_PSI5SPTFD2_TDT5;
    mWrCbAPI["PSI5SUCTD"]["UTTDT"    ] = &Cpsis011_cmn_regif::cb_PSI5SUCTD_UTTDT;
    mWrCbAPI["PSI5SUCTSC"]["UTTOWECL" ] = &Cpsis011_cmn_regif::cb_PSI5SUCTSC_UTTOWECL;

    mRdCbAPI["PSI5SUCRD"]["UTRDT"    ] = &Cpsis011_cmn_regif::cb_PSI5SUCRD_UTRDT;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cpsis011_cmn_regif::~Cpsis011_cmn_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cpsis011_cmn_regif::uint Cpsis011_cmn_regif::bit_select(
                                cuint val,    ///< [in] Writting address
                                cuint start,  ///< [in] start bit position
                                cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_cmn_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_cmn_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_cmn_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                    const unsigned char *p_data,   ///< [in] Writing data
                                    cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_cmn_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsis011_cmn_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                        const unsigned char *p_data,  ///< [in] Writing data
                                        cuint size,                   ///< [in] Data size (byte)
                                        bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsis011_cmn_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                        unsigned char *p_data,   ///< [out] Reading data
                                        cuint size,              ///< [in]  Data size (byte)
                                        bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cpsis011_cmn_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                     unsigned char *p_data,          ///< [out] Reading data
                                     cuint size,                     ///< [in]  Data size (byte)
                                     cuint reg_index,                ///< [in] Register index
                                     bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cpsis011_cmn_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                     const unsigned char *p_data,      ///< [in] Writing data
                                     cuint size,                       ///< [in] Data size (byte)
                                     cuint reg_index,                  ///< [in] Register index
                                     bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cpsis011_cmn_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cpsis011_cmn_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cpsis011_cmn_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cpsis011_cmn_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cpsis011_cmn_regif::InitLocalVal()
{
    // Initialize local variables
    PSI5SPUOEB_OPEN = 0x0;
    PSI5SPUOMD_OPMD = 0x0;
    PSI5SPUOS_MSTS = 0x0;
    PSI5SPUOS_ACSTS = 0x0;
    PSI5SPUOS_SWSTS = 0x0;
    PSI5SPUNFST_NFSET = 0x0;
    PSI5SPUSWR_SWRST = 0x0;
    PSI5SPRMBC_MBCLR = 0x0;
    PSI5SPUCLB_TMKV = 0x0;
    PSI5SPUCLB_LBEN = 0x0;
    PSI5SPUPTS_UTPRTY = 0x0;
    PSI5SPUPTS_URPRTY = 0x0;
    PSI5SPUBCE_SCKEN = 0x0;
    PSI5SPUBPR_RXOSMP = 0x4;
    PSI5SPUBPR_SCKDIV = 0x0;
    PSI5SPUBPR_SCKPRS = 0x0;
    PSI5SPTPS_TSPRSU = 0x0;
    PSI5SPTPS_TSPRSL = 0x0;
    PSI5SPTCAS_TSCACLS = 0x0;
    PSI5SPTCAS_TSCAEBS = 0x0;
    PSI5SPTCAS_TSCACKS = 0x0;
    PSI5SPTCBS_TSCBCLS = 0x0;
    PSI5SPTCBS_TSCBEBS = 0x0;
    PSI5SPTCBS_TSCBCKS = 0x0;
    PSI5SPTCAE_TSCAEB = 0x0;
    PSI5SPTCAC_TSCACLR = 0x0;
    PSI5SPTCBE_TSCBEB = 0x0;
    PSI5SPTCBC_TSCBCLR = 0x0;
    PSI5SPATCE_ATSCEB = 0x0;
    PSI5SPATCC_ATSCCLR = 0x0;
    PSI5SUCRIE_IERFIN = 0x0;
    PSI5SUCRIE_IEROE = 0x0;
    PSI5SUCRIE_IERFE = 0x0;
    PSI5SUCRIE_IERPE = 0x0;
    PSI5SUCTIE_IETFIN = 0x0;
    PSI5SUCTIE_IETOWE = 0x0;
    PSI5SUCDRE_DRQEUTFN = 0x0;
    PSI5SUCDRE_DRQEURFN = 0x0;
    PSI5SUCRD_UTRDT = 0x0;
    PSI5SUCRS_UTRFIN = 0x0;
    PSI5SUCRS_UTROE = 0x0;
    PSI5SUCRS_UTRFE = 0x0;
    PSI5SUCRS_UTRPE = 0x0;
    PSI5SUCRSC_UTRFINCL = 0x0;
    PSI5SUCRSC_UTROECL = 0x0;
    PSI5SUCRSC_UTRFECL = 0x0;
    PSI5SUCRSC_UTRPECL = 0x0;
    PSI5SPTFST_TXST = 0x0;
    PSI5SPTFNM_TXNUM = 0x0;
    PSI5SPTFD1_TDT4 = 0x0;
    PSI5SPTFD1_TDT3 = 0x0;
    PSI5SPTFD1_TDT2 = 0x0;
    PSI5SPTFD1_TDT1 = 0x0;
    PSI5SPTFD2_TDT8 = 0x0;
    PSI5SPTFD2_TDT7 = 0x0;
    PSI5SPTFD2_TDT6 = 0x0;
    PSI5SPTFD2_TDT5 = 0x0;
    PSI5SPTFS_TXSTS = 0x0;
    PSI5SPTFIS_TXFFFL = 0x0;
    PSI5SPTFIS_TXFFEP = 0x1;
    PSI5SUCTD_UTTDT = 0x0;
    PSI5SUCTM_UTTF = 0x0;
    PSI5SUCTM_UTTBBF = 0x0;
    PSI5SUCTS_UTTFIN = 0x0;
    PSI5SUCTS_UTTOWE = 0x0;
    PSI5SUCTSC_UTTFINCL = 0x0;
    PSI5SUCTSC_UTTOWECL = 0x0;
}

/// Update bit value to local value
/// @return None
void Cpsis011_cmn_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        PSI5SPUOEB_OPEN                 = (*PSI5SPUOEB )["OPEN"       ];
        return;
    }
    if (addr == 0x0004) {
        PSI5SPUOMD_OPMD                 = (*PSI5SPUOMD )["OPMD"       ];
        return;
    }
    if (addr == 0x0008) {
        PSI5SPUOS_MSTS                  = (*PSI5SPUOS  )["MSTS"       ];
        PSI5SPUOS_ACSTS                 = (*PSI5SPUOS  )["ACSTS"      ];
        PSI5SPUOS_SWSTS                 = (*PSI5SPUOS  )["SWSTS"      ];
        return;
    }
    if (addr == 0x000C) {
        PSI5SPUNFST_NFSET               = (*PSI5SPUNFST)["NFSET"      ];
        return;
    }
    if (addr == 0x0010) {
        PSI5SPUSWR_SWRST                = (*PSI5SPUSWR )["SWRST"      ];
        return;
    }
    if (addr == 0x0014) {
        PSI5SPRMBC_MBCLR                = (*PSI5SPRMBC )["MBCLR"      ];
        return;
    }
    if (addr == 0x0020) {
        PSI5SPUCLB_TMKV                 = (*PSI5SPUCLB )["TMKV"       ];
        PSI5SPUCLB_LBEN                 = (*PSI5SPUCLB )["LBEN"       ];
        return;
    }
    if (addr == 0x0024) {
        PSI5SPUPTS_UTPRTY               = (*PSI5SPUPTS )["UTPRTY"     ];
        PSI5SPUPTS_URPRTY               = (*PSI5SPUPTS )["URPRTY"     ];
        return;
    }
    if (addr == 0x0028) {
        PSI5SPUBCE_SCKEN                = (*PSI5SPUBCE )["SCKEN"      ];
        return;
    }
    if (addr == 0x002C) {
        PSI5SPUBPR_RXOSMP               = (*PSI5SPUBPR )["RXOSMP"     ];
        PSI5SPUBPR_SCKDIV               = (*PSI5SPUBPR )["SCKDIV"     ];
        PSI5SPUBPR_SCKPRS               = (*PSI5SPUBPR )["SCKPRS"     ];
        return;
    }
    if (addr == 0x0030) {
        PSI5SPTPS_TSPRSU                = (*PSI5SPTPS  )["TSPRSU"     ];
        PSI5SPTPS_TSPRSL                = (*PSI5SPTPS  )["TSPRSL"     ];
        return;
    }
    if (addr == 0x0034) {
        PSI5SPTCAS_TSCACLS              = (*PSI5SPTCAS )["TSCACLS"    ];
        PSI5SPTCAS_TSCAEBS              = (*PSI5SPTCAS )["TSCAEBS"    ];
        PSI5SPTCAS_TSCACKS              = (*PSI5SPTCAS )["TSCACKS"    ];
        return;
    }
    if (addr == 0x0038) {
        PSI5SPTCBS_TSCBCLS              = (*PSI5SPTCBS )["TSCBCLS"    ];
        PSI5SPTCBS_TSCBEBS              = (*PSI5SPTCBS )["TSCBEBS"    ];
        PSI5SPTCBS_TSCBCKS              = (*PSI5SPTCBS )["TSCBCKS"    ];
        return;
    }
    if (addr == 0x0040) {
        PSI5SPTCAE_TSCAEB               = (*PSI5SPTCAE )["TSCAEB"     ];
        return;
    }
    if (addr == 0x0044) {
        PSI5SPTCAC_TSCACLR              = (*PSI5SPTCAC )["TSCACLR"    ];
        return;
    }
    if (addr == 0x0048) {
        PSI5SPTCBE_TSCBEB               = (*PSI5SPTCBE )["TSCBEB"     ];
        return;
    }
    if (addr == 0x004C) {
        PSI5SPTCBC_TSCBCLR              = (*PSI5SPTCBC )["TSCBCLR"    ];
        return;
    }
    if (addr == 0x0050) {
        PSI5SPATCE_ATSCEB               = (*PSI5SPATCE )["ATSCEB"     ];
        return;
    }
    if (addr == 0x0054) {
        PSI5SPATCC_ATSCCLR              = (*PSI5SPATCC )["ATSCCLR"    ];
        return;
    }
    if (addr == 0x0058) {
        PSI5SUCRIE_IERFIN               = (*PSI5SUCRIE )["IERFIN"     ];
        PSI5SUCRIE_IEROE                = (*PSI5SUCRIE )["IEROE"      ];
        PSI5SUCRIE_IERFE                = (*PSI5SUCRIE )["IERFE"      ];
        PSI5SUCRIE_IERPE                = (*PSI5SUCRIE )["IERPE"      ];
        return;
    }
    if (addr == 0x005C) {
        PSI5SUCTIE_IETFIN               = (*PSI5SUCTIE )["IETFIN"     ];
        PSI5SUCTIE_IETOWE               = (*PSI5SUCTIE )["IETOWE"     ];
        return;
    }
    if (addr == 0x0060) {
        PSI5SUCDRE_DRQEUTFN             = (*PSI5SUCDRE )["DRQEUTFN"   ];
        PSI5SUCDRE_DRQEURFN             = (*PSI5SUCDRE )["DRQEURFN"   ];
        return;
    }
    if (addr == 0x0070) {
        PSI5SUCRD_UTRDT                 = (*PSI5SUCRD  )["UTRDT"      ];
        return;
    }
    if (addr == 0x0074) {
        PSI5SUCRS_UTRFIN                = (*PSI5SUCRS  )["UTRFIN"     ];
        PSI5SUCRS_UTROE                 = (*PSI5SUCRS  )["UTROE"      ];
        PSI5SUCRS_UTRFE                 = (*PSI5SUCRS  )["UTRFE"      ];
        PSI5SUCRS_UTRPE                 = (*PSI5SUCRS  )["UTRPE"      ];
        return;
    }
    if (addr == 0x0078) {
        PSI5SUCRSC_UTRFINCL             = (*PSI5SUCRSC )["UTRFINCL"   ];
        PSI5SUCRSC_UTROECL              = (*PSI5SUCRSC )["UTROECL"    ];
        PSI5SUCRSC_UTRFECL              = (*PSI5SUCRSC )["UTRFECL"    ];
        PSI5SUCRSC_UTRPECL              = (*PSI5SUCRSC )["UTRPECL"    ];
        return;
    }
    if (addr == 0x0080) {
        PSI5SPTFST_TXST                 = (*PSI5SPTFST )["TXST"       ];
        return;
    }
    if (addr == 0x0084) {
        PSI5SPTFNM_TXNUM                = (*PSI5SPTFNM )["TXNUM"      ];
        return;
    }
    if (addr == 0x0088) {
        PSI5SPTFD1_TDT4                 = (*PSI5SPTFD1 )["TDT4"       ];
        PSI5SPTFD1_TDT3                 = (*PSI5SPTFD1 )["TDT3"       ];
        PSI5SPTFD1_TDT2                 = (*PSI5SPTFD1 )["TDT2"       ];
        PSI5SPTFD1_TDT1                 = (*PSI5SPTFD1 )["TDT1"       ];
        return;
    }
    if (addr == 0x008C) {
        PSI5SPTFD2_TDT8                 = (*PSI5SPTFD2 )["TDT8"       ];
        PSI5SPTFD2_TDT7                 = (*PSI5SPTFD2 )["TDT7"       ];
        PSI5SPTFD2_TDT6                 = (*PSI5SPTFD2 )["TDT6"       ];
        PSI5SPTFD2_TDT5                 = (*PSI5SPTFD2 )["TDT5"       ];
        return;
    }
    if (addr == 0x0090) {
        PSI5SPTFS_TXSTS                 = (*PSI5SPTFS  )["TXSTS"      ];
        return;
    }
    if (addr == 0x0094) {
        PSI5SPTFIS_TXFFFL               = (*PSI5SPTFIS )["TXFFFL"     ];
        PSI5SPTFIS_TXFFEP               = (*PSI5SPTFIS )["TXFFEP"     ];
        return;
    }
    if (addr == 0x00A0) {
        PSI5SUCTD_UTTDT                 = (*PSI5SUCTD  )["UTTDT"      ];
        return;
    }
    if (addr == 0x00A4) {
        PSI5SUCTM_UTTF                  = (*PSI5SUCTM  )["UTTF"       ];
        PSI5SUCTM_UTTBBF                = (*PSI5SUCTM  )["UTTBBF"     ];
        return;
    }
    if (addr == 0x00A8) {
        PSI5SUCTS_UTTFIN                = (*PSI5SUCTS  )["UTTFIN"     ];
        PSI5SUCTS_UTTOWE                = (*PSI5SUCTS  )["UTTOWE"     ];
        return;
    }
    if (addr == 0x00AC) {
        PSI5SUCTSC_UTTFINCL             = (*PSI5SUCTSC )["UTTFINCL"   ];
        PSI5SUCTSC_UTTOWECL             = (*PSI5SUCTSC )["UTTOWECL"   ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cpsis011_cmn_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*PSI5SPUOEB )["OPEN"       ] = PSI5SPUOEB_OPEN;
        return;
    }
    if (addr == 0x0004) {
        (*PSI5SPUOMD )["OPMD"       ] = PSI5SPUOMD_OPMD;
        return;
    }
    if (addr == 0x0008) {
        (*PSI5SPUOS  )["MSTS"       ] = PSI5SPUOS_MSTS;
        (*PSI5SPUOS  )["ACSTS"      ] = PSI5SPUOS_ACSTS;
        (*PSI5SPUOS  )["SWSTS"      ] = PSI5SPUOS_SWSTS;
        return;
    }
    if (addr == 0x000C) {
        (*PSI5SPUNFST)["NFSET"      ] = PSI5SPUNFST_NFSET;
        return;
    }
    if (addr == 0x0010) {
        (*PSI5SPUSWR )["SWRST"      ] = PSI5SPUSWR_SWRST;
        return;
    }
    if (addr == 0x0014) {
        (*PSI5SPRMBC )["MBCLR"      ] = PSI5SPRMBC_MBCLR;
        return;
    }
    if (addr == 0x0020) {
        (*PSI5SPUCLB )["TMKV"       ] = PSI5SPUCLB_TMKV;
        (*PSI5SPUCLB )["LBEN"       ] = PSI5SPUCLB_LBEN;
        return;
    }
    if (addr == 0x0024) {
        (*PSI5SPUPTS )["UTPRTY"     ] = PSI5SPUPTS_UTPRTY;
        (*PSI5SPUPTS )["URPRTY"     ] = PSI5SPUPTS_URPRTY;
        return;
    }
    if (addr == 0x0028) {
        (*PSI5SPUBCE )["SCKEN"      ] = PSI5SPUBCE_SCKEN;
        return;
    }
    if (addr == 0x002C) {
        (*PSI5SPUBPR )["RXOSMP"     ] = PSI5SPUBPR_RXOSMP;
        (*PSI5SPUBPR )["SCKDIV"     ] = PSI5SPUBPR_SCKDIV;
        (*PSI5SPUBPR )["SCKPRS"     ] = PSI5SPUBPR_SCKPRS;
        return;
    }
    if (addr == 0x0030) {
        (*PSI5SPTPS  )["TSPRSU"     ] = PSI5SPTPS_TSPRSU;
        (*PSI5SPTPS  )["TSPRSL"     ] = PSI5SPTPS_TSPRSL;
        return;
    }
    if (addr == 0x0034) {
        (*PSI5SPTCAS )["TSCACLS"    ] = PSI5SPTCAS_TSCACLS;
        (*PSI5SPTCAS )["TSCAEBS"    ] = PSI5SPTCAS_TSCAEBS;
        (*PSI5SPTCAS )["TSCACKS"    ] = PSI5SPTCAS_TSCACKS;
        return;
    }
    if (addr == 0x0038) {
        (*PSI5SPTCBS )["TSCBCLS"    ] = PSI5SPTCBS_TSCBCLS;
        (*PSI5SPTCBS )["TSCBEBS"    ] = PSI5SPTCBS_TSCBEBS;
        (*PSI5SPTCBS )["TSCBCKS"    ] = PSI5SPTCBS_TSCBCKS;
        return;
    }
    if (addr == 0x0040) {
        (*PSI5SPTCAE )["TSCAEB"     ] = PSI5SPTCAE_TSCAEB;
        return;
    }
    if (addr == 0x0044) {
        (*PSI5SPTCAC )["TSCACLR"    ] = PSI5SPTCAC_TSCACLR;
        return;
    }
    if (addr == 0x0048) {
        (*PSI5SPTCBE )["TSCBEB"     ] = PSI5SPTCBE_TSCBEB;
        return;
    }
    if (addr == 0x004C) {
        (*PSI5SPTCBC )["TSCBCLR"    ] = PSI5SPTCBC_TSCBCLR;
        return;
    }
    if (addr == 0x0050) {
        (*PSI5SPATCE )["ATSCEB"     ] = PSI5SPATCE_ATSCEB;
        return;
    }
    if (addr == 0x0054) {
        (*PSI5SPATCC )["ATSCCLR"    ] = PSI5SPATCC_ATSCCLR;
        return;
    }
    if (addr == 0x0058) {
        (*PSI5SUCRIE )["IERFIN"     ] = PSI5SUCRIE_IERFIN;
        (*PSI5SUCRIE )["IEROE"      ] = PSI5SUCRIE_IEROE;
        (*PSI5SUCRIE )["IERFE"      ] = PSI5SUCRIE_IERFE;
        (*PSI5SUCRIE )["IERPE"      ] = PSI5SUCRIE_IERPE;
        return;
    }
    if (addr == 0x005C) {
        (*PSI5SUCTIE )["IETFIN"     ] = PSI5SUCTIE_IETFIN;
        (*PSI5SUCTIE )["IETOWE"     ] = PSI5SUCTIE_IETOWE;
        return;
    }
    if (addr == 0x0060) {
        (*PSI5SUCDRE )["DRQEUTFN"   ] = PSI5SUCDRE_DRQEUTFN;
        (*PSI5SUCDRE )["DRQEURFN"   ] = PSI5SUCDRE_DRQEURFN;
        return;
    }
    if (addr == 0x0070) {
        (*PSI5SUCRD  )["UTRDT"      ] = PSI5SUCRD_UTRDT;
        return;
    }
    if (addr == 0x0074) {
        (*PSI5SUCRS  )["UTRFIN"     ] = PSI5SUCRS_UTRFIN;
        (*PSI5SUCRS  )["UTROE"      ] = PSI5SUCRS_UTROE;
        (*PSI5SUCRS  )["UTRFE"      ] = PSI5SUCRS_UTRFE;
        (*PSI5SUCRS  )["UTRPE"      ] = PSI5SUCRS_UTRPE;
        return;
    }
    if (addr == 0x0078) {
        (*PSI5SUCRSC )["UTRFINCL"   ] = PSI5SUCRSC_UTRFINCL;
        (*PSI5SUCRSC )["UTROECL"    ] = PSI5SUCRSC_UTROECL;
        (*PSI5SUCRSC )["UTRFECL"    ] = PSI5SUCRSC_UTRFECL;
        (*PSI5SUCRSC )["UTRPECL"    ] = PSI5SUCRSC_UTRPECL;
        return;
    }
    if (addr == 0x0080) {
        (*PSI5SPTFST )["TXST"       ] = PSI5SPTFST_TXST;
        return;
    }
    if (addr == 0x0084) {
        (*PSI5SPTFNM )["TXNUM"      ] = PSI5SPTFNM_TXNUM;
        return;
    }
    if (addr == 0x0088) {
        (*PSI5SPTFD1 )["TDT4"       ] = PSI5SPTFD1_TDT4;
        (*PSI5SPTFD1 )["TDT3"       ] = PSI5SPTFD1_TDT3;
        (*PSI5SPTFD1 )["TDT2"       ] = PSI5SPTFD1_TDT2;
        (*PSI5SPTFD1 )["TDT1"       ] = PSI5SPTFD1_TDT1;
        return;
    }
    if (addr == 0x008C) {
        (*PSI5SPTFD2 )["TDT8"       ] = PSI5SPTFD2_TDT8;
        (*PSI5SPTFD2 )["TDT7"       ] = PSI5SPTFD2_TDT7;
        (*PSI5SPTFD2 )["TDT6"       ] = PSI5SPTFD2_TDT6;
        (*PSI5SPTFD2 )["TDT5"       ] = PSI5SPTFD2_TDT5;
        return;
    }
    if (addr == 0x0090) {
        (*PSI5SPTFS  )["TXSTS"      ] = PSI5SPTFS_TXSTS;
        return;
    }
    if (addr == 0x0094) {
        (*PSI5SPTFIS )["TXFFFL"     ] = PSI5SPTFIS_TXFFFL;
        (*PSI5SPTFIS )["TXFFEP"     ] = PSI5SPTFIS_TXFFEP;
        return;
    }
    if (addr == 0x00A0) {
        (*PSI5SUCTD  )["UTTDT"      ] = PSI5SUCTD_UTTDT;
        return;
    }
    if (addr == 0x00A4) {
        (*PSI5SUCTM  )["UTTF"       ] = PSI5SUCTM_UTTF;
        (*PSI5SUCTM  )["UTTBBF"     ] = PSI5SUCTM_UTTBBF;
        return;
    }
    if (addr == 0x00A8) {
        (*PSI5SUCTS  )["UTTFIN"     ] = PSI5SUCTS_UTTFIN;
        (*PSI5SUCTS  )["UTTOWE"     ] = PSI5SUCTS_UTTOWE;
        return;
    }
    if (addr == 0x00AC) {
        (*PSI5SUCTSC )["UTTFINCL"   ] = PSI5SUCTSC_UTTFINCL;
        (*PSI5SUCTSC )["UTTOWECL"   ] = PSI5SUCTSC_UTTOWECL;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cpsis011_cmn_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cpsis011_cmn_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cpsis011_cmn_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cpsis011_cmn_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cpsis011_cmn_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cpsis011_cmn_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cpsis011_cmn_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cpsis011_cmn_regif::uint Cpsis011_cmn_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cpsis011_cmn_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cpsis011_cmn_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cpsis011_cmn_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cpsis011_cmn_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cpsis011_cmn_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cpsis011_cmn_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cpsis011_cmn_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
