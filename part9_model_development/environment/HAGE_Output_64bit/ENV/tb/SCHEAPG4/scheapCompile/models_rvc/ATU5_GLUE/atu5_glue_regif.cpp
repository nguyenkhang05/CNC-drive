// -----------------------------------------------------------------------------
// $Id: atu5_glue_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
//
// Copyright(c) 2016-2019 Renesas Electronics Corporation
// Copyright(c) 2016-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : atu5_glue_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5_GLUE
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name           reg_name       wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access init  support callback
//     %%REG    ATUINTSELA     ATUINTSELA     8|16|32  8|16|32  32      0x00    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUINTSELD     ATUINTSELD     8|16|32  8|16|32  32      0x0C    0             3           -             0x4          W|R    0     TRUE    -
//     %%REG    ATUINTSELD4    ATUINTSELD4    8|16|32  8|16|32  32      0x1C    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUDMASELB     ATUDMASELB     8|16|32  8|16|32  32      0x2C    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUDMASELCD    ATUDMASELCD    8|16|32  8|16|32  32      0x30    0             7           -             0x4          W|R    0     TRUE    -
//     %%REG    ATUDMASELE     ATUDMASELE     8|16|32  8|16|32  32      0x50    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUDFEENTQ     ATUDFEENTQ     8|16|32  8|16|32  32      0x80    0             2           -             0x8          W|R    0     TRUE    -
//     %%REG    ATUDFESEL      ATUDFESEL      8|16|32  8|16|32  32      0x84    0             2           -             0x8          W|R    0     TRUE    -
//     %%REG    ATUDFESELD1T   ATUDFESELD1T   8|16|32  8|16|32  32      0x98    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUDSSELDSTS   ATUDSSELDSTS   8|16|32  8|16|32  32      0x9C    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUCASELCATS   ATUCASELCATS   8|16|32  8|16|32  32      0xA0    -             -           -             -            W|R    0     TRUE    -
//     %%REG    ATUP5SSEL      ATUP5SSEL      8|16|32  8|16|32  32      0xA4    -             -           -             -            W|R    0     TRUE    -
// 
// 
// %REG_NAME ATUINTSELA
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ATU_INTSEL_A3  14     12     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_A2  10     8      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_A1  6      4      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_A0  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUINTSELD
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_INTSEL_D13  30     28     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D12  26     24     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D11  22     20     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D10  18     16     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D03  14     12     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D02  10     8      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D01  6      4      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D00  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUINTSELD4
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_INTSEL_D03  14     12     0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D02  10     8      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D01  6      4      0     W|R     TRUE     -
//     %%BIT    ATU_INTSEL_D00  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDMASELB
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_DMASEL_B3   15     12     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_B2   11     8      0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_B1   7      4      0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_B0   3      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDMASELCD
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_DMASEL_CD7  30     28     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD6  26     24     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD5  22     20     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD4  18     16     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD3  14     12     0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD2  10     8      0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD1  6      4      0     W|R     TRUE     -
//     %%BIT    ATU_DMASEL_CD0  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDMASELE
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ATU_DMASEL_E   17     0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDFEENTQ
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ATU_DFEEN_TQ   11     0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDFESEL
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_DFESEL_C91  29     29     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_C90  28     28     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_C83  27     27     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_C82  26     26     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_C81  25     25     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_C80  24     24     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D11  22     20     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D10  18     16     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D03  14     12     0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D02  10     8      0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D01  6      4      0     W|R     TRUE     -
//     %%BIT    ATU_DFESEL_D00  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDFESELD1T
//     %%TITLE  name            upper  lower  init  access  support  callback
//     %%BIT    ATU_DFESEL_D1T  2      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUDSSELDSTS
//     %%TITLE  name             upper  lower  init  access  support  callback
//     %%BIT    ATU_DSSEL_DSTS9  19     18     0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS8  17     16     0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS7  15     14     0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS6  13     12     0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS5  11     10     0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS4  9      8      0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS3  7      6      0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS2  5      4      0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS1  3      2      0     W|R     TRUE     -
//     %%BIT    ATU_DSSEL_DSTS0  1      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUCASELCATS
//     %%TITLE  name             upper  lower  init  access  support  callback
//     %%BIT    ATU_CASEL_CATS0  1      0      0     W|R     TRUE     W
// 
// %REG_NAME ATUP5SSEL
//     %%TITLE  name              upper  lower  init  access  support  callback
//     %%BIT    ATU_P5SSEL_SSTSB  27     26     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_SSTSA  25     24     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_CRTSB  23     22     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_CRTSA  21     20     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_CKTSB  19     18     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_CKTSA  17     16     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC7   15     14     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC6   13     12     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC5   11     10     0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC4   9      8      0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC3   7      6      0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC2   5      4      0     W|R     TRUE     -
//     %%BIT    ATU_P5SSEL_TGC1   3      2      0     W|R     TRUE     W
////////////////////////////////////////////////////////////////////////////////
/// @file atu5_glue_regif.cpp
/// @brief Register IF class of model ATU5_GLUE
/// $Id: atu5_glue_regif.cpp 1196 2019-10-17 05:33:04Z chuonghoangle $
/// $Date: 2019-10-17 14:33:04 +0900 (2019/10/17 (æœ¨)) $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#include "atu5_glue_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Catu5_glue_regif::Catu5_glue_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xA8/4))
    #endif
{
    CommandInit();
    ATUINTSELA   = new vpcl::re_register(0x0000, this, "ATUINTSELA"  , name.c_str());
    ATUINTSELD4  = new vpcl::re_register(0x001C, this, "ATUINTSELD4" , name.c_str());
    ATUDMASELB   = new vpcl::re_register(0x002C, this, "ATUDMASELB"  , name.c_str());
    ATUDMASELE   = new vpcl::re_register(0x0050, this, "ATUDMASELE"  , name.c_str());
    ATUDFESELD1T = new vpcl::re_register(0x0098, this, "ATUDFESELD1T", name.c_str());
    ATUDSSELDSTS = new vpcl::re_register(0x009C, this, "ATUDSSELDSTS", name.c_str());
    ATUCASELCATS = new vpcl::re_register(0x00A0, this, "ATUCASELCATS", name.c_str());
    ATUP5SSEL    = new vpcl::re_register(0x00A4, this, "ATUP5SSEL"   , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_ATUINTSELD; i++) {
        str_tmp.str("");
        str_tmp<<"ATUINTSELD"<< i;
        ATUINTSELD  [i] = new vpcl::re_register((0x000C) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ATUDMASELCD; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDMASELCD"<< i;
        ATUDMASELCD [i] = new vpcl::re_register((0x0030) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ATUDFEENTQ; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDFEENTQ"<< i;
        ATUDFEENTQ  [i] = new vpcl::re_register((0x0080) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_ATUDFESEL; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDFESEL"<< i;
        ATUDFESEL   [i] = new vpcl::re_register((0x0084) + 8*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    for(uint i = 0; i < emNUM_ATUINTSELD;  i++) {
        mRegMap[(0x000C)     + i*4 ] = index;
        mRegMap[(0x000C + 1) + i*4 ] = index;
        mRegMap[(0x000C + 2) + i*4 ] = index;
        mRegMap[(0x000C + 3) + i*4 ] = index++;
    }
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index;
    mRegMap[0x001C + 2] = index;
    mRegMap[0x001C + 3] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    for(uint i = 0; i < emNUM_ATUDMASELCD; i++) {
        mRegMap[(0x0030)     + i*4 ] = index;
        mRegMap[(0x0030 + 1) + i*4 ] = index;
        mRegMap[(0x0030 + 2) + i*4 ] = index;
        mRegMap[(0x0030 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    for(uint i = 0; i < emNUM_ATUDFEENTQ;  i++) {
        mRegMap[(0x0080)     + i*8 ] = index;
        mRegMap[(0x0080 + 1) + i*8 ] = index;
        mRegMap[(0x0080 + 2) + i*8 ] = index;
        mRegMap[(0x0080 + 3) + i*8 ] = index++;
    }
    for(uint i = 0; i < emNUM_ATUDFESEL;   i++) {
        mRegMap[(0x0084)     + i*8 ] = index;
        mRegMap[(0x0084 + 1) + i*8 ] = index;
        mRegMap[(0x0084 + 2) + i*8 ] = index;
        mRegMap[(0x0084 + 3) + i*8 ] = index++;
    }
    mRegMap[0x0098]     = index;
    mRegMap[0x0098 + 1] = index;
    mRegMap[0x0098 + 2] = index;
    mRegMap[0x0098 + 3] = index++;
    mRegMap[0x009C]     = index;
    mRegMap[0x009C + 1] = index;
    mRegMap[0x009C + 2] = index;
    mRegMap[0x009C + 3] = index++;
    mRegMap[0x00A0]     = index;
    mRegMap[0x00A0 + 1] = index;
    mRegMap[0x00A0 + 2] = index;
    mRegMap[0x00A0 + 3] = index++;
    mRegMap[0x00A4]     = index;
    mRegMap[0x00A4 + 1] = index;
    mRegMap[0x00A4 + 2] = index;
    mRegMap[0x00A4 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_ATUINTSELA    , ATUINTSELA->name()  , ATUINTSELA->addr()  );
    for(uint i = 0; i < emNUM_ATUINTSELD  ; i++) cw_instantiate_reg(CW_ATUINTSELD    [i], ATUINTSELD  [i]->name(), ATUINTSELD  [i]->addr());
    cw_instantiate_reg(CW_ATUINTSELD4   , ATUINTSELD4->name() , ATUINTSELD4->addr() );
    cw_instantiate_reg(CW_ATUDMASELB    , ATUDMASELB->name()  , ATUDMASELB->addr()  );
    for(uint i = 0; i < emNUM_ATUDMASELCD ; i++) cw_instantiate_reg(CW_ATUDMASELCD   [i], ATUDMASELCD [i]->name(), ATUDMASELCD [i]->addr());
    cw_instantiate_reg(CW_ATUDMASELE    , ATUDMASELE->name()  , ATUDMASELE->addr()  );
    for(uint i = 0; i < emNUM_ATUDFEENTQ  ; i++) cw_instantiate_reg(CW_ATUDFEENTQ    [i], ATUDFEENTQ  [i]->name(), ATUDFEENTQ  [i]->addr());
    for(uint i = 0; i < emNUM_ATUDFESEL   ; i++) cw_instantiate_reg(CW_ATUDFESEL     [i], ATUDFESEL   [i]->name(), ATUDFESEL   [i]->addr());
    cw_instantiate_reg(CW_ATUDFESELD1T  , ATUDFESELD1T->name(), ATUDFESELD1T->addr());
    cw_instantiate_reg(CW_ATUDSSELDSTS  , ATUDSSELDSTS->name(), ATUDSSELDSTS->addr());
    cw_instantiate_reg(CW_ATUCASELCATS  , ATUCASELCATS->name(), ATUCASELCATS->addr());
    cw_instantiate_reg(CW_ATUP5SSEL     , ATUP5SSEL->name()   , ATUP5SSEL->addr()   );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(ATUINTSELA    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_ATUINTSELD  ; i++) mCurReg = mRegArray[index++] = new SRegList(ATUINTSELD    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUINTSELD4   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUDMASELB    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_ATUDMASELCD ; i++) mCurReg = mRegArray[index++] = new SRegList(ATUDMASELCD   [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUDMASELE    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_ATUDFEENTQ  ; i++) mCurReg = mRegArray[index++] = new SRegList(ATUDFEENTQ    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_ATUDFESEL   ; i++) mCurReg = mRegArray[index++] = new SRegList(ATUDFESEL     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUDFESELD1T  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUDSSELDSTS  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUCASELCATS  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ATUP5SSEL     , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*ATUINTSELA    ) (14, 12, "ATU_INTSEL_A3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELA    ) (10,  8, "ATU_INTSEL_A2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELA    ) ( 6,  4, "ATU_INTSEL_A1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELA    ) ( 2,  0, "ATU_INTSEL_A0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELD4   ) (14, 12, "ATU_INTSEL_D03", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELD4   ) (10,  8, "ATU_INTSEL_D02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELD4   ) ( 6,  4, "ATU_INTSEL_D01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUINTSELD4   ) ( 2,  0, "ATU_INTSEL_D00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDMASELB    ) (15, 12, "ATU_DMASEL_B3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDMASELB    ) (11,  8, "ATU_DMASEL_B2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDMASELB    ) ( 7,  4, "ATU_DMASEL_B1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDMASELB    ) ( 3,  0, "ATU_DMASEL_B0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDMASELE    ) (17,  0, "ATU_DMASEL_E", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDFESELD1T  ) ( 2,  0, "ATU_DFESEL_D1T", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) (19, 18, "ATU_DSSEL_DSTS9", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) (17, 16, "ATU_DSSEL_DSTS8", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) (15, 14, "ATU_DSSEL_DSTS7", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) (13, 12, "ATU_DSSEL_DSTS6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) (11, 10, "ATU_DSSEL_DSTS5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) ( 9,  8, "ATU_DSSEL_DSTS4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) ( 7,  6, "ATU_DSSEL_DSTS3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) ( 5,  4, "ATU_DSSEL_DSTS2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) ( 3,  2, "ATU_DSSEL_DSTS1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUDSSELDSTS  ) ( 1,  0, "ATU_DSSEL_DSTS0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUCASELCATS  ) ( 1,  0, "ATU_CASEL_CATS0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (27, 26, "ATU_P5SSEL_SSTSB", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (25, 24, "ATU_P5SSEL_SSTSA", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (23, 22, "ATU_P5SSEL_CRTSB", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (21, 20, "ATU_P5SSEL_CRTSA", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (19, 18, "ATU_P5SSEL_CKTSB", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (17, 16, "ATU_P5SSEL_CKTSA", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (15, 14, "ATU_P5SSEL_TGC7", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (13, 12, "ATU_P5SSEL_TGC6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) (11, 10, "ATU_P5SSEL_TGC5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) ( 9,  8, "ATU_P5SSEL_TGC4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) ( 7,  6, "ATU_P5SSEL_TGC3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) ( 5,  4, "ATU_P5SSEL_TGC2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ATUP5SSEL     ) ( 3,  2, "ATU_P5SSEL_TGC1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_ATUDMASELCD; i++) {
        (*ATUDMASELCD   [i]) (30, 28, "ATU_DMASEL_CD7", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) (26, 24, "ATU_DMASEL_CD6", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) (22, 20, "ATU_DMASEL_CD5", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) (18, 16, "ATU_DMASEL_CD4", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) (14, 12, "ATU_DMASEL_CD3", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) (10,  8, "ATU_DMASEL_CD2", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) ( 6,  4, "ATU_DMASEL_CD1", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDMASELCD   [i]) ( 2,  0, "ATU_DMASEL_CD0", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ATUINTSELD; i++) {
        (*ATUINTSELD    [i]) (30, 28, "ATU_INTSEL_D13", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) (26, 24, "ATU_INTSEL_D12", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) (22, 20, "ATU_INTSEL_D11", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) (18, 16, "ATU_INTSEL_D10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) (14, 12, "ATU_INTSEL_D03", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) (10,  8, "ATU_INTSEL_D02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) ( 6,  4, "ATU_INTSEL_D01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUINTSELD    [i]) ( 2,  0, "ATU_INTSEL_D00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ATUDFESEL; i++) {
        (*ATUDFESEL     [i]) (29, 29, "ATU_DFESEL_C91", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (28, 28, "ATU_DFESEL_C90", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (27, 27, "ATU_DFESEL_C83", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (26, 26, "ATU_DFESEL_C82", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (25, 25, "ATU_DFESEL_C81", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (24, 24, "ATU_DFESEL_C80", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (22, 20, "ATU_DFESEL_D11", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (18, 16, "ATU_DFESEL_D10", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (14, 12, "ATU_DFESEL_D03", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) (10,  8, "ATU_DFESEL_D02", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) ( 6,  4, "ATU_DFESEL_D01", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ATUDFESEL     [i]) ( 2,  0, "ATU_DFESEL_D00", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_ATUDFEENTQ; i++) {
        (*ATUDFEENTQ    [i]) (11,  0, "ATU_DFEEN_TQ", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ATUINTSELA"]["ATU_INTSEL_A0"] = &Catu5_glue_regif::cb_ATUINTSELA_ATU_INTSEL_A0;
    mWrCbAPI["ATUINTSELD4"]["ATU_INTSEL_D00"] = &Catu5_glue_regif::cb_ATUINTSELD4_ATU_INTSEL_D00;
    mWrCbAPI["ATUDMASELB"]["ATU_DMASEL_B0"] = &Catu5_glue_regif::cb_ATUDMASELB_ATU_DMASEL_B0;
    mWrCbAPI["ATUDMASELE"]["ATU_DMASEL_E"] = &Catu5_glue_regif::cb_ATUDMASELE_ATU_DMASEL_E;
    mWrCbAPI["ATUDFESELD1T"]["ATU_DFESEL_D1T"] = &Catu5_glue_regif::cb_ATUDFESELD1T_ATU_DFESEL_D1T;
    mWrCbAPI["ATUDSSELDSTS"]["ATU_DSSEL_DSTS0"] = &Catu5_glue_regif::cb_ATUDSSELDSTS_ATU_DSSEL_DSTS0;
    mWrCbAPI["ATUCASELCATS"]["ATU_CASEL_CATS0"] = &Catu5_glue_regif::cb_ATUCASELCATS_ATU_CASEL_CATS0;
    mWrCbAPI["ATUP5SSEL" ]["ATU_P5SSEL_TGC1"] = &Catu5_glue_regif::cb_ATUP5SSEL_ATU_P5SSEL_TGC1;

    for(uint i = 0; i < emNUM_ATUINTSELD; i++) {
        str_tmp.str("");
        str_tmp<<"ATUINTSELD"<< i;
        mWrCbAPI[str_tmp.str()]["ATU_INTSEL_D00"] = &Catu5_glue_regif::cb_ATUINTSELD_ATU_INTSEL_D00;
    }
    for(uint i = 0; i < emNUM_ATUDMASELCD; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDMASELCD"<< i;
        mWrCbAPI[str_tmp.str()]["ATU_DMASEL_CD0"] = &Catu5_glue_regif::cb_ATUDMASELCD_ATU_DMASEL_CD0;
    }
    for(uint i = 0; i < emNUM_ATUDFEENTQ; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDFEENTQ"<< i;
        mWrCbAPI[str_tmp.str()]["ATU_DFEEN_TQ"] = &Catu5_glue_regif::cb_ATUDFEENTQ_ATU_DFEEN_TQ;
    }
    for(uint i = 0; i < emNUM_ATUDFESEL; i++) {
        str_tmp.str("");
        str_tmp<<"ATUDFESEL"<< i;
        mWrCbAPI[str_tmp.str()]["ATU_DFESEL_D00"] = &Catu5_glue_regif::cb_ATUDFESEL_ATU_DFESEL_D00;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Catu5_glue_regif::~Catu5_glue_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Catu5_glue_regif::uint Catu5_glue_regif::bit_select(
                              cuint val,    ///< [in] Writting address
                              cuint start,  ///< [in] start bit position
                              cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_glue_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                              const unsigned char *p_data,   ///< [in] Writing data
                              cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_glue_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                              unsigned char *p_data,   ///< [out] Reading data
                              cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_glue_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                  const unsigned char *p_data,   ///< [in] Writing data
                                  cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_glue_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                  unsigned char *p_data,   ///< [out] Reading data
                                  cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5_glue_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                      const unsigned char *p_data,  ///< [in] Writing data
                                      cuint size,                   ///< [in] Data size (byte)
                                      bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5_glue_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                      unsigned char *p_data,   ///< [out] Reading data
                                      cuint size,              ///< [in]  Data size (byte)
                                      bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Catu5_glue_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                   unsigned char *p_data,          ///< [out] Reading data
                                   cuint size,                     ///< [in]  Data size (byte)
                                   cuint reg_index,                ///< [in] Register index
                                   bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Catu5_glue_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                   const unsigned char *p_data,      ///< [in] Writing data
                                   cuint size,                       ///< [in] Data size (byte)
                                   cuint reg_index,                  ///< [in] Register index
                                   bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Catu5_glue_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Catu5_glue_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Catu5_glue_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Catu5_glue_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Catu5_glue_regif::InitLocalVal()
{
    // Initialize local variables
    ATUINTSELA_ATU_INTSEL_A3 = 0x0;
    ATUINTSELA_ATU_INTSEL_A2 = 0x0;
    ATUINTSELA_ATU_INTSEL_A1 = 0x0;
    ATUINTSELA_ATU_INTSEL_A0 = 0x0;
    for(uint i = 0; i < emNUM_ATUINTSELD;  i++) {
        ATUINTSELD_ATU_INTSEL_D13[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D12[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D11[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D10[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D03[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D02[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D01[i] = 0x0;
        ATUINTSELD_ATU_INTSEL_D00[i] = 0x0;
    }
    ATUINTSELD4_ATU_INTSEL_D03 = 0x0;
    ATUINTSELD4_ATU_INTSEL_D02 = 0x0;
    ATUINTSELD4_ATU_INTSEL_D01 = 0x0;
    ATUINTSELD4_ATU_INTSEL_D00 = 0x0;
    ATUDMASELB_ATU_DMASEL_B3 = 0x0;
    ATUDMASELB_ATU_DMASEL_B2 = 0x0;
    ATUDMASELB_ATU_DMASEL_B1 = 0x0;
    ATUDMASELB_ATU_DMASEL_B0 = 0x0;
    for(uint i = 0; i < emNUM_ATUDMASELCD; i++) {
        ATUDMASELCD_ATU_DMASEL_CD7[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD6[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD5[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD4[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD3[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD2[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD1[i] = 0x0;
        ATUDMASELCD_ATU_DMASEL_CD0[i] = 0x0;
    }
    ATUDMASELE_ATU_DMASEL_E = 0x0;
    for(uint i = 0; i < emNUM_ATUDFEENTQ;  i++) {
        ATUDFEENTQ_ATU_DFEEN_TQ[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_ATUDFESEL;   i++) {
        ATUDFESEL_ATU_DFESEL_C91[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_C90[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_C83[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_C82[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_C81[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_C80[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D11[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D10[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D03[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D02[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D01[i] = 0x0;
        ATUDFESEL_ATU_DFESEL_D00[i] = 0x0;
    }
    ATUDFESELD1T_ATU_DFESEL_D1T = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS9 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS8 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS7 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS6 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS5 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS4 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS3 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS2 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS1 = 0x0;
    ATUDSSELDSTS_ATU_DSSEL_DSTS0 = 0x0;
    ATUCASELCATS_ATU_CASEL_CATS0 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_SSTSB = 0x0;
    ATUP5SSEL_ATU_P5SSEL_SSTSA = 0x0;
    ATUP5SSEL_ATU_P5SSEL_CRTSB = 0x0;
    ATUP5SSEL_ATU_P5SSEL_CRTSA = 0x0;
    ATUP5SSEL_ATU_P5SSEL_CKTSB = 0x0;
    ATUP5SSEL_ATU_P5SSEL_CKTSA = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC7 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC6 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC5 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC4 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC3 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC2 = 0x0;
    ATUP5SSEL_ATU_P5SSEL_TGC1 = 0x0;
}

/// Update bit value to local value
/// @return None
void Catu5_glue_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ATUINTSELA_ATU_INTSEL_A3         = (*ATUINTSELA  )["ATU_INTSEL_A3"];
        ATUINTSELA_ATU_INTSEL_A2         = (*ATUINTSELA  )["ATU_INTSEL_A2"];
        ATUINTSELA_ATU_INTSEL_A1         = (*ATUINTSELA  )["ATU_INTSEL_A1"];
        ATUINTSELA_ATU_INTSEL_A0         = (*ATUINTSELA  )["ATU_INTSEL_A0"];
        return;
    }
    if ((0x000C <= addr) && (addr <= (0x000C)+(4*3)) && ((addr-0x000C)%4 == 0)) {
        uint i = (addr - 0x000C)/4;
        ATUINTSELD_ATU_INTSEL_D13       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D13"];
        ATUINTSELD_ATU_INTSEL_D12       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D12"];
        ATUINTSELD_ATU_INTSEL_D11       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D11"];
        ATUINTSELD_ATU_INTSEL_D10       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D10"];
        ATUINTSELD_ATU_INTSEL_D03       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D03"];
        ATUINTSELD_ATU_INTSEL_D02       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D02"];
        ATUINTSELD_ATU_INTSEL_D01       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D01"];
        ATUINTSELD_ATU_INTSEL_D00       [i] = (*(ATUINTSELD  [i]))["ATU_INTSEL_D00"];
        return;
    }
    if (addr == 0x001C) {
        ATUINTSELD4_ATU_INTSEL_D03       = (*ATUINTSELD4 )["ATU_INTSEL_D03"];
        ATUINTSELD4_ATU_INTSEL_D02       = (*ATUINTSELD4 )["ATU_INTSEL_D02"];
        ATUINTSELD4_ATU_INTSEL_D01       = (*ATUINTSELD4 )["ATU_INTSEL_D01"];
        ATUINTSELD4_ATU_INTSEL_D00       = (*ATUINTSELD4 )["ATU_INTSEL_D00"];
        return;
    }
    if (addr == 0x002C) {
        ATUDMASELB_ATU_DMASEL_B3         = (*ATUDMASELB  )["ATU_DMASEL_B3"];
        ATUDMASELB_ATU_DMASEL_B2         = (*ATUDMASELB  )["ATU_DMASEL_B2"];
        ATUDMASELB_ATU_DMASEL_B1         = (*ATUDMASELB  )["ATU_DMASEL_B1"];
        ATUDMASELB_ATU_DMASEL_B0         = (*ATUDMASELB  )["ATU_DMASEL_B0"];
        return;
    }
    if ((0x0030 <= addr) && (addr <= (0x0030)+(4*7)) && ((addr-0x0030)%4 == 0)) {
        uint i = (addr - 0x0030)/4;
        ATUDMASELCD_ATU_DMASEL_CD7      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD7"];
        ATUDMASELCD_ATU_DMASEL_CD6      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD6"];
        ATUDMASELCD_ATU_DMASEL_CD5      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD5"];
        ATUDMASELCD_ATU_DMASEL_CD4      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD4"];
        ATUDMASELCD_ATU_DMASEL_CD3      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD3"];
        ATUDMASELCD_ATU_DMASEL_CD2      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD2"];
        ATUDMASELCD_ATU_DMASEL_CD1      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD1"];
        ATUDMASELCD_ATU_DMASEL_CD0      [i] = (*(ATUDMASELCD [i]))["ATU_DMASEL_CD0"];
        return;
    }
    if (addr == 0x0050) {
        ATUDMASELE_ATU_DMASEL_E          = (*ATUDMASELE  )["ATU_DMASEL_E"];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(8*2)) && ((addr-0x0080)%8 == 0)) {
        uint i = (addr - 0x0080)/8;
        ATUDFEENTQ_ATU_DFEEN_TQ         [i] = (*(ATUDFEENTQ  [i]))["ATU_DFEEN_TQ"];
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(8*2)) && ((addr-0x0084)%8 == 0)) {
        uint i = (addr - 0x0084)/8;
        ATUDFESEL_ATU_DFESEL_C91        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C91"];
        ATUDFESEL_ATU_DFESEL_C90        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C90"];
        ATUDFESEL_ATU_DFESEL_C83        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C83"];
        ATUDFESEL_ATU_DFESEL_C82        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C82"];
        ATUDFESEL_ATU_DFESEL_C81        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C81"];
        ATUDFESEL_ATU_DFESEL_C80        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_C80"];
        ATUDFESEL_ATU_DFESEL_D11        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D11"];
        ATUDFESEL_ATU_DFESEL_D10        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D10"];
        ATUDFESEL_ATU_DFESEL_D03        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D03"];
        ATUDFESEL_ATU_DFESEL_D02        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D02"];
        ATUDFESEL_ATU_DFESEL_D01        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D01"];
        ATUDFESEL_ATU_DFESEL_D00        [i] = (*(ATUDFESEL   [i]))["ATU_DFESEL_D00"];
        return;
    }
    if (addr == 0x0098) {
        ATUDFESELD1T_ATU_DFESEL_D1T      = (*ATUDFESELD1T)["ATU_DFESEL_D1T"];
        return;
    }
    if (addr == 0x009C) {
        ATUDSSELDSTS_ATU_DSSEL_DSTS9     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS9"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS8     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS8"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS7     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS7"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS6     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS6"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS5     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS5"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS4     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS4"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS3     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS3"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS2     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS2"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS1     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS1"];
        ATUDSSELDSTS_ATU_DSSEL_DSTS0     = (*ATUDSSELDSTS)["ATU_DSSEL_DSTS0"];
        return;
    }
    if (addr == 0x00A0) {
        ATUCASELCATS_ATU_CASEL_CATS0     = (*ATUCASELCATS)["ATU_CASEL_CATS0"];
        return;
    }
    if (addr == 0x00A4) {
        ATUP5SSEL_ATU_P5SSEL_SSTSB       = (*ATUP5SSEL   )["ATU_P5SSEL_SSTSB"];
        ATUP5SSEL_ATU_P5SSEL_SSTSA       = (*ATUP5SSEL   )["ATU_P5SSEL_SSTSA"];
        ATUP5SSEL_ATU_P5SSEL_CRTSB       = (*ATUP5SSEL   )["ATU_P5SSEL_CRTSB"];
        ATUP5SSEL_ATU_P5SSEL_CRTSA       = (*ATUP5SSEL   )["ATU_P5SSEL_CRTSA"];
        ATUP5SSEL_ATU_P5SSEL_CKTSB       = (*ATUP5SSEL   )["ATU_P5SSEL_CKTSB"];
        ATUP5SSEL_ATU_P5SSEL_CKTSA       = (*ATUP5SSEL   )["ATU_P5SSEL_CKTSA"];
        ATUP5SSEL_ATU_P5SSEL_TGC7        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC7"];
        ATUP5SSEL_ATU_P5SSEL_TGC6        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC6"];
        ATUP5SSEL_ATU_P5SSEL_TGC5        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC5"];
        ATUP5SSEL_ATU_P5SSEL_TGC4        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC4"];
        ATUP5SSEL_ATU_P5SSEL_TGC3        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC3"];
        ATUP5SSEL_ATU_P5SSEL_TGC2        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC2"];
        ATUP5SSEL_ATU_P5SSEL_TGC1        = (*ATUP5SSEL   )["ATU_P5SSEL_TGC1"];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Catu5_glue_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ATUINTSELA  )["ATU_INTSEL_A3"] = ATUINTSELA_ATU_INTSEL_A3;
        (*ATUINTSELA  )["ATU_INTSEL_A2"] = ATUINTSELA_ATU_INTSEL_A2;
        (*ATUINTSELA  )["ATU_INTSEL_A1"] = ATUINTSELA_ATU_INTSEL_A1;
        (*ATUINTSELA  )["ATU_INTSEL_A0"] = ATUINTSELA_ATU_INTSEL_A0;
        return;
    }
    if ((0x000C <= addr) && (addr <= (0x000C)+(4*3)) && ((addr-0x000C)%4 == 0)) {
        uint i = (addr - 0x000C)/4;
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D13"] = ATUINTSELD_ATU_INTSEL_D13[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D12"] = ATUINTSELD_ATU_INTSEL_D12[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D11"] = ATUINTSELD_ATU_INTSEL_D11[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D10"] = ATUINTSELD_ATU_INTSEL_D10[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D03"] = ATUINTSELD_ATU_INTSEL_D03[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D02"] = ATUINTSELD_ATU_INTSEL_D02[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D01"] = ATUINTSELD_ATU_INTSEL_D01[i];
        (*(ATUINTSELD  [i]))["ATU_INTSEL_D00"] = ATUINTSELD_ATU_INTSEL_D00[i];
        return;
    }
    if (addr == 0x001C) {
        (*ATUINTSELD4 )["ATU_INTSEL_D03"] = ATUINTSELD4_ATU_INTSEL_D03;
        (*ATUINTSELD4 )["ATU_INTSEL_D02"] = ATUINTSELD4_ATU_INTSEL_D02;
        (*ATUINTSELD4 )["ATU_INTSEL_D01"] = ATUINTSELD4_ATU_INTSEL_D01;
        (*ATUINTSELD4 )["ATU_INTSEL_D00"] = ATUINTSELD4_ATU_INTSEL_D00;
        return;
    }
    if (addr == 0x002C) {
        (*ATUDMASELB  )["ATU_DMASEL_B3"] = ATUDMASELB_ATU_DMASEL_B3;
        (*ATUDMASELB  )["ATU_DMASEL_B2"] = ATUDMASELB_ATU_DMASEL_B2;
        (*ATUDMASELB  )["ATU_DMASEL_B1"] = ATUDMASELB_ATU_DMASEL_B1;
        (*ATUDMASELB  )["ATU_DMASEL_B0"] = ATUDMASELB_ATU_DMASEL_B0;
        return;
    }
    if ((0x0030 <= addr) && (addr <= (0x0030)+(4*7)) && ((addr-0x0030)%4 == 0)) {
        uint i = (addr - 0x0030)/4;
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD7"] = ATUDMASELCD_ATU_DMASEL_CD7[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD6"] = ATUDMASELCD_ATU_DMASEL_CD6[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD5"] = ATUDMASELCD_ATU_DMASEL_CD5[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD4"] = ATUDMASELCD_ATU_DMASEL_CD4[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD3"] = ATUDMASELCD_ATU_DMASEL_CD3[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD2"] = ATUDMASELCD_ATU_DMASEL_CD2[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD1"] = ATUDMASELCD_ATU_DMASEL_CD1[i];
        (*(ATUDMASELCD [i]))["ATU_DMASEL_CD0"] = ATUDMASELCD_ATU_DMASEL_CD0[i];
        return;
    }
    if (addr == 0x0050) {
        (*ATUDMASELE  )["ATU_DMASEL_E"] = ATUDMASELE_ATU_DMASEL_E;
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(8*2)) && ((addr-0x0080)%8 == 0)) {
        uint i = (addr - 0x0080)/8;
        (*(ATUDFEENTQ  [i]))["ATU_DFEEN_TQ"] = ATUDFEENTQ_ATU_DFEEN_TQ[i];
        return;
    }
    if ((0x0084 <= addr) && (addr <= (0x0084)+(8*2)) && ((addr-0x0084)%8 == 0)) {
        uint i = (addr - 0x0084)/8;
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C91"] = ATUDFESEL_ATU_DFESEL_C91[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C90"] = ATUDFESEL_ATU_DFESEL_C90[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C83"] = ATUDFESEL_ATU_DFESEL_C83[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C82"] = ATUDFESEL_ATU_DFESEL_C82[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C81"] = ATUDFESEL_ATU_DFESEL_C81[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_C80"] = ATUDFESEL_ATU_DFESEL_C80[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D11"] = ATUDFESEL_ATU_DFESEL_D11[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D10"] = ATUDFESEL_ATU_DFESEL_D10[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D03"] = ATUDFESEL_ATU_DFESEL_D03[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D02"] = ATUDFESEL_ATU_DFESEL_D02[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D01"] = ATUDFESEL_ATU_DFESEL_D01[i];
        (*(ATUDFESEL   [i]))["ATU_DFESEL_D00"] = ATUDFESEL_ATU_DFESEL_D00[i];
        return;
    }
    if (addr == 0x0098) {
        (*ATUDFESELD1T)["ATU_DFESEL_D1T"] = ATUDFESELD1T_ATU_DFESEL_D1T;
        return;
    }
    if (addr == 0x009C) {
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS9"] = ATUDSSELDSTS_ATU_DSSEL_DSTS9;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS8"] = ATUDSSELDSTS_ATU_DSSEL_DSTS8;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS7"] = ATUDSSELDSTS_ATU_DSSEL_DSTS7;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS6"] = ATUDSSELDSTS_ATU_DSSEL_DSTS6;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS5"] = ATUDSSELDSTS_ATU_DSSEL_DSTS5;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS4"] = ATUDSSELDSTS_ATU_DSSEL_DSTS4;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS3"] = ATUDSSELDSTS_ATU_DSSEL_DSTS3;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS2"] = ATUDSSELDSTS_ATU_DSSEL_DSTS2;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS1"] = ATUDSSELDSTS_ATU_DSSEL_DSTS1;
        (*ATUDSSELDSTS)["ATU_DSSEL_DSTS0"] = ATUDSSELDSTS_ATU_DSSEL_DSTS0;
        return;
    }
    if (addr == 0x00A0) {
        (*ATUCASELCATS)["ATU_CASEL_CATS0"] = ATUCASELCATS_ATU_CASEL_CATS0;
        return;
    }
    if (addr == 0x00A4) {
        (*ATUP5SSEL   )["ATU_P5SSEL_SSTSB"] = ATUP5SSEL_ATU_P5SSEL_SSTSB;
        (*ATUP5SSEL   )["ATU_P5SSEL_SSTSA"] = ATUP5SSEL_ATU_P5SSEL_SSTSA;
        (*ATUP5SSEL   )["ATU_P5SSEL_CRTSB"] = ATUP5SSEL_ATU_P5SSEL_CRTSB;
        (*ATUP5SSEL   )["ATU_P5SSEL_CRTSA"] = ATUP5SSEL_ATU_P5SSEL_CRTSA;
        (*ATUP5SSEL   )["ATU_P5SSEL_CKTSB"] = ATUP5SSEL_ATU_P5SSEL_CKTSB;
        (*ATUP5SSEL   )["ATU_P5SSEL_CKTSA"] = ATUP5SSEL_ATU_P5SSEL_CKTSA;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC7"] = ATUP5SSEL_ATU_P5SSEL_TGC7;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC6"] = ATUP5SSEL_ATU_P5SSEL_TGC6;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC5"] = ATUP5SSEL_ATU_P5SSEL_TGC5;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC4"] = ATUP5SSEL_ATU_P5SSEL_TGC4;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC3"] = ATUP5SSEL_ATU_P5SSEL_TGC3;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC2"] = ATUP5SSEL_ATU_P5SSEL_TGC2;
        (*ATUP5SSEL   )["ATU_P5SSEL_TGC1"] = ATUP5SSEL_ATU_P5SSEL_TGC1;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Catu5_glue_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Catu5_glue_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Catu5_glue_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Catu5_glue_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Catu5_glue_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Catu5_glue_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Catu5_glue_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Catu5_glue_regif::uint Catu5_glue_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Catu5_glue_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Catu5_glue_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Catu5_glue_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Catu5_glue_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Catu5_glue_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Catu5_glue_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Catu5_glue_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
