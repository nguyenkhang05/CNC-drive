// -----------------------------------------------------------------------------
// $Id: hwcore_adtrg_regif.h,v 1.4 2020/10/15 02:21:24 huepham Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_adtrg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_ADTRG
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE     name                 reg_name               wsize       rsize      length       offset     factor_start    factor_end  factor_index    factor_step      access   init           support  callback
//     %%REG       ADCTR                 ADCTR                   8         8|16|32       8           0x180          -              -          -               -              R|W    0x00             TRUE      -
//     %%REG       SMCTR                 SMCTR                   8         8|16|32       8           0x181          -              -          -               -              R|W    0x00             TRUE      -
//     %%REG       ADSFTTRG              ADSFTTRG                8         8|16|32       8           0x182          -              -          -               -              R|W    0x00             TRUE       W
//     %%REG       ADSMTRG               ADSMTRG                32         8|16|32      32           0x184          -              -          -               -              R|W    0x00000000       TRUE       -
//     %%REG       ADSMOFS               ADSMOFS                32         8|16|32      32           0x188          -              -          -               -              R|W    0x00000000       TRUE       -
//     %%REG       ADTRGM                ADTRGM                 16         8|16|32      16           0x18C          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADTRGCTR              ADTRGCTR               8          8|16|32       8           0x190          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       TRGGCM                TRGGCM                 16         8|16|32      16           0x194          -              -          -               -              R|W    0x3000           TRUE       -
//     %%REG       ADEDM                 ADEDM                  16         8|16|32      16           0x198          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMWCTR               ADMWCTR                8          8|16|32       8           0x19C          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADMOFS2               ADMOFS2                16         8|16|32      16           0x1A0          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMNCNT               ADMNCNT                16         8|16|32      16           0x1A4          -              -          -               -              R|W    0x0000           TRUE       -
//     %%REG       ADMNMON               ADMNMON                -          8|16|32      16           0x1A6          -              -          -               -              R      0x0000           TRUE       -
//     %%REG       ADBUFSEL              ADBUFSEL               8          8|16|32      8            0x1AC          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADENDCTR              ADENDCTR               8          8|16|32      8            0x1AD          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADDCNT                ADDCNT                 32         8|16|32      32           0x1B0          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       RDDCNT                RDDCNT                 32         8|16|32      32           0x1B4          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADTRG                 ADTRG                  8|16       8|16|32      16           0x1B8          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       ADMON                 ADMON                  -          8|16|32      16           0x1BC          -              -          -               -              R      0x00             TRUE       -
//     %%REG       ADMONC                ADMONC                 8|16       8|16|32      16           0x1C0          -              -          -               -              R|W    0x00             TRUE       -
//     %%REG       THTE                  THTE                   -          8|16|32      16           0x1C4          -              -          -               -              R      0x00             TRUE       -
//     %%REG       THTR                  THTR                   -          8|16|32      16           0x1C6          -              -          -               -              R      0x00             TRUE       -
//     %%REG       AD                    AD                     16         8|16|32      16           0x1C8          0              2          -               0x2            R|W    0x00             TRUE       W
// 
// %REG_NAME ADCTR
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IE4                 2      2     0x0          R|W      TRUE           -
//     %%BIT       IE3                 1      1     0x0          R|W      TRUE           -
//     %%BIT       ADRM                0      0     0x0          R|W      TRUE           -
//                                                                                 
// %REG_NAME SMCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMVEN                1      1     0x0          R|W      TRUE           -
//     %%BIT       SMMEN                0      0     0x0          R|W      TRUE           -
// 
//                                                                                 
// %REG_NAME ADSFTTRG                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SFTAD                0     0     0x0          R|W      TRUE            W
//                                  
// %REG_NAME ADSMTRG              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMNUM                27     24   0x0          R|W      TRUE            -
//     %%BIT       SMCNT                17      0   0x0          R|W      TRUE            -
//                                                                                     
// %REG_NAME ADSMOFS                                                             
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       SMOFS                17     0     0x0         R|W      TRUE            -
//                                                                                     
// %REG_NAME ADTRGM                                                            
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       M                   15     0     0x0           R|W      TRUE           -
//                                                                                  
// %REG_NAME TRGGCM                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       TRGSEL              13     12   0x3           R|W      TRUE           -
//     %%BIT       TRG0SEL              8      8   0x0            R|W      TRUE           -
//     %%BIT       TRG1CNT              7      4   0x0            R|W      TRUE           -
//     %%BIT       TRG0CNT              3      0   0x0            R|W      TRUE           -
//                                                                                     
// %REG_NAME ADEDM                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       M                   15     0     0x0           R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMWCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       THTSEL              2       2   0x0            R|W      TRUE           -
//     %%BIT       MTRGSEL             1       1   0x0            R|W      TRUE           -
//     %%BIT       EN                  0       0   0x0            R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMOFS2                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                15     0     0x0000        R|W      TRUE           W
//                                                                                     
// %REG_NAME ADMNCNT                                                          
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0    0x000          R|W      TRUE           -
//                                                                                     
// %REG_NAME ADMNMON                                                             
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       MNSEL               15     15    0x0           R        TRUE           -
//     %%BIT       MNNUM               11     0     0x0           R        TRUE           -
//                                                                                     
// %REG_NAME ADBUFSEL                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       AD2BUFSEL           5      4     0x0           R|W      TRUE           -
//     %%BIT       AD1BUFSEL           3      2     0x0           R|W      TRUE           -
//     %%BIT       AD0BUFSEL           1      0     0x0           R|W      TRUE           W
// 
// %REG_NAME ADENDCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       ADEND               1      0     0x0           R|W      TRUE           W
//     
// %REG_NAME ADDCNT                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       ADDATA              17     0     0x0           R|W      TRUE           -  
// 
// %REG_NAME RDDCNT                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       RDDATA              17     0     0x0           R|W      TRUE           -   
//     
// %REG_NAME ADTRG                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WAD              10     10    0x0           R|W      TRUE           -  
//     %%BIT       IR3VAD              9      9     0x0           R|W      TRUE           -  
//     %%BIT       IR3UAD              8      8     0x0           R|W      TRUE           -  
//     %%BIT       CMPVSL              5      5     0x0           R|W      TRUE           -  
//     %%BIT       CMPMSL              4      4     0x0           R|W      TRUE           -  
//     %%BIT       CMPAD               2      2     0x0           R|W      TRUE           -  
//     %%BIT       CAVALAD             1      1     0x0           R|W      TRUE           -  
//     %%BIT       CAMOUAD             0      0     0x0           R|W      TRUE           -  
// 
// %REG_NAME ADMON                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WADM             10     10    0x0            R       TRUE           -
//     %%BIT       IR3VADM              9     9     0x0            R       TRUE           -
//     %%BIT       IR3UADM              8     8     0x0            R       TRUE           -
//     %%BIT       SFTADM               3     3     0x0            R       TRUE           -
//     %%BIT       CMPADM               2     2     0x0            R       TRUE           -
//     %%BIT       CAVALADM             1     1     0x0            R       TRUE           -
//     %%BIT       CAMOUADM             0     0     0x0            R       TRUE           -
//     
// %REG_NAME ADMONC                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       IR3WADMC            10     10    0x0           R|W      TRUE           -
//     %%BIT       IR3VADMC             9     9     0x0           R|W      TRUE           -
//     %%BIT       IR3UADMC             8     8     0x0           R|W      TRUE           -
//     %%BIT       SFTADMC              3     3     0x0           R|W      TRUE           -
//     %%BIT       CMPADMC              2     2     0x0           R|W      TRUE           -
//     %%BIT       CAVALADMC            1     1     0x0           R|W      TRUE           -
//     %%BIT       CAMOUADMC            0     0     0x0           R|W      TRUE           W
//                                                               
// %REG_NAME THTE                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R        TRUE           -    
// 
// %REG_NAME THTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R        TRUE           -    
// 
// %REG_NAME AD                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       DATA                11     0     0x0           R|W        TRUE         W      
// 
// %REG_NAME ADTRGCTR                                                              
//     %%TITLE     name               upper  lower  init        access  support        callback
//     %%BIT       GCMEN               0      0     0x0           R|W        TRUE         -      
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_adtrg_regif.h
/// @brief Register IF class of model HWCORE_ADTRG
/// $Id: hwcore_adtrg_regif.h,v 1.4 2020/10/15 02:21:24 huepham Exp $
/// $Date: 2020/10/15 02:21:24 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_ADTRG_REGIF_H__
#define __HWCORE_ADTRG_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_ADTRG model
class Chwcore_adtrg_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_AD       = 3
    }; ///< Enumeration for register factor index
#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_adtrg_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_adtrg_regif(std::string name, uint buswidth);
    ~Chwcore_adtrg_regif();

protected:
    vpcl::re_register *ADCTR   ;
    vpcl::re_register *SMCTR   ;
    vpcl::re_register *ADSFTTRG;
    vpcl::re_register *ADSMTRG ;
    vpcl::re_register *ADSMOFS ;
    vpcl::re_register *ADTRGM  ;
    vpcl::re_register *ADTRGCTR;
    vpcl::re_register *TRGGCM  ;
    vpcl::re_register *ADEDM   ;
    vpcl::re_register *ADMWCTR ;
    vpcl::re_register *ADMOFS2 ;
    vpcl::re_register *ADMNCNT ;
    vpcl::re_register *ADMNMON ;
    vpcl::re_register *ADBUFSEL;
    vpcl::re_register *ADENDCTR;
    vpcl::re_register *ADDCNT  ;
    vpcl::re_register *RDDCNT  ;
    vpcl::re_register *ADTRG   ;
    vpcl::re_register *ADMON   ;
    vpcl::re_register *ADMONC  ;
    vpcl::re_register *THTE    ;
    vpcl::re_register *THTR    ;
    vpcl::re_register *AD      [3];

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_ADSFTTRG_SFTAD(RegCBstr str) = 0;
    virtual void cb_ADMOFS2_DATA(RegCBstr str) = 0;
    virtual void cb_ADBUFSEL_AD0BUFSEL(RegCBstr str) = 0;
    virtual void cb_ADENDCTR_ADEND(RegCBstr str) = 0;
    virtual void cb_ADMONC_CAMOUADMC(RegCBstr str) = 0;
    virtual void cb_AD_DATA(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_adtrg_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_adtrg_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_adtrg_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_adtrg_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_ADTRG_REG_DEF_H__
