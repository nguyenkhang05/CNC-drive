// $Id$
// -----------------------------------------------------------------------------
// Copyright(c) 2014 Renesas Design Vietnam Co., Ltd.
// Copyright(c) 2014 Renesas Electronics Corporation
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by FSM generator version 1.0
// Input file : sarad113x_fsm.csv
//              sarad113x_tha_fsm.csv
//              sarad113x_thb_fsm.csv
////////////////////////////////////////////////////////////////////////////////

#include "sarad113x_fsm.h"
#include "sarad113x.h"

Csarad113x_tha_conv_fsm::Csarad113x_tha_conv_fsm(Csarad113x *_parent, std::string upper_state)
    :Cfsm_base(_parent, upper_state, emStNA, emEvtWOE+1)
{
    mStateNameStr[emStTHA_IDLE               ] = mStateNamePrefix + "THA_IDLE";
    mStateNameStr[emStTHA_SAMPLING           ] = mStateNamePrefix + "THA_SAMPLING";
    mStateNameStr[emStTHA_HOLDING            ] = mStateNamePrefix + "THA_HOLDING";
    mStateNameStr[emStTHA_DELAY_HOLDING      ] = mStateNamePrefix + "THA_DELAY_HOLDING";
    mStateNameStr[emStTHA_SCANNING           ] = mStateNamePrefix + "THA_SCANNING";
    mStateNameStr[emStTHA_SCANNING_END       ] = mStateNamePrefix + "THA_SCANNING_END";
    mStateNameStr[emStTHA_VC_CONV            ] = mStateNamePrefix + "THA_VC_CONV";
    mStateNameStr[emStTHA_VC_CONV_END        ] = mStateNamePrefix + "THA_VC_CONV_END";
    mStateNameStr[emStTHA_SUSPEND            ] = mStateNamePrefix + "THA_SUSPEND";
    mStateNameStr[emStTHA_WAIT_SCANNING_START] = mStateNamePrefix + "THA_WAIT_SCANNING_START";
    
    mCurrentState = emStTHA_IDLE; // Initial state


    // State transition table construction
    mNextStateList[emStTHA_IDLE               ][emEvtTHAStartSampling     ] = emStNA + 1;
    
    mNextStateList[emStTHA_SAMPLING           ][emEvtEnd                  ] = emStTHA_IDLE;
    mNextStateList[emStTHA_SAMPLING           ][emEvtTHAHWTrigger         ] = emStNA + 2;
    mNextStateList[emStTHA_SAMPLING           ][emEvtTHASWTrigger         ] = emStNA + 3;
    mNextStateList[emStTHA_SAMPLING           ][emEvtTHAHoldStart         ] = emStNA + 4;
    
    mNextStateList[emStTHA_HOLDING            ][emEvtEnd                  ] = emStTHA_IDLE;
    mNextStateList[emStTHA_HOLDING            ][emEvtTHAHWTrigger         ] = emStNA + 5;
    mNextStateList[emStTHA_HOLDING            ][emEvtTHASWTrigger         ] = emStNA + 6;
    mNextStateList[emStTHA_HOLDING            ][emEvtTHAHoldComplete      ] = emStNA + 7;
    
    mNextStateList[emStTHA_DELAY_HOLDING      ][emEvtEnd                  ] = emStTHA_IDLE;
    mNextStateList[emStTHA_DELAY_HOLDING      ][emEvtTHAEndHolding        ] = emStNA + 8;
    
    mNextStateList[emStTHA_SCANNING           ][emEvtWOE                  ] = emStNA + 9;
    
    mNextStateList[emStTHA_SCANNING_END       ][emEvtWOE                  ] = emStNA + 10;
    
    mNextStateList[emStTHA_VC_CONV            ][emEvtEnd                  ] = emStTHA_IDLE;
    mNextStateList[emStTHA_VC_CONV            ][emEvtTHAFinishVCConversion] = emStTHA_VC_CONV_END;
    mNextStateList[emStTHA_VC_CONV            ][emEvtTHASuspend           ] = emStTHA_SUSPEND;
    
    mNextStateList[emStTHA_VC_CONV_END        ][emEvtWOE                  ] = emStNA + 11;
    
    mNextStateList[emStTHA_SUSPEND            ][emEvtWOE                  ] = emStTHA_WAIT_SCANNING_START;
    
    mNextStateList[emStTHA_WAIT_SCANNING_START][emEvtEnd                  ] = emStTHA_IDLE;
    mNextStateList[emStTHA_WAIT_SCANNING_START][emEvtTHAResume            ] = emStTHA_SCANNING;
    
}

Csarad113x_tha_conv_fsm::~Csarad113x_tha_conv_fsm(void)
{
}

void Csarad113x_tha_conv_fsm::End(void)
{
    Event(emEvtEnd);
}

void Csarad113x_tha_conv_fsm::Event(unsigned int event)
{
    sc_assert(event != emEvtWOE);

    bool state_next = StateTransition(event);
    while (state_next) state_next = StateTransition(emEvtWOE);
}

void Csarad113x_tha_conv_fsm::CheckCondition(const unsigned int condition_id)
{
    sc_assert(condition_id < 11);
    switch (condition_id) {
        case 0:
            if (mParent->CheckEnableTH(Csarad113x::emTHGroupA)) {
                mNextState = emStTHA_SAMPLING;
            }
            break;
        case 1:
            if ((mParent->CheckHoldStart(Csarad113x::emTHGroupA,true,Csarad113x::emHWTrigger)) &&(mParent->CheckSmpTime(Csarad113x::emTHGroupA,true))) {
                mNextState = emStTHA_HOLDING;
            }
            break;
        case 2:
            if ((mParent->CheckHoldStart(Csarad113x::emTHGroupA,true,Csarad113x::emSWTrigger)) &&(mParent->CheckSmpTime(Csarad113x::emTHGroupA,false))) {
                mNextState = emStTHA_HOLDING;
            }
            break;
        case 3:
            if ((mParent->CheckHoldStart(Csarad113x::emTHGroupA,false,Csarad113x::emOtherTrigger)) &&mParent->CheckSmpTime(Csarad113x::emTHGroupA,false)) {
                mNextState = emStTHA_HOLDING;
            }
            break;
        case 4:
            if (mParent->CheckHoldComplete(Csarad113x::emTHGroupA,Csarad113x::emHWTrigger)) {
                mNextState = emStTHA_DELAY_HOLDING;
            }
            break;
        case 5:
            if (mParent->CheckHoldComplete(Csarad113x::emTHGroupA,Csarad113x::emSWTrigger)) {
                mNextState = emStTHA_DELAY_HOLDING;
            }
            break;
        case 6:
            if (mParent->CheckHoldComplete(Csarad113x::emTHGroupA,Csarad113x::emOtherTrigger)) {
                mNextState = emStTHA_DELAY_HOLDING;
            }
            break;
        case 7:
            if (mParent->CheckTHStart(Csarad113x::emTHGroupA)) {
                mNextState = emStTHA_SCANNING;
            }
            else {
                mNextState = emStTHA_WAIT_SCANNING_START;
            }
            break;
        case 8:
            if (mParent->CheckEnableStart(mParent->mCurrentSG)) {
                mNextState = emStTHA_VC_CONV;
            }
            else {
                mNextState = emStTHA_WAIT_SCANNING_START;
            }
            break;
        case 9:
            if (mParent->IsAutoStartSampling()) {
                mNextState = emStTHA_SAMPLING;
            }
            else {
                mNextState = emStTHA_IDLE;
            }
            break;
        case 10:
            if (mParent->IsLastVC(mParent->mCurrentSG) == Csarad113x::emSuspend) {
                mNextState = emStTHA_SUSPEND;
            }
            else if (mParent->IsLastVC(mParent->mCurrentSG) == Csarad113x::emLastVC) {
                mNextState = emStTHA_SCANNING_END;
            }
            else {
                mNextState = emStTHA_VC_CONV;
            }
            break;
        default:
            break;
    }
}

void Csarad113x_tha_conv_fsm::fnEntry(void)
{
    mCurrentState = mNextState;
    switch (mCurrentState) {
        case emStTHA_HOLDING:
            mParent->StartHoldProcess(Csarad113x::emTHGroupA);
            break;
        case emStTHA_DELAY_HOLDING:
            mParent->DelayEndHolding(Csarad113x::emTHGroupA);
            break;
        case emStTHA_SCANNING:
            mParent->SetCurrentSG(Csarad113x::emTHGroupA,true);
            mParent->StartScanning(mParent->mCurrentSG,true);
            break;
        case emStTHA_VC_CONV:
            mParent->StartVCConv(mParent->mCurrentSG);
            break;
        case emStTHA_VC_CONV_END:
            mParent->FinishVCConv(mParent->mCurrentSG);
            break;
        case emStTHA_SUSPEND:
            mParent->SuspendScanning(Csarad113x::emTHGroupA,true);
            break;
        default:
            break;
    }
    mNextState = emStNA;
}

void Csarad113x_tha_conv_fsm::fnExit(void)
{
    mPreState = mCurrentState;
    switch (mCurrentState) {
        case emStTHA_HOLDING:
            mParent->EndHolding(Csarad113x::emTHGroupA);
            break;
        case emStTHA_DELAY_HOLDING:
            mParent->AssertADCATCNVTH(Csarad113x::emTHGroupA);
            break;
        case emStTHA_SCANNING_END:
            mParent->FinishScanning(mParent->mCurrentSG);
            mParent->FinishTHConversion();
            break;
        case emStTHA_VC_CONV_END:
            mParent->DumpActivity(mParent->mCurrentSG,mParent->mCurrentStartVC[mParent->mCurrentSG],mParent->mStartTimeVC);
            mParent->SetStartSmpTime(mParent->GetGCTRL(mParent->mCurrentSG, mParent->mCurrentStartVC[mParent->mCurrentSG]));
            mParent->UpdateInternalCount(mParent->mCurrentSG);
            break;
        default:
            break;
    }
    mCurrentState = emStNA;
}

void Csarad113x_tha_conv_fsm::fnDo(void)
{
}

void Csarad113x_tha_conv_fsm::DumpStateTransInfo(void)
{
    if (mDumpStateTransInfo) {
        mParent->_re_printf("info", "State changes from %s to %s\n", mStateNameStr[mCurrentState].c_str(), mStateNameStr[mNextState].c_str());
    }
}

void Csarad113x_tha_conv_fsm::EnableDumpStateTrans(bool enable)
{
    mDumpStateTransInfo = enable;
}

