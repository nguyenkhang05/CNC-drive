// -----------------------------------------------------------------------------
// $Id: $
//
// Copyright(c) 2012-2018 Renesas Electronics Corporation
// Copyright(c) 2012-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : /shsv/sld/ipp/project/2018/rel/ipd2_sld_12006_rlin3/02_Output/DATA/src/rlin3_regif.txt
////////////////////////////////////////////////////////////////////////////////
// # ---------------------------------------------------------------------
// # $Id: $
// #
// # Copyright(c) 2012-2018 Renesas Electronics Corporation
// # Copyright(c) 2012-2018 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # ---------------------------------------------------------------------
// 
//  %MODULE RLIN3 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  6
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name       reg_name       size       length  offset    access  init     support  callback
//     %%REG      LWBR       LWBR           8|16|32    8       0x01      -       0        TRUE     -
//     %%REG      LBRP0      LBRP0          8|16|32    8       0x02      -       0        TRUE     -  
//     %%REG      LBRP1      LBRP1          8|16|32    8       0x03      -       0        TRUE     -
//     %%REG      LSTC       LSTC           8|16|32    8       0x04      -       0        TRUE     -
//     %%REG      LMD        LMD            8|16|32    8       0x08      -       0        TRUE     -
//     %%REG      LBFC       LBFC           8|16|32    8       0x09      -       0        TRUE     -
//     %%REG      LSC        LSC            8|16|32    8       0x0A      -       0        TRUE     -
//     %%REG      LWUP       LWUP           8|16|32    8       0x0B      -       0        TRUE     -
//     %%REG      LIE        LIE            8|16|32    8       0x0C      -       0        TRUE     -
//     %%REG      LEDE       LEDE           8|16|32    8       0x0D      -       0        TRUE     -
//     %%REG      LCUC       LCUC           8|16|32    8       0x0E      -       0        TRUE     -
//     %%REG      LTRC       LTRC           8|16|32    8       0x10      -       0        TRUE     -
//     %%REG      LMST       LMST           8|16|32    8       0x11      -       0        TRUE     -
//     %%REG      LST        LST            8|16|32    8       0x12      -       0        TRUE     -
//     %%REG      LEST       LEST           8|16|32    8       0x13      -       0        TRUE     -
//     %%REG      LDFC       LDFC           8|16|32    8       0x14      -       0        TRUE     -
//     %%REG      LIDB       LIDB           8|16|32    8       0x15      -       0        TRUE     -
//     %%REG      LCBR       LCBR           8|16|32    8       0x16      -       0        TRUE     -
//     %%REG      LUDB0      LUDB0          8|16|32    8       0x17      -       0        TRUE     -
//     %%REG      LDB1       LDB1           8|16|32    8       0x18      -       0        TRUE     -
//     %%REG      LDB2       LDB2           8|16|32    8       0x19      -       0        TRUE     -
//     %%REG      LDB3       LDB3           8|16|32    8       0x1A      -       0        TRUE     -
//     %%REG      LDB4       LDB4           8|16|32    8       0x1B      -       0        TRUE     -
//     %%REG      LDB5       LDB5           8|16|32    8       0x1C      -       0        TRUE     -
//     %%REG      LDB6       LDB6           8|16|32    8       0x1D      -       0        TRUE     -
//     %%REG      LDB7       LDB7           8|16|32    8       0x1E      -       0        TRUE     -
//     %%REG      LDB8       LDB8           8|16|32    8       0x1F      -       0        TRUE     -
//     %%REG      LUOER      LUOER          8|16|32    8       0x20      -       0        TRUE     -
//     %%REG      LUOR1      LUOR1          8|16|32    8       0x21      -       0        TRUE     -
//     %%REG      LUOR2      LUOR2          8|16|32    8       0x22      -       0        FALSE    -
//     %%REG      LUTDCR     LUTDCR         8|16|32    8       0x23      -       0        FALSE    -
//     %%REG      LUTDR      LUTDR          8|16       16      0x24      -       0        TRUE     -
//     %%REG      LURDR      LURDR          8|16       16      0x26      -       0        TRUE     -
//     %%REG      LUWTDR     LUWTDR         8|16       16      0x28      -       0        TRUE     -
//     %%REG      LURDE      LURDE          8|16       16      0x2A      -       0        TRUE     -
//     %%REG      LBSS       LBSS           8|16|32    8       0x30      -       0        TRUE     -
//     %%REG      LRSS       LRSS           8|16|32    8       0x34      -       0        TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file rlin3_regif.cpp
/// @brief Register IF class of model RLIN3
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "rlin3_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Crlin3_regif::Crlin3_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0x36)
    #endif
{
    CommandInit();
    LWBR   = new vpcl::re_register(0x0001, this, "LWBR"  , name.c_str());
    LBRP0  = new vpcl::re_register(0x0002, this, "LBRP0" , name.c_str());
    LBRP1  = new vpcl::re_register(0x0003, this, "LBRP1" , name.c_str());
    LSTC   = new vpcl::re_register(0x0004, this, "LSTC"  , name.c_str());
    LMD    = new vpcl::re_register(0x0008, this, "LMD"   , name.c_str());
    LBFC   = new vpcl::re_register(0x0009, this, "LBFC"  , name.c_str());
    LSC    = new vpcl::re_register(0x000A, this, "LSC"   , name.c_str());
    LWUP   = new vpcl::re_register(0x000B, this, "LWUP"  , name.c_str());
    LIE    = new vpcl::re_register(0x000C, this, "LIE"   , name.c_str());
    LEDE   = new vpcl::re_register(0x000D, this, "LEDE"  , name.c_str());
    LCUC   = new vpcl::re_register(0x000E, this, "LCUC"  , name.c_str());
    LTRC   = new vpcl::re_register(0x0010, this, "LTRC"  , name.c_str());
    LMST   = new vpcl::re_register(0x0011, this, "LMST"  , name.c_str());
    LST    = new vpcl::re_register(0x0012, this, "LST"   , name.c_str());
    LEST   = new vpcl::re_register(0x0013, this, "LEST"  , name.c_str());
    LDFC   = new vpcl::re_register(0x0014, this, "LDFC"  , name.c_str());
    LIDB   = new vpcl::re_register(0x0015, this, "LIDB"  , name.c_str());
    LCBR   = new vpcl::re_register(0x0016, this, "LCBR"  , name.c_str());
    LUDB0  = new vpcl::re_register(0x0017, this, "LUDB0" , name.c_str());
    LDB1   = new vpcl::re_register(0x0018, this, "LDB1"  , name.c_str());
    LDB2   = new vpcl::re_register(0x0019, this, "LDB2"  , name.c_str());
    LDB3   = new vpcl::re_register(0x001A, this, "LDB3"  , name.c_str());
    LDB4   = new vpcl::re_register(0x001B, this, "LDB4"  , name.c_str());
    LDB5   = new vpcl::re_register(0x001C, this, "LDB5"  , name.c_str());
    LDB6   = new vpcl::re_register(0x001D, this, "LDB6"  , name.c_str());
    LDB7   = new vpcl::re_register(0x001E, this, "LDB7"  , name.c_str());
    LDB8   = new vpcl::re_register(0x001F, this, "LDB8"  , name.c_str());
    LUOER  = new vpcl::re_register(0x0020, this, "LUOER" , name.c_str());
    LUOR1  = new vpcl::re_register(0x0021, this, "LUOR1" , name.c_str());
    LUOR2  = new vpcl::re_register(0x0022, this, "LUOR2" , name.c_str());
    LUTDCR = new vpcl::re_register(0x0023, this, "LUTDCR", name.c_str());
    LUTDR  = new vpcl::re_register(0x0024, this, "LUTDR" , name.c_str());
    LURDR  = new vpcl::re_register(0x0026, this, "LURDR" , name.c_str());
    LUWTDR = new vpcl::re_register(0x0028, this, "LUWTDR", name.c_str());
    LURDE  = new vpcl::re_register(0x002A, this, "LURDE" , name.c_str());
    LBSS   = new vpcl::re_register(0x0030, this, "LBSS"  , name.c_str());
    LRSS   = new vpcl::re_register(0x0034, this, "LRSS"  , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<6];
    for (uint i = 0; i < (1<<6); i++) {
        mRegMap[i] = (1<<6);
    }

    mRegMap[0x0001]     = index++;
    mRegMap[0x0002]     = index++;
    mRegMap[0x0003]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index++;
    mRegMap[0x0009]     = index++;
    mRegMap[0x000A]     = index++;
    mRegMap[0x000B]     = index++;
    mRegMap[0x000C]     = index++;
    mRegMap[0x000D]     = index++;
    mRegMap[0x000E]     = index++;
    mRegMap[0x0010]     = index++;
    mRegMap[0x0011]     = index++;
    mRegMap[0x0012]     = index++;
    mRegMap[0x0013]     = index++;
    mRegMap[0x0014]     = index++;
    mRegMap[0x0015]     = index++;
    mRegMap[0x0016]     = index++;
    mRegMap[0x0017]     = index++;
    mRegMap[0x0018]     = index++;
    mRegMap[0x0019]     = index++;
    mRegMap[0x001A]     = index++;
    mRegMap[0x001B]     = index++;
    mRegMap[0x001C]     = index++;
    mRegMap[0x001D]     = index++;
    mRegMap[0x001E]     = index++;
    mRegMap[0x001F]     = index++;
    mRegMap[0x0020]     = index++;
    mRegMap[0x0021]     = index++;
    mRegMap[0x0022]     = index++;
    mRegMap[0x0023]     = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index++;
    mRegMap[0x0026]     = index;
    mRegMap[0x0026 + 1] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index++;
    mRegMap[0x002A]     = index;
    mRegMap[0x002A + 1] = index++;
    mRegMap[0x0030]     = index++;
    mRegMap[0x0034]     = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(LWBR    , mCurReg, 0,  1, "8|16|32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(LWBR    , mCurReg, 0,  1, "8|16|32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(LBRP0   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBRP1   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LSTC    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LMD     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LBFC    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LSC     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LWUP    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LIE     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LEDE    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LCUC    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LTRC    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LMST    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LST     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LEST    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDFC    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LIDB    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LCBR    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUDB0   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB1    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB2    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB3    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB4    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB5    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB6    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB7    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LDB8    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUOER   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUOR1   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUOR2   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUTDCR  , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LUTDR   , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LURDR   , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LUWTDR  , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LURDE   , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LBSS    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(LRSS    , mCurReg, 0,  1, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*LWBR    ) ( 7,  0, "LWBR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LBRP0   ) ( 7,  0, "LBRP0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LBRP1   ) ( 7,  0, "LBRP1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LSTC    ) ( 7,  0, "LSTC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LMD     ) ( 7,  0, "LMD"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LBFC    ) ( 7,  0, "LBFC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LSC     ) ( 7,  0, "LSC"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LWUP    ) ( 7,  0, "LWUP"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LIE     ) ( 7,  0, "LIE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LEDE    ) ( 7,  0, "LEDE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LCUC    ) ( 7,  0, "LCUC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LTRC    ) ( 7,  0, "LTRC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LMST    ) ( 7,  0, "LMST"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LST     ) ( 7,  0, "LST"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LEST    ) ( 7,  0, "LEST"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDFC    ) ( 7,  0, "LDFC"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LIDB    ) ( 7,  0, "LIDB"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LCBR    ) ( 7,  0, "LCBR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LUDB0   ) ( 7,  0, "LUDB0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB1    ) ( 7,  0, "LDB1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB2    ) ( 7,  0, "LDB2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB3    ) ( 7,  0, "LDB3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB4    ) ( 7,  0, "LDB4"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB5    ) ( 7,  0, "LDB5"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB6    ) ( 7,  0, "LDB6"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB7    ) ( 7,  0, "LDB7"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LDB8    ) ( 7,  0, "LDB8"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LUOER   ) ( 7,  0, "LUOER"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LUOR1   ) ( 7,  0, "LUOR1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LUOR2   ) ( 7,  0, "LUOR2"   , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*LUTDCR  ) ( 7,  0, "LUTDCR"  , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*LUTDR   ) (15,  0, "LUTDR"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LURDR   ) (15,  0, "LURDR"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LUWTDR  ) (15,  0, "LUWTDR"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LURDE   ) (15,  0, "LURDE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LBSS    ) ( 7,  0, "LBSS"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*LRSS    ) ( 7,  0, "LRSS"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register

    InitLocalVal();
    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Crlin3_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Crlin3_regif::~Crlin3_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Crlin3_regif::uint Crlin3_regif::bit_select(cuint val,    ///< [in] Writting address
                                            cuint start,  ///< [in] start bit position
                                            cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crlin3_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                          const unsigned char *p_data,   ///< [in] Writing data
                          cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crlin3_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                          unsigned char *p_data,   ///< [out] Reading data
                          cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crlin3_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                              const unsigned char *p_data,   ///< [in] Writing data
                              cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crlin3_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                              unsigned char *p_data,   ///< [out] Reading data
                              cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crlin3_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                  const unsigned char *p_data,  ///< [in] Writing data
                                  cuint size,                   ///< [in] Data size (byte)
                                  bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 6-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crlin3_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                  unsigned char *p_data,   ///< [out] Reading data
                                  cuint size,              ///< [in]  Data size (byte)
                                  bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 6-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Crlin3_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                               unsigned char *p_data,          ///< [out] Reading data
                               cuint size,                     ///< [in]  Data size (byte)
                               cuint reg_index,                ///< [in]  Register index
                               bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    if (!IsDbgFunc) {
        if (mIsReset) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            
            pst_data = Register->read();

        }
    }
    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Crlin3_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                               const unsigned char *p_data,      ///< [in] Writing data
                               cuint size,                       ///< [in] Data size (byte)
                               cuint reg_index,                  ///< [in] Register index
                               bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Crlin3_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Crlin3_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Crlin3_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Crlin3_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Crlin3_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Crlin3_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Crlin3_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif

/// Initialize local variables
/// @return none
void Crlin3_regif::InitLocalVal()
{
    // Initialize local variables
    LWBR_LWBR = 0x0;
    LBRP0_LBRP0 = 0x0;
    LBRP1_LBRP1 = 0x0;
    LSTC_LSTC = 0x0;
    LMD_LMD = 0x0;
    LBFC_LBFC = 0x0;
    LSC_LSC = 0x0;
    LWUP_LWUP = 0x0;
    LIE_LIE = 0x0;
    LEDE_LEDE = 0x0;
    LCUC_LCUC = 0x0;
    LTRC_LTRC = 0x0;
    LMST_LMST = 0x0;
    LST_LST = 0x0;
    LEST_LEST = 0x0;
    LDFC_LDFC = 0x0;
    LIDB_LIDB = 0x0;
    LCBR_LCBR = 0x0;
    LUDB0_LUDB0 = 0x0;
    LDB1_LDB1 = 0x0;
    LDB2_LDB2 = 0x0;
    LDB3_LDB3 = 0x0;
    LDB4_LDB4 = 0x0;
    LDB5_LDB5 = 0x0;
    LDB6_LDB6 = 0x0;
    LDB7_LDB7 = 0x0;
    LDB8_LDB8 = 0x0;
    LUOER_LUOER = 0x0;
    LUOR1_LUOR1 = 0x0;
    LUOR2_LUOR2 = 0x0;
    LUTDCR_LUTDCR = 0x0;
    LUTDR_LUTDR = 0x0;
    LURDR_LURDR = 0x0;
    LUWTDR_LUWTDR = 0x0;
    LURDE_LURDE = 0x0;
    LBSS_LBSS = 0x0;
    LRSS_LRSS = 0x0;
}

/// Update bit value to local value
/// @return None
void Crlin3_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0001) {
        LWBR_LWBR                  = (*LWBR  )["LWBR"  ];
        return;
    }
    if (addr == 0x0002) {
        LBRP0_LBRP0                = (*LBRP0 )["LBRP0" ];
        return;
    }
    if (addr == 0x0003) {
        LBRP1_LBRP1                = (*LBRP1 )["LBRP1" ];
        return;
    }
    if (addr == 0x0004) {
        LSTC_LSTC                  = (*LSTC  )["LSTC"  ];
        return;
    }
    if (addr == 0x0008) {
        LMD_LMD                    = (*LMD   )["LMD"   ];
        return;
    }
    if (addr == 0x0009) {
        LBFC_LBFC                  = (*LBFC  )["LBFC"  ];
        return;
    }
    if (addr == 0x000A) {
        LSC_LSC                    = (*LSC   )["LSC"   ];
        return;
    }
    if (addr == 0x000B) {
        LWUP_LWUP                  = (*LWUP  )["LWUP"  ];
        return;
    }
    if (addr == 0x000C) {
        LIE_LIE                    = (*LIE   )["LIE"   ];
        return;
    }
    if (addr == 0x000D) {
        LEDE_LEDE                  = (*LEDE  )["LEDE"  ];
        return;
    }
    if (addr == 0x000E) {
        LCUC_LCUC                  = (*LCUC  )["LCUC"  ];
        return;
    }
    if (addr == 0x0010) {
        LTRC_LTRC                  = (*LTRC  )["LTRC"  ];
        return;
    }
    if (addr == 0x0011) {
        LMST_LMST                  = (*LMST  )["LMST"  ];
        return;
    }
    if (addr == 0x0012) {
        LST_LST                    = (*LST   )["LST"   ];
        return;
    }
    if (addr == 0x0013) {
        LEST_LEST                  = (*LEST  )["LEST"  ];
        return;
    }
    if (addr == 0x0014) {
        LDFC_LDFC                  = (*LDFC  )["LDFC"  ];
        return;
    }
    if (addr == 0x0015) {
        LIDB_LIDB                  = (*LIDB  )["LIDB"  ];
        return;
    }
    if (addr == 0x0016) {
        LCBR_LCBR                  = (*LCBR  )["LCBR"  ];
        return;
    }
    if (addr == 0x0017) {
        LUDB0_LUDB0                = (*LUDB0 )["LUDB0" ];
        return;
    }
    if (addr == 0x0018) {
        LDB1_LDB1                  = (*LDB1  )["LDB1"  ];
        return;
    }
    if (addr == 0x0019) {
        LDB2_LDB2                  = (*LDB2  )["LDB2"  ];
        return;
    }
    if (addr == 0x001A) {
        LDB3_LDB3                  = (*LDB3  )["LDB3"  ];
        return;
    }
    if (addr == 0x001B) {
        LDB4_LDB4                  = (*LDB4  )["LDB4"  ];
        return;
    }
    if (addr == 0x001C) {
        LDB5_LDB5                  = (*LDB5  )["LDB5"  ];
        return;
    }
    if (addr == 0x001D) {
        LDB6_LDB6                  = (*LDB6  )["LDB6"  ];
        return;
    }
    if (addr == 0x001E) {
        LDB7_LDB7                  = (*LDB7  )["LDB7"  ];
        return;
    }
    if (addr == 0x001F) {
        LDB8_LDB8                  = (*LDB8  )["LDB8"  ];
        return;
    }
    if (addr == 0x0020) {
        LUOER_LUOER                = (*LUOER )["LUOER" ];
        return;
    }
    if (addr == 0x0021) {
        LUOR1_LUOR1                = (*LUOR1 )["LUOR1" ];
        return;
    }
    if (addr == 0x0022) {
        LUOR2_LUOR2                = (*LUOR2 )["LUOR2" ];
        return;
    }
    if (addr == 0x0023) {
        LUTDCR_LUTDCR              = (*LUTDCR)["LUTDCR"];
        return;
    }
    if (addr == 0x0024) {
        LUTDR_LUTDR                = (*LUTDR )["LUTDR" ];
        return;
    }
    if (addr == 0x0026) {
        LURDR_LURDR                = (*LURDR )["LURDR" ];
        return;
    }
    if (addr == 0x0028) {
        LUWTDR_LUWTDR              = (*LUWTDR)["LUWTDR"];
        return;
    }
    if (addr == 0x002A) {
        LURDE_LURDE                = (*LURDE )["LURDE" ];
        return;
    }
    if (addr == 0x0030) {
        LBSS_LBSS                  = (*LBSS  )["LBSS"  ];
        return;
    }
    if (addr == 0x0034) {
        LRSS_LRSS                  = (*LRSS  )["LRSS"  ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Crlin3_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0001) {
        (*LWBR  )["LWBR"  ] = LWBR_LWBR;
        return;
    }
    if (addr == 0x0002) {
        (*LBRP0 )["LBRP0" ] = LBRP0_LBRP0;
        return;
    }
    if (addr == 0x0003) {
        (*LBRP1 )["LBRP1" ] = LBRP1_LBRP1;
        return;
    }
    if (addr == 0x0004) {
        (*LSTC  )["LSTC"  ] = LSTC_LSTC;
        return;
    }
    if (addr == 0x0008) {
        (*LMD   )["LMD"   ] = LMD_LMD;
        return;
    }
    if (addr == 0x0009) {
        (*LBFC  )["LBFC"  ] = LBFC_LBFC;
        return;
    }
    if (addr == 0x000A) {
        (*LSC   )["LSC"   ] = LSC_LSC;
        return;
    }
    if (addr == 0x000B) {
        (*LWUP  )["LWUP"  ] = LWUP_LWUP;
        return;
    }
    if (addr == 0x000C) {
        (*LIE   )["LIE"   ] = LIE_LIE;
        return;
    }
    if (addr == 0x000D) {
        (*LEDE  )["LEDE"  ] = LEDE_LEDE;
        return;
    }
    if (addr == 0x000E) {
        (*LCUC  )["LCUC"  ] = LCUC_LCUC;
        return;
    }
    if (addr == 0x0010) {
        (*LTRC  )["LTRC"  ] = LTRC_LTRC;
        return;
    }
    if (addr == 0x0011) {
        (*LMST  )["LMST"  ] = LMST_LMST;
        return;
    }
    if (addr == 0x0012) {
        (*LST   )["LST"   ] = LST_LST;
        return;
    }
    if (addr == 0x0013) {
        (*LEST  )["LEST"  ] = LEST_LEST;
        return;
    }
    if (addr == 0x0014) {
        (*LDFC  )["LDFC"  ] = LDFC_LDFC;
        return;
    }
    if (addr == 0x0015) {
        (*LIDB  )["LIDB"  ] = LIDB_LIDB;
        return;
    }
    if (addr == 0x0016) {
        (*LCBR  )["LCBR"  ] = LCBR_LCBR;
        return;
    }
    if (addr == 0x0017) {
        (*LUDB0 )["LUDB0" ] = LUDB0_LUDB0;
        return;
    }
    if (addr == 0x0018) {
        (*LDB1  )["LDB1"  ] = LDB1_LDB1;
        return;
    }
    if (addr == 0x0019) {
        (*LDB2  )["LDB2"  ] = LDB2_LDB2;
        return;
    }
    if (addr == 0x001A) {
        (*LDB3  )["LDB3"  ] = LDB3_LDB3;
        return;
    }
    if (addr == 0x001B) {
        (*LDB4  )["LDB4"  ] = LDB4_LDB4;
        return;
    }
    if (addr == 0x001C) {
        (*LDB5  )["LDB5"  ] = LDB5_LDB5;
        return;
    }
    if (addr == 0x001D) {
        (*LDB6  )["LDB6"  ] = LDB6_LDB6;
        return;
    }
    if (addr == 0x001E) {
        (*LDB7  )["LDB7"  ] = LDB7_LDB7;
        return;
    }
    if (addr == 0x001F) {
        (*LDB8  )["LDB8"  ] = LDB8_LDB8;
        return;
    }
    if (addr == 0x0020) {
        (*LUOER )["LUOER" ] = LUOER_LUOER;
        return;
    }
    if (addr == 0x0021) {
        (*LUOR1 )["LUOR1" ] = LUOR1_LUOR1;
        return;
    }
    if (addr == 0x0022) {
        (*LUOR2 )["LUOR2" ] = LUOR2_LUOR2;
        return;
    }
    if (addr == 0x0023) {
        (*LUTDCR)["LUTDCR"] = LUTDCR_LUTDCR;
        return;
    }
    if (addr == 0x0024) {
        (*LUTDR )["LUTDR" ] = LUTDR_LUTDR;
        return;
    }
    if (addr == 0x0026) {
        (*LURDR )["LURDR" ] = LURDR_LURDR;
        return;
    }
    if (addr == 0x0028) {
        (*LUWTDR)["LUWTDR"] = LUWTDR_LUWTDR;
        return;
    }
    if (addr == 0x002A) {
        (*LURDE )["LURDE" ] = LURDE_LURDE;
        return;
    }
    if (addr == 0x0030) {
        (*LBSS  )["LBSS"  ] = LBSS_LBSS;
        return;
    }
    if (addr == 0x0034) {
        (*LRSS  )["LRSS"  ] = LRSS_LRSS;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Crlin3_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Crlin3_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Crlin3_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,6, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Crlin3_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<6)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Crlin3_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Crlin3_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Crlin3_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Crlin3_regif::uint Crlin3_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Crlin3_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    } else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Crlin3_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Crlin3_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Crlin3_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if (is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USE_CWR_SYSTEMC
unsigned short Crlin3_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

unsigned short Crlin3_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Crlin3_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
