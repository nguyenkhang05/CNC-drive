// -----------------------------------------------------------------------------
// $Id: psi5_regif.h,v 1.2 2020/04/03 11:08:05 ducla Exp $
//
// Copyright(c) 2018 - 2020 Renesas Electronics Corporation
// Copyright(c) 2018 - 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : psi5_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE PSI5
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name          reg_name     wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access  init        support  callback
//     %%REG    -      CHCTRL        CHCTRL       32       8|16|32  32      0x000   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      CHSTATUS      CHSTATUS     8|16|32  8|16|32  32      0x004   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      IPTIMERCTRL   IPTIMERCTRL  32       8|16|32  32      0x010   -             -           -             -            W|R     0x10000     TRUE     W  
//     %%REG    -      IPTIMER       IPTIMER      32       8|16|32  32      0x014   -             -           -             -            W|R     0x0         TRUE     W 
//     %%REG    -      OPMCOMM       OPMCOMM      32       8|16|32  32      0x020   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      OPMBITRATE    OPMBITRATE   32       8|16|32  32      0x024   -             -           -             -            W|R     0x29F       TRUE     W  
//     %%REG    -      OPMCYCT       OPMCYCT      32       8|16|32  32      0x028   -             -           -             -            W|R     0x9C3F      TRUE     W  
//     %%REG    -      PSI5INT       PSI5INT      8|16|32  8|16|32  32      0x030   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      EMRXDATA      EMRXDATA     8|16|32  8|16|32  32      0x040   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDST       EMRXDST      8|16|32  8|16|32  32      0x044   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDTIM      EMRXDTIM     8|16|32  8|16|32  32      0x048   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDFIFO     EMRXDFIFO    8|16|32  8|16|32  32      0x04C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXMSG    EMRXMRXMSG   8|16|32  8|16|32  32      0x050   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXST     EMRXMRXST    8|16|32  8|16|32  32      0x054   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXTIM    EMRXMRXTIM   8|16|32  8|16|32  32      0x058   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMFIFO     EMRXMFIFO    8|16|32  8|16|32  32      0x05C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      TXSETTING     TXSETTING    32       8|16|32  32      0x080   -             -           -             -            W|R     0x106747F7  TRUE     W  
//     %%REG    -      SYNCCTRL      SYNCCTRL     32       8|16|32  32      0x084   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXST          TXST         8|16|32  8|16|32  32      0x088   -             -           -             -              R     0x1         TRUE     -  
//     %%REG    -      TXSTCLR       TXSTCLR      32       8|16|32  32      0x08C   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXSTINTEN     TXSTINTEN    32       8|16|32  32      0x090   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXDCTRL       TXDCTRL      32       8|16|32  32      0x094   -             -           -             -            W|R     0x1         TRUE     -  
//     %%REG    -      TXDATA        TXDATA       32       8|16|32  32      0x098   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXSPLSET      RXSPLSET     32       8|16|32  32      0x100   -             -           -             -            W|R     0x27        TRUE     W  
//     %%REG    -      RXWINSET      RXWINSET     32       8|16|32  32      0x104   -             -           -             -            W|R     0xB03130C   TRUE     W  
//     %%REG    -      RXSSET        RXSSET       32       8|16|32  32      0x108   1             8           -             0x4          W|R     0xA00000    TRUE     W  
//     %%REG    -      RXDATA        RXDATA       8|16|32  8|16|32  32      0x128   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDST         RXDST        8|16|32  8|16|32  32      0x12C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDTIM        RXDTIM       8|16|32  8|16|32  32      0x130   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDFIFO       RXDFIFO      8|16|32  8|16|32  32      0x134   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMODST       RXMODST      8|16|32  8|16|32  32      0x138   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RXMODSTCLR    RXMODSTCLR   32       8|16|32  32      0x13C   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMODSTINTEN  RXMODSTINTEN 32       8|16|32  32      0x140   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMSET        RXMSET       32       8|16|32  32      0x180   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMRXMSG      RXMRXMSG     8|16|32  8|16|32  32      0x184   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMRXST       RXMRXST      8|16|32  8|16|32  32      0x188   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMRXTIM      RXMRXTIM     8|16|32  8|16|32  32      0x18C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMFIFO       RXMFIFO      8|16|32  8|16|32  32      0x190   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMMST        RXMMST       8|16|32  8|16|32  32      0x194   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RXMMSTCLR     RXMMSTCLR    32       8|16|32  32      0x198   -             -           -             -             W|R    0x0         TRUE     W  
//     %%REG    -      RXMMSTINTEN   RXMMSTINTEN  32       8|16|32  32      0x19C   -             -           -             -             W|R    0x0         TRUE     W  
// 
// %REG_NAME CHCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    CHEN             0      0      0         W|R     TRUE     W
//     %%BIT    RSV              16     16     0         W|R     TRUE     -
// 
// %REG_NAME CHSTATUS
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    CHANNELNUM       15     0      0         R       TRUE     -
// 
// %REG_NAME IPTIMERCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    IPTIMEN          0      0      0         W|R     TRUE     -
//     %%BIT    TSCLR            8      8      0         W|R     TRUE     W
//     %%BIT    MSTSLV           16     16     1         W|R     TRUE     -
// 
// %REG_NAME IPTIMER
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    COUNTVAL         31     0      0         W|R     TRUE     W
// 
// %REG_NAME OPMCOMM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    COMMODE          2      0      0         W|R     TRUE     W
// 
// %REG_NAME OPMBITRATE
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    BITRATECNT       15      0     0x29F     W|R     TRUE     W
// 
// %REG_NAME OPMCYCT
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TTTTCNT          19      0     0x9C3F    W|R     TRUE     W
// 
// %REG_NAME PSI5INT
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    INT_RXMEXIST     0      0      0         R       TRUE     -
//     %%BIT    INT_RXMFOVF      1      1      0         R       TRUE     -
//     %%BIT    INT_RXMERR       2      2      0         R       TRUE     -
//     %%BIT    INT_RXDEXIST     3      3      0         R       TRUE     -
//     %%BIT    INT_RXDFOVF      4      4      0         R       TRUE     -
//     %%BIT    INT_RXDERR       5      5      0         R       TRUE     -
//     %%BIT    INT_RXDSCNFERR   6      6      0         R       TRUE     -
//     %%BIT    INT_TXDEMPTY     16     16     0         R       TRUE     -
//     %%BIT    INT_SYNCST       17     17     0         R       TRUE     -
//     %%BIT    INT_SYNCED       18     18     0         R       TRUE     -
// 
// %REG_NAME EMRXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDATA           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXDST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     -
//     %%BIT    RXSLOTNUM        7      4      0         R       TRUE     -
//     %%BIT    RXCHKD           10     8      0         R       TRUE     -
// 
// %REG_NAME EMRXDTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDTIM           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXDFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDST            31     0      0         R       TRUE     R
// 
// %REG_NAME EMRXMRXMSG
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DATAFIELD        15     0      0         R       TRUE     -
//     %%BIT    SERIALID         23     16     0         R       TRUE     -
//     %%BIT    CONFIGBIT        31     31     0         R       TRUE     -
// 
// %REG_NAME EMRXMRXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     -
//     %%BIT    SLOTNUM          7      4      0         R       TRUE     -
//     %%BIT    RXCRC            13     8      0         R       TRUE     -
//     %%BIT    RXSYNC           18     16     0         R       TRUE     -
// 
// %REG_NAME EMRXMRXTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMTIM           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXMFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFIFO          31     0      0         R       TRUE     R
// 
// %REG_NAME TXSETTING
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SHORTCNT         13     0      0x7F7     W|R     TRUE     W
//     %%BIT    DEFTXVAL         14     14     1         W|R     TRUE     -
//     %%BIT    PHYMODE          15     15     0         W|R     TRUE     -
//     %%BIT    LONGCNT          31     16     0x1067    W|R     TRUE     -
// 
// %REG_NAME SYNCCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    VALTIMSYNC       0      0      0x0       W|R     TRUE     W
// 
// %REG_NAME TXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDEMPTY         0      0      1         R       TRUE     -
//     %%BIT    SYNCST           8      8      0         R       TRUE     -
//     %%BIT    SYNCED           9      9      0         R       TRUE     -
// 
// %REG_NAME TXSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SYNCSTCLR        8      8      0         W|R     TRUE     W
//     %%BIT    SYNCEDCLR        9      9      0         W|R     TRUE     -
// 
// %REG_NAME TXSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDEMPTYINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    SYNCSTINTEN      8      8      0         W|R     TRUE     -
//     %%BIT    SYNCEDINTEN      9      9      0         W|R     TRUE     -
// 
// %REG_NAME TXDCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    FRMFORMAT        2      0      1         W|R     TRUE     -
// 
// %REG_NAME TXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDATA           31     0      0         W|R     TRUE     W
// 
// %REG_NAME RXSPLSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SMPLPROD         7      0      0x27      W|R     TRUE     W
// 
// %REG_NAME RXWINSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DWINSTPOS        7      0      0xC       W|R     TRUE     W
//     %%BIT    DWINEDPOS        15     8      0x13      W|R     TRUE     -
//     %%BIT    NDWINSTPOS       23     16     0x3       W|R     TRUE     -
//     %%BIT    NDWINEDPOS       31     24     0xB       W|R     TRUE     -
// 
// %REG_NAME RXSSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    OFFSETCNT        19     0      0         W|R     TRUE     W
//     %%BIT    LENGTH           24     20     0xA       W|R     TRUE     -
//     %%BIT    ERRDET           25     25     0         W|R     TRUE     -
//     %%BIT    PASCMP           26     26     0         W|R     TRUE     -
//     %%BIT    SLTEN            31     31     0         W|R     TRUE     -
// 
// %REG_NAME RXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDATA           31     0      0         R       TRUE     R
// 
// %REG_NAME RXDST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     R
//     %%BIT    RXSLOTNUM        7      4      0         R       TRUE     -
//     %%BIT    RXCHKD           10     8      0         R       TRUE     -
// 
// %REG_NAME RXDTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDTIM           31     0      0         R       TRUE     R
// 
// %REG_NAME RXDFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDST            31     0      0         R       TRUE     R
// 
// %REG_NAME RXMODST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDEXIST         0      0      0         R       TRUE     -
//     %%BIT    RXDFOVF          8      8      0         R       TRUE     -
//     %%BIT    RXDERR           16     16     0         R       TRUE     -
//     %%BIT    RXDSCNFERR       24     24     0         R       TRUE     -
// 
// %REG_NAME RXMODSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDFOVFCLR       8      8      0         W|R     TRUE     W
//     %%BIT    RXDERRCLR        16     16     0         W|R     TRUE     -
//     %%BIT    RXDSCNFERRCLR    24     24     0         W|R     TRUE     -
// 
// %REG_NAME RXMODSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDEXISTINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    RXDFOVFINTEN     8      8      0         W|R     TRUE     -
//     %%BIT    RXDERRINTEN      16     16     0         W|R     TRUE     -
//     %%BIT    RXDSCNFERRINTEN  24     24     0         W|R     TRUE     -
// 
// %REG_NAME RXMSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXM1EN           0      0      0         W|R     TRUE     W
//     %%BIT    RXM2EN           1      1      0         W|R     TRUE     -
//     %%BIT    RXM3EN           2      2      0         W|R     TRUE     -
//     %%BIT    RXM4EN           3      3      0         W|R     TRUE     -
//     %%BIT    RXM5EN           4      4      0         W|R     TRUE     -
//     %%BIT    RXM6EN           5      5      0         W|R     TRUE     -
//     %%BIT    RXM7EN           6      6      0         W|R     TRUE     -
//     %%BIT    RXM8EN           7      7      0         W|R     TRUE     -
// 
// %REG_NAME RXMRXMSG
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DATAFIELD        15     0      0         R       TRUE     R
//     %%BIT    SERIALID         23     16     0         R       TRUE     -
//     %%BIT    CONFIGBIT        31     31     0         R       TRUE     -
// 
// %REG_NAME RXMRXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     R
//     %%BIT    SLOTNUM          7      4      0         R       TRUE     -
//     %%BIT    RXCRC            13     8      0         R       TRUE     -
//     %%BIT    RXSYNC           18     16     0         R       TRUE     -
// 
// %REG_NAME RXMRXTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMTIM           31     0      0         R       TRUE     R
// 
// %REG_NAME RXMFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFIFO          31     0      0         R       TRUE     R
// 
// %REG_NAME RXMMST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMEXIST         0      0      0         R       TRUE     -
//     %%BIT    RXMFOVF          8      8      0         R       TRUE     -
//     %%BIT    RXMERR           16     16     0         R       TRUE     -
// 
// %REG_NAME RXMMSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFOVFCLR       8      8      0         W|R      TRUE     W
//     %%BIT    RXMSERRCLR       16     16     0         W|R      TRUE     -
// 
// %REG_NAME RXMMSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMEXISTINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    RXMFOVFINTEN     8      8      0         W|R     TRUE     -
//     %%BIT    RXMERRINTEN      16     16     0         W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file psi5_regif.h
/// @brief Register IF class of model PSI5
/// $Id: psi5_regif.h,v 1.2 2020/04/03 11:08:05 ducla Exp $
/// $Date: 2020/04/03 11:08:05 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#ifndef __PSI5_REGIF_H__
#define __PSI5_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of PSI5 model
class Cpsi5_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_RXSSET       = 8
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cpsi5_regif(std::string name, uint buswidth);
    ~Cpsi5_regif();

protected:
    vpcl::re_register *CHCTRL      ;
    vpcl::re_register *CHSTATUS    ;
    vpcl::re_register *IPTIMERCTRL ;
    vpcl::re_register *IPTIMER     ;
    vpcl::re_register *OPMCOMM     ;
    vpcl::re_register *OPMBITRATE  ;
    vpcl::re_register *OPMCYCT     ;
    vpcl::re_register *PSI5INT     ;
    vpcl::re_register *EMRXDATA    ;
    vpcl::re_register *EMRXDST     ;
    vpcl::re_register *EMRXDTIM    ;
    vpcl::re_register *EMRXDFIFO   ;
    vpcl::re_register *EMRXMRXMSG  ;
    vpcl::re_register *EMRXMRXST   ;
    vpcl::re_register *EMRXMRXTIM  ;
    vpcl::re_register *EMRXMFIFO   ;
    vpcl::re_register *TXSETTING   ;
    vpcl::re_register *SYNCCTRL    ;
    vpcl::re_register *TXST        ;
    vpcl::re_register *TXSTCLR     ;
    vpcl::re_register *TXSTINTEN   ;
    vpcl::re_register *TXDCTRL     ;
    vpcl::re_register *TXDATA      ;
    vpcl::re_register *RXSPLSET    ;
    vpcl::re_register *RXWINSET    ;
    vpcl::re_register *RXSSET      [9];
    vpcl::re_register *RXDATA      ;
    vpcl::re_register *RXDST       ;
    vpcl::re_register *RXDTIM      ;
    vpcl::re_register *RXDFIFO     ;
    vpcl::re_register *RXMODST     ;
    vpcl::re_register *RXMODSTCLR  ;
    vpcl::re_register *RXMODSTINTEN;
    vpcl::re_register *RXMSET      ;
    vpcl::re_register *RXMRXMSG    ;
    vpcl::re_register *RXMRXST     ;
    vpcl::re_register *RXMRXTIM    ;
    vpcl::re_register *RXMFIFO     ;
    vpcl::re_register *RXMMST      ;
    vpcl::re_register *RXMMSTCLR   ;
    vpcl::re_register *RXMMSTINTEN ;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_CHCTRL      ;
    scml2::reg<uint> *CW_CHSTATUS    ;
    scml2::reg<uint> *CW_IPTIMERCTRL ;
    scml2::reg<uint> *CW_IPTIMER     ;
    scml2::reg<uint> *CW_OPMCOMM     ;
    scml2::reg<uint> *CW_OPMBITRATE  ;
    scml2::reg<uint> *CW_OPMCYCT     ;
    scml2::reg<uint> *CW_PSI5INT     ;
    scml2::reg<uint> *CW_EMRXDATA    ;
    scml2::reg<uint> *CW_EMRXDST     ;
    scml2::reg<uint> *CW_EMRXDTIM    ;
    scml2::reg<uint> *CW_EMRXDFIFO   ;
    scml2::reg<uint> *CW_EMRXMRXMSG  ;
    scml2::reg<uint> *CW_EMRXMRXST   ;
    scml2::reg<uint> *CW_EMRXMRXTIM  ;
    scml2::reg<uint> *CW_EMRXMFIFO   ;
    scml2::reg<uint> *CW_TXSETTING   ;
    scml2::reg<uint> *CW_SYNCCTRL    ;
    scml2::reg<uint> *CW_TXST        ;
    scml2::reg<uint> *CW_TXSTCLR     ;
    scml2::reg<uint> *CW_TXSTINTEN   ;
    scml2::reg<uint> *CW_TXDCTRL     ;
    scml2::reg<uint> *CW_TXDATA      ;
    scml2::reg<uint> *CW_RXSPLSET    ;
    scml2::reg<uint> *CW_RXWINSET    ;
    scml2::reg<uint> *CW_RXSSET      [9];
    scml2::reg<uint> *CW_RXDATA      ;
    scml2::reg<uint> *CW_RXDST       ;
    scml2::reg<uint> *CW_RXDTIM      ;
    scml2::reg<uint> *CW_RXDFIFO     ;
    scml2::reg<uint> *CW_RXMODST     ;
    scml2::reg<uint> *CW_RXMODSTCLR  ;
    scml2::reg<uint> *CW_RXMODSTINTEN;
    scml2::reg<uint> *CW_RXMSET      ;
    scml2::reg<uint> *CW_RXMRXMSG    ;
    scml2::reg<uint> *CW_RXMRXST     ;
    scml2::reg<uint> *CW_RXMRXTIM    ;
    scml2::reg<uint> *CW_RXMFIFO     ;
    scml2::reg<uint> *CW_RXMMST      ;
    scml2::reg<uint> *CW_RXMMSTCLR   ;
    scml2::reg<uint> *CW_RXMMSTINTEN ;
    #endif

    uint CHCTRL_CHEN ;
    uint CHCTRL_RSV  ;
    uint CHSTATUS_CHANNELNUM;
    uint IPTIMERCTRL_IPTIMEN;
    uint IPTIMERCTRL_TSCLR;
    uint IPTIMERCTRL_MSTSLV;
    uint IPTIMER_COUNTVAL;
    uint OPMCOMM_COMMODE;
    uint OPMBITRATE_BITRATECNT;
    uint OPMCYCT_TTTTCNT;
    uint PSI5INT_INT_RXMEXIST;
    uint PSI5INT_INT_RXMFOVF;
    uint PSI5INT_INT_RXMERR;
    uint PSI5INT_INT_RXDEXIST;
    uint PSI5INT_INT_RXDFOVF;
    uint PSI5INT_INT_RXDERR;
    uint PSI5INT_INT_RXDSCNFERR;
    uint PSI5INT_INT_TXDEMPTY;
    uint PSI5INT_INT_SYNCST;
    uint PSI5INT_INT_SYNCED;
    uint EMRXDATA_RXDATA;
    uint EMRXDST_RXSTATUS;
    uint EMRXDST_RXSLOTNUM;
    uint EMRXDST_RXCHKD;
    uint EMRXDTIM_RXDTIM;
    uint EMRXDFIFO_RXDST;
    uint EMRXMRXMSG_DATAFIELD;
    uint EMRXMRXMSG_SERIALID;
    uint EMRXMRXMSG_CONFIGBIT;
    uint EMRXMRXST_RXSTATUS;
    uint EMRXMRXST_SLOTNUM;
    uint EMRXMRXST_RXCRC;
    uint EMRXMRXST_RXSYNC;
    uint EMRXMRXTIM_RXMTIM;
    uint EMRXMFIFO_RXMFIFO;
    uint TXSETTING_SHORTCNT;
    uint TXSETTING_DEFTXVAL;
    uint TXSETTING_PHYMODE;
    uint TXSETTING_LONGCNT;
    uint SYNCCTRL_VALTIMSYNC;
    uint TXST_TXDEMPTY;
    uint TXST_SYNCST ;
    uint TXST_SYNCED ;
    uint TXSTCLR_SYNCSTCLR;
    uint TXSTCLR_SYNCEDCLR;
    uint TXSTINTEN_TXDEMPTYINTEN;
    uint TXSTINTEN_SYNCSTINTEN;
    uint TXSTINTEN_SYNCEDINTEN;
    uint TXDCTRL_FRMFORMAT;
    uint TXDATA_TXDATA;
    uint RXSPLSET_SMPLPROD;
    uint RXWINSET_DWINSTPOS;
    uint RXWINSET_DWINEDPOS;
    uint RXWINSET_NDWINSTPOS;
    uint RXWINSET_NDWINEDPOS;
    uint RXSSET_OFFSETCNT[9];
    uint RXSSET_LENGTH[9];
    uint RXSSET_ERRDET[9];
    uint RXSSET_PASCMP[9];
    uint RXSSET_SLTEN[9];
    uint RXDATA_RXDATA;
    uint RXDST_RXSTATUS;
    uint RXDST_RXSLOTNUM;
    uint RXDST_RXCHKD;
    uint RXDTIM_RXDTIM;
    uint RXDFIFO_RXDST;
    uint RXMODST_RXDEXIST;
    uint RXMODST_RXDFOVF;
    uint RXMODST_RXDERR;
    uint RXMODST_RXDSCNFERR;
    uint RXMODSTCLR_RXDFOVFCLR;
    uint RXMODSTCLR_RXDERRCLR;
    uint RXMODSTCLR_RXDSCNFERRCLR;
    uint RXMODSTINTEN_RXDEXISTINTEN;
    uint RXMODSTINTEN_RXDFOVFINTEN;
    uint RXMODSTINTEN_RXDERRINTEN;
    uint RXMODSTINTEN_RXDSCNFERRINTEN;
    uint RXMSET_RXM1EN;
    uint RXMSET_RXM2EN;
    uint RXMSET_RXM3EN;
    uint RXMSET_RXM4EN;
    uint RXMSET_RXM5EN;
    uint RXMSET_RXM6EN;
    uint RXMSET_RXM7EN;
    uint RXMSET_RXM8EN;
    uint RXMRXMSG_DATAFIELD;
    uint RXMRXMSG_SERIALID;
    uint RXMRXMSG_CONFIGBIT;
    uint RXMRXST_RXSTATUS;
    uint RXMRXST_SLOTNUM;
    uint RXMRXST_RXCRC;
    uint RXMRXST_RXSYNC;
    uint RXMRXTIM_RXMTIM;
    uint RXMFIFO_RXMFIFO;
    uint RXMMST_RXMEXIST;
    uint RXMMST_RXMFOVF;
    uint RXMMST_RXMERR;
    uint RXMMSTCLR_RXMFOVFCLR;
    uint RXMMSTCLR_RXMSERRCLR;
    uint RXMMSTINTEN_RXMEXISTINTEN;
    uint RXMMSTINTEN_RXMFOVFINTEN;
    uint RXMMSTINTEN_RXMERRINTEN;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_CHCTRL_CHEN(RegCBstr str) = 0;
    virtual void cb_IPTIMERCTRL_TSCLR(RegCBstr str) = 0;
    virtual void cb_IPTIMER_COUNTVAL(RegCBstr str) = 0;
    virtual void cb_OPMCOMM_COMMODE(RegCBstr str) = 0;
    virtual void cb_OPMBITRATE_BITRATECNT(RegCBstr str) = 0;
    virtual void cb_OPMCYCT_TTTTCNT(RegCBstr str) = 0;
    virtual void cb_EMRXDFIFO_RXDST(RegCBstr str) = 0;
    virtual void cb_EMRXMFIFO_RXMFIFO(RegCBstr str) = 0;
    virtual void cb_TXSETTING_SHORTCNT(RegCBstr str) = 0;
    virtual void cb_SYNCCTRL_VALTIMSYNC(RegCBstr str) = 0;
    virtual void cb_TXSTCLR_SYNCSTCLR(RegCBstr str) = 0;
    virtual void cb_TXSTINTEN_TXDEMPTYINTEN(RegCBstr str) = 0;
    virtual void cb_TXDATA_TXDATA(RegCBstr str) = 0;
    virtual void cb_RXSPLSET_SMPLPROD(RegCBstr str) = 0;
    virtual void cb_RXWINSET_DWINSTPOS(RegCBstr str) = 0;
    virtual void cb_RXSSET_OFFSETCNT(RegCBstr str) = 0;
    virtual void cb_RXDATA_RXDATA(RegCBstr str) = 0;
    virtual void cb_RXDST_RXSTATUS(RegCBstr str) = 0;
    virtual void cb_RXDTIM_RXDTIM(RegCBstr str) = 0;
    virtual void cb_RXDFIFO_RXDST(RegCBstr str) = 0;
    virtual void cb_RXMODSTCLR_RXDFOVFCLR(RegCBstr str) = 0;
    virtual void cb_RXMODSTINTEN_RXDEXISTINTEN(RegCBstr str) = 0;
    virtual void cb_RXMSET_RXM1EN(RegCBstr str) = 0;
    virtual void cb_RXMRXMSG_DATAFIELD(RegCBstr str) = 0;
    virtual void cb_RXMRXST_RXSTATUS(RegCBstr str) = 0;
    virtual void cb_RXMRXTIM_RXMTIM(RegCBstr str) = 0;
    virtual void cb_RXMFIFO_RXMFIFO(RegCBstr str) = 0;
    virtual void cb_RXMMSTCLR_RXMFOVFCLR(RegCBstr str) = 0;
    virtual void cb_RXMMSTINTEN_RXMEXISTINTEN(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cpsi5_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cpsi5_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;
    uint mFactorIndexRXSSET[emNUM_RXSSET];

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__PSI5_REG_DEF_H__
