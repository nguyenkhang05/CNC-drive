// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2019 Renesas Electronics Corporation
// Copyright(c) 2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : tpba_info.txt
////////////////////////////////////////////////////////////////////////////////
//  %MODULE TPBA
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  10
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group   name           reg_name         size       length  offset    factor_start  factor_end  factor_index  factor_step  access  init     support  callback  callbackDBG
//     %%REG    -       TPBA0BUF       TPBA0BUF         16         16      0x000     0             63          -             4            -       0        TRUE     -         -
//     %%REG    -       TPBA0CMP0      TPBA0CMP0        16         16      0x100     -             -           -             -            -       0        TRUE     -         -  
//     %%REG    -       TPBA0CMP1      TPBA0CMP1        8          8       0x104     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0CNT0      TPBA0CNT0        16         16      0x108     -             -           -             -            R       0xFFFF   TRUE     R         R 
//     %%REG    -       TPBA0CNT1      TPBA0CNT1        8          8       0x10C     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0RSF       TPBA0RSF         8          8       0x110     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0RDT       TPBA0RDT         8          8       0x114     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0RDM       TPBA0RDM         8          8       0x118     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TO        TPBA0TO          8          8       0x11C     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TOE       TPBA0TOE         8          8       0x120     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TOL       TPBA0TOL         8          8       0x124     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TE        TPBA0TE          8          8       0x128     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TS        TPBA0TS          8          8       0x12C     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0TT        TPBA0TT          8          8       0x130     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0CTL       TPBA0CTL         8          8       0x200     -             -           -             -            -       -        TRUE     -         -
//     %%REG    -       TPBA0EMU       TPBA0EMU         8          8       0x204     -             -           -             -            -       -        FALSE    -         -
//                        
// %REG_NAME TPBA0CMP1
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0CMP1      6      0      0     W|R     TRUE     W    
//     
// %REG_NAME TPBA0CNT1
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0CNT1      6      0      0     R       TRUE     -    
//     
// %REG_NAME TPBA0RSF
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0RSF0      0      0      0     R       TRUE     -    
//     %%BIT    TPBA0RSF1      1      1      0     R       TRUE     -    
// 
// %REG_NAME TPBA0RDT
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0RDT0      0      0      0     W       TRUE     W    
//     %%BIT    TPBA0RDT1      1      1      0     W       TRUE     -        
// 
// %REG_NAME TPBA0RDM
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0RDM0      0      0      0     W|R     TRUE     -    
// 
// %REG_NAME TPBA0TO
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TO0       0      0      0     D       TRUE     W
// 
// %REG_NAME TPBA0TOE
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TOE0      0      0      0     W|R     TRUE     W
// 
// %REG_NAME TPBA0TOL
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TOL0      0      0      0     W|R     TRUE     -
// 
// %REG_NAME TPBA0TE
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TE0       0      0      0     R       TRUE     -
// 
// %REG_NAME TPBA0TS
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TS0       0      0      0     D       TRUE     W
// 
// %REG_NAME TPBA0TT
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0TT0       0      0      0     W       TRUE     W
// 
// %REG_NAME TPBA0CTL
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0DPS       0      0      0     D       TRUE     -
//     %%BIT    TPBA0PRS0      4      4      0     D       TRUE     -
//     %%BIT    TPBA0PRS1      5      5      0     D       TRUE     -
// 
// %REG_NAME TPBA0EMU
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TPBA0SVSDIS    7      7      0     W|R     FALSE    -
// 
// 
// 
//    %CMD_BASEID tgt reg
//    %CMD_NODUMP_API CommandCB EnableInsertInput DumpProfile ClearProfile EnableDumpResult
//    %CMD_RW DumpInterrupt <enable:bool=false> @ Enable/disable interrupt information display when an interrupt is sent
//    %CMD_RW EnableTransInfo <enable:bool=false> @ Enable/disable information display when CNT0 match CB0 or CB2
//    %CMD_ACTION DumpStatInfo : void @ Dumps status information about TPBA
//    %CMD_ACTION UpdateRegisters : void @ copy the latest counter value of general timer to counter registers of tpba
//    %CMD_ACTION SetCLKfreq <clk_name:std::string> <clk_freq:double> : void @ Set a new clock frequency [Hz]
////////////////////////////////////////////////////////////////////////////////
/// @file tpba_regif.h
/// @brief Register IF class of model TPBA
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __TPBA_REGIF_H__
#define __TPBA_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USE_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of TPBA model
class Ctpba_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USE_CWR_SYSTEMC
    typedef unsigned short REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_TPBA0BUF  = 64
    }; ///< Enumeration for register factor index
#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USE_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USE_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Ctpba_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Ctpba_regif(std::string name, uint buswidth);
    ~Ctpba_regif();

protected:
    vpcl::re_register *TPBA0BUF [64];
    vpcl::re_register *TPBA0CMP0;
    vpcl::re_register *TPBA0CMP1;
    vpcl::re_register *TPBA0CNT0;
    vpcl::re_register *TPBA0CNT1;
    vpcl::re_register *TPBA0RSF ;
    vpcl::re_register *TPBA0RDT ;
    vpcl::re_register *TPBA0RDM ;
    vpcl::re_register *TPBA0TO  ;
    vpcl::re_register *TPBA0TOE ;
    vpcl::re_register *TPBA0TOL ;
    vpcl::re_register *TPBA0TE  ;
    vpcl::re_register *TPBA0TS  ;
    vpcl::re_register *TPBA0TT  ;
    vpcl::re_register *TPBA0CTL ;
    vpcl::re_register *TPBA0EMU ;

    #ifdef USE_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_TPBA0CMP1_TPBA0CMP1(RegCBstr str) = 0;
    virtual void cb_TPBA0CNT0_TPBA0CNT0(RegCBstr str) = 0;
    virtual void cbDBG_TPBA0CNT0_TPBA0CNT0(RegCBstr str) = 0;
    virtual void cb_TPBA0RDT_TPBA0RDT0(RegCBstr str) = 0;
    virtual void cb_TPBA0TO_TPBA0TO0(RegCBstr str) = 0;
    virtual void cb_TPBA0TOE_TPBA0TOE0(RegCBstr str) = 0;
    virtual void cb_TPBA0TS_TPBA0TS0(RegCBstr str) = 0;
    virtual void cb_TPBA0TT_TPBA0TT0(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Ctpba_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Ctpba_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Ctpba_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Ctpba_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USE_CWR_SYSTEMC
    unsigned short cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    unsigned short cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__TPBA_REG_DEF_H__
