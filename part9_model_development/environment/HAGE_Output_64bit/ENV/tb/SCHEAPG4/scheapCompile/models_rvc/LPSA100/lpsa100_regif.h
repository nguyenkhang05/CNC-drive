// -----------------------------------------------------------------------------
// $Id: lpsa100_regif.h,v 1.4 2020/02/18 03:17:36 hadinhtran Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : input/lpsa100_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE lpsa100
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  7
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name        reg_name       wsize      rsize      length     offset    access    init     support    callback
//     %%REG      SCTLR       SCTLR             32     8|16|32     32         0x00      R|W       0x0      TRUE       W
//     %%REG      EVFR        EVFR              32     8|16|32     32         0x04      R|W       0x0      TRUE       W
//     %%REG      DPSELR0     DPSELR0           32     8|16|32     32         0x08      R|W       0x0      TRUE       W
//     %%REG      DPSELRM     DPSELRM      8|16|32     8|16|32     32         0x0C      R|W       0x0      TRUE       W
//     %%REG      DPSELRH     DPSELRH      8|16|32     8|16|32     32         0x10      R|W       0x0      TRUE       W
//     %%REG      DPDSR0      DPDSR0            32     8|16|32     32         0x14      R|W       0x0      TRUE       W
//     %%REG      DPDSRM      DPDSRM       8|16|32     8|16|32     32         0x18      R|W       0x0      TRUE       W
//     %%REG      DPDSRH      DPDSRH       8|16|32     8|16|32     32         0x1C      R|W       0x0      TRUE       W
//     %%REG      DPDIMR0     DPDIMR0            -     8|16|32     32         0x20      R         0x0      TRUE       -
//     %%REG      DPDIMR1     DPDIMR1            -     8|16|32      8         0x24      R         0x0      TRUE       -
//     %%REG      DPDIMR2     DPDIMR2            -     8|16|32      8         0x28      R         0x0      TRUE       -
//     %%REG      DPDIMR3     DPDIMR3            -     8|16|32      8         0x2C      R         0x0      TRUE       -
//     %%REG      DPDIMR4     DPDIMR4            -     8|16|32      8         0x30      R         0x0      TRUE       -
//     %%REG      DPDIMR5     DPDIMR5            -     8|16|32      8         0x34      R         0x0      TRUE       -
//     %%REG      DPDIMR6     DPDIMR6            -     8|16|32      8         0x38      R         0x0      TRUE       -
//     %%REG      DPDIMR7     DPDIMR7            -     8|16|32      8         0x3C      R         0x0      TRUE       -
//     %%REG      CNTVAL      CNTVAL            16     8|16|32     16         0x40      R|W       0x0      TRUE       W
//     %%REG      SOSTR       SOSTR              -     8|16|32      8         0x44      R         0x0      TRUE       -
// 
// %REG_NAME SCTLR
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DPEN               0       0       0       R|W     TRUE        W
//     %%BIT    APEN               1       1       0       R|W     TRUE        -
//     %%BIT    TJIS0              2       2       0       R|W     TRUE        -
//     %%BIT    TJIS1              3       3       0       R|W     TRUE        -
//     %%BIT    NUMDP0             4       4       0       R|W     TRUE        -
//     %%BIT    NUMDP1             5       5       0       R|W     TRUE        -
//     %%BIT    NUMDP2             6       6       0       R|W     TRUE        -
//     %%BIT    TJIS2              7       7       0       R|W     TRUE        -
// 
// %REG_NAME EVFR
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    DINEVF             0       0       0       R|W     TRUE        W
// 
// %REG_NAME DPSELR0
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D0EN               23      0       0       R|W     TRUE        W
// 
// %REG_NAME DPSELRM
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D1EN               7       0       0       R|W     TRUE        W
//     %%BIT    D2EN               15      8       0       R|W     TRUE        -
//     %%BIT    D3EN               23      16      0       R|W     TRUE        -
//     %%BIT    D4EN               31      24      0       R|W     TRUE        -
// 
// %REG_NAME DPSELRH
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D5EN               7       0       0       R|W     TRUE        W
//     %%BIT    D6EN               15      8       0       R|W     TRUE        -
//     %%BIT    D7EN               23      16      0       R|W     TRUE        -
// 
// %REG_NAME DPDSR0
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D0                 23      0       0       R|W     TRUE        W
// 
// %REG_NAME DPDSRM
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D1                 7       0       0       R|W     TRUE        W
//     %%BIT    D2                 15      8       0       R|W     TRUE        -
//     %%BIT    D3                 23      16      0       R|W     TRUE        -
//     %%BIT    D4                 31      24      0       R|W     TRUE        -
// 
// %REG_NAME DPDSRH
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D5                 7       0       0       R|W     TRUE        W
//     %%BIT    D6                 15      8       0       R|W     TRUE        -
//     %%BIT    D7                 23      16      0       R|W     TRUE        -
// 
// %REG_NAME DPDIMR0
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D0M                23      0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR1
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D1M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR2
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D2M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR3
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D3M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR4
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D4M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR5
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D5M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR6
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D6M                7       0       0       R       TRUE        -
// 
// %REG_NAME DPDIMR7
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    D7M                7       0       0       R       TRUE        -
// 
// %REG_NAME CNTVAL
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    CNT0               7       0       0       R|W     TRUE        W
//     %%BIT    CNT1               15      8       0       R|W     TRUE        -
// 
// %REG_NAME SOSTR
//     %%TITLE  name               upper   lower   init    access  support     callback
//     %%BIT    SOF                0       0       0       R       TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file lpsa100_regif.h
/// @brief Register IF class of model LPSA100
/// $Id: lpsa100_regif.h,v 1.4 2020/02/18 03:17:36 hadinhtran Exp $
/// $Date: 2020/02/18 03:17:36 $
/// $Revison$
/// $Author: hadinhtran $
////////////////////////////////////////////////////////////////////////////////
#ifndef __LPSA100_REGIF_H__
#define __LPSA100_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of LPSA100 model
class Clpsa100_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Clpsa100_regif(std::string name, uint buswidth);
    ~Clpsa100_regif();

protected:
    vpcl::re_register *SCTLR  ;
    vpcl::re_register *EVFR   ;
    vpcl::re_register *DPSELR0;
    vpcl::re_register *DPSELRM;
    vpcl::re_register *DPSELRH;
    vpcl::re_register *DPDSR0 ;
    vpcl::re_register *DPDSRM ;
    vpcl::re_register *DPDSRH ;
    vpcl::re_register *DPDIMR0;
    vpcl::re_register *DPDIMR1;
    vpcl::re_register *DPDIMR2;
    vpcl::re_register *DPDIMR3;
    vpcl::re_register *DPDIMR4;
    vpcl::re_register *DPDIMR5;
    vpcl::re_register *DPDIMR6;
    vpcl::re_register *DPDIMR7;
    vpcl::re_register *CNTVAL ;
    vpcl::re_register *SOSTR  ;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_DPDIMR1_;
    scml2::reg<uint>      *CW_DPDIMR2_;
    scml2::reg<uint>      *CW_DPDIMR3_;
    scml2::reg<uint>      *CW_DPDIMR4_;
    scml2::reg<uint>      *CW_DPDIMR5_;
    scml2::reg<uint>      *CW_DPDIMR6_;
    scml2::reg<uint>      *CW_DPDIMR7_;
    scml2::reg<uint>      *CW_CNTVAL_;
    scml2::reg<uint>      *CW_SOSTR_ ;
    scml2::reg<uint>      *CW_SCTLR  ;
    scml2::reg<uint>      *CW_EVFR   ;
    scml2::reg<uint>      *CW_DPSELR0;
    scml2::reg<uint>      *CW_DPSELRM;
    scml2::reg<uint>      *CW_DPSELRH;
    scml2::reg<uint>      *CW_DPDSR0 ;
    scml2::reg<uint>      *CW_DPDSRM ;
    scml2::reg<uint>      *CW_DPDSRH ;
    scml2::reg<uint>      *CW_DPDIMR0;
    scml2::bitfield<uint> *CW_DPDIMR1;
    scml2::bitfield<uint> *CW_DPDIMR2;
    scml2::bitfield<uint> *CW_DPDIMR3;
    scml2::bitfield<uint> *CW_DPDIMR4;
    scml2::bitfield<uint> *CW_DPDIMR5;
    scml2::bitfield<uint> *CW_DPDIMR6;
    scml2::bitfield<uint> *CW_DPDIMR7;
    scml2::bitfield<uint> *CW_CNTVAL ;
    scml2::bitfield<uint> *CW_SOSTR  ;
    #endif

    uint SCTLR_DPEN;
    uint SCTLR_APEN;
    uint SCTLR_TJIS0;
    uint SCTLR_TJIS1;
    uint SCTLR_NUMDP0;
    uint SCTLR_NUMDP1;
    uint SCTLR_NUMDP2;
    uint SCTLR_TJIS2;
    uint EVFR_DINEVF;
    uint DPSELR0_D0EN;
    uint DPSELRM_D1EN;
    uint DPSELRM_D2EN;
    uint DPSELRM_D3EN;
    uint DPSELRM_D4EN;
    uint DPSELRH_D5EN;
    uint DPSELRH_D6EN;
    uint DPSELRH_D7EN;
    uint DPDSR0_D0;
    uint DPDSRM_D1;
    uint DPDSRM_D2;
    uint DPDSRM_D3;
    uint DPDSRM_D4;
    uint DPDSRH_D5;
    uint DPDSRH_D6;
    uint DPDSRH_D7;
    uint DPDIMR0_D0M;
    uint DPDIMR1_D1M;
    uint DPDIMR2_D2M;
    uint DPDIMR3_D3M;
    uint DPDIMR4_D4M;
    uint DPDIMR5_D5M;
    uint DPDIMR6_D6M;
    uint DPDIMR7_D7M;
    uint CNTVAL_CNT0;
    uint CNTVAL_CNT1;
    uint SOSTR_SOF;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_SCTLR_DPEN(RegCBstr str) = 0;
    virtual void cb_EVFR_DINEVF(RegCBstr str) = 0;
    virtual void cb_DPSELR0_D0EN(RegCBstr str) = 0;
    virtual void cb_DPSELRM_D1EN(RegCBstr str) = 0;
    virtual void cb_DPSELRH_D5EN(RegCBstr str) = 0;
    virtual void cb_DPDSR0_D0(RegCBstr str) = 0;
    virtual void cb_DPDSRM_D1(RegCBstr str) = 0;
    virtual void cb_DPDSRH_D5(RegCBstr str) = 0;
    virtual void cb_CNTVAL_CNT0(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Clpsa100_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Clpsa100_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__LPSA100_REG_DEF_H__
