// -----------------------------------------------------------------------------
// $Id: g4_ipir_regif.cpp,v 1.2 2019/07/10 11:25:13 nhuvo Exp $
//
// Copyright(c) 2016-2019 Renesas Electronics Corporation
// Copyright(c) 2016-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : g4_ipir_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE G4_IPIR
// #               name    offset_size     offset_start    offset_skip     offset_times
// %%REG_INSTANCE  pe      12              0x00            0x100           8
// 
// %REG_CHANNEL pe
//   %%TITLE           name    offset  offset_skip offset_times    
//   %%REG_INSTANCE    ch      0x00    0x20        4               
// 
// %REG_CHANNEL ch
//   %%TITLE           name        rsize   wsize   length  offset  init    access  support callback
//   %%REG             IPInENm     8|16|32 8|16|32 8       0x800   0x0     R|W     TRUE    -
//   %%REG             IPInFLGm    8|16|32 8|16|32 8       0x804   0x0     R       TRUE    -
//   %%REG             IPInFCLRm   8|16|32 8|16|32 8       0x808   0x0     W       TRUE    W
//   %%REG             IPInREQm    8|16|32 8|16|32 8       0x810   0x0     R|W     TRUE    W
//   %%REG             IPInRCLRm   8|16|32 8|16|32 8       0x814   0x0     W       TRUE    W
////////////////////////////////////////////////////////////////////////////////
/// @file g4_ipir_regif.cpp
/// @brief Register IF class of model G4_IPIR
/// $Id: g4_ipir_regif.cpp,v 1.2 2019/07/10 11:25:13 nhuvo Exp $
/// $Date: 2019/07/10 11:25:13 $
/// $Revison$
/// $Author: nhuvo $
////////////////////////////////////////////////////////////////////////////////
#include "g4_ipir_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cg4_ipir_regif::Cg4_ipir_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xF78/4))
    #endif
{
    CommandInit();
    IPInENm  [empe0_ch0] = new vpcl::re_register(0x0800, this, "IPInENm_pe0_ch0"     , name.c_str());
    IPInFLGm [empe0_ch0] = new vpcl::re_register(0x0804, this, "IPInFLGm_pe0_ch0"    , name.c_str());
    IPInFCLRm[empe0_ch0] = new vpcl::re_register(0x0808, this, "IPInFCLRm_pe0_ch0"   , name.c_str());
    IPInREQm [empe0_ch0] = new vpcl::re_register(0x0810, this, "IPInREQm_pe0_ch0"    , name.c_str());
    IPInRCLRm[empe0_ch0] = new vpcl::re_register(0x0814, this, "IPInRCLRm_pe0_ch0"   , name.c_str());
    IPInENm  [empe0_ch1] = new vpcl::re_register(0x0820, this, "IPInENm_pe0_ch1"     , name.c_str());
    IPInFLGm [empe0_ch1] = new vpcl::re_register(0x0824, this, "IPInFLGm_pe0_ch1"    , name.c_str());
    IPInFCLRm[empe0_ch1] = new vpcl::re_register(0x0828, this, "IPInFCLRm_pe0_ch1"   , name.c_str());
    IPInREQm [empe0_ch1] = new vpcl::re_register(0x0830, this, "IPInREQm_pe0_ch1"    , name.c_str());
    IPInRCLRm[empe0_ch1] = new vpcl::re_register(0x0834, this, "IPInRCLRm_pe0_ch1"   , name.c_str());
    IPInENm  [empe0_ch2] = new vpcl::re_register(0x0840, this, "IPInENm_pe0_ch2"     , name.c_str());
    IPInFLGm [empe0_ch2] = new vpcl::re_register(0x0844, this, "IPInFLGm_pe0_ch2"    , name.c_str());
    IPInFCLRm[empe0_ch2] = new vpcl::re_register(0x0848, this, "IPInFCLRm_pe0_ch2"   , name.c_str());
    IPInREQm [empe0_ch2] = new vpcl::re_register(0x0850, this, "IPInREQm_pe0_ch2"    , name.c_str());
    IPInRCLRm[empe0_ch2] = new vpcl::re_register(0x0854, this, "IPInRCLRm_pe0_ch2"   , name.c_str());
    IPInENm  [empe0_ch3] = new vpcl::re_register(0x0860, this, "IPInENm_pe0_ch3"     , name.c_str());
    IPInFLGm [empe0_ch3] = new vpcl::re_register(0x0864, this, "IPInFLGm_pe0_ch3"    , name.c_str());
    IPInFCLRm[empe0_ch3] = new vpcl::re_register(0x0868, this, "IPInFCLRm_pe0_ch3"   , name.c_str());
    IPInREQm [empe0_ch3] = new vpcl::re_register(0x0870, this, "IPInREQm_pe0_ch3"    , name.c_str());
    IPInRCLRm[empe0_ch3] = new vpcl::re_register(0x0874, this, "IPInRCLRm_pe0_ch3"   , name.c_str());
    IPInENm  [empe1_ch0] = new vpcl::re_register(0x0900, this, "IPInENm_pe1_ch0"     , name.c_str());
    IPInFLGm [empe1_ch0] = new vpcl::re_register(0x0904, this, "IPInFLGm_pe1_ch0"    , name.c_str());
    IPInFCLRm[empe1_ch0] = new vpcl::re_register(0x0908, this, "IPInFCLRm_pe1_ch0"   , name.c_str());
    IPInREQm [empe1_ch0] = new vpcl::re_register(0x0910, this, "IPInREQm_pe1_ch0"    , name.c_str());
    IPInRCLRm[empe1_ch0] = new vpcl::re_register(0x0914, this, "IPInRCLRm_pe1_ch0"   , name.c_str());
    IPInENm  [empe1_ch1] = new vpcl::re_register(0x0920, this, "IPInENm_pe1_ch1"     , name.c_str());
    IPInFLGm [empe1_ch1] = new vpcl::re_register(0x0924, this, "IPInFLGm_pe1_ch1"    , name.c_str());
    IPInFCLRm[empe1_ch1] = new vpcl::re_register(0x0928, this, "IPInFCLRm_pe1_ch1"   , name.c_str());
    IPInREQm [empe1_ch1] = new vpcl::re_register(0x0930, this, "IPInREQm_pe1_ch1"    , name.c_str());
    IPInRCLRm[empe1_ch1] = new vpcl::re_register(0x0934, this, "IPInRCLRm_pe1_ch1"   , name.c_str());
    IPInENm  [empe1_ch2] = new vpcl::re_register(0x0940, this, "IPInENm_pe1_ch2"     , name.c_str());
    IPInFLGm [empe1_ch2] = new vpcl::re_register(0x0944, this, "IPInFLGm_pe1_ch2"    , name.c_str());
    IPInFCLRm[empe1_ch2] = new vpcl::re_register(0x0948, this, "IPInFCLRm_pe1_ch2"   , name.c_str());
    IPInREQm [empe1_ch2] = new vpcl::re_register(0x0950, this, "IPInREQm_pe1_ch2"    , name.c_str());
    IPInRCLRm[empe1_ch2] = new vpcl::re_register(0x0954, this, "IPInRCLRm_pe1_ch2"   , name.c_str());
    IPInENm  [empe1_ch3] = new vpcl::re_register(0x0960, this, "IPInENm_pe1_ch3"     , name.c_str());
    IPInFLGm [empe1_ch3] = new vpcl::re_register(0x0964, this, "IPInFLGm_pe1_ch3"    , name.c_str());
    IPInFCLRm[empe1_ch3] = new vpcl::re_register(0x0968, this, "IPInFCLRm_pe1_ch3"   , name.c_str());
    IPInREQm [empe1_ch3] = new vpcl::re_register(0x0970, this, "IPInREQm_pe1_ch3"    , name.c_str());
    IPInRCLRm[empe1_ch3] = new vpcl::re_register(0x0974, this, "IPInRCLRm_pe1_ch3"   , name.c_str());
    IPInENm  [empe2_ch0] = new vpcl::re_register(0x0A00, this, "IPInENm_pe2_ch0"     , name.c_str());
    IPInFLGm [empe2_ch0] = new vpcl::re_register(0x0A04, this, "IPInFLGm_pe2_ch0"    , name.c_str());
    IPInFCLRm[empe2_ch0] = new vpcl::re_register(0x0A08, this, "IPInFCLRm_pe2_ch0"   , name.c_str());
    IPInREQm [empe2_ch0] = new vpcl::re_register(0x0A10, this, "IPInREQm_pe2_ch0"    , name.c_str());
    IPInRCLRm[empe2_ch0] = new vpcl::re_register(0x0A14, this, "IPInRCLRm_pe2_ch0"   , name.c_str());
    IPInENm  [empe2_ch1] = new vpcl::re_register(0x0A20, this, "IPInENm_pe2_ch1"     , name.c_str());
    IPInFLGm [empe2_ch1] = new vpcl::re_register(0x0A24, this, "IPInFLGm_pe2_ch1"    , name.c_str());
    IPInFCLRm[empe2_ch1] = new vpcl::re_register(0x0A28, this, "IPInFCLRm_pe2_ch1"   , name.c_str());
    IPInREQm [empe2_ch1] = new vpcl::re_register(0x0A30, this, "IPInREQm_pe2_ch1"    , name.c_str());
    IPInRCLRm[empe2_ch1] = new vpcl::re_register(0x0A34, this, "IPInRCLRm_pe2_ch1"   , name.c_str());
    IPInENm  [empe2_ch2] = new vpcl::re_register(0x0A40, this, "IPInENm_pe2_ch2"     , name.c_str());
    IPInFLGm [empe2_ch2] = new vpcl::re_register(0x0A44, this, "IPInFLGm_pe2_ch2"    , name.c_str());
    IPInFCLRm[empe2_ch2] = new vpcl::re_register(0x0A48, this, "IPInFCLRm_pe2_ch2"   , name.c_str());
    IPInREQm [empe2_ch2] = new vpcl::re_register(0x0A50, this, "IPInREQm_pe2_ch2"    , name.c_str());
    IPInRCLRm[empe2_ch2] = new vpcl::re_register(0x0A54, this, "IPInRCLRm_pe2_ch2"   , name.c_str());
    IPInENm  [empe2_ch3] = new vpcl::re_register(0x0A60, this, "IPInENm_pe2_ch3"     , name.c_str());
    IPInFLGm [empe2_ch3] = new vpcl::re_register(0x0A64, this, "IPInFLGm_pe2_ch3"    , name.c_str());
    IPInFCLRm[empe2_ch3] = new vpcl::re_register(0x0A68, this, "IPInFCLRm_pe2_ch3"   , name.c_str());
    IPInREQm [empe2_ch3] = new vpcl::re_register(0x0A70, this, "IPInREQm_pe2_ch3"    , name.c_str());
    IPInRCLRm[empe2_ch3] = new vpcl::re_register(0x0A74, this, "IPInRCLRm_pe2_ch3"   , name.c_str());
    IPInENm  [empe3_ch0] = new vpcl::re_register(0x0B00, this, "IPInENm_pe3_ch0"     , name.c_str());
    IPInFLGm [empe3_ch0] = new vpcl::re_register(0x0B04, this, "IPInFLGm_pe3_ch0"    , name.c_str());
    IPInFCLRm[empe3_ch0] = new vpcl::re_register(0x0B08, this, "IPInFCLRm_pe3_ch0"   , name.c_str());
    IPInREQm [empe3_ch0] = new vpcl::re_register(0x0B10, this, "IPInREQm_pe3_ch0"    , name.c_str());
    IPInRCLRm[empe3_ch0] = new vpcl::re_register(0x0B14, this, "IPInRCLRm_pe3_ch0"   , name.c_str());
    IPInENm  [empe3_ch1] = new vpcl::re_register(0x0B20, this, "IPInENm_pe3_ch1"     , name.c_str());
    IPInFLGm [empe3_ch1] = new vpcl::re_register(0x0B24, this, "IPInFLGm_pe3_ch1"    , name.c_str());
    IPInFCLRm[empe3_ch1] = new vpcl::re_register(0x0B28, this, "IPInFCLRm_pe3_ch1"   , name.c_str());
    IPInREQm [empe3_ch1] = new vpcl::re_register(0x0B30, this, "IPInREQm_pe3_ch1"    , name.c_str());
    IPInRCLRm[empe3_ch1] = new vpcl::re_register(0x0B34, this, "IPInRCLRm_pe3_ch1"   , name.c_str());
    IPInENm  [empe3_ch2] = new vpcl::re_register(0x0B40, this, "IPInENm_pe3_ch2"     , name.c_str());
    IPInFLGm [empe3_ch2] = new vpcl::re_register(0x0B44, this, "IPInFLGm_pe3_ch2"    , name.c_str());
    IPInFCLRm[empe3_ch2] = new vpcl::re_register(0x0B48, this, "IPInFCLRm_pe3_ch2"   , name.c_str());
    IPInREQm [empe3_ch2] = new vpcl::re_register(0x0B50, this, "IPInREQm_pe3_ch2"    , name.c_str());
    IPInRCLRm[empe3_ch2] = new vpcl::re_register(0x0B54, this, "IPInRCLRm_pe3_ch2"   , name.c_str());
    IPInENm  [empe3_ch3] = new vpcl::re_register(0x0B60, this, "IPInENm_pe3_ch3"     , name.c_str());
    IPInFLGm [empe3_ch3] = new vpcl::re_register(0x0B64, this, "IPInFLGm_pe3_ch3"    , name.c_str());
    IPInFCLRm[empe3_ch3] = new vpcl::re_register(0x0B68, this, "IPInFCLRm_pe3_ch3"   , name.c_str());
    IPInREQm [empe3_ch3] = new vpcl::re_register(0x0B70, this, "IPInREQm_pe3_ch3"    , name.c_str());
    IPInRCLRm[empe3_ch3] = new vpcl::re_register(0x0B74, this, "IPInRCLRm_pe3_ch3"   , name.c_str());
    IPInENm  [empe4_ch0] = new vpcl::re_register(0x0C00, this, "IPInENm_pe4_ch0"     , name.c_str());
    IPInFLGm [empe4_ch0] = new vpcl::re_register(0x0C04, this, "IPInFLGm_pe4_ch0"    , name.c_str());
    IPInFCLRm[empe4_ch0] = new vpcl::re_register(0x0C08, this, "IPInFCLRm_pe4_ch0"   , name.c_str());
    IPInREQm [empe4_ch0] = new vpcl::re_register(0x0C10, this, "IPInREQm_pe4_ch0"    , name.c_str());
    IPInRCLRm[empe4_ch0] = new vpcl::re_register(0x0C14, this, "IPInRCLRm_pe4_ch0"   , name.c_str());
    IPInENm  [empe4_ch1] = new vpcl::re_register(0x0C20, this, "IPInENm_pe4_ch1"     , name.c_str());
    IPInFLGm [empe4_ch1] = new vpcl::re_register(0x0C24, this, "IPInFLGm_pe4_ch1"    , name.c_str());
    IPInFCLRm[empe4_ch1] = new vpcl::re_register(0x0C28, this, "IPInFCLRm_pe4_ch1"   , name.c_str());
    IPInREQm [empe4_ch1] = new vpcl::re_register(0x0C30, this, "IPInREQm_pe4_ch1"    , name.c_str());
    IPInRCLRm[empe4_ch1] = new vpcl::re_register(0x0C34, this, "IPInRCLRm_pe4_ch1"   , name.c_str());
    IPInENm  [empe4_ch2] = new vpcl::re_register(0x0C40, this, "IPInENm_pe4_ch2"     , name.c_str());
    IPInFLGm [empe4_ch2] = new vpcl::re_register(0x0C44, this, "IPInFLGm_pe4_ch2"    , name.c_str());
    IPInFCLRm[empe4_ch2] = new vpcl::re_register(0x0C48, this, "IPInFCLRm_pe4_ch2"   , name.c_str());
    IPInREQm [empe4_ch2] = new vpcl::re_register(0x0C50, this, "IPInREQm_pe4_ch2"    , name.c_str());
    IPInRCLRm[empe4_ch2] = new vpcl::re_register(0x0C54, this, "IPInRCLRm_pe4_ch2"   , name.c_str());
    IPInENm  [empe4_ch3] = new vpcl::re_register(0x0C60, this, "IPInENm_pe4_ch3"     , name.c_str());
    IPInFLGm [empe4_ch3] = new vpcl::re_register(0x0C64, this, "IPInFLGm_pe4_ch3"    , name.c_str());
    IPInFCLRm[empe4_ch3] = new vpcl::re_register(0x0C68, this, "IPInFCLRm_pe4_ch3"   , name.c_str());
    IPInREQm [empe4_ch3] = new vpcl::re_register(0x0C70, this, "IPInREQm_pe4_ch3"    , name.c_str());
    IPInRCLRm[empe4_ch3] = new vpcl::re_register(0x0C74, this, "IPInRCLRm_pe4_ch3"   , name.c_str());
    IPInENm  [empe5_ch0] = new vpcl::re_register(0x0D00, this, "IPInENm_pe5_ch0"     , name.c_str());
    IPInFLGm [empe5_ch0] = new vpcl::re_register(0x0D04, this, "IPInFLGm_pe5_ch0"    , name.c_str());
    IPInFCLRm[empe5_ch0] = new vpcl::re_register(0x0D08, this, "IPInFCLRm_pe5_ch0"   , name.c_str());
    IPInREQm [empe5_ch0] = new vpcl::re_register(0x0D10, this, "IPInREQm_pe5_ch0"    , name.c_str());
    IPInRCLRm[empe5_ch0] = new vpcl::re_register(0x0D14, this, "IPInRCLRm_pe5_ch0"   , name.c_str());
    IPInENm  [empe5_ch1] = new vpcl::re_register(0x0D20, this, "IPInENm_pe5_ch1"     , name.c_str());
    IPInFLGm [empe5_ch1] = new vpcl::re_register(0x0D24, this, "IPInFLGm_pe5_ch1"    , name.c_str());
    IPInFCLRm[empe5_ch1] = new vpcl::re_register(0x0D28, this, "IPInFCLRm_pe5_ch1"   , name.c_str());
    IPInREQm [empe5_ch1] = new vpcl::re_register(0x0D30, this, "IPInREQm_pe5_ch1"    , name.c_str());
    IPInRCLRm[empe5_ch1] = new vpcl::re_register(0x0D34, this, "IPInRCLRm_pe5_ch1"   , name.c_str());
    IPInENm  [empe5_ch2] = new vpcl::re_register(0x0D40, this, "IPInENm_pe5_ch2"     , name.c_str());
    IPInFLGm [empe5_ch2] = new vpcl::re_register(0x0D44, this, "IPInFLGm_pe5_ch2"    , name.c_str());
    IPInFCLRm[empe5_ch2] = new vpcl::re_register(0x0D48, this, "IPInFCLRm_pe5_ch2"   , name.c_str());
    IPInREQm [empe5_ch2] = new vpcl::re_register(0x0D50, this, "IPInREQm_pe5_ch2"    , name.c_str());
    IPInRCLRm[empe5_ch2] = new vpcl::re_register(0x0D54, this, "IPInRCLRm_pe5_ch2"   , name.c_str());
    IPInENm  [empe5_ch3] = new vpcl::re_register(0x0D60, this, "IPInENm_pe5_ch3"     , name.c_str());
    IPInFLGm [empe5_ch3] = new vpcl::re_register(0x0D64, this, "IPInFLGm_pe5_ch3"    , name.c_str());
    IPInFCLRm[empe5_ch3] = new vpcl::re_register(0x0D68, this, "IPInFCLRm_pe5_ch3"   , name.c_str());
    IPInREQm [empe5_ch3] = new vpcl::re_register(0x0D70, this, "IPInREQm_pe5_ch3"    , name.c_str());
    IPInRCLRm[empe5_ch3] = new vpcl::re_register(0x0D74, this, "IPInRCLRm_pe5_ch3"   , name.c_str());
    IPInENm  [empe6_ch0] = new vpcl::re_register(0x0E00, this, "IPInENm_pe6_ch0"     , name.c_str());
    IPInFLGm [empe6_ch0] = new vpcl::re_register(0x0E04, this, "IPInFLGm_pe6_ch0"    , name.c_str());
    IPInFCLRm[empe6_ch0] = new vpcl::re_register(0x0E08, this, "IPInFCLRm_pe6_ch0"   , name.c_str());
    IPInREQm [empe6_ch0] = new vpcl::re_register(0x0E10, this, "IPInREQm_pe6_ch0"    , name.c_str());
    IPInRCLRm[empe6_ch0] = new vpcl::re_register(0x0E14, this, "IPInRCLRm_pe6_ch0"   , name.c_str());
    IPInENm  [empe6_ch1] = new vpcl::re_register(0x0E20, this, "IPInENm_pe6_ch1"     , name.c_str());
    IPInFLGm [empe6_ch1] = new vpcl::re_register(0x0E24, this, "IPInFLGm_pe6_ch1"    , name.c_str());
    IPInFCLRm[empe6_ch1] = new vpcl::re_register(0x0E28, this, "IPInFCLRm_pe6_ch1"   , name.c_str());
    IPInREQm [empe6_ch1] = new vpcl::re_register(0x0E30, this, "IPInREQm_pe6_ch1"    , name.c_str());
    IPInRCLRm[empe6_ch1] = new vpcl::re_register(0x0E34, this, "IPInRCLRm_pe6_ch1"   , name.c_str());
    IPInENm  [empe6_ch2] = new vpcl::re_register(0x0E40, this, "IPInENm_pe6_ch2"     , name.c_str());
    IPInFLGm [empe6_ch2] = new vpcl::re_register(0x0E44, this, "IPInFLGm_pe6_ch2"    , name.c_str());
    IPInFCLRm[empe6_ch2] = new vpcl::re_register(0x0E48, this, "IPInFCLRm_pe6_ch2"   , name.c_str());
    IPInREQm [empe6_ch2] = new vpcl::re_register(0x0E50, this, "IPInREQm_pe6_ch2"    , name.c_str());
    IPInRCLRm[empe6_ch2] = new vpcl::re_register(0x0E54, this, "IPInRCLRm_pe6_ch2"   , name.c_str());
    IPInENm  [empe6_ch3] = new vpcl::re_register(0x0E60, this, "IPInENm_pe6_ch3"     , name.c_str());
    IPInFLGm [empe6_ch3] = new vpcl::re_register(0x0E64, this, "IPInFLGm_pe6_ch3"    , name.c_str());
    IPInFCLRm[empe6_ch3] = new vpcl::re_register(0x0E68, this, "IPInFCLRm_pe6_ch3"   , name.c_str());
    IPInREQm [empe6_ch3] = new vpcl::re_register(0x0E70, this, "IPInREQm_pe6_ch3"    , name.c_str());
    IPInRCLRm[empe6_ch3] = new vpcl::re_register(0x0E74, this, "IPInRCLRm_pe6_ch3"   , name.c_str());
    IPInENm  [empe7_ch0] = new vpcl::re_register(0x0F00, this, "IPInENm_pe7_ch0"     , name.c_str());
    IPInFLGm [empe7_ch0] = new vpcl::re_register(0x0F04, this, "IPInFLGm_pe7_ch0"    , name.c_str());
    IPInFCLRm[empe7_ch0] = new vpcl::re_register(0x0F08, this, "IPInFCLRm_pe7_ch0"   , name.c_str());
    IPInREQm [empe7_ch0] = new vpcl::re_register(0x0F10, this, "IPInREQm_pe7_ch0"    , name.c_str());
    IPInRCLRm[empe7_ch0] = new vpcl::re_register(0x0F14, this, "IPInRCLRm_pe7_ch0"   , name.c_str());
    IPInENm  [empe7_ch1] = new vpcl::re_register(0x0F20, this, "IPInENm_pe7_ch1"     , name.c_str());
    IPInFLGm [empe7_ch1] = new vpcl::re_register(0x0F24, this, "IPInFLGm_pe7_ch1"    , name.c_str());
    IPInFCLRm[empe7_ch1] = new vpcl::re_register(0x0F28, this, "IPInFCLRm_pe7_ch1"   , name.c_str());
    IPInREQm [empe7_ch1] = new vpcl::re_register(0x0F30, this, "IPInREQm_pe7_ch1"    , name.c_str());
    IPInRCLRm[empe7_ch1] = new vpcl::re_register(0x0F34, this, "IPInRCLRm_pe7_ch1"   , name.c_str());
    IPInENm  [empe7_ch2] = new vpcl::re_register(0x0F40, this, "IPInENm_pe7_ch2"     , name.c_str());
    IPInFLGm [empe7_ch2] = new vpcl::re_register(0x0F44, this, "IPInFLGm_pe7_ch2"    , name.c_str());
    IPInFCLRm[empe7_ch2] = new vpcl::re_register(0x0F48, this, "IPInFCLRm_pe7_ch2"   , name.c_str());
    IPInREQm [empe7_ch2] = new vpcl::re_register(0x0F50, this, "IPInREQm_pe7_ch2"    , name.c_str());
    IPInRCLRm[empe7_ch2] = new vpcl::re_register(0x0F54, this, "IPInRCLRm_pe7_ch2"   , name.c_str());
    IPInENm  [empe7_ch3] = new vpcl::re_register(0x0F60, this, "IPInENm_pe7_ch3"     , name.c_str());
    IPInFLGm [empe7_ch3] = new vpcl::re_register(0x0F64, this, "IPInFLGm_pe7_ch3"    , name.c_str());
    IPInFCLRm[empe7_ch3] = new vpcl::re_register(0x0F68, this, "IPInFCLRm_pe7_ch3"   , name.c_str());
    IPInREQm [empe7_ch3] = new vpcl::re_register(0x0F70, this, "IPInREQm_pe7_ch3"    , name.c_str());
    IPInRCLRm[empe7_ch3] = new vpcl::re_register(0x0F74, this, "IPInRCLRm_pe7_ch3"   , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0800]     = index++;
    mRegMap[0x0804]     = index++;
    mRegMap[0x0808]     = index++;
    mRegMap[0x0810]     = index++;
    mRegMap[0x0814]     = index++;
    mRegMap[0x0820]     = index++;
    mRegMap[0x0824]     = index++;
    mRegMap[0x0828]     = index++;
    mRegMap[0x0830]     = index++;
    mRegMap[0x0834]     = index++;
    mRegMap[0x0840]     = index++;
    mRegMap[0x0844]     = index++;
    mRegMap[0x0848]     = index++;
    mRegMap[0x0850]     = index++;
    mRegMap[0x0854]     = index++;
    mRegMap[0x0860]     = index++;
    mRegMap[0x0864]     = index++;
    mRegMap[0x0868]     = index++;
    mRegMap[0x0870]     = index++;
    mRegMap[0x0874]     = index++;
    mRegMap[0x0900]     = index++;
    mRegMap[0x0904]     = index++;
    mRegMap[0x0908]     = index++;
    mRegMap[0x0910]     = index++;
    mRegMap[0x0914]     = index++;
    mRegMap[0x0920]     = index++;
    mRegMap[0x0924]     = index++;
    mRegMap[0x0928]     = index++;
    mRegMap[0x0930]     = index++;
    mRegMap[0x0934]     = index++;
    mRegMap[0x0940]     = index++;
    mRegMap[0x0944]     = index++;
    mRegMap[0x0948]     = index++;
    mRegMap[0x0950]     = index++;
    mRegMap[0x0954]     = index++;
    mRegMap[0x0960]     = index++;
    mRegMap[0x0964]     = index++;
    mRegMap[0x0968]     = index++;
    mRegMap[0x0970]     = index++;
    mRegMap[0x0974]     = index++;
    mRegMap[0x0A00]     = index++;
    mRegMap[0x0A04]     = index++;
    mRegMap[0x0A08]     = index++;
    mRegMap[0x0A10]     = index++;
    mRegMap[0x0A14]     = index++;
    mRegMap[0x0A20]     = index++;
    mRegMap[0x0A24]     = index++;
    mRegMap[0x0A28]     = index++;
    mRegMap[0x0A30]     = index++;
    mRegMap[0x0A34]     = index++;
    mRegMap[0x0A40]     = index++;
    mRegMap[0x0A44]     = index++;
    mRegMap[0x0A48]     = index++;
    mRegMap[0x0A50]     = index++;
    mRegMap[0x0A54]     = index++;
    mRegMap[0x0A60]     = index++;
    mRegMap[0x0A64]     = index++;
    mRegMap[0x0A68]     = index++;
    mRegMap[0x0A70]     = index++;
    mRegMap[0x0A74]     = index++;
    mRegMap[0x0B00]     = index++;
    mRegMap[0x0B04]     = index++;
    mRegMap[0x0B08]     = index++;
    mRegMap[0x0B10]     = index++;
    mRegMap[0x0B14]     = index++;
    mRegMap[0x0B20]     = index++;
    mRegMap[0x0B24]     = index++;
    mRegMap[0x0B28]     = index++;
    mRegMap[0x0B30]     = index++;
    mRegMap[0x0B34]     = index++;
    mRegMap[0x0B40]     = index++;
    mRegMap[0x0B44]     = index++;
    mRegMap[0x0B48]     = index++;
    mRegMap[0x0B50]     = index++;
    mRegMap[0x0B54]     = index++;
    mRegMap[0x0B60]     = index++;
    mRegMap[0x0B64]     = index++;
    mRegMap[0x0B68]     = index++;
    mRegMap[0x0B70]     = index++;
    mRegMap[0x0B74]     = index++;
    mRegMap[0x0C00]     = index++;
    mRegMap[0x0C04]     = index++;
    mRegMap[0x0C08]     = index++;
    mRegMap[0x0C10]     = index++;
    mRegMap[0x0C14]     = index++;
    mRegMap[0x0C20]     = index++;
    mRegMap[0x0C24]     = index++;
    mRegMap[0x0C28]     = index++;
    mRegMap[0x0C30]     = index++;
    mRegMap[0x0C34]     = index++;
    mRegMap[0x0C40]     = index++;
    mRegMap[0x0C44]     = index++;
    mRegMap[0x0C48]     = index++;
    mRegMap[0x0C50]     = index++;
    mRegMap[0x0C54]     = index++;
    mRegMap[0x0C60]     = index++;
    mRegMap[0x0C64]     = index++;
    mRegMap[0x0C68]     = index++;
    mRegMap[0x0C70]     = index++;
    mRegMap[0x0C74]     = index++;
    mRegMap[0x0D00]     = index++;
    mRegMap[0x0D04]     = index++;
    mRegMap[0x0D08]     = index++;
    mRegMap[0x0D10]     = index++;
    mRegMap[0x0D14]     = index++;
    mRegMap[0x0D20]     = index++;
    mRegMap[0x0D24]     = index++;
    mRegMap[0x0D28]     = index++;
    mRegMap[0x0D30]     = index++;
    mRegMap[0x0D34]     = index++;
    mRegMap[0x0D40]     = index++;
    mRegMap[0x0D44]     = index++;
    mRegMap[0x0D48]     = index++;
    mRegMap[0x0D50]     = index++;
    mRegMap[0x0D54]     = index++;
    mRegMap[0x0D60]     = index++;
    mRegMap[0x0D64]     = index++;
    mRegMap[0x0D68]     = index++;
    mRegMap[0x0D70]     = index++;
    mRegMap[0x0D74]     = index++;
    mRegMap[0x0E00]     = index++;
    mRegMap[0x0E04]     = index++;
    mRegMap[0x0E08]     = index++;
    mRegMap[0x0E10]     = index++;
    mRegMap[0x0E14]     = index++;
    mRegMap[0x0E20]     = index++;
    mRegMap[0x0E24]     = index++;
    mRegMap[0x0E28]     = index++;
    mRegMap[0x0E30]     = index++;
    mRegMap[0x0E34]     = index++;
    mRegMap[0x0E40]     = index++;
    mRegMap[0x0E44]     = index++;
    mRegMap[0x0E48]     = index++;
    mRegMap[0x0E50]     = index++;
    mRegMap[0x0E54]     = index++;
    mRegMap[0x0E60]     = index++;
    mRegMap[0x0E64]     = index++;
    mRegMap[0x0E68]     = index++;
    mRegMap[0x0E70]     = index++;
    mRegMap[0x0E74]     = index++;
    mRegMap[0x0F00]     = index++;
    mRegMap[0x0F04]     = index++;
    mRegMap[0x0F08]     = index++;
    mRegMap[0x0F10]     = index++;
    mRegMap[0x0F14]     = index++;
    mRegMap[0x0F20]     = index++;
    mRegMap[0x0F24]     = index++;
    mRegMap[0x0F28]     = index++;
    mRegMap[0x0F30]     = index++;
    mRegMap[0x0F34]     = index++;
    mRegMap[0x0F40]     = index++;
    mRegMap[0x0F44]     = index++;
    mRegMap[0x0F48]     = index++;
    mRegMap[0x0F50]     = index++;
    mRegMap[0x0F54]     = index++;
    mRegMap[0x0F60]     = index++;
    mRegMap[0x0F64]     = index++;
    mRegMap[0x0F68]     = index++;
    mRegMap[0x0F70]     = index++;
    mRegMap[0x0F74]     = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_IPInENm_empe0_ch0_, "IPInENm_empe0_ch0_", 0x0800);
    CW_IPInENm  [empe0_ch0] = new scml2::bitfield<uint>(IPInENm  [empe0_ch0]->name(), CW_IPInENm_empe0_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe0_ch0_, "IPInFLGm_empe0_ch0_", 0x0804);
    CW_IPInFLGm [empe0_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe0_ch0]->name(), CW_IPInFLGm_empe0_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe0_ch0_, "IPInFCLRm_empe0_ch0_", 0x0808);
    CW_IPInFCLRm[empe0_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe0_ch0]->name(), CW_IPInFCLRm_empe0_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe0_ch0_, "IPInREQm_empe0_ch0_", 0x0810);
    CW_IPInREQm [empe0_ch0] = new scml2::bitfield<uint>(IPInREQm [empe0_ch0]->name(), CW_IPInREQm_empe0_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe0_ch0_, "IPInRCLRm_empe0_ch0_", 0x0814);
    CW_IPInRCLRm[empe0_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe0_ch0]->name(), CW_IPInRCLRm_empe0_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe0_ch1_, "IPInENm_empe0_ch1_", 0x0820);
    CW_IPInENm  [empe0_ch1] = new scml2::bitfield<uint>(IPInENm  [empe0_ch1]->name(), CW_IPInENm_empe0_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe0_ch1_, "IPInFLGm_empe0_ch1_", 0x0824);
    CW_IPInFLGm [empe0_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe0_ch1]->name(), CW_IPInFLGm_empe0_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe0_ch1_, "IPInFCLRm_empe0_ch1_", 0x0828);
    CW_IPInFCLRm[empe0_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe0_ch1]->name(), CW_IPInFCLRm_empe0_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe0_ch1_, "IPInREQm_empe0_ch1_", 0x0830);
    CW_IPInREQm [empe0_ch1] = new scml2::bitfield<uint>(IPInREQm [empe0_ch1]->name(), CW_IPInREQm_empe0_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe0_ch1_, "IPInRCLRm_empe0_ch1_", 0x0834);
    CW_IPInRCLRm[empe0_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe0_ch1]->name(), CW_IPInRCLRm_empe0_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe0_ch2_, "IPInENm_empe0_ch2_", 0x0840);
    CW_IPInENm  [empe0_ch2] = new scml2::bitfield<uint>(IPInENm  [empe0_ch2]->name(), CW_IPInENm_empe0_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe0_ch2_, "IPInFLGm_empe0_ch2_", 0x0844);
    CW_IPInFLGm [empe0_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe0_ch2]->name(), CW_IPInFLGm_empe0_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe0_ch2_, "IPInFCLRm_empe0_ch2_", 0x0848);
    CW_IPInFCLRm[empe0_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe0_ch2]->name(), CW_IPInFCLRm_empe0_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe0_ch2_, "IPInREQm_empe0_ch2_", 0x0850);
    CW_IPInREQm [empe0_ch2] = new scml2::bitfield<uint>(IPInREQm [empe0_ch2]->name(), CW_IPInREQm_empe0_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe0_ch2_, "IPInRCLRm_empe0_ch2_", 0x0854);
    CW_IPInRCLRm[empe0_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe0_ch2]->name(), CW_IPInRCLRm_empe0_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe0_ch3_, "IPInENm_empe0_ch3_", 0x0860);
    CW_IPInENm  [empe0_ch3] = new scml2::bitfield<uint>(IPInENm  [empe0_ch3]->name(), CW_IPInENm_empe0_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe0_ch3_, "IPInFLGm_empe0_ch3_", 0x0864);
    CW_IPInFLGm [empe0_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe0_ch3]->name(), CW_IPInFLGm_empe0_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe0_ch3_, "IPInFCLRm_empe0_ch3_", 0x0868);
    CW_IPInFCLRm[empe0_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe0_ch3]->name(), CW_IPInFCLRm_empe0_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe0_ch3_, "IPInREQm_empe0_ch3_", 0x0870);
    CW_IPInREQm [empe0_ch3] = new scml2::bitfield<uint>(IPInREQm [empe0_ch3]->name(), CW_IPInREQm_empe0_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe0_ch3_, "IPInRCLRm_empe0_ch3_", 0x0874);
    CW_IPInRCLRm[empe0_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe0_ch3]->name(), CW_IPInRCLRm_empe0_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe1_ch0_, "IPInENm_empe1_ch0_", 0x0900);
    CW_IPInENm  [empe1_ch0] = new scml2::bitfield<uint>(IPInENm  [empe1_ch0]->name(), CW_IPInENm_empe1_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe1_ch0_, "IPInFLGm_empe1_ch0_", 0x0904);
    CW_IPInFLGm [empe1_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe1_ch0]->name(), CW_IPInFLGm_empe1_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe1_ch0_, "IPInFCLRm_empe1_ch0_", 0x0908);
    CW_IPInFCLRm[empe1_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe1_ch0]->name(), CW_IPInFCLRm_empe1_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe1_ch0_, "IPInREQm_empe1_ch0_", 0x0910);
    CW_IPInREQm [empe1_ch0] = new scml2::bitfield<uint>(IPInREQm [empe1_ch0]->name(), CW_IPInREQm_empe1_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe1_ch0_, "IPInRCLRm_empe1_ch0_", 0x0914);
    CW_IPInRCLRm[empe1_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe1_ch0]->name(), CW_IPInRCLRm_empe1_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe1_ch1_, "IPInENm_empe1_ch1_", 0x0920);
    CW_IPInENm  [empe1_ch1] = new scml2::bitfield<uint>(IPInENm  [empe1_ch1]->name(), CW_IPInENm_empe1_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe1_ch1_, "IPInFLGm_empe1_ch1_", 0x0924);
    CW_IPInFLGm [empe1_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe1_ch1]->name(), CW_IPInFLGm_empe1_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe1_ch1_, "IPInFCLRm_empe1_ch1_", 0x0928);
    CW_IPInFCLRm[empe1_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe1_ch1]->name(), CW_IPInFCLRm_empe1_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe1_ch1_, "IPInREQm_empe1_ch1_", 0x0930);
    CW_IPInREQm [empe1_ch1] = new scml2::bitfield<uint>(IPInREQm [empe1_ch1]->name(), CW_IPInREQm_empe1_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe1_ch1_, "IPInRCLRm_empe1_ch1_", 0x0934);
    CW_IPInRCLRm[empe1_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe1_ch1]->name(), CW_IPInRCLRm_empe1_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe1_ch2_, "IPInENm_empe1_ch2_", 0x0940);
    CW_IPInENm  [empe1_ch2] = new scml2::bitfield<uint>(IPInENm  [empe1_ch2]->name(), CW_IPInENm_empe1_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe1_ch2_, "IPInFLGm_empe1_ch2_", 0x0944);
    CW_IPInFLGm [empe1_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe1_ch2]->name(), CW_IPInFLGm_empe1_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe1_ch2_, "IPInFCLRm_empe1_ch2_", 0x0948);
    CW_IPInFCLRm[empe1_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe1_ch2]->name(), CW_IPInFCLRm_empe1_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe1_ch2_, "IPInREQm_empe1_ch2_", 0x0950);
    CW_IPInREQm [empe1_ch2] = new scml2::bitfield<uint>(IPInREQm [empe1_ch2]->name(), CW_IPInREQm_empe1_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe1_ch2_, "IPInRCLRm_empe1_ch2_", 0x0954);
    CW_IPInRCLRm[empe1_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe1_ch2]->name(), CW_IPInRCLRm_empe1_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe1_ch3_, "IPInENm_empe1_ch3_", 0x0960);
    CW_IPInENm  [empe1_ch3] = new scml2::bitfield<uint>(IPInENm  [empe1_ch3]->name(), CW_IPInENm_empe1_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe1_ch3_, "IPInFLGm_empe1_ch3_", 0x0964);
    CW_IPInFLGm [empe1_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe1_ch3]->name(), CW_IPInFLGm_empe1_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe1_ch3_, "IPInFCLRm_empe1_ch3_", 0x0968);
    CW_IPInFCLRm[empe1_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe1_ch3]->name(), CW_IPInFCLRm_empe1_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe1_ch3_, "IPInREQm_empe1_ch3_", 0x0970);
    CW_IPInREQm [empe1_ch3] = new scml2::bitfield<uint>(IPInREQm [empe1_ch3]->name(), CW_IPInREQm_empe1_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe1_ch3_, "IPInRCLRm_empe1_ch3_", 0x0974);
    CW_IPInRCLRm[empe1_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe1_ch3]->name(), CW_IPInRCLRm_empe1_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe2_ch0_, "IPInENm_empe2_ch0_", 0x0A00);
    CW_IPInENm  [empe2_ch0] = new scml2::bitfield<uint>(IPInENm  [empe2_ch0]->name(), CW_IPInENm_empe2_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe2_ch0_, "IPInFLGm_empe2_ch0_", 0x0A04);
    CW_IPInFLGm [empe2_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe2_ch0]->name(), CW_IPInFLGm_empe2_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe2_ch0_, "IPInFCLRm_empe2_ch0_", 0x0A08);
    CW_IPInFCLRm[empe2_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe2_ch0]->name(), CW_IPInFCLRm_empe2_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe2_ch0_, "IPInREQm_empe2_ch0_", 0x0A10);
    CW_IPInREQm [empe2_ch0] = new scml2::bitfield<uint>(IPInREQm [empe2_ch0]->name(), CW_IPInREQm_empe2_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe2_ch0_, "IPInRCLRm_empe2_ch0_", 0x0A14);
    CW_IPInRCLRm[empe2_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe2_ch0]->name(), CW_IPInRCLRm_empe2_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe2_ch1_, "IPInENm_empe2_ch1_", 0x0A20);
    CW_IPInENm  [empe2_ch1] = new scml2::bitfield<uint>(IPInENm  [empe2_ch1]->name(), CW_IPInENm_empe2_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe2_ch1_, "IPInFLGm_empe2_ch1_", 0x0A24);
    CW_IPInFLGm [empe2_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe2_ch1]->name(), CW_IPInFLGm_empe2_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe2_ch1_, "IPInFCLRm_empe2_ch1_", 0x0A28);
    CW_IPInFCLRm[empe2_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe2_ch1]->name(), CW_IPInFCLRm_empe2_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe2_ch1_, "IPInREQm_empe2_ch1_", 0x0A30);
    CW_IPInREQm [empe2_ch1] = new scml2::bitfield<uint>(IPInREQm [empe2_ch1]->name(), CW_IPInREQm_empe2_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe2_ch1_, "IPInRCLRm_empe2_ch1_", 0x0A34);
    CW_IPInRCLRm[empe2_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe2_ch1]->name(), CW_IPInRCLRm_empe2_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe2_ch2_, "IPInENm_empe2_ch2_", 0x0A40);
    CW_IPInENm  [empe2_ch2] = new scml2::bitfield<uint>(IPInENm  [empe2_ch2]->name(), CW_IPInENm_empe2_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe2_ch2_, "IPInFLGm_empe2_ch2_", 0x0A44);
    CW_IPInFLGm [empe2_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe2_ch2]->name(), CW_IPInFLGm_empe2_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe2_ch2_, "IPInFCLRm_empe2_ch2_", 0x0A48);
    CW_IPInFCLRm[empe2_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe2_ch2]->name(), CW_IPInFCLRm_empe2_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe2_ch2_, "IPInREQm_empe2_ch2_", 0x0A50);
    CW_IPInREQm [empe2_ch2] = new scml2::bitfield<uint>(IPInREQm [empe2_ch2]->name(), CW_IPInREQm_empe2_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe2_ch2_, "IPInRCLRm_empe2_ch2_", 0x0A54);
    CW_IPInRCLRm[empe2_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe2_ch2]->name(), CW_IPInRCLRm_empe2_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe2_ch3_, "IPInENm_empe2_ch3_", 0x0A60);
    CW_IPInENm  [empe2_ch3] = new scml2::bitfield<uint>(IPInENm  [empe2_ch3]->name(), CW_IPInENm_empe2_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe2_ch3_, "IPInFLGm_empe2_ch3_", 0x0A64);
    CW_IPInFLGm [empe2_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe2_ch3]->name(), CW_IPInFLGm_empe2_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe2_ch3_, "IPInFCLRm_empe2_ch3_", 0x0A68);
    CW_IPInFCLRm[empe2_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe2_ch3]->name(), CW_IPInFCLRm_empe2_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe2_ch3_, "IPInREQm_empe2_ch3_", 0x0A70);
    CW_IPInREQm [empe2_ch3] = new scml2::bitfield<uint>(IPInREQm [empe2_ch3]->name(), CW_IPInREQm_empe2_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe2_ch3_, "IPInRCLRm_empe2_ch3_", 0x0A74);
    CW_IPInRCLRm[empe2_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe2_ch3]->name(), CW_IPInRCLRm_empe2_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe3_ch0_, "IPInENm_empe3_ch0_", 0x0B00);
    CW_IPInENm  [empe3_ch0] = new scml2::bitfield<uint>(IPInENm  [empe3_ch0]->name(), CW_IPInENm_empe3_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe3_ch0_, "IPInFLGm_empe3_ch0_", 0x0B04);
    CW_IPInFLGm [empe3_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe3_ch0]->name(), CW_IPInFLGm_empe3_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe3_ch0_, "IPInFCLRm_empe3_ch0_", 0x0B08);
    CW_IPInFCLRm[empe3_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe3_ch0]->name(), CW_IPInFCLRm_empe3_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe3_ch0_, "IPInREQm_empe3_ch0_", 0x0B10);
    CW_IPInREQm [empe3_ch0] = new scml2::bitfield<uint>(IPInREQm [empe3_ch0]->name(), CW_IPInREQm_empe3_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe3_ch0_, "IPInRCLRm_empe3_ch0_", 0x0B14);
    CW_IPInRCLRm[empe3_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe3_ch0]->name(), CW_IPInRCLRm_empe3_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe3_ch1_, "IPInENm_empe3_ch1_", 0x0B20);
    CW_IPInENm  [empe3_ch1] = new scml2::bitfield<uint>(IPInENm  [empe3_ch1]->name(), CW_IPInENm_empe3_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe3_ch1_, "IPInFLGm_empe3_ch1_", 0x0B24);
    CW_IPInFLGm [empe3_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe3_ch1]->name(), CW_IPInFLGm_empe3_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe3_ch1_, "IPInFCLRm_empe3_ch1_", 0x0B28);
    CW_IPInFCLRm[empe3_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe3_ch1]->name(), CW_IPInFCLRm_empe3_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe3_ch1_, "IPInREQm_empe3_ch1_", 0x0B30);
    CW_IPInREQm [empe3_ch1] = new scml2::bitfield<uint>(IPInREQm [empe3_ch1]->name(), CW_IPInREQm_empe3_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe3_ch1_, "IPInRCLRm_empe3_ch1_", 0x0B34);
    CW_IPInRCLRm[empe3_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe3_ch1]->name(), CW_IPInRCLRm_empe3_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe3_ch2_, "IPInENm_empe3_ch2_", 0x0B40);
    CW_IPInENm  [empe3_ch2] = new scml2::bitfield<uint>(IPInENm  [empe3_ch2]->name(), CW_IPInENm_empe3_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe3_ch2_, "IPInFLGm_empe3_ch2_", 0x0B44);
    CW_IPInFLGm [empe3_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe3_ch2]->name(), CW_IPInFLGm_empe3_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe3_ch2_, "IPInFCLRm_empe3_ch2_", 0x0B48);
    CW_IPInFCLRm[empe3_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe3_ch2]->name(), CW_IPInFCLRm_empe3_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe3_ch2_, "IPInREQm_empe3_ch2_", 0x0B50);
    CW_IPInREQm [empe3_ch2] = new scml2::bitfield<uint>(IPInREQm [empe3_ch2]->name(), CW_IPInREQm_empe3_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe3_ch2_, "IPInRCLRm_empe3_ch2_", 0x0B54);
    CW_IPInRCLRm[empe3_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe3_ch2]->name(), CW_IPInRCLRm_empe3_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe3_ch3_, "IPInENm_empe3_ch3_", 0x0B60);
    CW_IPInENm  [empe3_ch3] = new scml2::bitfield<uint>(IPInENm  [empe3_ch3]->name(), CW_IPInENm_empe3_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe3_ch3_, "IPInFLGm_empe3_ch3_", 0x0B64);
    CW_IPInFLGm [empe3_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe3_ch3]->name(), CW_IPInFLGm_empe3_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe3_ch3_, "IPInFCLRm_empe3_ch3_", 0x0B68);
    CW_IPInFCLRm[empe3_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe3_ch3]->name(), CW_IPInFCLRm_empe3_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe3_ch3_, "IPInREQm_empe3_ch3_", 0x0B70);
    CW_IPInREQm [empe3_ch3] = new scml2::bitfield<uint>(IPInREQm [empe3_ch3]->name(), CW_IPInREQm_empe3_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe3_ch3_, "IPInRCLRm_empe3_ch3_", 0x0B74);
    CW_IPInRCLRm[empe3_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe3_ch3]->name(), CW_IPInRCLRm_empe3_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe4_ch0_, "IPInENm_empe4_ch0_", 0x0C00);
    CW_IPInENm  [empe4_ch0] = new scml2::bitfield<uint>(IPInENm  [empe4_ch0]->name(), CW_IPInENm_empe4_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe4_ch0_, "IPInFLGm_empe4_ch0_", 0x0C04);
    CW_IPInFLGm [empe4_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe4_ch0]->name(), CW_IPInFLGm_empe4_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe4_ch0_, "IPInFCLRm_empe4_ch0_", 0x0C08);
    CW_IPInFCLRm[empe4_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe4_ch0]->name(), CW_IPInFCLRm_empe4_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe4_ch0_, "IPInREQm_empe4_ch0_", 0x0C10);
    CW_IPInREQm [empe4_ch0] = new scml2::bitfield<uint>(IPInREQm [empe4_ch0]->name(), CW_IPInREQm_empe4_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe4_ch0_, "IPInRCLRm_empe4_ch0_", 0x0C14);
    CW_IPInRCLRm[empe4_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe4_ch0]->name(), CW_IPInRCLRm_empe4_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe4_ch1_, "IPInENm_empe4_ch1_", 0x0C20);
    CW_IPInENm  [empe4_ch1] = new scml2::bitfield<uint>(IPInENm  [empe4_ch1]->name(), CW_IPInENm_empe4_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe4_ch1_, "IPInFLGm_empe4_ch1_", 0x0C24);
    CW_IPInFLGm [empe4_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe4_ch1]->name(), CW_IPInFLGm_empe4_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe4_ch1_, "IPInFCLRm_empe4_ch1_", 0x0C28);
    CW_IPInFCLRm[empe4_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe4_ch1]->name(), CW_IPInFCLRm_empe4_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe4_ch1_, "IPInREQm_empe4_ch1_", 0x0C30);
    CW_IPInREQm [empe4_ch1] = new scml2::bitfield<uint>(IPInREQm [empe4_ch1]->name(), CW_IPInREQm_empe4_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe4_ch1_, "IPInRCLRm_empe4_ch1_", 0x0C34);
    CW_IPInRCLRm[empe4_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe4_ch1]->name(), CW_IPInRCLRm_empe4_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe4_ch2_, "IPInENm_empe4_ch2_", 0x0C40);
    CW_IPInENm  [empe4_ch2] = new scml2::bitfield<uint>(IPInENm  [empe4_ch2]->name(), CW_IPInENm_empe4_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe4_ch2_, "IPInFLGm_empe4_ch2_", 0x0C44);
    CW_IPInFLGm [empe4_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe4_ch2]->name(), CW_IPInFLGm_empe4_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe4_ch2_, "IPInFCLRm_empe4_ch2_", 0x0C48);
    CW_IPInFCLRm[empe4_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe4_ch2]->name(), CW_IPInFCLRm_empe4_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe4_ch2_, "IPInREQm_empe4_ch2_", 0x0C50);
    CW_IPInREQm [empe4_ch2] = new scml2::bitfield<uint>(IPInREQm [empe4_ch2]->name(), CW_IPInREQm_empe4_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe4_ch2_, "IPInRCLRm_empe4_ch2_", 0x0C54);
    CW_IPInRCLRm[empe4_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe4_ch2]->name(), CW_IPInRCLRm_empe4_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe4_ch3_, "IPInENm_empe4_ch3_", 0x0C60);
    CW_IPInENm  [empe4_ch3] = new scml2::bitfield<uint>(IPInENm  [empe4_ch3]->name(), CW_IPInENm_empe4_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe4_ch3_, "IPInFLGm_empe4_ch3_", 0x0C64);
    CW_IPInFLGm [empe4_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe4_ch3]->name(), CW_IPInFLGm_empe4_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe4_ch3_, "IPInFCLRm_empe4_ch3_", 0x0C68);
    CW_IPInFCLRm[empe4_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe4_ch3]->name(), CW_IPInFCLRm_empe4_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe4_ch3_, "IPInREQm_empe4_ch3_", 0x0C70);
    CW_IPInREQm [empe4_ch3] = new scml2::bitfield<uint>(IPInREQm [empe4_ch3]->name(), CW_IPInREQm_empe4_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe4_ch3_, "IPInRCLRm_empe4_ch3_", 0x0C74);
    CW_IPInRCLRm[empe4_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe4_ch3]->name(), CW_IPInRCLRm_empe4_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe5_ch0_, "IPInENm_empe5_ch0_", 0x0D00);
    CW_IPInENm  [empe5_ch0] = new scml2::bitfield<uint>(IPInENm  [empe5_ch0]->name(), CW_IPInENm_empe5_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe5_ch0_, "IPInFLGm_empe5_ch0_", 0x0D04);
    CW_IPInFLGm [empe5_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe5_ch0]->name(), CW_IPInFLGm_empe5_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe5_ch0_, "IPInFCLRm_empe5_ch0_", 0x0D08);
    CW_IPInFCLRm[empe5_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe5_ch0]->name(), CW_IPInFCLRm_empe5_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe5_ch0_, "IPInREQm_empe5_ch0_", 0x0D10);
    CW_IPInREQm [empe5_ch0] = new scml2::bitfield<uint>(IPInREQm [empe5_ch0]->name(), CW_IPInREQm_empe5_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe5_ch0_, "IPInRCLRm_empe5_ch0_", 0x0D14);
    CW_IPInRCLRm[empe5_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe5_ch0]->name(), CW_IPInRCLRm_empe5_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe5_ch1_, "IPInENm_empe5_ch1_", 0x0D20);
    CW_IPInENm  [empe5_ch1] = new scml2::bitfield<uint>(IPInENm  [empe5_ch1]->name(), CW_IPInENm_empe5_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe5_ch1_, "IPInFLGm_empe5_ch1_", 0x0D24);
    CW_IPInFLGm [empe5_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe5_ch1]->name(), CW_IPInFLGm_empe5_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe5_ch1_, "IPInFCLRm_empe5_ch1_", 0x0D28);
    CW_IPInFCLRm[empe5_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe5_ch1]->name(), CW_IPInFCLRm_empe5_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe5_ch1_, "IPInREQm_empe5_ch1_", 0x0D30);
    CW_IPInREQm [empe5_ch1] = new scml2::bitfield<uint>(IPInREQm [empe5_ch1]->name(), CW_IPInREQm_empe5_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe5_ch1_, "IPInRCLRm_empe5_ch1_", 0x0D34);
    CW_IPInRCLRm[empe5_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe5_ch1]->name(), CW_IPInRCLRm_empe5_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe5_ch2_, "IPInENm_empe5_ch2_", 0x0D40);
    CW_IPInENm  [empe5_ch2] = new scml2::bitfield<uint>(IPInENm  [empe5_ch2]->name(), CW_IPInENm_empe5_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe5_ch2_, "IPInFLGm_empe5_ch2_", 0x0D44);
    CW_IPInFLGm [empe5_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe5_ch2]->name(), CW_IPInFLGm_empe5_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe5_ch2_, "IPInFCLRm_empe5_ch2_", 0x0D48);
    CW_IPInFCLRm[empe5_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe5_ch2]->name(), CW_IPInFCLRm_empe5_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe5_ch2_, "IPInREQm_empe5_ch2_", 0x0D50);
    CW_IPInREQm [empe5_ch2] = new scml2::bitfield<uint>(IPInREQm [empe5_ch2]->name(), CW_IPInREQm_empe5_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe5_ch2_, "IPInRCLRm_empe5_ch2_", 0x0D54);
    CW_IPInRCLRm[empe5_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe5_ch2]->name(), CW_IPInRCLRm_empe5_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe5_ch3_, "IPInENm_empe5_ch3_", 0x0D60);
    CW_IPInENm  [empe5_ch3] = new scml2::bitfield<uint>(IPInENm  [empe5_ch3]->name(), CW_IPInENm_empe5_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe5_ch3_, "IPInFLGm_empe5_ch3_", 0x0D64);
    CW_IPInFLGm [empe5_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe5_ch3]->name(), CW_IPInFLGm_empe5_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe5_ch3_, "IPInFCLRm_empe5_ch3_", 0x0D68);
    CW_IPInFCLRm[empe5_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe5_ch3]->name(), CW_IPInFCLRm_empe5_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe5_ch3_, "IPInREQm_empe5_ch3_", 0x0D70);
    CW_IPInREQm [empe5_ch3] = new scml2::bitfield<uint>(IPInREQm [empe5_ch3]->name(), CW_IPInREQm_empe5_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe5_ch3_, "IPInRCLRm_empe5_ch3_", 0x0D74);
    CW_IPInRCLRm[empe5_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe5_ch3]->name(), CW_IPInRCLRm_empe5_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe6_ch0_, "IPInENm_empe6_ch0_", 0x0E00);
    CW_IPInENm  [empe6_ch0] = new scml2::bitfield<uint>(IPInENm  [empe6_ch0]->name(), CW_IPInENm_empe6_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe6_ch0_, "IPInFLGm_empe6_ch0_", 0x0E04);
    CW_IPInFLGm [empe6_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe6_ch0]->name(), CW_IPInFLGm_empe6_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe6_ch0_, "IPInFCLRm_empe6_ch0_", 0x0E08);
    CW_IPInFCLRm[empe6_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe6_ch0]->name(), CW_IPInFCLRm_empe6_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe6_ch0_, "IPInREQm_empe6_ch0_", 0x0E10);
    CW_IPInREQm [empe6_ch0] = new scml2::bitfield<uint>(IPInREQm [empe6_ch0]->name(), CW_IPInREQm_empe6_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe6_ch0_, "IPInRCLRm_empe6_ch0_", 0x0E14);
    CW_IPInRCLRm[empe6_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe6_ch0]->name(), CW_IPInRCLRm_empe6_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe6_ch1_, "IPInENm_empe6_ch1_", 0x0E20);
    CW_IPInENm  [empe6_ch1] = new scml2::bitfield<uint>(IPInENm  [empe6_ch1]->name(), CW_IPInENm_empe6_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe6_ch1_, "IPInFLGm_empe6_ch1_", 0x0E24);
    CW_IPInFLGm [empe6_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe6_ch1]->name(), CW_IPInFLGm_empe6_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe6_ch1_, "IPInFCLRm_empe6_ch1_", 0x0E28);
    CW_IPInFCLRm[empe6_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe6_ch1]->name(), CW_IPInFCLRm_empe6_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe6_ch1_, "IPInREQm_empe6_ch1_", 0x0E30);
    CW_IPInREQm [empe6_ch1] = new scml2::bitfield<uint>(IPInREQm [empe6_ch1]->name(), CW_IPInREQm_empe6_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe6_ch1_, "IPInRCLRm_empe6_ch1_", 0x0E34);
    CW_IPInRCLRm[empe6_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe6_ch1]->name(), CW_IPInRCLRm_empe6_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe6_ch2_, "IPInENm_empe6_ch2_", 0x0E40);
    CW_IPInENm  [empe6_ch2] = new scml2::bitfield<uint>(IPInENm  [empe6_ch2]->name(), CW_IPInENm_empe6_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe6_ch2_, "IPInFLGm_empe6_ch2_", 0x0E44);
    CW_IPInFLGm [empe6_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe6_ch2]->name(), CW_IPInFLGm_empe6_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe6_ch2_, "IPInFCLRm_empe6_ch2_", 0x0E48);
    CW_IPInFCLRm[empe6_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe6_ch2]->name(), CW_IPInFCLRm_empe6_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe6_ch2_, "IPInREQm_empe6_ch2_", 0x0E50);
    CW_IPInREQm [empe6_ch2] = new scml2::bitfield<uint>(IPInREQm [empe6_ch2]->name(), CW_IPInREQm_empe6_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe6_ch2_, "IPInRCLRm_empe6_ch2_", 0x0E54);
    CW_IPInRCLRm[empe6_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe6_ch2]->name(), CW_IPInRCLRm_empe6_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe6_ch3_, "IPInENm_empe6_ch3_", 0x0E60);
    CW_IPInENm  [empe6_ch3] = new scml2::bitfield<uint>(IPInENm  [empe6_ch3]->name(), CW_IPInENm_empe6_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe6_ch3_, "IPInFLGm_empe6_ch3_", 0x0E64);
    CW_IPInFLGm [empe6_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe6_ch3]->name(), CW_IPInFLGm_empe6_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe6_ch3_, "IPInFCLRm_empe6_ch3_", 0x0E68);
    CW_IPInFCLRm[empe6_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe6_ch3]->name(), CW_IPInFCLRm_empe6_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe6_ch3_, "IPInREQm_empe6_ch3_", 0x0E70);
    CW_IPInREQm [empe6_ch3] = new scml2::bitfield<uint>(IPInREQm [empe6_ch3]->name(), CW_IPInREQm_empe6_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe6_ch3_, "IPInRCLRm_empe6_ch3_", 0x0E74);
    CW_IPInRCLRm[empe6_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe6_ch3]->name(), CW_IPInRCLRm_empe6_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe7_ch0_, "IPInENm_empe7_ch0_", 0x0F00);
    CW_IPInENm  [empe7_ch0] = new scml2::bitfield<uint>(IPInENm  [empe7_ch0]->name(), CW_IPInENm_empe7_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe7_ch0_, "IPInFLGm_empe7_ch0_", 0x0F04);
    CW_IPInFLGm [empe7_ch0] = new scml2::bitfield<uint>(IPInFLGm [empe7_ch0]->name(), CW_IPInFLGm_empe7_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe7_ch0_, "IPInFCLRm_empe7_ch0_", 0x0F08);
    CW_IPInFCLRm[empe7_ch0] = new scml2::bitfield<uint>(IPInFCLRm[empe7_ch0]->name(), CW_IPInFCLRm_empe7_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe7_ch0_, "IPInREQm_empe7_ch0_", 0x0F10);
    CW_IPInREQm [empe7_ch0] = new scml2::bitfield<uint>(IPInREQm [empe7_ch0]->name(), CW_IPInREQm_empe7_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe7_ch0_, "IPInRCLRm_empe7_ch0_", 0x0F14);
    CW_IPInRCLRm[empe7_ch0] = new scml2::bitfield<uint>(IPInRCLRm[empe7_ch0]->name(), CW_IPInRCLRm_empe7_ch0_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe7_ch1_, "IPInENm_empe7_ch1_", 0x0F20);
    CW_IPInENm  [empe7_ch1] = new scml2::bitfield<uint>(IPInENm  [empe7_ch1]->name(), CW_IPInENm_empe7_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe7_ch1_, "IPInFLGm_empe7_ch1_", 0x0F24);
    CW_IPInFLGm [empe7_ch1] = new scml2::bitfield<uint>(IPInFLGm [empe7_ch1]->name(), CW_IPInFLGm_empe7_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe7_ch1_, "IPInFCLRm_empe7_ch1_", 0x0F28);
    CW_IPInFCLRm[empe7_ch1] = new scml2::bitfield<uint>(IPInFCLRm[empe7_ch1]->name(), CW_IPInFCLRm_empe7_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe7_ch1_, "IPInREQm_empe7_ch1_", 0x0F30);
    CW_IPInREQm [empe7_ch1] = new scml2::bitfield<uint>(IPInREQm [empe7_ch1]->name(), CW_IPInREQm_empe7_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe7_ch1_, "IPInRCLRm_empe7_ch1_", 0x0F34);
    CW_IPInRCLRm[empe7_ch1] = new scml2::bitfield<uint>(IPInRCLRm[empe7_ch1]->name(), CW_IPInRCLRm_empe7_ch1_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe7_ch2_, "IPInENm_empe7_ch2_", 0x0F40);
    CW_IPInENm  [empe7_ch2] = new scml2::bitfield<uint>(IPInENm  [empe7_ch2]->name(), CW_IPInENm_empe7_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe7_ch2_, "IPInFLGm_empe7_ch2_", 0x0F44);
    CW_IPInFLGm [empe7_ch2] = new scml2::bitfield<uint>(IPInFLGm [empe7_ch2]->name(), CW_IPInFLGm_empe7_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe7_ch2_, "IPInFCLRm_empe7_ch2_", 0x0F48);
    CW_IPInFCLRm[empe7_ch2] = new scml2::bitfield<uint>(IPInFCLRm[empe7_ch2]->name(), CW_IPInFCLRm_empe7_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe7_ch2_, "IPInREQm_empe7_ch2_", 0x0F50);
    CW_IPInREQm [empe7_ch2] = new scml2::bitfield<uint>(IPInREQm [empe7_ch2]->name(), CW_IPInREQm_empe7_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe7_ch2_, "IPInRCLRm_empe7_ch2_", 0x0F54);
    CW_IPInRCLRm[empe7_ch2] = new scml2::bitfield<uint>(IPInRCLRm[empe7_ch2]->name(), CW_IPInRCLRm_empe7_ch2_,  0,  8);
    cw_instantiate_reg(CW_IPInENm_empe7_ch3_, "IPInENm_empe7_ch3_", 0x0F60);
    CW_IPInENm  [empe7_ch3] = new scml2::bitfield<uint>(IPInENm  [empe7_ch3]->name(), CW_IPInENm_empe7_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFLGm_empe7_ch3_, "IPInFLGm_empe7_ch3_", 0x0F64);
    CW_IPInFLGm [empe7_ch3] = new scml2::bitfield<uint>(IPInFLGm [empe7_ch3]->name(), CW_IPInFLGm_empe7_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInFCLRm_empe7_ch3_, "IPInFCLRm_empe7_ch3_", 0x0F68);
    CW_IPInFCLRm[empe7_ch3] = new scml2::bitfield<uint>(IPInFCLRm[empe7_ch3]->name(), CW_IPInFCLRm_empe7_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInREQm_empe7_ch3_, "IPInREQm_empe7_ch3_", 0x0F70);
    CW_IPInREQm [empe7_ch3] = new scml2::bitfield<uint>(IPInREQm [empe7_ch3]->name(), CW_IPInREQm_empe7_ch3_,  0,  8);
    cw_instantiate_reg(CW_IPInRCLRm_empe7_ch3_, "IPInRCLRm_empe7_ch3_", 0x0F74);
    CW_IPInRCLRm[empe7_ch3] = new scml2::bitfield<uint>(IPInRCLRm[empe7_ch3]->name(), CW_IPInRCLRm_empe7_ch3_,  0,  8);
    #endif
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe0_ch0], mCurReg, empe0_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe0_ch0], mCurReg, empe0_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe0_ch0], mCurReg, empe0_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe0_ch0], mCurReg, empe0_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe0_ch0], mCurReg, empe0_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe0_ch1], mCurReg, empe0_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe0_ch1], mCurReg, empe0_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe0_ch1], mCurReg, empe0_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe0_ch1], mCurReg, empe0_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe0_ch1], mCurReg, empe0_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe0_ch2], mCurReg, empe0_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe0_ch2], mCurReg, empe0_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe0_ch2], mCurReg, empe0_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe0_ch2], mCurReg, empe0_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe0_ch2], mCurReg, empe0_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe0_ch3], mCurReg, empe0_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe0_ch3], mCurReg, empe0_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe0_ch3], mCurReg, empe0_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe0_ch3], mCurReg, empe0_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe0_ch3], mCurReg, empe0_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe1_ch0], mCurReg, empe1_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe1_ch0], mCurReg, empe1_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe1_ch0], mCurReg, empe1_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe1_ch0], mCurReg, empe1_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe1_ch0], mCurReg, empe1_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe1_ch1], mCurReg, empe1_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe1_ch1], mCurReg, empe1_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe1_ch1], mCurReg, empe1_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe1_ch1], mCurReg, empe1_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe1_ch1], mCurReg, empe1_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe1_ch2], mCurReg, empe1_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe1_ch2], mCurReg, empe1_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe1_ch2], mCurReg, empe1_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe1_ch2], mCurReg, empe1_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe1_ch2], mCurReg, empe1_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe1_ch3], mCurReg, empe1_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe1_ch3], mCurReg, empe1_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe1_ch3], mCurReg, empe1_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe1_ch3], mCurReg, empe1_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe1_ch3], mCurReg, empe1_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe2_ch0], mCurReg, empe2_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe2_ch0], mCurReg, empe2_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe2_ch0], mCurReg, empe2_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe2_ch0], mCurReg, empe2_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe2_ch0], mCurReg, empe2_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe2_ch1], mCurReg, empe2_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe2_ch1], mCurReg, empe2_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe2_ch1], mCurReg, empe2_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe2_ch1], mCurReg, empe2_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe2_ch1], mCurReg, empe2_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe2_ch2], mCurReg, empe2_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe2_ch2], mCurReg, empe2_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe2_ch2], mCurReg, empe2_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe2_ch2], mCurReg, empe2_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe2_ch2], mCurReg, empe2_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe2_ch3], mCurReg, empe2_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe2_ch3], mCurReg, empe2_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe2_ch3], mCurReg, empe2_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe2_ch3], mCurReg, empe2_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe2_ch3], mCurReg, empe2_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe3_ch0], mCurReg, empe3_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe3_ch0], mCurReg, empe3_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe3_ch0], mCurReg, empe3_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe3_ch0], mCurReg, empe3_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe3_ch0], mCurReg, empe3_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe3_ch1], mCurReg, empe3_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe3_ch1], mCurReg, empe3_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe3_ch1], mCurReg, empe3_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe3_ch1], mCurReg, empe3_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe3_ch1], mCurReg, empe3_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe3_ch2], mCurReg, empe3_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe3_ch2], mCurReg, empe3_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe3_ch2], mCurReg, empe3_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe3_ch2], mCurReg, empe3_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe3_ch2], mCurReg, empe3_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe3_ch3], mCurReg, empe3_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe3_ch3], mCurReg, empe3_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe3_ch3], mCurReg, empe3_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe3_ch3], mCurReg, empe3_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe3_ch3], mCurReg, empe3_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe4_ch0], mCurReg, empe4_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe4_ch0], mCurReg, empe4_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe4_ch0], mCurReg, empe4_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe4_ch0], mCurReg, empe4_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe4_ch0], mCurReg, empe4_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe4_ch1], mCurReg, empe4_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe4_ch1], mCurReg, empe4_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe4_ch1], mCurReg, empe4_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe4_ch1], mCurReg, empe4_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe4_ch1], mCurReg, empe4_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe4_ch2], mCurReg, empe4_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe4_ch2], mCurReg, empe4_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe4_ch2], mCurReg, empe4_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe4_ch2], mCurReg, empe4_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe4_ch2], mCurReg, empe4_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe4_ch3], mCurReg, empe4_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe4_ch3], mCurReg, empe4_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe4_ch3], mCurReg, empe4_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe4_ch3], mCurReg, empe4_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe4_ch3], mCurReg, empe4_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe5_ch0], mCurReg, empe5_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe5_ch0], mCurReg, empe5_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe5_ch0], mCurReg, empe5_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe5_ch0], mCurReg, empe5_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe5_ch0], mCurReg, empe5_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe5_ch1], mCurReg, empe5_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe5_ch1], mCurReg, empe5_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe5_ch1], mCurReg, empe5_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe5_ch1], mCurReg, empe5_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe5_ch1], mCurReg, empe5_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe5_ch2], mCurReg, empe5_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe5_ch2], mCurReg, empe5_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe5_ch2], mCurReg, empe5_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe5_ch2], mCurReg, empe5_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe5_ch2], mCurReg, empe5_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe5_ch3], mCurReg, empe5_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe5_ch3], mCurReg, empe5_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe5_ch3], mCurReg, empe5_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe5_ch3], mCurReg, empe5_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe5_ch3], mCurReg, empe5_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe6_ch0], mCurReg, empe6_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe6_ch0], mCurReg, empe6_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe6_ch0], mCurReg, empe6_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe6_ch0], mCurReg, empe6_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe6_ch0], mCurReg, empe6_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe6_ch1], mCurReg, empe6_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe6_ch1], mCurReg, empe6_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe6_ch1], mCurReg, empe6_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe6_ch1], mCurReg, empe6_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe6_ch1], mCurReg, empe6_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe6_ch2], mCurReg, empe6_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe6_ch2], mCurReg, empe6_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe6_ch2], mCurReg, empe6_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe6_ch2], mCurReg, empe6_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe6_ch2], mCurReg, empe6_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe6_ch3], mCurReg, empe6_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe6_ch3], mCurReg, empe6_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe6_ch3], mCurReg, empe6_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe6_ch3], mCurReg, empe6_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe6_ch3], mCurReg, empe6_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe7_ch0], mCurReg, empe7_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe7_ch0], mCurReg, empe7_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe7_ch0], mCurReg, empe7_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe7_ch0], mCurReg, empe7_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe7_ch0], mCurReg, empe7_ch0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe7_ch1], mCurReg, empe7_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe7_ch1], mCurReg, empe7_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe7_ch1], mCurReg, empe7_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe7_ch1], mCurReg, empe7_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe7_ch1], mCurReg, empe7_ch1,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe7_ch2], mCurReg, empe7_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe7_ch2], mCurReg, empe7_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe7_ch2], mCurReg, empe7_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe7_ch2], mCurReg, empe7_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe7_ch2], mCurReg, empe7_ch2,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInENm  [empe7_ch3], mCurReg, empe7_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFLGm [empe7_ch3], mCurReg, empe7_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInFCLRm[empe7_ch3], mCurReg, empe7_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInREQm [empe7_ch3], mCurReg, empe7_ch3,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPInRCLRm[empe7_ch3], mCurReg, empe7_ch3,  1, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*IPInENm  [empe0_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe0_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe0_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe0_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe0_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe0_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe0_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe0_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe0_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe0_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe0_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe0_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe0_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe0_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe0_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe0_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe0_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe0_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe0_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe0_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe1_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe1_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe1_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe1_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe1_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe1_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe1_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe1_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe1_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe1_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe1_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe1_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe1_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe1_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe1_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe1_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe1_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe1_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe1_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe1_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe2_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe2_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe2_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe2_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe2_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe2_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe2_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe2_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe2_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe2_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe2_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe2_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe2_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe2_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe2_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe2_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe2_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe2_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe2_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe2_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe3_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe3_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe3_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe3_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe3_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe3_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe3_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe3_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe3_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe3_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe3_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe3_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe3_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe3_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe3_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe3_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe3_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe3_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe3_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe3_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe4_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe4_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe4_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe4_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe4_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe4_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe4_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe4_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe4_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe4_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe4_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe4_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe4_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe4_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe4_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe4_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe4_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe4_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe4_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe4_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe5_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe5_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe5_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe5_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe5_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe5_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe5_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe5_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe5_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe5_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe5_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe5_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe5_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe5_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe5_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe5_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe5_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe5_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe5_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe5_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe6_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe6_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe6_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe6_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe6_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe6_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe6_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe6_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe6_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe6_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe6_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe6_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe6_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe6_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe6_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe6_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe6_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe6_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe6_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe6_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe7_ch0]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe7_ch0]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe7_ch0]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe7_ch0]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe7_ch0]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe7_ch1]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe7_ch1]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe7_ch1]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe7_ch1]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe7_ch1]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe7_ch2]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe7_ch2]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe7_ch2]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe7_ch2]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe7_ch2]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInENm  [empe7_ch3]) ( 7,  0, "IPInENm" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInFLGm [empe7_ch3]) ( 7,  0, "IPInFLGm", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPInFCLRm[empe7_ch3]) ( 7,  0, "IPInFCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*IPInREQm [empe7_ch3]) ( 7,  0, "IPInREQm", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*IPInRCLRm[empe7_ch3]) ( 7,  0, "IPInRCLRm", 0x0       , "W"     , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["IPInFCLRm_pe0_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe0_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe0_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe0_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe0_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe0_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe0_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe0_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe0_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe0_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe0_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe0_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe1_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe1_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe1_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe1_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe1_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe1_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe1_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe1_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe1_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe1_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe1_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe1_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe2_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe2_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe2_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe2_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe2_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe2_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe2_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe2_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe2_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe2_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe2_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe2_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe3_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe3_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe3_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe3_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe3_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe3_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe3_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe3_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe3_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe3_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe3_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe3_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe4_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe4_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe4_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe4_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe4_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe4_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe4_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe4_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe4_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe4_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe4_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe4_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe5_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe5_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe5_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe5_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe5_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe5_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe5_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe5_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe5_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe5_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe5_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe5_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe6_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe6_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe6_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe6_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe6_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe6_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe6_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe6_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe6_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe6_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe6_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe6_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe7_ch0"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe7_ch0"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe7_ch0"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe7_ch1"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe7_ch1"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe7_ch1"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe7_ch2"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe7_ch2"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe7_ch2"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    mWrCbAPI["IPInFCLRm_pe7_ch3"]["IPInFCLRm"] = &Cg4_ipir_regif::cb_IPInFCLRm_IPInFCLRm;
    mWrCbAPI["IPInREQm_pe7_ch3"]["IPInREQm"] = &Cg4_ipir_regif::cb_IPInREQm_IPInREQm;
    mWrCbAPI["IPInRCLRm_pe7_ch3"]["IPInRCLRm"] = &Cg4_ipir_regif::cb_IPInRCLRm_IPInRCLRm;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cg4_ipir_regif::~Cg4_ipir_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cg4_ipir_regif::uint Cg4_ipir_regif::bit_select(
                            cuint val,    ///< [in] Writting address
                            cuint start,  ///< [in] start bit position
                            cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cg4_ipir_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cg4_ipir_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cg4_ipir_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cg4_ipir_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cg4_ipir_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                    const unsigned char *p_data,  ///< [in] Writing data
                                    cuint size,                   ///< [in] Data size (byte)
                                    bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cg4_ipir_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size,              ///< [in]  Data size (byte)
                                    bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cg4_ipir_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                 unsigned char *p_data,          ///< [out] Reading data
                                 cuint size,                     ///< [in]  Data size (byte)
                                 cuint reg_index,                ///< [in] Register index
                                 bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cg4_ipir_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                 const unsigned char *p_data,      ///< [in] Writing data
                                 cuint size,                       ///< [in] Data size (byte)
                                 cuint reg_index,                  ///< [in] Register index
                                 bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cg4_ipir_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cg4_ipir_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cg4_ipir_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cg4_ipir_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cg4_ipir_regif::InitLocalVal()
{
    // Initialize local variables
    IPInENm_IPInENm_empe0_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe0_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe0_ch0 = 0x0;
    IPInREQm_IPInREQm_empe0_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe0_ch0 = 0x0;
    IPInENm_IPInENm_empe0_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe0_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe0_ch1 = 0x0;
    IPInREQm_IPInREQm_empe0_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe0_ch1 = 0x0;
    IPInENm_IPInENm_empe0_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe0_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe0_ch2 = 0x0;
    IPInREQm_IPInREQm_empe0_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe0_ch2 = 0x0;
    IPInENm_IPInENm_empe0_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe0_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe0_ch3 = 0x0;
    IPInREQm_IPInREQm_empe0_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe0_ch3 = 0x0;
    IPInENm_IPInENm_empe1_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe1_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe1_ch0 = 0x0;
    IPInREQm_IPInREQm_empe1_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe1_ch0 = 0x0;
    IPInENm_IPInENm_empe1_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe1_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe1_ch1 = 0x0;
    IPInREQm_IPInREQm_empe1_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe1_ch1 = 0x0;
    IPInENm_IPInENm_empe1_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe1_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe1_ch2 = 0x0;
    IPInREQm_IPInREQm_empe1_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe1_ch2 = 0x0;
    IPInENm_IPInENm_empe1_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe1_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe1_ch3 = 0x0;
    IPInREQm_IPInREQm_empe1_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe1_ch3 = 0x0;
    IPInENm_IPInENm_empe2_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe2_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe2_ch0 = 0x0;
    IPInREQm_IPInREQm_empe2_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe2_ch0 = 0x0;
    IPInENm_IPInENm_empe2_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe2_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe2_ch1 = 0x0;
    IPInREQm_IPInREQm_empe2_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe2_ch1 = 0x0;
    IPInENm_IPInENm_empe2_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe2_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe2_ch2 = 0x0;
    IPInREQm_IPInREQm_empe2_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe2_ch2 = 0x0;
    IPInENm_IPInENm_empe2_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe2_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe2_ch3 = 0x0;
    IPInREQm_IPInREQm_empe2_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe2_ch3 = 0x0;
    IPInENm_IPInENm_empe3_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe3_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe3_ch0 = 0x0;
    IPInREQm_IPInREQm_empe3_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe3_ch0 = 0x0;
    IPInENm_IPInENm_empe3_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe3_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe3_ch1 = 0x0;
    IPInREQm_IPInREQm_empe3_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe3_ch1 = 0x0;
    IPInENm_IPInENm_empe3_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe3_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe3_ch2 = 0x0;
    IPInREQm_IPInREQm_empe3_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe3_ch2 = 0x0;
    IPInENm_IPInENm_empe3_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe3_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe3_ch3 = 0x0;
    IPInREQm_IPInREQm_empe3_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe3_ch3 = 0x0;
    IPInENm_IPInENm_empe4_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe4_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe4_ch0 = 0x0;
    IPInREQm_IPInREQm_empe4_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe4_ch0 = 0x0;
    IPInENm_IPInENm_empe4_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe4_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe4_ch1 = 0x0;
    IPInREQm_IPInREQm_empe4_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe4_ch1 = 0x0;
    IPInENm_IPInENm_empe4_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe4_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe4_ch2 = 0x0;
    IPInREQm_IPInREQm_empe4_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe4_ch2 = 0x0;
    IPInENm_IPInENm_empe4_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe4_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe4_ch3 = 0x0;
    IPInREQm_IPInREQm_empe4_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe4_ch3 = 0x0;
    IPInENm_IPInENm_empe5_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe5_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe5_ch0 = 0x0;
    IPInREQm_IPInREQm_empe5_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe5_ch0 = 0x0;
    IPInENm_IPInENm_empe5_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe5_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe5_ch1 = 0x0;
    IPInREQm_IPInREQm_empe5_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe5_ch1 = 0x0;
    IPInENm_IPInENm_empe5_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe5_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe5_ch2 = 0x0;
    IPInREQm_IPInREQm_empe5_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe5_ch2 = 0x0;
    IPInENm_IPInENm_empe5_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe5_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe5_ch3 = 0x0;
    IPInREQm_IPInREQm_empe5_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe5_ch3 = 0x0;
    IPInENm_IPInENm_empe6_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe6_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe6_ch0 = 0x0;
    IPInREQm_IPInREQm_empe6_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe6_ch0 = 0x0;
    IPInENm_IPInENm_empe6_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe6_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe6_ch1 = 0x0;
    IPInREQm_IPInREQm_empe6_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe6_ch1 = 0x0;
    IPInENm_IPInENm_empe6_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe6_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe6_ch2 = 0x0;
    IPInREQm_IPInREQm_empe6_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe6_ch2 = 0x0;
    IPInENm_IPInENm_empe6_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe6_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe6_ch3 = 0x0;
    IPInREQm_IPInREQm_empe6_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe6_ch3 = 0x0;
    IPInENm_IPInENm_empe7_ch0 = 0x0;
    IPInFLGm_IPInFLGm_empe7_ch0 = 0x0;
    IPInFCLRm_IPInFCLRm_empe7_ch0 = 0x0;
    IPInREQm_IPInREQm_empe7_ch0 = 0x0;
    IPInRCLRm_IPInRCLRm_empe7_ch0 = 0x0;
    IPInENm_IPInENm_empe7_ch1 = 0x0;
    IPInFLGm_IPInFLGm_empe7_ch1 = 0x0;
    IPInFCLRm_IPInFCLRm_empe7_ch1 = 0x0;
    IPInREQm_IPInREQm_empe7_ch1 = 0x0;
    IPInRCLRm_IPInRCLRm_empe7_ch1 = 0x0;
    IPInENm_IPInENm_empe7_ch2 = 0x0;
    IPInFLGm_IPInFLGm_empe7_ch2 = 0x0;
    IPInFCLRm_IPInFCLRm_empe7_ch2 = 0x0;
    IPInREQm_IPInREQm_empe7_ch2 = 0x0;
    IPInRCLRm_IPInRCLRm_empe7_ch2 = 0x0;
    IPInENm_IPInENm_empe7_ch3 = 0x0;
    IPInFLGm_IPInFLGm_empe7_ch3 = 0x0;
    IPInFCLRm_IPInFCLRm_empe7_ch3 = 0x0;
    IPInREQm_IPInREQm_empe7_ch3 = 0x0;
    IPInRCLRm_IPInRCLRm_empe7_ch3 = 0x0;
}

/// Update bit value to local value
/// @return None
void Cg4_ipir_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0800) {
        IPInENm_IPInENm_empe0_ch0     = (*IPInENm  [empe0_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0804) {
        IPInFLGm_IPInFLGm_empe0_ch0   = (*IPInFLGm [empe0_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0808) {
        IPInFCLRm_IPInFCLRm_empe0_ch0 = (*IPInFCLRm[empe0_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0810) {
        IPInREQm_IPInREQm_empe0_ch0   = (*IPInREQm [empe0_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0814) {
        IPInRCLRm_IPInRCLRm_empe0_ch0 = (*IPInRCLRm[empe0_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0820) {
        IPInENm_IPInENm_empe0_ch1     = (*IPInENm  [empe0_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0824) {
        IPInFLGm_IPInFLGm_empe0_ch1   = (*IPInFLGm [empe0_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0828) {
        IPInFCLRm_IPInFCLRm_empe0_ch1 = (*IPInFCLRm[empe0_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0830) {
        IPInREQm_IPInREQm_empe0_ch1   = (*IPInREQm [empe0_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0834) {
        IPInRCLRm_IPInRCLRm_empe0_ch1 = (*IPInRCLRm[empe0_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0840) {
        IPInENm_IPInENm_empe0_ch2     = (*IPInENm  [empe0_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0844) {
        IPInFLGm_IPInFLGm_empe0_ch2   = (*IPInFLGm [empe0_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0848) {
        IPInFCLRm_IPInFCLRm_empe0_ch2 = (*IPInFCLRm[empe0_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0850) {
        IPInREQm_IPInREQm_empe0_ch2   = (*IPInREQm [empe0_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0854) {
        IPInRCLRm_IPInRCLRm_empe0_ch2 = (*IPInRCLRm[empe0_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0860) {
        IPInENm_IPInENm_empe0_ch3     = (*IPInENm  [empe0_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0864) {
        IPInFLGm_IPInFLGm_empe0_ch3   = (*IPInFLGm [empe0_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0868) {
        IPInFCLRm_IPInFCLRm_empe0_ch3 = (*IPInFCLRm[empe0_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0870) {
        IPInREQm_IPInREQm_empe0_ch3   = (*IPInREQm [empe0_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0874) {
        IPInRCLRm_IPInRCLRm_empe0_ch3 = (*IPInRCLRm[empe0_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0900) {
        IPInENm_IPInENm_empe1_ch0     = (*IPInENm  [empe1_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0904) {
        IPInFLGm_IPInFLGm_empe1_ch0   = (*IPInFLGm [empe1_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0908) {
        IPInFCLRm_IPInFCLRm_empe1_ch0 = (*IPInFCLRm[empe1_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0910) {
        IPInREQm_IPInREQm_empe1_ch0   = (*IPInREQm [empe1_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0914) {
        IPInRCLRm_IPInRCLRm_empe1_ch0 = (*IPInRCLRm[empe1_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0920) {
        IPInENm_IPInENm_empe1_ch1     = (*IPInENm  [empe1_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0924) {
        IPInFLGm_IPInFLGm_empe1_ch1   = (*IPInFLGm [empe1_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0928) {
        IPInFCLRm_IPInFCLRm_empe1_ch1 = (*IPInFCLRm[empe1_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0930) {
        IPInREQm_IPInREQm_empe1_ch1   = (*IPInREQm [empe1_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0934) {
        IPInRCLRm_IPInRCLRm_empe1_ch1 = (*IPInRCLRm[empe1_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0940) {
        IPInENm_IPInENm_empe1_ch2     = (*IPInENm  [empe1_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0944) {
        IPInFLGm_IPInFLGm_empe1_ch2   = (*IPInFLGm [empe1_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0948) {
        IPInFCLRm_IPInFCLRm_empe1_ch2 = (*IPInFCLRm[empe1_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0950) {
        IPInREQm_IPInREQm_empe1_ch2   = (*IPInREQm [empe1_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0954) {
        IPInRCLRm_IPInRCLRm_empe1_ch2 = (*IPInRCLRm[empe1_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0960) {
        IPInENm_IPInENm_empe1_ch3     = (*IPInENm  [empe1_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0964) {
        IPInFLGm_IPInFLGm_empe1_ch3   = (*IPInFLGm [empe1_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0968) {
        IPInFCLRm_IPInFCLRm_empe1_ch3 = (*IPInFCLRm[empe1_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0970) {
        IPInREQm_IPInREQm_empe1_ch3   = (*IPInREQm [empe1_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0974) {
        IPInRCLRm_IPInRCLRm_empe1_ch3 = (*IPInRCLRm[empe1_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0A00) {
        IPInENm_IPInENm_empe2_ch0     = (*IPInENm  [empe2_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0A04) {
        IPInFLGm_IPInFLGm_empe2_ch0   = (*IPInFLGm [empe2_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0A08) {
        IPInFCLRm_IPInFCLRm_empe2_ch0 = (*IPInFCLRm[empe2_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0A10) {
        IPInREQm_IPInREQm_empe2_ch0   = (*IPInREQm [empe2_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0A14) {
        IPInRCLRm_IPInRCLRm_empe2_ch0 = (*IPInRCLRm[empe2_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0A20) {
        IPInENm_IPInENm_empe2_ch1     = (*IPInENm  [empe2_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0A24) {
        IPInFLGm_IPInFLGm_empe2_ch1   = (*IPInFLGm [empe2_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0A28) {
        IPInFCLRm_IPInFCLRm_empe2_ch1 = (*IPInFCLRm[empe2_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0A30) {
        IPInREQm_IPInREQm_empe2_ch1   = (*IPInREQm [empe2_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0A34) {
        IPInRCLRm_IPInRCLRm_empe2_ch1 = (*IPInRCLRm[empe2_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0A40) {
        IPInENm_IPInENm_empe2_ch2     = (*IPInENm  [empe2_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0A44) {
        IPInFLGm_IPInFLGm_empe2_ch2   = (*IPInFLGm [empe2_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0A48) {
        IPInFCLRm_IPInFCLRm_empe2_ch2 = (*IPInFCLRm[empe2_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0A50) {
        IPInREQm_IPInREQm_empe2_ch2   = (*IPInREQm [empe2_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0A54) {
        IPInRCLRm_IPInRCLRm_empe2_ch2 = (*IPInRCLRm[empe2_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0A60) {
        IPInENm_IPInENm_empe2_ch3     = (*IPInENm  [empe2_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0A64) {
        IPInFLGm_IPInFLGm_empe2_ch3   = (*IPInFLGm [empe2_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0A68) {
        IPInFCLRm_IPInFCLRm_empe2_ch3 = (*IPInFCLRm[empe2_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0A70) {
        IPInREQm_IPInREQm_empe2_ch3   = (*IPInREQm [empe2_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0A74) {
        IPInRCLRm_IPInRCLRm_empe2_ch3 = (*IPInRCLRm[empe2_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0B00) {
        IPInENm_IPInENm_empe3_ch0     = (*IPInENm  [empe3_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0B04) {
        IPInFLGm_IPInFLGm_empe3_ch0   = (*IPInFLGm [empe3_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0B08) {
        IPInFCLRm_IPInFCLRm_empe3_ch0 = (*IPInFCLRm[empe3_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0B10) {
        IPInREQm_IPInREQm_empe3_ch0   = (*IPInREQm [empe3_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0B14) {
        IPInRCLRm_IPInRCLRm_empe3_ch0 = (*IPInRCLRm[empe3_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0B20) {
        IPInENm_IPInENm_empe3_ch1     = (*IPInENm  [empe3_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0B24) {
        IPInFLGm_IPInFLGm_empe3_ch1   = (*IPInFLGm [empe3_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0B28) {
        IPInFCLRm_IPInFCLRm_empe3_ch1 = (*IPInFCLRm[empe3_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0B30) {
        IPInREQm_IPInREQm_empe3_ch1   = (*IPInREQm [empe3_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0B34) {
        IPInRCLRm_IPInRCLRm_empe3_ch1 = (*IPInRCLRm[empe3_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0B40) {
        IPInENm_IPInENm_empe3_ch2     = (*IPInENm  [empe3_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0B44) {
        IPInFLGm_IPInFLGm_empe3_ch2   = (*IPInFLGm [empe3_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0B48) {
        IPInFCLRm_IPInFCLRm_empe3_ch2 = (*IPInFCLRm[empe3_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0B50) {
        IPInREQm_IPInREQm_empe3_ch2   = (*IPInREQm [empe3_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0B54) {
        IPInRCLRm_IPInRCLRm_empe3_ch2 = (*IPInRCLRm[empe3_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0B60) {
        IPInENm_IPInENm_empe3_ch3     = (*IPInENm  [empe3_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0B64) {
        IPInFLGm_IPInFLGm_empe3_ch3   = (*IPInFLGm [empe3_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0B68) {
        IPInFCLRm_IPInFCLRm_empe3_ch3 = (*IPInFCLRm[empe3_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0B70) {
        IPInREQm_IPInREQm_empe3_ch3   = (*IPInREQm [empe3_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0B74) {
        IPInRCLRm_IPInRCLRm_empe3_ch3 = (*IPInRCLRm[empe3_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0C00) {
        IPInENm_IPInENm_empe4_ch0     = (*IPInENm  [empe4_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0C04) {
        IPInFLGm_IPInFLGm_empe4_ch0   = (*IPInFLGm [empe4_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0C08) {
        IPInFCLRm_IPInFCLRm_empe4_ch0 = (*IPInFCLRm[empe4_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0C10) {
        IPInREQm_IPInREQm_empe4_ch0   = (*IPInREQm [empe4_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0C14) {
        IPInRCLRm_IPInRCLRm_empe4_ch0 = (*IPInRCLRm[empe4_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0C20) {
        IPInENm_IPInENm_empe4_ch1     = (*IPInENm  [empe4_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0C24) {
        IPInFLGm_IPInFLGm_empe4_ch1   = (*IPInFLGm [empe4_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0C28) {
        IPInFCLRm_IPInFCLRm_empe4_ch1 = (*IPInFCLRm[empe4_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0C30) {
        IPInREQm_IPInREQm_empe4_ch1   = (*IPInREQm [empe4_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0C34) {
        IPInRCLRm_IPInRCLRm_empe4_ch1 = (*IPInRCLRm[empe4_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0C40) {
        IPInENm_IPInENm_empe4_ch2     = (*IPInENm  [empe4_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0C44) {
        IPInFLGm_IPInFLGm_empe4_ch2   = (*IPInFLGm [empe4_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0C48) {
        IPInFCLRm_IPInFCLRm_empe4_ch2 = (*IPInFCLRm[empe4_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0C50) {
        IPInREQm_IPInREQm_empe4_ch2   = (*IPInREQm [empe4_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0C54) {
        IPInRCLRm_IPInRCLRm_empe4_ch2 = (*IPInRCLRm[empe4_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0C60) {
        IPInENm_IPInENm_empe4_ch3     = (*IPInENm  [empe4_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0C64) {
        IPInFLGm_IPInFLGm_empe4_ch3   = (*IPInFLGm [empe4_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0C68) {
        IPInFCLRm_IPInFCLRm_empe4_ch3 = (*IPInFCLRm[empe4_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0C70) {
        IPInREQm_IPInREQm_empe4_ch3   = (*IPInREQm [empe4_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0C74) {
        IPInRCLRm_IPInRCLRm_empe4_ch3 = (*IPInRCLRm[empe4_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0D00) {
        IPInENm_IPInENm_empe5_ch0     = (*IPInENm  [empe5_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0D04) {
        IPInFLGm_IPInFLGm_empe5_ch0   = (*IPInFLGm [empe5_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0D08) {
        IPInFCLRm_IPInFCLRm_empe5_ch0 = (*IPInFCLRm[empe5_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0D10) {
        IPInREQm_IPInREQm_empe5_ch0   = (*IPInREQm [empe5_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0D14) {
        IPInRCLRm_IPInRCLRm_empe5_ch0 = (*IPInRCLRm[empe5_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0D20) {
        IPInENm_IPInENm_empe5_ch1     = (*IPInENm  [empe5_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0D24) {
        IPInFLGm_IPInFLGm_empe5_ch1   = (*IPInFLGm [empe5_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0D28) {
        IPInFCLRm_IPInFCLRm_empe5_ch1 = (*IPInFCLRm[empe5_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0D30) {
        IPInREQm_IPInREQm_empe5_ch1   = (*IPInREQm [empe5_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0D34) {
        IPInRCLRm_IPInRCLRm_empe5_ch1 = (*IPInRCLRm[empe5_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0D40) {
        IPInENm_IPInENm_empe5_ch2     = (*IPInENm  [empe5_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0D44) {
        IPInFLGm_IPInFLGm_empe5_ch2   = (*IPInFLGm [empe5_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0D48) {
        IPInFCLRm_IPInFCLRm_empe5_ch2 = (*IPInFCLRm[empe5_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0D50) {
        IPInREQm_IPInREQm_empe5_ch2   = (*IPInREQm [empe5_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0D54) {
        IPInRCLRm_IPInRCLRm_empe5_ch2 = (*IPInRCLRm[empe5_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0D60) {
        IPInENm_IPInENm_empe5_ch3     = (*IPInENm  [empe5_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0D64) {
        IPInFLGm_IPInFLGm_empe5_ch3   = (*IPInFLGm [empe5_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0D68) {
        IPInFCLRm_IPInFCLRm_empe5_ch3 = (*IPInFCLRm[empe5_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0D70) {
        IPInREQm_IPInREQm_empe5_ch3   = (*IPInREQm [empe5_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0D74) {
        IPInRCLRm_IPInRCLRm_empe5_ch3 = (*IPInRCLRm[empe5_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0E00) {
        IPInENm_IPInENm_empe6_ch0     = (*IPInENm  [empe6_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0E04) {
        IPInFLGm_IPInFLGm_empe6_ch0   = (*IPInFLGm [empe6_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0E08) {
        IPInFCLRm_IPInFCLRm_empe6_ch0 = (*IPInFCLRm[empe6_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0E10) {
        IPInREQm_IPInREQm_empe6_ch0   = (*IPInREQm [empe6_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0E14) {
        IPInRCLRm_IPInRCLRm_empe6_ch0 = (*IPInRCLRm[empe6_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0E20) {
        IPInENm_IPInENm_empe6_ch1     = (*IPInENm  [empe6_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0E24) {
        IPInFLGm_IPInFLGm_empe6_ch1   = (*IPInFLGm [empe6_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0E28) {
        IPInFCLRm_IPInFCLRm_empe6_ch1 = (*IPInFCLRm[empe6_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0E30) {
        IPInREQm_IPInREQm_empe6_ch1   = (*IPInREQm [empe6_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0E34) {
        IPInRCLRm_IPInRCLRm_empe6_ch1 = (*IPInRCLRm[empe6_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0E40) {
        IPInENm_IPInENm_empe6_ch2     = (*IPInENm  [empe6_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0E44) {
        IPInFLGm_IPInFLGm_empe6_ch2   = (*IPInFLGm [empe6_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0E48) {
        IPInFCLRm_IPInFCLRm_empe6_ch2 = (*IPInFCLRm[empe6_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0E50) {
        IPInREQm_IPInREQm_empe6_ch2   = (*IPInREQm [empe6_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0E54) {
        IPInRCLRm_IPInRCLRm_empe6_ch2 = (*IPInRCLRm[empe6_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0E60) {
        IPInENm_IPInENm_empe6_ch3     = (*IPInENm  [empe6_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0E64) {
        IPInFLGm_IPInFLGm_empe6_ch3   = (*IPInFLGm [empe6_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0E68) {
        IPInFCLRm_IPInFCLRm_empe6_ch3 = (*IPInFCLRm[empe6_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0E70) {
        IPInREQm_IPInREQm_empe6_ch3   = (*IPInREQm [empe6_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0E74) {
        IPInRCLRm_IPInRCLRm_empe6_ch3 = (*IPInRCLRm[empe6_ch3])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0F00) {
        IPInENm_IPInENm_empe7_ch0     = (*IPInENm  [empe7_ch0])["IPInENm"  ];
        return;
    }
    if (addr == 0x0F04) {
        IPInFLGm_IPInFLGm_empe7_ch0   = (*IPInFLGm [empe7_ch0])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0F08) {
        IPInFCLRm_IPInFCLRm_empe7_ch0 = (*IPInFCLRm[empe7_ch0])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0F10) {
        IPInREQm_IPInREQm_empe7_ch0   = (*IPInREQm [empe7_ch0])["IPInREQm" ];
        return;
    }
    if (addr == 0x0F14) {
        IPInRCLRm_IPInRCLRm_empe7_ch0 = (*IPInRCLRm[empe7_ch0])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0F20) {
        IPInENm_IPInENm_empe7_ch1     = (*IPInENm  [empe7_ch1])["IPInENm"  ];
        return;
    }
    if (addr == 0x0F24) {
        IPInFLGm_IPInFLGm_empe7_ch1   = (*IPInFLGm [empe7_ch1])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0F28) {
        IPInFCLRm_IPInFCLRm_empe7_ch1 = (*IPInFCLRm[empe7_ch1])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0F30) {
        IPInREQm_IPInREQm_empe7_ch1   = (*IPInREQm [empe7_ch1])["IPInREQm" ];
        return;
    }
    if (addr == 0x0F34) {
        IPInRCLRm_IPInRCLRm_empe7_ch1 = (*IPInRCLRm[empe7_ch1])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0F40) {
        IPInENm_IPInENm_empe7_ch2     = (*IPInENm  [empe7_ch2])["IPInENm"  ];
        return;
    }
    if (addr == 0x0F44) {
        IPInFLGm_IPInFLGm_empe7_ch2   = (*IPInFLGm [empe7_ch2])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0F48) {
        IPInFCLRm_IPInFCLRm_empe7_ch2 = (*IPInFCLRm[empe7_ch2])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0F50) {
        IPInREQm_IPInREQm_empe7_ch2   = (*IPInREQm [empe7_ch2])["IPInREQm" ];
        return;
    }
    if (addr == 0x0F54) {
        IPInRCLRm_IPInRCLRm_empe7_ch2 = (*IPInRCLRm[empe7_ch2])["IPInRCLRm"];
        return;
    }
    if (addr == 0x0F60) {
        IPInENm_IPInENm_empe7_ch3     = (*IPInENm  [empe7_ch3])["IPInENm"  ];
        return;
    }
    if (addr == 0x0F64) {
        IPInFLGm_IPInFLGm_empe7_ch3   = (*IPInFLGm [empe7_ch3])["IPInFLGm" ];
        return;
    }
    if (addr == 0x0F68) {
        IPInFCLRm_IPInFCLRm_empe7_ch3 = (*IPInFCLRm[empe7_ch3])["IPInFCLRm"];
        return;
    }
    if (addr == 0x0F70) {
        IPInREQm_IPInREQm_empe7_ch3   = (*IPInREQm [empe7_ch3])["IPInREQm" ];
        return;
    }
    if (addr == 0x0F74) {
        IPInRCLRm_IPInRCLRm_empe7_ch3 = (*IPInRCLRm[empe7_ch3])["IPInRCLRm"];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cg4_ipir_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0800) {
        (*IPInENm  [empe0_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe0_ch0;
        return;
    }
    if (addr == 0x0804) {
        (*IPInFLGm [empe0_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe0_ch0;
        return;
    }
    if (addr == 0x0808) {
        (*IPInFCLRm[empe0_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe0_ch0;
        return;
    }
    if (addr == 0x0810) {
        (*IPInREQm [empe0_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe0_ch0;
        return;
    }
    if (addr == 0x0814) {
        (*IPInRCLRm[empe0_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe0_ch0;
        return;
    }
    if (addr == 0x0820) {
        (*IPInENm  [empe0_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe0_ch1;
        return;
    }
    if (addr == 0x0824) {
        (*IPInFLGm [empe0_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe0_ch1;
        return;
    }
    if (addr == 0x0828) {
        (*IPInFCLRm[empe0_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe0_ch1;
        return;
    }
    if (addr == 0x0830) {
        (*IPInREQm [empe0_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe0_ch1;
        return;
    }
    if (addr == 0x0834) {
        (*IPInRCLRm[empe0_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe0_ch1;
        return;
    }
    if (addr == 0x0840) {
        (*IPInENm  [empe0_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe0_ch2;
        return;
    }
    if (addr == 0x0844) {
        (*IPInFLGm [empe0_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe0_ch2;
        return;
    }
    if (addr == 0x0848) {
        (*IPInFCLRm[empe0_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe0_ch2;
        return;
    }
    if (addr == 0x0850) {
        (*IPInREQm [empe0_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe0_ch2;
        return;
    }
    if (addr == 0x0854) {
        (*IPInRCLRm[empe0_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe0_ch2;
        return;
    }
    if (addr == 0x0860) {
        (*IPInENm  [empe0_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe0_ch3;
        return;
    }
    if (addr == 0x0864) {
        (*IPInFLGm [empe0_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe0_ch3;
        return;
    }
    if (addr == 0x0868) {
        (*IPInFCLRm[empe0_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe0_ch3;
        return;
    }
    if (addr == 0x0870) {
        (*IPInREQm [empe0_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe0_ch3;
        return;
    }
    if (addr == 0x0874) {
        (*IPInRCLRm[empe0_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe0_ch3;
        return;
    }
    if (addr == 0x0900) {
        (*IPInENm  [empe1_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe1_ch0;
        return;
    }
    if (addr == 0x0904) {
        (*IPInFLGm [empe1_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe1_ch0;
        return;
    }
    if (addr == 0x0908) {
        (*IPInFCLRm[empe1_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe1_ch0;
        return;
    }
    if (addr == 0x0910) {
        (*IPInREQm [empe1_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe1_ch0;
        return;
    }
    if (addr == 0x0914) {
        (*IPInRCLRm[empe1_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe1_ch0;
        return;
    }
    if (addr == 0x0920) {
        (*IPInENm  [empe1_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe1_ch1;
        return;
    }
    if (addr == 0x0924) {
        (*IPInFLGm [empe1_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe1_ch1;
        return;
    }
    if (addr == 0x0928) {
        (*IPInFCLRm[empe1_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe1_ch1;
        return;
    }
    if (addr == 0x0930) {
        (*IPInREQm [empe1_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe1_ch1;
        return;
    }
    if (addr == 0x0934) {
        (*IPInRCLRm[empe1_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe1_ch1;
        return;
    }
    if (addr == 0x0940) {
        (*IPInENm  [empe1_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe1_ch2;
        return;
    }
    if (addr == 0x0944) {
        (*IPInFLGm [empe1_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe1_ch2;
        return;
    }
    if (addr == 0x0948) {
        (*IPInFCLRm[empe1_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe1_ch2;
        return;
    }
    if (addr == 0x0950) {
        (*IPInREQm [empe1_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe1_ch2;
        return;
    }
    if (addr == 0x0954) {
        (*IPInRCLRm[empe1_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe1_ch2;
        return;
    }
    if (addr == 0x0960) {
        (*IPInENm  [empe1_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe1_ch3;
        return;
    }
    if (addr == 0x0964) {
        (*IPInFLGm [empe1_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe1_ch3;
        return;
    }
    if (addr == 0x0968) {
        (*IPInFCLRm[empe1_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe1_ch3;
        return;
    }
    if (addr == 0x0970) {
        (*IPInREQm [empe1_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe1_ch3;
        return;
    }
    if (addr == 0x0974) {
        (*IPInRCLRm[empe1_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe1_ch3;
        return;
    }
    if (addr == 0x0A00) {
        (*IPInENm  [empe2_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe2_ch0;
        return;
    }
    if (addr == 0x0A04) {
        (*IPInFLGm [empe2_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe2_ch0;
        return;
    }
    if (addr == 0x0A08) {
        (*IPInFCLRm[empe2_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe2_ch0;
        return;
    }
    if (addr == 0x0A10) {
        (*IPInREQm [empe2_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe2_ch0;
        return;
    }
    if (addr == 0x0A14) {
        (*IPInRCLRm[empe2_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe2_ch0;
        return;
    }
    if (addr == 0x0A20) {
        (*IPInENm  [empe2_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe2_ch1;
        return;
    }
    if (addr == 0x0A24) {
        (*IPInFLGm [empe2_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe2_ch1;
        return;
    }
    if (addr == 0x0A28) {
        (*IPInFCLRm[empe2_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe2_ch1;
        return;
    }
    if (addr == 0x0A30) {
        (*IPInREQm [empe2_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe2_ch1;
        return;
    }
    if (addr == 0x0A34) {
        (*IPInRCLRm[empe2_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe2_ch1;
        return;
    }
    if (addr == 0x0A40) {
        (*IPInENm  [empe2_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe2_ch2;
        return;
    }
    if (addr == 0x0A44) {
        (*IPInFLGm [empe2_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe2_ch2;
        return;
    }
    if (addr == 0x0A48) {
        (*IPInFCLRm[empe2_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe2_ch2;
        return;
    }
    if (addr == 0x0A50) {
        (*IPInREQm [empe2_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe2_ch2;
        return;
    }
    if (addr == 0x0A54) {
        (*IPInRCLRm[empe2_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe2_ch2;
        return;
    }
    if (addr == 0x0A60) {
        (*IPInENm  [empe2_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe2_ch3;
        return;
    }
    if (addr == 0x0A64) {
        (*IPInFLGm [empe2_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe2_ch3;
        return;
    }
    if (addr == 0x0A68) {
        (*IPInFCLRm[empe2_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe2_ch3;
        return;
    }
    if (addr == 0x0A70) {
        (*IPInREQm [empe2_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe2_ch3;
        return;
    }
    if (addr == 0x0A74) {
        (*IPInRCLRm[empe2_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe2_ch3;
        return;
    }
    if (addr == 0x0B00) {
        (*IPInENm  [empe3_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe3_ch0;
        return;
    }
    if (addr == 0x0B04) {
        (*IPInFLGm [empe3_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe3_ch0;
        return;
    }
    if (addr == 0x0B08) {
        (*IPInFCLRm[empe3_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe3_ch0;
        return;
    }
    if (addr == 0x0B10) {
        (*IPInREQm [empe3_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe3_ch0;
        return;
    }
    if (addr == 0x0B14) {
        (*IPInRCLRm[empe3_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe3_ch0;
        return;
    }
    if (addr == 0x0B20) {
        (*IPInENm  [empe3_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe3_ch1;
        return;
    }
    if (addr == 0x0B24) {
        (*IPInFLGm [empe3_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe3_ch1;
        return;
    }
    if (addr == 0x0B28) {
        (*IPInFCLRm[empe3_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe3_ch1;
        return;
    }
    if (addr == 0x0B30) {
        (*IPInREQm [empe3_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe3_ch1;
        return;
    }
    if (addr == 0x0B34) {
        (*IPInRCLRm[empe3_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe3_ch1;
        return;
    }
    if (addr == 0x0B40) {
        (*IPInENm  [empe3_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe3_ch2;
        return;
    }
    if (addr == 0x0B44) {
        (*IPInFLGm [empe3_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe3_ch2;
        return;
    }
    if (addr == 0x0B48) {
        (*IPInFCLRm[empe3_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe3_ch2;
        return;
    }
    if (addr == 0x0B50) {
        (*IPInREQm [empe3_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe3_ch2;
        return;
    }
    if (addr == 0x0B54) {
        (*IPInRCLRm[empe3_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe3_ch2;
        return;
    }
    if (addr == 0x0B60) {
        (*IPInENm  [empe3_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe3_ch3;
        return;
    }
    if (addr == 0x0B64) {
        (*IPInFLGm [empe3_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe3_ch3;
        return;
    }
    if (addr == 0x0B68) {
        (*IPInFCLRm[empe3_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe3_ch3;
        return;
    }
    if (addr == 0x0B70) {
        (*IPInREQm [empe3_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe3_ch3;
        return;
    }
    if (addr == 0x0B74) {
        (*IPInRCLRm[empe3_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe3_ch3;
        return;
    }
    if (addr == 0x0C00) {
        (*IPInENm  [empe4_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe4_ch0;
        return;
    }
    if (addr == 0x0C04) {
        (*IPInFLGm [empe4_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe4_ch0;
        return;
    }
    if (addr == 0x0C08) {
        (*IPInFCLRm[empe4_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe4_ch0;
        return;
    }
    if (addr == 0x0C10) {
        (*IPInREQm [empe4_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe4_ch0;
        return;
    }
    if (addr == 0x0C14) {
        (*IPInRCLRm[empe4_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe4_ch0;
        return;
    }
    if (addr == 0x0C20) {
        (*IPInENm  [empe4_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe4_ch1;
        return;
    }
    if (addr == 0x0C24) {
        (*IPInFLGm [empe4_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe4_ch1;
        return;
    }
    if (addr == 0x0C28) {
        (*IPInFCLRm[empe4_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe4_ch1;
        return;
    }
    if (addr == 0x0C30) {
        (*IPInREQm [empe4_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe4_ch1;
        return;
    }
    if (addr == 0x0C34) {
        (*IPInRCLRm[empe4_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe4_ch1;
        return;
    }
    if (addr == 0x0C40) {
        (*IPInENm  [empe4_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe4_ch2;
        return;
    }
    if (addr == 0x0C44) {
        (*IPInFLGm [empe4_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe4_ch2;
        return;
    }
    if (addr == 0x0C48) {
        (*IPInFCLRm[empe4_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe4_ch2;
        return;
    }
    if (addr == 0x0C50) {
        (*IPInREQm [empe4_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe4_ch2;
        return;
    }
    if (addr == 0x0C54) {
        (*IPInRCLRm[empe4_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe4_ch2;
        return;
    }
    if (addr == 0x0C60) {
        (*IPInENm  [empe4_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe4_ch3;
        return;
    }
    if (addr == 0x0C64) {
        (*IPInFLGm [empe4_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe4_ch3;
        return;
    }
    if (addr == 0x0C68) {
        (*IPInFCLRm[empe4_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe4_ch3;
        return;
    }
    if (addr == 0x0C70) {
        (*IPInREQm [empe4_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe4_ch3;
        return;
    }
    if (addr == 0x0C74) {
        (*IPInRCLRm[empe4_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe4_ch3;
        return;
    }
    if (addr == 0x0D00) {
        (*IPInENm  [empe5_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe5_ch0;
        return;
    }
    if (addr == 0x0D04) {
        (*IPInFLGm [empe5_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe5_ch0;
        return;
    }
    if (addr == 0x0D08) {
        (*IPInFCLRm[empe5_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe5_ch0;
        return;
    }
    if (addr == 0x0D10) {
        (*IPInREQm [empe5_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe5_ch0;
        return;
    }
    if (addr == 0x0D14) {
        (*IPInRCLRm[empe5_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe5_ch0;
        return;
    }
    if (addr == 0x0D20) {
        (*IPInENm  [empe5_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe5_ch1;
        return;
    }
    if (addr == 0x0D24) {
        (*IPInFLGm [empe5_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe5_ch1;
        return;
    }
    if (addr == 0x0D28) {
        (*IPInFCLRm[empe5_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe5_ch1;
        return;
    }
    if (addr == 0x0D30) {
        (*IPInREQm [empe5_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe5_ch1;
        return;
    }
    if (addr == 0x0D34) {
        (*IPInRCLRm[empe5_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe5_ch1;
        return;
    }
    if (addr == 0x0D40) {
        (*IPInENm  [empe5_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe5_ch2;
        return;
    }
    if (addr == 0x0D44) {
        (*IPInFLGm [empe5_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe5_ch2;
        return;
    }
    if (addr == 0x0D48) {
        (*IPInFCLRm[empe5_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe5_ch2;
        return;
    }
    if (addr == 0x0D50) {
        (*IPInREQm [empe5_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe5_ch2;
        return;
    }
    if (addr == 0x0D54) {
        (*IPInRCLRm[empe5_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe5_ch2;
        return;
    }
    if (addr == 0x0D60) {
        (*IPInENm  [empe5_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe5_ch3;
        return;
    }
    if (addr == 0x0D64) {
        (*IPInFLGm [empe5_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe5_ch3;
        return;
    }
    if (addr == 0x0D68) {
        (*IPInFCLRm[empe5_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe5_ch3;
        return;
    }
    if (addr == 0x0D70) {
        (*IPInREQm [empe5_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe5_ch3;
        return;
    }
    if (addr == 0x0D74) {
        (*IPInRCLRm[empe5_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe5_ch3;
        return;
    }
    if (addr == 0x0E00) {
        (*IPInENm  [empe6_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe6_ch0;
        return;
    }
    if (addr == 0x0E04) {
        (*IPInFLGm [empe6_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe6_ch0;
        return;
    }
    if (addr == 0x0E08) {
        (*IPInFCLRm[empe6_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe6_ch0;
        return;
    }
    if (addr == 0x0E10) {
        (*IPInREQm [empe6_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe6_ch0;
        return;
    }
    if (addr == 0x0E14) {
        (*IPInRCLRm[empe6_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe6_ch0;
        return;
    }
    if (addr == 0x0E20) {
        (*IPInENm  [empe6_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe6_ch1;
        return;
    }
    if (addr == 0x0E24) {
        (*IPInFLGm [empe6_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe6_ch1;
        return;
    }
    if (addr == 0x0E28) {
        (*IPInFCLRm[empe6_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe6_ch1;
        return;
    }
    if (addr == 0x0E30) {
        (*IPInREQm [empe6_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe6_ch1;
        return;
    }
    if (addr == 0x0E34) {
        (*IPInRCLRm[empe6_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe6_ch1;
        return;
    }
    if (addr == 0x0E40) {
        (*IPInENm  [empe6_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe6_ch2;
        return;
    }
    if (addr == 0x0E44) {
        (*IPInFLGm [empe6_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe6_ch2;
        return;
    }
    if (addr == 0x0E48) {
        (*IPInFCLRm[empe6_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe6_ch2;
        return;
    }
    if (addr == 0x0E50) {
        (*IPInREQm [empe6_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe6_ch2;
        return;
    }
    if (addr == 0x0E54) {
        (*IPInRCLRm[empe6_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe6_ch2;
        return;
    }
    if (addr == 0x0E60) {
        (*IPInENm  [empe6_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe6_ch3;
        return;
    }
    if (addr == 0x0E64) {
        (*IPInFLGm [empe6_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe6_ch3;
        return;
    }
    if (addr == 0x0E68) {
        (*IPInFCLRm[empe6_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe6_ch3;
        return;
    }
    if (addr == 0x0E70) {
        (*IPInREQm [empe6_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe6_ch3;
        return;
    }
    if (addr == 0x0E74) {
        (*IPInRCLRm[empe6_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe6_ch3;
        return;
    }
    if (addr == 0x0F00) {
        (*IPInENm  [empe7_ch0])["IPInENm"  ] = IPInENm_IPInENm_empe7_ch0;
        return;
    }
    if (addr == 0x0F04) {
        (*IPInFLGm [empe7_ch0])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe7_ch0;
        return;
    }
    if (addr == 0x0F08) {
        (*IPInFCLRm[empe7_ch0])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe7_ch0;
        return;
    }
    if (addr == 0x0F10) {
        (*IPInREQm [empe7_ch0])["IPInREQm" ] = IPInREQm_IPInREQm_empe7_ch0;
        return;
    }
    if (addr == 0x0F14) {
        (*IPInRCLRm[empe7_ch0])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe7_ch0;
        return;
    }
    if (addr == 0x0F20) {
        (*IPInENm  [empe7_ch1])["IPInENm"  ] = IPInENm_IPInENm_empe7_ch1;
        return;
    }
    if (addr == 0x0F24) {
        (*IPInFLGm [empe7_ch1])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe7_ch1;
        return;
    }
    if (addr == 0x0F28) {
        (*IPInFCLRm[empe7_ch1])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe7_ch1;
        return;
    }
    if (addr == 0x0F30) {
        (*IPInREQm [empe7_ch1])["IPInREQm" ] = IPInREQm_IPInREQm_empe7_ch1;
        return;
    }
    if (addr == 0x0F34) {
        (*IPInRCLRm[empe7_ch1])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe7_ch1;
        return;
    }
    if (addr == 0x0F40) {
        (*IPInENm  [empe7_ch2])["IPInENm"  ] = IPInENm_IPInENm_empe7_ch2;
        return;
    }
    if (addr == 0x0F44) {
        (*IPInFLGm [empe7_ch2])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe7_ch2;
        return;
    }
    if (addr == 0x0F48) {
        (*IPInFCLRm[empe7_ch2])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe7_ch2;
        return;
    }
    if (addr == 0x0F50) {
        (*IPInREQm [empe7_ch2])["IPInREQm" ] = IPInREQm_IPInREQm_empe7_ch2;
        return;
    }
    if (addr == 0x0F54) {
        (*IPInRCLRm[empe7_ch2])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe7_ch2;
        return;
    }
    if (addr == 0x0F60) {
        (*IPInENm  [empe7_ch3])["IPInENm"  ] = IPInENm_IPInENm_empe7_ch3;
        return;
    }
    if (addr == 0x0F64) {
        (*IPInFLGm [empe7_ch3])["IPInFLGm" ] = IPInFLGm_IPInFLGm_empe7_ch3;
        return;
    }
    if (addr == 0x0F68) {
        (*IPInFCLRm[empe7_ch3])["IPInFCLRm"] = IPInFCLRm_IPInFCLRm_empe7_ch3;
        return;
    }
    if (addr == 0x0F70) {
        (*IPInREQm [empe7_ch3])["IPInREQm" ] = IPInREQm_IPInREQm_empe7_ch3;
        return;
    }
    if (addr == 0x0F74) {
        (*IPInRCLRm[empe7_ch3])["IPInRCLRm"] = IPInRCLRm_IPInRCLRm_empe7_ch3;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cg4_ipir_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cg4_ipir_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cg4_ipir_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cg4_ipir_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cg4_ipir_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cg4_ipir_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cg4_ipir_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cg4_ipir_regif::uint Cg4_ipir_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cg4_ipir_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cg4_ipir_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cg4_ipir_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cg4_ipir_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Cg4_ipir_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cg4_ipir_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cg4_ipir_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
