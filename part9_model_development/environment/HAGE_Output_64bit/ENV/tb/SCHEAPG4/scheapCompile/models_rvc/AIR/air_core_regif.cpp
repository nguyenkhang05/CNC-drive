// -----------------------------------------------------------------------------
// $Id: copyright.txt,v 1.3 2014/10/13 03:21:49 sontran Exp $
//
// Copyright(c) 2016 - 2017 Renesas Electronics Corporation
// Copyright(c) 2016 - 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.62 2014/11/28 10:17:23 ducduong
//    regif_cpp.skl 1.55 2014/11/28 10:17:23 ducduong
//
// Input file : air_regif.txt
////////////////////////////////////////////////////////////////////////////////
// ## ----------------------------------------------------------------------
// ## $Id: $
// ##
// ## Copyright(c) 2016 - 2017 Renesas System Design Co., Ltd.
// ## Copyright(c) 2016 - 2017 Renesas Design Vietnam Co., Ltd.
// ## RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// ## This program must be used solely for the purpose for which
// ## it was furnished by Renesas Electronics Corporation. No part of this
// ## program may be reproduced or disclosed to others, in any
// ## form, without the prior written permission of Renesas Electronics
// ## Corporation.
// ## ----------------------------------------------------------------------
// 
// %MODULE air_core 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def       4     
// 
// %REG_CHANNEL reg_def
//     %%TITLE           name          size        length  offset     access   init           support   callback
//     %%REG             AIR_ISELR0     8|16|32    32      0x00       W|R      0x00000000     TRUE      -
//     %%REG             AIR_ISELR1     8|16|32    32      0x04       W|R      0xFF800000     TRUE      -
//     %%REG             AIR_DSELR0     8|16|32    32      0x08       W|R      0x0F000000     TRUE      -
//     %%REG             AIR_DSELR1     8|16|32    32      0x0C       W|R      0xFF800000     TRUE      -
// 
// %REG_NAME AIR_ISELR0      
//     %%TITLE    name       upper  lower  access  init      support  callback    
//     %%BIT     ISEL31        31    31    R|W     0x0       TRUE      -
//     %%BIT     ISEL30        30    30    R|W     0x0       TRUE      -
//     %%BIT     ISEL29        29    29    R|W     0x0       TRUE      -
//     %%BIT     ISEL28        28    28    R|W     0x0       TRUE      -
//     %%BIT     ISEL27        27    27    R|W     0x0       TRUE      -
//     %%BIT     ISEL26        26    26    R|W     0x0       TRUE      -
//     %%BIT     ISEL25        25    25    R|W     0x0       TRUE      -
//     %%BIT     ISEL24        24    24    R|W     0x0       TRUE      -
//     %%BIT     ISEL23        23    23    R|W     0x0       TRUE      -
//     %%BIT     ISEL22        22    22    R|W     0x0       TRUE      -
//     %%BIT     ISEL21        21    21    R|W     0x0       TRUE      -
//     %%BIT     ISEL20        20    20    R|W     0x0       TRUE      -
//     %%BIT     ISEL19        19    19    R|W     0x0       TRUE      -
//     %%BIT     ISEL18        18    18    R|W     0x0       TRUE      -
//     %%BIT     ISEL17        17    17    R|W     0x0       TRUE      -
//     %%BIT     ISEL16        16    16    R|W     0x0       TRUE      -
//     %%BIT     ISEL15        15    15    R|W     0x0       TRUE      -
//     %%BIT     ISEL14        14    14    R|W     0x0       TRUE      -
//     %%BIT     ISEL13        13    13    R|W     0x0       TRUE      -
//     %%BIT     ISEL12        12    12    R|W     0x0       TRUE      -
//     %%BIT     ISEL11        11    11    R|W     0x0       TRUE      -
//     %%BIT     ISEL10        10    10    R|W     0x0       TRUE      -
//     %%BIT     ISEL9          9     9   R|W      0x0       TRUE      -
//     %%BIT     ISEL8          8     8   R|W      0x0       TRUE      -
//     %%BIT     ISEL7          7     7   R|W      0x0       TRUE      -
//     %%BIT     ISEL6          6     6   R|W      0x0       TRUE      -
//     %%BIT     ISEL5          5     5   R|W      0x0       TRUE      -
//     %%BIT     ISEL4          4     4   R|W      0x0       TRUE      -
//     %%BIT     ISEL3          3     3   R|W      0x0       TRUE      -
//     %%BIT     ISEL2          2     2   R|W      0x0       TRUE      -
//     %%BIT     ISEL1          1     1   R|W      0x0       TRUE      -
//     %%BIT     ISEL0          0     0   R|W      0x0       TRUE      -
// 
// 
// %REG_NAME AIR_ISELR1      
//     %%TITLE  name       upper  lower  access  init      support  callback    
//     %%BIT     ISEL63    31      31    R|W     0x1       TRUE  -
//     %%BIT     ISEL62    30      30    R|W     0x1       TRUE  -
//     %%BIT     ISEL61    29      29    R|W     0x1       TRUE  -
//     %%BIT     ISEL60    28      28    R|W     0x1       TRUE  -
//     %%BIT     ISEL59    27      27    R|W     0x1       TRUE  -
//     %%BIT     ISEL58    26      26    R|W     0x1       TRUE  -
//     %%BIT     ISEL57    25      25    R|W     0x1       TRUE  -
//     %%BIT     ISEL56    24      24    R|W     0x1       TRUE  -
//     %%BIT     ISEL55    23      23    R|W     0x1       TRUE  -
//     %%BIT     ISEL54    22      22    R|W     0x0       TRUE  -
//     %%BIT     ISEL53    21      21    R|W     0x0       TRUE  -
//     %%BIT     ISEL52    20      20    R|W     0x0       TRUE  -
//     %%BIT     ISEL51    19      19    R|W     0x0       TRUE  -
//     %%BIT     ISEL50    18      18    R|W     0x0       TRUE  -
//     %%BIT     ISEL49    17      17    R|W     0x0       TRUE  -
//     %%BIT     ISEL48    16      16    R|W     0x0       TRUE  -
//     %%BIT     ISEL47    15      15    R|W     0x0       TRUE  -
//     %%BIT     ISEL46    14      14    R|W     0x0       TRUE  -
//     %%BIT     ISEL45    13      13    R|W     0x0       TRUE  -
//     %%BIT     ISEL44    12      12    R|W     0x0       TRUE  -
//     %%BIT     ISEL43    11      11    R|W     0x0       TRUE  -
//     %%BIT     ISEL42    10      10    R|W     0x0       TRUE  -
//     %%BIT     ISEL41     9       9    R|W     0x0       TRUE  -
//     %%BIT     ISEL40     8       8    R|W     0x0       TRUE  -
//     %%BIT     ISEL39     7       7    R|W     0x0       TRUE  -
//     %%BIT     ISEL38     6       6    R|W     0x0       TRUE  -
//     %%BIT     ISEL37     5       5    R|W     0x0       TRUE  -
//     %%BIT     ISEL36     4       4    R|W     0x0       TRUE  -
//     %%BIT     ISEL35     3       3    R|W     0x0       TRUE  -
//     %%BIT     ISEL34     2       2    R|W     0x0       TRUE  -
//     %%BIT     ISEL33     1       1    R|W     0x0       TRUE  -
//     %%BIT     ISEL32     0       0    R|W     0x0       TRUE  -
// 
// 
// 
// %REG_NAME AIR_DSELR0      
//     %%TITLE  name       upper  lower  access  init         support  callback    
//     %%BIT     DSEL31        31    31    R|W     0x0       TRUE      -
//     %%BIT     DSEL30        30    30    R|W     0x0       TRUE      -
//     %%BIT     DSEL29        29    29    R|W     0x0       TRUE      -
//     %%BIT     DSEL28        28    28    R|W     0x0       TRUE      -
//     %%BIT     DSEL27        27    27    R|W     0x1       TRUE      -
//     %%BIT     DSEL26        26    26    R|W     0x1       TRUE      -
//     %%BIT     DSEL25        25    25    R|W     0x1       TRUE      -
//     %%BIT     DSEL24        24    24    R|W     0x1       TRUE      -
//     %%BIT     DSEL23        23    23    R|W     0x0       TRUE      -
//     %%BIT     DSEL22        22    22    R|W     0x0       TRUE      -
//     %%BIT     DSEL21        21    21    R|W     0x0       TRUE      -
//     %%BIT     DSEL20        20    20    R|W     0x0       TRUE      -
//     %%BIT     DSEL19        19    19    R|W     0x0       TRUE      -
//     %%BIT     DSEL18        18    18    R|W     0x0       TRUE      -
//     %%BIT     DSEL17        17    17    R|W     0x0       TRUE      -
//     %%BIT     DSEL16        16    16    R|W     0x0       TRUE      -
//     %%BIT     DSEL15        15    15    R|W     0x0       TRUE      -
//     %%BIT     DSEL14        14    14    R|W     0x0       TRUE      -
//     %%BIT     DSEL13        13    13    R|W     0x0       TRUE      -
//     %%BIT     DSEL12        12    12    R|W     0x0       TRUE      -
//     %%BIT     DSEL11        11    11    R|W     0x0       TRUE      -
//     %%BIT     DSEL10        10    10    R|W     0x0       TRUE      -
//     %%BIT     DSEL9          9     9   R|W      0x0       TRUE      -
//     %%BIT     DSEL8          8     8   R|W      0x0       TRUE      -
//     %%BIT     DSEL7          7     7   R|W      0x0       TRUE      -
//     %%BIT     DSEL6          6     6   R|W      0x0       TRUE      -
//     %%BIT     DSEL5          5     5   R|W      0x0       TRUE      -
//     %%BIT     DSEL4          4     4   R|W      0x0       TRUE      -
//     %%BIT     DSEL3          3     3   R|W      0x0       TRUE      -
//     %%BIT     DSEL2          2     2   R|W      0x0       TRUE      -
//     %%BIT     DSEL1          1     1   R|W      0x0       TRUE      -
//     %%BIT     DSEL0          0     0   R|W      0x0       TRUE      -
// 
// %REG_NAME AIR_DSELR1      
//     %%TITLE  name       upper  lower  access  init         support  callback    
//     %%BIT     DSEL63    31      31    R|W     0x1       TRUE  -
//     %%BIT     DSEL62    30      30    R|W     0x1       TRUE  -
//     %%BIT     DSEL61    29      29    R|W     0x1       TRUE  -
//     %%BIT     DSEL60    28      28    R|W     0x1       TRUE  -
//     %%BIT     DSEL59    27      27    R|W     0x1       TRUE  -
//     %%BIT     DSEL58    26      26    R|W     0x1       TRUE  -
//     %%BIT     DSEL57    25      25    R|W     0x1       TRUE  -
//     %%BIT     DSEL56    24      24    R|W     0x1       TRUE  -
//     %%BIT     DSEL55    23      23    R|W     0x1       TRUE  -
//     %%BIT     DSEL54    22      22    R|W     0x0       TRUE  -
//     %%BIT     DSEL53    21      21    R|W     0x0       TRUE  -
//     %%BIT     DSEL52    20      20    R|W     0x0       TRUE  -
//     %%BIT     DSEL51    19      19    R|W     0x0       TRUE  -
//     %%BIT     DSEL50    18      18    R|W     0x0       TRUE  -
//     %%BIT     DSEL49    17      17    R|W     0x0       TRUE  -
//     %%BIT     DSEL48    16      16    R|W     0x0       TRUE  -
//     %%BIT     DSEL47    15      15    R|W     0x0       TRUE  -
//     %%BIT     DSEL46    14      14    R|W     0x0       TRUE  -
//     %%BIT     DSEL45    13      13    R|W     0x0       TRUE  -
//     %%BIT     DSEL44    12      12    R|W     0x0       TRUE  -
//     %%BIT     DSEL43    11      11    R|W     0x0       TRUE  -
//     %%BIT     DSEL42    10      10    R|W     0x0       TRUE  -
//     %%BIT     DSEL41     9       9    R|W     0x0       TRUE  -
//     %%BIT     DSEL40     8       8    R|W     0x0       TRUE  -
//     %%BIT     DSEL39     7       7    R|W     0x0       TRUE  -
//     %%BIT     DSEL38     6       6    R|W     0x0       TRUE  -
//     %%BIT     DSEL37     5       5    R|W     0x0       TRUE  -
//     %%BIT     DSEL36     4       4    R|W     0x0       TRUE  -
//     %%BIT     DSEL35     3       3    R|W     0x0       TRUE  -
//     %%BIT     DSEL34     2       2    R|W     0x0       TRUE  -
//     %%BIT     DSEL33     1       1    R|W     0x0       TRUE  -
//     %%BIT     DSEL32     0       0    R|W     0x0       TRUE  -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file air_core_regif.cpp
/// @brief Register IF class of model AIR_CORE
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "air_core_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cair_core_regif::Cair_core_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", 0x10)
    #endif
{
    CommandInit();
    AIR_ISELR0 = new vpcl::re_register(0x0000, this, "AIR_ISELR0", name.c_str());
    AIR_ISELR1 = new vpcl::re_register(0x0004, this, "AIR_ISELR1", name.c_str());
    AIR_DSELR0 = new vpcl::re_register(0x0008, this, "AIR_DSELR0", name.c_str());
    AIR_DSELR1 = new vpcl::re_register(0x000C, this, "AIR_DSELR1", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<4];
    for (uint i = 0; i < (1<<4); i++) {
        mRegMap[i] = (1<<4);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(AIR_ISELR0  , mCurReg, 0,  4, "8|16|32", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(AIR_ISELR0  , mCurReg, 0,  4, "8|16|32", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(AIR_ISELR1  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(AIR_DSELR0  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(AIR_DSELR1  , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*AIR_ISELR0  ) (31, 31, "ISEL31"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (30, 30, "ISEL30"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (29, 29, "ISEL29"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (28, 28, "ISEL28"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (27, 27, "ISEL27"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (26, 26, "ISEL26"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (25, 25, "ISEL25"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (24, 24, "ISEL24"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (23, 23, "ISEL23"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (22, 22, "ISEL22"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (21, 21, "ISEL21"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (20, 20, "ISEL20"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (19, 19, "ISEL19"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (18, 18, "ISEL18"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (17, 17, "ISEL17"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (16, 16, "ISEL16"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (15, 15, "ISEL15"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (14, 14, "ISEL14"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (13, 13, "ISEL13"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (12, 12, "ISEL12"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (11, 11, "ISEL11"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) (10, 10, "ISEL10"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 9,  9, "ISEL9"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 8,  8, "ISEL8"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 7,  7, "ISEL7"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 6,  6, "ISEL6"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 5,  5, "ISEL5"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 4,  4, "ISEL4"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 3,  3, "ISEL3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 2,  2, "ISEL2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 1,  1, "ISEL1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR0  ) ( 0,  0, "ISEL0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (31, 31, "ISEL63"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (30, 30, "ISEL62"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (29, 29, "ISEL61"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (28, 28, "ISEL60"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (27, 27, "ISEL59"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (26, 26, "ISEL58"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (25, 25, "ISEL57"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (24, 24, "ISEL56"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (23, 23, "ISEL55"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (22, 22, "ISEL54"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (21, 21, "ISEL53"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (20, 20, "ISEL52"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (19, 19, "ISEL51"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (18, 18, "ISEL50"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (17, 17, "ISEL49"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (16, 16, "ISEL48"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (15, 15, "ISEL47"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (14, 14, "ISEL46"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (13, 13, "ISEL45"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (12, 12, "ISEL44"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (11, 11, "ISEL43"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) (10, 10, "ISEL42"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 9,  9, "ISEL41"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 8,  8, "ISEL40"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 7,  7, "ISEL39"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 6,  6, "ISEL38"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 5,  5, "ISEL37"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 4,  4, "ISEL36"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 3,  3, "ISEL35"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 2,  2, "ISEL34"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 1,  1, "ISEL33"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_ISELR1  ) ( 0,  0, "ISEL32"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (31, 31, "DSEL31"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (30, 30, "DSEL30"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (29, 29, "DSEL29"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (28, 28, "DSEL28"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (27, 27, "DSEL27"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (26, 26, "DSEL26"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (25, 25, "DSEL25"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (24, 24, "DSEL24"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (23, 23, "DSEL23"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (22, 22, "DSEL22"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (21, 21, "DSEL21"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (20, 20, "DSEL20"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (19, 19, "DSEL19"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (18, 18, "DSEL18"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (17, 17, "DSEL17"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (16, 16, "DSEL16"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (15, 15, "DSEL15"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (14, 14, "DSEL14"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (13, 13, "DSEL13"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (12, 12, "DSEL12"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (11, 11, "DSEL11"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) (10, 10, "DSEL10"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 9,  9, "DSEL9"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 8,  8, "DSEL8"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 7,  7, "DSEL7"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 6,  6, "DSEL6"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 5,  5, "DSEL5"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 4,  4, "DSEL4"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 3,  3, "DSEL3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 2,  2, "DSEL2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 1,  1, "DSEL1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR0  ) ( 0,  0, "DSEL0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (31, 31, "DSEL63"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (30, 30, "DSEL62"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (29, 29, "DSEL61"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (28, 28, "DSEL60"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (27, 27, "DSEL59"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (26, 26, "DSEL58"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (25, 25, "DSEL57"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (24, 24, "DSEL56"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (23, 23, "DSEL55"  , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (22, 22, "DSEL54"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (21, 21, "DSEL53"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (20, 20, "DSEL52"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (19, 19, "DSEL51"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (18, 18, "DSEL50"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (17, 17, "DSEL49"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (16, 16, "DSEL48"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (15, 15, "DSEL47"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (14, 14, "DSEL46"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (13, 13, "DSEL45"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (12, 12, "DSEL44"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (11, 11, "DSEL43"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) (10, 10, "DSEL42"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 9,  9, "DSEL41"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 8,  8, "DSEL40"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 7,  7, "DSEL39"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 6,  6, "DSEL38"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 5,  5, "DSEL37"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 4,  4, "DSEL36"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 3,  3, "DSEL35"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 2,  2, "DSEL34"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 1,  1, "DSEL33"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*AIR_DSELR1  ) ( 0,  0, "DSEL32"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register

    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cair_core_regif::~Cair_core_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Cair_core_regif::uint Cair_core_regif::bit_select(cuint val,    ///< [in] Writting address
                                                  cuint start,  ///< [in] start bit position
                                                  cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cair_core_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cair_core_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cair_core_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cair_core_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cair_core_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                     const unsigned char *p_data,  ///< [in] Writing data
                                     cuint size,                   ///< [in] Data size (byte)
                                     bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 4-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cair_core_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size,              ///< [in]  Data size (byte)
                                     bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 4-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cair_core_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                  unsigned char *p_data,          ///< [out] Reading data
                                  cuint size,                     ///< [in]  Data size (byte)
                                  cuint reg_index,                ///< [in]  Register index
                                  bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    if (!IsDbgFunc) {
        if (mIsReset) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            
            pst_data = Register->read();

        }
    }
    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cair_core_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                  const unsigned char *p_data,      ///< [in] Writing data
                                  cuint size,                       ///< [in] Data size (byte)
                                  cuint reg_index,                  ///< [in] Register index
                                  bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cair_core_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cair_core_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cair_core_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cair_core_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cair_core_regif::InitLocalVal()
{
    // Initialize local variables
    AIR_ISELR0_ISEL31 = 0x0;
    AIR_ISELR0_ISEL30 = 0x0;
    AIR_ISELR0_ISEL29 = 0x0;
    AIR_ISELR0_ISEL28 = 0x0;
    AIR_ISELR0_ISEL27 = 0x0;
    AIR_ISELR0_ISEL26 = 0x0;
    AIR_ISELR0_ISEL25 = 0x0;
    AIR_ISELR0_ISEL24 = 0x0;
    AIR_ISELR0_ISEL23 = 0x0;
    AIR_ISELR0_ISEL22 = 0x0;
    AIR_ISELR0_ISEL21 = 0x0;
    AIR_ISELR0_ISEL20 = 0x0;
    AIR_ISELR0_ISEL19 = 0x0;
    AIR_ISELR0_ISEL18 = 0x0;
    AIR_ISELR0_ISEL17 = 0x0;
    AIR_ISELR0_ISEL16 = 0x0;
    AIR_ISELR0_ISEL15 = 0x0;
    AIR_ISELR0_ISEL14 = 0x0;
    AIR_ISELR0_ISEL13 = 0x0;
    AIR_ISELR0_ISEL12 = 0x0;
    AIR_ISELR0_ISEL11 = 0x0;
    AIR_ISELR0_ISEL10 = 0x0;
    AIR_ISELR0_ISEL9 = 0x0;
    AIR_ISELR0_ISEL8 = 0x0;
    AIR_ISELR0_ISEL7 = 0x0;
    AIR_ISELR0_ISEL6 = 0x0;
    AIR_ISELR0_ISEL5 = 0x0;
    AIR_ISELR0_ISEL4 = 0x0;
    AIR_ISELR0_ISEL3 = 0x0;
    AIR_ISELR0_ISEL2 = 0x0;
    AIR_ISELR0_ISEL1 = 0x0;
    AIR_ISELR0_ISEL0 = 0x0;
    AIR_ISELR1_ISEL63 = 0x1;
    AIR_ISELR1_ISEL62 = 0x1;
    AIR_ISELR1_ISEL61 = 0x1;
    AIR_ISELR1_ISEL60 = 0x1;
    AIR_ISELR1_ISEL59 = 0x1;
    AIR_ISELR1_ISEL58 = 0x1;
    AIR_ISELR1_ISEL57 = 0x1;
    AIR_ISELR1_ISEL56 = 0x1;
    AIR_ISELR1_ISEL55 = 0x1;
    AIR_ISELR1_ISEL54 = 0x0;
    AIR_ISELR1_ISEL53 = 0x0;
    AIR_ISELR1_ISEL52 = 0x0;
    AIR_ISELR1_ISEL51 = 0x0;
    AIR_ISELR1_ISEL50 = 0x0;
    AIR_ISELR1_ISEL49 = 0x0;
    AIR_ISELR1_ISEL48 = 0x0;
    AIR_ISELR1_ISEL47 = 0x0;
    AIR_ISELR1_ISEL46 = 0x0;
    AIR_ISELR1_ISEL45 = 0x0;
    AIR_ISELR1_ISEL44 = 0x0;
    AIR_ISELR1_ISEL43 = 0x0;
    AIR_ISELR1_ISEL42 = 0x0;
    AIR_ISELR1_ISEL41 = 0x0;
    AIR_ISELR1_ISEL40 = 0x0;
    AIR_ISELR1_ISEL39 = 0x0;
    AIR_ISELR1_ISEL38 = 0x0;
    AIR_ISELR1_ISEL37 = 0x0;
    AIR_ISELR1_ISEL36 = 0x0;
    AIR_ISELR1_ISEL35 = 0x0;
    AIR_ISELR1_ISEL34 = 0x0;
    AIR_ISELR1_ISEL33 = 0x0;
    AIR_ISELR1_ISEL32 = 0x0;
    AIR_DSELR0_DSEL31 = 0x0;
    AIR_DSELR0_DSEL30 = 0x0;
    AIR_DSELR0_DSEL29 = 0x0;
    AIR_DSELR0_DSEL28 = 0x0;
    AIR_DSELR0_DSEL27 = 0x1;
    AIR_DSELR0_DSEL26 = 0x1;
    AIR_DSELR0_DSEL25 = 0x1;
    AIR_DSELR0_DSEL24 = 0x1;
    AIR_DSELR0_DSEL23 = 0x0;
    AIR_DSELR0_DSEL22 = 0x0;
    AIR_DSELR0_DSEL21 = 0x0;
    AIR_DSELR0_DSEL20 = 0x0;
    AIR_DSELR0_DSEL19 = 0x0;
    AIR_DSELR0_DSEL18 = 0x0;
    AIR_DSELR0_DSEL17 = 0x0;
    AIR_DSELR0_DSEL16 = 0x0;
    AIR_DSELR0_DSEL15 = 0x0;
    AIR_DSELR0_DSEL14 = 0x0;
    AIR_DSELR0_DSEL13 = 0x0;
    AIR_DSELR0_DSEL12 = 0x0;
    AIR_DSELR0_DSEL11 = 0x0;
    AIR_DSELR0_DSEL10 = 0x0;
    AIR_DSELR0_DSEL9 = 0x0;
    AIR_DSELR0_DSEL8 = 0x0;
    AIR_DSELR0_DSEL7 = 0x0;
    AIR_DSELR0_DSEL6 = 0x0;
    AIR_DSELR0_DSEL5 = 0x0;
    AIR_DSELR0_DSEL4 = 0x0;
    AIR_DSELR0_DSEL3 = 0x0;
    AIR_DSELR0_DSEL2 = 0x0;
    AIR_DSELR0_DSEL1 = 0x0;
    AIR_DSELR0_DSEL0 = 0x0;
    AIR_DSELR1_DSEL63 = 0x1;
    AIR_DSELR1_DSEL62 = 0x1;
    AIR_DSELR1_DSEL61 = 0x1;
    AIR_DSELR1_DSEL60 = 0x1;
    AIR_DSELR1_DSEL59 = 0x1;
    AIR_DSELR1_DSEL58 = 0x1;
    AIR_DSELR1_DSEL57 = 0x1;
    AIR_DSELR1_DSEL56 = 0x1;
    AIR_DSELR1_DSEL55 = 0x1;
    AIR_DSELR1_DSEL54 = 0x0;
    AIR_DSELR1_DSEL53 = 0x0;
    AIR_DSELR1_DSEL52 = 0x0;
    AIR_DSELR1_DSEL51 = 0x0;
    AIR_DSELR1_DSEL50 = 0x0;
    AIR_DSELR1_DSEL49 = 0x0;
    AIR_DSELR1_DSEL48 = 0x0;
    AIR_DSELR1_DSEL47 = 0x0;
    AIR_DSELR1_DSEL46 = 0x0;
    AIR_DSELR1_DSEL45 = 0x0;
    AIR_DSELR1_DSEL44 = 0x0;
    AIR_DSELR1_DSEL43 = 0x0;
    AIR_DSELR1_DSEL42 = 0x0;
    AIR_DSELR1_DSEL41 = 0x0;
    AIR_DSELR1_DSEL40 = 0x0;
    AIR_DSELR1_DSEL39 = 0x0;
    AIR_DSELR1_DSEL38 = 0x0;
    AIR_DSELR1_DSEL37 = 0x0;
    AIR_DSELR1_DSEL36 = 0x0;
    AIR_DSELR1_DSEL35 = 0x0;
    AIR_DSELR1_DSEL34 = 0x0;
    AIR_DSELR1_DSEL33 = 0x0;
    AIR_DSELR1_DSEL32 = 0x0;
}

/// Update bit value to local value
/// @return None
void Cair_core_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        AIR_ISELR0_ISEL31              = (*AIR_ISELR0)["ISEL31"    ];
        AIR_ISELR0_ISEL30              = (*AIR_ISELR0)["ISEL30"    ];
        AIR_ISELR0_ISEL29              = (*AIR_ISELR0)["ISEL29"    ];
        AIR_ISELR0_ISEL28              = (*AIR_ISELR0)["ISEL28"    ];
        AIR_ISELR0_ISEL27              = (*AIR_ISELR0)["ISEL27"    ];
        AIR_ISELR0_ISEL26              = (*AIR_ISELR0)["ISEL26"    ];
        AIR_ISELR0_ISEL25              = (*AIR_ISELR0)["ISEL25"    ];
        AIR_ISELR0_ISEL24              = (*AIR_ISELR0)["ISEL24"    ];
        AIR_ISELR0_ISEL23              = (*AIR_ISELR0)["ISEL23"    ];
        AIR_ISELR0_ISEL22              = (*AIR_ISELR0)["ISEL22"    ];
        AIR_ISELR0_ISEL21              = (*AIR_ISELR0)["ISEL21"    ];
        AIR_ISELR0_ISEL20              = (*AIR_ISELR0)["ISEL20"    ];
        AIR_ISELR0_ISEL19              = (*AIR_ISELR0)["ISEL19"    ];
        AIR_ISELR0_ISEL18              = (*AIR_ISELR0)["ISEL18"    ];
        AIR_ISELR0_ISEL17              = (*AIR_ISELR0)["ISEL17"    ];
        AIR_ISELR0_ISEL16              = (*AIR_ISELR0)["ISEL16"    ];
        AIR_ISELR0_ISEL15              = (*AIR_ISELR0)["ISEL15"    ];
        AIR_ISELR0_ISEL14              = (*AIR_ISELR0)["ISEL14"    ];
        AIR_ISELR0_ISEL13              = (*AIR_ISELR0)["ISEL13"    ];
        AIR_ISELR0_ISEL12              = (*AIR_ISELR0)["ISEL12"    ];
        AIR_ISELR0_ISEL11              = (*AIR_ISELR0)["ISEL11"    ];
        AIR_ISELR0_ISEL10              = (*AIR_ISELR0)["ISEL10"    ];
        AIR_ISELR0_ISEL9               = (*AIR_ISELR0)["ISEL9"     ];
        AIR_ISELR0_ISEL8               = (*AIR_ISELR0)["ISEL8"     ];
        AIR_ISELR0_ISEL7               = (*AIR_ISELR0)["ISEL7"     ];
        AIR_ISELR0_ISEL6               = (*AIR_ISELR0)["ISEL6"     ];
        AIR_ISELR0_ISEL5               = (*AIR_ISELR0)["ISEL5"     ];
        AIR_ISELR0_ISEL4               = (*AIR_ISELR0)["ISEL4"     ];
        AIR_ISELR0_ISEL3               = (*AIR_ISELR0)["ISEL3"     ];
        AIR_ISELR0_ISEL2               = (*AIR_ISELR0)["ISEL2"     ];
        AIR_ISELR0_ISEL1               = (*AIR_ISELR0)["ISEL1"     ];
        AIR_ISELR0_ISEL0               = (*AIR_ISELR0)["ISEL0"     ];
        return;
    }
    if (addr == 0x0004) {
        AIR_ISELR1_ISEL63              = (*AIR_ISELR1)["ISEL63"    ];
        AIR_ISELR1_ISEL62              = (*AIR_ISELR1)["ISEL62"    ];
        AIR_ISELR1_ISEL61              = (*AIR_ISELR1)["ISEL61"    ];
        AIR_ISELR1_ISEL60              = (*AIR_ISELR1)["ISEL60"    ];
        AIR_ISELR1_ISEL59              = (*AIR_ISELR1)["ISEL59"    ];
        AIR_ISELR1_ISEL58              = (*AIR_ISELR1)["ISEL58"    ];
        AIR_ISELR1_ISEL57              = (*AIR_ISELR1)["ISEL57"    ];
        AIR_ISELR1_ISEL56              = (*AIR_ISELR1)["ISEL56"    ];
        AIR_ISELR1_ISEL55              = (*AIR_ISELR1)["ISEL55"    ];
        AIR_ISELR1_ISEL54              = (*AIR_ISELR1)["ISEL54"    ];
        AIR_ISELR1_ISEL53              = (*AIR_ISELR1)["ISEL53"    ];
        AIR_ISELR1_ISEL52              = (*AIR_ISELR1)["ISEL52"    ];
        AIR_ISELR1_ISEL51              = (*AIR_ISELR1)["ISEL51"    ];
        AIR_ISELR1_ISEL50              = (*AIR_ISELR1)["ISEL50"    ];
        AIR_ISELR1_ISEL49              = (*AIR_ISELR1)["ISEL49"    ];
        AIR_ISELR1_ISEL48              = (*AIR_ISELR1)["ISEL48"    ];
        AIR_ISELR1_ISEL47              = (*AIR_ISELR1)["ISEL47"    ];
        AIR_ISELR1_ISEL46              = (*AIR_ISELR1)["ISEL46"    ];
        AIR_ISELR1_ISEL45              = (*AIR_ISELR1)["ISEL45"    ];
        AIR_ISELR1_ISEL44              = (*AIR_ISELR1)["ISEL44"    ];
        AIR_ISELR1_ISEL43              = (*AIR_ISELR1)["ISEL43"    ];
        AIR_ISELR1_ISEL42              = (*AIR_ISELR1)["ISEL42"    ];
        AIR_ISELR1_ISEL41              = (*AIR_ISELR1)["ISEL41"    ];
        AIR_ISELR1_ISEL40              = (*AIR_ISELR1)["ISEL40"    ];
        AIR_ISELR1_ISEL39              = (*AIR_ISELR1)["ISEL39"    ];
        AIR_ISELR1_ISEL38              = (*AIR_ISELR1)["ISEL38"    ];
        AIR_ISELR1_ISEL37              = (*AIR_ISELR1)["ISEL37"    ];
        AIR_ISELR1_ISEL36              = (*AIR_ISELR1)["ISEL36"    ];
        AIR_ISELR1_ISEL35              = (*AIR_ISELR1)["ISEL35"    ];
        AIR_ISELR1_ISEL34              = (*AIR_ISELR1)["ISEL34"    ];
        AIR_ISELR1_ISEL33              = (*AIR_ISELR1)["ISEL33"    ];
        AIR_ISELR1_ISEL32              = (*AIR_ISELR1)["ISEL32"    ];
        return;
    }
    if (addr == 0x0008) {
        AIR_DSELR0_DSEL31              = (*AIR_DSELR0)["DSEL31"    ];
        AIR_DSELR0_DSEL30              = (*AIR_DSELR0)["DSEL30"    ];
        AIR_DSELR0_DSEL29              = (*AIR_DSELR0)["DSEL29"    ];
        AIR_DSELR0_DSEL28              = (*AIR_DSELR0)["DSEL28"    ];
        AIR_DSELR0_DSEL27              = (*AIR_DSELR0)["DSEL27"    ];
        AIR_DSELR0_DSEL26              = (*AIR_DSELR0)["DSEL26"    ];
        AIR_DSELR0_DSEL25              = (*AIR_DSELR0)["DSEL25"    ];
        AIR_DSELR0_DSEL24              = (*AIR_DSELR0)["DSEL24"    ];
        AIR_DSELR0_DSEL23              = (*AIR_DSELR0)["DSEL23"    ];
        AIR_DSELR0_DSEL22              = (*AIR_DSELR0)["DSEL22"    ];
        AIR_DSELR0_DSEL21              = (*AIR_DSELR0)["DSEL21"    ];
        AIR_DSELR0_DSEL20              = (*AIR_DSELR0)["DSEL20"    ];
        AIR_DSELR0_DSEL19              = (*AIR_DSELR0)["DSEL19"    ];
        AIR_DSELR0_DSEL18              = (*AIR_DSELR0)["DSEL18"    ];
        AIR_DSELR0_DSEL17              = (*AIR_DSELR0)["DSEL17"    ];
        AIR_DSELR0_DSEL16              = (*AIR_DSELR0)["DSEL16"    ];
        AIR_DSELR0_DSEL15              = (*AIR_DSELR0)["DSEL15"    ];
        AIR_DSELR0_DSEL14              = (*AIR_DSELR0)["DSEL14"    ];
        AIR_DSELR0_DSEL13              = (*AIR_DSELR0)["DSEL13"    ];
        AIR_DSELR0_DSEL12              = (*AIR_DSELR0)["DSEL12"    ];
        AIR_DSELR0_DSEL11              = (*AIR_DSELR0)["DSEL11"    ];
        AIR_DSELR0_DSEL10              = (*AIR_DSELR0)["DSEL10"    ];
        AIR_DSELR0_DSEL9               = (*AIR_DSELR0)["DSEL9"     ];
        AIR_DSELR0_DSEL8               = (*AIR_DSELR0)["DSEL8"     ];
        AIR_DSELR0_DSEL7               = (*AIR_DSELR0)["DSEL7"     ];
        AIR_DSELR0_DSEL6               = (*AIR_DSELR0)["DSEL6"     ];
        AIR_DSELR0_DSEL5               = (*AIR_DSELR0)["DSEL5"     ];
        AIR_DSELR0_DSEL4               = (*AIR_DSELR0)["DSEL4"     ];
        AIR_DSELR0_DSEL3               = (*AIR_DSELR0)["DSEL3"     ];
        AIR_DSELR0_DSEL2               = (*AIR_DSELR0)["DSEL2"     ];
        AIR_DSELR0_DSEL1               = (*AIR_DSELR0)["DSEL1"     ];
        AIR_DSELR0_DSEL0               = (*AIR_DSELR0)["DSEL0"     ];
        return;
    }
    if (addr == 0x000C) {
        AIR_DSELR1_DSEL63              = (*AIR_DSELR1)["DSEL63"    ];
        AIR_DSELR1_DSEL62              = (*AIR_DSELR1)["DSEL62"    ];
        AIR_DSELR1_DSEL61              = (*AIR_DSELR1)["DSEL61"    ];
        AIR_DSELR1_DSEL60              = (*AIR_DSELR1)["DSEL60"    ];
        AIR_DSELR1_DSEL59              = (*AIR_DSELR1)["DSEL59"    ];
        AIR_DSELR1_DSEL58              = (*AIR_DSELR1)["DSEL58"    ];
        AIR_DSELR1_DSEL57              = (*AIR_DSELR1)["DSEL57"    ];
        AIR_DSELR1_DSEL56              = (*AIR_DSELR1)["DSEL56"    ];
        AIR_DSELR1_DSEL55              = (*AIR_DSELR1)["DSEL55"    ];
        AIR_DSELR1_DSEL54              = (*AIR_DSELR1)["DSEL54"    ];
        AIR_DSELR1_DSEL53              = (*AIR_DSELR1)["DSEL53"    ];
        AIR_DSELR1_DSEL52              = (*AIR_DSELR1)["DSEL52"    ];
        AIR_DSELR1_DSEL51              = (*AIR_DSELR1)["DSEL51"    ];
        AIR_DSELR1_DSEL50              = (*AIR_DSELR1)["DSEL50"    ];
        AIR_DSELR1_DSEL49              = (*AIR_DSELR1)["DSEL49"    ];
        AIR_DSELR1_DSEL48              = (*AIR_DSELR1)["DSEL48"    ];
        AIR_DSELR1_DSEL47              = (*AIR_DSELR1)["DSEL47"    ];
        AIR_DSELR1_DSEL46              = (*AIR_DSELR1)["DSEL46"    ];
        AIR_DSELR1_DSEL45              = (*AIR_DSELR1)["DSEL45"    ];
        AIR_DSELR1_DSEL44              = (*AIR_DSELR1)["DSEL44"    ];
        AIR_DSELR1_DSEL43              = (*AIR_DSELR1)["DSEL43"    ];
        AIR_DSELR1_DSEL42              = (*AIR_DSELR1)["DSEL42"    ];
        AIR_DSELR1_DSEL41              = (*AIR_DSELR1)["DSEL41"    ];
        AIR_DSELR1_DSEL40              = (*AIR_DSELR1)["DSEL40"    ];
        AIR_DSELR1_DSEL39              = (*AIR_DSELR1)["DSEL39"    ];
        AIR_DSELR1_DSEL38              = (*AIR_DSELR1)["DSEL38"    ];
        AIR_DSELR1_DSEL37              = (*AIR_DSELR1)["DSEL37"    ];
        AIR_DSELR1_DSEL36              = (*AIR_DSELR1)["DSEL36"    ];
        AIR_DSELR1_DSEL35              = (*AIR_DSELR1)["DSEL35"    ];
        AIR_DSELR1_DSEL34              = (*AIR_DSELR1)["DSEL34"    ];
        AIR_DSELR1_DSEL33              = (*AIR_DSELR1)["DSEL33"    ];
        AIR_DSELR1_DSEL32              = (*AIR_DSELR1)["DSEL32"    ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cair_core_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*AIR_ISELR0)["ISEL31"    ] = AIR_ISELR0_ISEL31;
        (*AIR_ISELR0)["ISEL30"    ] = AIR_ISELR0_ISEL30;
        (*AIR_ISELR0)["ISEL29"    ] = AIR_ISELR0_ISEL29;
        (*AIR_ISELR0)["ISEL28"    ] = AIR_ISELR0_ISEL28;
        (*AIR_ISELR0)["ISEL27"    ] = AIR_ISELR0_ISEL27;
        (*AIR_ISELR0)["ISEL26"    ] = AIR_ISELR0_ISEL26;
        (*AIR_ISELR0)["ISEL25"    ] = AIR_ISELR0_ISEL25;
        (*AIR_ISELR0)["ISEL24"    ] = AIR_ISELR0_ISEL24;
        (*AIR_ISELR0)["ISEL23"    ] = AIR_ISELR0_ISEL23;
        (*AIR_ISELR0)["ISEL22"    ] = AIR_ISELR0_ISEL22;
        (*AIR_ISELR0)["ISEL21"    ] = AIR_ISELR0_ISEL21;
        (*AIR_ISELR0)["ISEL20"    ] = AIR_ISELR0_ISEL20;
        (*AIR_ISELR0)["ISEL19"    ] = AIR_ISELR0_ISEL19;
        (*AIR_ISELR0)["ISEL18"    ] = AIR_ISELR0_ISEL18;
        (*AIR_ISELR0)["ISEL17"    ] = AIR_ISELR0_ISEL17;
        (*AIR_ISELR0)["ISEL16"    ] = AIR_ISELR0_ISEL16;
        (*AIR_ISELR0)["ISEL15"    ] = AIR_ISELR0_ISEL15;
        (*AIR_ISELR0)["ISEL14"    ] = AIR_ISELR0_ISEL14;
        (*AIR_ISELR0)["ISEL13"    ] = AIR_ISELR0_ISEL13;
        (*AIR_ISELR0)["ISEL12"    ] = AIR_ISELR0_ISEL12;
        (*AIR_ISELR0)["ISEL11"    ] = AIR_ISELR0_ISEL11;
        (*AIR_ISELR0)["ISEL10"    ] = AIR_ISELR0_ISEL10;
        (*AIR_ISELR0)["ISEL9"     ] = AIR_ISELR0_ISEL9;
        (*AIR_ISELR0)["ISEL8"     ] = AIR_ISELR0_ISEL8;
        (*AIR_ISELR0)["ISEL7"     ] = AIR_ISELR0_ISEL7;
        (*AIR_ISELR0)["ISEL6"     ] = AIR_ISELR0_ISEL6;
        (*AIR_ISELR0)["ISEL5"     ] = AIR_ISELR0_ISEL5;
        (*AIR_ISELR0)["ISEL4"     ] = AIR_ISELR0_ISEL4;
        (*AIR_ISELR0)["ISEL3"     ] = AIR_ISELR0_ISEL3;
        (*AIR_ISELR0)["ISEL2"     ] = AIR_ISELR0_ISEL2;
        (*AIR_ISELR0)["ISEL1"     ] = AIR_ISELR0_ISEL1;
        (*AIR_ISELR0)["ISEL0"     ] = AIR_ISELR0_ISEL0;
        return;
    }
    if (addr == 0x0004) {
        (*AIR_ISELR1)["ISEL63"    ] = AIR_ISELR1_ISEL63;
        (*AIR_ISELR1)["ISEL62"    ] = AIR_ISELR1_ISEL62;
        (*AIR_ISELR1)["ISEL61"    ] = AIR_ISELR1_ISEL61;
        (*AIR_ISELR1)["ISEL60"    ] = AIR_ISELR1_ISEL60;
        (*AIR_ISELR1)["ISEL59"    ] = AIR_ISELR1_ISEL59;
        (*AIR_ISELR1)["ISEL58"    ] = AIR_ISELR1_ISEL58;
        (*AIR_ISELR1)["ISEL57"    ] = AIR_ISELR1_ISEL57;
        (*AIR_ISELR1)["ISEL56"    ] = AIR_ISELR1_ISEL56;
        (*AIR_ISELR1)["ISEL55"    ] = AIR_ISELR1_ISEL55;
        (*AIR_ISELR1)["ISEL54"    ] = AIR_ISELR1_ISEL54;
        (*AIR_ISELR1)["ISEL53"    ] = AIR_ISELR1_ISEL53;
        (*AIR_ISELR1)["ISEL52"    ] = AIR_ISELR1_ISEL52;
        (*AIR_ISELR1)["ISEL51"    ] = AIR_ISELR1_ISEL51;
        (*AIR_ISELR1)["ISEL50"    ] = AIR_ISELR1_ISEL50;
        (*AIR_ISELR1)["ISEL49"    ] = AIR_ISELR1_ISEL49;
        (*AIR_ISELR1)["ISEL48"    ] = AIR_ISELR1_ISEL48;
        (*AIR_ISELR1)["ISEL47"    ] = AIR_ISELR1_ISEL47;
        (*AIR_ISELR1)["ISEL46"    ] = AIR_ISELR1_ISEL46;
        (*AIR_ISELR1)["ISEL45"    ] = AIR_ISELR1_ISEL45;
        (*AIR_ISELR1)["ISEL44"    ] = AIR_ISELR1_ISEL44;
        (*AIR_ISELR1)["ISEL43"    ] = AIR_ISELR1_ISEL43;
        (*AIR_ISELR1)["ISEL42"    ] = AIR_ISELR1_ISEL42;
        (*AIR_ISELR1)["ISEL41"    ] = AIR_ISELR1_ISEL41;
        (*AIR_ISELR1)["ISEL40"    ] = AIR_ISELR1_ISEL40;
        (*AIR_ISELR1)["ISEL39"    ] = AIR_ISELR1_ISEL39;
        (*AIR_ISELR1)["ISEL38"    ] = AIR_ISELR1_ISEL38;
        (*AIR_ISELR1)["ISEL37"    ] = AIR_ISELR1_ISEL37;
        (*AIR_ISELR1)["ISEL36"    ] = AIR_ISELR1_ISEL36;
        (*AIR_ISELR1)["ISEL35"    ] = AIR_ISELR1_ISEL35;
        (*AIR_ISELR1)["ISEL34"    ] = AIR_ISELR1_ISEL34;
        (*AIR_ISELR1)["ISEL33"    ] = AIR_ISELR1_ISEL33;
        (*AIR_ISELR1)["ISEL32"    ] = AIR_ISELR1_ISEL32;
        return;
    }
    if (addr == 0x0008) {
        (*AIR_DSELR0)["DSEL31"    ] = AIR_DSELR0_DSEL31;
        (*AIR_DSELR0)["DSEL30"    ] = AIR_DSELR0_DSEL30;
        (*AIR_DSELR0)["DSEL29"    ] = AIR_DSELR0_DSEL29;
        (*AIR_DSELR0)["DSEL28"    ] = AIR_DSELR0_DSEL28;
        (*AIR_DSELR0)["DSEL27"    ] = AIR_DSELR0_DSEL27;
        (*AIR_DSELR0)["DSEL26"    ] = AIR_DSELR0_DSEL26;
        (*AIR_DSELR0)["DSEL25"    ] = AIR_DSELR0_DSEL25;
        (*AIR_DSELR0)["DSEL24"    ] = AIR_DSELR0_DSEL24;
        (*AIR_DSELR0)["DSEL23"    ] = AIR_DSELR0_DSEL23;
        (*AIR_DSELR0)["DSEL22"    ] = AIR_DSELR0_DSEL22;
        (*AIR_DSELR0)["DSEL21"    ] = AIR_DSELR0_DSEL21;
        (*AIR_DSELR0)["DSEL20"    ] = AIR_DSELR0_DSEL20;
        (*AIR_DSELR0)["DSEL19"    ] = AIR_DSELR0_DSEL19;
        (*AIR_DSELR0)["DSEL18"    ] = AIR_DSELR0_DSEL18;
        (*AIR_DSELR0)["DSEL17"    ] = AIR_DSELR0_DSEL17;
        (*AIR_DSELR0)["DSEL16"    ] = AIR_DSELR0_DSEL16;
        (*AIR_DSELR0)["DSEL15"    ] = AIR_DSELR0_DSEL15;
        (*AIR_DSELR0)["DSEL14"    ] = AIR_DSELR0_DSEL14;
        (*AIR_DSELR0)["DSEL13"    ] = AIR_DSELR0_DSEL13;
        (*AIR_DSELR0)["DSEL12"    ] = AIR_DSELR0_DSEL12;
        (*AIR_DSELR0)["DSEL11"    ] = AIR_DSELR0_DSEL11;
        (*AIR_DSELR0)["DSEL10"    ] = AIR_DSELR0_DSEL10;
        (*AIR_DSELR0)["DSEL9"     ] = AIR_DSELR0_DSEL9;
        (*AIR_DSELR0)["DSEL8"     ] = AIR_DSELR0_DSEL8;
        (*AIR_DSELR0)["DSEL7"     ] = AIR_DSELR0_DSEL7;
        (*AIR_DSELR0)["DSEL6"     ] = AIR_DSELR0_DSEL6;
        (*AIR_DSELR0)["DSEL5"     ] = AIR_DSELR0_DSEL5;
        (*AIR_DSELR0)["DSEL4"     ] = AIR_DSELR0_DSEL4;
        (*AIR_DSELR0)["DSEL3"     ] = AIR_DSELR0_DSEL3;
        (*AIR_DSELR0)["DSEL2"     ] = AIR_DSELR0_DSEL2;
        (*AIR_DSELR0)["DSEL1"     ] = AIR_DSELR0_DSEL1;
        (*AIR_DSELR0)["DSEL0"     ] = AIR_DSELR0_DSEL0;
        return;
    }
    if (addr == 0x000C) {
        (*AIR_DSELR1)["DSEL63"    ] = AIR_DSELR1_DSEL63;
        (*AIR_DSELR1)["DSEL62"    ] = AIR_DSELR1_DSEL62;
        (*AIR_DSELR1)["DSEL61"    ] = AIR_DSELR1_DSEL61;
        (*AIR_DSELR1)["DSEL60"    ] = AIR_DSELR1_DSEL60;
        (*AIR_DSELR1)["DSEL59"    ] = AIR_DSELR1_DSEL59;
        (*AIR_DSELR1)["DSEL58"    ] = AIR_DSELR1_DSEL58;
        (*AIR_DSELR1)["DSEL57"    ] = AIR_DSELR1_DSEL57;
        (*AIR_DSELR1)["DSEL56"    ] = AIR_DSELR1_DSEL56;
        (*AIR_DSELR1)["DSEL55"    ] = AIR_DSELR1_DSEL55;
        (*AIR_DSELR1)["DSEL54"    ] = AIR_DSELR1_DSEL54;
        (*AIR_DSELR1)["DSEL53"    ] = AIR_DSELR1_DSEL53;
        (*AIR_DSELR1)["DSEL52"    ] = AIR_DSELR1_DSEL52;
        (*AIR_DSELR1)["DSEL51"    ] = AIR_DSELR1_DSEL51;
        (*AIR_DSELR1)["DSEL50"    ] = AIR_DSELR1_DSEL50;
        (*AIR_DSELR1)["DSEL49"    ] = AIR_DSELR1_DSEL49;
        (*AIR_DSELR1)["DSEL48"    ] = AIR_DSELR1_DSEL48;
        (*AIR_DSELR1)["DSEL47"    ] = AIR_DSELR1_DSEL47;
        (*AIR_DSELR1)["DSEL46"    ] = AIR_DSELR1_DSEL46;
        (*AIR_DSELR1)["DSEL45"    ] = AIR_DSELR1_DSEL45;
        (*AIR_DSELR1)["DSEL44"    ] = AIR_DSELR1_DSEL44;
        (*AIR_DSELR1)["DSEL43"    ] = AIR_DSELR1_DSEL43;
        (*AIR_DSELR1)["DSEL42"    ] = AIR_DSELR1_DSEL42;
        (*AIR_DSELR1)["DSEL41"    ] = AIR_DSELR1_DSEL41;
        (*AIR_DSELR1)["DSEL40"    ] = AIR_DSELR1_DSEL40;
        (*AIR_DSELR1)["DSEL39"    ] = AIR_DSELR1_DSEL39;
        (*AIR_DSELR1)["DSEL38"    ] = AIR_DSELR1_DSEL38;
        (*AIR_DSELR1)["DSEL37"    ] = AIR_DSELR1_DSEL37;
        (*AIR_DSELR1)["DSEL36"    ] = AIR_DSELR1_DSEL36;
        (*AIR_DSELR1)["DSEL35"    ] = AIR_DSELR1_DSEL35;
        (*AIR_DSELR1)["DSEL34"    ] = AIR_DSELR1_DSEL34;
        (*AIR_DSELR1)["DSEL33"    ] = AIR_DSELR1_DSEL33;
        (*AIR_DSELR1)["DSEL32"    ] = AIR_DSELR1_DSEL32;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cair_core_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cair_core_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cair_core_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,4, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cair_core_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<4)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cair_core_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cair_core_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cair_core_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cair_core_regif::uint Cair_core_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cair_core_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    } else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cair_core_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cair_core_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cair_core_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if (is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cair_core_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Cair_core_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Cair_core_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
