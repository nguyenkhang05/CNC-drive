// -----------------------------------------------------------------------------
// $Id: dfe0051_fifo_regif.h,v 1.1 2017/07/14 03:22:20 chuonghoangle Exp $
//
// Copyright(c) 2017 Renesas Electronics Corporation
// Copyright(c) 2017 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : ../dfe0051_fifo_regif.txt
////////////////////////////////////////////////////////////////////////////////
// 
// 
// %MODULE DFE0051_FIFO
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
// 
// %%TITLE    name         reg_name    wsize       rsize      length    offset    factor_start    factor_end    factor_index    factor_step    access     init             support     callback
// %%REG      DFBFACCTL    DFBFACCTL   8|16|32     8|16|32    32        0x0000    -               -             -               -              R|W        0x00000000       TRUE        R|W
// %%REG      DFBFACTLCH   DFBFACTLCH  8|16|32     8|16|32    32        0x0010    0               7             -               0x4            R|W        0x00000000       TRUE        R|W
// %%REG      DFBFADOCH    DFBFADOCH   32          8|16|32    32        0x0050    0               7             -               0x4            R          0x00000000       TRUE        R|W
// %%REG      DFBFACLR     DFBFACLR    8|16|32     8|16|32    32        0x0090    -               -             -               -              R|W1:0     0x00000000       TRUE        R|W
// %%REG      DFBFACST     DFBFACST    32          8|16|32    32        0x00A0    -               -             -               -              R          0x003F0000       TRUE        R|W
// %%REG      DFBFBCTL     DFBFBCTL    8|16|32     8|16|32    32        0x00B0    -               -             -               -              R|W        0x00000000       TRUE        R|W
// %%REG      DFBFBDO      DFBFBDO     32          8|16|32    32        0x00B4    -               -             -               -              R          0x00000000       TRUE        R|W
// %%REG      DFBFBCLR     DFBFBCLR    8|16|32     8|16|32    32        0x00B8    -               -             -               -              R|W1:0     0x00000000       TRUE        R|W
// %%REG      DFBFBST      DFBFBST     32          8|16|32    32        0x00BC    -               -             -               -              R          0x00000020       TRUE        R|W
// 
// 
// #-------------------------------------------------------------------------------
// # Buffer A common control register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFACCTL
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      AEN     0        0        0       R|W       TRUE       R|W
// %%BIT      AIEO    1        1        0       R|W       TRUE       R|W
// %%BIT      AIEE    2        2        0       R|W       TRUE       R|W
// %%BIT      AUNE    3        3        0       R|W       TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # Buffer A control register (FCH(z)) for FIFO channel (z)
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFACTLCH
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CHEN    0        0        0       R|W       TRUE       R|W
// %%BIT      ADSL    3        3        0       R|W       TRUE       R|W
// %%BIT      BFACH   11       8        0       R|W       TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # Buffer A output register (FCH(z)) for FIFO channel (z)
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFADOCH
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      ADO     31       0        0       R         TRUE       R
// 
// #-------------------------------------------------------------------------------
// # Buffer A clear register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFACLR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CLRA    0        0        0       R|W1:0    TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # Buffer A common status register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFACST
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      OVFA     7        0        0       R         TRUE       R
// %%BIT      EMPA     23       16       255     R         TRUE       R
// 
// #-------------------------------------------------------------------------------
// # Buffer B control register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFBCTL
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      BEN     0        0        0       R|W       TRUE       R|W
// %%BIT      BIEO    1        1        0       R|W       TRUE       R|W
// %%BIT      BIEE    2        2        0       R|W       TRUE       R|W
// %%BIT      BDSL    3        3        0       R|W       TRUE       R|W
// %%BIT      BFBCH   11       8        0       R|W       TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # Buffer B output register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFBDO
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      BDO     31       0        0       R         TRUE       R
// 
// #-------------------------------------------------------------------------------
// # Buffer B clear register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFBCLR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CLRB    0        0        0       R|W1:0    TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # Buffer B status register
// #-------------------------------------------------------------------------------
// %REG_NAME  DFBFBST
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      OVFB    0        0        0       R         TRUE       R
// %%BIT      EMPB    1        1        1       R         TRUE       R
// 
////////////////////////////////////////////////////////////////////////////////
/// @file dfe0051_fifo_regif.h
/// @brief Register IF class of model DFE0051_FIFO
/// $Id: dfe0051_fifo_regif.h,v 1.1 2017/07/14 03:22:20 chuonghoangle Exp $
/// $Date: 2017/07/14 03:22:20 $
/// $Revison$
/// $Author: chuonghoangle $
////////////////////////////////////////////////////////////////////////////////
#ifndef __DFE0051_FIFO_REGIF_H__
#define __DFE0051_FIFO_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of DFE0051_FIFO model
class Cdfe0051_fifo_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_DFBFACTLCH = 8,
        emNUM_DFBFADOCH  = 8
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cdfe0051_fifo_regif(std::string name, uint buswidth);
    ~Cdfe0051_fifo_regif();

protected:
    vpcl::re_register *DFBFACCTL ;
    vpcl::re_register *DFBFACTLCH[8];
    vpcl::re_register *DFBFADOCH [8];
    vpcl::re_register *DFBFACLR  ;
    vpcl::re_register *DFBFACST  ;
    vpcl::re_register *DFBFBCTL  ;
    vpcl::re_register *DFBFBDO   ;
    vpcl::re_register *DFBFBCLR  ;
    vpcl::re_register *DFBFBST   ;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_DFBFACCTL ;
    scml2::reg<uint> *CW_DFBFACTLCH[8];
    scml2::reg<uint> *CW_DFBFADOCH [8];
    scml2::reg<uint> *CW_DFBFACLR  ;
    scml2::reg<uint> *CW_DFBFACST  ;
    scml2::reg<uint> *CW_DFBFBCTL  ;
    scml2::reg<uint> *CW_DFBFBDO   ;
    scml2::reg<uint> *CW_DFBFBCLR  ;
    scml2::reg<uint> *CW_DFBFBST   ;
    #endif

    uint DFBFACCTL_AEN;
    uint DFBFACCTL_AIEO;
    uint DFBFACCTL_AIEE;
    uint DFBFACCTL_AUNE;
    uint DFBFACTLCH_CHEN[8];
    uint DFBFACTLCH_ADSL[8];
    uint DFBFACTLCH_BFACH[8];
    uint DFBFADOCH_ADO[8];
    uint DFBFACLR_CLRA;
    uint DFBFACST_OVFA;
    uint DFBFACST_EMPA;
    uint DFBFBCTL_BEN ;
    uint DFBFBCTL_BIEO;
    uint DFBFBCTL_BIEE;
    uint DFBFBCTL_BDSL;
    uint DFBFBCTL_BFBCH;
    uint DFBFBDO_BDO  ;
    uint DFBFBCLR_CLRB;
    uint DFBFBST_OVFB ;
    uint DFBFBST_EMPB ;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DFBFACCTL_AEN(RegCBstr str) = 0;
    virtual void cb_DFBFACCTL_AIEO(RegCBstr str) = 0;
    virtual void cb_DFBFACCTL_AIEE(RegCBstr str) = 0;
    virtual void cb_DFBFACCTL_AUNE(RegCBstr str) = 0;
    virtual void cb_DFBFACTLCH_CHEN(RegCBstr str) = 0;
    virtual void cb_DFBFACTLCH_ADSL(RegCBstr str) = 0;
    virtual void cb_DFBFACTLCH_BFACH(RegCBstr str) = 0;
    virtual void cb_DFBFADOCH_ADO(RegCBstr str) = 0;
    virtual void cb_DFBFACLR_CLRA(RegCBstr str) = 0;
    virtual void cb_DFBFACST_OVFA(RegCBstr str) = 0;
    virtual void cb_DFBFACST_EMPA(RegCBstr str) = 0;
    virtual void cb_DFBFBCTL_BEN(RegCBstr str) = 0;
    virtual void cb_DFBFBCTL_BIEO(RegCBstr str) = 0;
    virtual void cb_DFBFBCTL_BIEE(RegCBstr str) = 0;
    virtual void cb_DFBFBCTL_BDSL(RegCBstr str) = 0;
    virtual void cb_DFBFBCTL_BFBCH(RegCBstr str) = 0;
    virtual void cb_DFBFBDO_BDO(RegCBstr str) = 0;
    virtual void cb_DFBFBCLR_CLRB(RegCBstr str) = 0;
    virtual void cb_DFBFBST_OVFB(RegCBstr str) = 0;
    virtual void cb_DFBFBST_EMPB(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cdfe0051_fifo_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cdfe0051_fifo_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__DFE0051_FIFO_REG_DEF_H__
