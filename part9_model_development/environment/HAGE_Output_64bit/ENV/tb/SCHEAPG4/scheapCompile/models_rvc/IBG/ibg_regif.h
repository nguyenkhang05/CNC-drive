// -----------------------------------------------------------------------------
// $Id: ibg_regif.h,v 1.6 2019/05/30 01:49:33 nhuvo Exp $
//
// Copyright(c) 2016-2019 Renesas Electronics Corporation
// Copyright(c) 2016-2019 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : ../../input/ibg/ibg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE IBG
//     # the IBG contains 4 parts of registers with base addresses
//     #    32'hFFC6_A000 BARR
//     # consider these part as a continous range, the range of the whole IBG
//     # becomes from 32'hFFC6_A000 to 32'hFFC6_A1FF, with base address 
//     # is 32'hFFC6_A000 and offset part specifies the range from 0x000 to 0x1FF
//     # size of offset part (0x1FF = 9'b111111111) should be 9 bit
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// %REG_CHANNEL reg_def
// #######################################################################################################################################################
// #  Module Name  Register Name                               Symbol                  Address                               Access      Access Protection
// #  GUARD_BARR  Guard error clear register                   GERRCLR                 <GUARD_base> + 00H               8|32
// #              Guard error status register                  GERRSTAT                <GUARD_base> + 04H               8|32
// #              Guard error address register                 GERRADDR                <GUARD_base> + 08H               32
// #              Guard error access information register      GERRTYPE                <GUARD_base> + 0CH               16|32
// #              Key code protection register                 GKCPROT                 <GUARD_base> + 10H               32
// #              Channel protection control register          GPROT0_n (n = 0-15)     <GUARD_base> + 80H + n x 08H    8|16|32           GKCPROT
// #              Channel SPID setting register                GPROT1_n (n = 0-15)     <GUARD_base> + 84H + n x 08H    8|16|32           GKCPROT
// #######################################################################################################################################################
// %%TITLE    name          reg_name      wsize     rsize      length    offset    factor_start    factor_end    factor_index    factor_step    access     init             support     callback
// %%REG      GERRCLR       GERRCLR        8|32     8|16|32    32        0x000     -               -             -               -              R|W1:0     0x00000000       TRUE        R|W
// %%REG      GERRSTAT      GERRSTAT       8|32     8|16|32    32        0x004     -               -             -               -              R          0x00000000       TRUE        R|W
// %%REG      GERRADDR      GERRADDR         32     8|16|32    32        0x008     -               -             -               -              R          0x00000000       TRUE        R|W
// %%REG      GERRTYPE      GERRTYPE      16|32     8|16|32    32        0x00C     -               -             -               -              R          0x00000000       TRUE        R|W
// %%REG      GKCPROT       GKCPROT          32     8|16|32    32        0x010     -               -             -               -              R|W        0x00000000       TRUE        R|W
// %%REG      GPROT0        GPROT0_     8|16|32     8|16|32    32        0x080     0               16            -               0x08           R|W        0x00000000       TRUE        R|W
// %%REG      GPROT1        GPROT1_     8|16|32     8|16|32    32        0x084     0               16            -               0x08           R|W        0x00000000       TRUE        R|W
// 
// #-------------------------------------------------------------------------------
// # Guard error clear register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRCLR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CLRE    0        0        0       R|W1:0    TRUE       R|W
// %%BIT      CLRO    1        1        0       R|W1:0    TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// #  Guard error status register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRSTAT
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      ERR     0        0        0       R         TRUE       -
// %%BIT      OVF     1        1        0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard error address register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRADDR
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      ADDR    31       0        0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Guard error access information register
// #-------------------------------------------------------------------------------
// %REG_NAME GERRTYPE
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      WRITE   0        0        0       R         TRUE       -
// %%BIT      SPID    10       6        0       R         TRUE       -
// %%BIT      UM      11       11       0       R         TRUE       -
// %%BIT      DBG     12       12       0       R         TRUE       -
// %%BIT      SEC     13       13       0       R         TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Key code protection register
// #-------------------------------------------------------------------------------
// %REG_NAME GKCPROT
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      KCE     0        0        0       R|W       TRUE       R|W
// %%BIT      KCPROT  31       1        0         W       TRUE       R|W
// 
// 
// #-------------------------------------------------------------------------------
// #  Channel protection control register
// #-------------------------------------------------------------------------------
// %REG_NAME GPROT0
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      RG      0        0        0       R|W       TRUE       R|W
// %%BIT      WG      1        1        0       R|W       TRUE       R|W
// %%BIT      UM      4        4        0       R|W       TRUE       -
// %%BIT      DBG     6        6        0       R|W       TRUE       -
// %%BIT      GEN     8        8        0       R|W       TRUE       -
// 
// #-------------------------------------------------------------------------------
// #  Channel SPID setting register
// #-------------------------------------------------------------------------------
// %REG_NAME GPROT1
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      SPID    31       0        0       R|W       TRUE       R|W
// 
// #######################################################################################################################################################
// # vim:nowrap
// #######################################################################################################################################################
////////////////////////////////////////////////////////////////////////////////
/// @file ibg_regif.h
/// @brief Register IF class of model IBG
/// $Id: ibg_regif.h,v 1.6 2019/05/30 01:49:33 nhuvo Exp $
/// $Date: 2019/05/30 01:49:33 $
/// $Revison$
/// $Author: nhuvo $
////////////////////////////////////////////////////////////////////////////////
#ifndef __IBG_REGIF_H__
#define __IBG_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of IBG model
class Cibg_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_GPROT0_  = 17,
        emNUM_GPROT1_  = 17
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
    uint channelNum;
    std::string strModelName;

public:
    Cibg_regif(std::string name, uint buswidth, uint iChannel);
    ~Cibg_regif();

protected:
    vpcl::re_register *GERRCLR ;
    vpcl::re_register *GERRSTAT;
    vpcl::re_register *GERRADDR;
    vpcl::re_register *GERRTYPE;
    vpcl::re_register *GKCPROT ;
    vpcl::re_register *GPROT0  [17];
    vpcl::re_register *GPROT1  [17];

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_GERRCLR ;
    scml2::reg<uint> *CW_GERRSTAT;
    scml2::reg<uint> *CW_GERRADDR;
    scml2::reg<uint> *CW_GERRTYPE;
    scml2::reg<uint> *CW_GKCPROT ;
    scml2::reg<uint> *CW_GPROT0  [17];
    scml2::reg<uint> *CW_GPROT1  [17];
    #endif

    uint GERRCLR_CLRE;
    uint GERRCLR_CLRO;
    uint GERRSTAT_ERR;
    uint GERRSTAT_OVF;
    uint GERRADDR_ADDR;
    uint GERRTYPE_WRITE;
    uint GERRTYPE_SPID;
    uint GERRTYPE_UM;
    uint GERRTYPE_DBG;
    uint GERRTYPE_SEC;
    uint GKCPROT_KCE;
    uint GKCPROT_KCPROT;
    uint GPROT0_RG  [17];
    uint GPROT0_WG  [17];
    uint GPROT0_UM  [17];
    uint GPROT0_DBG [17];
    uint GPROT0_GEN [17];
    uint GPROT1_SPID[17];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_GERRCLR_CLRE(RegCBstr str) = 0;
    virtual void cb_GERRCLR_CLRO(RegCBstr str) = 0;
    virtual void cb_GKCPROT_KCE(RegCBstr str) = 0;
    virtual void cb_GKCPROT_KCPROT(RegCBstr str) = 0;
    virtual void cb_GPROT0_RG(RegCBstr str) = 0;
    virtual void cb_GPROT0_WG(RegCBstr str) = 0;
    virtual void cb_GPROT1_SPID(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cibg_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cibg_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__IBG_REG_DEF_H__
