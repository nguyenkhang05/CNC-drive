// -----------------------------------------------------------------------------
// $Id: rhsb_regif.cpp,v 1.2 2018/08/02 08:08:50 ngathunguyen Exp $
//
// Copyright(c) 2016 - 2018 Renesas Electronics Corporation
// Copyright(c) 2016 - 2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : rhsb_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE RHSB
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         7
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name          reg_name     wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access  init        support  callback
//     %%REG    -      RHSBGC        RHSBGC       8|16|32  8|16|32  32      0x00    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBMSR       RHSBMSR      8|16|32  8|16|32  32      0x08    -             -           -             -            R       0x10000     TRUE     -  
//     %%REG    -      RHSBDCR       RHSBDCR        16|32  8|16|32  32      0x10    -             -           -             -            W|R     0x11FF00    TRUE     -  
//     %%REG    -      RHSBDEC       RHSBDEC      8|16|32  8|16|32  32      0x14    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBSDC       RHSBSDC        16|32  8|16|32  32      0x18    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDEBA      RHSBDEBA       16|32  8|16|32  32      0x20    0             3           -             0x4          W|R     0x0         TRUE     -  
//     %%REG    -      RHSBEBE0      RHSBEBE0       16|32  8|16|32  32      0x30    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBEBE1      RHSBEBE1       16|32  8|16|32  32      0x34    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDTC       RHSBDTC      8|16|32  8|16|32  32      0x38    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDCD       RHSBDCD        16|32  8|16|32  32      0x3C    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDDR0      RHSBDDR0       16|32  8|16|32  32      0x40    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDDR1      RHSBDDR1       16|32  8|16|32  32      0x44    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDED0      RHSBDED0       16|32  8|16|32  32      0x48    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBDED1      RHSBDED1       16|32  8|16|32  32      0x4C    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBUCR       RHSBUCR      8|16|32  8|16|32  32      0x50    -             -           -             -            W|R     0x1800      TRUE     -  
//     %%REG    -      RHSBUCC       RHSBUCC      8|16|32  8|16|32  32      0x54    -             -           -             -            W|R     0xF0F0F0F   TRUE     -  
//     %%REG    -      RHSBUCS       RHSBUCS      8|16|32  8|16|32  32      0x58    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBUDR       RHSBUDR      8|16|32  8|16|32  32      0x5C    -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RHSBUD        RHSBUD       8|16|32  8|16|32  32      0x60    0             1           -             0x4         W0|R     0x0         TRUE     -  
//     %%REG    -      RHSBUSS       RHSBUSS      8|16|32  8|16|32  32      0x70    -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RHSBIC        RHSBIC       8|16|32  8|16|32  32      0x74    -             -           -             -            W|R     0x0         TRUE     -  
//     %%REG    -      RHSBIS        RHSBIS       8|16|32  8|16|32  32      0x78    -             -           -             -            W0|R    0x0         TRUE     -  
//     %%REG    -      RHSBDCR1      RHSBDCR1     8|16|32  8|16|32  32      0x7C    -             -           -             -            W|R     0x0         TRUE     -  
// 
// %REG_NAME RHSBGC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    OPS              1      0      0         W|R     TRUE     W
//     %%BIT    UDE              16     16     0         W|R     TRUE     -
//     %%BIT    DDE              17     17     0         W|R     TRUE     -
//     %%BIT    DCDE             18     18     0         W|R     TRUE     -
// 
// %REG_NAME RHSBMSR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    UFA              0      0      0         R       TRUE     -
//     %%BIT    TPS              16     16     0x1       R       TRUE     -
//     %%BIT    DFA              26     24     0         R       TRUE     -
// 
// %REG_NAME RHSBDCR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DMS              1      0      0         W|R     TRUE     W
//     %%BIT    EIP              2      2      0         W|R     TRUE     -
//     %%BIT    EIM              3      3      0         W|R     TRUE     -
//     %%BIT    EE               5      4      0         W|R     TRUE     -
//     %%BIT    CAC              6      6      0         W|R     TRUE     -
//     %%BIT    CLP              7      7      0         W|R     TRUE     -
//     %%BIT    REP              16     8      0x1FF     W|R     TRUE     -
//     %%BIT    CTD              17     17     0         W|R     TRUE     -
//     %%BIT    CIM              19     18     0         W|R     TRUE     -
//     %%BIT    DBR              23     20     1         W|R     TRUE     -
//     %%BIT    DFP              29     24     0         W|R     TRUE     -
//     %%BIT    SLS              31     30     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDEC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    NDB3             3      0      0         W|R     TRUE     W
//     %%BIT    SSD3             5      4      0         W|R     TRUE     -
//     %%BIT    NDB2             11     8      0         W|R     TRUE     -
//     %%BIT    SSD2             13     12     0         W|R     TRUE     -
//     %%BIT    NDB1             19     16     0         W|R     TRUE     -
//     %%BIT    SSD1             21     20     0         W|R     TRUE     -
//     %%BIT    NDB0             27     24     0         W|R     TRUE     -
//     %%BIT    SSD0             29     28     0         W|R     TRUE     -
// 
// %REG_NAME RHSBSDC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DPL1             2      0      0         W|R     TRUE     W
//     %%BIT    CPS1             3      3      0         W|R     TRUE     -
//     %%BIT    SOLP1            4      4      0         W|R     TRUE     -
//     %%BIT    CSLP1            5      5      0         W|R     TRUE     -
//     %%BIT    APL1             10     8      0         W|R     TRUE     -
//     %%BIT    DPL0             18     16     0         W|R     TRUE     -
//     %%BIT    CPS0             19     19     0         W|R     TRUE     -
//     %%BIT    SOLP0            20     20     0         W|R     TRUE     -
//     %%BIT    CSLP0            21     21     0         W|R     TRUE     -
//     %%BIT    APL0             26     24     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDEBA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DSS0             1      0      0         W|R     TRUE     W
//     %%BIT    DSS1             3      2      0         W|R     TRUE     -
//     %%BIT    DSS2             5      4      0         W|R     TRUE     -
//     %%BIT    DSS3             7      6      0         W|R     TRUE     -
//     %%BIT    DSS4             9      8      0         W|R     TRUE     -
//     %%BIT    DSS5             11     10     0         W|R     TRUE     -
//     %%BIT    DSS6             13     12     0         W|R     TRUE     -
//     %%BIT    DSS7             15     14     0         W|R     TRUE     -
//     %%BIT    DSS8             17     16     0         W|R     TRUE     -
//     %%BIT    DSS9             19     18     0         W|R     TRUE     -
//     %%BIT    DSS10            21     20     0         W|R     TRUE     -
//     %%BIT    DSS11            23     22     0         W|R     TRUE     -
//     %%BIT    DSS12            25     24     0         W|R     TRUE     -
//     %%BIT    DSS13            27     26     0         W|R     TRUE     -
//     %%BIT    DSS14            29     28     0         W|R     TRUE     -
//     %%BIT    DSS15            31     30     0         W|R     TRUE     -
// 
// %REG_NAME RHSBEBE0
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    EBE23_16         7      0      0         W|R     TRUE     W
//     %%BIT    EBE31_24         15     8      0         W|R     TRUE     -
//     %%BIT    EBE7_0           23     16     0         W|R     TRUE     -
//     %%BIT    EBE15_8          31     24     0         W|R     TRUE     -
// 
// %REG_NAME RHSBEBE1
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    EBE55_48         7      0      0         W|R     TRUE     W
//     %%BIT    EBE63_56         15     8      0         W|R     TRUE     -
//     %%BIT    EBE39_32         23     16     0         W|R     TRUE     -
//     %%BIT    EBE47_40         31     24     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDTC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DTE              0      0      0         W|R     TRUE     W
//     %%BIT    TSR              1      1      0         W|R     TRUE     -
//     %%BIT    CTR              17     16     0         W|R     TRUE     -
//     %%BIT    SSCF             21     20     0         W|R     TRUE     -
//     %%BIT    NCB              28     24     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDCD
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    CB               31     0      0         W|R     TRUE     W
// 
// %REG_NAME RHSBDDR0
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DB31_16          15     0      0         W|R     TRUE     W
//     %%BIT    DB15_0           31     16     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDDR1
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DB63_48          15     0      0         W|R     TRUE     W
//     %%BIT    DB47_32          31     16     0         W|R     TRUE     -
// 
// %REG_NAME RHSBED0
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    EB31_16          15     0      0         W|R     TRUE     W
//     %%BIT    EB15_0           31     16     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDED0
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    EB31_16          15     0      0         W|R     TRUE     W
//     %%BIT    EB15_0           31     16     0         W|R     TRUE     -
// 
// %REG_NAME RHSBDED1
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    EB63_48          15     0      0         W|R     TRUE     W
//     %%BIT    EB47_32          31     16     0         W|R     TRUE     -
// 
// %REG_NAME RHSBUCR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    FSM              0      0      0         W|R     TRUE     W
//     %%BIT    UMS              1      1      0         W|R     TRUE     -
//     %%BIT    TOE              2      2      0         W|R     TRUE     -
//     %%BIT    UE               3      3      0         W|R     TRUE     -
//     %%BIT    RTO              12     8      0x18        R     TRUE     -
// 
// %REG_NAME RHSBUCC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    Reserved         15     0      0x0F0F    R       TRUE     -
//     %%BIT    UBR1             19     16     0xF       W|R     TRUE     W
//     %%BIT    PC1              20     20     0         W|R     TRUE     -
//     %%BIT    ILP1             21     21     0         W|R     TRUE     -
//     %%BIT    SBN1             22     22     0         W|R     TRUE     -
//     %%BIT    UFT1             23     23     0         W|R     TRUE     -
//     %%BIT    UBR0             27     24     0xF       W|R     TRUE     -
//     %%BIT    PC0              28     28     0         W|R     TRUE     -
//     %%BIT    ILP0             29     29     0         W|R     TRUE     -
//     %%BIT    SBN0             30     30     0         W|R     TRUE     -
//     %%BIT    UFT0             31     31     0         W|R     TRUE     -
// 
// %REG_NAME RHSBUCS
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    ACC              25     24     0         W|R     TRUE     W
//     %%BIT    BSY              31     31     0           R     TRUE     -
// 
// %REG_NAME RHSBUDR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DF               7      0      0           R     TRUE     R
//     %%BIT    EDF              11     8      0           R     TRUE     -
//     %%BIT    ND               16     16     0           R     TRUE     -
//     %%BIT    PERR             17     17     0           R     TRUE     -
//     %%BIT    FERR             18     18     0           R     TRUE     -
//     %%BIT    TO               19     19     0           R     TRUE     -
//     %%BIT    DL               20     20     0           R     TRUE     -
//     %%BIT    LUD              25     24     0           R     TRUE     -
//     %%BIT    NDS1             30     30     0           R     TRUE     -
//     %%BIT    NDS0             31     31     0           R     TRUE     -
// 
// %REG_NAME RHSBUD
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DF               7      0      0           R     TRUE     -
//     %%BIT    EDF              11     8      0           R     TRUE     -
//     %%BIT    ND               16     16     0        W0|R     TRUE     -
//     %%BIT    PERR             17     17     0        W0|R     TRUE     -
//     %%BIT    FERR             18     18     0        W0|R     TRUE     -
//     %%BIT    TO               19     19     0        W0|R     TRUE     -
//     %%BIT    DL               20     20     0        W0|R     TRUE     -
// 
// %REG_NAME RHSBUSS
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    ND1              16     16      0           R     TRUE     -
//     %%BIT    PERR1            17     17      0           R     TRUE     -
//     %%BIT    FERR1            18     18      0           R     TRUE     -
//     %%BIT    TO1              19     19      0           R     TRUE     -
//     %%BIT    DL1              20     20      0           R     TRUE     -
//     %%BIT    ND0              24     24      0           R     TRUE     -
//     %%BIT    PERR0            25     25      0           R     TRUE     -
//     %%BIT    FERR0            26     26      0           R     TRUE     -
//     %%BIT    TO0              27     27      0           R     TRUE     -
//     %%BIT    DL0              28     28      0           R     TRUE     -
// 
// %REG_NAME RHSBIC
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DTSIE            16     16      0         W|R     TRUE     W
//     %%BIT    DTIE             17     17      0         W|R     TRUE     -
//     %%BIT    CTIE             18     18      0         W|R     TRUE     -
//     %%BIT    ETIE             19     19      0         W|R     TRUE     -
//     %%BIT    TSIE             20     20      0         W|R     TRUE     -
//     %%BIT    DRIE             24     24      0         W|R     TRUE     -
//     %%BIT    UEIE             25     25      0         W|R     TRUE     -
//     %%BIT    TOIE             26     26      0         W|R     TRUE     -
//     %%BIT    DLIE             27     27      0         W|R     TRUE     -
// 
// %REG_NAME RHSBIS
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    ERF              8      8       0        W0|R     TRUE     W
//     %%BIT    DTSF             16     16      0        W0|R     TRUE     -
//     %%BIT    DTF              17     17      0        W0|R     TRUE     -
//     %%BIT    CTF              18     18      0        W0|R     TRUE     -
//     %%BIT    ETF              19     19      0        W0|R     TRUE     -
//     %%BIT    TSF              20     20      0        W0|R     TRUE     -
//     %%BIT    DRF              24     24      0        W0|R     TRUE     -
//     %%BIT    UEF              25     25      0        W0|R     TRUE     -
//     %%BIT    TOF              26     26      0        W0|R     TRUE     -
//     %%BIT    DLF              27     27      0        W0|R     TRUE     -
// 
// %REG_NAME RHSBDCR1
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SLS1             31     30     0         W|R     TRUE     W
////////////////////////////////////////////////////////////////////////////////
/// @file rhsb_regif.cpp
/// @brief Register IF class of model RHSB
/// $Id: rhsb_regif.cpp,v 1.2 2018/08/02 08:08:50 ngathunguyen Exp $
/// $Date: 2018/08/02 08:08:50 $
/// $Revison$
/// $Author: ngathunguyen $
////////////////////////////////////////////////////////////////////////////////
#include "rhsb_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Crhsb_regif::Crhsb_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x80/4))
    #endif
{
    CommandInit();
    RHSBGC   = new vpcl::re_register(0x0000, this, "RHSBGC"  , name.c_str());
    RHSBMSR  = new vpcl::re_register(0x0008, this, "RHSBMSR" , name.c_str());
    RHSBDCR  = new vpcl::re_register(0x0010, this, "RHSBDCR" , name.c_str());
    RHSBDEC  = new vpcl::re_register(0x0014, this, "RHSBDEC" , name.c_str());
    RHSBSDC  = new vpcl::re_register(0x0018, this, "RHSBSDC" , name.c_str());
    RHSBEBE0 = new vpcl::re_register(0x0030, this, "RHSBEBE0", name.c_str());
    RHSBEBE1 = new vpcl::re_register(0x0034, this, "RHSBEBE1", name.c_str());
    RHSBDTC  = new vpcl::re_register(0x0038, this, "RHSBDTC" , name.c_str());
    RHSBDCD  = new vpcl::re_register(0x003C, this, "RHSBDCD" , name.c_str());
    RHSBDDR0 = new vpcl::re_register(0x0040, this, "RHSBDDR0", name.c_str());
    RHSBDDR1 = new vpcl::re_register(0x0044, this, "RHSBDDR1", name.c_str());
    RHSBDED0 = new vpcl::re_register(0x0048, this, "RHSBDED0", name.c_str());
    RHSBDED1 = new vpcl::re_register(0x004C, this, "RHSBDED1", name.c_str());
    RHSBUCR  = new vpcl::re_register(0x0050, this, "RHSBUCR" , name.c_str());
    RHSBUCC  = new vpcl::re_register(0x0054, this, "RHSBUCC" , name.c_str());
    RHSBUCS  = new vpcl::re_register(0x0058, this, "RHSBUCS" , name.c_str());
    RHSBUDR  = new vpcl::re_register(0x005C, this, "RHSBUDR" , name.c_str());
    RHSBUSS  = new vpcl::re_register(0x0070, this, "RHSBUSS" , name.c_str());
    RHSBIC   = new vpcl::re_register(0x0074, this, "RHSBIC"  , name.c_str());
    RHSBIS   = new vpcl::re_register(0x0078, this, "RHSBIS"  , name.c_str());
    RHSBDCR1 = new vpcl::re_register(0x007C, this, "RHSBDCR1", name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) {
        str_tmp.str("");
        str_tmp<<"RHSBDEBA"<< i;
        RHSBDEBA[i] = new vpcl::re_register((0x0020) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_RHSBUD; i++) {
        str_tmp.str("");
        str_tmp<<"RHSBUD"<< i;
        RHSBUD  [i] = new vpcl::re_register((0x0060) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<7];
    for (uint i = 0; i < (1<<7); i++) {
        mRegMap[i] = (1<<7);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) {
        mRegMap[(0x0020)     + i*4 ] = index;
        mRegMap[(0x0020 + 1) + i*4 ] = index;
        mRegMap[(0x0020 + 2) + i*4 ] = index;
        mRegMap[(0x0020 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0044]     = index;
    mRegMap[0x0044 + 1] = index;
    mRegMap[0x0044 + 2] = index;
    mRegMap[0x0044 + 3] = index++;
    mRegMap[0x0048]     = index;
    mRegMap[0x0048 + 1] = index;
    mRegMap[0x0048 + 2] = index;
    mRegMap[0x0048 + 3] = index++;
    mRegMap[0x004C]     = index;
    mRegMap[0x004C + 1] = index;
    mRegMap[0x004C + 2] = index;
    mRegMap[0x004C + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mRegMap[0x0058]     = index;
    mRegMap[0x0058 + 1] = index;
    mRegMap[0x0058 + 2] = index;
    mRegMap[0x0058 + 3] = index++;
    mRegMap[0x005C]     = index;
    mRegMap[0x005C + 1] = index;
    mRegMap[0x005C + 2] = index;
    mRegMap[0x005C + 3] = index++;
    for(uint i = 0; i < emNUM_RHSBUD;  i++) {
        mRegMap[(0x0060)     + i*4 ] = index;
        mRegMap[(0x0060 + 1) + i*4 ] = index;
        mRegMap[(0x0060 + 2) + i*4 ] = index;
        mRegMap[(0x0060 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0070]     = index;
    mRegMap[0x0070 + 1] = index;
    mRegMap[0x0070 + 2] = index;
    mRegMap[0x0070 + 3] = index++;
    mRegMap[0x0074]     = index;
    mRegMap[0x0074 + 1] = index;
    mRegMap[0x0074 + 2] = index;
    mRegMap[0x0074 + 3] = index++;
    mRegMap[0x0078]     = index;
    mRegMap[0x0078 + 1] = index;
    mRegMap[0x0078 + 2] = index;
    mRegMap[0x0078 + 3] = index++;
    mRegMap[0x007C]     = index;
    mRegMap[0x007C + 1] = index;
    mRegMap[0x007C + 2] = index;
    mRegMap[0x007C + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_RHSBGC    , RHSBGC->name()  , RHSBGC->addr()  );
    cw_instantiate_reg(CW_RHSBMSR   , RHSBMSR->name() , RHSBMSR->addr() );
    cw_instantiate_reg(CW_RHSBDCR   , RHSBDCR->name() , RHSBDCR->addr() );
    cw_instantiate_reg(CW_RHSBDEC   , RHSBDEC->name() , RHSBDEC->addr() );
    cw_instantiate_reg(CW_RHSBSDC   , RHSBSDC->name() , RHSBSDC->addr() );
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) cw_instantiate_reg(CW_RHSBDEBA  [i], RHSBDEBA[i]->name(), RHSBDEBA[i]->addr());
    cw_instantiate_reg(CW_RHSBEBE0  , RHSBEBE0->name(), RHSBEBE0->addr());
    cw_instantiate_reg(CW_RHSBEBE1  , RHSBEBE1->name(), RHSBEBE1->addr());
    cw_instantiate_reg(CW_RHSBDTC   , RHSBDTC->name() , RHSBDTC->addr() );
    cw_instantiate_reg(CW_RHSBDCD   , RHSBDCD->name() , RHSBDCD->addr() );
    cw_instantiate_reg(CW_RHSBDDR0  , RHSBDDR0->name(), RHSBDDR0->addr());
    cw_instantiate_reg(CW_RHSBDDR1  , RHSBDDR1->name(), RHSBDDR1->addr());
    cw_instantiate_reg(CW_RHSBDED0  , RHSBDED0->name(), RHSBDED0->addr());
    cw_instantiate_reg(CW_RHSBDED1  , RHSBDED1->name(), RHSBDED1->addr());
    cw_instantiate_reg(CW_RHSBUCR   , RHSBUCR->name() , RHSBUCR->addr() );
    cw_instantiate_reg(CW_RHSBUCC   , RHSBUCC->name() , RHSBUCC->addr() );
    cw_instantiate_reg(CW_RHSBUCS   , RHSBUCS->name() , RHSBUCS->addr() );
    cw_instantiate_reg(CW_RHSBUDR   , RHSBUDR->name() , RHSBUDR->addr() );
    for(uint i = 0; i < emNUM_RHSBUD  ; i++) cw_instantiate_reg(CW_RHSBUD    [i], RHSBUD  [i]->name(), RHSBUD  [i]->addr());
    cw_instantiate_reg(CW_RHSBUSS   , RHSBUSS->name() , RHSBUSS->addr() );
    cw_instantiate_reg(CW_RHSBIC    , RHSBIC->name()  , RHSBIC->addr()  );
    cw_instantiate_reg(CW_RHSBIS    , RHSBIS->name()  , RHSBIS->addr()  );
    cw_instantiate_reg(CW_RHSBDCR1  , RHSBDCR1->name(), RHSBDCR1->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(RHSBGC    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBMSR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDCR   , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDEC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBSDC   , mCurReg, 0,  4,   "16|32", "8|16|32");
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) mCurReg = mRegArray[index++] = new SRegList(RHSBDEBA  [i], mCurReg, i,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBEBE0  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBEBE1  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDTC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDCD   , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDDR0  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDDR1  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDED0  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDED1  , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBUCR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBUCC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBUCS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBUDR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_RHSBUD  ; i++) mCurReg = mRegArray[index++] = new SRegList(RHSBUD    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBUSS   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBIC    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBIS    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSBDCR1  , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*RHSBGC    ) ( 1,  0, "OPS"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBGC    ) (16, 16, "UDE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBGC    ) (17, 17, "DDE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBGC    ) (18, 18, "DCDE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBMSR   ) ( 0,  0, "UFA"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBMSR   ) (16, 16, "TPS"     , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBMSR   ) (26, 24, "DFA"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 1,  0, "DMS"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 2,  2, "EIP"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 3,  3, "EIM"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 5,  4, "EE"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 6,  6, "CAC"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) ( 7,  7, "CLP"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (16,  8, "REP"     , 0x1FF     , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (17, 17, "CTD"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (19, 18, "CIM"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (23, 20, "DBR"     , 0x1       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (29, 24, "DFP"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCR   ) (31, 30, "SLS"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) ( 3,  0, "NDB3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) ( 5,  4, "SSD3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (11,  8, "NDB2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (13, 12, "SSD2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (19, 16, "NDB1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (21, 20, "SSD1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (27, 24, "NDB0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDEC   ) (29, 28, "SSD0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) ( 2,  0, "DPL1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) ( 3,  3, "CPS1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) ( 4,  4, "SOLP1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) ( 5,  5, "CSLP1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (10,  8, "APL1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (18, 16, "DPL0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (19, 19, "CPS0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (20, 20, "SOLP0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (21, 21, "CSLP0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBSDC   ) (26, 24, "APL0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE0  ) ( 7,  0, "EBE23_16", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE0  ) (15,  8, "EBE31_24", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE0  ) (23, 16, "EBE7_0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE0  ) (31, 24, "EBE15_8" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE1  ) ( 7,  0, "EBE55_48", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE1  ) (15,  8, "EBE63_56", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE1  ) (23, 16, "EBE39_32", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBEBE1  ) (31, 24, "EBE47_40", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDTC   ) ( 0,  0, "DTE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDTC   ) ( 1,  1, "TSR"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDTC   ) (17, 16, "CTR"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDTC   ) (21, 20, "SSCF"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDTC   ) (28, 24, "NCB"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDCD   ) (31,  0, "CB"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDDR0  ) (15,  0, "DB31_16" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDDR0  ) (31, 16, "DB15_0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDDR1  ) (15,  0, "DB63_48" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDDR1  ) (31, 16, "DB47_32" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDED0  ) (15,  0, "EB31_16" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDED0  ) (31, 16, "EB15_0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDED1  ) (15,  0, "EB63_48" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBDED1  ) (31, 16, "EB47_32" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCR   ) ( 0,  0, "FSM"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCR   ) ( 1,  1, "UMS"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCR   ) ( 2,  2, "TOE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCR   ) ( 3,  3, "UE"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCR   ) (12,  8, "RTO"     , 0x18      , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (15,  0, "Reserved", 0xF0F     , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (19, 16, "UBR1"    , 0xF       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (20, 20, "PC1"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (21, 21, "ILP1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (22, 22, "SBN1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (23, 23, "UFT1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (27, 24, "UBR0"    , 0xF       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (28, 28, "PC0"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (29, 29, "ILP0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (30, 30, "SBN0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCC   ) (31, 31, "UFT0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCS   ) (25, 24, "ACC"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBUCS   ) (31, 31, "BSY"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) ( 7,  0, "DF"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (11,  8, "EDF"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (16, 16, "ND"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (17, 17, "PERR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (18, 18, "FERR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (19, 19, "TO"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (20, 20, "DL"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (25, 24, "LUD"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (30, 30, "NDS1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUDR   ) (31, 31, "NDS0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (16, 16, "ND1"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (17, 17, "PERR1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (18, 18, "FERR1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (19, 19, "TO1"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (20, 20, "DL1"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (24, 24, "ND0"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (25, 25, "PERR0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (26, 26, "FERR0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (27, 27, "TO0"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBUSS   ) (28, 28, "DL0"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (16, 16, "DTSIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (17, 17, "DTIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (18, 18, "CTIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (19, 19, "ETIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (20, 20, "TSIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (24, 24, "DRIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (25, 25, "UEIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (26, 26, "TOIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIC    ) (27, 27, "DLIE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RHSBIS    ) ( 8,  8, "ERF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (16, 16, "DTSF"    , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (17, 17, "DTF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (18, 18, "CTF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (19, 19, "ETF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (20, 20, "TSF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (24, 24, "DRF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (25, 25, "UEF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (26, 26, "TOF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBIS    ) (27, 27, "DLF"     , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    (*RHSBDCR1  ) (31, 30, "SLS1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_RHSBUD; i++) {
        (*RHSBUD    [i]) ( 7,  0, "DF"      , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (11,  8, "EDF"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (16, 16, "ND"      , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (17, 17, "PERR"    , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (18, 18, "FERR"    , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (19, 19, "TO"      , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
        (*RHSBUD    [i]) (20, 20, "DL"      , 0x0       , "W0|R"  , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) {
        (*RHSBDEBA  [i]) ( 1,  0, "DSS0"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) ( 3,  2, "DSS1"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) ( 5,  4, "DSS2"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) ( 7,  6, "DSS3"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) ( 9,  8, "DSS4"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (11, 10, "DSS5"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (13, 12, "DSS6"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (15, 14, "DSS7"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (17, 16, "DSS8"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (19, 18, "DSS9"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (21, 20, "DSS10"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (23, 22, "DSS11"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (25, 24, "DSS12"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (27, 26, "DSS13"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (29, 28, "DSS14"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RHSBDEBA  [i]) (31, 30, "DSS15"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["RHSBGC"]["OPS"   ] = &Crhsb_regif::cb_RHSBGC_OPS;
    mWrCbAPI["RHSBDCR"]["DMS"   ] = &Crhsb_regif::cb_RHSBDCR_DMS;
    mWrCbAPI["RHSBDEC"]["NDB3"  ] = &Crhsb_regif::cb_RHSBDEC_NDB3;
    mWrCbAPI["RHSBSDC"]["DPL1"  ] = &Crhsb_regif::cb_RHSBSDC_DPL1;
    mWrCbAPI["RHSBEBE0"]["EBE23_16"] = &Crhsb_regif::cb_RHSBEBE0_EBE23_16;
    mWrCbAPI["RHSBEBE1"]["EBE55_48"] = &Crhsb_regif::cb_RHSBEBE1_EBE55_48;
    mWrCbAPI["RHSBDTC"]["DTE"   ] = &Crhsb_regif::cb_RHSBDTC_DTE;
    mWrCbAPI["RHSBDCD"]["CB"    ] = &Crhsb_regif::cb_RHSBDCD_CB;
    mWrCbAPI["RHSBDDR0"]["DB31_16"] = &Crhsb_regif::cb_RHSBDDR0_DB31_16;
    mWrCbAPI["RHSBDDR1"]["DB63_48"] = &Crhsb_regif::cb_RHSBDDR1_DB63_48;
    mWrCbAPI["RHSBDED0"]["EB31_16"] = &Crhsb_regif::cb_RHSBDED0_EB31_16;
    mWrCbAPI["RHSBDED1"]["EB63_48"] = &Crhsb_regif::cb_RHSBDED1_EB63_48;
    mWrCbAPI["RHSBUCR"]["FSM"   ] = &Crhsb_regif::cb_RHSBUCR_FSM;
    mWrCbAPI["RHSBUCC"]["UBR1"  ] = &Crhsb_regif::cb_RHSBUCC_UBR1;
    mWrCbAPI["RHSBUCS"]["ACC"   ] = &Crhsb_regif::cb_RHSBUCS_ACC;
    mWrCbAPI["RHSBIC"]["DTSIE" ] = &Crhsb_regif::cb_RHSBIC_DTSIE;
    mWrCbAPI["RHSBIS"]["ERF"   ] = &Crhsb_regif::cb_RHSBIS_ERF;
    mWrCbAPI["RHSBDCR1"]["SLS1"  ] = &Crhsb_regif::cb_RHSBDCR1_SLS1;

    mRdCbAPI["RHSBUDR"]["DF"    ] = &Crhsb_regif::cb_RHSBUDR_DF;

    for(uint i = 0; i < emNUM_RHSBDEBA; i++) {
        str_tmp.str("");
        str_tmp<<"RHSBDEBA"<< i;
        mWrCbAPI[str_tmp.str()]["DSS0"] = &Crhsb_regif::cb_RHSBDEBA_DSS0;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Crhsb_regif::~Crhsb_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Crhsb_regif::uint Crhsb_regif::bit_select(
                         cuint val,    ///< [in] Writting address
                         cuint start,  ///< [in] start bit position
                         cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crhsb_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                         const unsigned char *p_data,   ///< [in] Writing data
                         cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crhsb_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                         unsigned char *p_data,   ///< [out] Reading data
                         cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crhsb_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crhsb_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Crhsb_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                 const unsigned char *p_data,  ///< [in] Writing data
                                 cuint size,                   ///< [in] Data size (byte)
                                 bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Crhsb_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size,              ///< [in]  Data size (byte)
                                 bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Crhsb_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                              unsigned char *p_data,          ///< [out] Reading data
                              cuint size,                     ///< [in]  Data size (byte)
                              cuint reg_index,                ///< [in] Register index
                              bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Crhsb_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                              const unsigned char *p_data,      ///< [in] Writing data
                              cuint size,                       ///< [in] Data size (byte)
                              cuint reg_index,                  ///< [in] Register index
                              bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Crhsb_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Crhsb_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Crhsb_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Crhsb_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Crhsb_regif::InitLocalVal()
{
    // Initialize local variables
    RHSBGC_OPS  = 0x0;
    RHSBGC_UDE  = 0x0;
    RHSBGC_DDE  = 0x0;
    RHSBGC_DCDE = 0x0;
    RHSBMSR_UFA = 0x0;
    RHSBMSR_TPS = 0x1;
    RHSBMSR_DFA = 0x0;
    RHSBDCR_DMS = 0x0;
    RHSBDCR_EIP = 0x0;
    RHSBDCR_EIM = 0x0;
    RHSBDCR_EE  = 0x0;
    RHSBDCR_CAC = 0x0;
    RHSBDCR_CLP = 0x0;
    RHSBDCR_REP = 0x1FF;
    RHSBDCR_CTD = 0x0;
    RHSBDCR_CIM = 0x0;
    RHSBDCR_DBR = 0x1;
    RHSBDCR_DFP = 0x0;
    RHSBDCR_SLS = 0x0;
    RHSBDEC_NDB3 = 0x0;
    RHSBDEC_SSD3 = 0x0;
    RHSBDEC_NDB2 = 0x0;
    RHSBDEC_SSD2 = 0x0;
    RHSBDEC_NDB1 = 0x0;
    RHSBDEC_SSD1 = 0x0;
    RHSBDEC_NDB0 = 0x0;
    RHSBDEC_SSD0 = 0x0;
    RHSBSDC_DPL1 = 0x0;
    RHSBSDC_CPS1 = 0x0;
    RHSBSDC_SOLP1 = 0x0;
    RHSBSDC_CSLP1 = 0x0;
    RHSBSDC_APL1 = 0x0;
    RHSBSDC_DPL0 = 0x0;
    RHSBSDC_CPS0 = 0x0;
    RHSBSDC_SOLP0 = 0x0;
    RHSBSDC_CSLP0 = 0x0;
    RHSBSDC_APL0 = 0x0;
    for(uint i = 0; i < emNUM_RHSBDEBA; i++) {
        RHSBDEBA_DSS0[i] = 0x0;
        RHSBDEBA_DSS1[i] = 0x0;
        RHSBDEBA_DSS2[i] = 0x0;
        RHSBDEBA_DSS3[i] = 0x0;
        RHSBDEBA_DSS4[i] = 0x0;
        RHSBDEBA_DSS5[i] = 0x0;
        RHSBDEBA_DSS6[i] = 0x0;
        RHSBDEBA_DSS7[i] = 0x0;
        RHSBDEBA_DSS8[i] = 0x0;
        RHSBDEBA_DSS9[i] = 0x0;
        RHSBDEBA_DSS10[i] = 0x0;
        RHSBDEBA_DSS11[i] = 0x0;
        RHSBDEBA_DSS12[i] = 0x0;
        RHSBDEBA_DSS13[i] = 0x0;
        RHSBDEBA_DSS14[i] = 0x0;
        RHSBDEBA_DSS15[i] = 0x0;
    }
    RHSBEBE0_EBE23_16 = 0x0;
    RHSBEBE0_EBE31_24 = 0x0;
    RHSBEBE0_EBE7_0 = 0x0;
    RHSBEBE0_EBE15_8 = 0x0;
    RHSBEBE1_EBE55_48 = 0x0;
    RHSBEBE1_EBE63_56 = 0x0;
    RHSBEBE1_EBE39_32 = 0x0;
    RHSBEBE1_EBE47_40 = 0x0;
    RHSBDTC_DTE = 0x0;
    RHSBDTC_TSR = 0x0;
    RHSBDTC_CTR = 0x0;
    RHSBDTC_SSCF = 0x0;
    RHSBDTC_NCB = 0x0;
    RHSBDCD_CB  = 0x0;
    RHSBDDR0_DB31_16 = 0x0;
    RHSBDDR0_DB15_0 = 0x0;
    RHSBDDR1_DB63_48 = 0x0;
    RHSBDDR1_DB47_32 = 0x0;
    RHSBDED0_EB31_16 = 0x0;
    RHSBDED0_EB15_0 = 0x0;
    RHSBDED1_EB63_48 = 0x0;
    RHSBDED1_EB47_32 = 0x0;
    RHSBUCR_FSM = 0x0;
    RHSBUCR_UMS = 0x0;
    RHSBUCR_TOE = 0x0;
    RHSBUCR_UE  = 0x0;
    RHSBUCR_RTO = 0x18;
    RHSBUCC_Reserved = 0xF0F;
    RHSBUCC_UBR1 = 0xF;
    RHSBUCC_PC1 = 0x0;
    RHSBUCC_ILP1 = 0x0;
    RHSBUCC_SBN1 = 0x0;
    RHSBUCC_UFT1 = 0x0;
    RHSBUCC_UBR0 = 0xF;
    RHSBUCC_PC0 = 0x0;
    RHSBUCC_ILP0 = 0x0;
    RHSBUCC_SBN0 = 0x0;
    RHSBUCC_UFT0 = 0x0;
    RHSBUCS_ACC = 0x0;
    RHSBUCS_BSY = 0x0;
    RHSBUDR_DF  = 0x0;
    RHSBUDR_EDF = 0x0;
    RHSBUDR_ND  = 0x0;
    RHSBUDR_PERR = 0x0;
    RHSBUDR_FERR = 0x0;
    RHSBUDR_TO  = 0x0;
    RHSBUDR_DL  = 0x0;
    RHSBUDR_LUD = 0x0;
    RHSBUDR_NDS1 = 0x0;
    RHSBUDR_NDS0 = 0x0;
    for(uint i = 0; i < emNUM_RHSBUD;  i++) {
        RHSBUD_DF  [i] = 0x0;
        RHSBUD_EDF [i] = 0x0;
        RHSBUD_ND  [i] = 0x0;
        RHSBUD_PERR[i] = 0x0;
        RHSBUD_FERR[i] = 0x0;
        RHSBUD_TO  [i] = 0x0;
        RHSBUD_DL  [i] = 0x0;
    }
    RHSBUSS_ND1 = 0x0;
    RHSBUSS_PERR1 = 0x0;
    RHSBUSS_FERR1 = 0x0;
    RHSBUSS_TO1 = 0x0;
    RHSBUSS_DL1 = 0x0;
    RHSBUSS_ND0 = 0x0;
    RHSBUSS_PERR0 = 0x0;
    RHSBUSS_FERR0 = 0x0;
    RHSBUSS_TO0 = 0x0;
    RHSBUSS_DL0 = 0x0;
    RHSBIC_DTSIE = 0x0;
    RHSBIC_DTIE = 0x0;
    RHSBIC_CTIE = 0x0;
    RHSBIC_ETIE = 0x0;
    RHSBIC_TSIE = 0x0;
    RHSBIC_DRIE = 0x0;
    RHSBIC_UEIE = 0x0;
    RHSBIC_TOIE = 0x0;
    RHSBIC_DLIE = 0x0;
    RHSBIS_ERF  = 0x0;
    RHSBIS_DTSF = 0x0;
    RHSBIS_DTF  = 0x0;
    RHSBIS_CTF  = 0x0;
    RHSBIS_ETF  = 0x0;
    RHSBIS_TSF  = 0x0;
    RHSBIS_DRF  = 0x0;
    RHSBIS_UEF  = 0x0;
    RHSBIS_TOF  = 0x0;
    RHSBIS_DLF  = 0x0;
    RHSBDCR1_SLS1 = 0x0;
}

/// Update bit value to local value
/// @return None
void Crhsb_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        RHSBGC_OPS                   = (*RHSBGC  )["OPS"     ];
        RHSBGC_UDE                   = (*RHSBGC  )["UDE"     ];
        RHSBGC_DDE                   = (*RHSBGC  )["DDE"     ];
        RHSBGC_DCDE                  = (*RHSBGC  )["DCDE"    ];
        return;
    }
    if (addr == 0x0008) {
        RHSBMSR_UFA                  = (*RHSBMSR )["UFA"     ];
        RHSBMSR_TPS                  = (*RHSBMSR )["TPS"     ];
        RHSBMSR_DFA                  = (*RHSBMSR )["DFA"     ];
        return;
    }
    if (addr == 0x0010) {
        RHSBDCR_DMS                  = (*RHSBDCR )["DMS"     ];
        RHSBDCR_EIP                  = (*RHSBDCR )["EIP"     ];
        RHSBDCR_EIM                  = (*RHSBDCR )["EIM"     ];
        RHSBDCR_EE                   = (*RHSBDCR )["EE"      ];
        RHSBDCR_CAC                  = (*RHSBDCR )["CAC"     ];
        RHSBDCR_CLP                  = (*RHSBDCR )["CLP"     ];
        RHSBDCR_REP                  = (*RHSBDCR )["REP"     ];
        RHSBDCR_CTD                  = (*RHSBDCR )["CTD"     ];
        RHSBDCR_CIM                  = (*RHSBDCR )["CIM"     ];
        RHSBDCR_DBR                  = (*RHSBDCR )["DBR"     ];
        RHSBDCR_DFP                  = (*RHSBDCR )["DFP"     ];
        RHSBDCR_SLS                  = (*RHSBDCR )["SLS"     ];
        return;
    }
    if (addr == 0x0014) {
        RHSBDEC_NDB3                 = (*RHSBDEC )["NDB3"    ];
        RHSBDEC_SSD3                 = (*RHSBDEC )["SSD3"    ];
        RHSBDEC_NDB2                 = (*RHSBDEC )["NDB2"    ];
        RHSBDEC_SSD2                 = (*RHSBDEC )["SSD2"    ];
        RHSBDEC_NDB1                 = (*RHSBDEC )["NDB1"    ];
        RHSBDEC_SSD1                 = (*RHSBDEC )["SSD1"    ];
        RHSBDEC_NDB0                 = (*RHSBDEC )["NDB0"    ];
        RHSBDEC_SSD0                 = (*RHSBDEC )["SSD0"    ];
        return;
    }
    if (addr == 0x0018) {
        RHSBSDC_DPL1                 = (*RHSBSDC )["DPL1"    ];
        RHSBSDC_CPS1                 = (*RHSBSDC )["CPS1"    ];
        RHSBSDC_SOLP1                = (*RHSBSDC )["SOLP1"   ];
        RHSBSDC_CSLP1                = (*RHSBSDC )["CSLP1"   ];
        RHSBSDC_APL1                 = (*RHSBSDC )["APL1"    ];
        RHSBSDC_DPL0                 = (*RHSBSDC )["DPL0"    ];
        RHSBSDC_CPS0                 = (*RHSBSDC )["CPS0"    ];
        RHSBSDC_SOLP0                = (*RHSBSDC )["SOLP0"   ];
        RHSBSDC_CSLP0                = (*RHSBSDC )["CSLP0"   ];
        RHSBSDC_APL0                 = (*RHSBSDC )["APL0"    ];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*3)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        RHSBDEBA_DSS0               [i] = (*(RHSBDEBA[i]))["DSS0"    ];
        RHSBDEBA_DSS1               [i] = (*(RHSBDEBA[i]))["DSS1"    ];
        RHSBDEBA_DSS2               [i] = (*(RHSBDEBA[i]))["DSS2"    ];
        RHSBDEBA_DSS3               [i] = (*(RHSBDEBA[i]))["DSS3"    ];
        RHSBDEBA_DSS4               [i] = (*(RHSBDEBA[i]))["DSS4"    ];
        RHSBDEBA_DSS5               [i] = (*(RHSBDEBA[i]))["DSS5"    ];
        RHSBDEBA_DSS6               [i] = (*(RHSBDEBA[i]))["DSS6"    ];
        RHSBDEBA_DSS7               [i] = (*(RHSBDEBA[i]))["DSS7"    ];
        RHSBDEBA_DSS8               [i] = (*(RHSBDEBA[i]))["DSS8"    ];
        RHSBDEBA_DSS9               [i] = (*(RHSBDEBA[i]))["DSS9"    ];
        RHSBDEBA_DSS10              [i] = (*(RHSBDEBA[i]))["DSS10"   ];
        RHSBDEBA_DSS11              [i] = (*(RHSBDEBA[i]))["DSS11"   ];
        RHSBDEBA_DSS12              [i] = (*(RHSBDEBA[i]))["DSS12"   ];
        RHSBDEBA_DSS13              [i] = (*(RHSBDEBA[i]))["DSS13"   ];
        RHSBDEBA_DSS14              [i] = (*(RHSBDEBA[i]))["DSS14"   ];
        RHSBDEBA_DSS15              [i] = (*(RHSBDEBA[i]))["DSS15"   ];
        return;
    }
    if (addr == 0x0030) {
        RHSBEBE0_EBE23_16            = (*RHSBEBE0)["EBE23_16"];
        RHSBEBE0_EBE31_24            = (*RHSBEBE0)["EBE31_24"];
        RHSBEBE0_EBE7_0              = (*RHSBEBE0)["EBE7_0"  ];
        RHSBEBE0_EBE15_8             = (*RHSBEBE0)["EBE15_8" ];
        return;
    }
    if (addr == 0x0034) {
        RHSBEBE1_EBE55_48            = (*RHSBEBE1)["EBE55_48"];
        RHSBEBE1_EBE63_56            = (*RHSBEBE1)["EBE63_56"];
        RHSBEBE1_EBE39_32            = (*RHSBEBE1)["EBE39_32"];
        RHSBEBE1_EBE47_40            = (*RHSBEBE1)["EBE47_40"];
        return;
    }
    if (addr == 0x0038) {
        RHSBDTC_DTE                  = (*RHSBDTC )["DTE"     ];
        RHSBDTC_TSR                  = (*RHSBDTC )["TSR"     ];
        RHSBDTC_CTR                  = (*RHSBDTC )["CTR"     ];
        RHSBDTC_SSCF                 = (*RHSBDTC )["SSCF"    ];
        RHSBDTC_NCB                  = (*RHSBDTC )["NCB"     ];
        return;
    }
    if (addr == 0x003C) {
        RHSBDCD_CB                   = (*RHSBDCD )["CB"      ];
        return;
    }
    if (addr == 0x0040) {
        RHSBDDR0_DB31_16             = (*RHSBDDR0)["DB31_16" ];
        RHSBDDR0_DB15_0              = (*RHSBDDR0)["DB15_0"  ];
        return;
    }
    if (addr == 0x0044) {
        RHSBDDR1_DB63_48             = (*RHSBDDR1)["DB63_48" ];
        RHSBDDR1_DB47_32             = (*RHSBDDR1)["DB47_32" ];
        return;
    }
    if (addr == 0x0048) {
        RHSBDED0_EB31_16             = (*RHSBDED0)["EB31_16" ];
        RHSBDED0_EB15_0              = (*RHSBDED0)["EB15_0"  ];
        return;
    }
    if (addr == 0x004C) {
        RHSBDED1_EB63_48             = (*RHSBDED1)["EB63_48" ];
        RHSBDED1_EB47_32             = (*RHSBDED1)["EB47_32" ];
        return;
    }
    if (addr == 0x0050) {
        RHSBUCR_FSM                  = (*RHSBUCR )["FSM"     ];
        RHSBUCR_UMS                  = (*RHSBUCR )["UMS"     ];
        RHSBUCR_TOE                  = (*RHSBUCR )["TOE"     ];
        RHSBUCR_UE                   = (*RHSBUCR )["UE"      ];
        RHSBUCR_RTO                  = (*RHSBUCR )["RTO"     ];
        return;
    }
    if (addr == 0x0054) {
        RHSBUCC_Reserved             = (*RHSBUCC )["Reserved"];
        RHSBUCC_UBR1                 = (*RHSBUCC )["UBR1"    ];
        RHSBUCC_PC1                  = (*RHSBUCC )["PC1"     ];
        RHSBUCC_ILP1                 = (*RHSBUCC )["ILP1"    ];
        RHSBUCC_SBN1                 = (*RHSBUCC )["SBN1"    ];
        RHSBUCC_UFT1                 = (*RHSBUCC )["UFT1"    ];
        RHSBUCC_UBR0                 = (*RHSBUCC )["UBR0"    ];
        RHSBUCC_PC0                  = (*RHSBUCC )["PC0"     ];
        RHSBUCC_ILP0                 = (*RHSBUCC )["ILP0"    ];
        RHSBUCC_SBN0                 = (*RHSBUCC )["SBN0"    ];
        RHSBUCC_UFT0                 = (*RHSBUCC )["UFT0"    ];
        return;
    }
    if (addr == 0x0058) {
        RHSBUCS_ACC                  = (*RHSBUCS )["ACC"     ];
        RHSBUCS_BSY                  = (*RHSBUCS )["BSY"     ];
        return;
    }
    if (addr == 0x005C) {
        RHSBUDR_DF                   = (*RHSBUDR )["DF"      ];
        RHSBUDR_EDF                  = (*RHSBUDR )["EDF"     ];
        RHSBUDR_ND                   = (*RHSBUDR )["ND"      ];
        RHSBUDR_PERR                 = (*RHSBUDR )["PERR"    ];
        RHSBUDR_FERR                 = (*RHSBUDR )["FERR"    ];
        RHSBUDR_TO                   = (*RHSBUDR )["TO"      ];
        RHSBUDR_DL                   = (*RHSBUDR )["DL"      ];
        RHSBUDR_LUD                  = (*RHSBUDR )["LUD"     ];
        RHSBUDR_NDS1                 = (*RHSBUDR )["NDS1"    ];
        RHSBUDR_NDS0                 = (*RHSBUDR )["NDS0"    ];
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(4*1)) && ((addr-0x0060)%4 == 0)) {
        uint i = (addr - 0x0060)/4;
        RHSBUD_DF                   [i] = (*(RHSBUD  [i]))["DF"      ];
        RHSBUD_EDF                  [i] = (*(RHSBUD  [i]))["EDF"     ];
        RHSBUD_ND                   [i] = (*(RHSBUD  [i]))["ND"      ];
        RHSBUD_PERR                 [i] = (*(RHSBUD  [i]))["PERR"    ];
        RHSBUD_FERR                 [i] = (*(RHSBUD  [i]))["FERR"    ];
        RHSBUD_TO                   [i] = (*(RHSBUD  [i]))["TO"      ];
        RHSBUD_DL                   [i] = (*(RHSBUD  [i]))["DL"      ];
        return;
    }
    if (addr == 0x0070) {
        RHSBUSS_ND1                  = (*RHSBUSS )["ND1"     ];
        RHSBUSS_PERR1                = (*RHSBUSS )["PERR1"   ];
        RHSBUSS_FERR1                = (*RHSBUSS )["FERR1"   ];
        RHSBUSS_TO1                  = (*RHSBUSS )["TO1"     ];
        RHSBUSS_DL1                  = (*RHSBUSS )["DL1"     ];
        RHSBUSS_ND0                  = (*RHSBUSS )["ND0"     ];
        RHSBUSS_PERR0                = (*RHSBUSS )["PERR0"   ];
        RHSBUSS_FERR0                = (*RHSBUSS )["FERR0"   ];
        RHSBUSS_TO0                  = (*RHSBUSS )["TO0"     ];
        RHSBUSS_DL0                  = (*RHSBUSS )["DL0"     ];
        return;
    }
    if (addr == 0x0074) {
        RHSBIC_DTSIE                 = (*RHSBIC  )["DTSIE"   ];
        RHSBIC_DTIE                  = (*RHSBIC  )["DTIE"    ];
        RHSBIC_CTIE                  = (*RHSBIC  )["CTIE"    ];
        RHSBIC_ETIE                  = (*RHSBIC  )["ETIE"    ];
        RHSBIC_TSIE                  = (*RHSBIC  )["TSIE"    ];
        RHSBIC_DRIE                  = (*RHSBIC  )["DRIE"    ];
        RHSBIC_UEIE                  = (*RHSBIC  )["UEIE"    ];
        RHSBIC_TOIE                  = (*RHSBIC  )["TOIE"    ];
        RHSBIC_DLIE                  = (*RHSBIC  )["DLIE"    ];
        return;
    }
    if (addr == 0x0078) {
        RHSBIS_ERF                   = (*RHSBIS  )["ERF"     ];
        RHSBIS_DTSF                  = (*RHSBIS  )["DTSF"    ];
        RHSBIS_DTF                   = (*RHSBIS  )["DTF"     ];
        RHSBIS_CTF                   = (*RHSBIS  )["CTF"     ];
        RHSBIS_ETF                   = (*RHSBIS  )["ETF"     ];
        RHSBIS_TSF                   = (*RHSBIS  )["TSF"     ];
        RHSBIS_DRF                   = (*RHSBIS  )["DRF"     ];
        RHSBIS_UEF                   = (*RHSBIS  )["UEF"     ];
        RHSBIS_TOF                   = (*RHSBIS  )["TOF"     ];
        RHSBIS_DLF                   = (*RHSBIS  )["DLF"     ];
        return;
    }
    if (addr == 0x007C) {
        RHSBDCR1_SLS1                = (*RHSBDCR1)["SLS1"    ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Crhsb_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*RHSBGC  )["OPS"     ] = RHSBGC_OPS;
        (*RHSBGC  )["UDE"     ] = RHSBGC_UDE;
        (*RHSBGC  )["DDE"     ] = RHSBGC_DDE;
        (*RHSBGC  )["DCDE"    ] = RHSBGC_DCDE;
        return;
    }
    if (addr == 0x0008) {
        (*RHSBMSR )["UFA"     ] = RHSBMSR_UFA;
        (*RHSBMSR )["TPS"     ] = RHSBMSR_TPS;
        (*RHSBMSR )["DFA"     ] = RHSBMSR_DFA;
        return;
    }
    if (addr == 0x0010) {
        (*RHSBDCR )["DMS"     ] = RHSBDCR_DMS;
        (*RHSBDCR )["EIP"     ] = RHSBDCR_EIP;
        (*RHSBDCR )["EIM"     ] = RHSBDCR_EIM;
        (*RHSBDCR )["EE"      ] = RHSBDCR_EE;
        (*RHSBDCR )["CAC"     ] = RHSBDCR_CAC;
        (*RHSBDCR )["CLP"     ] = RHSBDCR_CLP;
        (*RHSBDCR )["REP"     ] = RHSBDCR_REP;
        (*RHSBDCR )["CTD"     ] = RHSBDCR_CTD;
        (*RHSBDCR )["CIM"     ] = RHSBDCR_CIM;
        (*RHSBDCR )["DBR"     ] = RHSBDCR_DBR;
        (*RHSBDCR )["DFP"     ] = RHSBDCR_DFP;
        (*RHSBDCR )["SLS"     ] = RHSBDCR_SLS;
        return;
    }
    if (addr == 0x0014) {
        (*RHSBDEC )["NDB3"    ] = RHSBDEC_NDB3;
        (*RHSBDEC )["SSD3"    ] = RHSBDEC_SSD3;
        (*RHSBDEC )["NDB2"    ] = RHSBDEC_NDB2;
        (*RHSBDEC )["SSD2"    ] = RHSBDEC_SSD2;
        (*RHSBDEC )["NDB1"    ] = RHSBDEC_NDB1;
        (*RHSBDEC )["SSD1"    ] = RHSBDEC_SSD1;
        (*RHSBDEC )["NDB0"    ] = RHSBDEC_NDB0;
        (*RHSBDEC )["SSD0"    ] = RHSBDEC_SSD0;
        return;
    }
    if (addr == 0x0018) {
        (*RHSBSDC )["DPL1"    ] = RHSBSDC_DPL1;
        (*RHSBSDC )["CPS1"    ] = RHSBSDC_CPS1;
        (*RHSBSDC )["SOLP1"   ] = RHSBSDC_SOLP1;
        (*RHSBSDC )["CSLP1"   ] = RHSBSDC_CSLP1;
        (*RHSBSDC )["APL1"    ] = RHSBSDC_APL1;
        (*RHSBSDC )["DPL0"    ] = RHSBSDC_DPL0;
        (*RHSBSDC )["CPS0"    ] = RHSBSDC_CPS0;
        (*RHSBSDC )["SOLP0"   ] = RHSBSDC_SOLP0;
        (*RHSBSDC )["CSLP0"   ] = RHSBSDC_CSLP0;
        (*RHSBSDC )["APL0"    ] = RHSBSDC_APL0;
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*3)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        (*(RHSBDEBA[i]))["DSS0"    ] = RHSBDEBA_DSS0[i];
        (*(RHSBDEBA[i]))["DSS1"    ] = RHSBDEBA_DSS1[i];
        (*(RHSBDEBA[i]))["DSS2"    ] = RHSBDEBA_DSS2[i];
        (*(RHSBDEBA[i]))["DSS3"    ] = RHSBDEBA_DSS3[i];
        (*(RHSBDEBA[i]))["DSS4"    ] = RHSBDEBA_DSS4[i];
        (*(RHSBDEBA[i]))["DSS5"    ] = RHSBDEBA_DSS5[i];
        (*(RHSBDEBA[i]))["DSS6"    ] = RHSBDEBA_DSS6[i];
        (*(RHSBDEBA[i]))["DSS7"    ] = RHSBDEBA_DSS7[i];
        (*(RHSBDEBA[i]))["DSS8"    ] = RHSBDEBA_DSS8[i];
        (*(RHSBDEBA[i]))["DSS9"    ] = RHSBDEBA_DSS9[i];
        (*(RHSBDEBA[i]))["DSS10"   ] = RHSBDEBA_DSS10[i];
        (*(RHSBDEBA[i]))["DSS11"   ] = RHSBDEBA_DSS11[i];
        (*(RHSBDEBA[i]))["DSS12"   ] = RHSBDEBA_DSS12[i];
        (*(RHSBDEBA[i]))["DSS13"   ] = RHSBDEBA_DSS13[i];
        (*(RHSBDEBA[i]))["DSS14"   ] = RHSBDEBA_DSS14[i];
        (*(RHSBDEBA[i]))["DSS15"   ] = RHSBDEBA_DSS15[i];
        return;
    }
    if (addr == 0x0030) {
        (*RHSBEBE0)["EBE23_16"] = RHSBEBE0_EBE23_16;
        (*RHSBEBE0)["EBE31_24"] = RHSBEBE0_EBE31_24;
        (*RHSBEBE0)["EBE7_0"  ] = RHSBEBE0_EBE7_0;
        (*RHSBEBE0)["EBE15_8" ] = RHSBEBE0_EBE15_8;
        return;
    }
    if (addr == 0x0034) {
        (*RHSBEBE1)["EBE55_48"] = RHSBEBE1_EBE55_48;
        (*RHSBEBE1)["EBE63_56"] = RHSBEBE1_EBE63_56;
        (*RHSBEBE1)["EBE39_32"] = RHSBEBE1_EBE39_32;
        (*RHSBEBE1)["EBE47_40"] = RHSBEBE1_EBE47_40;
        return;
    }
    if (addr == 0x0038) {
        (*RHSBDTC )["DTE"     ] = RHSBDTC_DTE;
        (*RHSBDTC )["TSR"     ] = RHSBDTC_TSR;
        (*RHSBDTC )["CTR"     ] = RHSBDTC_CTR;
        (*RHSBDTC )["SSCF"    ] = RHSBDTC_SSCF;
        (*RHSBDTC )["NCB"     ] = RHSBDTC_NCB;
        return;
    }
    if (addr == 0x003C) {
        (*RHSBDCD )["CB"      ] = RHSBDCD_CB;
        return;
    }
    if (addr == 0x0040) {
        (*RHSBDDR0)["DB31_16" ] = RHSBDDR0_DB31_16;
        (*RHSBDDR0)["DB15_0"  ] = RHSBDDR0_DB15_0;
        return;
    }
    if (addr == 0x0044) {
        (*RHSBDDR1)["DB63_48" ] = RHSBDDR1_DB63_48;
        (*RHSBDDR1)["DB47_32" ] = RHSBDDR1_DB47_32;
        return;
    }
    if (addr == 0x0048) {
        (*RHSBDED0)["EB31_16" ] = RHSBDED0_EB31_16;
        (*RHSBDED0)["EB15_0"  ] = RHSBDED0_EB15_0;
        return;
    }
    if (addr == 0x004C) {
        (*RHSBDED1)["EB63_48" ] = RHSBDED1_EB63_48;
        (*RHSBDED1)["EB47_32" ] = RHSBDED1_EB47_32;
        return;
    }
    if (addr == 0x0050) {
        (*RHSBUCR )["FSM"     ] = RHSBUCR_FSM;
        (*RHSBUCR )["UMS"     ] = RHSBUCR_UMS;
        (*RHSBUCR )["TOE"     ] = RHSBUCR_TOE;
        (*RHSBUCR )["UE"      ] = RHSBUCR_UE;
        (*RHSBUCR )["RTO"     ] = RHSBUCR_RTO;
        return;
    }
    if (addr == 0x0054) {
        (*RHSBUCC )["Reserved"] = RHSBUCC_Reserved;
        (*RHSBUCC )["UBR1"    ] = RHSBUCC_UBR1;
        (*RHSBUCC )["PC1"     ] = RHSBUCC_PC1;
        (*RHSBUCC )["ILP1"    ] = RHSBUCC_ILP1;
        (*RHSBUCC )["SBN1"    ] = RHSBUCC_SBN1;
        (*RHSBUCC )["UFT1"    ] = RHSBUCC_UFT1;
        (*RHSBUCC )["UBR0"    ] = RHSBUCC_UBR0;
        (*RHSBUCC )["PC0"     ] = RHSBUCC_PC0;
        (*RHSBUCC )["ILP0"    ] = RHSBUCC_ILP0;
        (*RHSBUCC )["SBN0"    ] = RHSBUCC_SBN0;
        (*RHSBUCC )["UFT0"    ] = RHSBUCC_UFT0;
        return;
    }
    if (addr == 0x0058) {
        (*RHSBUCS )["ACC"     ] = RHSBUCS_ACC;
        (*RHSBUCS )["BSY"     ] = RHSBUCS_BSY;
        return;
    }
    if (addr == 0x005C) {
        (*RHSBUDR )["DF"      ] = RHSBUDR_DF;
        (*RHSBUDR )["EDF"     ] = RHSBUDR_EDF;
        (*RHSBUDR )["ND"      ] = RHSBUDR_ND;
        (*RHSBUDR )["PERR"    ] = RHSBUDR_PERR;
        (*RHSBUDR )["FERR"    ] = RHSBUDR_FERR;
        (*RHSBUDR )["TO"      ] = RHSBUDR_TO;
        (*RHSBUDR )["DL"      ] = RHSBUDR_DL;
        (*RHSBUDR )["LUD"     ] = RHSBUDR_LUD;
        (*RHSBUDR )["NDS1"    ] = RHSBUDR_NDS1;
        (*RHSBUDR )["NDS0"    ] = RHSBUDR_NDS0;
        return;
    }
    if ((0x0060 <= addr) && (addr <= (0x0060)+(4*1)) && ((addr-0x0060)%4 == 0)) {
        uint i = (addr - 0x0060)/4;
        (*(RHSBUD  [i]))["DF"      ] = RHSBUD_DF[i];
        (*(RHSBUD  [i]))["EDF"     ] = RHSBUD_EDF[i];
        (*(RHSBUD  [i]))["ND"      ] = RHSBUD_ND[i];
        (*(RHSBUD  [i]))["PERR"    ] = RHSBUD_PERR[i];
        (*(RHSBUD  [i]))["FERR"    ] = RHSBUD_FERR[i];
        (*(RHSBUD  [i]))["TO"      ] = RHSBUD_TO[i];
        (*(RHSBUD  [i]))["DL"      ] = RHSBUD_DL[i];
        return;
    }
    if (addr == 0x0070) {
        (*RHSBUSS )["ND1"     ] = RHSBUSS_ND1;
        (*RHSBUSS )["PERR1"   ] = RHSBUSS_PERR1;
        (*RHSBUSS )["FERR1"   ] = RHSBUSS_FERR1;
        (*RHSBUSS )["TO1"     ] = RHSBUSS_TO1;
        (*RHSBUSS )["DL1"     ] = RHSBUSS_DL1;
        (*RHSBUSS )["ND0"     ] = RHSBUSS_ND0;
        (*RHSBUSS )["PERR0"   ] = RHSBUSS_PERR0;
        (*RHSBUSS )["FERR0"   ] = RHSBUSS_FERR0;
        (*RHSBUSS )["TO0"     ] = RHSBUSS_TO0;
        (*RHSBUSS )["DL0"     ] = RHSBUSS_DL0;
        return;
    }
    if (addr == 0x0074) {
        (*RHSBIC  )["DTSIE"   ] = RHSBIC_DTSIE;
        (*RHSBIC  )["DTIE"    ] = RHSBIC_DTIE;
        (*RHSBIC  )["CTIE"    ] = RHSBIC_CTIE;
        (*RHSBIC  )["ETIE"    ] = RHSBIC_ETIE;
        (*RHSBIC  )["TSIE"    ] = RHSBIC_TSIE;
        (*RHSBIC  )["DRIE"    ] = RHSBIC_DRIE;
        (*RHSBIC  )["UEIE"    ] = RHSBIC_UEIE;
        (*RHSBIC  )["TOIE"    ] = RHSBIC_TOIE;
        (*RHSBIC  )["DLIE"    ] = RHSBIC_DLIE;
        return;
    }
    if (addr == 0x0078) {
        (*RHSBIS  )["ERF"     ] = RHSBIS_ERF;
        (*RHSBIS  )["DTSF"    ] = RHSBIS_DTSF;
        (*RHSBIS  )["DTF"     ] = RHSBIS_DTF;
        (*RHSBIS  )["CTF"     ] = RHSBIS_CTF;
        (*RHSBIS  )["ETF"     ] = RHSBIS_ETF;
        (*RHSBIS  )["TSF"     ] = RHSBIS_TSF;
        (*RHSBIS  )["DRF"     ] = RHSBIS_DRF;
        (*RHSBIS  )["UEF"     ] = RHSBIS_UEF;
        (*RHSBIS  )["TOF"     ] = RHSBIS_TOF;
        (*RHSBIS  )["DLF"     ] = RHSBIS_DLF;
        return;
    }
    if (addr == 0x007C) {
        (*RHSBDCR1)["SLS1"    ] = RHSBDCR1_SLS1;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Crhsb_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Crhsb_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Crhsb_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,7, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Crhsb_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<7)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Crhsb_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Crhsb_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Crhsb_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Crhsb_regif::uint Crhsb_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Crhsb_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Crhsb_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Crhsb_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Crhsb_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Crhsb_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Crhsb_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Crhsb_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
