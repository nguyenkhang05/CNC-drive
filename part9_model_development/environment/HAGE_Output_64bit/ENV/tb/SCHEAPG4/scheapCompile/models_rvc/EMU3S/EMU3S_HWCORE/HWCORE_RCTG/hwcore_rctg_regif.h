// -----------------------------------------------------------------------------
// $Id: hwcore_rctg_regif.h,v 1.4 2020/11/10 05:06:40 quanganhtran Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_rctg.txt
////////////////////////////////////////////////////////////////////////////////
//  %MODULE HWCORE_RCTG
//      #              name     offset_size
//      %%REG_INSTANCE reg_def  11
//  
//  %REG_CHANNEL reg_def                                                       
//      %%TITLE    name             reg_name       size     wsize   rsize       length  offset     factor_start   factor_end   factor_index   factor_step   access   init   support  callback
//      %%REG      RECCTR               RECCTR     8        8       8|16|32     8       0x4C0      -              -            -              -             R|W      0x4    TRUE     -
//      %%REG      PTNN                 PTNN       8        8       8|16|32     8       0x4C4      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PTNAB                PTNAB      8        8       8|16|32     8       0x4C5      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PTNCD                PTNCD      8        8       8|16|32     8       0x4C6      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PTNEF                PTNEF      8        8       8|16|32     8       0x4C7      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      CMP0                 CMP0       16       16      8|16|32     16      0x4C8      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      CMP1                 CMP1       16       16      8|16|32     16      0x4CA      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PHQSFT               PHQSFT     16       16      8|16|32     16      0x4CC      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PSWSFT               PSWSFT     8        8       8|16|32     8       0x4CE      -              -            -              -             R|W      0x0    TRUE     -
//      %%REG      PSW                  PSW        8        -       8|16|32     8       0x4CF      -              -            -              -             R        0x0    TRUE     -
//      %%REG      IPCMP0               IPCMP0     16       -       8|16|32     16      0x4D0      -              -            -              -             R        0x0    TRUE     -
//      
//  %REG_NAME RECCTR
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    FDRCT          7       7       0x0     R|W      TRUE     -
//      %%BIT    FIPPOSI        2       2       0x1     R|W      TRUE     -
//      %%BIT    SLCTCMP0       1       1       0x0     R|W      TRUE     W
//      %%BIT    SETREC         0       0       0x0     R|W      TRUE     -
//  
//  %REG_NAME PTNN
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    WPTN           2       2       0x0     R|W      TRUE     -
//      %%BIT    VPTN           1       1       0x0     R|W      TRUE     -
//      %%BIT    UPTN           0       0       0x0     R|W      TRUE     -
//  
//  %REG_NAME PTNAB
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    WPTNB          5       5       0x0     R|W      TRUE     -
//      %%BIT    VPTNB          4       4       0x0     R|W      TRUE     -
//      %%BIT    UPTNB          3       3       0x0     R|W      TRUE     -
//      %%BIT    WPTNA          2       2       0x0     R|W      TRUE     -
//      %%BIT    VPTNA          1       1       0x0     R|W      TRUE     -
//      %%BIT    UPTNA          0       0       0x0     R|W      TRUE     -
//  
//  %REG_NAME PTNCD
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    WPTND          5       5       0x0     R|W      TRUE     -
//      %%BIT    VPTND          4       4       0x0     R|W      TRUE     -
//      %%BIT    UPTND          3       3       0x0     R|W      TRUE     -
//      %%BIT    WPTNC          2       2       0x0     R|W      TRUE     -
//      %%BIT    VPTNC          1       1       0x0     R|W      TRUE     -
//      %%BIT    UPTNC          0       0       0x0     R|W      TRUE     -
//  
//  %REG_NAME PTNEF
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    WPTNF          5       5       0x0     R|W      TRUE     -
//      %%BIT    VPTNF          4       4       0x0     R|W      TRUE     -
//      %%BIT    UPTNF          3       3       0x0     R|W      TRUE     -
//      %%BIT    WPTNE          2       2       0x0     R|W      TRUE     -
//      %%BIT    VPTNE          1       1       0x0     R|W      TRUE     -
//      %%BIT    UPTNE          0       0       0x0     R|W      TRUE     -
//  
//  %REG_NAME CMP0
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           11      0       0x0     R|W      TRUE     W
//  
//  %REG_NAME CMP1
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           11      0       0x0     R|W      TRUE     W
//  
//  %REG_NAME PHQSFT
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           15      0       0x0     R|W      TRUE     W
//  
//  %REG_NAME PSWSFT
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           2       0       0x0     R|W      TRUE     W
//  
//  %REG_NAME PSW
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           2       0       0x0     R        TRUE     -
//  
//  %REG_NAME IPCMP0
//      %%TITLE  name       upper   lower   init    access   support  callback
//      %%BIT    DATA           11      0       0x0     R        TRUE     -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_rctg_regif.h
/// @brief Register IF class of model HWCORE_RCTG
/// $Id: hwcore_rctg_regif.h,v 1.4 2020/11/10 05:06:40 quanganhtran Exp $
/// $Date: 2020/11/10 05:06:40 $
/// $Revison$
/// $Author: quanganhtran $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_RCTG_REGIF_H__
#define __HWCORE_RCTG_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_RCTG model
class Chwcore_rctg_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef unsigned short REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_rctg_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_rctg_regif(std::string name, uint buswidth);
    ~Chwcore_rctg_regif();

protected:
    vpcl::re_register *RECCTR;
    vpcl::re_register *PTNN  ;
    vpcl::re_register *PTNAB ;
    vpcl::re_register *PTNCD ;
    vpcl::re_register *PTNEF ;
    vpcl::re_register *CMP0  ;
    vpcl::re_register *CMP1  ;
    vpcl::re_register *PHQSFT;
    vpcl::re_register *PSWSFT;
    vpcl::re_register *PSW   ;
    vpcl::re_register *IPCMP0;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_RECCTR_SLCTCMP0(RegCBstr str) = 0;
    virtual void cb_CMP0_DATA(RegCBstr str) = 0;
    virtual void cb_CMP1_DATA(RegCBstr str) = 0;
    virtual void cb_PHQSFT_DATA(RegCBstr str) = 0;
    virtual void cb_PSWSFT_DATA(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_rctg_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_rctg_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_rctg_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_rctg_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    unsigned short cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    unsigned short cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_RCTG_REGIF_H__
