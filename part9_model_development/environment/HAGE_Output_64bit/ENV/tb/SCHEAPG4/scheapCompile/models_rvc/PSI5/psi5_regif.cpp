// -----------------------------------------------------------------------------
// $Id: psi5_regif.cpp,v 1.2 2020/04/03 11:08:05 ducla Exp $
//
// Copyright(c) 2018 - 2020 Renesas Electronics Corporation
// Copyright(c) 2018 - 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : psi5_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE PSI5
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name          reg_name     wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access  init        support  callback
//     %%REG    -      CHCTRL        CHCTRL       32       8|16|32  32      0x000   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      CHSTATUS      CHSTATUS     8|16|32  8|16|32  32      0x004   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      IPTIMERCTRL   IPTIMERCTRL  32       8|16|32  32      0x010   -             -           -             -            W|R     0x10000     TRUE     W  
//     %%REG    -      IPTIMER       IPTIMER      32       8|16|32  32      0x014   -             -           -             -            W|R     0x0         TRUE     W 
//     %%REG    -      OPMCOMM       OPMCOMM      32       8|16|32  32      0x020   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      OPMBITRATE    OPMBITRATE   32       8|16|32  32      0x024   -             -           -             -            W|R     0x29F       TRUE     W  
//     %%REG    -      OPMCYCT       OPMCYCT      32       8|16|32  32      0x028   -             -           -             -            W|R     0x9C3F      TRUE     W  
//     %%REG    -      PSI5INT       PSI5INT      8|16|32  8|16|32  32      0x030   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      EMRXDATA      EMRXDATA     8|16|32  8|16|32  32      0x040   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDST       EMRXDST      8|16|32  8|16|32  32      0x044   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDTIM      EMRXDTIM     8|16|32  8|16|32  32      0x048   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXDFIFO     EMRXDFIFO    8|16|32  8|16|32  32      0x04C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXMSG    EMRXMRXMSG   8|16|32  8|16|32  32      0x050   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXST     EMRXMRXST    8|16|32  8|16|32  32      0x054   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMRXTIM    EMRXMRXTIM   8|16|32  8|16|32  32      0x058   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      EMRXMFIFO     EMRXMFIFO    8|16|32  8|16|32  32      0x05C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      TXSETTING     TXSETTING    32       8|16|32  32      0x080   -             -           -             -            W|R     0x106747F7  TRUE     W  
//     %%REG    -      SYNCCTRL      SYNCCTRL     32       8|16|32  32      0x084   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXST          TXST         8|16|32  8|16|32  32      0x088   -             -           -             -              R     0x1         TRUE     -  
//     %%REG    -      TXSTCLR       TXSTCLR      32       8|16|32  32      0x08C   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXSTINTEN     TXSTINTEN    32       8|16|32  32      0x090   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      TXDCTRL       TXDCTRL      32       8|16|32  32      0x094   -             -           -             -            W|R     0x1         TRUE     -  
//     %%REG    -      TXDATA        TXDATA       32       8|16|32  32      0x098   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXSPLSET      RXSPLSET     32       8|16|32  32      0x100   -             -           -             -            W|R     0x27        TRUE     W  
//     %%REG    -      RXWINSET      RXWINSET     32       8|16|32  32      0x104   -             -           -             -            W|R     0xB03130C   TRUE     W  
//     %%REG    -      RXSSET        RXSSET       32       8|16|32  32      0x108   1             8           -             0x4          W|R     0xA00000    TRUE     W  
//     %%REG    -      RXDATA        RXDATA       8|16|32  8|16|32  32      0x128   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDST         RXDST        8|16|32  8|16|32  32      0x12C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDTIM        RXDTIM       8|16|32  8|16|32  32      0x130   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXDFIFO       RXDFIFO      8|16|32  8|16|32  32      0x134   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMODST       RXMODST      8|16|32  8|16|32  32      0x138   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RXMODSTCLR    RXMODSTCLR   32       8|16|32  32      0x13C   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMODSTINTEN  RXMODSTINTEN 32       8|16|32  32      0x140   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMSET        RXMSET       32       8|16|32  32      0x180   -             -           -             -            W|R     0x0         TRUE     W  
//     %%REG    -      RXMRXMSG      RXMRXMSG     8|16|32  8|16|32  32      0x184   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMRXST       RXMRXST      8|16|32  8|16|32  32      0x188   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMRXTIM      RXMRXTIM     8|16|32  8|16|32  32      0x18C   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMFIFO       RXMFIFO      8|16|32  8|16|32  32      0x190   -             -           -             -              R     0x0         TRUE     R  
//     %%REG    -      RXMMST        RXMMST       8|16|32  8|16|32  32      0x194   -             -           -             -              R     0x0         TRUE     -  
//     %%REG    -      RXMMSTCLR     RXMMSTCLR    32       8|16|32  32      0x198   -             -           -             -             W|R    0x0         TRUE     W  
//     %%REG    -      RXMMSTINTEN   RXMMSTINTEN  32       8|16|32  32      0x19C   -             -           -             -             W|R    0x0         TRUE     W  
// 
// %REG_NAME CHCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    CHEN             0      0      0         W|R     TRUE     W
//     %%BIT    RSV              16     16     0         W|R     TRUE     -
// 
// %REG_NAME CHSTATUS
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    CHANNELNUM       15     0      0         R       TRUE     -
// 
// %REG_NAME IPTIMERCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    IPTIMEN          0      0      0         W|R     TRUE     -
//     %%BIT    TSCLR            8      8      0         W|R     TRUE     W
//     %%BIT    MSTSLV           16     16     1         W|R     TRUE     -
// 
// %REG_NAME IPTIMER
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    COUNTVAL         31     0      0         W|R     TRUE     W
// 
// %REG_NAME OPMCOMM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    COMMODE          2      0      0         W|R     TRUE     W
// 
// %REG_NAME OPMBITRATE
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    BITRATECNT       15      0     0x29F     W|R     TRUE     W
// 
// %REG_NAME OPMCYCT
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TTTTCNT          19      0     0x9C3F    W|R     TRUE     W
// 
// %REG_NAME PSI5INT
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    INT_RXMEXIST     0      0      0         R       TRUE     -
//     %%BIT    INT_RXMFOVF      1      1      0         R       TRUE     -
//     %%BIT    INT_RXMERR       2      2      0         R       TRUE     -
//     %%BIT    INT_RXDEXIST     3      3      0         R       TRUE     -
//     %%BIT    INT_RXDFOVF      4      4      0         R       TRUE     -
//     %%BIT    INT_RXDERR       5      5      0         R       TRUE     -
//     %%BIT    INT_RXDSCNFERR   6      6      0         R       TRUE     -
//     %%BIT    INT_TXDEMPTY     16     16     0         R       TRUE     -
//     %%BIT    INT_SYNCST       17     17     0         R       TRUE     -
//     %%BIT    INT_SYNCED       18     18     0         R       TRUE     -
// 
// %REG_NAME EMRXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDATA           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXDST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     -
//     %%BIT    RXSLOTNUM        7      4      0         R       TRUE     -
//     %%BIT    RXCHKD           10     8      0         R       TRUE     -
// 
// %REG_NAME EMRXDTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDTIM           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXDFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDST            31     0      0         R       TRUE     R
// 
// %REG_NAME EMRXMRXMSG
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DATAFIELD        15     0      0         R       TRUE     -
//     %%BIT    SERIALID         23     16     0         R       TRUE     -
//     %%BIT    CONFIGBIT        31     31     0         R       TRUE     -
// 
// %REG_NAME EMRXMRXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     -
//     %%BIT    SLOTNUM          7      4      0         R       TRUE     -
//     %%BIT    RXCRC            13     8      0         R       TRUE     -
//     %%BIT    RXSYNC           18     16     0         R       TRUE     -
// 
// %REG_NAME EMRXMRXTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMTIM           31     0      0         R       TRUE     -
// 
// %REG_NAME EMRXMFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFIFO          31     0      0         R       TRUE     R
// 
// %REG_NAME TXSETTING
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SHORTCNT         13     0      0x7F7     W|R     TRUE     W
//     %%BIT    DEFTXVAL         14     14     1         W|R     TRUE     -
//     %%BIT    PHYMODE          15     15     0         W|R     TRUE     -
//     %%BIT    LONGCNT          31     16     0x1067    W|R     TRUE     -
// 
// %REG_NAME SYNCCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    VALTIMSYNC       0      0      0x0       W|R     TRUE     W
// 
// %REG_NAME TXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDEMPTY         0      0      1         R       TRUE     -
//     %%BIT    SYNCST           8      8      0         R       TRUE     -
//     %%BIT    SYNCED           9      9      0         R       TRUE     -
// 
// %REG_NAME TXSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SYNCSTCLR        8      8      0         W|R     TRUE     W
//     %%BIT    SYNCEDCLR        9      9      0         W|R     TRUE     -
// 
// %REG_NAME TXSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDEMPTYINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    SYNCSTINTEN      8      8      0         W|R     TRUE     -
//     %%BIT    SYNCEDINTEN      9      9      0         W|R     TRUE     -
// 
// %REG_NAME TXDCTRL
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    FRMFORMAT        2      0      1         W|R     TRUE     -
// 
// %REG_NAME TXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    TXDATA           31     0      0         W|R     TRUE     W
// 
// %REG_NAME RXSPLSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    SMPLPROD         7      0      0x27      W|R     TRUE     W
// 
// %REG_NAME RXWINSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DWINSTPOS        7      0      0xC       W|R     TRUE     W
//     %%BIT    DWINEDPOS        15     8      0x13      W|R     TRUE     -
//     %%BIT    NDWINSTPOS       23     16     0x3       W|R     TRUE     -
//     %%BIT    NDWINEDPOS       31     24     0xB       W|R     TRUE     -
// 
// %REG_NAME RXSSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    OFFSETCNT        19     0      0         W|R     TRUE     W
//     %%BIT    LENGTH           24     20     0xA       W|R     TRUE     -
//     %%BIT    ERRDET           25     25     0         W|R     TRUE     -
//     %%BIT    PASCMP           26     26     0         W|R     TRUE     -
//     %%BIT    SLTEN            31     31     0         W|R     TRUE     -
// 
// %REG_NAME RXDATA
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDATA           31     0      0         R       TRUE     R
// 
// %REG_NAME RXDST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     R
//     %%BIT    RXSLOTNUM        7      4      0         R       TRUE     -
//     %%BIT    RXCHKD           10     8      0         R       TRUE     -
// 
// %REG_NAME RXDTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDTIM           31     0      0         R       TRUE     R
// 
// %REG_NAME RXDFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDST            31     0      0         R       TRUE     R
// 
// %REG_NAME RXMODST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDEXIST         0      0      0         R       TRUE     -
//     %%BIT    RXDFOVF          8      8      0         R       TRUE     -
//     %%BIT    RXDERR           16     16     0         R       TRUE     -
//     %%BIT    RXDSCNFERR       24     24     0         R       TRUE     -
// 
// %REG_NAME RXMODSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDFOVFCLR       8      8      0         W|R     TRUE     W
//     %%BIT    RXDERRCLR        16     16     0         W|R     TRUE     -
//     %%BIT    RXDSCNFERRCLR    24     24     0         W|R     TRUE     -
// 
// %REG_NAME RXMODSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXDEXISTINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    RXDFOVFINTEN     8      8      0         W|R     TRUE     -
//     %%BIT    RXDERRINTEN      16     16     0         W|R     TRUE     -
//     %%BIT    RXDSCNFERRINTEN  24     24     0         W|R     TRUE     -
// 
// %REG_NAME RXMSET
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXM1EN           0      0      0         W|R     TRUE     W
//     %%BIT    RXM2EN           1      1      0         W|R     TRUE     -
//     %%BIT    RXM3EN           2      2      0         W|R     TRUE     -
//     %%BIT    RXM4EN           3      3      0         W|R     TRUE     -
//     %%BIT    RXM5EN           4      4      0         W|R     TRUE     -
//     %%BIT    RXM6EN           5      5      0         W|R     TRUE     -
//     %%BIT    RXM7EN           6      6      0         W|R     TRUE     -
//     %%BIT    RXM8EN           7      7      0         W|R     TRUE     -
// 
// %REG_NAME RXMRXMSG
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    DATAFIELD        15     0      0         R       TRUE     R
//     %%BIT    SERIALID         23     16     0         R       TRUE     -
//     %%BIT    CONFIGBIT        31     31     0         R       TRUE     -
// 
// %REG_NAME RXMRXST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXSTATUS         0      0      0         R       TRUE     R
//     %%BIT    SLOTNUM          7      4      0         R       TRUE     -
//     %%BIT    RXCRC            13     8      0         R       TRUE     -
//     %%BIT    RXSYNC           18     16     0         R       TRUE     -
// 
// %REG_NAME RXMRXTIM
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMTIM           31     0      0         R       TRUE     R
// 
// %REG_NAME RXMFIFO
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFIFO          31     0      0         R       TRUE     R
// 
// %REG_NAME RXMMST
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMEXIST         0      0      0         R       TRUE     -
//     %%BIT    RXMFOVF          8      8      0         R       TRUE     -
//     %%BIT    RXMERR           16     16     0         R       TRUE     -
// 
// %REG_NAME RXMMSTCLR
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMFOVFCLR       8      8      0         W|R      TRUE     W
//     %%BIT    RXMSERRCLR       16     16     0         W|R      TRUE     -
// 
// %REG_NAME RXMMSTINTEN
//     %%TITLE  name             upper  lower  init      access  support  callback                                     
//     %%BIT    RXMEXISTINTEN    0      0      0         W|R     TRUE     W
//     %%BIT    RXMFOVFINTEN     8      8      0         W|R     TRUE     -
//     %%BIT    RXMERRINTEN      16     16     0         W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file psi5_regif.cpp
/// @brief Register IF class of model PSI5
/// $Id: psi5_regif.cpp,v 1.2 2020/04/03 11:08:05 ducla Exp $
/// $Date: 2020/04/03 11:08:05 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#include "psi5_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cpsi5_regif::Cpsi5_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x1A0/4))
    #endif
{
    uint FactorIndex_RXSSET_tmp[emNUM_RXSSET] = {   1,   2,   3,   4,   5,   6,   7,   8};
    for(uint i = 0; i < emNUM_RXSSET; i++) {
        mFactorIndexRXSSET[i] = FactorIndex_RXSSET_tmp[i];
    }

    CommandInit();
    CHCTRL       = new vpcl::re_register(0x0000, this, "CHCTRL"      , name.c_str());
    CHSTATUS     = new vpcl::re_register(0x0004, this, "CHSTATUS"    , name.c_str());
    IPTIMERCTRL  = new vpcl::re_register(0x0010, this, "IPTIMERCTRL" , name.c_str());
    IPTIMER      = new vpcl::re_register(0x0014, this, "IPTIMER"     , name.c_str());
    OPMCOMM      = new vpcl::re_register(0x0020, this, "OPMCOMM"     , name.c_str());
    OPMBITRATE   = new vpcl::re_register(0x0024, this, "OPMBITRATE"  , name.c_str());
    OPMCYCT      = new vpcl::re_register(0x0028, this, "OPMCYCT"     , name.c_str());
    PSI5INT      = new vpcl::re_register(0x0030, this, "PSI5INT"     , name.c_str());
    EMRXDATA     = new vpcl::re_register(0x0040, this, "EMRXDATA"    , name.c_str());
    EMRXDST      = new vpcl::re_register(0x0044, this, "EMRXDST"     , name.c_str());
    EMRXDTIM     = new vpcl::re_register(0x0048, this, "EMRXDTIM"    , name.c_str());
    EMRXDFIFO    = new vpcl::re_register(0x004C, this, "EMRXDFIFO"   , name.c_str());
    EMRXMRXMSG   = new vpcl::re_register(0x0050, this, "EMRXMRXMSG"  , name.c_str());
    EMRXMRXST    = new vpcl::re_register(0x0054, this, "EMRXMRXST"   , name.c_str());
    EMRXMRXTIM   = new vpcl::re_register(0x0058, this, "EMRXMRXTIM"  , name.c_str());
    EMRXMFIFO    = new vpcl::re_register(0x005C, this, "EMRXMFIFO"   , name.c_str());
    TXSETTING    = new vpcl::re_register(0x0080, this, "TXSETTING"   , name.c_str());
    SYNCCTRL     = new vpcl::re_register(0x0084, this, "SYNCCTRL"    , name.c_str());
    TXST         = new vpcl::re_register(0x0088, this, "TXST"        , name.c_str());
    TXSTCLR      = new vpcl::re_register(0x008C, this, "TXSTCLR"     , name.c_str());
    TXSTINTEN    = new vpcl::re_register(0x0090, this, "TXSTINTEN"   , name.c_str());
    TXDCTRL      = new vpcl::re_register(0x0094, this, "TXDCTRL"     , name.c_str());
    TXDATA       = new vpcl::re_register(0x0098, this, "TXDATA"      , name.c_str());
    RXSPLSET     = new vpcl::re_register(0x0100, this, "RXSPLSET"    , name.c_str());
    RXWINSET     = new vpcl::re_register(0x0104, this, "RXWINSET"    , name.c_str());
    RXDATA       = new vpcl::re_register(0x0128, this, "RXDATA"      , name.c_str());
    RXDST        = new vpcl::re_register(0x012C, this, "RXDST"       , name.c_str());
    RXDTIM       = new vpcl::re_register(0x0130, this, "RXDTIM"      , name.c_str());
    RXDFIFO      = new vpcl::re_register(0x0134, this, "RXDFIFO"     , name.c_str());
    RXMODST      = new vpcl::re_register(0x0138, this, "RXMODST"     , name.c_str());
    RXMODSTCLR   = new vpcl::re_register(0x013C, this, "RXMODSTCLR"  , name.c_str());
    RXMODSTINTEN = new vpcl::re_register(0x0140, this, "RXMODSTINTEN", name.c_str());
    RXMSET       = new vpcl::re_register(0x0180, this, "RXMSET"      , name.c_str());
    RXMRXMSG     = new vpcl::re_register(0x0184, this, "RXMRXMSG"    , name.c_str());
    RXMRXST      = new vpcl::re_register(0x0188, this, "RXMRXST"     , name.c_str());
    RXMRXTIM     = new vpcl::re_register(0x018C, this, "RXMRXTIM"    , name.c_str());
    RXMFIFO      = new vpcl::re_register(0x0190, this, "RXMFIFO"     , name.c_str());
    RXMMST       = new vpcl::re_register(0x0194, this, "RXMMST"      , name.c_str());
    RXMMSTCLR    = new vpcl::re_register(0x0198, this, "RXMMSTCLR"   , name.c_str());
    RXMMSTINTEN  = new vpcl::re_register(0x019C, this, "RXMMSTINTEN" , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_RXSSET; i++) {
        str_tmp.str("");
        str_tmp<<"RXSSET"<< mFactorIndexRXSSET[i];
        RXSSET      [mFactorIndexRXSSET[i]] = new vpcl::re_register((0x0108) + 4*(mFactorIndexRXSSET[i]-1), this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0044]     = index;
    mRegMap[0x0044 + 1] = index;
    mRegMap[0x0044 + 2] = index;
    mRegMap[0x0044 + 3] = index++;
    mRegMap[0x0048]     = index;
    mRegMap[0x0048 + 1] = index;
    mRegMap[0x0048 + 2] = index;
    mRegMap[0x0048 + 3] = index++;
    mRegMap[0x004C]     = index;
    mRegMap[0x004C + 1] = index;
    mRegMap[0x004C + 2] = index;
    mRegMap[0x004C + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mRegMap[0x0058]     = index;
    mRegMap[0x0058 + 1] = index;
    mRegMap[0x0058 + 2] = index;
    mRegMap[0x0058 + 3] = index++;
    mRegMap[0x005C]     = index;
    mRegMap[0x005C + 1] = index;
    mRegMap[0x005C + 2] = index;
    mRegMap[0x005C + 3] = index++;
    mRegMap[0x0080]     = index;
    mRegMap[0x0080 + 1] = index;
    mRegMap[0x0080 + 2] = index;
    mRegMap[0x0080 + 3] = index++;
    mRegMap[0x0084]     = index;
    mRegMap[0x0084 + 1] = index;
    mRegMap[0x0084 + 2] = index;
    mRegMap[0x0084 + 3] = index++;
    mRegMap[0x0088]     = index;
    mRegMap[0x0088 + 1] = index;
    mRegMap[0x0088 + 2] = index;
    mRegMap[0x0088 + 3] = index++;
    mRegMap[0x008C]     = index;
    mRegMap[0x008C + 1] = index;
    mRegMap[0x008C + 2] = index;
    mRegMap[0x008C + 3] = index++;
    mRegMap[0x0090]     = index;
    mRegMap[0x0090 + 1] = index;
    mRegMap[0x0090 + 2] = index;
    mRegMap[0x0090 + 3] = index++;
    mRegMap[0x0094]     = index;
    mRegMap[0x0094 + 1] = index;
    mRegMap[0x0094 + 2] = index;
    mRegMap[0x0094 + 3] = index++;
    mRegMap[0x0098]     = index;
    mRegMap[0x0098 + 1] = index;
    mRegMap[0x0098 + 2] = index;
    mRegMap[0x0098 + 3] = index++;
    mRegMap[0x0100]     = index;
    mRegMap[0x0100 + 1] = index;
    mRegMap[0x0100 + 2] = index;
    mRegMap[0x0100 + 3] = index++;
    mRegMap[0x0104]     = index;
    mRegMap[0x0104 + 1] = index;
    mRegMap[0x0104 + 2] = index;
    mRegMap[0x0104 + 3] = index++;
    for(uint i = 0; i < emNUM_RXSSET;      i++) {
        mRegMap[(0x0108)     + (mFactorIndexRXSSET[i]-1)*4] = index;
        mRegMap[(0x0108 + 1) + (mFactorIndexRXSSET[i]-1)*4] = index;
        mRegMap[(0x0108 + 2) + (mFactorIndexRXSSET[i]-1)*4] = index;
        mRegMap[(0x0108 + 3) + (mFactorIndexRXSSET[i]-1)*4] = index++;
    }
    mRegMap[0x0128]     = index;
    mRegMap[0x0128 + 1] = index;
    mRegMap[0x0128 + 2] = index;
    mRegMap[0x0128 + 3] = index++;
    mRegMap[0x012C]     = index;
    mRegMap[0x012C + 1] = index;
    mRegMap[0x012C + 2] = index;
    mRegMap[0x012C + 3] = index++;
    mRegMap[0x0130]     = index;
    mRegMap[0x0130 + 1] = index;
    mRegMap[0x0130 + 2] = index;
    mRegMap[0x0130 + 3] = index++;
    mRegMap[0x0134]     = index;
    mRegMap[0x0134 + 1] = index;
    mRegMap[0x0134 + 2] = index;
    mRegMap[0x0134 + 3] = index++;
    mRegMap[0x0138]     = index;
    mRegMap[0x0138 + 1] = index;
    mRegMap[0x0138 + 2] = index;
    mRegMap[0x0138 + 3] = index++;
    mRegMap[0x013C]     = index;
    mRegMap[0x013C + 1] = index;
    mRegMap[0x013C + 2] = index;
    mRegMap[0x013C + 3] = index++;
    mRegMap[0x0140]     = index;
    mRegMap[0x0140 + 1] = index;
    mRegMap[0x0140 + 2] = index;
    mRegMap[0x0140 + 3] = index++;
    mRegMap[0x0180]     = index;
    mRegMap[0x0180 + 1] = index;
    mRegMap[0x0180 + 2] = index;
    mRegMap[0x0180 + 3] = index++;
    mRegMap[0x0184]     = index;
    mRegMap[0x0184 + 1] = index;
    mRegMap[0x0184 + 2] = index;
    mRegMap[0x0184 + 3] = index++;
    mRegMap[0x0188]     = index;
    mRegMap[0x0188 + 1] = index;
    mRegMap[0x0188 + 2] = index;
    mRegMap[0x0188 + 3] = index++;
    mRegMap[0x018C]     = index;
    mRegMap[0x018C + 1] = index;
    mRegMap[0x018C + 2] = index;
    mRegMap[0x018C + 3] = index++;
    mRegMap[0x0190]     = index;
    mRegMap[0x0190 + 1] = index;
    mRegMap[0x0190 + 2] = index;
    mRegMap[0x0190 + 3] = index++;
    mRegMap[0x0194]     = index;
    mRegMap[0x0194 + 1] = index;
    mRegMap[0x0194 + 2] = index;
    mRegMap[0x0194 + 3] = index++;
    mRegMap[0x0198]     = index;
    mRegMap[0x0198 + 1] = index;
    mRegMap[0x0198 + 2] = index;
    mRegMap[0x0198 + 3] = index++;
    mRegMap[0x019C]     = index;
    mRegMap[0x019C + 1] = index;
    mRegMap[0x019C + 2] = index;
    mRegMap[0x019C + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_CHCTRL        , CHCTRL->name()      , CHCTRL->addr()      );
    cw_instantiate_reg(CW_CHSTATUS      , CHSTATUS->name()    , CHSTATUS->addr()    );
    cw_instantiate_reg(CW_IPTIMERCTRL   , IPTIMERCTRL->name() , IPTIMERCTRL->addr() );
    cw_instantiate_reg(CW_IPTIMER       , IPTIMER->name()     , IPTIMER->addr()     );
    cw_instantiate_reg(CW_OPMCOMM       , OPMCOMM->name()     , OPMCOMM->addr()     );
    cw_instantiate_reg(CW_OPMBITRATE    , OPMBITRATE->name()  , OPMBITRATE->addr()  );
    cw_instantiate_reg(CW_OPMCYCT       , OPMCYCT->name()     , OPMCYCT->addr()     );
    cw_instantiate_reg(CW_PSI5INT       , PSI5INT->name()     , PSI5INT->addr()     );
    cw_instantiate_reg(CW_EMRXDATA      , EMRXDATA->name()    , EMRXDATA->addr()    );
    cw_instantiate_reg(CW_EMRXDST       , EMRXDST->name()     , EMRXDST->addr()     );
    cw_instantiate_reg(CW_EMRXDTIM      , EMRXDTIM->name()    , EMRXDTIM->addr()    );
    cw_instantiate_reg(CW_EMRXDFIFO     , EMRXDFIFO->name()   , EMRXDFIFO->addr()   );
    cw_instantiate_reg(CW_EMRXMRXMSG    , EMRXMRXMSG->name()  , EMRXMRXMSG->addr()  );
    cw_instantiate_reg(CW_EMRXMRXST     , EMRXMRXST->name()   , EMRXMRXST->addr()   );
    cw_instantiate_reg(CW_EMRXMRXTIM    , EMRXMRXTIM->name()  , EMRXMRXTIM->addr()  );
    cw_instantiate_reg(CW_EMRXMFIFO     , EMRXMFIFO->name()   , EMRXMFIFO->addr()   );
    cw_instantiate_reg(CW_TXSETTING     , TXSETTING->name()   , TXSETTING->addr()   );
    cw_instantiate_reg(CW_SYNCCTRL      , SYNCCTRL->name()    , SYNCCTRL->addr()    );
    cw_instantiate_reg(CW_TXST          , TXST->name()        , TXST->addr()        );
    cw_instantiate_reg(CW_TXSTCLR       , TXSTCLR->name()     , TXSTCLR->addr()     );
    cw_instantiate_reg(CW_TXSTINTEN     , TXSTINTEN->name()   , TXSTINTEN->addr()   );
    cw_instantiate_reg(CW_TXDCTRL       , TXDCTRL->name()     , TXDCTRL->addr()     );
    cw_instantiate_reg(CW_TXDATA        , TXDATA->name()      , TXDATA->addr()      );
    cw_instantiate_reg(CW_RXSPLSET      , RXSPLSET->name()    , RXSPLSET->addr()    );
    cw_instantiate_reg(CW_RXWINSET      , RXWINSET->name()    , RXWINSET->addr()    );
    for(uint i = 0; i < emNUM_RXSSET      ; i++) cw_instantiate_reg(CW_RXSSET        [mFactorIndexRXSSET      [i]], RXSSET      [mFactorIndexRXSSET      [i]]->name(), RXSSET      [mFactorIndexRXSSET      [i]]->addr());
    cw_instantiate_reg(CW_RXDATA        , RXDATA->name()      , RXDATA->addr()      );
    cw_instantiate_reg(CW_RXDST         , RXDST->name()       , RXDST->addr()       );
    cw_instantiate_reg(CW_RXDTIM        , RXDTIM->name()      , RXDTIM->addr()      );
    cw_instantiate_reg(CW_RXDFIFO       , RXDFIFO->name()     , RXDFIFO->addr()     );
    cw_instantiate_reg(CW_RXMODST       , RXMODST->name()     , RXMODST->addr()     );
    cw_instantiate_reg(CW_RXMODSTCLR    , RXMODSTCLR->name()  , RXMODSTCLR->addr()  );
    cw_instantiate_reg(CW_RXMODSTINTEN  , RXMODSTINTEN->name(), RXMODSTINTEN->addr());
    cw_instantiate_reg(CW_RXMSET        , RXMSET->name()      , RXMSET->addr()      );
    cw_instantiate_reg(CW_RXMRXMSG      , RXMRXMSG->name()    , RXMRXMSG->addr()    );
    cw_instantiate_reg(CW_RXMRXST       , RXMRXST->name()     , RXMRXST->addr()     );
    cw_instantiate_reg(CW_RXMRXTIM      , RXMRXTIM->name()    , RXMRXTIM->addr()    );
    cw_instantiate_reg(CW_RXMFIFO       , RXMFIFO->name()     , RXMFIFO->addr()     );
    cw_instantiate_reg(CW_RXMMST        , RXMMST->name()      , RXMMST->addr()      );
    cw_instantiate_reg(CW_RXMMSTCLR     , RXMMSTCLR->name()   , RXMMSTCLR->addr()   );
    cw_instantiate_reg(CW_RXMMSTINTEN   , RXMMSTINTEN->name() , RXMMSTINTEN->addr() );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(CHCTRL        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CHSTATUS      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPTIMERCTRL   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(IPTIMER       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(OPMCOMM       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(OPMBITRATE    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(OPMCYCT       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSI5INT       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXDATA      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXDST       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXDTIM      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXDFIFO     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXMRXMSG    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXMRXST     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXMRXTIM    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EMRXMFIFO     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXSETTING     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SYNCCTRL      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXST          , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXSTCLR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXSTINTEN     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXDCTRL       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TXDATA        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXSPLSET      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXWINSET      , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_RXSSET      ; i++) mCurReg = mRegArray[index++] = new SRegList(RXSSET        [mFactorIndexRXSSET      [i]], mCurReg, mFactorIndexRXSSET      [i],  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXDATA        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXDST         , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXDTIM        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXDFIFO       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMODST       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMODSTCLR    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMODSTINTEN  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMSET        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMRXMSG      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMRXST       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMRXTIM      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMFIFO       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMMST        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMMSTCLR     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RXMMSTINTEN   , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*CHCTRL        ) ( 0,  0, "CHEN"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CHCTRL        ) (16, 16, "RSV"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CHSTATUS      ) (15,  0, "CHANNELNUM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*IPTIMERCTRL   ) ( 0,  0, "IPTIMEN" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPTIMERCTRL   ) ( 8,  8, "TSCLR"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPTIMERCTRL   ) (16, 16, "MSTSLV"  , 0x1       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPTIMER       ) (31,  0, "COUNTVAL", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*OPMCOMM       ) ( 2,  0, "COMMODE" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*OPMBITRATE    ) (15,  0, "BITRATECNT", 0x29F     , "W|R"   , vpcl::SPP_ENABLE);
    (*OPMCYCT       ) (19,  0, "TTTTCNT" , 0x9C3F    , "W|R"   , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 0,  0, "INT_RXMEXIST", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 1,  1, "INT_RXMFOVF", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 2,  2, "INT_RXMERR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 3,  3, "INT_RXDEXIST", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 4,  4, "INT_RXDFOVF", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 5,  5, "INT_RXDERR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) ( 6,  6, "INT_RXDSCNFERR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) (16, 16, "INT_TXDEMPTY", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) (17, 17, "INT_SYNCST", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*PSI5INT       ) (18, 18, "INT_SYNCED", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDATA      ) (31,  0, "RXDATA"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDST       ) ( 0,  0, "RXSTATUS", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDST       ) ( 7,  4, "RXSLOTNUM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDST       ) (10,  8, "RXCHKD"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDTIM      ) (31,  0, "RXDTIM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXDFIFO     ) (31,  0, "RXDST"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXMSG    ) (15,  0, "DATAFIELD", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXMSG    ) (23, 16, "SERIALID", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXMSG    ) (31, 31, "CONFIGBIT", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXST     ) ( 0,  0, "RXSTATUS", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXST     ) ( 7,  4, "SLOTNUM" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXST     ) (13,  8, "RXCRC"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXST     ) (18, 16, "RXSYNC"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMRXTIM    ) (31,  0, "RXMTIM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EMRXMFIFO     ) (31,  0, "RXMFIFO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TXSETTING     ) (13,  0, "SHORTCNT", 0x7F7     , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSETTING     ) (14, 14, "DEFTXVAL", 0x1       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSETTING     ) (15, 15, "PHYMODE" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSETTING     ) (31, 16, "LONGCNT" , 0x1067    , "W|R"   , vpcl::SPP_ENABLE);
    (*SYNCCTRL      ) ( 0,  0, "VALTIMSYNC", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXST          ) ( 0,  0, "TXDEMPTY", 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*TXST          ) ( 8,  8, "SYNCST"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TXST          ) ( 9,  9, "SYNCED"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TXSTCLR       ) ( 8,  8, "SYNCSTCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSTCLR       ) ( 9,  9, "SYNCEDCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSTINTEN     ) ( 0,  0, "TXDEMPTYINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSTINTEN     ) ( 8,  8, "SYNCSTINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXSTINTEN     ) ( 9,  9, "SYNCEDINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXDCTRL       ) ( 2,  0, "FRMFORMAT", 0x1       , "W|R"   , vpcl::SPP_ENABLE);
    (*TXDATA        ) (31,  0, "TXDATA"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXSPLSET      ) ( 7,  0, "SMPLPROD", 0x27      , "W|R"   , vpcl::SPP_ENABLE);
    (*RXWINSET      ) ( 7,  0, "DWINSTPOS", 0xC       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXWINSET      ) (15,  8, "DWINEDPOS", 0x13      , "W|R"   , vpcl::SPP_ENABLE);
    (*RXWINSET      ) (23, 16, "NDWINSTPOS", 0x3       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXWINSET      ) (31, 24, "NDWINEDPOS", 0xB       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXDATA        ) (31,  0, "RXDATA"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXDST         ) ( 0,  0, "RXSTATUS", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXDST         ) ( 7,  4, "RXSLOTNUM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXDST         ) (10,  8, "RXCHKD"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXDTIM        ) (31,  0, "RXDTIM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXDFIFO       ) (31,  0, "RXDST"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMODST       ) ( 0,  0, "RXDEXIST", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMODST       ) ( 8,  8, "RXDFOVF" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMODST       ) (16, 16, "RXDERR"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMODST       ) (24, 24, "RXDSCNFERR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMODSTCLR    ) ( 8,  8, "RXDFOVFCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTCLR    ) (16, 16, "RXDERRCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTCLR    ) (24, 24, "RXDSCNFERRCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTINTEN  ) ( 0,  0, "RXDEXISTINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTINTEN  ) ( 8,  8, "RXDFOVFINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTINTEN  ) (16, 16, "RXDERRINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMODSTINTEN  ) (24, 24, "RXDSCNFERRINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 0,  0, "RXM1EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 1,  1, "RXM2EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 2,  2, "RXM3EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 3,  3, "RXM4EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 4,  4, "RXM5EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 5,  5, "RXM6EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 6,  6, "RXM7EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMSET        ) ( 7,  7, "RXM8EN"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMRXMSG      ) (15,  0, "DATAFIELD", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXMSG      ) (23, 16, "SERIALID", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXMSG      ) (31, 31, "CONFIGBIT", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXST       ) ( 0,  0, "RXSTATUS", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXST       ) ( 7,  4, "SLOTNUM" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXST       ) (13,  8, "RXCRC"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXST       ) (18, 16, "RXSYNC"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMRXTIM      ) (31,  0, "RXMTIM"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMFIFO       ) (31,  0, "RXMFIFO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMMST        ) ( 0,  0, "RXMEXIST", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMMST        ) ( 8,  8, "RXMFOVF" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMMST        ) (16, 16, "RXMERR"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RXMMSTCLR     ) ( 8,  8, "RXMFOVFCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMMSTCLR     ) (16, 16, "RXMSERRCLR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMMSTINTEN   ) ( 0,  0, "RXMEXISTINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMMSTINTEN   ) ( 8,  8, "RXMFOVFINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RXMMSTINTEN   ) (16, 16, "RXMERRINTEN", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_RXSSET; i++) {
        (*RXSSET        [mFactorIndexRXSSET[i]]) (19,  0, "OFFSETCNT", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RXSSET        [mFactorIndexRXSSET[i]]) (24, 20, "LENGTH"  , 0xA       , "W|R"   , vpcl::SPP_ENABLE);
        (*RXSSET        [mFactorIndexRXSSET[i]]) (25, 25, "ERRDET"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RXSSET        [mFactorIndexRXSSET[i]]) (26, 26, "PASCMP"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*RXSSET        [mFactorIndexRXSSET[i]]) (31, 31, "SLTEN"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["CHCTRL"    ]["CHEN"      ] = &Cpsi5_regif::cb_CHCTRL_CHEN;
    mWrCbAPI["IPTIMERCTRL"]["TSCLR"     ] = &Cpsi5_regif::cb_IPTIMERCTRL_TSCLR;
    mWrCbAPI["IPTIMER"   ]["COUNTVAL"  ] = &Cpsi5_regif::cb_IPTIMER_COUNTVAL;
    mWrCbAPI["OPMCOMM"   ]["COMMODE"   ] = &Cpsi5_regif::cb_OPMCOMM_COMMODE;
    mWrCbAPI["OPMBITRATE"]["BITRATECNT"] = &Cpsi5_regif::cb_OPMBITRATE_BITRATECNT;
    mWrCbAPI["OPMCYCT"   ]["TTTTCNT"   ] = &Cpsi5_regif::cb_OPMCYCT_TTTTCNT;
    mWrCbAPI["TXSETTING" ]["SHORTCNT"  ] = &Cpsi5_regif::cb_TXSETTING_SHORTCNT;
    mWrCbAPI["SYNCCTRL"  ]["VALTIMSYNC"] = &Cpsi5_regif::cb_SYNCCTRL_VALTIMSYNC;
    mWrCbAPI["TXSTCLR"   ]["SYNCSTCLR" ] = &Cpsi5_regif::cb_TXSTCLR_SYNCSTCLR;
    mWrCbAPI["TXSTINTEN" ]["TXDEMPTYINTEN"] = &Cpsi5_regif::cb_TXSTINTEN_TXDEMPTYINTEN;
    mWrCbAPI["TXDATA"    ]["TXDATA"    ] = &Cpsi5_regif::cb_TXDATA_TXDATA;
    mWrCbAPI["RXSPLSET"  ]["SMPLPROD"  ] = &Cpsi5_regif::cb_RXSPLSET_SMPLPROD;
    mWrCbAPI["RXWINSET"  ]["DWINSTPOS" ] = &Cpsi5_regif::cb_RXWINSET_DWINSTPOS;
    mWrCbAPI["RXMODSTCLR"]["RXDFOVFCLR"] = &Cpsi5_regif::cb_RXMODSTCLR_RXDFOVFCLR;
    mWrCbAPI["RXMODSTINTEN"]["RXDEXISTINTEN"] = &Cpsi5_regif::cb_RXMODSTINTEN_RXDEXISTINTEN;
    mWrCbAPI["RXMSET"    ]["RXM1EN"    ] = &Cpsi5_regif::cb_RXMSET_RXM1EN;
    mWrCbAPI["RXMMSTCLR" ]["RXMFOVFCLR"] = &Cpsi5_regif::cb_RXMMSTCLR_RXMFOVFCLR;
    mWrCbAPI["RXMMSTINTEN"]["RXMEXISTINTEN"] = &Cpsi5_regif::cb_RXMMSTINTEN_RXMEXISTINTEN;

    mRdCbAPI["EMRXDFIFO" ]["RXDST"     ] = &Cpsi5_regif::cb_EMRXDFIFO_RXDST;
    mRdCbAPI["EMRXMFIFO" ]["RXMFIFO"   ] = &Cpsi5_regif::cb_EMRXMFIFO_RXMFIFO;
    mRdCbAPI["RXDATA"    ]["RXDATA"    ] = &Cpsi5_regif::cb_RXDATA_RXDATA;
    mRdCbAPI["RXDST"     ]["RXSTATUS"  ] = &Cpsi5_regif::cb_RXDST_RXSTATUS;
    mRdCbAPI["RXDTIM"    ]["RXDTIM"    ] = &Cpsi5_regif::cb_RXDTIM_RXDTIM;
    mRdCbAPI["RXDFIFO"   ]["RXDST"     ] = &Cpsi5_regif::cb_RXDFIFO_RXDST;
    mRdCbAPI["RXMRXMSG"  ]["DATAFIELD" ] = &Cpsi5_regif::cb_RXMRXMSG_DATAFIELD;
    mRdCbAPI["RXMRXST"   ]["RXSTATUS"  ] = &Cpsi5_regif::cb_RXMRXST_RXSTATUS;
    mRdCbAPI["RXMRXTIM"  ]["RXMTIM"    ] = &Cpsi5_regif::cb_RXMRXTIM_RXMTIM;
    mRdCbAPI["RXMFIFO"   ]["RXMFIFO"   ] = &Cpsi5_regif::cb_RXMFIFO_RXMFIFO;

    for(uint i = 0; i < emNUM_RXSSET; i++) {
        str_tmp.str("");
        str_tmp<<"RXSSET"<< mFactorIndexRXSSET[i];
        mWrCbAPI[str_tmp.str()]["OFFSETCNT"] = &Cpsi5_regif::cb_RXSSET_OFFSETCNT;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cpsi5_regif::~Cpsi5_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cpsi5_regif::uint Cpsi5_regif::bit_select(
                         cuint val,    ///< [in] Writting address
                         cuint start,  ///< [in] start bit position
                         cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsi5_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                         const unsigned char *p_data,   ///< [in] Writing data
                         cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsi5_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                         unsigned char *p_data,   ///< [out] Reading data
                         cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsi5_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsi5_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cpsi5_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                 const unsigned char *p_data,  ///< [in] Writing data
                                 cuint size,                   ///< [in] Data size (byte)
                                 bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cpsi5_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size,              ///< [in]  Data size (byte)
                                 bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cpsi5_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                              unsigned char *p_data,          ///< [out] Reading data
                              cuint size,                     ///< [in]  Data size (byte)
                              cuint reg_index,                ///< [in] Register index
                              bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cpsi5_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                              const unsigned char *p_data,      ///< [in] Writing data
                              cuint size,                       ///< [in] Data size (byte)
                              cuint reg_index,                  ///< [in] Register index
                              bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cpsi5_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cpsi5_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cpsi5_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cpsi5_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cpsi5_regif::InitLocalVal()
{
    // Initialize local variables
    CHCTRL_CHEN  = 0x0;
    CHCTRL_RSV   = 0x0;
    CHSTATUS_CHANNELNUM = 0x0;
    IPTIMERCTRL_IPTIMEN = 0x0;
    IPTIMERCTRL_TSCLR = 0x0;
    IPTIMERCTRL_MSTSLV = 0x1;
    IPTIMER_COUNTVAL = 0x0;
    OPMCOMM_COMMODE = 0x0;
    OPMBITRATE_BITRATECNT = 0x29F;
    OPMCYCT_TTTTCNT = 0x9C3F;
    PSI5INT_INT_RXMEXIST = 0x0;
    PSI5INT_INT_RXMFOVF = 0x0;
    PSI5INT_INT_RXMERR = 0x0;
    PSI5INT_INT_RXDEXIST = 0x0;
    PSI5INT_INT_RXDFOVF = 0x0;
    PSI5INT_INT_RXDERR = 0x0;
    PSI5INT_INT_RXDSCNFERR = 0x0;
    PSI5INT_INT_TXDEMPTY = 0x0;
    PSI5INT_INT_SYNCST = 0x0;
    PSI5INT_INT_SYNCED = 0x0;
    EMRXDATA_RXDATA = 0x0;
    EMRXDST_RXSTATUS = 0x0;
    EMRXDST_RXSLOTNUM = 0x0;
    EMRXDST_RXCHKD = 0x0;
    EMRXDTIM_RXDTIM = 0x0;
    EMRXDFIFO_RXDST = 0x0;
    EMRXMRXMSG_DATAFIELD = 0x0;
    EMRXMRXMSG_SERIALID = 0x0;
    EMRXMRXMSG_CONFIGBIT = 0x0;
    EMRXMRXST_RXSTATUS = 0x0;
    EMRXMRXST_SLOTNUM = 0x0;
    EMRXMRXST_RXCRC = 0x0;
    EMRXMRXST_RXSYNC = 0x0;
    EMRXMRXTIM_RXMTIM = 0x0;
    EMRXMFIFO_RXMFIFO = 0x0;
    TXSETTING_SHORTCNT = 0x7F7;
    TXSETTING_DEFTXVAL = 0x1;
    TXSETTING_PHYMODE = 0x0;
    TXSETTING_LONGCNT = 0x1067;
    SYNCCTRL_VALTIMSYNC = 0x0;
    TXST_TXDEMPTY = 0x1;
    TXST_SYNCST  = 0x0;
    TXST_SYNCED  = 0x0;
    TXSTCLR_SYNCSTCLR = 0x0;
    TXSTCLR_SYNCEDCLR = 0x0;
    TXSTINTEN_TXDEMPTYINTEN = 0x0;
    TXSTINTEN_SYNCSTINTEN = 0x0;
    TXSTINTEN_SYNCEDINTEN = 0x0;
    TXDCTRL_FRMFORMAT = 0x1;
    TXDATA_TXDATA = 0x0;
    RXSPLSET_SMPLPROD = 0x27;
    RXWINSET_DWINSTPOS = 0xC;
    RXWINSET_DWINEDPOS = 0x13;
    RXWINSET_NDWINSTPOS = 0x3;
    RXWINSET_NDWINEDPOS = 0xB;
    for(uint i = 0; i < emNUM_RXSSET;      i++) {
        RXSSET_OFFSETCNT[mFactorIndexRXSSET[i]] = 0x0;
        RXSSET_LENGTH[mFactorIndexRXSSET[i]] = 0xA;
        RXSSET_ERRDET[mFactorIndexRXSSET[i]] = 0x0;
        RXSSET_PASCMP[mFactorIndexRXSSET[i]] = 0x0;
        RXSSET_SLTEN[mFactorIndexRXSSET[i]] = 0x0;
    }
    RXDATA_RXDATA = 0x0;
    RXDST_RXSTATUS = 0x0;
    RXDST_RXSLOTNUM = 0x0;
    RXDST_RXCHKD = 0x0;
    RXDTIM_RXDTIM = 0x0;
    RXDFIFO_RXDST = 0x0;
    RXMODST_RXDEXIST = 0x0;
    RXMODST_RXDFOVF = 0x0;
    RXMODST_RXDERR = 0x0;
    RXMODST_RXDSCNFERR = 0x0;
    RXMODSTCLR_RXDFOVFCLR = 0x0;
    RXMODSTCLR_RXDERRCLR = 0x0;
    RXMODSTCLR_RXDSCNFERRCLR = 0x0;
    RXMODSTINTEN_RXDEXISTINTEN = 0x0;
    RXMODSTINTEN_RXDFOVFINTEN = 0x0;
    RXMODSTINTEN_RXDERRINTEN = 0x0;
    RXMODSTINTEN_RXDSCNFERRINTEN = 0x0;
    RXMSET_RXM1EN = 0x0;
    RXMSET_RXM2EN = 0x0;
    RXMSET_RXM3EN = 0x0;
    RXMSET_RXM4EN = 0x0;
    RXMSET_RXM5EN = 0x0;
    RXMSET_RXM6EN = 0x0;
    RXMSET_RXM7EN = 0x0;
    RXMSET_RXM8EN = 0x0;
    RXMRXMSG_DATAFIELD = 0x0;
    RXMRXMSG_SERIALID = 0x0;
    RXMRXMSG_CONFIGBIT = 0x0;
    RXMRXST_RXSTATUS = 0x0;
    RXMRXST_SLOTNUM = 0x0;
    RXMRXST_RXCRC = 0x0;
    RXMRXST_RXSYNC = 0x0;
    RXMRXTIM_RXMTIM = 0x0;
    RXMFIFO_RXMFIFO = 0x0;
    RXMMST_RXMEXIST = 0x0;
    RXMMST_RXMFOVF = 0x0;
    RXMMST_RXMERR = 0x0;
    RXMMSTCLR_RXMFOVFCLR = 0x0;
    RXMMSTCLR_RXMSERRCLR = 0x0;
    RXMMSTINTEN_RXMEXISTINTEN = 0x0;
    RXMMSTINTEN_RXMFOVFINTEN = 0x0;
    RXMMSTINTEN_RXMERRINTEN = 0x0;
}

/// Update bit value to local value
/// @return None
void Cpsi5_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        CHCTRL_CHEN                      = (*CHCTRL      )["CHEN"        ];
        CHCTRL_RSV                       = (*CHCTRL      )["RSV"         ];
        return;
    }
    if (addr == 0x0004) {
        CHSTATUS_CHANNELNUM              = (*CHSTATUS    )["CHANNELNUM"  ];
        return;
    }
    if (addr == 0x0010) {
        IPTIMERCTRL_IPTIMEN              = (*IPTIMERCTRL )["IPTIMEN"     ];
        IPTIMERCTRL_TSCLR                = (*IPTIMERCTRL )["TSCLR"       ];
        IPTIMERCTRL_MSTSLV               = (*IPTIMERCTRL )["MSTSLV"      ];
        return;
    }
    if (addr == 0x0014) {
        IPTIMER_COUNTVAL                 = (*IPTIMER     )["COUNTVAL"    ];
        return;
    }
    if (addr == 0x0020) {
        OPMCOMM_COMMODE                  = (*OPMCOMM     )["COMMODE"     ];
        return;
    }
    if (addr == 0x0024) {
        OPMBITRATE_BITRATECNT            = (*OPMBITRATE  )["BITRATECNT"  ];
        return;
    }
    if (addr == 0x0028) {
        OPMCYCT_TTTTCNT                  = (*OPMCYCT     )["TTTTCNT"     ];
        return;
    }
    if (addr == 0x0030) {
        PSI5INT_INT_RXMEXIST             = (*PSI5INT     )["INT_RXMEXIST"];
        PSI5INT_INT_RXMFOVF              = (*PSI5INT     )["INT_RXMFOVF" ];
        PSI5INT_INT_RXMERR               = (*PSI5INT     )["INT_RXMERR"  ];
        PSI5INT_INT_RXDEXIST             = (*PSI5INT     )["INT_RXDEXIST"];
        PSI5INT_INT_RXDFOVF              = (*PSI5INT     )["INT_RXDFOVF" ];
        PSI5INT_INT_RXDERR               = (*PSI5INT     )["INT_RXDERR"  ];
        PSI5INT_INT_RXDSCNFERR           = (*PSI5INT     )["INT_RXDSCNFERR"];
        PSI5INT_INT_TXDEMPTY             = (*PSI5INT     )["INT_TXDEMPTY"];
        PSI5INT_INT_SYNCST               = (*PSI5INT     )["INT_SYNCST"  ];
        PSI5INT_INT_SYNCED               = (*PSI5INT     )["INT_SYNCED"  ];
        return;
    }
    if (addr == 0x0040) {
        EMRXDATA_RXDATA                  = (*EMRXDATA    )["RXDATA"      ];
        return;
    }
    if (addr == 0x0044) {
        EMRXDST_RXSTATUS                 = (*EMRXDST     )["RXSTATUS"    ];
        EMRXDST_RXSLOTNUM                = (*EMRXDST     )["RXSLOTNUM"   ];
        EMRXDST_RXCHKD                   = (*EMRXDST     )["RXCHKD"      ];
        return;
    }
    if (addr == 0x0048) {
        EMRXDTIM_RXDTIM                  = (*EMRXDTIM    )["RXDTIM"      ];
        return;
    }
    if (addr == 0x004C) {
        EMRXDFIFO_RXDST                  = (*EMRXDFIFO   )["RXDST"       ];
        return;
    }
    if (addr == 0x0050) {
        EMRXMRXMSG_DATAFIELD             = (*EMRXMRXMSG  )["DATAFIELD"   ];
        EMRXMRXMSG_SERIALID              = (*EMRXMRXMSG  )["SERIALID"    ];
        EMRXMRXMSG_CONFIGBIT             = (*EMRXMRXMSG  )["CONFIGBIT"   ];
        return;
    }
    if (addr == 0x0054) {
        EMRXMRXST_RXSTATUS               = (*EMRXMRXST   )["RXSTATUS"    ];
        EMRXMRXST_SLOTNUM                = (*EMRXMRXST   )["SLOTNUM"     ];
        EMRXMRXST_RXCRC                  = (*EMRXMRXST   )["RXCRC"       ];
        EMRXMRXST_RXSYNC                 = (*EMRXMRXST   )["RXSYNC"      ];
        return;
    }
    if (addr == 0x0058) {
        EMRXMRXTIM_RXMTIM                = (*EMRXMRXTIM  )["RXMTIM"      ];
        return;
    }
    if (addr == 0x005C) {
        EMRXMFIFO_RXMFIFO                = (*EMRXMFIFO   )["RXMFIFO"     ];
        return;
    }
    if (addr == 0x0080) {
        TXSETTING_SHORTCNT               = (*TXSETTING   )["SHORTCNT"    ];
        TXSETTING_DEFTXVAL               = (*TXSETTING   )["DEFTXVAL"    ];
        TXSETTING_PHYMODE                = (*TXSETTING   )["PHYMODE"     ];
        TXSETTING_LONGCNT                = (*TXSETTING   )["LONGCNT"     ];
        return;
    }
    if (addr == 0x0084) {
        SYNCCTRL_VALTIMSYNC              = (*SYNCCTRL    )["VALTIMSYNC"  ];
        return;
    }
    if (addr == 0x0088) {
        TXST_TXDEMPTY                    = (*TXST        )["TXDEMPTY"    ];
        TXST_SYNCST                      = (*TXST        )["SYNCST"      ];
        TXST_SYNCED                      = (*TXST        )["SYNCED"      ];
        return;
    }
    if (addr == 0x008C) {
        TXSTCLR_SYNCSTCLR                = (*TXSTCLR     )["SYNCSTCLR"   ];
        TXSTCLR_SYNCEDCLR                = (*TXSTCLR     )["SYNCEDCLR"   ];
        return;
    }
    if (addr == 0x0090) {
        TXSTINTEN_TXDEMPTYINTEN          = (*TXSTINTEN   )["TXDEMPTYINTEN"];
        TXSTINTEN_SYNCSTINTEN            = (*TXSTINTEN   )["SYNCSTINTEN" ];
        TXSTINTEN_SYNCEDINTEN            = (*TXSTINTEN   )["SYNCEDINTEN" ];
        return;
    }
    if (addr == 0x0094) {
        TXDCTRL_FRMFORMAT                = (*TXDCTRL     )["FRMFORMAT"   ];
        return;
    }
    if (addr == 0x0098) {
        TXDATA_TXDATA                    = (*TXDATA      )["TXDATA"      ];
        return;
    }
    if (addr == 0x0100) {
        RXSPLSET_SMPLPROD                = (*RXSPLSET    )["SMPLPROD"    ];
        return;
    }
    if (addr == 0x0104) {
        RXWINSET_DWINSTPOS               = (*RXWINSET    )["DWINSTPOS"   ];
        RXWINSET_DWINEDPOS               = (*RXWINSET    )["DWINEDPOS"   ];
        RXWINSET_NDWINSTPOS              = (*RXWINSET    )["NDWINSTPOS"  ];
        RXWINSET_NDWINEDPOS              = (*RXWINSET    )["NDWINEDPOS"  ];
        return;
    }
    if ((0x0108 <= addr) && (addr <= (0x0108)+(4*7)) && ((addr-0x0108)%4 == 0)) {
        uint i = (addr - 0x0108)/4 + 1;
        RXSSET_OFFSETCNT                [i] = (*(RXSSET      [i]))["OFFSETCNT"   ];
        RXSSET_LENGTH                   [i] = (*(RXSSET      [i]))["LENGTH"      ];
        RXSSET_ERRDET                   [i] = (*(RXSSET      [i]))["ERRDET"      ];
        RXSSET_PASCMP                   [i] = (*(RXSSET      [i]))["PASCMP"      ];
        RXSSET_SLTEN                    [i] = (*(RXSSET      [i]))["SLTEN"       ];
        return;
    }
    if (addr == 0x0128) {
        RXDATA_RXDATA                    = (*RXDATA      )["RXDATA"      ];
        return;
    }
    if (addr == 0x012C) {
        RXDST_RXSTATUS                   = (*RXDST       )["RXSTATUS"    ];
        RXDST_RXSLOTNUM                  = (*RXDST       )["RXSLOTNUM"   ];
        RXDST_RXCHKD                     = (*RXDST       )["RXCHKD"      ];
        return;
    }
    if (addr == 0x0130) {
        RXDTIM_RXDTIM                    = (*RXDTIM      )["RXDTIM"      ];
        return;
    }
    if (addr == 0x0134) {
        RXDFIFO_RXDST                    = (*RXDFIFO     )["RXDST"       ];
        return;
    }
    if (addr == 0x0138) {
        RXMODST_RXDEXIST                 = (*RXMODST     )["RXDEXIST"    ];
        RXMODST_RXDFOVF                  = (*RXMODST     )["RXDFOVF"     ];
        RXMODST_RXDERR                   = (*RXMODST     )["RXDERR"      ];
        RXMODST_RXDSCNFERR               = (*RXMODST     )["RXDSCNFERR"  ];
        return;
    }
    if (addr == 0x013C) {
        RXMODSTCLR_RXDFOVFCLR            = (*RXMODSTCLR  )["RXDFOVFCLR"  ];
        RXMODSTCLR_RXDERRCLR             = (*RXMODSTCLR  )["RXDERRCLR"   ];
        RXMODSTCLR_RXDSCNFERRCLR         = (*RXMODSTCLR  )["RXDSCNFERRCLR"];
        return;
    }
    if (addr == 0x0140) {
        RXMODSTINTEN_RXDEXISTINTEN       = (*RXMODSTINTEN)["RXDEXISTINTEN"];
        RXMODSTINTEN_RXDFOVFINTEN        = (*RXMODSTINTEN)["RXDFOVFINTEN"];
        RXMODSTINTEN_RXDERRINTEN         = (*RXMODSTINTEN)["RXDERRINTEN" ];
        RXMODSTINTEN_RXDSCNFERRINTEN     = (*RXMODSTINTEN)["RXDSCNFERRINTEN"];
        return;
    }
    if (addr == 0x0180) {
        RXMSET_RXM1EN                    = (*RXMSET      )["RXM1EN"      ];
        RXMSET_RXM2EN                    = (*RXMSET      )["RXM2EN"      ];
        RXMSET_RXM3EN                    = (*RXMSET      )["RXM3EN"      ];
        RXMSET_RXM4EN                    = (*RXMSET      )["RXM4EN"      ];
        RXMSET_RXM5EN                    = (*RXMSET      )["RXM5EN"      ];
        RXMSET_RXM6EN                    = (*RXMSET      )["RXM6EN"      ];
        RXMSET_RXM7EN                    = (*RXMSET      )["RXM7EN"      ];
        RXMSET_RXM8EN                    = (*RXMSET      )["RXM8EN"      ];
        return;
    }
    if (addr == 0x0184) {
        RXMRXMSG_DATAFIELD               = (*RXMRXMSG    )["DATAFIELD"   ];
        RXMRXMSG_SERIALID                = (*RXMRXMSG    )["SERIALID"    ];
        RXMRXMSG_CONFIGBIT               = (*RXMRXMSG    )["CONFIGBIT"   ];
        return;
    }
    if (addr == 0x0188) {
        RXMRXST_RXSTATUS                 = (*RXMRXST     )["RXSTATUS"    ];
        RXMRXST_SLOTNUM                  = (*RXMRXST     )["SLOTNUM"     ];
        RXMRXST_RXCRC                    = (*RXMRXST     )["RXCRC"       ];
        RXMRXST_RXSYNC                   = (*RXMRXST     )["RXSYNC"      ];
        return;
    }
    if (addr == 0x018C) {
        RXMRXTIM_RXMTIM                  = (*RXMRXTIM    )["RXMTIM"      ];
        return;
    }
    if (addr == 0x0190) {
        RXMFIFO_RXMFIFO                  = (*RXMFIFO     )["RXMFIFO"     ];
        return;
    }
    if (addr == 0x0194) {
        RXMMST_RXMEXIST                  = (*RXMMST      )["RXMEXIST"    ];
        RXMMST_RXMFOVF                   = (*RXMMST      )["RXMFOVF"     ];
        RXMMST_RXMERR                    = (*RXMMST      )["RXMERR"      ];
        return;
    }
    if (addr == 0x0198) {
        RXMMSTCLR_RXMFOVFCLR             = (*RXMMSTCLR   )["RXMFOVFCLR"  ];
        RXMMSTCLR_RXMSERRCLR             = (*RXMMSTCLR   )["RXMSERRCLR"  ];
        return;
    }
    if (addr == 0x019C) {
        RXMMSTINTEN_RXMEXISTINTEN        = (*RXMMSTINTEN )["RXMEXISTINTEN"];
        RXMMSTINTEN_RXMFOVFINTEN         = (*RXMMSTINTEN )["RXMFOVFINTEN"];
        RXMMSTINTEN_RXMERRINTEN          = (*RXMMSTINTEN )["RXMERRINTEN" ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cpsi5_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*CHCTRL      )["CHEN"        ] = CHCTRL_CHEN;
        (*CHCTRL      )["RSV"         ] = CHCTRL_RSV;
        return;
    }
    if (addr == 0x0004) {
        (*CHSTATUS    )["CHANNELNUM"  ] = CHSTATUS_CHANNELNUM;
        return;
    }
    if (addr == 0x0010) {
        (*IPTIMERCTRL )["IPTIMEN"     ] = IPTIMERCTRL_IPTIMEN;
        (*IPTIMERCTRL )["TSCLR"       ] = IPTIMERCTRL_TSCLR;
        (*IPTIMERCTRL )["MSTSLV"      ] = IPTIMERCTRL_MSTSLV;
        return;
    }
    if (addr == 0x0014) {
        (*IPTIMER     )["COUNTVAL"    ] = IPTIMER_COUNTVAL;
        return;
    }
    if (addr == 0x0020) {
        (*OPMCOMM     )["COMMODE"     ] = OPMCOMM_COMMODE;
        return;
    }
    if (addr == 0x0024) {
        (*OPMBITRATE  )["BITRATECNT"  ] = OPMBITRATE_BITRATECNT;
        return;
    }
    if (addr == 0x0028) {
        (*OPMCYCT     )["TTTTCNT"     ] = OPMCYCT_TTTTCNT;
        return;
    }
    if (addr == 0x0030) {
        (*PSI5INT     )["INT_RXMEXIST"] = PSI5INT_INT_RXMEXIST;
        (*PSI5INT     )["INT_RXMFOVF" ] = PSI5INT_INT_RXMFOVF;
        (*PSI5INT     )["INT_RXMERR"  ] = PSI5INT_INT_RXMERR;
        (*PSI5INT     )["INT_RXDEXIST"] = PSI5INT_INT_RXDEXIST;
        (*PSI5INT     )["INT_RXDFOVF" ] = PSI5INT_INT_RXDFOVF;
        (*PSI5INT     )["INT_RXDERR"  ] = PSI5INT_INT_RXDERR;
        (*PSI5INT     )["INT_RXDSCNFERR"] = PSI5INT_INT_RXDSCNFERR;
        (*PSI5INT     )["INT_TXDEMPTY"] = PSI5INT_INT_TXDEMPTY;
        (*PSI5INT     )["INT_SYNCST"  ] = PSI5INT_INT_SYNCST;
        (*PSI5INT     )["INT_SYNCED"  ] = PSI5INT_INT_SYNCED;
        return;
    }
    if (addr == 0x0040) {
        (*EMRXDATA    )["RXDATA"      ] = EMRXDATA_RXDATA;
        return;
    }
    if (addr == 0x0044) {
        (*EMRXDST     )["RXSTATUS"    ] = EMRXDST_RXSTATUS;
        (*EMRXDST     )["RXSLOTNUM"   ] = EMRXDST_RXSLOTNUM;
        (*EMRXDST     )["RXCHKD"      ] = EMRXDST_RXCHKD;
        return;
    }
    if (addr == 0x0048) {
        (*EMRXDTIM    )["RXDTIM"      ] = EMRXDTIM_RXDTIM;
        return;
    }
    if (addr == 0x004C) {
        (*EMRXDFIFO   )["RXDST"       ] = EMRXDFIFO_RXDST;
        return;
    }
    if (addr == 0x0050) {
        (*EMRXMRXMSG  )["DATAFIELD"   ] = EMRXMRXMSG_DATAFIELD;
        (*EMRXMRXMSG  )["SERIALID"    ] = EMRXMRXMSG_SERIALID;
        (*EMRXMRXMSG  )["CONFIGBIT"   ] = EMRXMRXMSG_CONFIGBIT;
        return;
    }
    if (addr == 0x0054) {
        (*EMRXMRXST   )["RXSTATUS"    ] = EMRXMRXST_RXSTATUS;
        (*EMRXMRXST   )["SLOTNUM"     ] = EMRXMRXST_SLOTNUM;
        (*EMRXMRXST   )["RXCRC"       ] = EMRXMRXST_RXCRC;
        (*EMRXMRXST   )["RXSYNC"      ] = EMRXMRXST_RXSYNC;
        return;
    }
    if (addr == 0x0058) {
        (*EMRXMRXTIM  )["RXMTIM"      ] = EMRXMRXTIM_RXMTIM;
        return;
    }
    if (addr == 0x005C) {
        (*EMRXMFIFO   )["RXMFIFO"     ] = EMRXMFIFO_RXMFIFO;
        return;
    }
    if (addr == 0x0080) {
        (*TXSETTING   )["SHORTCNT"    ] = TXSETTING_SHORTCNT;
        (*TXSETTING   )["DEFTXVAL"    ] = TXSETTING_DEFTXVAL;
        (*TXSETTING   )["PHYMODE"     ] = TXSETTING_PHYMODE;
        (*TXSETTING   )["LONGCNT"     ] = TXSETTING_LONGCNT;
        return;
    }
    if (addr == 0x0084) {
        (*SYNCCTRL    )["VALTIMSYNC"  ] = SYNCCTRL_VALTIMSYNC;
        return;
    }
    if (addr == 0x0088) {
        (*TXST        )["TXDEMPTY"    ] = TXST_TXDEMPTY;
        (*TXST        )["SYNCST"      ] = TXST_SYNCST;
        (*TXST        )["SYNCED"      ] = TXST_SYNCED;
        return;
    }
    if (addr == 0x008C) {
        (*TXSTCLR     )["SYNCSTCLR"   ] = TXSTCLR_SYNCSTCLR;
        (*TXSTCLR     )["SYNCEDCLR"   ] = TXSTCLR_SYNCEDCLR;
        return;
    }
    if (addr == 0x0090) {
        (*TXSTINTEN   )["TXDEMPTYINTEN"] = TXSTINTEN_TXDEMPTYINTEN;
        (*TXSTINTEN   )["SYNCSTINTEN" ] = TXSTINTEN_SYNCSTINTEN;
        (*TXSTINTEN   )["SYNCEDINTEN" ] = TXSTINTEN_SYNCEDINTEN;
        return;
    }
    if (addr == 0x0094) {
        (*TXDCTRL     )["FRMFORMAT"   ] = TXDCTRL_FRMFORMAT;
        return;
    }
    if (addr == 0x0098) {
        (*TXDATA      )["TXDATA"      ] = TXDATA_TXDATA;
        return;
    }
    if (addr == 0x0100) {
        (*RXSPLSET    )["SMPLPROD"    ] = RXSPLSET_SMPLPROD;
        return;
    }
    if (addr == 0x0104) {
        (*RXWINSET    )["DWINSTPOS"   ] = RXWINSET_DWINSTPOS;
        (*RXWINSET    )["DWINEDPOS"   ] = RXWINSET_DWINEDPOS;
        (*RXWINSET    )["NDWINSTPOS"  ] = RXWINSET_NDWINSTPOS;
        (*RXWINSET    )["NDWINEDPOS"  ] = RXWINSET_NDWINEDPOS;
        return;
    }
    if ((0x0108 <= addr) && (addr <= (0x0108)+(4*7)) && ((addr-0x0108)%4 == 0)) {
        uint i = (addr - 0x0108)/4 + 1;
        (*(RXSSET      [i]))["OFFSETCNT"   ] = RXSSET_OFFSETCNT[i];
        (*(RXSSET      [i]))["LENGTH"      ] = RXSSET_LENGTH[i];
        (*(RXSSET      [i]))["ERRDET"      ] = RXSSET_ERRDET[i];
        (*(RXSSET      [i]))["PASCMP"      ] = RXSSET_PASCMP[i];
        (*(RXSSET      [i]))["SLTEN"       ] = RXSSET_SLTEN[i];
        return;
    }
    if (addr == 0x0128) {
        (*RXDATA      )["RXDATA"      ] = RXDATA_RXDATA;
        return;
    }
    if (addr == 0x012C) {
        (*RXDST       )["RXSTATUS"    ] = RXDST_RXSTATUS;
        (*RXDST       )["RXSLOTNUM"   ] = RXDST_RXSLOTNUM;
        (*RXDST       )["RXCHKD"      ] = RXDST_RXCHKD;
        return;
    }
    if (addr == 0x0130) {
        (*RXDTIM      )["RXDTIM"      ] = RXDTIM_RXDTIM;
        return;
    }
    if (addr == 0x0134) {
        (*RXDFIFO     )["RXDST"       ] = RXDFIFO_RXDST;
        return;
    }
    if (addr == 0x0138) {
        (*RXMODST     )["RXDEXIST"    ] = RXMODST_RXDEXIST;
        (*RXMODST     )["RXDFOVF"     ] = RXMODST_RXDFOVF;
        (*RXMODST     )["RXDERR"      ] = RXMODST_RXDERR;
        (*RXMODST     )["RXDSCNFERR"  ] = RXMODST_RXDSCNFERR;
        return;
    }
    if (addr == 0x013C) {
        (*RXMODSTCLR  )["RXDFOVFCLR"  ] = RXMODSTCLR_RXDFOVFCLR;
        (*RXMODSTCLR  )["RXDERRCLR"   ] = RXMODSTCLR_RXDERRCLR;
        (*RXMODSTCLR  )["RXDSCNFERRCLR"] = RXMODSTCLR_RXDSCNFERRCLR;
        return;
    }
    if (addr == 0x0140) {
        (*RXMODSTINTEN)["RXDEXISTINTEN"] = RXMODSTINTEN_RXDEXISTINTEN;
        (*RXMODSTINTEN)["RXDFOVFINTEN"] = RXMODSTINTEN_RXDFOVFINTEN;
        (*RXMODSTINTEN)["RXDERRINTEN" ] = RXMODSTINTEN_RXDERRINTEN;
        (*RXMODSTINTEN)["RXDSCNFERRINTEN"] = RXMODSTINTEN_RXDSCNFERRINTEN;
        return;
    }
    if (addr == 0x0180) {
        (*RXMSET      )["RXM1EN"      ] = RXMSET_RXM1EN;
        (*RXMSET      )["RXM2EN"      ] = RXMSET_RXM2EN;
        (*RXMSET      )["RXM3EN"      ] = RXMSET_RXM3EN;
        (*RXMSET      )["RXM4EN"      ] = RXMSET_RXM4EN;
        (*RXMSET      )["RXM5EN"      ] = RXMSET_RXM5EN;
        (*RXMSET      )["RXM6EN"      ] = RXMSET_RXM6EN;
        (*RXMSET      )["RXM7EN"      ] = RXMSET_RXM7EN;
        (*RXMSET      )["RXM8EN"      ] = RXMSET_RXM8EN;
        return;
    }
    if (addr == 0x0184) {
        (*RXMRXMSG    )["DATAFIELD"   ] = RXMRXMSG_DATAFIELD;
        (*RXMRXMSG    )["SERIALID"    ] = RXMRXMSG_SERIALID;
        (*RXMRXMSG    )["CONFIGBIT"   ] = RXMRXMSG_CONFIGBIT;
        return;
    }
    if (addr == 0x0188) {
        (*RXMRXST     )["RXSTATUS"    ] = RXMRXST_RXSTATUS;
        (*RXMRXST     )["SLOTNUM"     ] = RXMRXST_SLOTNUM;
        (*RXMRXST     )["RXCRC"       ] = RXMRXST_RXCRC;
        (*RXMRXST     )["RXSYNC"      ] = RXMRXST_RXSYNC;
        return;
    }
    if (addr == 0x018C) {
        (*RXMRXTIM    )["RXMTIM"      ] = RXMRXTIM_RXMTIM;
        return;
    }
    if (addr == 0x0190) {
        (*RXMFIFO     )["RXMFIFO"     ] = RXMFIFO_RXMFIFO;
        return;
    }
    if (addr == 0x0194) {
        (*RXMMST      )["RXMEXIST"    ] = RXMMST_RXMEXIST;
        (*RXMMST      )["RXMFOVF"     ] = RXMMST_RXMFOVF;
        (*RXMMST      )["RXMERR"      ] = RXMMST_RXMERR;
        return;
    }
    if (addr == 0x0198) {
        (*RXMMSTCLR   )["RXMFOVFCLR"  ] = RXMMSTCLR_RXMFOVFCLR;
        (*RXMMSTCLR   )["RXMSERRCLR"  ] = RXMMSTCLR_RXMSERRCLR;
        return;
    }
    if (addr == 0x019C) {
        (*RXMMSTINTEN )["RXMEXISTINTEN"] = RXMMSTINTEN_RXMEXISTINTEN;
        (*RXMMSTINTEN )["RXMFOVFINTEN"] = RXMMSTINTEN_RXMFOVFINTEN;
        (*RXMMSTINTEN )["RXMERRINTEN" ] = RXMMSTINTEN_RXMERRINTEN;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cpsi5_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cpsi5_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cpsi5_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cpsi5_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cpsi5_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cpsi5_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cpsi5_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cpsi5_regif::uint Cpsi5_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cpsi5_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cpsi5_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cpsi5_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cpsi5_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Cpsi5_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cpsi5_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cpsi5_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
