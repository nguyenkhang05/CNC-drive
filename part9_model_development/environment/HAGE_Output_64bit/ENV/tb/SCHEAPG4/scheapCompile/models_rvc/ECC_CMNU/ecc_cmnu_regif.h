// -----------------------------------------------------------------------------
// $Id: ecc_cmnu_regif.h,v 1.2 2015/08/31 04:39:12 ngankimtran2 Exp $
//
// Copyright(c) 2014 - 2015 Renesas Electronics Corporation
// Copyright(c) 2014 - 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : input/ecccmnu_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECC_CMNU
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE     group   name        reg_name     wsize    rsize    length   offset  access   init  support  callback
//     %%REG       -       ECCCTL      ECCCTL         16|32  8|16|32  32       0x000   W|R       0    TRUE     -
//     %%REG       -       ERRINT      ERRINT       8|16|32  8|16|32  32       0x004   W|R       0    TRUE     -
//     %%REG       -       STCLR       STCLR        8|16|32  -        32       0x008   W         0    TRUE     -
//     %%REG       -       OVFSTR      OVFSTR       -        8|16|32  32       0x00C   R         0    TRUE     -
//     %%REG       -       ERSTR1ST    ERSTR1ST     -        8|16|32  32       0x010   R         0    TRUE     -
//     %%REG       -       EADR1ST0    EADR1ST0     -        8|16|32  32       0x050   R         0    TRUE     -
//     %%REG       -       EADR1ST1    EADR1ST1     -        8|16|32  32       0x054   R         0    TRUE     -
//     %%REG       -       EADR1ST2    EADR1ST2     -        8|16|32  32       0x058   R         0    TRUE     -
//     %%REG       -       EADR1ST3    EADR1ST3     -        8|16|32  32       0x05C   R         0    TRUE     -
//     %%REG       -       STSTCTL     STSTCTL        16|32  8|16|32  32       0x150   W|R       0    TRUE     -
// 
// %REG_NAME ECCCTL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PROT1       15     15      0    W|R     TRUE     -
//     %%BIT    PROT0       14     14      0    W|R     TRUE     -
//     %%BIT    ASECDIS      3      3      0    W|R     TRUE     -
//     %%BIT    AECCDIS      2      2      0    W|R     TRUE     -
//     %%BIT    SECDIS       1      1      0    W|R     TRUE     -
//     %%BIT    ECCDIS       0      0      0    W|R     TRUE     W
// 
// %REG_NAME ERRINT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EOVFIE       6      6      0    W|R     TRUE     -
//     %%BIT    ADEDIE       5      5      0    W|R     TRUE     -
//     %%BIT    ASEDIE       4      4      0    W|R     TRUE     -
//     %%BIT    PBEIE        3      3      0    W|R     TRUE     -
//     %%BIT    APEIE        2      2      0    W|R     TRUE     -
//     %%BIT    DEDIE        1      1      0    W|R     TRUE     -
//     %%BIT    SEDIE        0      0      0    W|R     TRUE     -
// 
// %REG_NAME STCLR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    STCLR3       3      3      0    W       TRUE     -
//     %%BIT    STCLR2       2      2      0    W       TRUE     -
//     %%BIT    STCLR1       1      1      0    W       TRUE     -
//     %%BIT    STCLR0       0      0      0    W       TRUE     W
// 
// %REG_NAME OVFSTR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ERROVF3      3      3      0    R        TRUE    -
//     %%BIT    ERROVF2      2      2      0    R        TRUE    -
//     %%BIT    ERROVF1      1      1      0    R        TRUE    -
//     %%BIT    ERROVF0      0      0      0    R        TRUE    -
// 
// %REG_NAME ERSTR1ST
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    AECDEDF3    31     31      0    R       TRUE    -
//     %%BIT    AECSEDF3    30     30      0    R       TRUE    -
//     %%BIT    EXDEDF3     29     29      0    R       TRUE    -
//     %%BIT    EXSEDF3     28     28      0    R       TRUE    -
//     %%BIT    PBEF3       27     27      0    R       TRUE    -
//     %%BIT    APEF3       26     26      0    R       TRUE    -
//     %%BIT    DEDF3       25     25      0    R       TRUE    -
//     %%BIT    SEDF3       24     24      0    R       TRUE    -
//     %%BIT    AECDEDF2    23     23      0    R       TRUE    -
//     %%BIT    AECSEDF2    22     22      0    R       TRUE    -
//     %%BIT    EXDEDF2     21     21      0    R       TRUE    -
//     %%BIT    EXSEDF2     20     20      0    R       TRUE    -
//     %%BIT    PBEF2       19     19      0    R       TRUE    -
//     %%BIT    APEF2       18     18      0    R       TRUE    -
//     %%BIT    DEDF2       17     17      0    R       TRUE    -
//     %%BIT    SEDF2       16     16      0    R       TRUE    -
//     %%BIT    AECDEDF1    15     15      0    R       TRUE    -
//     %%BIT    AECSEDF1    14     14      0    R       TRUE    -
//     %%BIT    EXDEDF1     13     13      0    R       TRUE    -
//     %%BIT    EXSEDF1     12     12      0    R       TRUE    -
//     %%BIT    PBEF1       11     11      0    R       TRUE    -
//     %%BIT    APEF1       10     10      0    R       TRUE    -
//     %%BIT    DEDF1        9      9      0    R       TRUE    -
//     %%BIT    SEDF1        8      8      0    R       TRUE    -
//     %%BIT    AECDEDF0     7      7      0    R       TRUE    -
//     %%BIT    AECSEDF0     6      6      0    R       TRUE    -
//     %%BIT    EXDEDF0      5      5      0    R       TRUE    -
//     %%BIT    EXSEDF0      4      4      0    R       TRUE    -
//     %%BIT    PBEF0        3      3      0    R       TRUE    -
//     %%BIT    APEF0        2      2      0    R       TRUE    -
//     %%BIT    DEDF0        1      1      0    R       TRUE    -
//     %%BIT    SEDF0        0      0      0    R       TRUE    -
// 
// 
// %REG_NAME EADR1ST0
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR0       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST1
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR1       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST2
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR2       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST3
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR3       31      0      0    R       TRUE     -
// 
// %REG_NAME STSTCTL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PROT1       15      15     0    W|R     TRUE    -
//     %%BIT    PROT0       14      14     0    W|R     TRUE    -
//     %%BIT    ECCTST       0       0     0    W|R     TRUE    W
////////////////////////////////////////////////////////////////////////////////
/// @file ecc_cmnu_regif.h
/// @brief Register IF class of model ECC_CMNU
/// $Id: ecc_cmnu_regif.h,v 1.2 2015/08/31 04:39:12 ngankimtran2 Exp $
/// $Date: 2015/08/31 04:39:12 $
/// $Revison$
/// $Author: ngankimtran2 $
////////////////////////////////////////////////////////////////////////////////
#ifndef __ECC_CMNU_REGIF_H__
#define __ECC_CMNU_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ECC_CMNU model
class Cecc_cmnu_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
    unsigned int                mAwidth;                            //The bit width of captured address
    unsigned int                mAwidth_lsb;                        //The low bit of captured address
    std::string                 mVersion;                           // Model's version (G3M_V30, CFB_G3KH, TCM_G3KH)

public:
    Cecc_cmnu_regif(std::string name,
                uint buswidth,
                unsigned int addr_awidth = 32,
                unsigned int addr_awidth_lsb = 0,
                std::string model_version = "G3M_V30");
    ~Cecc_cmnu_regif();

protected:
    vpcl::re_register *ECCCTL  ;
    vpcl::re_register *ERRINT  ;
    vpcl::re_register *STCLR   ;
    vpcl::re_register *OVFSTR  ;
    vpcl::re_register *ERSTR1ST;
    vpcl::re_register *EADR1ST0;
    vpcl::re_register *EADR1ST1;
    vpcl::re_register *EADR1ST2;
    vpcl::re_register *EADR1ST3;
    vpcl::re_register *STSTCTL ;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_ECCCTL  ;
    scml2::reg<uint> *CW_ERRINT  ;
    scml2::reg<uint> *CW_STCLR   ;
    scml2::reg<uint> *CW_OVFSTR  ;
    scml2::reg<uint> *CW_ERSTR1ST;
    scml2::reg<uint> *CW_EADR1ST0;
    scml2::reg<uint> *CW_EADR1ST1;
    scml2::reg<uint> *CW_EADR1ST2;
    scml2::reg<uint> *CW_EADR1ST3;
    scml2::reg<uint> *CW_STSTCTL ;
    #endif

    uint ECCCTL_PROT1;
    uint ECCCTL_PROT0;
    uint ECCCTL_ASECDIS;
    uint ECCCTL_AECCDIS;
    uint ECCCTL_SECDIS;
    uint ECCCTL_ECCDIS;
    uint ERRINT_EOVFIE;
    uint ERRINT_ADEDIE;
    uint ERRINT_ASEDIE;
    uint ERRINT_PBEIE;
    uint ERRINT_APEIE;
    uint ERRINT_DEDIE;
    uint ERRINT_SEDIE;
    uint STCLR_STCLR3;
    uint STCLR_STCLR2;
    uint STCLR_STCLR1;
    uint STCLR_STCLR0;
    uint OVFSTR_ERROVF3;
    uint OVFSTR_ERROVF2;
    uint OVFSTR_ERROVF1;
    uint OVFSTR_ERROVF0;
    uint ERSTR1ST_AECDEDF3;
    uint ERSTR1ST_AECSEDF3;
    uint ERSTR1ST_EXDEDF3;
    uint ERSTR1ST_EXSEDF3;
    uint ERSTR1ST_PBEF3;
    uint ERSTR1ST_APEF3;
    uint ERSTR1ST_DEDF3;
    uint ERSTR1ST_SEDF3;
    uint ERSTR1ST_AECDEDF2;
    uint ERSTR1ST_AECSEDF2;
    uint ERSTR1ST_EXDEDF2;
    uint ERSTR1ST_EXSEDF2;
    uint ERSTR1ST_PBEF2;
    uint ERSTR1ST_APEF2;
    uint ERSTR1ST_DEDF2;
    uint ERSTR1ST_SEDF2;
    uint ERSTR1ST_AECDEDF1;
    uint ERSTR1ST_AECSEDF1;
    uint ERSTR1ST_EXDEDF1;
    uint ERSTR1ST_EXSEDF1;
    uint ERSTR1ST_PBEF1;
    uint ERSTR1ST_APEF1;
    uint ERSTR1ST_DEDF1;
    uint ERSTR1ST_SEDF1;
    uint ERSTR1ST_AECDEDF0;
    uint ERSTR1ST_AECSEDF0;
    uint ERSTR1ST_EXDEDF0;
    uint ERSTR1ST_EXSEDF0;
    uint ERSTR1ST_PBEF0;
    uint ERSTR1ST_APEF0;
    uint ERSTR1ST_DEDF0;
    uint ERSTR1ST_SEDF0;
    uint EADR1ST0_EADR0;
    uint EADR1ST1_EADR1;
    uint EADR1ST2_EADR2;
    uint EADR1ST3_EADR3;
    uint STSTCTL_PROT1;
    uint STSTCTL_PROT0;
    uint STSTCTL_ECCTST;

    void EnableReset(const bool is_active, const std::string clock_domain);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_ECCCTL_ECCDIS(RegCBstr str) = 0;
    virtual void cb_STCLR_STCLR0(RegCBstr str) = 0;
    virtual void cb_STSTCTL_ECCTST(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cecc_cmnu_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cecc_cmnu_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ECC_CMNU_REG_DEF_H__
