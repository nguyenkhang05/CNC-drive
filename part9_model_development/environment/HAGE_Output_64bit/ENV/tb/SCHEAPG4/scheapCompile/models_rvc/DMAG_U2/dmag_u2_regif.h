// -----------------------------------------------------------------------------
// $Id: dmag_u2_regif.h,v 1.4 2020/02/14 06:25:20 hadinhtran Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : input/dmag_u2_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DMAG_U2
// #               name     offset_size
// %%REG_INSTANCE  reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name               reg_name            wsize      rsize      length    offset    access    factor_start    factor_end   factor_index    factor_step   init    support    callback
//     %%REG      DMAGOVFCLR         DMAGOVFCLR          8|16|32    8|16|32    32        0x00      R|W       -               -            -               -             0x0     TRUE       -
//     %%REG      DMAGOVFSTAT        DMAGOVFSTAT         -          8|16|32    32        0x04      R         -               -            -               -             0x0     TRUE       -
//     %%REG      DMAGERRADDR        DMAGERRADDR         -          8|16|32    32        0x08      R         -               -            -               -             0x0     TRUE       -
//     %%REG      DMAGERRTYPE        DMAGERRTYPE         -          8|16|32    32        0x0C      R         -               -            -               -             0x0     TRUE       -
//     %%REG      DMAGSPIDERRCLR     DMAGSPIDERRCLR      32         8|16|32    32        0x10      R|W       -               -            -               -             0x0     TRUE       W
//     %%REG      DMAGSPIDERRSTAT    DMAGSPIDERRSTAT     -          8|16|32    32        0x14      R         -               -            -               -             0x0     TRUE       -
//     %%REG      DMAGKCPROT         DMAGKCPROT          32         8|16|32    32        0x18      R|W       -               -            -               -             0x0     TRUE       W
//     %%REG      DMAGMPID           DMAGMPID            8|16|32    8|16|32    32        0x40      R|W       0               7            -               0x04          0x0     TRUE       W
//     %%REG      DMAGPROT_GR        DMAGPROT_GR         8|16|32    8|16|32    32        0xF0      R|W       -               -            -               -             0x0     TRUE       W
//     %%REG      DMAGPROT_DP        DMAGPROT_DP         8|16|32    8|16|32    32        0xF4      R|W       -               -            -               -             0x0     TRUE       W
//     %%REG      DMAGPROT_          DMAGPROT_           8|16|32    8|16|32    32        0x100     R|W       0               15           -               0x04          0x0     TRUE       W
//           
// %REG_NAME DMAGOVFCLR
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       CLRO        1       1       0       R|W     TRUE        W
// 
// %REG_NAME DMAGOVFSTAT
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       OVF         1       1       0       R       TRUE        -
// 
// %REG_NAME DMAGERRADDR
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       ADDR        31      0       0       R       TRUE        -
// 
// %REG_NAME DMAGERRTYPE
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       SEC         13      13      0       R       TRUE        -
//     %%BIT       DBG         12      12      0       R       TRUE        -
//     %%BIT       UM          11      11      0       R       TRUE        -
//     %%BIT       SPID        10      6       0       R       TRUE        -
//     %%BIT       WRITE       0       0       0       R       TRUE        -
// 
// %REG_NAME DMAGSPIDERRCLR
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       SPIDCLR     31       0       0      R|W     TRUE        W
// 
// %REG_NAME DMAGSPIDERRSTAT
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       SPIDERR     31       0       0      R       TRUE        -
// 
// 
// %REG_NAME DMAGKCPROT
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       KCPROT      31      1       0       R|W     TRUE        W
//     %%BIT       KCE         0       0       0       R|W     TRUE        -
// 
//     %REG_NAME DMAGMPID
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       SPID        4       0       0       R|W     TRUE        W
// 
// %REG_NAME DMAGPROT_GR
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       MPID        23      16      0       R|W     TRUE        -
//     %%BIT       GEN         8       8       0       R|W     TRUE        W
//     %%BIT       DBG         6       6       0       R|W     TRUE        -
//     %%BIT       UM          4       4       0       R|W     TRUE        -
//     %%BIT       WG          1       1       0       R|W     TRUE        -
//     %%BIT       RG          0       0       0       R|W     TRUE        -
// 
// %REG_NAME DMAGPROT_DP
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       MPID        23      16      0       R|W     TRUE        -
//     %%BIT       GEN         8       8       0       R|W     TRUE        W
//     %%BIT       DBG         6       6       0       R|W     TRUE        -
//     %%BIT       UM          4       4       0       R|W     TRUE        -
//     %%BIT       WG          1       1       0       R|W     TRUE        -
//     %%BIT       RG          0       0       0       R|W     TRUE        -
// 
// %REG_NAME DMAGPROT_
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       MPID        23      16      0       R|W     TRUE        -
//     %%BIT       GEN         8       8       0       R|W     TRUE        W
//     %%BIT       DBG         6       6       0       R|W     TRUE        -
//     %%BIT       UM          4       4       0       R|W     TRUE        -
//     %%BIT       WG          1       1       0       R|W     TRUE        -
//     %%BIT       RG          0       0       0       R|W     TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file dmag_u2_regif.h
/// @brief Register IF class of model DMAG_U2
/// $Id: dmag_u2_regif.h,v 1.4 2020/02/14 06:25:20 hadinhtran Exp $
/// $Date: 2020/02/14 06:25:20 $
/// $Revison$
/// $Author: hadinhtran $
////////////////////////////////////////////////////////////////////////////////
#ifndef __DMAG_U2_REGIF_H__
#define __DMAG_U2_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of DMAG_U2 model
class Cdmag_u2_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_DMAGMPID        = 8,
        emNUM_DMAGPROT_       = 16
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cdmag_u2_regif(std::string name, uint buswidth, uint ch_num);
    ~Cdmag_u2_regif();
    unsigned int mChNum;

protected:
    vpcl::re_register *DMAGOVFCLR     ;
    vpcl::re_register *DMAGOVFSTAT    ;
    vpcl::re_register *DMAGERRADDR    ;
    vpcl::re_register *DMAGERRTYPE    ;
    vpcl::re_register *DMAGSPIDERRCLR ;
    vpcl::re_register *DMAGSPIDERRSTAT;
    vpcl::re_register *DMAGKCPROT     ;
    vpcl::re_register *DMAGMPID       [8];
    vpcl::re_register *DMAGPROT_GR    ;
    vpcl::re_register *DMAGPROT_DP    ;
    vpcl::re_register *DMAGPROT_      [16];

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_DMAGOVFCLR     ;
    scml2::reg<uint> *CW_DMAGOVFSTAT    ;
    scml2::reg<uint> *CW_DMAGERRADDR    ;
    scml2::reg<uint> *CW_DMAGERRTYPE    ;
    scml2::reg<uint> *CW_DMAGSPIDERRCLR ;
    scml2::reg<uint> *CW_DMAGSPIDERRSTAT;
    scml2::reg<uint> *CW_DMAGKCPROT     ;
    scml2::reg<uint> *CW_DMAGMPID       [8];
    scml2::reg<uint> *CW_DMAGPROT_GR    ;
    scml2::reg<uint> *CW_DMAGPROT_DP    ;
    scml2::reg<uint> *CW_DMAGPROT_      [16];
    #endif

    uint DMAGOVFCLR_CLRO;
    uint DMAGOVFSTAT_OVF;
    uint DMAGERRADDR_ADDR;
    uint DMAGERRTYPE_SEC;
    uint DMAGERRTYPE_DBG;
    uint DMAGERRTYPE_UM ;
    uint DMAGERRTYPE_SPID;
    uint DMAGERRTYPE_WRITE;
    uint DMAGSPIDERRCLR_SPIDCLR;
    uint DMAGSPIDERRSTAT_SPIDERR;
    uint DMAGKCPROT_KCPROT;
    uint DMAGKCPROT_KCE ;
    uint DMAGMPID_SPID  [8];
    uint DMAGPROT_GR_MPID;
    uint DMAGPROT_GR_GEN;
    uint DMAGPROT_GR_DBG;
    uint DMAGPROT_GR_UM ;
    uint DMAGPROT_GR_WG ;
    uint DMAGPROT_GR_RG ;
    uint DMAGPROT_DP_MPID;
    uint DMAGPROT_DP_GEN;
    uint DMAGPROT_DP_DBG;
    uint DMAGPROT_DP_UM ;
    uint DMAGPROT_DP_WG ;
    uint DMAGPROT_DP_RG ;
    uint DMAGPROT__MPID [16];
    uint DMAGPROT__GEN  [16];
    uint DMAGPROT__DBG  [16];
    uint DMAGPROT__UM   [16];
    uint DMAGPROT__WG   [16];
    uint DMAGPROT__RG   [16];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DMAGOVFCLR_CLRO(RegCBstr str) = 0;
    virtual void cb_DMAGSPIDERRCLR_SPIDCLR(RegCBstr str) = 0;
    virtual void cb_DMAGKCPROT_KCPROT(RegCBstr str) = 0;
    virtual void cb_DMAGMPID_SPID(RegCBstr str) = 0;
    virtual void cb_DMAGPROT_GR_GEN(RegCBstr str) = 0;
    virtual void cb_DMAGPROT_DP_GEN(RegCBstr str) = 0;
    virtual void cb_DMAGPROT__GEN(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cdmag_u2_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cdmag_u2_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__DMAG_U2_REG_DEF_H__
