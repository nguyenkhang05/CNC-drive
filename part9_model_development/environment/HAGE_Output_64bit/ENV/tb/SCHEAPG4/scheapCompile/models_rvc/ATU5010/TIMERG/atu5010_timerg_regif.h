// -----------------------------------------------------------------------------
// $Id: atu5010_timerg_regif.h,v 1.0 2016/11/24 10:15:45 binhnguyen Exp $
//
// Copyright(c) 2015 Renesas Electronics Corporation
// Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : atu5010_timerg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// 
// 
// %MODULE ATU5010_TimerG
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
// 
// 
// %%TITLE    name      reg_name    wsize       rsize      length    offset    factor_start    factor_end    factor_index    factor_step    access           init    support    callback
// %%REG      TSTRG     TSTRG       8|16        8|16|32    16        0x0000    -               -             -               -                R|W         0x0000       TRUE          W
// %%REG      TIERG     TIERG       8|16        8|16|32    16        0x0004    -               -             -               -                R|W         0x0000       TRUE         - 
// %%REG      RLDCRG    RLDCRG      8|16        8|16|32    16        0x0008    -               -             -               -                R|W         0x0000       TRUE          W
// #####%%REG      EVSELG    EVSELG      8           8|16|32    8         0x000C    -               -             -               -                R|W           0x00       TRUE          W 
// %%REG      TCRG      TCRG        8           8|16|32    8         0x0010    0               9             -               0x10             R|W           0x00       TRUE          W
// %%REG      TSRG      TSRG        -           8|16|32    8         0x0012    0               9             -               0x10             R             0x00       TRUE        R
// %%REG      TSCRG     TSCRG       8           8|16|32    8         0x0013    0               9             -               0x10             R|W1:0        0x00       TRUE          W
// %%REG      TCNTG     TCNTG           32      8|16|32    32        0x0014    0               9             -               0x10             R|W     0x00000000       TRUE        R|W
// %%REG      OCRG      OCRG            32      8|16|32    32        0x0018    0               9             -               0x10             R|W     0xFFFFFFFF       TRUE        R|W
// %%REG      RLDG      RLDG            32      8|16|32    32        0x001C    0               9             -               0x10             R|W     0xFFFFFFFF       TRUE          W
// 
// #-------------------------------------------------------------------------------
// # timer start register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> start counter event
// #                -> clear the event detect flag
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #      write call-back fires start-counter and clear-even-detect events
// #-------------------------------------------------------------------------------
// %REG_NAME    TSTRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      STRG    9        0        0       R|W       TRUE       W
// 
// 
// #-------------------------------------------------------------------------------
// # timer interrupt enable register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever an interrupt source occurs and
// #     it's required to check whether interrupt request is allowed to be issued or
// #     not.
// #-------------------------------------------------------------------------------
// %REG_NAME    TIERG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMPIEG  9        0        0       R|W       TRUE       -
// 
// #-------------------------------------------------------------------------------
// # reload control register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever a compare-match occurs and
// #     it's required to check whether not.
// #-------------------------------------------------------------------------------
// %REG_NAME    RLDCRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      RLENG   9        0        0       R|W       TRUE       W
// 
// #-------------------------------------------------------------------------------
// # event select register (1)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever any change in external input
// #     events of the agent controller.
// #-------------------------------------------------------------------------------
// #####%REG_NAME    EVSELG
// #####%%TITLE    name    upper    lower    init    access    support    callback
// #####%%BIT      EVSELG  1        0        0       R|W       TRUE       W
// 
// 
// #-------------------------------------------------------------------------------
// # timer control registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> change clock frequency
// #                -> change operation mode
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #      write call-back causes selected clock frequency to be updated, operation
// #      mode also update.
// #-------------------------------------------------------------------------------
// %REG_NAME    TCRG
// %%TITLE    name      upper    lower    init    access    support    callback
// %%BIT      EVSYMG    0        0        0       R|W       TRUE       W
// %%BIT      CKSELG    6        4        0       R|W       TRUE       W
// 
// 
// 
// #-------------------------------------------------------------------------------
// # timer status registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: output status signals from hardware
// # * register call back:
// #     write: no
// #     read: yes
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #          values of fields are stored in the functional model, whenever
// #          software reads this values, the call-back read mirrors the value of
// #          fields in functional model into register block.
// # * usage:
// #      call-back read mirrors the value of fields in functional model into
// #      register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    TSRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMFG      0        0        0       R       TRUE       R
// %%BIT      OVFG      1        1        0       R       TRUE       R
// %%BIT      EVDTFG    2        2        0       R       TRUE       R
// 
// 
// #-------------------------------------------------------------------------------
// # timer status clear registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control signal from software
// # * register call back:
// #     write: yes -> clear flags specified in written data.
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          technically, it's unnecessary to store value of status-clear register.
// #          When write access into this occurs, clearing-bit is specified
// #          by written data. Written data may be access via value of this register
// #          or via written-data (how??)
// # * usage:
// #      call-back write clears status flags specified in written data.
// #-------------------------------------------------------------------------------
// %REG_NAME    TSCRG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      CMFCG    0       0        0       R|W1:0    TRUE       W
// %%BIT      OVFCG    1       1        0       R|W1:0    TRUE       W
// 
// #-------------------------------------------------------------------------------
// # timer counter registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: output status signals from hardware
// # * register call back:
// #     write: yes -> force new value written into counter
// #     read:  yes -> read access mirrors value of functional model into register
// #                   block
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #            counter is implemented inside the functional model.
// # * usage:
// #      call-back read mirrors value of functional model into register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    TCNTG
// %%TITLE    name    upper    lower    init    access    support    callback
// %%BIT      TCNTG   31       0        0       R|W       TRUE       R|W
// 
// #-------------------------------------------------------------------------------
// # output compare registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input control from software
// # * register call back:
// #     write: yes -> force new value written into compare register and new
// #                   comparison occurs
// #     read : yes -> read access mirrors value of this register inside
// #                   functional model into register block
// # * storage: [x] function model   [ ] register block  [ ] agent controller
// #           compare match register is implemented inside the functional model,
// #           because of reload operation.
// # * usage:
// #      call-back read mirrors value of functional model into register block.
// #-------------------------------------------------------------------------------
// %REG_NAME    OCRG
// %%TITLE    name    upper    lower    init          access    support    callback
// %%BIT      OCRG    31       0        0xFFFFFFFF    R|W       TRUE       R|W
// 
// 
// #-------------------------------------------------------------------------------
// # reload registers (SUBBLK_NUM)
// #-------------------------------------------------------------------------------
// # * type: input data signals from software
// # * register call back:
// #     write: no
// #     read: no
// # * storage: [ ] function model   [x] register block  [ ] agent controller
// #          values of fields are stored in the register block and are accessible
// #          via API. It's unnecessary to have another mirror of these fields
// #          inside function model
// # * usage:
// #     value of this register is read whenever an compare-match occurs.
// #     it's required to check if reload operation is allowed or not.
// #-------------------------------------------------------------------------------
// %REG_NAME    RLDG
// %%TITLE    name    upper    lower    init          access    support    callback
// %%BIT      RLDG    31       0        0xFFFFFFFF    R|W       TRUE       W
// 
////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timerg_regif.h
/// @brief Register IF class of model ATU5010_TIMERG
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ATU5010_TIMERG_REGIF_H__
#define __ATU5010_TIMERG_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ATU5010_TIMERG model
class Catu5010_timerg_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_TCRG   = 10,
        emNUM_TSRG   = 10,
        emNUM_TSCRG  = 10,
        emNUM_TCNTG  = 10,
        emNUM_OCRG   = 10,
        emNUM_RLDG   = 10
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Catu5010_timerg_regif(std::string name, uint buswidth);
    ~Catu5010_timerg_regif();

protected:
    vpcl::re_register *TSTRG ;
    vpcl::re_register *TIERG ;
    vpcl::re_register *RLDCRG;
    vpcl::re_register *TCRG  [10];
    vpcl::re_register *TSRG  [10];
    vpcl::re_register *TSCRG [10];
    vpcl::re_register *TCNTG [10];
    vpcl::re_register *OCRG  [10];
    vpcl::re_register *RLDG  [10];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_TSTRG_;
    scml2::reg<uint>      *CW_TIERG_;
    scml2::reg<uint>      *CW_RLDCRG_;
    scml2::reg<uint>      *CW_TCRG_0_TSRG_0_TSCRG_0;
    scml2::reg<uint>      *CW_TCRG_1_TSRG_1_TSCRG_1;
    scml2::reg<uint>      *CW_TCRG_2_TSRG_2_TSCRG_2;
    scml2::reg<uint>      *CW_TCRG_3_TSRG_3_TSCRG_3;
    scml2::reg<uint>      *CW_TCRG_4_TSRG_4_TSCRG_4;
    scml2::reg<uint>      *CW_TCRG_5_TSRG_5_TSCRG_5;
    scml2::reg<uint>      *CW_TCRG_6_TSRG_6_TSCRG_6;
    scml2::reg<uint>      *CW_TCRG_7_TSRG_7_TSCRG_7;
    scml2::reg<uint>      *CW_TCRG_8_TSRG_8_TSCRG_8;
    scml2::reg<uint>      *CW_TCRG_9_TSRG_9_TSCRG_9;
    scml2::bitfield<uint> *CW_TSTRG ;
    scml2::bitfield<uint> *CW_TIERG ;
    scml2::bitfield<uint> *CW_RLDCRG;
    scml2::bitfield<uint> *CW_TCRG  [10];
    scml2::bitfield<uint> *CW_TSRG  [10];
    scml2::bitfield<uint> *CW_TSCRG [10];
    scml2::reg<uint>      *CW_TCNTG [10];
    scml2::reg<uint>      *CW_OCRG  [10];
    scml2::reg<uint>      *CW_RLDG  [10];
    #endif

    uint TSTRG_STRG;
    uint TIERG_CMPIEG;
    uint RLDCRG_RLENG;
    uint TCRG_EVSYMG[10];
    uint TCRG_CKSELG[10];
    uint TSRG_CMFG[10];
    uint TSRG_OVFG[10];
    uint TSRG_EVDTFG[10];
    uint TSCRG_CMFCG[10];
    uint TSCRG_OVFCG[10];
    uint TCNTG_TCNTG[10];
    uint OCRG_OCRG[10];
    uint RLDG_RLDG[10];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_TSTRG_STRG(RegCBstr str) = 0;
    virtual void cb_RLDCRG_RLENG(RegCBstr str) = 0;
    virtual void cb_TCRG_EVSYMG(RegCBstr str) = 0;
    virtual void cb_TCRG_CKSELG(RegCBstr str) = 0;
    virtual void cb_TSRG_CMFG(RegCBstr str) = 0;
    virtual void cb_TSRG_OVFG(RegCBstr str) = 0;
    virtual void cb_TSRG_EVDTFG(RegCBstr str) = 0;
    virtual void cb_TSCRG_CMFCG(RegCBstr str) = 0;
    virtual void cb_TSCRG_OVFCG(RegCBstr str) = 0;
    virtual void cb_TCNTG_TCNTG(RegCBstr str) = 0;
    virtual void cb_OCRG_OCRG(RegCBstr str) = 0;
    virtual void cb_RLDG_RLDG(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Catu5010_timerg_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Catu5010_timerg_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ATU5010_TIMERG_REG_DEF_H__
