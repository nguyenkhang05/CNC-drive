// -----------------------------------------------------------------------------
// $Id: eccueab_regif.cpp,v 1.1 2014/03/07 01:21:09 dungvannguyen Exp $
//
// Copyright(c) 2010-2013 Renesas Electronics Corporation
// Copyright(c) 2010-2013 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_cpp.skl 1.52 2014/05/19 02:28:22 sontran
//
// Input file : eccueab_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECCUEAB
//     #                 name       offset_size
//     %%REG_INSTANCE    reg_def        8
// 
// %REG_CHANNEL reg_def
//     %%TITLE     group   name        reg_name     wsize    rsize    length   offset  factor_start  factor_end  factor_index  access   init  support  callback
//     %%REG       -       ERRINT      ERRINT      8|16|32  8|16|32   32       0x0         -           -             -         W|R       0     TRUE     -
//     %%REG       -       SSTCLR      SSTCLR      8|16|32  8|16|32   32       0x4         -           -             -         W         0     TRUE     -
//     %%REG       -       DSTCLR      DSTCLR      8|16|32  8|16|32   32       0x8         -           -             -         W         0     TRUE     -
//     %%REG       -       OVFSTR      OVFSTR      8|16|32  8|16|32   32       0xC         -           -             -         R         0     TRUE     -
//     %%REG       -       SERSTR      SERSTR      8|16|32  8|16|32   32       0x20        -           -             -         R         0     TRUE     -
//     %%REG       -       DERSTR      DERSTR      8|16|32  8|16|32   32       0x30        -           -             -         R         0     TRUE     -
//     %%REG       -       SEADR       SEADR            32  8|16|32   32       0x40        0           31            -         R         0     TRUE     -
//     %%REG       -       DEADR00     DEADR00          32  8|16|32   32       0xC0        -           -             -         R         0     TRUE     -
// 
// %REG_NAME ERRINT
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDIE       0      0      0     W|R      TRUE     -
//     %%BIT    DEDIE       1      1      0     W|R      TRUE     -
//     %%BIT    APEIE       2      2      0     W|R      TRUE     -
//     %%BIT    ASEDIE      4      4      0     W|R      TRUE     -
//     %%BIT    ADEDIE      5      5      0     W|R      TRUE     -
//     %%BIT    SEOVFIE     6      6      0     W|R      TRUE     -
// 
// %REG_NAME SSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SSTCLR00    0      0      0     W        TRUE     W
//     %%BIT    SSTCLR01    1      1      0     W        TRUE     -
//     %%BIT    SSTCLR02    2      2      0     W        TRUE     -
//     %%BIT    SSTCLR03    3      3      0     W        TRUE     -
//     %%BIT    SSTCLR04    4      4      0     W        TRUE     -
//     %%BIT    SSTCLR05    5      5      0     W        TRUE     -
//     %%BIT    SSTCLR06    6      6      0     W        TRUE     -
//     %%BIT    SSTCLR07    7      7      0     W        TRUE     -
//     %%BIT    SSTCLR08    8      8      0     W        TRUE     -
//     %%BIT    SSTCLR09    9      9      0     W        TRUE     -
//     %%BIT    SSTCLR10    10     10     0     W        TRUE     -
//     %%BIT    SSTCLR11    11     11     0     W        TRUE     -
//     %%BIT    SSTCLR12    12     12     0     W        TRUE     -
//     %%BIT    SSTCLR13    13     13     0     W        TRUE     -
//     %%BIT    SSTCLR14    14     14     0     W        TRUE     -
//     %%BIT    SSTCLR15    15     15     0     W        TRUE     -
//     %%BIT    SSTCLR16    16     16     0     W        TRUE     -
//     %%BIT    SSTCLR17    17     17     0     W        TRUE     -
//     %%BIT    SSTCLR18    18     18     0     W        TRUE     -
//     %%BIT    SSTCLR19    19     19     0     W        TRUE     -
//     %%BIT    SSTCLR20    20     20     0     W        TRUE     -
//     %%BIT    SSTCLR21    21     21     0     W        TRUE     -
//     %%BIT    SSTCLR22    22     22     0     W        TRUE     -
//     %%BIT    SSTCLR23    23     23     0     W        TRUE     -
//     %%BIT    SSTCLR24    24     24     0     W        TRUE     -
//     %%BIT    SSTCLR25    25     25     0     W        TRUE     -
//     %%BIT    SSTCLR26    26     26     0     W        TRUE     -
//     %%BIT    SSTCLR27    27     27     0     W        TRUE     -
//     %%BIT    SSTCLR28    28     28     0     W        TRUE     -
//     %%BIT    SSTCLR29    29     29     0     W        TRUE     -
//     %%BIT    SSTCLR30    30     30     0     W        TRUE     -
//     %%BIT    SSTCLR31    31     31     0     W        TRUE     -
// 
// %REG_NAME DSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DSTCLR00    0      0      0     W        TRUE     W
// 
// %REG_NAME OVFSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SERROVF0    0      0      0     R        TRUE     -
// 
// %REG_NAME SERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF00      0      0      0     R        TRUE     -
//     %%BIT    SEDF01      1      1      0     R        TRUE     -
//     %%BIT    SEDF02      2      2      0     R        TRUE     -
//     %%BIT    SEDF03      3      3      0     R        TRUE     -
//     %%BIT    SEDF04      4      4      0     R        TRUE     -
//     %%BIT    SEDF05      5      5      0     R        TRUE     -
//     %%BIT    SEDF06      6      6      0     R        TRUE     -
//     %%BIT    SEDF07      7      7      0     R        TRUE     -
//     %%BIT    SEDF08      8      8      0     R        TRUE     -
//     %%BIT    SEDF09      9      9      0     R        TRUE     -
//     %%BIT    SEDF10      10     10     0     R        TRUE     -
//     %%BIT    SEDF11      11     11     0     R        TRUE     -
//     %%BIT    SEDF12      12     12     0     R        TRUE     -
//     %%BIT    SEDF13      13     13     0     R        TRUE     -
//     %%BIT    SEDF14      14     14     0     R        TRUE     -
//     %%BIT    SEDF15      15     15     0     R        TRUE     -
//     %%BIT    SEDF16      16     16     0     R        TRUE     -
//     %%BIT    SEDF17      17     17     0     R        TRUE     -
//     %%BIT    SEDF18      18     18     0     R        TRUE     -
//     %%BIT    SEDF19      19     19     0     R        TRUE     -
//     %%BIT    SEDF20      20     20     0     R        TRUE     -
//     %%BIT    SEDF21      21     21     0     R        TRUE     -
//     %%BIT    SEDF22      22     22     0     R        TRUE     -
//     %%BIT    SEDF23      23     23     0     R        TRUE     -
//     %%BIT    SEDF24      24     24     0     R        TRUE     -
//     %%BIT    SEDF25      25     25     0     R        TRUE     -
//     %%BIT    SEDF26      26     26     0     R        TRUE     -
//     %%BIT    SEDF27      27     27     0     R        TRUE     -
//     %%BIT    SEDF28      28     28     0     R        TRUE     -
//     %%BIT    SEDF29      29     29     0     R        TRUE     -
//     %%BIT    SEDF30      30     30     0     R        TRUE     -
//     %%BIT    SEDF31      31     31     0     R        TRUE     -
// 
// %REG_NAME DERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEDF00      0      0      0     R        TRUE     -
//     %%BIT    APEF00      2      2      0     R        TRUE     -
//     %%BIT    AECSEDF00   4      4      0     R        TRUE     -
//     %%BIT    AECDEDF00   5      5      0     R        TRUE     -
// 
// %REG_NAME SEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR       31     0      0     R        TRUE     -
// 
// %REG_NAME DEADR00
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEADR00     31     0      0     R        TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file eccueab_regif.cpp
/// @brief Register IF class of model ECCUEAB
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "eccueab_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Ceccueab_regif::Ceccueab_regif(std::string name, uint buswidth, uint ERRINTInitial)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xC4/4))
    #endif
{
    CommandInit();
    ERRINT  = new vpcl::re_register(0x0000, this, "ERRINT" , name.c_str());
    SSTCLR  = new vpcl::re_register(0x0004, this, "SSTCLR" , name.c_str());
    DSTCLR  = new vpcl::re_register(0x0008, this, "DSTCLR" , name.c_str());
    OVFSTR  = new vpcl::re_register(0x000C, this, "OVFSTR" , name.c_str());
    SERSTR  = new vpcl::re_register(0x0020, this, "SERSTR" , name.c_str());
    DERSTR  = new vpcl::re_register(0x0030, this, "DERSTR" , name.c_str());
    DEADR00 = new vpcl::re_register(0x00C0, this, "DEADR00", name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_SEADR; i++) {
        str_tmp.str("");
        str_tmp<<"SEADR"<< i;
        SEADR  [i] = new vpcl::re_register((0x0040) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    for(uint i = 0; i < emNUM_SEADR;  i++) {
        mRegMap[(0x0040)     + i*4 ] = index;
        mRegMap[(0x0040 + 1) + i*4 ] = index;
        mRegMap[(0x0040 + 2) + i*4 ] = index;
        mRegMap[(0x0040 + 3) + i*4 ] = index++;
    }
    mRegMap[0x00C0]     = index;
    mRegMap[0x00C0 + 1] = index;
    mRegMap[0x00C0 + 2] = index;
    mRegMap[0x00C0 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_ERRINT   , ERRINT->name() , ERRINT->addr() );
    cw_instantiate_reg(CW_SSTCLR   , SSTCLR->name() , SSTCLR->addr() );
    cw_instantiate_reg(CW_DSTCLR   , DSTCLR->name() , DSTCLR->addr() );
    cw_instantiate_reg(CW_OVFSTR   , OVFSTR->name() , OVFSTR->addr() );
    cw_instantiate_reg(CW_SERSTR   , SERSTR->name() , SERSTR->addr() );
    cw_instantiate_reg(CW_DERSTR   , DERSTR->name() , DERSTR->addr() );
    for(uint i = 0; i < emNUM_SEADR  ; i++) cw_instantiate_reg(CW_SEADR    [i], SEADR  [i]->name(), SEADR  [i]->addr());
    cw_instantiate_reg(CW_DEADR00  , DEADR00->name(), DEADR00->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(ERRINT   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SSTCLR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DSTCLR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(OVFSTR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SERSTR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DERSTR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_SEADR  ; i++) mCurReg = mRegArray[index++] = new SRegList(SEADR    [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DEADR00  , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*ERRINT ) ( 0,  0, "SEDIE"   , (ERRINTInitial)&0x1    , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT ) ( 1,  1, "DEDIE"   , (ERRINTInitial>>1)&0x1 , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT ) ( 2,  2, "APEIE"   , (ERRINTInitial>>2)&0x1 , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT ) ( 4,  4, "ASEDIE"  , (ERRINTInitial>>4)&0x1 , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT ) ( 5,  5, "ADEDIE"  , (ERRINTInitial>>5)&0x1 , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT ) ( 6,  6, "SEOVFIE" , (ERRINTInitial>>6)&0x1 , "W|R"   , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 0,  0, "SSTCLR00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 1,  1, "SSTCLR01", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 2,  2, "SSTCLR02", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 3,  3, "SSTCLR03", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 4,  4, "SSTCLR04", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 5,  5, "SSTCLR05", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 6,  6, "SSTCLR06", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 7,  7, "SSTCLR07", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 8,  8, "SSTCLR08", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) ( 9,  9, "SSTCLR09", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (10, 10, "SSTCLR10", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (11, 11, "SSTCLR11", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (12, 12, "SSTCLR12", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (13, 13, "SSTCLR13", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (14, 14, "SSTCLR14", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (15, 15, "SSTCLR15", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (16, 16, "SSTCLR16", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (17, 17, "SSTCLR17", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (18, 18, "SSTCLR18", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (19, 19, "SSTCLR19", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (20, 20, "SSTCLR20", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (21, 21, "SSTCLR21", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (22, 22, "SSTCLR22", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (23, 23, "SSTCLR23", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (24, 24, "SSTCLR24", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (25, 25, "SSTCLR25", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (26, 26, "SSTCLR26", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (27, 27, "SSTCLR27", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (28, 28, "SSTCLR28", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (29, 29, "SSTCLR29", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (30, 30, "SSTCLR30", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*SSTCLR   ) (31, 31, "SSTCLR31", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*DSTCLR   ) ( 0,  0, "DSTCLR00", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OVFSTR   ) ( 0,  0, "SERROVF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 0,  0, "SEDF00"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 1,  1, "SEDF01"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 2,  2, "SEDF02"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 3,  3, "SEDF03"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 4,  4, "SEDF04"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 5,  5, "SEDF05"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 6,  6, "SEDF06"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 7,  7, "SEDF07"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 8,  8, "SEDF08"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) ( 9,  9, "SEDF09"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (10, 10, "SEDF10"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (11, 11, "SEDF11"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (12, 12, "SEDF12"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (13, 13, "SEDF13"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (14, 14, "SEDF14"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (15, 15, "SEDF15"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (16, 16, "SEDF16"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (17, 17, "SEDF17"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (18, 18, "SEDF18"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (19, 19, "SEDF19"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (20, 20, "SEDF20"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (21, 21, "SEDF21"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (22, 22, "SEDF22"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (23, 23, "SEDF23"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (24, 24, "SEDF24"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (25, 25, "SEDF25"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (26, 26, "SEDF26"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (27, 27, "SEDF27"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (28, 28, "SEDF28"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (29, 29, "SEDF29"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (30, 30, "SEDF30"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SERSTR   ) (31, 31, "SEDF31"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DERSTR   ) ( 0,  0, "DEDF00"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DERSTR   ) ( 2,  2, "APEF00"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DERSTR   ) ( 4,  4, "AECSEDF00", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DERSTR   ) ( 5,  5, "AECDEDF00", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DEADR00  ) (31,  0, "DEADR00" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_SEADR; i++) {
        (*SEADR    [i]) (31,  0, "SEADR"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["SSTCLR"]["SSTCLR00"] = &Ceccueab_regif::cb_SSTCLR_SSTCLR00;
    mWrCbAPI["DSTCLR"]["DSTCLR00"] = &Ceccueab_regif::cb_DSTCLR_DSTCLR00;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Ceccueab_regif::~Ceccueab_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Ceccueab_regif::uint Ceccueab_regif::bit_select(
                            cuint val,    ///< [in] Writting address
                            cuint start,  ///< [in] start bit position
                            cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ceccueab_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ceccueab_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ceccueab_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ceccueab_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ceccueab_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                    const unsigned char *p_data,  ///< [in] Writing data
                                    cuint size,                   ///< [in] Data size (byte)
                                    bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ceccueab_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size,              ///< [in]  Data size (byte)
                                    bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Ceccueab_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                 unsigned char *p_data,          ///< [out] Reading data
                                 cuint size,                     ///< [in]  Data size (byte)
                                 cuint reg_index,                ///< [in] Register index
                                 bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Ceccueab_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                 const unsigned char *p_data,      ///< [in] Writing data
                                 cuint size,                       ///< [in] Data size (byte)
                                 cuint reg_index,                  ///< [in] Register index
                                 bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Ceccueab_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Ceccueab_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Ceccueab_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Ceccueab_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Ceccueab_regif::InitLocalVal()
{
    // Initialize local variables
    ERRINT_SEDIE = 0x0;
    ERRINT_DEDIE = 0x0;
    ERRINT_APEIE = 0x0;
    ERRINT_ASEDIE = 0x0;
    ERRINT_ADEDIE = 0x0;
    ERRINT_SEOVFIE = 0x0;
    SSTCLR_SSTCLR00 = 0x0;
    SSTCLR_SSTCLR01 = 0x0;
    SSTCLR_SSTCLR02 = 0x0;
    SSTCLR_SSTCLR03 = 0x0;
    SSTCLR_SSTCLR04 = 0x0;
    SSTCLR_SSTCLR05 = 0x0;
    SSTCLR_SSTCLR06 = 0x0;
    SSTCLR_SSTCLR07 = 0x0;
    SSTCLR_SSTCLR08 = 0x0;
    SSTCLR_SSTCLR09 = 0x0;
    SSTCLR_SSTCLR10 = 0x0;
    SSTCLR_SSTCLR11 = 0x0;
    SSTCLR_SSTCLR12 = 0x0;
    SSTCLR_SSTCLR13 = 0x0;
    SSTCLR_SSTCLR14 = 0x0;
    SSTCLR_SSTCLR15 = 0x0;
    SSTCLR_SSTCLR16 = 0x0;
    SSTCLR_SSTCLR17 = 0x0;
    SSTCLR_SSTCLR18 = 0x0;
    SSTCLR_SSTCLR19 = 0x0;
    SSTCLR_SSTCLR20 = 0x0;
    SSTCLR_SSTCLR21 = 0x0;
    SSTCLR_SSTCLR22 = 0x0;
    SSTCLR_SSTCLR23 = 0x0;
    SSTCLR_SSTCLR24 = 0x0;
    SSTCLR_SSTCLR25 = 0x0;
    SSTCLR_SSTCLR26 = 0x0;
    SSTCLR_SSTCLR27 = 0x0;
    SSTCLR_SSTCLR28 = 0x0;
    SSTCLR_SSTCLR29 = 0x0;
    SSTCLR_SSTCLR30 = 0x0;
    SSTCLR_SSTCLR31 = 0x0;
    DSTCLR_DSTCLR00 = 0x0;
    OVFSTR_SERROVF0 = 0x0;
    SERSTR_SEDF00 = 0x0;
    SERSTR_SEDF01 = 0x0;
    SERSTR_SEDF02 = 0x0;
    SERSTR_SEDF03 = 0x0;
    SERSTR_SEDF04 = 0x0;
    SERSTR_SEDF05 = 0x0;
    SERSTR_SEDF06 = 0x0;
    SERSTR_SEDF07 = 0x0;
    SERSTR_SEDF08 = 0x0;
    SERSTR_SEDF09 = 0x0;
    SERSTR_SEDF10 = 0x0;
    SERSTR_SEDF11 = 0x0;
    SERSTR_SEDF12 = 0x0;
    SERSTR_SEDF13 = 0x0;
    SERSTR_SEDF14 = 0x0;
    SERSTR_SEDF15 = 0x0;
    SERSTR_SEDF16 = 0x0;
    SERSTR_SEDF17 = 0x0;
    SERSTR_SEDF18 = 0x0;
    SERSTR_SEDF19 = 0x0;
    SERSTR_SEDF20 = 0x0;
    SERSTR_SEDF21 = 0x0;
    SERSTR_SEDF22 = 0x0;
    SERSTR_SEDF23 = 0x0;
    SERSTR_SEDF24 = 0x0;
    SERSTR_SEDF25 = 0x0;
    SERSTR_SEDF26 = 0x0;
    SERSTR_SEDF27 = 0x0;
    SERSTR_SEDF28 = 0x0;
    SERSTR_SEDF29 = 0x0;
    SERSTR_SEDF30 = 0x0;
    SERSTR_SEDF31 = 0x0;
    DERSTR_DEDF00 = 0x0;
    DERSTR_APEF00 = 0x0;
    DERSTR_AECSEDF00 = 0x0;
    DERSTR_AECDEDF00 = 0x0;
    for(uint i = 0; i < emNUM_SEADR;  i++) {
        SEADR_SEADR[i] = 0x0;
    }
    DEADR00_DEADR00 = 0x0;
}

/// Update bit value to local value
/// @return None
void Ceccueab_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ERRINT_SEDIE                = (*ERRINT )["SEDIE"  ];
        ERRINT_DEDIE                = (*ERRINT )["DEDIE"  ];
        ERRINT_APEIE                = (*ERRINT )["APEIE"  ];
        ERRINT_ASEDIE               = (*ERRINT )["ASEDIE" ];
        ERRINT_ADEDIE               = (*ERRINT )["ADEDIE" ];
        ERRINT_SEOVFIE              = (*ERRINT )["SEOVFIE"];
        return;
    }
    if (addr == 0x0004) {
        SSTCLR_SSTCLR00             = (*SSTCLR )["SSTCLR00"];
        SSTCLR_SSTCLR01             = (*SSTCLR )["SSTCLR01"];
        SSTCLR_SSTCLR02             = (*SSTCLR )["SSTCLR02"];
        SSTCLR_SSTCLR03             = (*SSTCLR )["SSTCLR03"];
        SSTCLR_SSTCLR04             = (*SSTCLR )["SSTCLR04"];
        SSTCLR_SSTCLR05             = (*SSTCLR )["SSTCLR05"];
        SSTCLR_SSTCLR06             = (*SSTCLR )["SSTCLR06"];
        SSTCLR_SSTCLR07             = (*SSTCLR )["SSTCLR07"];
        SSTCLR_SSTCLR08             = (*SSTCLR )["SSTCLR08"];
        SSTCLR_SSTCLR09             = (*SSTCLR )["SSTCLR09"];
        SSTCLR_SSTCLR10             = (*SSTCLR )["SSTCLR10"];
        SSTCLR_SSTCLR11             = (*SSTCLR )["SSTCLR11"];
        SSTCLR_SSTCLR12             = (*SSTCLR )["SSTCLR12"];
        SSTCLR_SSTCLR13             = (*SSTCLR )["SSTCLR13"];
        SSTCLR_SSTCLR14             = (*SSTCLR )["SSTCLR14"];
        SSTCLR_SSTCLR15             = (*SSTCLR )["SSTCLR15"];
        SSTCLR_SSTCLR16             = (*SSTCLR )["SSTCLR16"];
        SSTCLR_SSTCLR17             = (*SSTCLR )["SSTCLR17"];
        SSTCLR_SSTCLR18             = (*SSTCLR )["SSTCLR18"];
        SSTCLR_SSTCLR19             = (*SSTCLR )["SSTCLR19"];
        SSTCLR_SSTCLR20             = (*SSTCLR )["SSTCLR20"];
        SSTCLR_SSTCLR21             = (*SSTCLR )["SSTCLR21"];
        SSTCLR_SSTCLR22             = (*SSTCLR )["SSTCLR22"];
        SSTCLR_SSTCLR23             = (*SSTCLR )["SSTCLR23"];
        SSTCLR_SSTCLR24             = (*SSTCLR )["SSTCLR24"];
        SSTCLR_SSTCLR25             = (*SSTCLR )["SSTCLR25"];
        SSTCLR_SSTCLR26             = (*SSTCLR )["SSTCLR26"];
        SSTCLR_SSTCLR27             = (*SSTCLR )["SSTCLR27"];
        SSTCLR_SSTCLR28             = (*SSTCLR )["SSTCLR28"];
        SSTCLR_SSTCLR29             = (*SSTCLR )["SSTCLR29"];
        SSTCLR_SSTCLR30             = (*SSTCLR )["SSTCLR30"];
        SSTCLR_SSTCLR31             = (*SSTCLR )["SSTCLR31"];
        return;
    }
    if (addr == 0x0008) {
        DSTCLR_DSTCLR00             = (*DSTCLR )["DSTCLR00"];
        return;
    }
    if (addr == 0x000C) {
        OVFSTR_SERROVF0             = (*OVFSTR )["SERROVF0"];
        return;
    }
    if (addr == 0x0020) {
        SERSTR_SEDF00               = (*SERSTR )["SEDF00" ];
        SERSTR_SEDF01               = (*SERSTR )["SEDF01" ];
        SERSTR_SEDF02               = (*SERSTR )["SEDF02" ];
        SERSTR_SEDF03               = (*SERSTR )["SEDF03" ];
        SERSTR_SEDF04               = (*SERSTR )["SEDF04" ];
        SERSTR_SEDF05               = (*SERSTR )["SEDF05" ];
        SERSTR_SEDF06               = (*SERSTR )["SEDF06" ];
        SERSTR_SEDF07               = (*SERSTR )["SEDF07" ];
        SERSTR_SEDF08               = (*SERSTR )["SEDF08" ];
        SERSTR_SEDF09               = (*SERSTR )["SEDF09" ];
        SERSTR_SEDF10               = (*SERSTR )["SEDF10" ];
        SERSTR_SEDF11               = (*SERSTR )["SEDF11" ];
        SERSTR_SEDF12               = (*SERSTR )["SEDF12" ];
        SERSTR_SEDF13               = (*SERSTR )["SEDF13" ];
        SERSTR_SEDF14               = (*SERSTR )["SEDF14" ];
        SERSTR_SEDF15               = (*SERSTR )["SEDF15" ];
        SERSTR_SEDF16               = (*SERSTR )["SEDF16" ];
        SERSTR_SEDF17               = (*SERSTR )["SEDF17" ];
        SERSTR_SEDF18               = (*SERSTR )["SEDF18" ];
        SERSTR_SEDF19               = (*SERSTR )["SEDF19" ];
        SERSTR_SEDF20               = (*SERSTR )["SEDF20" ];
        SERSTR_SEDF21               = (*SERSTR )["SEDF21" ];
        SERSTR_SEDF22               = (*SERSTR )["SEDF22" ];
        SERSTR_SEDF23               = (*SERSTR )["SEDF23" ];
        SERSTR_SEDF24               = (*SERSTR )["SEDF24" ];
        SERSTR_SEDF25               = (*SERSTR )["SEDF25" ];
        SERSTR_SEDF26               = (*SERSTR )["SEDF26" ];
        SERSTR_SEDF27               = (*SERSTR )["SEDF27" ];
        SERSTR_SEDF28               = (*SERSTR )["SEDF28" ];
        SERSTR_SEDF29               = (*SERSTR )["SEDF29" ];
        SERSTR_SEDF30               = (*SERSTR )["SEDF30" ];
        SERSTR_SEDF31               = (*SERSTR )["SEDF31" ];
        return;
    }
    if (addr == 0x0030) {
        DERSTR_DEDF00               = (*DERSTR )["DEDF00" ];
        DERSTR_APEF00               = (*DERSTR )["APEF00" ];
        DERSTR_AECSEDF00            = (*DERSTR )["AECSEDF00"];
        DERSTR_AECDEDF00            = (*DERSTR )["AECDEDF00"];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*31)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        SEADR_SEADR                [i] = (*(SEADR  [i]))["SEADR"  ];
        return;
    }
    if (addr == 0x00C0) {
        DEADR00_DEADR00             = (*DEADR00)["DEADR00"];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Ceccueab_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ERRINT )["SEDIE"  ] = ERRINT_SEDIE;
        (*ERRINT )["DEDIE"  ] = ERRINT_DEDIE;
        (*ERRINT )["APEIE"  ] = ERRINT_APEIE;
        (*ERRINT )["ASEDIE" ] = ERRINT_ASEDIE;
        (*ERRINT )["ADEDIE" ] = ERRINT_ADEDIE;
        (*ERRINT )["SEOVFIE"] = ERRINT_SEOVFIE;
        return;
    }
    if (addr == 0x0004) {
        (*SSTCLR )["SSTCLR00"] = SSTCLR_SSTCLR00;
        (*SSTCLR )["SSTCLR01"] = SSTCLR_SSTCLR01;
        (*SSTCLR )["SSTCLR02"] = SSTCLR_SSTCLR02;
        (*SSTCLR )["SSTCLR03"] = SSTCLR_SSTCLR03;
        (*SSTCLR )["SSTCLR04"] = SSTCLR_SSTCLR04;
        (*SSTCLR )["SSTCLR05"] = SSTCLR_SSTCLR05;
        (*SSTCLR )["SSTCLR06"] = SSTCLR_SSTCLR06;
        (*SSTCLR )["SSTCLR07"] = SSTCLR_SSTCLR07;
        (*SSTCLR )["SSTCLR08"] = SSTCLR_SSTCLR08;
        (*SSTCLR )["SSTCLR09"] = SSTCLR_SSTCLR09;
        (*SSTCLR )["SSTCLR10"] = SSTCLR_SSTCLR10;
        (*SSTCLR )["SSTCLR11"] = SSTCLR_SSTCLR11;
        (*SSTCLR )["SSTCLR12"] = SSTCLR_SSTCLR12;
        (*SSTCLR )["SSTCLR13"] = SSTCLR_SSTCLR13;
        (*SSTCLR )["SSTCLR14"] = SSTCLR_SSTCLR14;
        (*SSTCLR )["SSTCLR15"] = SSTCLR_SSTCLR15;
        (*SSTCLR )["SSTCLR16"] = SSTCLR_SSTCLR16;
        (*SSTCLR )["SSTCLR17"] = SSTCLR_SSTCLR17;
        (*SSTCLR )["SSTCLR18"] = SSTCLR_SSTCLR18;
        (*SSTCLR )["SSTCLR19"] = SSTCLR_SSTCLR19;
        (*SSTCLR )["SSTCLR20"] = SSTCLR_SSTCLR20;
        (*SSTCLR )["SSTCLR21"] = SSTCLR_SSTCLR21;
        (*SSTCLR )["SSTCLR22"] = SSTCLR_SSTCLR22;
        (*SSTCLR )["SSTCLR23"] = SSTCLR_SSTCLR23;
        (*SSTCLR )["SSTCLR24"] = SSTCLR_SSTCLR24;
        (*SSTCLR )["SSTCLR25"] = SSTCLR_SSTCLR25;
        (*SSTCLR )["SSTCLR26"] = SSTCLR_SSTCLR26;
        (*SSTCLR )["SSTCLR27"] = SSTCLR_SSTCLR27;
        (*SSTCLR )["SSTCLR28"] = SSTCLR_SSTCLR28;
        (*SSTCLR )["SSTCLR29"] = SSTCLR_SSTCLR29;
        (*SSTCLR )["SSTCLR30"] = SSTCLR_SSTCLR30;
        (*SSTCLR )["SSTCLR31"] = SSTCLR_SSTCLR31;
        return;
    }
    if (addr == 0x0008) {
        (*DSTCLR )["DSTCLR00"] = DSTCLR_DSTCLR00;
        return;
    }
    if (addr == 0x000C) {
        (*OVFSTR )["SERROVF0"] = OVFSTR_SERROVF0;
        return;
    }
    if (addr == 0x0020) {
        (*SERSTR )["SEDF00" ] = SERSTR_SEDF00;
        (*SERSTR )["SEDF01" ] = SERSTR_SEDF01;
        (*SERSTR )["SEDF02" ] = SERSTR_SEDF02;
        (*SERSTR )["SEDF03" ] = SERSTR_SEDF03;
        (*SERSTR )["SEDF04" ] = SERSTR_SEDF04;
        (*SERSTR )["SEDF05" ] = SERSTR_SEDF05;
        (*SERSTR )["SEDF06" ] = SERSTR_SEDF06;
        (*SERSTR )["SEDF07" ] = SERSTR_SEDF07;
        (*SERSTR )["SEDF08" ] = SERSTR_SEDF08;
        (*SERSTR )["SEDF09" ] = SERSTR_SEDF09;
        (*SERSTR )["SEDF10" ] = SERSTR_SEDF10;
        (*SERSTR )["SEDF11" ] = SERSTR_SEDF11;
        (*SERSTR )["SEDF12" ] = SERSTR_SEDF12;
        (*SERSTR )["SEDF13" ] = SERSTR_SEDF13;
        (*SERSTR )["SEDF14" ] = SERSTR_SEDF14;
        (*SERSTR )["SEDF15" ] = SERSTR_SEDF15;
        (*SERSTR )["SEDF16" ] = SERSTR_SEDF16;
        (*SERSTR )["SEDF17" ] = SERSTR_SEDF17;
        (*SERSTR )["SEDF18" ] = SERSTR_SEDF18;
        (*SERSTR )["SEDF19" ] = SERSTR_SEDF19;
        (*SERSTR )["SEDF20" ] = SERSTR_SEDF20;
        (*SERSTR )["SEDF21" ] = SERSTR_SEDF21;
        (*SERSTR )["SEDF22" ] = SERSTR_SEDF22;
        (*SERSTR )["SEDF23" ] = SERSTR_SEDF23;
        (*SERSTR )["SEDF24" ] = SERSTR_SEDF24;
        (*SERSTR )["SEDF25" ] = SERSTR_SEDF25;
        (*SERSTR )["SEDF26" ] = SERSTR_SEDF26;
        (*SERSTR )["SEDF27" ] = SERSTR_SEDF27;
        (*SERSTR )["SEDF28" ] = SERSTR_SEDF28;
        (*SERSTR )["SEDF29" ] = SERSTR_SEDF29;
        (*SERSTR )["SEDF30" ] = SERSTR_SEDF30;
        (*SERSTR )["SEDF31" ] = SERSTR_SEDF31;
        return;
    }
    if (addr == 0x0030) {
        (*DERSTR )["DEDF00" ] = DERSTR_DEDF00;
        (*DERSTR )["APEF00" ] = DERSTR_APEF00;
        (*DERSTR )["AECSEDF00"] = DERSTR_AECSEDF00;
        (*DERSTR )["AECDEDF00"] = DERSTR_AECDEDF00;
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*31)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        (*(SEADR  [i]))["SEADR"  ] = SEADR_SEADR[i];
        return;
    }
    if (addr == 0x00C0) {
        (*DEADR00)["DEADR00"] = DEADR00_DEADR00;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Ceccueab_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Ceccueab_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Ceccueab_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Ceccueab_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Ceccueab_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Ceccueab_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Ceccueab_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Ceccueab_regif::uint Ceccueab_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Ceccueab_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Ceccueab_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Ceccueab_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Ceccueab_regif::EnableReset(const bool is_active, const std::string clock_domain) //Modify for reseting registers according to clock domain)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        if (clock_domain == "pclk_domain") {
            if ((mRegArray[i]->my_p->name() == "ERRINT") || (mRegArray[i]->my_p->name() == "SSTCLR") || (mRegArray[i]->my_p->name() == "DSTCLR")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        } else if (clock_domain == "sys_clk_domain") {
            if ((mRegArray[i]->my_p->name() != "ERRINT") && (mRegArray[i]->my_p->name() != "SSTCLR") && (mRegArray[i]->my_p->name() != "DSTCLR")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Ceccueab_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Ceccueab_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Ceccueab_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
