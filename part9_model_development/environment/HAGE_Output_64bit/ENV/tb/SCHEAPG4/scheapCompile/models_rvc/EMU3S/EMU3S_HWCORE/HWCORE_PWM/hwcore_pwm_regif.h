// -----------------------------------------------------------------------------
// $Id: hwcore_pwm_regif.h,v 1.4 2020/10/21 03:33:48 ducla Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_pwm_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_PWM
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  11
// 
// %REG_CHANNEL reg_def
//   %%TITLE    name               reg_name              rsize        wsize       length      offset     init             access    support    callback
//   %%REG      PWMCTR             PWMCTR              8|16|32        32          32          0x340      0x00000000       R|W       TRUE       w
//   %%REG      PWMDT              PWMDT               8|16|32         8           8          0x344      0x00             R|W       TRUE       -
//   %%REG      VDCRCT             VDCRCT              8|16|32        32          32          0x348      0x00000000       R|W       TRUE       -
//   %%REG      VQCRCT             VQCRCT              8|16|32        32          32          0x34C      0x00000000       R|W       TRUE       -
//   %%REG      VEL                VEL                 8|16|32         -          32          0x350      0x00000000       R         TRUE       -
//   %%REG      VELSFT             VELSFT              8|16|32        32          32          0x354      0x00000000       R|W       TRUE       -
//   %%REG      DECVELG            DECVELG             8|16|32        32          32          0x358      0x00000000       R|W       TRUE       -
//   %%REG      DECFLUX            DECFLUX             8|16|32        32          32          0x35C      0x00000000       R|W       TRUE       -
//   %%REG      DECLD              DECLD               8|16|32        32          32          0x360      0x00000000       R|W       TRUE       -
//   %%REG      DECLQ              DECLQ               8|16|32        32          32          0x364      0x00000000       R|W       TRUE       -
//   %%REG      VD2MAX             VD2MAX              8|16|32        32          32          0x368      0x00000000       R|W       TRUE       -
//   %%REG      VQ2MAX             VQ2MAX              8|16|32        32          32          0x36C      0x00000000       R|W       TRUE       -
//   %%REG      VD2                VD2                 8|16|32        32          32          0x370      0x00000000       R|W       TRUE       -
//   %%REG      VQ2                VQ2                 8|16|32        32          32          0x374      0x00000000       R|W       TRUE       -
//   %%REG      GTHT               GTHT                8|16|32        32          32          0x378      0x00000000       R|W       TRUE       -
//   %%REG      PHI                PHI                 8|16|32        16          16          0x37C      0x0000           R|W       TRUE       -
//   %%REG      THTFORESFT         THTFORESFT          8|16|32        16          16          0x37E      0x0000           R|W       TRUE       -
//   %%REG      THTEPWM            THTEPWM             8|16|32        16          16          0x380      0x0000           R|W       TRUE       -
//   %%REG      THTVSFT            THTVSFT             8|16|32        16          16          0x382      0x0000           R|W       TRUE       -
//   %%REG      VDQSFT             VDQSFT              8|16|32        32          32          0x384      0x00000000       R|W       TRUE       -
//   %%REG      SR23               SR23                8|16|32        32          32          0x388      0x0000D106       R|W       TRUE       -
//   %%REG      VU                 VU                  8|16|32        32          32          0x38C      0x00000000       R|W       TRUE       -
//   %%REG      VV                 VV                  8|16|32        32          32          0x390      0x00000000       R|W       TRUE       -
//   %%REG      VW                 VW                  8|16|32        32          32          0x394      0x00000000       R|W       TRUE       -
//   %%REG      TMAX               TMAX                8|16|32        32          32          0x398      0x00000000       R|W       TRUE       -
//   %%REG      VU0                VU0                 8|16|32        32          32          0x39C      0x00000000       R|W       TRUE       -
//   %%REG      VV0                VV0                 8|16|32        32          32          0x3A0      0x00000000       R|W       TRUE       -
//   %%REG      VW0                VW0                 8|16|32        32          32          0x3A4      0x00000000       R|W       TRUE       -
//   %%REG      PWMK1              PWMK1               8|16|32        32          32          0x3A8      0x00000000       R|W       TRUE       -
//   %%REG      VOLV               VOLV                8|16|32        16          16          0x3AC      0x0000           R|W       TRUE       -
//   %%REG      VU1                VU1                 8|16|32        32          32          0x3B0      0x00000000       R|W       TRUE       -
//   %%REG      VV1                VV1                 8|16|32        32          32          0x3B4      0x00000000       R|W       TRUE       -
//   %%REG      VW1                VW1                 8|16|32        32          32          0x3B8      0x00000000       R|W       TRUE       -
//   %%REG      VUOFS              VUOFS               8|16|32        16          16          0x3BC      0x0000           R|W       TRUE       -
//   %%REG      VVOFS              VVOFS               8|16|32        16          16          0x3BE      0x0000           R|W       TRUE       -
//   %%REG      VWOFS              VWOFS               8|16|32        16          16          0x3C0      0x0000           R|W       TRUE       -
//   %%REG      VU2                VU2                 8|16|32        32          32          0x3C4      0x00000000       R|W       TRUE       -
//   %%REG      VV2                VV2                 8|16|32        32          32          0x3C8      0x00000000       R|W       TRUE       -
//   %%REG      VW2                VW2                 8|16|32        32          32          0x3CC      0x00000000       R|W       TRUE       -
//   %%REG      DTUL               DTUL                8|16|32        32          32          0x3D0      0x00000000       R|W       TRUE       -
//   %%REG      DTLL               DTLL                8|16|32        32          32          0x3D4      0x00000000       R|W       TRUE       -
//   %%REG      VUFIX              VUFIX               8|16|32        32          32          0x3D8      0x00000000       R|W       TRUE       -
//   %%REG      VVFIX              VVFIX               8|16|32        32          32          0x3DC      0x00000000       R|W       TRUE       -
//   %%REG      VWFIX              VWFIX               8|16|32        32          32          0x3E0      0x00000000       R|W       TRUE       -
//   %%REG      PWMK2              PWMK2               8|16|32        32          32          0x3E4      0x00000000       R|W       TRUE       -
//   %%REG      DTT                DTT                 8|16|32        32          32          0x3E8      0x00000FFF       R|W       TRUE       -
//   %%REG      CARR               CARR                8|16|32        32          32          0x3EC      0x00007FFF       R|W       TRUE       -
//   %%REG      CARRBUF            CARRBUF             8|16|32        32          32          0x3F0      0x0000FFFF       R|W       TRUE       -
//   %%REG      PWMU0              PWMU0               8|16|32        32          32          0x3F4      0x00000000       R|W       TRUE       -
//   %%REG      PWMV0              PWMV0               8|16|32        32          32          0x3F8      0x00000000       R|W       TRUE       -
//   %%REG      PWMW0              PWMW0               8|16|32        32          32          0x3FC      0x00000000       R|W       TRUE       -
//   %%REG      DTOTH              DTOTH               8|16|32        32          32          0x400      0x7FFFFFFF       R|W       TRUE       -
//   %%REG      DTOPV              DTOPV               8|16|32        32          32          0x404      0x00000000       R|W       TRUE       -
//   %%REG      DTONV              DTONV               8|16|32        32          32          0x408      0x00000000       R|W       TRUE       -
//   %%REG      PWMUDT             PWMUDT              8|16|32        32          32          0x40C      0x00000000       R|W       TRUE       -
//   %%REG      PWMVDT             PWMVDT              8|16|32        32          32          0x410      0x00000000       R|W       TRUE       -
//   %%REG      PWMWDT             PWMWDT              8|16|32        32          32          0x414      0x00000000       R|W       TRUE       -
//   %%REG      PWMUL              PWMUL               8|16|32        32          32          0x418      0x00000000       R|W       TRUE       -
//   %%REG      PWMLL              PWMLL               8|16|32        32          32          0x41C      0x00000000       R|W       TRUE       -
//   %%REG      PWMUIP             PWMUIP              8|16|32        32          32          0x420      0x00000000       R|W       TRUE       -
//   %%REG      PWMVIP             PWMVIP              8|16|32        32          32          0x424      0x00000000       R|W       TRUE       -
//   %%REG      PWMWIP             PWMWIP              8|16|32        32          32          0x428      0x00000000       R|W       TRUE       -
//   %%REG      PWMU               PWMU                8|16|32        32          32          0x42C      0x000047FF       R|W       TRUE       -
//   %%REG      PWMV               PWMV                8|16|32        32          32          0x430      0x000047FF       R|W       TRUE       -
//   %%REG      PWMW               PWMW                8|16|32        32          32          0x434      0x000047FF       R|W       TRUE       -
// 
// %REG_NAME PWMCTR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   FPWMIBTH         20      20     0x0       R|W      TRUE     -
//     %%BIT   SETDTO           15      15     0x0       R|W      TRUE     -
//     %%BIT   PWMOP            14      13     0x0       R|W      TRUE     w
//     %%BIT   SETDEC           12      12     0x0       R|W      TRUE     -
//     %%BIT   DECIDQ           11      10     0x0       R|W      TRUE     -
//     %%BIT   SETVEL            9       9     0x0       R|W      TRUE     -
//     %%BIT   VDQSEL            8       8     0x0       R|W      TRUE     -
//     %%BIT   PWMSEL            7       7     0x0       R|W      TRUE     -
//     %%BIT   SHIPWM            6       6     0x0       R|W      TRUE     -
//     %%BIT   FLININIP          5       4     0x0       R|W      TRUE     -
//     %%BIT   SETHARM           3       1     0x0       R|W      TRUE     -
//     %%BIT   SETPWM            0       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   PWMDT             0       0     0x0       R|W      TRUE     w
// 
// %REG_NAME VDCRCT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQCRCT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VEL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R        TRUE     -
// 
// %REG_NAME VELSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECVELG
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECFLUX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECLD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DECLQ
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VD2MAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQ2MAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VD2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VQ2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME GTHT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PHI
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTFORESFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTEPWM
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME THTVSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             11       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VDQSFT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME SR23
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0000D106      R|W      TRUE     -
// 
// %REG_NAME VU
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME TMAX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMK1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VOLV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW1
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VUOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VVOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VWOFS
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             15       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VU2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VV2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VW2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTUL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTLL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VUFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VVFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME VWFIX
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMK2
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0xFFF      R|W      TRUE     -
// 
// %REG_NAME CARR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x7FFF      R|W      TRUE     -
// 
// %REG_NAME CARRBUF
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0xFFFF      R|W      TRUE     -
// 
// %REG_NAME PWMU0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMV0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMW0
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTOTH
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             30       0     0x7FFFFFFF      R|W      TRUE     -
// 
// %REG_NAME DTOPV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME DTONV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMVDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMWDT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             31       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMLL
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMUIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMVIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMWIP
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x0       R|W      TRUE     -
// 
// %REG_NAME PWMU
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
// 
// %REG_NAME PWMV
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
// 
// %REG_NAME PWMW
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   DATA             17       0     0x47FF      R|W      TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_pwm_regif.h
/// @brief Register IF class of model HWCORE_PWM
/// $Id: hwcore_pwm_regif.h,v 1.4 2020/10/21 03:33:48 ducla Exp $
/// $Date: 2020/10/21 03:33:48 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_PWM_REGIF_H__
#define __HWCORE_PWM_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_PWM model
class Chwcore_pwm_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_pwm_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_pwm_regif(std::string name, uint buswidth);
    ~Chwcore_pwm_regif();

protected:
    vpcl::re_register *PWMCTR    ;
    vpcl::re_register *PWMDT     ;
    vpcl::re_register *VDCRCT    ;
    vpcl::re_register *VQCRCT    ;
    vpcl::re_register *VEL       ;
    vpcl::re_register *VELSFT    ;
    vpcl::re_register *DECVELG   ;
    vpcl::re_register *DECFLUX   ;
    vpcl::re_register *DECLD     ;
    vpcl::re_register *DECLQ     ;
    vpcl::re_register *VD2MAX    ;
    vpcl::re_register *VQ2MAX    ;
    vpcl::re_register *VD2       ;
    vpcl::re_register *VQ2       ;
    vpcl::re_register *GTHT      ;
    vpcl::re_register *PHI       ;
    vpcl::re_register *THTFORESFT;
    vpcl::re_register *THTEPWM   ;
    vpcl::re_register *THTVSFT   ;
    vpcl::re_register *VDQSFT    ;
    vpcl::re_register *SR23      ;
    vpcl::re_register *VU        ;
    vpcl::re_register *VV        ;
    vpcl::re_register *VW        ;
    vpcl::re_register *TMAX      ;
    vpcl::re_register *VU0       ;
    vpcl::re_register *VV0       ;
    vpcl::re_register *VW0       ;
    vpcl::re_register *PWMK1     ;
    vpcl::re_register *VOLV      ;
    vpcl::re_register *VU1       ;
    vpcl::re_register *VV1       ;
    vpcl::re_register *VW1       ;
    vpcl::re_register *VUOFS     ;
    vpcl::re_register *VVOFS     ;
    vpcl::re_register *VWOFS     ;
    vpcl::re_register *VU2       ;
    vpcl::re_register *VV2       ;
    vpcl::re_register *VW2       ;
    vpcl::re_register *DTUL      ;
    vpcl::re_register *DTLL      ;
    vpcl::re_register *VUFIX     ;
    vpcl::re_register *VVFIX     ;
    vpcl::re_register *VWFIX     ;
    vpcl::re_register *PWMK2     ;
    vpcl::re_register *DTT       ;
    vpcl::re_register *CARR      ;
    vpcl::re_register *CARRBUF   ;
    vpcl::re_register *PWMU0     ;
    vpcl::re_register *PWMV0     ;
    vpcl::re_register *PWMW0     ;
    vpcl::re_register *DTOTH     ;
    vpcl::re_register *DTOPV     ;
    vpcl::re_register *DTONV     ;
    vpcl::re_register *PWMUDT    ;
    vpcl::re_register *PWMVDT    ;
    vpcl::re_register *PWMWDT    ;
    vpcl::re_register *PWMUL     ;
    vpcl::re_register *PWMLL     ;
    vpcl::re_register *PWMUIP    ;
    vpcl::re_register *PWMVIP    ;
    vpcl::re_register *PWMWIP    ;
    vpcl::re_register *PWMU      ;
    vpcl::re_register *PWMV      ;
    vpcl::re_register *PWMW      ;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_PWMCTR_PWMOP(RegCBstr str) = 0;
    virtual void cb_PWMDT_PWMDT(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_pwm_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_pwm_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_pwm_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_pwm_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_PWM_REGIF_H__
