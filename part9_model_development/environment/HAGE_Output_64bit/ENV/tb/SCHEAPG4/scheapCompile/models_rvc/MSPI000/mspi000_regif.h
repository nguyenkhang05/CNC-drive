// -----------------------------------------------------------------------------
// $Id: mspi000_regif.h,v 1.5 2020/03/11 00:52:43 ducla Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : mspi000_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE MSPI000
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         12
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name            reg_name        wsize     rsize    length   offset   factor_start  factor_end  factor_index factor_step     access  init        support     callback
//     %%REG    -      MSPInCTL0       MSPInCTL0       8|16|32   8|16|32  8        0x0      -             -           -            -               R|W     0x00        TRUE        W
//     %%REG    -      MSPInCTL1       MSPInCTL1       8|16|32   8|16|32  32       0x4      -             -           -            -               R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInCTL2       MSPInCTL2       8|16|32   8|16|32  8        0x8      -             -           -            -                R|W     0x00        TRUE        W
//     %%REG    -      MSPInSTR0       MSPInSTR0       -         8|16|32  8        0x10     -             -           -            -                R          0x00        TRUE        -
//     %%REG    -      MSPInCSTRm      MSPInCSTRm      -         8|16|32  16       0xD8     0             15          -            0x80             R          0x0000      TRUE        -
//     %%REG    -      MSPInCSTSm      MSPInCSTSm      8|16|32   8|16|32  8        0xB4     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCSTCm      MSPInCSTCm      8|16|32   8|16|32  8        0xB8     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCFGm0      MSPInCFGm0      8|16|32   8|16|32  32       0x80     0             15          -            0x80             R|W     0x00700000  TRUE        W
//     %%REG    -      MSPInCFGm1      MSPInCFGm1      8|16|32   8|16|32  32       0x84     0             15          -            0x80             R|W     0x01000000  TRUE        W
//     %%REG    -      MSPInCFGm2      MSPInCFGm2      8|16|32   8|16|32  16       0x88     0             15          -            0x80             R|W     0x0020      TRUE        W
//     %%REG    -      MSPInCFGm3      MSPInCFGm3      8|16|32   8|16|32  16       0x8C     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInCFGm4      MSPInCFGm4      8|16|32   8|16|32  32       0x90     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInRASTADm    MSPInRASTADm    8|16|32   8|16|32  16       0xA8     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInSEUPm      MSPInSEUPm      8|16|32   8|16|32  16       0x98     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInHOLDm      MSPInHOLDm      8|16|32   8|16|32  16       0x9C     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInIDLEm      MSPInIDLEm      8|16|32   8|16|32  16       0xA0     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInINDAm      MSPInINDAm      8|16|32   8|16|32  16       0xA4     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInCFSETm     MSPInCFSETm     8|16|32   8|16|32  16       0xAC     0             15          -            0x80             R|W     0x0001      TRUE        W
//     %%REG    -      MSPInSSELm      MSPInSSELm      8|16|32   8|16|32  16       0xBC     0             15          -            0x80             R|W     0x0000      TRUE        W
//     %%REG    -      MSPInTXDAm0     MSPInTXDAm0     8|16|32   8|16|32  32       0xC0     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInFRERSTm    MSPInFRERSTm    -         8|16|32  8        0xCC     0             15          -            0x80             R          0x00        TRUE        -
//     %%REG    -      MSPInFRERSTCm   MSPInFRERSTCm   -         8|16|32  8        0xE4     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInRXDAm0     MSPInRXDAm0     8|16|32   8|16|32  32       0xD0     0             15          -            0x80             R       0x00000000  TRUE        R
//     %%REG    -      MSPInSSTXm      MSPInSSTXm      8|16|32   8|16|32  32       0xB0     0             15          -            0x80             R|W     0x00000000  TRUE        W
//     %%REG    -      MSPInFSRXm      MSPInFSRXm      -         8|16|32  32       0xE0     0             15          -            0x80             R       0x00000000  TRUE        R
//     %%REG    -      MSPInCESTm      MSPInCESTm      -         8|16|32  8        0xE8     0             15          -            0x80             R       0x00        TRUE        -
//     %%REG    -      MSPInCESTCm     MSPInCESTCm     8|16|32   8|16|32  8        0xEC     0             15          -            0x80             R|W1:0  0x00        TRUE        W
//     %%REG    -      MSPInCFCNTm     MSPInCFCNTm     -         8|16|32  32       0xDC     0             15          -            0x80             R       0x00000000  TRUE        -
//         
// 
// %REG_NAME    MSPInCTL0
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInEN                0        0            0            R|W            TRUE        W        
// 
// %REG_NAME   MSPInCTL1    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInMSSEL            31        31            0            R|W            TRUE        W        
//     %%BIT        MSPInCSIE            29        29            0            R|W            TRUE        -        
//     %%BIT        MSPInSAMP            28        28            0            R|W            TRUE        -        
//     %%BIT        MSPInCKR            27        27            0            R|W            TRUE        -        
//     %%BIT        MSPInSOLS            25        24            0            R|W            TRUE        -        
//     %%BIT        MSPInCSP            14        0            0            R|W            TRUE        -        
//             
// %REG_NAME   MSPInCTL2    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCS            1        1            0            R|W            TRUE        -        
//     %%BIT        MSPInLBM            0        0            0            R|W            TRUE        W        
//         
// %REG_NAME   MSPInSTR0    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCNUMF            7        4            0            R            TRUE        -        
//     %%BIT        MSPInCSF            0        0            0            R            TRUE        -        
//             
// %REG_NAME   MSPInCSTRm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInFIRXNm            13        8            0            R            TRUE        -        
//     %%BIT        MSPInTXRQFm            5        5            0            R            TRUE        -        
//     %%BIT        MSPInRXRQFm            4        4            0            R            TRUE        -        
//     %%BIT        MSPInACTFm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInCHENm            0        0            0            R            TRUE        -
//     
// %REG_NAME   MSPInCSTSm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInACTFSm            1        1            0            R|W1:0        TRUE        W        
//     %%BIT        MSPInCHENSm            0        0            0            R|W1:0        TRUE        -        
//     
// %REG_NAME   MSPInCSTCm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCHENCm            0        0            0            R|W1:0        TRUE        W    
// 
//     
// %REG_NAME   MSPInCFGm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInTXEm            29        29            0            R|W            TRUE        W        
//     %%BIT        MSPInRXEm            28        28            0            R|W            TRUE        -        
//     %%BIT        MSPInMDm            25        24            0            R|W            TRUE        -        
//     %%BIT        MSPInPRIOm            22        20            7            R|W            TRUE        -        
//     %%BIT        MSPInLOCKm            16        16            0            R|W            TRUE        -        
//     %%BIT        MSPInFCCEm            12        12            0            R|W            TRUE        -        
//     %%BIT        MSPInIEREm            3        3            0            R|W            TRUE        -        
//     %%BIT        MSPInIFEEm            2        2            0            R|W            TRUE        -        
//     %%BIT        MSPInIRXEm            1        1            0            R|W            TRUE        -        
//     %%BIT        MSPInITXEm            0        0            0            R|W            TRUE        -        
// 
// %REG_NAME   MSPInCFGm1        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCPOLm            25        25            0            R|W            TRUE        W        
//     %%BIT        MSPInCPHAm            24        24            1            R|W            TRUE        -        
//     %%BIT        MSPInDIRm            20        20            0            R|W            TRUE        -        
//     %%BIT        MSPInICLSm            18        18            0            R|W            TRUE        -        
//     %%BIT        MSPInFIDLm            17        17            0            R|W            TRUE        -        
//     %%BIT        MSPInCSRIm            16        16            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFCMm            11        11            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFSm            9        9            0            R|W            TRUE        -        
//     %%BIT        MSPInSAFEm            8        8            0            R|W            TRUE        -        
//     %%BIT        MSPInPSm            5        4            0            R|W            TRUE        -        
//     %%BIT        MSPInDECHKm            0        0            0            R|W            TRUE        -        
// 
// %REG_NAME   MSPInCFGm2        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInFLENm            7        0            0x20        R|W            TRUE        W        
//         
// %REG_NAME   MSPInCFGm3        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInPRCSm            9        8            0            R|W            TRUE        W        
//     %%BIT        MSPInCDIVm            4        0            1            R|W            TRUE        -        
//     
// %REG_NAME   MSPInCFGm4        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInHWTSm            21        16            0            R|W            TRUE        W         
//     %%BIT        MSPInSIZEm            1        0            0            R|W            TRUE        -        
//      
//      
// %REG_NAME   MSPInRASTADm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInRASTAD            11        2            0            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInSEUPm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInSEUPm            11        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInHOLDm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInHOLDm            11        0            1            R|W            TRUE        W        
// 
//         
// %REG_NAME   MSPInIDLEm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInIDLEm            11        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInINDAm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInINDAm            11        0            0            R|W         TRUE        W        
// 
//     
// %REG_NAME   MSPInCFSETm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCFSETm            15        0            1            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInSSELm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInJOBENm            15        15            0            R|W            TRUE        W        
//     %%BIT        MSPInCSRm            14        0            0            R|W            TRUE        -        
// 
//     
// %REG_NAME   MSPInTXDAm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInTXDAm0            31        0            0            R|W            TRUE        W        
// 
//     
// %REG_NAME   MSPInFRERSTm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSTm        4        4            0            R            TRUE        -        
//     %%BIT        MSPInCEFSTm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInPEFSTm            0        0            0            R            TRUE        -        
//     
//     
// %REG_NAME   MSPInFRERSTCm    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSCm        4        4            0            R|W1:0        TRUE        W    
//     %%BIT        MSPInCEFSCm            1        1            0            R|W1:0        TRUE        -    
//     %%BIT        MSPInPEFSCm            0        0            0            R|W1:0        TRUE        -    
// 
//     
// %REG_NAME   MSPInRXDAm0        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInRXDAm0            31        0            0            R            TRUE        R        
// 
//         
// %REG_NAME   MSPInSSTXm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInJOBENm            31        31            0            R|W            TRUE        -        
//     %%BIT        MSPInCSRm            30        16            0            R|W            TRUE        -        
//     %%BIT        MSPInTXDAm0            15        0            0            R|W            TRUE        W        
// 
// 
// %REG_NAME   MSPInFSRXm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInDCEFSTm        20        20            0            R            TRUE        -        
//     %%BIT        MSPInCEFSTm            17        17            0            R            TRUE        -        
//     %%BIT        MSPInPEFSTm            16        16            0            R            TRUE        -        
//     %%BIT        MSPInRXDAm0            15        0            0            R            TRUE        R        
//   
//          
// %REG_NAME   MSPInCESTm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInOVREEm            7        7            0            R            TRUE        -        
//     %%BIT        MSPInOVWREm            6        6            0            R            TRUE        -        
//     %%BIT        MSPInOVRUEm            5        5            0            R            TRUE        -        
//     %%BIT        MSPInDCEm            4        4            0            R            TRUE        -        
//     %%BIT        MSPInCEm            1        1            0            R            TRUE        -        
//     %%BIT        MSPInPEm            0        0            0            R            TRUE        -        
// 
//     
// %REG_NAME   MSPInCESTCm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInOVREECm        7        7            0            R|W1:0        TRUE        W        
//     %%BIT        MSPInOVWRECm        6        6            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInOVRUECm        5        5            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInDCECm            4        4            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInCECm            1        1            0            R|W1:0        TRUE        -        
//     %%BIT        MSPInPECm            0        0            0            R|W1:0        TRUE        -        
// 
//         
// %REG_NAME   MSPInCFCNTm        
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        MSPInCFCNTm            15        0            0            R            TRUE        -        
////////////////////////////////////////////////////////////////////////////////
/// @file mspi000_regif.h
/// @brief Register IF class of model MSPI000
/// $Id: mspi000_regif.h,v 1.5 2020/03/11 00:52:43 ducla Exp $
/// $Date: 2020/03/11 00:52:43 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#ifndef __MSPI000_REGIF_H__
#define __MSPI000_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of MSPI000 model
class Cmspi000_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_MSPInCSTRm    = 16,
        emNUM_MSPInCSTSm    = 16,
        emNUM_MSPInCSTCm    = 16,
        emNUM_MSPInCFGm0    = 16,
        emNUM_MSPInCFGm1    = 16,
        emNUM_MSPInCFGm2    = 16,
        emNUM_MSPInCFGm3    = 16,
        emNUM_MSPInCFGm4    = 16,
        emNUM_MSPInRASTADm  = 16,
        emNUM_MSPInSEUPm    = 16,
        emNUM_MSPInHOLDm    = 16,
        emNUM_MSPInIDLEm    = 16,
        emNUM_MSPInINDAm    = 16,
        emNUM_MSPInCFSETm   = 16,
        emNUM_MSPInSSELm    = 16,
        emNUM_MSPInTXDAm0   = 16,
        emNUM_MSPInFRERSTm  = 16,
        emNUM_MSPInFRERSTCm = 16,
        emNUM_MSPInRXDAm0   = 16,
        emNUM_MSPInSSTXm    = 16,
        emNUM_MSPInFSRXm    = 16,
        emNUM_MSPInCESTm    = 16,
        emNUM_MSPInCESTCm   = 16,
        emNUM_MSPInCFCNTm   = 16
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cmspi000_regif(std::string name, uint buswidth, uint ch_num, uint cs_num);
    ~Cmspi000_regif();

protected:
    vpcl::re_register *MSPInCTL0    ;
    vpcl::re_register *MSPInCTL1    ;
    vpcl::re_register *MSPInCTL2    ;
    vpcl::re_register *MSPInSTR0    ;
    vpcl::re_register *MSPInCSTRm   [16];
    vpcl::re_register *MSPInCSTSm   [16];
    vpcl::re_register *MSPInCSTCm   [16];
    vpcl::re_register *MSPInCFGm0   [16];
    vpcl::re_register *MSPInCFGm1   [16];
    vpcl::re_register *MSPInCFGm2   [16];
    vpcl::re_register *MSPInCFGm3   [16];
    vpcl::re_register *MSPInCFGm4   [16];
    vpcl::re_register *MSPInRASTADm [16];
    vpcl::re_register *MSPInSEUPm   [16];
    vpcl::re_register *MSPInHOLDm   [16];
    vpcl::re_register *MSPInIDLEm   [16];
    vpcl::re_register *MSPInINDAm   [16];
    vpcl::re_register *MSPInCFSETm  [16];
    vpcl::re_register *MSPInSSELm   [16];
    vpcl::re_register *MSPInTXDAm0  [16];
    vpcl::re_register *MSPInFRERSTm [16];
    vpcl::re_register *MSPInFRERSTCm[16];
    vpcl::re_register *MSPInRXDAm0  [16];
    vpcl::re_register *MSPInSSTXm   [16];
    vpcl::re_register *MSPInFSRXm   [16];
    vpcl::re_register *MSPInCESTm   [16];
    vpcl::re_register *MSPInCESTCm  [16];
    vpcl::re_register *MSPInCFCNTm  [16];

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_MSPInCTL0_   ;
    scml2::reg<uint>      *CW_MSPInCTL2_   ;
    scml2::reg<uint>      *CW_MSPInSTR0_   ;
    scml2::reg<uint>      *CW_MSPInCFGm2_  [16];
    scml2::reg<uint>      *CW_MSPInCFGm3_  [16];
    scml2::reg<uint>      *CW_MSPInSEUPm_  [16];
    scml2::reg<uint>      *CW_MSPInHOLDm_  [16];
    scml2::reg<uint>      *CW_MSPInIDLEm_  [16];
    scml2::reg<uint>      *CW_MSPInINDAm_  [16];
    scml2::reg<uint>      *CW_MSPInRASTADm_[16];
    scml2::reg<uint>      *CW_MSPInCFSETm_ [16];
    scml2::reg<uint>      *CW_MSPInCSTSm_  [16];
    scml2::reg<uint>      *CW_MSPInCSTCm_  [16];
    scml2::reg<uint>      *CW_MSPInSSELm_  [16];
    scml2::reg<uint>      *CW_MSPInFRERSTm_[16];
    scml2::reg<uint>      *CW_MSPInCSTRm_  [16];
    scml2::reg<uint>      *CW_MSPInFRERSTCm_[16];
    scml2::reg<uint>      *CW_MSPInCESTm_  [16];
    scml2::reg<uint>      *CW_MSPInCESTCm_ [16];
    scml2::bitfield<uint> *CW_MSPInCTL0    ;
    scml2::reg<uint>      *CW_MSPInCTL1    ;
    scml2::bitfield<uint> *CW_MSPInCTL2    ;
    scml2::bitfield<uint> *CW_MSPInSTR0    ;
    scml2::bitfield<uint> *CW_MSPInCSTRm   [16];
    scml2::bitfield<uint> *CW_MSPInCSTSm   [16];
    scml2::bitfield<uint> *CW_MSPInCSTCm   [16];
    scml2::reg<uint>      *CW_MSPInCFGm0   [16];
    scml2::reg<uint>      *CW_MSPInCFGm1   [16];
    scml2::bitfield<uint> *CW_MSPInCFGm2   [16];
    scml2::bitfield<uint> *CW_MSPInCFGm3   [16];
    scml2::reg<uint>      *CW_MSPInCFGm4   [16];
    scml2::bitfield<uint> *CW_MSPInRASTADm [16];
    scml2::bitfield<uint> *CW_MSPInSEUPm   [16];
    scml2::bitfield<uint> *CW_MSPInHOLDm   [16];
    scml2::bitfield<uint> *CW_MSPInIDLEm   [16];
    scml2::bitfield<uint> *CW_MSPInINDAm   [16];
    scml2::bitfield<uint> *CW_MSPInCFSETm  [16];
    scml2::bitfield<uint> *CW_MSPInSSELm   [16];
    scml2::reg<uint>      *CW_MSPInTXDAm0  [16];
    scml2::bitfield<uint> *CW_MSPInFRERSTm [16];
    scml2::bitfield<uint> *CW_MSPInFRERSTCm[16];
    scml2::reg<uint>      *CW_MSPInRXDAm0  [16];
    scml2::reg<uint>      *CW_MSPInSSTXm   [16];
    scml2::reg<uint>      *CW_MSPInFSRXm   [16];
    scml2::bitfield<uint> *CW_MSPInCESTm   [16];
    scml2::bitfield<uint> *CW_MSPInCESTCm  [16];
    scml2::reg<uint>      *CW_MSPInCFCNTm  [16];
    #endif

    uint MSPInCTL0_MSPInEN;
    uint MSPInCTL1_MSPInMSSEL;
    uint MSPInCTL1_MSPInCSIE;
    uint MSPInCTL1_MSPInSAMP;
    uint MSPInCTL1_MSPInCKR;
    uint MSPInCTL1_MSPInSOLS;
    uint MSPInCTL1_MSPInCSP;
    uint MSPInCTL2_MSPInDCS;
    uint MSPInCTL2_MSPInLBM;
    uint MSPInSTR0_MSPInCNUMF;
    uint MSPInSTR0_MSPInCSF;
    uint MSPInCSTRm_MSPInFIRXNm[16];
    uint MSPInCSTRm_MSPInTXRQFm[16];
    uint MSPInCSTRm_MSPInRXRQFm[16];
    uint MSPInCSTRm_MSPInACTFm[16];
    uint MSPInCSTRm_MSPInCHENm[16];
    uint MSPInCSTSm_MSPInACTFSm[16];
    uint MSPInCSTSm_MSPInCHENSm[16];
    uint MSPInCSTCm_MSPInCHENCm[16];
    uint MSPInCFGm0_MSPInTXEm[16];
    uint MSPInCFGm0_MSPInRXEm[16];
    uint MSPInCFGm0_MSPInMDm[16];
    uint MSPInCFGm0_MSPInPRIOm[16];
    uint MSPInCFGm0_MSPInLOCKm[16];
    uint MSPInCFGm0_MSPInFCCEm[16];
    uint MSPInCFGm0_MSPInIEREm[16];
    uint MSPInCFGm0_MSPInIFEEm[16];
    uint MSPInCFGm0_MSPInIRXEm[16];
    uint MSPInCFGm0_MSPInITXEm[16];
    uint MSPInCFGm1_MSPInCPOLm[16];
    uint MSPInCFGm1_MSPInCPHAm[16];
    uint MSPInCFGm1_MSPInDIRm[16];
    uint MSPInCFGm1_MSPInICLSm[16];
    uint MSPInCFGm1_MSPInFIDLm[16];
    uint MSPInCFGm1_MSPInCSRIm[16];
    uint MSPInCFGm1_MSPInSAFCMm[16];
    uint MSPInCFGm1_MSPInSAFSm[16];
    uint MSPInCFGm1_MSPInSAFEm[16];
    uint MSPInCFGm1_MSPInPSm[16];
    uint MSPInCFGm1_MSPInDECHKm[16];
    uint MSPInCFGm2_MSPInFLENm[16];
    uint MSPInCFGm3_MSPInPRCSm[16];
    uint MSPInCFGm3_MSPInCDIVm[16];
    uint MSPInCFGm4_MSPInHWTSm[16];
    uint MSPInCFGm4_MSPInSIZEm[16];
    uint MSPInRASTADm_MSPInRASTAD[16];
    uint MSPInSEUPm_MSPInSEUPm[16];
    uint MSPInHOLDm_MSPInHOLDm[16];
    uint MSPInIDLEm_MSPInIDLEm[16];
    uint MSPInINDAm_MSPInINDAm[16];
    uint MSPInCFSETm_MSPInCFSETm[16];
    uint MSPInSSELm_MSPInJOBENm[16];
    uint MSPInSSELm_MSPInCSRm[16];
    uint MSPInTXDAm0_MSPInTXDAm0[16];
    uint MSPInFRERSTm_MSPInDCEFSTm[16];
    uint MSPInFRERSTm_MSPInCEFSTm[16];
    uint MSPInFRERSTm_MSPInPEFSTm[16];
    uint MSPInFRERSTCm_MSPInDCEFSCm[16];
    uint MSPInFRERSTCm_MSPInCEFSCm[16];
    uint MSPInFRERSTCm_MSPInPEFSCm[16];
    uint MSPInRXDAm0_MSPInRXDAm0[16];
    uint MSPInSSTXm_MSPInJOBENm[16];
    uint MSPInSSTXm_MSPInCSRm[16];
    uint MSPInSSTXm_MSPInTXDAm0[16];
    uint MSPInFSRXm_MSPInDCEFSTm[16];
    uint MSPInFSRXm_MSPInCEFSTm[16];
    uint MSPInFSRXm_MSPInPEFSTm[16];
    uint MSPInFSRXm_MSPInRXDAm0[16];
    uint MSPInCESTm_MSPInOVREEm[16];
    uint MSPInCESTm_MSPInOVWREm[16];
    uint MSPInCESTm_MSPInOVRUEm[16];
    uint MSPInCESTm_MSPInDCEm[16];
    uint MSPInCESTm_MSPInCEm[16];
    uint MSPInCESTm_MSPInPEm[16];
    uint MSPInCESTCm_MSPInOVREECm[16];
    uint MSPInCESTCm_MSPInOVWRECm[16];
    uint MSPInCESTCm_MSPInOVRUECm[16];
    uint MSPInCESTCm_MSPInDCECm[16];
    uint MSPInCESTCm_MSPInCECm[16];
    uint MSPInCESTCm_MSPInPECm[16];
    uint MSPInCFCNTm_MSPInCFCNTm[16];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_MSPInCTL0_MSPInEN(RegCBstr str) = 0;
    virtual void cb_MSPInCTL1_MSPInMSSEL(RegCBstr str) = 0;
    virtual void cb_MSPInCTL2_MSPInLBM(RegCBstr str) = 0;
    virtual void cb_MSPInCSTSm_MSPInACTFSm(RegCBstr str) = 0;
    virtual void cb_MSPInCSTCm_MSPInCHENCm(RegCBstr str) = 0;
    virtual void cb_MSPInCFGm0_MSPInTXEm(RegCBstr str) = 0;
    virtual void cb_MSPInCFGm1_MSPInCPOLm(RegCBstr str) = 0;
    virtual void cb_MSPInCFGm2_MSPInFLENm(RegCBstr str) = 0;
    virtual void cb_MSPInCFGm3_MSPInPRCSm(RegCBstr str) = 0;
    virtual void cb_MSPInCFGm4_MSPInHWTSm(RegCBstr str) = 0;
    virtual void cb_MSPInRASTADm_MSPInRASTAD(RegCBstr str) = 0;
    virtual void cb_MSPInSEUPm_MSPInSEUPm(RegCBstr str) = 0;
    virtual void cb_MSPInHOLDm_MSPInHOLDm(RegCBstr str) = 0;
    virtual void cb_MSPInIDLEm_MSPInIDLEm(RegCBstr str) = 0;
    virtual void cb_MSPInINDAm_MSPInINDAm(RegCBstr str) = 0;
    virtual void cb_MSPInCFSETm_MSPInCFSETm(RegCBstr str) = 0;
    virtual void cb_MSPInSSELm_MSPInJOBENm(RegCBstr str) = 0;
    virtual void cb_MSPInTXDAm0_MSPInTXDAm0(RegCBstr str) = 0;
    virtual void cb_MSPInFRERSTCm_MSPInDCEFSCm(RegCBstr str) = 0;
    virtual void cb_MSPInRXDAm0_MSPInRXDAm0(RegCBstr str) = 0;
    virtual void cb_MSPInSSTXm_MSPInTXDAm0(RegCBstr str) = 0;
    virtual void cb_MSPInFSRXm_MSPInRXDAm0(RegCBstr str) = 0;
    virtual void cb_MSPInCESTCm_MSPInOVREECm(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cmspi000_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cmspi000_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;
    uint mCh_num;
    uint mCs_num;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__MSPI000_REG_DEF_H__
