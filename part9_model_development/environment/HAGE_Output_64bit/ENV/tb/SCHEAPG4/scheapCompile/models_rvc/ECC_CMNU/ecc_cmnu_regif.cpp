// -----------------------------------------------------------------------------
// $Id: ecc_cmnu_regif.cpp,v 1.3 2015/11/06 02:01:36 ngankimtran2 Exp $
//
// Copyright(c) 2014 - 2015 Renesas Electronics Corporation
// Copyright(c) 2014 - 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : input/ecccmnu_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECC_CMNU
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE     group   name        reg_name     wsize    rsize    length   offset  access   init  support  callback
//     %%REG       -       ECCCTL      ECCCTL         16|32  8|16|32  32       0x000   W|R       0    TRUE     -
//     %%REG       -       ERRINT      ERRINT       8|16|32  8|16|32  32       0x004   W|R       0    TRUE     -
//     %%REG       -       STCLR       STCLR        8|16|32  -        32       0x008   W         0    TRUE     -
//     %%REG       -       OVFSTR      OVFSTR       -        8|16|32  32       0x00C   R         0    TRUE     -
//     %%REG       -       ERSTR1ST    ERSTR1ST     -        8|16|32  32       0x010   R         0    TRUE     -
//     %%REG       -       EADR1ST0    EADR1ST0     -        8|16|32  32       0x050   R         0    TRUE     -
//     %%REG       -       EADR1ST1    EADR1ST1     -        8|16|32  32       0x054   R         0    TRUE     -
//     %%REG       -       EADR1ST2    EADR1ST2     -        8|16|32  32       0x058   R         0    TRUE     -
//     %%REG       -       EADR1ST3    EADR1ST3     -        8|16|32  32       0x05C   R         0    TRUE     -
//     %%REG       -       STSTCTL     STSTCTL        16|32  8|16|32  32       0x150   W|R       0    TRUE     -
// 
// %REG_NAME ECCCTL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PROT1       15     15      0    W|R     TRUE     -
//     %%BIT    PROT0       14     14      0    W|R     TRUE     -
//     %%BIT    ASECDIS      3      3      0    W|R     TRUE     -
//     %%BIT    AECCDIS      2      2      0    W|R     TRUE     -
//     %%BIT    SECDIS       1      1      0    W|R     TRUE     -
//     %%BIT    ECCDIS       0      0      0    W|R     TRUE     W
// 
// %REG_NAME ERRINT
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EOVFIE       6      6      0    W|R     TRUE     -
//     %%BIT    ADEDIE       5      5      0    W|R     TRUE     -
//     %%BIT    ASEDIE       4      4      0    W|R     TRUE     -
//     %%BIT    PBEIE        3      3      0    W|R     TRUE     -
//     %%BIT    APEIE        2      2      0    W|R     TRUE     -
//     %%BIT    DEDIE        1      1      0    W|R     TRUE     -
//     %%BIT    SEDIE        0      0      0    W|R     TRUE     -
// 
// %REG_NAME STCLR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    STCLR3       3      3      0    W       TRUE     -
//     %%BIT    STCLR2       2      2      0    W       TRUE     -
//     %%BIT    STCLR1       1      1      0    W       TRUE     -
//     %%BIT    STCLR0       0      0      0    W       TRUE     W
// 
// %REG_NAME OVFSTR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    ERROVF3      3      3      0    R        TRUE    -
//     %%BIT    ERROVF2      2      2      0    R        TRUE    -
//     %%BIT    ERROVF1      1      1      0    R        TRUE    -
//     %%BIT    ERROVF0      0      0      0    R        TRUE    -
// 
// %REG_NAME ERSTR1ST
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    AECDEDF3    31     31      0    R       TRUE    -
//     %%BIT    AECSEDF3    30     30      0    R       TRUE    -
//     %%BIT    EXDEDF3     29     29      0    R       TRUE    -
//     %%BIT    EXSEDF3     28     28      0    R       TRUE    -
//     %%BIT    PBEF3       27     27      0    R       TRUE    -
//     %%BIT    APEF3       26     26      0    R       TRUE    -
//     %%BIT    DEDF3       25     25      0    R       TRUE    -
//     %%BIT    SEDF3       24     24      0    R       TRUE    -
//     %%BIT    AECDEDF2    23     23      0    R       TRUE    -
//     %%BIT    AECSEDF2    22     22      0    R       TRUE    -
//     %%BIT    EXDEDF2     21     21      0    R       TRUE    -
//     %%BIT    EXSEDF2     20     20      0    R       TRUE    -
//     %%BIT    PBEF2       19     19      0    R       TRUE    -
//     %%BIT    APEF2       18     18      0    R       TRUE    -
//     %%BIT    DEDF2       17     17      0    R       TRUE    -
//     %%BIT    SEDF2       16     16      0    R       TRUE    -
//     %%BIT    AECDEDF1    15     15      0    R       TRUE    -
//     %%BIT    AECSEDF1    14     14      0    R       TRUE    -
//     %%BIT    EXDEDF1     13     13      0    R       TRUE    -
//     %%BIT    EXSEDF1     12     12      0    R       TRUE    -
//     %%BIT    PBEF1       11     11      0    R       TRUE    -
//     %%BIT    APEF1       10     10      0    R       TRUE    -
//     %%BIT    DEDF1        9      9      0    R       TRUE    -
//     %%BIT    SEDF1        8      8      0    R       TRUE    -
//     %%BIT    AECDEDF0     7      7      0    R       TRUE    -
//     %%BIT    AECSEDF0     6      6      0    R       TRUE    -
//     %%BIT    EXDEDF0      5      5      0    R       TRUE    -
//     %%BIT    EXSEDF0      4      4      0    R       TRUE    -
//     %%BIT    PBEF0        3      3      0    R       TRUE    -
//     %%BIT    APEF0        2      2      0    R       TRUE    -
//     %%BIT    DEDF0        1      1      0    R       TRUE    -
//     %%BIT    SEDF0        0      0      0    R       TRUE    -
// 
// 
// %REG_NAME EADR1ST0
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR0       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST1
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR1       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST2
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR2       31      0      0    R       TRUE     -
// 
// %REG_NAME EADR1ST3
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    EADR3       31      0      0    R       TRUE     -
// 
// %REG_NAME STSTCTL
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    PROT1       15      15     0    W|R     TRUE    -
//     %%BIT    PROT0       14      14     0    W|R     TRUE    -
//     %%BIT    ECCTST       0       0     0    W|R     TRUE    W
////////////////////////////////////////////////////////////////////////////////
/// @file ecc_cmnu_regif.cpp
/// @brief Register IF class of model ECC_CMNU
/// $Id: ecc_cmnu_regif.cpp,v 1.3 2015/11/06 02:01:36 ngankimtran2 Exp $
/// $Date: 2015/11/06 02:01:36 $
/// $Revison$
/// $Author: ngankimtran2 $
////////////////////////////////////////////////////////////////////////////////
#include "ecc_cmnu_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cecc_cmnu_regif::Cecc_cmnu_regif(std::string name,
                       uint buswidth,
                       unsigned int addr_awidth,
                       unsigned int addr_awidth_lsb,
                       std::string model_version)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x154/4))
    #endif
{
    mAwidth = addr_awidth;
    mAwidth_lsb = addr_awidth_lsb;
    mVersion = model_version;
    CommandInit();
    ECCCTL   = new vpcl::re_register(0x0000, this, "ECCCTL"  , name.c_str());
    ERRINT   = new vpcl::re_register(0x0004, this, "ERRINT"  , name.c_str());
    STCLR    = new vpcl::re_register(0x0008, this, "STCLR"   , name.c_str());
    OVFSTR   = new vpcl::re_register(0x000C, this, "OVFSTR"  , name.c_str());
    ERSTR1ST = new vpcl::re_register(0x0010, this, "ERSTR1ST", name.c_str());
    EADR1ST0 = new vpcl::re_register(0x0050, this, "EADR1ST0", name.c_str());
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        EADR1ST1 = new vpcl::re_register(0x0054, this, "EADR1ST1", name.c_str());
    }
    if (mVersion == "G3M_V30"){
        EADR1ST2 = new vpcl::re_register(0x0058, this, "EADR1ST2", name.c_str());
        EADR1ST3 = new vpcl::re_register(0x005C, this, "EADR1ST3", name.c_str());
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        STSTCTL  = new vpcl::re_register(0x0150, this, "STSTCTL" , name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        mRegMap[0x0054]     = index;
        mRegMap[0x0054 + 1] = index;
        mRegMap[0x0054 + 2] = index;
        mRegMap[0x0054 + 3] = index++;
    }
    if (mVersion == "G3M_V30"){
        mRegMap[0x0058]     = index;
        mRegMap[0x0058 + 1] = index;
        mRegMap[0x0058 + 2] = index;
        mRegMap[0x0058 + 3] = index++;
        mRegMap[0x005C]     = index;
        mRegMap[0x005C + 1] = index;
        mRegMap[0x005C + 2] = index;
        mRegMap[0x005C + 3] = index++;
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        mRegMap[0x0150]     = index;
        mRegMap[0x0150 + 1] = index;
        mRegMap[0x0150 + 2] = index;
        mRegMap[0x0150 + 3] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_ECCCTL    , ECCCTL->name()  , ECCCTL->addr()  );
    cw_instantiate_reg(CW_ERRINT    , ERRINT->name()  , ERRINT->addr()  );
    cw_instantiate_reg(CW_STCLR     , STCLR->name()   , STCLR->addr()   );
    cw_instantiate_reg(CW_OVFSTR    , OVFSTR->name()  , OVFSTR->addr()  );
    cw_instantiate_reg(CW_ERSTR1ST  , ERSTR1ST->name(), ERSTR1ST->addr());
    cw_instantiate_reg(CW_EADR1ST0  , EADR1ST0->name(), EADR1ST0->addr());
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        cw_instantiate_reg(CW_EADR1ST1  , EADR1ST1->name(), EADR1ST1->addr());
    }
    if (mVersion == "G3M_V30"){
        cw_instantiate_reg(CW_EADR1ST2  , EADR1ST2->name(), EADR1ST2->addr());
        cw_instantiate_reg(CW_EADR1ST3  , EADR1ST3->name(), EADR1ST3->addr());
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        cw_instantiate_reg(CW_STSTCTL   , STSTCTL->name() , STSTCTL->addr() );
    }
    #endif
    mCurReg = mRegArray[index++] = new SRegList(ECCCTL    , mCurReg, 0,  4,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ERRINT    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(STCLR     , mCurReg, 0,  4, "8|16|32",      "32");
    mCurReg = mRegArray[index++] = new SRegList(OVFSTR    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ERSTR1ST  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(EADR1ST0  , mCurReg, 0,  4,      "32", "8|16|32");
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        mCurReg = mRegArray[index++] = new SRegList(EADR1ST1  , mCurReg, 0,  4,      "32", "8|16|32");
    }
    if (mVersion == "G3M_V30"){
        mCurReg = mRegArray[index++] = new SRegList(EADR1ST2  , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(EADR1ST3  , mCurReg, 0,  4,      "32", "8|16|32");
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        mCurReg = mRegArray[index++] = new SRegList(STSTCTL   , mCurReg, 0,  4,   "16|32", "8|16|32");
    }

    mRegList = mCurReg;

    (*ECCCTL    ) (15, 15, "PROT1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL    ) (14, 14, "PROT0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ECCCTL    ) ( 0,  0, "ECCDIS"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT    ) ( 1,  1, "DEDIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*ERRINT    ) ( 0,  0, "SEDIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*STCLR     ) ( 0,  0, "STCLR0"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OVFSTR    ) ( 0,  0, "ERROVF0" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ERSTR1ST  ) ( 1,  1, "DEDF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ERSTR1ST  ) ( 0,  0, "SEDF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*EADR1ST0  ) (31,  0, "EADR0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
        (*ECCCTL    ) ( 1,  1, "SECDIS"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT    ) ( 2,  2, "APEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 2,  2, "APEF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    if (mVersion == "G3M_V30"){
        (*ECCCTL    ) ( 3,  3, "ASECDIS" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ECCCTL    ) ( 2,  2, "AECCDIS" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT    ) ( 6,  6, "EOVFIE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT    ) ( 5,  5, "ADEDIE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*ERRINT    ) ( 4,  4, "ASEDIE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*STCLR     ) ( 3,  3, "STCLR3"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*STCLR     ) ( 2,  2, "STCLR2"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
        (*OVFSTR    ) ( 3,  3, "ERROVF3" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*OVFSTR    ) ( 2,  2, "ERROVF2" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (31, 31, "AECDEDF3", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (30, 30, "AECSEDF3", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (29, 29, "EXDEDF3" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (28, 28, "EXSEDF3" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (23, 23, "AECDEDF2", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (22, 22, "AECSEDF2", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (21, 21, "EXDEDF2" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (20, 20, "EXSEDF2" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (15, 15, "AECDEDF1", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (14, 14, "AECSEDF1", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (13, 13, "EXDEDF1" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) (12, 12, "EXSEDF1" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 7,  7, "AECDEDF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 6,  6, "AECSEDF0", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 5,  5, "EXDEDF0" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 4,  4, "EXSEDF0" , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*EADR1ST2  ) (31,  0, "EADR2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*EADR1ST3  ) (31,  0, "EADR3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH"){
            (*ERSTR1ST  ) (27, 27, "PBEF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (26, 26, "APEF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (25, 25, "DEDF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (24, 24, "SEDF3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (19, 19, "PBEF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (18, 18, "APEF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (17, 17, "DEDF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (16, 16, "SEDF2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        }
        if (mVersion != "CFB_G3MH"){
            (*ERRINT    ) ( 3,  3, "PBEIE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) (11, 11, "PBEF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*ERSTR1ST  ) ( 3,  3, "PBEF0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        }
        if (mVersion != "TCM_G3KH"){
            (*STCLR     ) ( 1,  1, "STCLR1"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
            (*OVFSTR    ) ( 1,  1, "ERROVF1" , 0x0       , "R"     , vpcl::SPP_ENABLE);
            (*EADR1ST1  ) (31,  0, "EADR1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        }
        (*ERSTR1ST  ) (10, 10, "APEF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 9,  9, "DEDF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*ERSTR1ST  ) ( 8,  8, "SEDF1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        (*STSTCTL   ) (15, 15, "PROT1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*STSTCTL   ) (14, 14, "PROT0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*STSTCTL   ) ( 0,  0, "ECCTST"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ECCCTL"]["ECCDIS"] = &Cecc_cmnu_regif::cb_ECCCTL_ECCDIS;
    mWrCbAPI["STCLR" ]["STCLR0"] = &Cecc_cmnu_regif::cb_STCLR_STCLR0;
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        mWrCbAPI["STSTCTL"]["ECCTST"] = &Cecc_cmnu_regif::cb_STSTCTL_ECCTST;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cecc_cmnu_regif::~Cecc_cmnu_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cecc_cmnu_regif::uint Cecc_cmnu_regif::bit_select(
                             cuint val,    ///< [in] Writting address
                             cuint start,  ///< [in] start bit position
                             cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecc_cmnu_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecc_cmnu_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecc_cmnu_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecc_cmnu_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecc_cmnu_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                     const unsigned char *p_data,  ///< [in] Writing data
                                     cuint size,                   ///< [in] Data size (byte)
                                     bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecc_cmnu_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size,              ///< [in]  Data size (byte)
                                     bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cecc_cmnu_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                  unsigned char *p_data,          ///< [out] Reading data
                                  cuint size,                     ///< [in]  Data size (byte)
                                  cuint reg_index,                ///< [in] Register index
                                  bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cecc_cmnu_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                  const unsigned char *p_data,      ///< [in] Writing data
                                  cuint size,                       ///< [in] Data size (byte)
                                  cuint reg_index,                  ///< [in] Register index
                                  bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cecc_cmnu_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cecc_cmnu_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cecc_cmnu_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cecc_cmnu_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cecc_cmnu_regif::InitLocalVal()
{
    // Initialize local variables
    ECCCTL_PROT1 = 0x0;
    ECCCTL_PROT0 = 0x0;
    ECCCTL_ECCDIS = 0x0;
    ERRINT_DEDIE = 0x0;
    ERRINT_SEDIE = 0x0;
    STCLR_STCLR0 = 0x0;
    OVFSTR_ERROVF0 = 0x0;
    ERSTR1ST_DEDF0 = 0x0;
    ERSTR1ST_SEDF0 = 0x0;
    EADR1ST0_EADR0 = 0x0;
    if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
        ECCCTL_SECDIS = 0x0;
        ERRINT_APEIE = 0x0;
        ERSTR1ST_APEF0 = 0x0;
    }
    if (mVersion == "G3M_V30"){
        ECCCTL_ASECDIS = 0x0;
        ECCCTL_AECCDIS = 0x0;
        ERRINT_EOVFIE = 0x0;
        ERRINT_ADEDIE = 0x0;
        ERRINT_ASEDIE = 0x0;
        STCLR_STCLR3 = 0x0;
        STCLR_STCLR2 = 0x0;
        OVFSTR_ERROVF3 = 0x0;
        OVFSTR_ERROVF2 = 0x0;
        ERSTR1ST_AECDEDF3 = 0x0;
        ERSTR1ST_AECSEDF3 = 0x0;
        ERSTR1ST_EXDEDF3 = 0x0;
        ERSTR1ST_EXSEDF3 = 0x0;
        ERSTR1ST_AECDEDF2 = 0x0;
        ERSTR1ST_AECSEDF2 = 0x0;
        ERSTR1ST_EXDEDF2 = 0x0;
        ERSTR1ST_EXSEDF2 = 0x0;
        ERSTR1ST_AECDEDF1 = 0x0;
        ERSTR1ST_AECSEDF1 = 0x0;
        ERSTR1ST_EXDEDF1 = 0x0;
        ERSTR1ST_EXSEDF1 = 0x0;
        ERSTR1ST_AECDEDF0 = 0x0;
        ERSTR1ST_AECSEDF0 = 0x0;
        ERSTR1ST_EXDEDF0 = 0x0;
        ERSTR1ST_EXSEDF0 = 0x0;
        EADR1ST2_EADR2 = 0x0;
        EADR1ST3_EADR3 = 0x0;
    }
    if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH"){
            ERSTR1ST_PBEF3 = 0x0;
            ERSTR1ST_APEF3 = 0x0;
            ERSTR1ST_DEDF3 = 0x0;
            ERSTR1ST_SEDF3 = 0x0;
            ERSTR1ST_PBEF2 = 0x0;
            ERSTR1ST_APEF2 = 0x0;
            ERSTR1ST_DEDF2 = 0x0;
            ERSTR1ST_SEDF2 = 0x0;
        }
        if (mVersion != "CFB_G3MH"){
            ERRINT_PBEIE = 0x0;
            ERSTR1ST_PBEF1 = 0x0;
            ERSTR1ST_PBEF0 = 0x0;
        }
        if (mVersion != "TCM_G3KH"){
            STCLR_STCLR1 = 0x0;
            OVFSTR_ERROVF1 = 0x0;
            EADR1ST1_EADR1 = 0x0;
        }
        ERSTR1ST_APEF1 = 0x0;
        ERSTR1ST_DEDF1 = 0x0;
        ERSTR1ST_SEDF1 = 0x0;
    }
    if (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X"){
        STSTCTL_PROT1 = 0x0;
        STSTCTL_PROT0 = 0x0;
        STSTCTL_ECCTST = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cecc_cmnu_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ECCCTL_PROT1                 = (*ECCCTL  )["PROT1"   ];
        ECCCTL_PROT0                 = (*ECCCTL  )["PROT0"   ];
        if (mVersion == "G3M_V30"){
            ECCCTL_ASECDIS               = (*ECCCTL  )["ASECDIS" ];
            ECCCTL_AECCDIS               = (*ECCCTL  )["AECCDIS" ];
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            ECCCTL_SECDIS                = (*ECCCTL  )["SECDIS"  ];
        }
        ECCCTL_ECCDIS                = (*ECCCTL  )["ECCDIS"  ];
        return;
    }
    if (addr == 0x0004) {
        if (mVersion == "G3M_V30"){
            ERRINT_EOVFIE                = (*ERRINT  )["EOVFIE"  ];
            ERRINT_ADEDIE                = (*ERRINT  )["ADEDIE"  ];
            ERRINT_ASEDIE                = (*ERRINT  )["ASEDIE"  ];
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            ERRINT_PBEIE                 = (*ERRINT  )["PBEIE"   ];
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            ERRINT_APEIE                 = (*ERRINT  )["APEIE"   ];
        }
        ERRINT_DEDIE                 = (*ERRINT  )["DEDIE"   ];
        ERRINT_SEDIE                 = (*ERRINT  )["SEDIE"   ];
        return;
    }
    if (addr == 0x0008) {
        if (mVersion == "G3M_V30"){
            STCLR_STCLR3                 = (*STCLR   )["STCLR3"  ];
            STCLR_STCLR2                 = (*STCLR   )["STCLR2"  ];
        }
        if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            STCLR_STCLR1                 = (*STCLR   )["STCLR1"  ];
        }
        STCLR_STCLR0                 = (*STCLR   )["STCLR0"  ];
        return;
    }
    if (addr == 0x000C) {
        if (mVersion == "G3M_V30"){
            OVFSTR_ERROVF3               = (*OVFSTR  )["ERROVF3" ];
            OVFSTR_ERROVF2               = (*OVFSTR  )["ERROVF2" ];
        }
        if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            OVFSTR_ERROVF1               = (*OVFSTR  )["ERROVF1" ];
        }
        OVFSTR_ERROVF0               = (*OVFSTR  )["ERROVF0" ];
        return;
    }
    if (addr == 0x0010) {
        if (mVersion == "G3M_V30"){
            ERSTR1ST_AECDEDF3            = (*ERSTR1ST)["AECDEDF3"];
            ERSTR1ST_AECSEDF3            = (*ERSTR1ST)["AECSEDF3"];
            ERSTR1ST_EXDEDF3             = (*ERSTR1ST)["EXDEDF3" ];
            ERSTR1ST_EXSEDF3             = (*ERSTR1ST)["EXSEDF3" ];
            ERSTR1ST_AECDEDF2            = (*ERSTR1ST)["AECDEDF2"];
            ERSTR1ST_AECSEDF2            = (*ERSTR1ST)["AECSEDF2"];
            ERSTR1ST_EXDEDF2             = (*ERSTR1ST)["EXDEDF2" ];
            ERSTR1ST_EXSEDF2             = (*ERSTR1ST)["EXSEDF2" ];
            ERSTR1ST_AECDEDF1            = (*ERSTR1ST)["AECDEDF1"];
            ERSTR1ST_AECSEDF1            = (*ERSTR1ST)["AECSEDF1"];
            ERSTR1ST_EXDEDF1             = (*ERSTR1ST)["EXDEDF1" ];
            ERSTR1ST_EXSEDF1             = (*ERSTR1ST)["EXSEDF1" ];
            ERSTR1ST_AECDEDF0            = (*ERSTR1ST)["AECDEDF0"];
            ERSTR1ST_AECSEDF0            = (*ERSTR1ST)["AECSEDF0"];
            ERSTR1ST_EXDEDF0             = (*ERSTR1ST)["EXDEDF0" ];
            ERSTR1ST_EXSEDF0             = (*ERSTR1ST)["EXSEDF0" ];
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH"){
            ERSTR1ST_PBEF3               = (*ERSTR1ST)["PBEF3"   ];
            ERSTR1ST_APEF3               = (*ERSTR1ST)["APEF3"   ];
            ERSTR1ST_DEDF3               = (*ERSTR1ST)["DEDF3"   ];
            ERSTR1ST_SEDF3               = (*ERSTR1ST)["SEDF3"   ];
            ERSTR1ST_PBEF2               = (*ERSTR1ST)["PBEF2"   ];
            ERSTR1ST_APEF2               = (*ERSTR1ST)["APEF2"   ];
            ERSTR1ST_DEDF2               = (*ERSTR1ST)["DEDF2"   ];
            ERSTR1ST_SEDF2               = (*ERSTR1ST)["SEDF2"   ];
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            if (mVersion != "CFB_G3MH"){
                ERSTR1ST_PBEF1               = (*ERSTR1ST)["PBEF1"   ];
                ERSTR1ST_PBEF0               = (*ERSTR1ST)["PBEF0"   ];
            }
            ERSTR1ST_APEF1               = (*ERSTR1ST)["APEF1"   ];
            ERSTR1ST_DEDF1               = (*ERSTR1ST)["DEDF1"   ];
            ERSTR1ST_SEDF1               = (*ERSTR1ST)["SEDF1"   ];
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            ERSTR1ST_APEF0               = (*ERSTR1ST)["APEF0"   ];
        }
        ERSTR1ST_DEDF0               = (*ERSTR1ST)["DEDF0"   ];
        ERSTR1ST_SEDF0               = (*ERSTR1ST)["SEDF0"   ];
        return;
    }
    if (addr == 0x0050) {
        EADR1ST0_EADR0               = (*EADR1ST0)["EADR0"   ];
        return;
    }
    if ((addr == 0x0054) && (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH")){
        EADR1ST1_EADR1               = (*EADR1ST1)["EADR1"   ];
        return;
    }
    if (mVersion == "G3M_V30"){
        if (addr == 0x0058) {
            EADR1ST2_EADR2               = (*EADR1ST2)["EADR2"   ];
            return;
        }
        if (addr == 0x005C) {
            EADR1ST3_EADR3               = (*EADR1ST3)["EADR3"   ];
            return;
        }
    }
    if ((addr == 0x0150) && (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X")){
        STSTCTL_PROT1                = (*STSTCTL )["PROT1"   ];
        STSTCTL_PROT0                = (*STSTCTL )["PROT0"   ];
        STSTCTL_ECCTST               = (*STSTCTL )["ECCTST"  ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cecc_cmnu_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ECCCTL  )["PROT1"   ] = ECCCTL_PROT1;
        (*ECCCTL  )["PROT0"   ] = ECCCTL_PROT0;
        if (mVersion == "G3M_V30"){
            (*ECCCTL  )["ASECDIS" ] = ECCCTL_ASECDIS;
            (*ECCCTL  )["AECCDIS" ] = ECCCTL_AECCDIS;
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            (*ECCCTL  )["SECDIS"  ] = ECCCTL_SECDIS;
        }
        (*ECCCTL  )["ECCDIS"  ] = ECCCTL_ECCDIS;
        return;
    }
    if (addr == 0x0004) {
        if (mVersion == "G3M_V30"){
            (*ERRINT  )["EOVFIE"  ] = ERRINT_EOVFIE;
            (*ERRINT  )["ADEDIE"  ] = ERRINT_ADEDIE;
            (*ERRINT  )["ASEDIE"  ] = ERRINT_ASEDIE;
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            (*ERRINT  )["PBEIE"   ] = ERRINT_PBEIE;
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            (*ERRINT  )["APEIE"   ] = ERRINT_APEIE;
        }
        (*ERRINT  )["DEDIE"   ] = ERRINT_DEDIE;
        (*ERRINT  )["SEDIE"   ] = ERRINT_SEDIE;
        return;
    }
    if (addr == 0x0008) {
        if (mVersion == "G3M_V30"){
            (*STCLR   )["STCLR3"  ] = STCLR_STCLR3;
            (*STCLR   )["STCLR2"  ] = STCLR_STCLR2;
        }
        if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            (*STCLR   )["STCLR1"  ] = STCLR_STCLR1;
        }
        (*STCLR   )["STCLR0"  ] = STCLR_STCLR0;
        return;
    }
    if (addr == 0x000C) {
        if (mVersion == "G3M_V30"){
            (*OVFSTR  )["ERROVF3" ] = OVFSTR_ERROVF3;
            (*OVFSTR  )["ERROVF2" ] = OVFSTR_ERROVF2;
        }
        if (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            (*OVFSTR  )["ERROVF1" ] = OVFSTR_ERROVF1;
        }
        (*OVFSTR  )["ERROVF0" ] = OVFSTR_ERROVF0;
        return;
    }
    if (addr == 0x0010) {
        if (mVersion == "G3M_V30"){
            (*ERSTR1ST)["AECDEDF3"] = ERSTR1ST_AECDEDF3;
            (*ERSTR1ST)["AECSEDF3"] = ERSTR1ST_AECSEDF3;
            (*ERSTR1ST)["EXDEDF3" ] = ERSTR1ST_EXDEDF3;
            (*ERSTR1ST)["EXSEDF3" ] = ERSTR1ST_EXSEDF3;
            (*ERSTR1ST)["AECDEDF2"] = ERSTR1ST_AECDEDF2;
            (*ERSTR1ST)["AECSEDF2"] = ERSTR1ST_AECSEDF2;
            (*ERSTR1ST)["EXDEDF2" ] = ERSTR1ST_EXDEDF2;
            (*ERSTR1ST)["EXSEDF2" ] = ERSTR1ST_EXSEDF2;
            (*ERSTR1ST)["AECDEDF1"] = ERSTR1ST_AECDEDF1;
            (*ERSTR1ST)["AECSEDF1"] = ERSTR1ST_AECSEDF1;
            (*ERSTR1ST)["EXDEDF1" ] = ERSTR1ST_EXDEDF1;
            (*ERSTR1ST)["EXSEDF1" ] = ERSTR1ST_EXSEDF1;
            (*ERSTR1ST)["AECDEDF0"] = ERSTR1ST_AECDEDF0;
            (*ERSTR1ST)["AECSEDF0"] = ERSTR1ST_AECSEDF0;
            (*ERSTR1ST)["EXDEDF0" ] = ERSTR1ST_EXDEDF0;
            (*ERSTR1ST)["EXSEDF0" ] = ERSTR1ST_EXSEDF0;
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH"){
            (*ERSTR1ST)["PBEF3"   ] = ERSTR1ST_PBEF3;
            (*ERSTR1ST)["APEF3"   ] = ERSTR1ST_APEF3;
            (*ERSTR1ST)["DEDF3"   ] = ERSTR1ST_DEDF3;
            (*ERSTR1ST)["SEDF3"   ] = ERSTR1ST_SEDF3;
            (*ERSTR1ST)["PBEF2"   ] = ERSTR1ST_PBEF2;
            (*ERSTR1ST)["APEF2"   ] = ERSTR1ST_APEF2;
            (*ERSTR1ST)["DEDF2"   ] = ERSTR1ST_DEDF2;
            (*ERSTR1ST)["SEDF2"   ] = ERSTR1ST_SEDF2;
        }
        if (mVersion == "G3M_V30" || mVersion == "TCM_G3KH" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH"){
            if (mVersion != "CFB_G3MH"){
                (*ERSTR1ST)["PBEF1"   ] = ERSTR1ST_PBEF1;
                (*ERSTR1ST)["PBEF0"   ] = ERSTR1ST_PBEF0;
            }
            (*ERSTR1ST)["APEF1"   ] = ERSTR1ST_APEF1;
            (*ERSTR1ST)["DEDF1"   ] = ERSTR1ST_DEDF1;
            (*ERSTR1ST)["SEDF1"   ] = ERSTR1ST_SEDF1;
        }
        if (mVersion != "ICDM_G3MH" && mVersion != "ICTM_G3MH"){
            (*ERSTR1ST)["APEF0"   ] = ERSTR1ST_APEF0;
        }
        (*ERSTR1ST)["DEDF0"   ] = ERSTR1ST_DEDF0;
        (*ERSTR1ST)["SEDF0"   ] = ERSTR1ST_SEDF0;
        return;
    }
    if (addr == 0x0050) {
        (*EADR1ST0)["EADR0"   ] = EADR1ST0_EADR0;
        return;
    }
    if ((addr == 0x0054) && (mVersion == "G3M_V30" || mVersion == "CFB_G3MH" || mVersion == "GRAM_G3MH" || mVersion == "TCM_G3MH")){
        (*EADR1ST1)["EADR1"   ] = EADR1ST1_EADR1;
        return;
    }
    if (mVersion == "G3M_V30"){
        if (addr == 0x0058) {
            (*EADR1ST2)["EADR2"   ] = EADR1ST2_EADR2;
            return;
        }
        if (addr == 0x005C) {
            (*EADR1ST3)["EADR3"   ] = EADR1ST3_EADR3;
            return;
        }
    }
    if ((addr == 0x0150) && (mVersion == "G3M_V30" || mVersion == "CFB_G3KH" || mVersion == "CFB_G3MH" || mVersion == "CFB_X2X")){
        (*STSTCTL )["PROT1"   ] = STSTCTL_PROT1;
        (*STSTCTL )["PROT0"   ] = STSTCTL_PROT0;
        (*STSTCTL )["ECCTST"  ] = STSTCTL_ECCTST;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cecc_cmnu_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cecc_cmnu_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cecc_cmnu_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cecc_cmnu_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cecc_cmnu_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cecc_cmnu_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cecc_cmnu_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cecc_cmnu_regif::uint Cecc_cmnu_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cecc_cmnu_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cecc_cmnu_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cecc_cmnu_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cecc_cmnu_regif::EnableReset(const bool is_active, const std::string clock_domain) //Modify for reseting registers according to clock domain
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        if (clock_domain == "pclk_domain") {
            if ((mRegArray[i]->my_p->name() == "ECCCTL") || (mRegArray[i]->my_p->name() == "ERRINT") ||
                (mRegArray[i]->my_p->name() == "STCLR") || (mRegArray[i]->my_p->name() == "STSTCTL")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        } else { //clock_domain == "sys_clk_domain"
            if ((mRegArray[i]->my_p->name() == "OVFSTR") || (mRegArray[i]->my_p->name() == "ERSTR1ST") ||
                (mRegArray[i]->my_p->name() == "EADR1ST0") || (mRegArray[i]->my_p->name() == "EADR1ST1") ||
                (mRegArray[i]->my_p->name() == "EADR1ST2") || (mRegArray[i]->my_p->name() == "EADR1ST3")) {
                mRegArray[i]->my_p->EnableReset(is_active);
                if (is_active) {
                    re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
                }
            }
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cecc_cmnu_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cecc_cmnu_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cecc_cmnu_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
