// -----------------------------------------------------------------------------
// $Id: sfma_regif.cpp,v 1.4 2020/01/30 08:01:36 huepham Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : sfma_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE SFMA
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  7 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name             reg_name            wsize   rsize       length  offset  factor_start    factor_end  factor_index    factor_step access   init        support  callback
//     %%REG      SFMACMNCR        SFMACMNCR           32      8|16|32     32      0x00    -               -           -               -           R|W      0x01AA4000  TRUE     -
//     %%REG      SFMASSLDR        SFMASSLDR           32      8|16|32     32      0x04    -               -           -               -           R|W      0x00070707  TRUE     -
//     %%REG      SFMASPBCR        SFMASPBCR           32      8|16|32     32      0x08    -               -           -               -           R|W      0x00000003  TRUE     -
//     %%REG      SFMADRCR         SFMADRCR            32      8|16|32     32      0x0C    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMADRCMR        SFMADRCMR           32      8|16|32     32      0x10    -               -           -               -           R|W      0x00030000  TRUE     -
//     %%REG      SFMADREAR        SFMADREAR           32      8|16|32     32      0x14    -               -           -               -           R|W      0x00000001  TRUE     -
//     %%REG      SFMADROPR        SFMADROPR           32      8|16|32     32      0x18    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMADRENR        SFMADRENR           32      8|16|32     32      0x1C    -               -           -               -           R|W      0x00004700  TRUE     -
//     %%REG      SFMASMCR         SFMASMCR            32      8|16|32     32      0x20    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMCMR        SFMASMCMR           32      8|16|32     32      0x24    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMADR        SFMASMADR           32      8|16|32     32      0x28    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMOPR        SFMASMOPR           32      8|16|32     32      0x2C    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMENR        SFMASMENR           32      8|16|32     32      0x30    -               -           -               -           R|W      0x00004000  TRUE     -
//     %%REG      SFMASMRDR        SFMASMRDR           -       8|16|32     32      0x38    -               -           -               -           R        0x0         TRUE     -
//     %%REG      SFMASMWDR        SFMASMWDR           8|16|32 8|16|32     32      0x40    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMACMNSR        SFMACMNSR           -       8|16|32     32      0x48    -               -           -               -           R        0x00000001  TRUE     -
//     %%REG      SFMADRDMCR       SFMADRDMCR          32      8|16|32     32      0x58    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMDMCR       SFMASMDMCR          32      8|16|32     32      0x60    -               -           -               -           R|W      0x0         TRUE     -
// 
// %REG_NAME SFMACMNCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    MD                 31      31      0           R|W     TRUE        -
//     %%BIT    RESERVED           24      24      0x1         R|W0:1  TRUE        -
//     %%BIT    MOIIO3             23      22      0x2         R|W     TRUE        -
//     %%BIT    MOIIO2             21      20      0x2         R|W     TRUE        -
//     %%BIT    MOIIO1             19      18      0x2         R|W     TRUE        -
//     %%BIT    MOIIO0             17      16      0x2         R|W     TRUE        -
//     %%BIT    IO3FV              15      14      0x1         R|W     TRUE        -
//     %%BIT    IO2FV              13      12      0x0         R|W     TRUE        -
//     %%BIT    IO0FV              9       8       0x0         R|W     TRUE        -
//     %%BIT    CPHAT              6       6       0x0         R|W     TRUE        -
//     %%BIT    CPHAR              5       5       0x0         R|W     TRUE        -
//     %%BIT    SSLP               4       4       0x0         R|W     TRUE        w
//     %%BIT    CPOL               3       3       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMASSLDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SPNDL              18      16      0x7         R|W     TRUE        w
//     %%BIT    SLNDL              10      8       0x7         R|W     TRUE        -
//     %%BIT    SCKDL              2       0       0x7         R|W     TRUE        -
//     
// %REG_NAME SFMASPBCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SPBR               15      8       0           R|W     TRUE        w
//     %%BIT    BRDV               1       0       0x3         R|W     TRUE        -
//     
// %REG_NAME SFMADRCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLN               24      24      0           R|W     TRUE        w
//     %%BIT    RBURST             19      16      0           R|W     TRUE        -
//     %%BIT    RCF                9       9       0           R|W     TRUE        -
//     %%BIT    RBE                8       8       0           R|W     TRUE        -
//     %%BIT    SSLE               0       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMADRCMR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CMD                23      16      0x3         R|W     TRUE        w
//     %%BIT    OCMD               7       0       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMADREAR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    EAV                22      17      0x0         R|W     TRUE        w
//     %%BIT    RESERVED            0       0      0x1         R|W0:1  TRUE        -
//     
// %REG_NAME SFMADROPR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    OPD3               31      24      0           R|W     TRUE        w
//     %%BIT    OPD2               23      16      0           R|W     TRUE        -
//     %%BIT    OPD1               15      8       0           R|W     TRUE        -
//     %%BIT    OPD0               7       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMADRENR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CDB                31      30      0           R|W     TRUE        w
//     %%BIT    OCDB               29      28      0           R|W     TRUE        -
//     %%BIT    ADB                25      24      0           R|W     TRUE        -
//     %%BIT    OPDB               21      20      0           R|W     TRUE        -
//     %%BIT    DRDB               17      16      0           R|W     TRUE        -
//     %%BIT    DME                15      15      0           R|W     TRUE        -
//     %%BIT    CDE                14      14      0x1         R|W     TRUE        -
//     %%BIT    OCDE               12      12      0           R|W     TRUE        -
//     %%BIT    ADE                11      8       0x7         R|W     TRUE        -
//     %%BIT    OPDE               7       4       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLKP              8       8       0           R|W     TRUE        -
//     %%BIT    SPIRE              2       2       0           R|W     TRUE        -
//     %%BIT    SPIWE              1       1       0           R|W     TRUE        -
//     %%BIT    SPIE               0       0       0           R|W     TRUE        w
//     
// %REG_NAME SFMASMCMR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CMD                23      16      0x0         R|W     TRUE        w
//     %%BIT    OCMD               7       0       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMASMADR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    ADR                31      0       0x0         R|W     TRUE        w
//     
// %REG_NAME SFMASMOPR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    OPD3               31      24      0           R|W     TRUE        w
//     %%BIT    OPD2               23      16      0           R|W     TRUE        -
//     %%BIT    OPD1               15      8       0           R|W     TRUE        -
//     %%BIT    OPD0               7       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMENR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CDB                31      30      0           R|W     TRUE        w
//     %%BIT    OCDB               29      28      0           R|W     TRUE        -
//     %%BIT    ADB                25      24      0           R|W     TRUE        -
//     %%BIT    OPDB               21      20      0           R|W     TRUE        -
//     %%BIT    SPIDB              17      16      0           R|W     TRUE        -
//     %%BIT    DME                15      15      0           R|W     TRUE        -
//     %%BIT    CDE                14      14      0x1         R|W     TRUE        -
//     %%BIT    OCDE               12      12      0           R|W     TRUE        -
//     %%BIT    ADE                11      8       0           R|W     TRUE        -
//     %%BIT    OPDE               7       4       0           R|W     TRUE        -
//     %%BIT    SPIDE              3       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMRDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    RDATA              31      0       0           R       TRUE        -
//     
// %REG_NAME SFMASMWDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    WDATA              31      0       0           R|W     TRUE        w
//     
// %REG_NAME SFMACMNSR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLF               1       1       0x0         R       TRUE        -
//     %%BIT    TEND               0       0       0x1         R       TRUE        -
//     
// %REG_NAME SFMADRDMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    DMDB               17      16      0           R|W     TRUE        w
//     %%BIT    DMCYC              2       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMDMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    DMDB               17      16      0           R|W     TRUE        w
//     %%BIT    DMCYC              2       0       0           R|W     TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file sfma_regif.cpp
/// @brief Register IF class of model SFMA
/// $Id: sfma_regif.cpp,v 1.4 2020/01/30 08:01:36 huepham Exp $
/// $Date: 2020/01/30 08:01:36 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#include "sfma_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Csfma_regif::Csfma_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x64/4))
    #endif
{
    CommandInit();
    SFMACMNCR  = new vpcl::re_register(0x0000, this, "SFMACMNCR" , name.c_str());
    SFMASSLDR  = new vpcl::re_register(0x0004, this, "SFMASSLDR" , name.c_str());
    SFMASPBCR  = new vpcl::re_register(0x0008, this, "SFMASPBCR" , name.c_str());
    SFMADRCR   = new vpcl::re_register(0x000C, this, "SFMADRCR"  , name.c_str());
    SFMADRCMR  = new vpcl::re_register(0x0010, this, "SFMADRCMR" , name.c_str());
    SFMADREAR  = new vpcl::re_register(0x0014, this, "SFMADREAR" , name.c_str());
    SFMADROPR  = new vpcl::re_register(0x0018, this, "SFMADROPR" , name.c_str());
    SFMADRENR  = new vpcl::re_register(0x001C, this, "SFMADRENR" , name.c_str());
    SFMASMCR   = new vpcl::re_register(0x0020, this, "SFMASMCR"  , name.c_str());
    SFMASMCMR  = new vpcl::re_register(0x0024, this, "SFMASMCMR" , name.c_str());
    SFMASMADR  = new vpcl::re_register(0x0028, this, "SFMASMADR" , name.c_str());
    SFMASMOPR  = new vpcl::re_register(0x002C, this, "SFMASMOPR" , name.c_str());
    SFMASMENR  = new vpcl::re_register(0x0030, this, "SFMASMENR" , name.c_str());
    SFMASMRDR  = new vpcl::re_register(0x0038, this, "SFMASMRDR" , name.c_str());
    SFMASMWDR  = new vpcl::re_register(0x0040, this, "SFMASMWDR" , name.c_str());
    SFMACMNSR  = new vpcl::re_register(0x0048, this, "SFMACMNSR" , name.c_str());
    SFMADRDMCR = new vpcl::re_register(0x0058, this, "SFMADRDMCR", name.c_str());
    SFMASMDMCR = new vpcl::re_register(0x0060, this, "SFMASMDMCR", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<7];
    for (uint i = 0; i < (1<<7); i++) {
        mRegMap[i] = (1<<7);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index;
    mRegMap[0x001C + 2] = index;
    mRegMap[0x001C + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0048]     = index;
    mRegMap[0x0048 + 1] = index;
    mRegMap[0x0048 + 2] = index;
    mRegMap[0x0048 + 3] = index++;
    mRegMap[0x0058]     = index;
    mRegMap[0x0058 + 1] = index;
    mRegMap[0x0058 + 2] = index;
    mRegMap[0x0058 + 3] = index++;
    mRegMap[0x0060]     = index;
    mRegMap[0x0060 + 1] = index;
    mRegMap[0x0060 + 2] = index;
    mRegMap[0x0060 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_SFMACMNCR   , SFMACMNCR->name() , SFMACMNCR->addr() );
    cw_instantiate_reg(CW_SFMASSLDR   , SFMASSLDR->name() , SFMASSLDR->addr() );
    cw_instantiate_reg(CW_SFMASPBCR   , SFMASPBCR->name() , SFMASPBCR->addr() );
    cw_instantiate_reg(CW_SFMADRCR    , SFMADRCR->name()  , SFMADRCR->addr()  );
    cw_instantiate_reg(CW_SFMADRCMR   , SFMADRCMR->name() , SFMADRCMR->addr() );
    cw_instantiate_reg(CW_SFMADREAR   , SFMADREAR->name() , SFMADREAR->addr() );
    cw_instantiate_reg(CW_SFMADROPR   , SFMADROPR->name() , SFMADROPR->addr() );
    cw_instantiate_reg(CW_SFMADRENR   , SFMADRENR->name() , SFMADRENR->addr() );
    cw_instantiate_reg(CW_SFMASMCR    , SFMASMCR->name()  , SFMASMCR->addr()  );
    cw_instantiate_reg(CW_SFMASMCMR   , SFMASMCMR->name() , SFMASMCMR->addr() );
    cw_instantiate_reg(CW_SFMASMADR   , SFMASMADR->name() , SFMASMADR->addr() );
    cw_instantiate_reg(CW_SFMASMOPR   , SFMASMOPR->name() , SFMASMOPR->addr() );
    cw_instantiate_reg(CW_SFMASMENR   , SFMASMENR->name() , SFMASMENR->addr() );
    cw_instantiate_reg(CW_SFMASMRDR   , SFMASMRDR->name() , SFMASMRDR->addr() );
    cw_instantiate_reg(CW_SFMASMWDR   , SFMASMWDR->name() , SFMASMWDR->addr() );
    cw_instantiate_reg(CW_SFMACMNSR   , SFMACMNSR->name() , SFMACMNSR->addr() );
    cw_instantiate_reg(CW_SFMADRDMCR  , SFMADRDMCR->name(), SFMADRDMCR->addr());
    cw_instantiate_reg(CW_SFMASMDMCR  , SFMASMDMCR->name(), SFMASMDMCR->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(SFMACMNCR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASSLDR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASPBCR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADRCR    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADRCMR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADREAR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADROPR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADRENR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMCR    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMCMR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMADR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMOPR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMENR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMRDR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMWDR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMACMNSR   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMADRDMCR  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SFMASMDMCR  , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*SFMACMNCR   ) (31, 31, "MD"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (24, 24, "RESERVED", 0x1       , "R|W0:1", vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (23, 22, "MOIIO3"  , 0x2       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (21, 20, "MOIIO2"  , 0x2       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (19, 18, "MOIIO1"  , 0x2       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (17, 16, "MOIIO0"  , 0x2       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (15, 14, "IO3FV"   , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) (13, 12, "IO2FV"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) ( 9,  8, "IO0FV"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) ( 6,  6, "CPHAT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) ( 5,  5, "CPHAR"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) ( 4,  4, "SSLP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNCR   ) ( 3,  3, "CPOL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASSLDR   ) (18, 16, "SPNDL"   , 0x7       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASSLDR   ) (10,  8, "SLNDL"   , 0x7       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASSLDR   ) ( 2,  0, "SCKDL"   , 0x7       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASPBCR   ) (15,  8, "SPBR"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASPBCR   ) ( 1,  0, "BRDV"    , 0x3       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCR    ) (24, 24, "SSLN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCR    ) (19, 16, "RBURST"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCR    ) ( 9,  9, "RCF"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCR    ) ( 8,  8, "RBE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCR    ) ( 0,  0, "SSLE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCMR   ) (23, 16, "CMD"     , 0x3       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRCMR   ) ( 7,  0, "OCMD"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADREAR   ) (22, 17, "EAV"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADREAR   ) ( 0,  0, "RESERVED", 0x1       , "R|W0:1", vpcl::SPP_ENABLE);
    (*SFMADROPR   ) (31, 24, "OPD3"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADROPR   ) (23, 16, "OPD2"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADROPR   ) (15,  8, "OPD1"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADROPR   ) ( 7,  0, "OPD0"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (31, 30, "CDB"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (29, 28, "OCDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (25, 24, "ADB"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (21, 20, "OPDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (17, 16, "DRDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (15, 15, "DME"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (14, 14, "CDE"     , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (12, 12, "OCDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) (11,  8, "ADE"     , 0x7       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRENR   ) ( 7,  4, "OPDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCR    ) ( 8,  8, "SSLKP"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCR    ) ( 2,  2, "SPIRE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCR    ) ( 1,  1, "SPIWE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCR    ) ( 0,  0, "SPIE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCMR   ) (23, 16, "CMD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMCMR   ) ( 7,  0, "OCMD"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMADR   ) (31,  0, "ADR"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMOPR   ) (31, 24, "OPD3"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMOPR   ) (23, 16, "OPD2"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMOPR   ) (15,  8, "OPD1"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMOPR   ) ( 7,  0, "OPD0"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (31, 30, "CDB"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (29, 28, "OCDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (25, 24, "ADB"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (21, 20, "OPDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (17, 16, "SPIDB"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (15, 15, "DME"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (14, 14, "CDE"     , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (12, 12, "OCDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) (11,  8, "ADE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) ( 7,  4, "OPDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMENR   ) ( 3,  0, "SPIDE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMRDR   ) (31,  0, "RDATA"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SFMASMWDR   ) (31,  0, "WDATA"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMACMNSR   ) ( 1,  1, "SSLF"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SFMACMNSR   ) ( 0,  0, "TEND"    , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*SFMADRDMCR  ) (17, 16, "DMDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMADRDMCR  ) ( 2,  0, "DMCYC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMDMCR  ) (17, 16, "DMDB"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SFMASMDMCR  ) ( 2,  0, "DMCYC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["SFMACMNCR"]["SSLP"    ] = &Csfma_regif::cb_SFMACMNCR_SSLP;
    mWrCbAPI["SFMASSLDR"]["SPNDL"   ] = &Csfma_regif::cb_SFMASSLDR_SPNDL;
    mWrCbAPI["SFMASPBCR"]["SPBR"    ] = &Csfma_regif::cb_SFMASPBCR_SPBR;
    mWrCbAPI["SFMADRCR"]["SSLN"    ] = &Csfma_regif::cb_SFMADRCR_SSLN;
    mWrCbAPI["SFMADRCMR"]["CMD"     ] = &Csfma_regif::cb_SFMADRCMR_CMD;
    mWrCbAPI["SFMADREAR"]["EAV"     ] = &Csfma_regif::cb_SFMADREAR_EAV;
    mWrCbAPI["SFMADROPR"]["OPD3"    ] = &Csfma_regif::cb_SFMADROPR_OPD3;
    mWrCbAPI["SFMADRENR"]["CDB"     ] = &Csfma_regif::cb_SFMADRENR_CDB;
    mWrCbAPI["SFMASMCR"]["SPIE"    ] = &Csfma_regif::cb_SFMASMCR_SPIE;
    mWrCbAPI["SFMASMCMR"]["CMD"     ] = &Csfma_regif::cb_SFMASMCMR_CMD;
    mWrCbAPI["SFMASMADR"]["ADR"     ] = &Csfma_regif::cb_SFMASMADR_ADR;
    mWrCbAPI["SFMASMOPR"]["OPD3"    ] = &Csfma_regif::cb_SFMASMOPR_OPD3;
    mWrCbAPI["SFMASMENR"]["CDB"     ] = &Csfma_regif::cb_SFMASMENR_CDB;
    mWrCbAPI["SFMASMWDR"]["WDATA"   ] = &Csfma_regif::cb_SFMASMWDR_WDATA;
    mWrCbAPI["SFMADRDMCR"]["DMDB"    ] = &Csfma_regif::cb_SFMADRDMCR_DMDB;
    mWrCbAPI["SFMASMDMCR"]["DMDB"    ] = &Csfma_regif::cb_SFMASMDMCR_DMDB;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Csfma_regif::~Csfma_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Csfma_regif::uint Csfma_regif::bit_select(
                         cuint val,    ///< [in] Writting address
                         cuint start,  ///< [in] start bit position
                         cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csfma_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                         const unsigned char *p_data,   ///< [in] Writing data
                         cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csfma_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                         unsigned char *p_data,   ///< [out] Reading data
                         cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csfma_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csfma_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csfma_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                 const unsigned char *p_data,  ///< [in] Writing data
                                 cuint size,                   ///< [in] Data size (byte)
                                 bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csfma_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size,              ///< [in]  Data size (byte)
                                 bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Csfma_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                              unsigned char *p_data,          ///< [out] Reading data
                              cuint size,                     ///< [in]  Data size (byte)
                              cuint reg_index,                ///< [in] Register index
                              bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Csfma_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                              const unsigned char *p_data,      ///< [in] Writing data
                              cuint size,                       ///< [in] Data size (byte)
                              cuint reg_index,                  ///< [in] Register index
                              bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Csfma_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Csfma_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Csfma_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Csfma_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Csfma_regif::InitLocalVal()
{
    // Initialize local variables
    SFMACMNCR_MD = 0x0;
    SFMACMNCR_RESERVED = 0x1;
    SFMACMNCR_MOIIO3 = 0x2;
    SFMACMNCR_MOIIO2 = 0x2;
    SFMACMNCR_MOIIO1 = 0x2;
    SFMACMNCR_MOIIO0 = 0x2;
    SFMACMNCR_IO3FV = 0x1;
    SFMACMNCR_IO2FV = 0x0;
    SFMACMNCR_IO0FV = 0x0;
    SFMACMNCR_CPHAT = 0x0;
    SFMACMNCR_CPHAR = 0x0;
    SFMACMNCR_SSLP = 0x0;
    SFMACMNCR_CPOL = 0x0;
    SFMASSLDR_SPNDL = 0x7;
    SFMASSLDR_SLNDL = 0x7;
    SFMASSLDR_SCKDL = 0x7;
    SFMASPBCR_SPBR = 0x0;
    SFMASPBCR_BRDV = 0x3;
    SFMADRCR_SSLN = 0x0;
    SFMADRCR_RBURST = 0x0;
    SFMADRCR_RCF = 0x0;
    SFMADRCR_RBE = 0x0;
    SFMADRCR_SSLE = 0x0;
    SFMADRCMR_CMD = 0x3;
    SFMADRCMR_OCMD = 0x0;
    SFMADREAR_EAV = 0x0;
    SFMADREAR_RESERVED = 0x1;
    SFMADROPR_OPD3 = 0x0;
    SFMADROPR_OPD2 = 0x0;
    SFMADROPR_OPD1 = 0x0;
    SFMADROPR_OPD0 = 0x0;
    SFMADRENR_CDB = 0x0;
    SFMADRENR_OCDB = 0x0;
    SFMADRENR_ADB = 0x0;
    SFMADRENR_OPDB = 0x0;
    SFMADRENR_DRDB = 0x0;
    SFMADRENR_DME = 0x0;
    SFMADRENR_CDE = 0x1;
    SFMADRENR_OCDE = 0x0;
    SFMADRENR_ADE = 0x7;
    SFMADRENR_OPDE = 0x0;
    SFMASMCR_SSLKP = 0x0;
    SFMASMCR_SPIRE = 0x0;
    SFMASMCR_SPIWE = 0x0;
    SFMASMCR_SPIE = 0x0;
    SFMASMCMR_CMD = 0x0;
    SFMASMCMR_OCMD = 0x0;
    SFMASMADR_ADR = 0x0;
    SFMASMOPR_OPD3 = 0x0;
    SFMASMOPR_OPD2 = 0x0;
    SFMASMOPR_OPD1 = 0x0;
    SFMASMOPR_OPD0 = 0x0;
    SFMASMENR_CDB = 0x0;
    SFMASMENR_OCDB = 0x0;
    SFMASMENR_ADB = 0x0;
    SFMASMENR_OPDB = 0x0;
    SFMASMENR_SPIDB = 0x0;
    SFMASMENR_DME = 0x0;
    SFMASMENR_CDE = 0x1;
    SFMASMENR_OCDE = 0x0;
    SFMASMENR_ADE = 0x0;
    SFMASMENR_OPDE = 0x0;
    SFMASMENR_SPIDE = 0x0;
    SFMASMRDR_RDATA = 0x0;
    SFMASMWDR_WDATA = 0x0;
    SFMACMNSR_SSLF = 0x0;
    SFMACMNSR_TEND = 0x1;
    SFMADRDMCR_DMDB = 0x0;
    SFMADRDMCR_DMCYC = 0x0;
    SFMASMDMCR_DMDB = 0x0;
    SFMASMDMCR_DMCYC = 0x0;
}

/// Update bit value to local value
/// @return None
void Csfma_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        SFMACMNCR_MD                   = (*SFMACMNCR )["MD"        ];
        SFMACMNCR_RESERVED             = (*SFMACMNCR )["RESERVED"  ];
        SFMACMNCR_MOIIO3               = (*SFMACMNCR )["MOIIO3"    ];
        SFMACMNCR_MOIIO2               = (*SFMACMNCR )["MOIIO2"    ];
        SFMACMNCR_MOIIO1               = (*SFMACMNCR )["MOIIO1"    ];
        SFMACMNCR_MOIIO0               = (*SFMACMNCR )["MOIIO0"    ];
        SFMACMNCR_IO3FV                = (*SFMACMNCR )["IO3FV"     ];
        SFMACMNCR_IO2FV                = (*SFMACMNCR )["IO2FV"     ];
        SFMACMNCR_IO0FV                = (*SFMACMNCR )["IO0FV"     ];
        SFMACMNCR_CPHAT                = (*SFMACMNCR )["CPHAT"     ];
        SFMACMNCR_CPHAR                = (*SFMACMNCR )["CPHAR"     ];
        SFMACMNCR_SSLP                 = (*SFMACMNCR )["SSLP"      ];
        SFMACMNCR_CPOL                 = (*SFMACMNCR )["CPOL"      ];
        return;
    }
    if (addr == 0x0004) {
        SFMASSLDR_SPNDL                = (*SFMASSLDR )["SPNDL"     ];
        SFMASSLDR_SLNDL                = (*SFMASSLDR )["SLNDL"     ];
        SFMASSLDR_SCKDL                = (*SFMASSLDR )["SCKDL"     ];
        return;
    }
    if (addr == 0x0008) {
        SFMASPBCR_SPBR                 = (*SFMASPBCR )["SPBR"      ];
        SFMASPBCR_BRDV                 = (*SFMASPBCR )["BRDV"      ];
        return;
    }
    if (addr == 0x000C) {
        SFMADRCR_SSLN                  = (*SFMADRCR  )["SSLN"      ];
        SFMADRCR_RBURST                = (*SFMADRCR  )["RBURST"    ];
        SFMADRCR_RCF                   = (*SFMADRCR  )["RCF"       ];
        SFMADRCR_RBE                   = (*SFMADRCR  )["RBE"       ];
        SFMADRCR_SSLE                  = (*SFMADRCR  )["SSLE"      ];
        return;
    }
    if (addr == 0x0010) {
        SFMADRCMR_CMD                  = (*SFMADRCMR )["CMD"       ];
        SFMADRCMR_OCMD                 = (*SFMADRCMR )["OCMD"      ];
        return;
    }
    if (addr == 0x0014) {
        SFMADREAR_EAV                  = (*SFMADREAR )["EAV"       ];
        SFMADREAR_RESERVED             = (*SFMADREAR )["RESERVED"  ];
        return;
    }
    if (addr == 0x0018) {
        SFMADROPR_OPD3                 = (*SFMADROPR )["OPD3"      ];
        SFMADROPR_OPD2                 = (*SFMADROPR )["OPD2"      ];
        SFMADROPR_OPD1                 = (*SFMADROPR )["OPD1"      ];
        SFMADROPR_OPD0                 = (*SFMADROPR )["OPD0"      ];
        return;
    }
    if (addr == 0x001C) {
        SFMADRENR_CDB                  = (*SFMADRENR )["CDB"       ];
        SFMADRENR_OCDB                 = (*SFMADRENR )["OCDB"      ];
        SFMADRENR_ADB                  = (*SFMADRENR )["ADB"       ];
        SFMADRENR_OPDB                 = (*SFMADRENR )["OPDB"      ];
        SFMADRENR_DRDB                 = (*SFMADRENR )["DRDB"      ];
        SFMADRENR_DME                  = (*SFMADRENR )["DME"       ];
        SFMADRENR_CDE                  = (*SFMADRENR )["CDE"       ];
        SFMADRENR_OCDE                 = (*SFMADRENR )["OCDE"      ];
        SFMADRENR_ADE                  = (*SFMADRENR )["ADE"       ];
        SFMADRENR_OPDE                 = (*SFMADRENR )["OPDE"      ];
        return;
    }
    if (addr == 0x0020) {
        SFMASMCR_SSLKP                 = (*SFMASMCR  )["SSLKP"     ];
        SFMASMCR_SPIRE                 = (*SFMASMCR  )["SPIRE"     ];
        SFMASMCR_SPIWE                 = (*SFMASMCR  )["SPIWE"     ];
        SFMASMCR_SPIE                  = (*SFMASMCR  )["SPIE"      ];
        return;
    }
    if (addr == 0x0024) {
        SFMASMCMR_CMD                  = (*SFMASMCMR )["CMD"       ];
        SFMASMCMR_OCMD                 = (*SFMASMCMR )["OCMD"      ];
        return;
    }
    if (addr == 0x0028) {
        SFMASMADR_ADR                  = (*SFMASMADR )["ADR"       ];
        return;
    }
    if (addr == 0x002C) {
        SFMASMOPR_OPD3                 = (*SFMASMOPR )["OPD3"      ];
        SFMASMOPR_OPD2                 = (*SFMASMOPR )["OPD2"      ];
        SFMASMOPR_OPD1                 = (*SFMASMOPR )["OPD1"      ];
        SFMASMOPR_OPD0                 = (*SFMASMOPR )["OPD0"      ];
        return;
    }
    if (addr == 0x0030) {
        SFMASMENR_CDB                  = (*SFMASMENR )["CDB"       ];
        SFMASMENR_OCDB                 = (*SFMASMENR )["OCDB"      ];
        SFMASMENR_ADB                  = (*SFMASMENR )["ADB"       ];
        SFMASMENR_OPDB                 = (*SFMASMENR )["OPDB"      ];
        SFMASMENR_SPIDB                = (*SFMASMENR )["SPIDB"     ];
        SFMASMENR_DME                  = (*SFMASMENR )["DME"       ];
        SFMASMENR_CDE                  = (*SFMASMENR )["CDE"       ];
        SFMASMENR_OCDE                 = (*SFMASMENR )["OCDE"      ];
        SFMASMENR_ADE                  = (*SFMASMENR )["ADE"       ];
        SFMASMENR_OPDE                 = (*SFMASMENR )["OPDE"      ];
        SFMASMENR_SPIDE                = (*SFMASMENR )["SPIDE"     ];
        return;
    }
    if (addr == 0x0038) {
        SFMASMRDR_RDATA                = (*SFMASMRDR )["RDATA"     ];
        return;
    }
    if (addr == 0x0040) {
        SFMASMWDR_WDATA                = (*SFMASMWDR )["WDATA"     ];
        return;
    }
    if (addr == 0x0048) {
        SFMACMNSR_SSLF                 = (*SFMACMNSR )["SSLF"      ];
        SFMACMNSR_TEND                 = (*SFMACMNSR )["TEND"      ];
        return;
    }
    if (addr == 0x0058) {
        SFMADRDMCR_DMDB                = (*SFMADRDMCR)["DMDB"      ];
        SFMADRDMCR_DMCYC               = (*SFMADRDMCR)["DMCYC"     ];
        return;
    }
    if (addr == 0x0060) {
        SFMASMDMCR_DMDB                = (*SFMASMDMCR)["DMDB"      ];
        SFMASMDMCR_DMCYC               = (*SFMASMDMCR)["DMCYC"     ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Csfma_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*SFMACMNCR )["MD"        ] = SFMACMNCR_MD;
        (*SFMACMNCR )["RESERVED"  ] = SFMACMNCR_RESERVED;
        (*SFMACMNCR )["MOIIO3"    ] = SFMACMNCR_MOIIO3;
        (*SFMACMNCR )["MOIIO2"    ] = SFMACMNCR_MOIIO2;
        (*SFMACMNCR )["MOIIO1"    ] = SFMACMNCR_MOIIO1;
        (*SFMACMNCR )["MOIIO0"    ] = SFMACMNCR_MOIIO0;
        (*SFMACMNCR )["IO3FV"     ] = SFMACMNCR_IO3FV;
        (*SFMACMNCR )["IO2FV"     ] = SFMACMNCR_IO2FV;
        (*SFMACMNCR )["IO0FV"     ] = SFMACMNCR_IO0FV;
        (*SFMACMNCR )["CPHAT"     ] = SFMACMNCR_CPHAT;
        (*SFMACMNCR )["CPHAR"     ] = SFMACMNCR_CPHAR;
        (*SFMACMNCR )["SSLP"      ] = SFMACMNCR_SSLP;
        (*SFMACMNCR )["CPOL"      ] = SFMACMNCR_CPOL;
        return;
    }
    if (addr == 0x0004) {
        (*SFMASSLDR )["SPNDL"     ] = SFMASSLDR_SPNDL;
        (*SFMASSLDR )["SLNDL"     ] = SFMASSLDR_SLNDL;
        (*SFMASSLDR )["SCKDL"     ] = SFMASSLDR_SCKDL;
        return;
    }
    if (addr == 0x0008) {
        (*SFMASPBCR )["SPBR"      ] = SFMASPBCR_SPBR;
        (*SFMASPBCR )["BRDV"      ] = SFMASPBCR_BRDV;
        return;
    }
    if (addr == 0x000C) {
        (*SFMADRCR  )["SSLN"      ] = SFMADRCR_SSLN;
        (*SFMADRCR  )["RBURST"    ] = SFMADRCR_RBURST;
        (*SFMADRCR  )["RCF"       ] = SFMADRCR_RCF;
        (*SFMADRCR  )["RBE"       ] = SFMADRCR_RBE;
        (*SFMADRCR  )["SSLE"      ] = SFMADRCR_SSLE;
        return;
    }
    if (addr == 0x0010) {
        (*SFMADRCMR )["CMD"       ] = SFMADRCMR_CMD;
        (*SFMADRCMR )["OCMD"      ] = SFMADRCMR_OCMD;
        return;
    }
    if (addr == 0x0014) {
        (*SFMADREAR )["EAV"       ] = SFMADREAR_EAV;
        (*SFMADREAR )["RESERVED"  ] = SFMADREAR_RESERVED;
        return;
    }
    if (addr == 0x0018) {
        (*SFMADROPR )["OPD3"      ] = SFMADROPR_OPD3;
        (*SFMADROPR )["OPD2"      ] = SFMADROPR_OPD2;
        (*SFMADROPR )["OPD1"      ] = SFMADROPR_OPD1;
        (*SFMADROPR )["OPD0"      ] = SFMADROPR_OPD0;
        return;
    }
    if (addr == 0x001C) {
        (*SFMADRENR )["CDB"       ] = SFMADRENR_CDB;
        (*SFMADRENR )["OCDB"      ] = SFMADRENR_OCDB;
        (*SFMADRENR )["ADB"       ] = SFMADRENR_ADB;
        (*SFMADRENR )["OPDB"      ] = SFMADRENR_OPDB;
        (*SFMADRENR )["DRDB"      ] = SFMADRENR_DRDB;
        (*SFMADRENR )["DME"       ] = SFMADRENR_DME;
        (*SFMADRENR )["CDE"       ] = SFMADRENR_CDE;
        (*SFMADRENR )["OCDE"      ] = SFMADRENR_OCDE;
        (*SFMADRENR )["ADE"       ] = SFMADRENR_ADE;
        (*SFMADRENR )["OPDE"      ] = SFMADRENR_OPDE;
        return;
    }
    if (addr == 0x0020) {
        (*SFMASMCR  )["SSLKP"     ] = SFMASMCR_SSLKP;
        (*SFMASMCR  )["SPIRE"     ] = SFMASMCR_SPIRE;
        (*SFMASMCR  )["SPIWE"     ] = SFMASMCR_SPIWE;
        (*SFMASMCR  )["SPIE"      ] = SFMASMCR_SPIE;
        return;
    }
    if (addr == 0x0024) {
        (*SFMASMCMR )["CMD"       ] = SFMASMCMR_CMD;
        (*SFMASMCMR )["OCMD"      ] = SFMASMCMR_OCMD;
        return;
    }
    if (addr == 0x0028) {
        (*SFMASMADR )["ADR"       ] = SFMASMADR_ADR;
        return;
    }
    if (addr == 0x002C) {
        (*SFMASMOPR )["OPD3"      ] = SFMASMOPR_OPD3;
        (*SFMASMOPR )["OPD2"      ] = SFMASMOPR_OPD2;
        (*SFMASMOPR )["OPD1"      ] = SFMASMOPR_OPD1;
        (*SFMASMOPR )["OPD0"      ] = SFMASMOPR_OPD0;
        return;
    }
    if (addr == 0x0030) {
        (*SFMASMENR )["CDB"       ] = SFMASMENR_CDB;
        (*SFMASMENR )["OCDB"      ] = SFMASMENR_OCDB;
        (*SFMASMENR )["ADB"       ] = SFMASMENR_ADB;
        (*SFMASMENR )["OPDB"      ] = SFMASMENR_OPDB;
        (*SFMASMENR )["SPIDB"     ] = SFMASMENR_SPIDB;
        (*SFMASMENR )["DME"       ] = SFMASMENR_DME;
        (*SFMASMENR )["CDE"       ] = SFMASMENR_CDE;
        (*SFMASMENR )["OCDE"      ] = SFMASMENR_OCDE;
        (*SFMASMENR )["ADE"       ] = SFMASMENR_ADE;
        (*SFMASMENR )["OPDE"      ] = SFMASMENR_OPDE;
        (*SFMASMENR )["SPIDE"     ] = SFMASMENR_SPIDE;
        return;
    }
    if (addr == 0x0038) {
        (*SFMASMRDR )["RDATA"     ] = SFMASMRDR_RDATA;
        return;
    }
    if (addr == 0x0040) {
        (*SFMASMWDR )["WDATA"     ] = SFMASMWDR_WDATA;
        return;
    }
    if (addr == 0x0048) {
        (*SFMACMNSR )["SSLF"      ] = SFMACMNSR_SSLF;
        (*SFMACMNSR )["TEND"      ] = SFMACMNSR_TEND;
        return;
    }
    if (addr == 0x0058) {
        (*SFMADRDMCR)["DMDB"      ] = SFMADRDMCR_DMDB;
        (*SFMADRDMCR)["DMCYC"     ] = SFMADRDMCR_DMCYC;
        return;
    }
    if (addr == 0x0060) {
        (*SFMASMDMCR)["DMDB"      ] = SFMASMDMCR_DMDB;
        (*SFMASMDMCR)["DMCYC"     ] = SFMASMDMCR_DMCYC;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Csfma_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Csfma_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Csfma_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,7, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Csfma_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<7)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Csfma_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Csfma_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Csfma_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Csfma_regif::uint Csfma_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Csfma_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Csfma_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Csfma_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Csfma_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Csfma_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Csfma_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Csfma_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
