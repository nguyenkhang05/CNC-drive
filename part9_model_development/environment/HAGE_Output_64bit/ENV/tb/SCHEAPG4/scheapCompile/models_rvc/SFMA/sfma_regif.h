// -----------------------------------------------------------------------------
// $Id: sfma_regif.h,v 1.4 2020/01/30 08:01:36 huepham Exp $
//
// Copyright(c) 2018-2020 Renesas Electronics Corporation
// Copyright(c) 2018-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : sfma_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE SFMA
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  7 
// 
// %REG_CHANNEL reg_def                                                       
//     %%TITLE    name             reg_name            wsize   rsize       length  offset  factor_start    factor_end  factor_index    factor_step access   init        support  callback
//     %%REG      SFMACMNCR        SFMACMNCR           32      8|16|32     32      0x00    -               -           -               -           R|W      0x01AA4000  TRUE     -
//     %%REG      SFMASSLDR        SFMASSLDR           32      8|16|32     32      0x04    -               -           -               -           R|W      0x00070707  TRUE     -
//     %%REG      SFMASPBCR        SFMASPBCR           32      8|16|32     32      0x08    -               -           -               -           R|W      0x00000003  TRUE     -
//     %%REG      SFMADRCR         SFMADRCR            32      8|16|32     32      0x0C    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMADRCMR        SFMADRCMR           32      8|16|32     32      0x10    -               -           -               -           R|W      0x00030000  TRUE     -
//     %%REG      SFMADREAR        SFMADREAR           32      8|16|32     32      0x14    -               -           -               -           R|W      0x00000001  TRUE     -
//     %%REG      SFMADROPR        SFMADROPR           32      8|16|32     32      0x18    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMADRENR        SFMADRENR           32      8|16|32     32      0x1C    -               -           -               -           R|W      0x00004700  TRUE     -
//     %%REG      SFMASMCR         SFMASMCR            32      8|16|32     32      0x20    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMCMR        SFMASMCMR           32      8|16|32     32      0x24    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMADR        SFMASMADR           32      8|16|32     32      0x28    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMOPR        SFMASMOPR           32      8|16|32     32      0x2C    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMENR        SFMASMENR           32      8|16|32     32      0x30    -               -           -               -           R|W      0x00004000  TRUE     -
//     %%REG      SFMASMRDR        SFMASMRDR           -       8|16|32     32      0x38    -               -           -               -           R        0x0         TRUE     -
//     %%REG      SFMASMWDR        SFMASMWDR           8|16|32 8|16|32     32      0x40    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMACMNSR        SFMACMNSR           -       8|16|32     32      0x48    -               -           -               -           R        0x00000001  TRUE     -
//     %%REG      SFMADRDMCR       SFMADRDMCR          32      8|16|32     32      0x58    -               -           -               -           R|W      0x0         TRUE     -
//     %%REG      SFMASMDMCR       SFMASMDMCR          32      8|16|32     32      0x60    -               -           -               -           R|W      0x0         TRUE     -
// 
// %REG_NAME SFMACMNCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    MD                 31      31      0           R|W     TRUE        -
//     %%BIT    RESERVED           24      24      0x1         R|W0:1  TRUE        -
//     %%BIT    MOIIO3             23      22      0x2         R|W     TRUE        -
//     %%BIT    MOIIO2             21      20      0x2         R|W     TRUE        -
//     %%BIT    MOIIO1             19      18      0x2         R|W     TRUE        -
//     %%BIT    MOIIO0             17      16      0x2         R|W     TRUE        -
//     %%BIT    IO3FV              15      14      0x1         R|W     TRUE        -
//     %%BIT    IO2FV              13      12      0x0         R|W     TRUE        -
//     %%BIT    IO0FV              9       8       0x0         R|W     TRUE        -
//     %%BIT    CPHAT              6       6       0x0         R|W     TRUE        -
//     %%BIT    CPHAR              5       5       0x0         R|W     TRUE        -
//     %%BIT    SSLP               4       4       0x0         R|W     TRUE        w
//     %%BIT    CPOL               3       3       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMASSLDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SPNDL              18      16      0x7         R|W     TRUE        w
//     %%BIT    SLNDL              10      8       0x7         R|W     TRUE        -
//     %%BIT    SCKDL              2       0       0x7         R|W     TRUE        -
//     
// %REG_NAME SFMASPBCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SPBR               15      8       0           R|W     TRUE        w
//     %%BIT    BRDV               1       0       0x3         R|W     TRUE        -
//     
// %REG_NAME SFMADRCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLN               24      24      0           R|W     TRUE        w
//     %%BIT    RBURST             19      16      0           R|W     TRUE        -
//     %%BIT    RCF                9       9       0           R|W     TRUE        -
//     %%BIT    RBE                8       8       0           R|W     TRUE        -
//     %%BIT    SSLE               0       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMADRCMR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CMD                23      16      0x3         R|W     TRUE        w
//     %%BIT    OCMD               7       0       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMADREAR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    EAV                22      17      0x0         R|W     TRUE        w
//     %%BIT    RESERVED            0       0      0x1         R|W0:1  TRUE        -
//     
// %REG_NAME SFMADROPR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    OPD3               31      24      0           R|W     TRUE        w
//     %%BIT    OPD2               23      16      0           R|W     TRUE        -
//     %%BIT    OPD1               15      8       0           R|W     TRUE        -
//     %%BIT    OPD0               7       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMADRENR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CDB                31      30      0           R|W     TRUE        w
//     %%BIT    OCDB               29      28      0           R|W     TRUE        -
//     %%BIT    ADB                25      24      0           R|W     TRUE        -
//     %%BIT    OPDB               21      20      0           R|W     TRUE        -
//     %%BIT    DRDB               17      16      0           R|W     TRUE        -
//     %%BIT    DME                15      15      0           R|W     TRUE        -
//     %%BIT    CDE                14      14      0x1         R|W     TRUE        -
//     %%BIT    OCDE               12      12      0           R|W     TRUE        -
//     %%BIT    ADE                11      8       0x7         R|W     TRUE        -
//     %%BIT    OPDE               7       4       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLKP              8       8       0           R|W     TRUE        -
//     %%BIT    SPIRE              2       2       0           R|W     TRUE        -
//     %%BIT    SPIWE              1       1       0           R|W     TRUE        -
//     %%BIT    SPIE               0       0       0           R|W     TRUE        w
//     
// %REG_NAME SFMASMCMR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CMD                23      16      0x0         R|W     TRUE        w
//     %%BIT    OCMD               7       0       0x0         R|W     TRUE        -
//     
// %REG_NAME SFMASMADR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    ADR                31      0       0x0         R|W     TRUE        w
//     
// %REG_NAME SFMASMOPR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    OPD3               31      24      0           R|W     TRUE        w
//     %%BIT    OPD2               23      16      0           R|W     TRUE        -
//     %%BIT    OPD1               15      8       0           R|W     TRUE        -
//     %%BIT    OPD0               7       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMENR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    CDB                31      30      0           R|W     TRUE        w
//     %%BIT    OCDB               29      28      0           R|W     TRUE        -
//     %%BIT    ADB                25      24      0           R|W     TRUE        -
//     %%BIT    OPDB               21      20      0           R|W     TRUE        -
//     %%BIT    SPIDB              17      16      0           R|W     TRUE        -
//     %%BIT    DME                15      15      0           R|W     TRUE        -
//     %%BIT    CDE                14      14      0x1         R|W     TRUE        -
//     %%BIT    OCDE               12      12      0           R|W     TRUE        -
//     %%BIT    ADE                11      8       0           R|W     TRUE        -
//     %%BIT    OPDE               7       4       0           R|W     TRUE        -
//     %%BIT    SPIDE              3       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMRDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    RDATA              31      0       0           R       TRUE        -
//     
// %REG_NAME SFMASMWDR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    WDATA              31      0       0           R|W     TRUE        w
//     
// %REG_NAME SFMACMNSR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    SSLF               1       1       0x0         R       TRUE        -
//     %%BIT    TEND               0       0       0x1         R       TRUE        -
//     
// %REG_NAME SFMADRDMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    DMDB               17      16      0           R|W     TRUE        w
//     %%BIT    DMCYC              2       0       0           R|W     TRUE        -
//     
// %REG_NAME SFMASMDMCR
//     %%TITLE  name               upper   lower   init        access  support     callback
//     %%BIT    DMDB               17      16      0           R|W     TRUE        w
//     %%BIT    DMCYC              2       0       0           R|W     TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file sfma_regif.h
/// @brief Register IF class of model SFMA
/// $Id: sfma_regif.h,v 1.4 2020/01/30 08:01:36 huepham Exp $
/// $Date: 2020/01/30 08:01:36 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#ifndef __SFMA_REGIF_H__
#define __SFMA_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of SFMA model
class Csfma_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Csfma_regif(std::string name, uint buswidth);
    ~Csfma_regif();

protected:
    vpcl::re_register *SFMACMNCR ;
    vpcl::re_register *SFMASSLDR ;
    vpcl::re_register *SFMASPBCR ;
    vpcl::re_register *SFMADRCR  ;
    vpcl::re_register *SFMADRCMR ;
    vpcl::re_register *SFMADREAR ;
    vpcl::re_register *SFMADROPR ;
    vpcl::re_register *SFMADRENR ;
    vpcl::re_register *SFMASMCR  ;
    vpcl::re_register *SFMASMCMR ;
    vpcl::re_register *SFMASMADR ;
    vpcl::re_register *SFMASMOPR ;
    vpcl::re_register *SFMASMENR ;
    vpcl::re_register *SFMASMRDR ;
    vpcl::re_register *SFMASMWDR ;
    vpcl::re_register *SFMACMNSR ;
    vpcl::re_register *SFMADRDMCR;
    vpcl::re_register *SFMASMDMCR;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_SFMACMNCR ;
    scml2::reg<uint> *CW_SFMASSLDR ;
    scml2::reg<uint> *CW_SFMASPBCR ;
    scml2::reg<uint> *CW_SFMADRCR  ;
    scml2::reg<uint> *CW_SFMADRCMR ;
    scml2::reg<uint> *CW_SFMADREAR ;
    scml2::reg<uint> *CW_SFMADROPR ;
    scml2::reg<uint> *CW_SFMADRENR ;
    scml2::reg<uint> *CW_SFMASMCR  ;
    scml2::reg<uint> *CW_SFMASMCMR ;
    scml2::reg<uint> *CW_SFMASMADR ;
    scml2::reg<uint> *CW_SFMASMOPR ;
    scml2::reg<uint> *CW_SFMASMENR ;
    scml2::reg<uint> *CW_SFMASMRDR ;
    scml2::reg<uint> *CW_SFMASMWDR ;
    scml2::reg<uint> *CW_SFMACMNSR ;
    scml2::reg<uint> *CW_SFMADRDMCR;
    scml2::reg<uint> *CW_SFMASMDMCR;
    #endif

    uint SFMACMNCR_MD;
    uint SFMACMNCR_RESERVED;
    uint SFMACMNCR_MOIIO3;
    uint SFMACMNCR_MOIIO2;
    uint SFMACMNCR_MOIIO1;
    uint SFMACMNCR_MOIIO0;
    uint SFMACMNCR_IO3FV;
    uint SFMACMNCR_IO2FV;
    uint SFMACMNCR_IO0FV;
    uint SFMACMNCR_CPHAT;
    uint SFMACMNCR_CPHAR;
    uint SFMACMNCR_SSLP;
    uint SFMACMNCR_CPOL;
    uint SFMASSLDR_SPNDL;
    uint SFMASSLDR_SLNDL;
    uint SFMASSLDR_SCKDL;
    uint SFMASPBCR_SPBR;
    uint SFMASPBCR_BRDV;
    uint SFMADRCR_SSLN;
    uint SFMADRCR_RBURST;
    uint SFMADRCR_RCF;
    uint SFMADRCR_RBE;
    uint SFMADRCR_SSLE;
    uint SFMADRCMR_CMD;
    uint SFMADRCMR_OCMD;
    uint SFMADREAR_EAV;
    uint SFMADREAR_RESERVED;
    uint SFMADROPR_OPD3;
    uint SFMADROPR_OPD2;
    uint SFMADROPR_OPD1;
    uint SFMADROPR_OPD0;
    uint SFMADRENR_CDB;
    uint SFMADRENR_OCDB;
    uint SFMADRENR_ADB;
    uint SFMADRENR_OPDB;
    uint SFMADRENR_DRDB;
    uint SFMADRENR_DME;
    uint SFMADRENR_CDE;
    uint SFMADRENR_OCDE;
    uint SFMADRENR_ADE;
    uint SFMADRENR_OPDE;
    uint SFMASMCR_SSLKP;
    uint SFMASMCR_SPIRE;
    uint SFMASMCR_SPIWE;
    uint SFMASMCR_SPIE;
    uint SFMASMCMR_CMD;
    uint SFMASMCMR_OCMD;
    uint SFMASMADR_ADR;
    uint SFMASMOPR_OPD3;
    uint SFMASMOPR_OPD2;
    uint SFMASMOPR_OPD1;
    uint SFMASMOPR_OPD0;
    uint SFMASMENR_CDB;
    uint SFMASMENR_OCDB;
    uint SFMASMENR_ADB;
    uint SFMASMENR_OPDB;
    uint SFMASMENR_SPIDB;
    uint SFMASMENR_DME;
    uint SFMASMENR_CDE;
    uint SFMASMENR_OCDE;
    uint SFMASMENR_ADE;
    uint SFMASMENR_OPDE;
    uint SFMASMENR_SPIDE;
    uint SFMASMRDR_RDATA;
    uint SFMASMWDR_WDATA;
    uint SFMACMNSR_SSLF;
    uint SFMACMNSR_TEND;
    uint SFMADRDMCR_DMDB;
    uint SFMADRDMCR_DMCYC;
    uint SFMASMDMCR_DMDB;
    uint SFMASMDMCR_DMCYC;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_SFMACMNCR_SSLP(RegCBstr str) = 0;
    virtual void cb_SFMASSLDR_SPNDL(RegCBstr str) = 0;
    virtual void cb_SFMASPBCR_SPBR(RegCBstr str) = 0;
    virtual void cb_SFMADRCR_SSLN(RegCBstr str) = 0;
    virtual void cb_SFMADRCMR_CMD(RegCBstr str) = 0;
    virtual void cb_SFMADREAR_EAV(RegCBstr str) = 0;
    virtual void cb_SFMADROPR_OPD3(RegCBstr str) = 0;
    virtual void cb_SFMADRENR_CDB(RegCBstr str) = 0;
    virtual void cb_SFMASMCR_SPIE(RegCBstr str) = 0;
    virtual void cb_SFMASMCMR_CMD(RegCBstr str) = 0;
    virtual void cb_SFMASMADR_ADR(RegCBstr str) = 0;
    virtual void cb_SFMASMOPR_OPD3(RegCBstr str) = 0;
    virtual void cb_SFMASMENR_CDB(RegCBstr str) = 0;
    virtual void cb_SFMASMWDR_WDATA(RegCBstr str) = 0;
    virtual void cb_SFMADRDMCR_DMDB(RegCBstr str) = 0;
    virtual void cb_SFMASMDMCR_DMDB(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Csfma_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Csfma_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__SFMA_REG_DEF_H__
