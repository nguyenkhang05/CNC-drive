// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2018 Renesas Electronics Corporation
// Copyright(c) 2010-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_cpp.skl
//
// Input file : ots_info.txt
////////////////////////////////////////////////////////////////////////////////
// # ---------------------------------------------------------------------
// # $Id$
// #
// # Copyright(c) 2012 Renesas Electronics Corporation
// # Copyright(c) 2012 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # ---------------------------------------------------------------------
// 
// %MODULE ots
//     #              name     offset_size  
//     %%REG_INSTANCE reg_def  8           
// 
// %REG_CHANNEL   reg_def
//      %%TITLE    name        reg_name     size    length   offset    init   access  support  callback
//      %%REG      OTSTCR      OTSTCR        8       8        0x00     0      W       TRUE      - 
//      %%REG      OTENDCR     OTENDCR       8       8        0x04     0      W       TRUE      -
//      %%REG      OTCR        OTCR          8       8        0x08     0      W|R     TRUE      -
//      %%REG      OTFCR       OTFCR         8       8        0x0C     0      W       TRUE      -
//      %%REG      OTFR        OTFR          8       8        0x10     0      R       TRUE      -
//      %%REG      OTSTR       OTSTR         8       8        0x14     0      R       TRUE      -
//      %%REG      OTDR        OTDR          16      16       0x18     0      R       TRUE      -
//      %%REG      HTBRAU      HTBRAU        8|16    16       0x1C     0      W|R     TRUE      -
//      %%REG      HTBRAL      HTBRAL        8|16    16       0x20     0      W|R     TRUE      -
//      %%REG      HTBRBU      HTBRBU        8|16    16       0x24     0      W|R     TRUE      -
//      %%REG      HTBRBL      HTBRBL        8|16    16       0x28     0      W|R     TRUE      -
//      %%REG      LTBRAU      LTBRAU        8|16    16       0x2C     0      W|R     TRUE      -
//      %%REG      LTBRAL      LTBRAL        8|16    16       0x30     0      W|R     TRUE      -
//      %%REG      TDLR        TDLR          8|16    16       0x34     0x7FFF W|R     TRUE      -
//      %%REG      COEFFRA     COEFFRA       16|32   32       0x38     0      R       TRUE      -
//      %%REG      COEFFRB     COEFFRB       16|32   32       0x3C     0      R       TRUE      -
//      %%REG      COEFFRC     COEFFRC       16|32   32       0x40     0      R       TRUE      -
//      %%REG      COEFFSR     COEFFSR       8       8        0x80     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERA COEFFTUNERA   8|16|32 32       0x84     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERB COEFFTUNERB   8|16|32 32       0x88     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERC COEFFTUNERC   8|16|32 32       0x8C     0      W|R     FALSE     - 
//      %%REG      TSTRA       TSTRA         8       8        0x90     0      W|R     FALSE     - 
//      %%REG      TSTRB       TSTRB         8       8        0x94     0      W|R     FALSE     - 
//      %%REG      TSTRC       TSTRC         8       8        0x98     0      W|R     FALSE     - 
//      %%REG      TSTRD       TSTRD         8       8        0x9C     0      R       FALSE     -
//      %%REG      SDIAGCTL    SDIAGCTL      8       8        0xA0     0      W|R     TRUE      -
// 
// %REG_NAME OTSTCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTST         0        0       0        W         -            W    
// 
// %REG_NAME OTENDCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTEND        0        0       0        W         -            W    
// 
// %REG_NAME OTCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTEE         4        4       0        D           -            -    
//     %%BIT       OTULIE       3        3       0        D           -            -   
//     %%BIT       OTABEE       2        2       0        D           -            -  
//     %%BIT       SDE          1        1       0        D           -            -   
//     %%BIT       OTMD         0        0       0        D           -            -   
// 
// %REG_NAME OTFCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       SDERC        2       2        0       W           -            W    
//     %%BIT       OTFC         0       0        0       W           -            -    
// 
// %REG_NAME OTFR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SDER         2       2       0        R           -           -   
//     %%BIT       OTACT        1       1       0        R           -           -
//     %%BIT       OTF          0       0       0        R           -           -
// 
// %REG_NAME OTSTR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       TSTAT       1       0       0        R            -            -    
// 
// %REG_NAME OTDR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15      0        D             -            -    
//     %%BIT       OTDR        14       0       0        D             -            -    
// 
// %REG_NAME HTBRAU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBAU       14     0        0       D           -          -       
// 
// %REG_NAME HTBRAL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBAL       14     0        0       D           -          -       
// 
// %REG_NAME HTBRBU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0         -          -       
//     %%BIT       HTBBU       14     0        0       D           -          -       
// 
// %REG_NAME HTBRBL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBBL       14     0        0       D           -          -       
// 
// %REG_NAME LTBRAU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       LTBAU       14     0        0       D           -          -       
// 
// %REG_NAME LTBRAL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       LTBAL       14     0        0       D           -          -       
// 
// %REG_NAME TDLR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN       15       15       0       R|W0        -           -      
//     %%BIT       TDL        14       0        32767   D           -           -       
// 
// %REG_NAME COEFFRA
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRA     14       0        0       D           -           -       
// 
// %REG_NAME COEFFRB
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRB     14       0        0       D           -           -       
// 
// %REG_NAME COEFFRC
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRC     14       0        0       D           -           -       
// 
// %REG_NAME COEFFSR    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFS       0       0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERA    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERA  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERB    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERB  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERC    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERC  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRA      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       OVSR        7       7       0       W|R        FALSE           -      
//     %%BIT       EXANMD      6       6       0       W|R        FALSE           -      
//     %%BIT       OCCHP       5       5       0       W|R        FALSE           -      
//     %%BIT       AMPCHP      4       4       0       W|R        FALSE           -      
//     %%BIT       TEST        3       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRB      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       ONDO        1       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRC      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       IBIAS       3       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRD      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       FFCHK       0       0       0       R          FALSE           -      
// 
// %REG_NAME SDIAGCTL      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       ADCIN       1       0       0       W|R        TRUE            W      
// 
// %CMD_BASEID   tgt reg
// %CMD_NODUMP_API EnableInsertInput EnableDumpResult CommandCB DumpProfile ClearProfile
// %CMD_RW DumpInterrupt <enable: bool=false> @ Display interrupt information when interrupt get set[ns]
// %CMD_RW AccelerationRate <rate: unsigned int=1> @ rate of conversion time 
// %CMD_RW MaxTemperature <max_temp: unsigned int=0x3BD8> @ maximum temperature setting in OTDR
// %CMD_RW MinTemperature <min_temp: unsigned int=0x200F> @ minimum temperature setting in OTDR
// %CMD_ACTION DumpStatInfo : void @ Dump the statistical information about OTS model activity
// %CMD_ACTION SetTemp <temperature: unsigned short> : void @ Set current temperature for OTS model
// %CMD_ACTION SetCLKfreq <clk_name: std::string> <clk_freq: double>: void @ Setup the new clock frequency
// 
// 
////////////////////////////////////////////////////////////////////////////////
/// @file ots_regif.cpp
/// @brief Register IF class of model OTS
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "ots_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cots_regif::Cots_regif(std::string name, uint buswidth, const short coeffra, const short coeffrb, const short coeffrc)
    :vpcl::reg_super()
    #ifdef USE_CWR_SYSTEMC
    , cwmem("register", 0xA4)
    #endif
{
    CommandInit();
    OTSTCR      = new vpcl::re_register(0x0000, this, "OTSTCR"     , name.c_str());
    OTENDCR     = new vpcl::re_register(0x0004, this, "OTENDCR"    , name.c_str());
    OTCR        = new vpcl::re_register(0x0008, this, "OTCR"       , name.c_str());
    OTFCR       = new vpcl::re_register(0x000C, this, "OTFCR"      , name.c_str());
    OTFR        = new vpcl::re_register(0x0010, this, "OTFR"       , name.c_str());
    OTSTR       = new vpcl::re_register(0x0014, this, "OTSTR"      , name.c_str());
    OTDR        = new vpcl::re_register(0x0018, this, "OTDR"       , name.c_str());
    HTBRAU      = new vpcl::re_register(0x001C, this, "HTBRAU"     , name.c_str());
    HTBRAL      = new vpcl::re_register(0x0020, this, "HTBRAL"     , name.c_str());
    HTBRBU      = new vpcl::re_register(0x0024, this, "HTBRBU"     , name.c_str());
    HTBRBL      = new vpcl::re_register(0x0028, this, "HTBRBL"     , name.c_str());
    LTBRAU      = new vpcl::re_register(0x002C, this, "LTBRAU"     , name.c_str());
    LTBRAL      = new vpcl::re_register(0x0030, this, "LTBRAL"     , name.c_str());
    TDLR        = new vpcl::re_register(0x0034, this, "TDLR"       , name.c_str());
    COEFFRA     = new vpcl::re_register(0x0038, this, "COEFFRA"    , name.c_str());
    COEFFRB     = new vpcl::re_register(0x003C, this, "COEFFRB"    , name.c_str());
    COEFFRC     = new vpcl::re_register(0x0040, this, "COEFFRC"    , name.c_str());
    COEFFSR     = new vpcl::re_register(0x0080, this, "COEFFSR"    , name.c_str());
    COEFFTUNERA = new vpcl::re_register(0x0084, this, "COEFFTUNERA", name.c_str());
    COEFFTUNERB = new vpcl::re_register(0x0088, this, "COEFFTUNERB", name.c_str());
    COEFFTUNERC = new vpcl::re_register(0x008C, this, "COEFFTUNERC", name.c_str());
    TSTRA       = new vpcl::re_register(0x0090, this, "TSTRA"      , name.c_str());
    TSTRB       = new vpcl::re_register(0x0094, this, "TSTRB"      , name.c_str());
    TSTRC       = new vpcl::re_register(0x0098, this, "TSTRC"      , name.c_str());
    TSTRD       = new vpcl::re_register(0x009C, this, "TSTRD"      , name.c_str());
    SDIAGCTL    = new vpcl::re_register(0x00A0, this, "SDIAGCTL"   , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index++;
    mRegMap[0x000C]     = index++;
    mRegMap[0x0010]     = index++;
    mRegMap[0x0014]     = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0080]     = index++;
    mRegMap[0x0084]     = index;
    mRegMap[0x0084 + 1] = index;
    mRegMap[0x0084 + 2] = index;
    mRegMap[0x0084 + 3] = index++;
    mRegMap[0x0088]     = index;
    mRegMap[0x0088 + 1] = index;
    mRegMap[0x0088 + 2] = index;
    mRegMap[0x0088 + 3] = index++;
    mRegMap[0x008C]     = index;
    mRegMap[0x008C + 1] = index;
    mRegMap[0x008C + 2] = index;
    mRegMap[0x008C + 3] = index++;
    mRegMap[0x0090]     = index++;
    mRegMap[0x0094]     = index++;
    mRegMap[0x0098]     = index++;
    mRegMap[0x009C]     = index++;
    mRegMap[0x00A0]     = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef USE_CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(OTSTCR       , mCurReg, 0,  1,       "8",       "8", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(OTSTCR       , mCurReg, 0,  1,       "8",       "8");
#endif
    mCurReg = mRegArray[index++] = new SRegList(OTENDCR      , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(OTCR         , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(OTFCR        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(OTFR         , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(OTSTR        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(OTDR         , mCurReg, 0,  2,      "16",      "16");
    mCurReg = mRegArray[index++] = new SRegList(HTBRAU       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(HTBRAL       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(HTBRBU       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(HTBRBL       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LTBRAU       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(LTBRAL       , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(TDLR         , mCurReg, 0,  2,    "8|16",    "8|16");
    mCurReg = mRegArray[index++] = new SRegList(COEFFRA      , mCurReg, 0,  4,   "16|32",   "16|32");
    mCurReg = mRegArray[index++] = new SRegList(COEFFRB      , mCurReg, 0,  4,   "16|32",   "16|32");
    mCurReg = mRegArray[index++] = new SRegList(COEFFRC      , mCurReg, 0,  4,   "16|32",   "16|32");
    mCurReg = mRegArray[index++] = new SRegList(COEFFSR      , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(COEFFTUNERA  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(COEFFTUNERB  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(COEFFTUNERC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TSTRA        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(TSTRB        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(TSTRC        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(TSTRD        , mCurReg, 0,  1,       "8",       "8");
    mCurReg = mRegArray[index++] = new SRegList(SDIAGCTL     , mCurReg, 0,  1,       "8",       "8");

    mRegList = mCurReg;

    (*OTSTCR       ) ( 0,  0, "OTST"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OTENDCR      ) ( 0,  0, "OTEND"   , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OTCR         ) ( 4,  4, "OTEE"    , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTCR         ) ( 3,  3, "OTULIE"  , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTCR         ) ( 2,  2, "OTABEE"  , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTCR         ) ( 1,  1, "SDE"     , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTCR         ) ( 0,  0, "OTMD"    , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTFCR        ) ( 2,  2, "SDERC"   , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OTFCR        ) ( 0,  0, "OTFC"    , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*OTFR         ) ( 2,  2, "SDER"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OTFR         ) ( 1,  1, "OTACT"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OTFR         ) ( 0,  0, "OTF"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OTSTR        ) ( 1,  0, "TSTAT"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*OTDR         ) (15, 15, "SIGN"    , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*OTDR         ) (14,  0, "OTDR"    , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*HTBRAU       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*HTBRAU       ) (14,  0, "HTBAU"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*HTBRAL       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*HTBRAL       ) (14,  0, "HTBAL"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*HTBRBU       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*HTBRBU       ) (14,  0, "HTBBU"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*HTBRBL       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*HTBRBL       ) (14,  0, "HTBBL"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*LTBRAU       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*LTBRAU       ) (14,  0, "LTBAU"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*LTBRAL       ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*LTBRAL       ) (14,  0, "LTBAL"   , 0x0       , "D"     , vpcl::SPP_ENABLE);
    (*TDLR         ) (15, 15, "SIGN"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*TDLR         ) (14,  0, "TDL"     , 0x7FFF    , "D"     , vpcl::SPP_ENABLE);
    (*COEFFRA      ) (15, 15, "SIGN"    , ((coeffra & 0x8000)>>15), "D"     , vpcl::SPP_ENABLE);
    (*COEFFRA      ) (14,  0, "COEFFRA" , (coeffra & 0x7FFF)      , "D"     , vpcl::SPP_ENABLE);
    (*COEFFRB      ) (15, 15, "SIGN"    , ((coeffrb & 0x8000)>>15), "D"     , vpcl::SPP_ENABLE);
    (*COEFFRB      ) (14,  0, "COEFFRB" , (coeffrb & 0x7FFF)      , "D"     , vpcl::SPP_ENABLE);
    (*COEFFRC      ) (15, 15, "SIGN"    , ((coeffrc & 0x8000)>>15), "D"     , vpcl::SPP_ENABLE);
    (*COEFFRC      ) (14,  0, "COEFFRC" , (coeffrc & 0x7FFF)      , "D"     , vpcl::SPP_ENABLE);
    (*COEFFSR      ) ( 0,  0, "COEFFS"  , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*COEFFTUNERA  ) (15,  0, "COEFFTUNERA", 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*COEFFTUNERB  ) (15,  0, "COEFFTUNERB", 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*COEFFTUNERC  ) (15,  0, "COEFFTUNERC", 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRA        ) ( 7,  7, "OVSR"    , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRA        ) ( 6,  6, "EXANMD"  , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRA        ) ( 5,  5, "OCCHP"   , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRA        ) ( 4,  4, "AMPCHP"  , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRA        ) ( 3,  0, "TEST"    , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRB        ) ( 1,  0, "ONDO"    , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRC        ) ( 3,  0, "IBIAS"   , 0x0       , "W|R"   , vpcl::SPP_DISABLE);
    (*TSTRD        ) ( 0,  0, "FFCHK"   , 0x0       , "R"     , vpcl::SPP_DISABLE);
    (*SDIAGCTL     ) ( 1,  0, "ADCIN"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["OTSTCR"   ]["OTST"     ] = &Cots_regif::cb_OTSTCR_OTST;
    mWrCbAPI["OTENDCR"  ]["OTEND"    ] = &Cots_regif::cb_OTENDCR_OTEND;
    mWrCbAPI["OTFCR"    ]["SDERC"    ] = &Cots_regif::cb_OTFCR_SDERC;
    InitLocalVal();
    #ifdef USE_WEB_SIM
    InitializeRegValueID();
    mNotifyRegValueIDAPI = &Cots_regif::NotifyRegValueID;
    #endif
}

/// Destructor: delete pointers
/// @return none
Cots_regif::~Cots_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Cots_regif::uint Cots_regif::bit_select(cuint val,    ///< [in] Writting address
                                        cuint start,  ///< [in] start bit position
                                        cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cots_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                        const unsigned char *p_data,   ///< [in] Writing data
                        cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cots_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                        unsigned char *p_data,   ///< [out] Reading data
                        cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cots_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cots_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cots_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                const unsigned char *p_data,  ///< [in] Writing data
                                cuint size,                   ///< [in] Data size (byte)
                                bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cots_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size,              ///< [in]  Data size (byte)
                                bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cots_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                             unsigned char *p_data,          ///< [out] Reading data
                             cuint size,                     ///< [in]  Data size (byte)
                             cuint reg_index,                ///< [in]  Register index
                             bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    if (!IsDbgFunc) {
        if (mIsReset) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            
            pst_data = Register->read();

        }
    }
    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cots_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                             const unsigned char *p_data,      ///< [in] Writing data
                             cuint size,                       ///< [in] Data size (byte)
                             cuint reg_index,                  ///< [in] Register index
                             bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cots_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cots_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cots_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cots_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

#ifdef USE_WEB_SIM
/// Build register value ID library
/// @return none
void Cots_regif::InitializeRegValueID()
{//{{{
    vpcl::bit_info* bit_ref[emBitNum] = { };

    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        // Construct bit_info array
        mBitInfoPtr[bit] = bit_ref[bit];
        // Initial value of target bits
        mTargetRegVal[bit] = *(mBitInfoPtr[bit]);
    }

    // Construct mRegValueIDLib
    int bit_val[emRegIDNum][emBitNum] = { };

}//}}}

/// Calculate register value
/// @return none
void Cots_regif::CalcTargetRegVal(void)
{//{{{
    bool is_update = false;
    unsigned int value = 0;
    for (unsigned int bit = 0; bit < emBitNum; bit++) {
        value = *(mBitInfoPtr[bit]);
        if (mTargetRegVal[bit] != value) {
            mTargetRegVal[bit] = value;
            is_update = true;
        }
    }
    if (is_update) {
        IssueRegValueID();
    }
}//}}}

/// Send register value ID to IP core
/// @return none
void Cots_regif::IssueRegValueID(void)
{//{{{
    for (unsigned int id = 0; id < emRegIDNum; id++) {
        unsigned int bit;
        for (bit = 0; bit < emBitNum; bit++) {
            if (mRegValueIDLib[bit].BitVal[bit] > -1) { // In case that BitVal = "-" (dont care)
                if (mTargetRegVal[bit] != (unsigned int)mRegValueIDLib[id].BitVal[bit]) {
                    bit = emBitNum + 1; // Break the loop
                }
            }
        }
        // when all fields of current ID are matched, issue RegValueID
        if (bit == emBitNum) {
            (this->*(mNotifyRegValueIDAPI))(mRegValueIDLib[id].RegValueID);
            id = emRegIDNum; // Break the loop
        }
    }
}//}}}
#endif

/// Initialize local variables
/// @return none
void Cots_regif::InitLocalVal()
{
    // Initialize local variables
    OTSTCR_OTST = 0x0;
    OTENDCR_OTEND = 0x0;
    OTCR_OTEE   = 0x0;
    OTCR_OTULIE = 0x0;
    OTCR_OTABEE = 0x0;
    OTCR_SDE    = 0x0;
    OTCR_OTMD   = 0x0;
    OTFCR_SDERC = 0x0;
    OTFCR_OTFC  = 0x0;
    OTFR_SDER   = 0x0;
    OTFR_OTACT  = 0x0;
    OTFR_OTF    = 0x0;
    OTSTR_TSTAT = 0x0;
    OTDR_SIGN   = 0x0;
    OTDR_OTDR   = 0x0;
    HTBRAU_SIGN = 0x0;
    HTBRAU_HTBAU = 0x0;
    HTBRAL_SIGN = 0x0;
    HTBRAL_HTBAL = 0x0;
    HTBRBU_SIGN = 0x0;
    HTBRBU_HTBBU = 0x0;
    HTBRBL_SIGN = 0x0;
    HTBRBL_HTBBL = 0x0;
    LTBRAU_SIGN = 0x0;
    LTBRAU_LTBAU = 0x0;
    LTBRAL_SIGN = 0x0;
    LTBRAL_LTBAL = 0x0;
    TDLR_SIGN   = 0x0;
    TDLR_TDL    = 0x7FFF;
    COEFFRA_SIGN = 0x0;
    COEFFRA_COEFFRA = 0x0;
    COEFFRB_SIGN = 0x0;
    COEFFRB_COEFFRB = 0x0;
    COEFFRC_SIGN = 0x0;
    COEFFRC_COEFFRC = 0x0;
    COEFFSR_COEFFS = 0x0;
    COEFFTUNERA_COEFFTUNERA = 0x0;
    COEFFTUNERB_COEFFTUNERB = 0x0;
    COEFFTUNERC_COEFFTUNERC = 0x0;
    TSTRA_OVSR  = 0x0;
    TSTRA_EXANMD = 0x0;
    TSTRA_OCCHP = 0x0;
    TSTRA_AMPCHP = 0x0;
    TSTRA_TEST  = 0x0;
    TSTRB_ONDO  = 0x0;
    TSTRC_IBIAS = 0x0;
    TSTRD_FFCHK = 0x0;
    SDIAGCTL_ADCIN = 0x0;
}

/// Update bit value to local value
/// @return None
void Cots_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        OTSTCR_OTST                     = (*OTSTCR     )["OTST"       ];
        return;
    }
    if (addr == 0x0004) {
        OTENDCR_OTEND                   = (*OTENDCR    )["OTEND"      ];
        return;
    }
    if (addr == 0x0008) {
        OTCR_OTEE                       = (*OTCR       )["OTEE"       ];
        OTCR_OTULIE                     = (*OTCR       )["OTULIE"     ];
        OTCR_OTABEE                     = (*OTCR       )["OTABEE"     ];
        OTCR_SDE                        = (*OTCR       )["SDE"        ];
        OTCR_OTMD                       = (*OTCR       )["OTMD"       ];
        return;
    }
    if (addr == 0x000C) {
        OTFCR_SDERC                     = (*OTFCR      )["SDERC"      ];
        OTFCR_OTFC                      = (*OTFCR      )["OTFC"       ];
        return;
    }
    if (addr == 0x0010) {
        OTFR_SDER                       = (*OTFR       )["SDER"       ];
        OTFR_OTACT                      = (*OTFR       )["OTACT"      ];
        OTFR_OTF                        = (*OTFR       )["OTF"        ];
        return;
    }
    if (addr == 0x0014) {
        OTSTR_TSTAT                     = (*OTSTR      )["TSTAT"      ];
        return;
    }
    if (addr == 0x0018) {
        OTDR_SIGN                       = (*OTDR       )["SIGN"       ];
        OTDR_OTDR                       = (*OTDR       )["OTDR"       ];
        return;
    }
    if (addr == 0x001C) {
        HTBRAU_SIGN                     = (*HTBRAU     )["SIGN"       ];
        HTBRAU_HTBAU                    = (*HTBRAU     )["HTBAU"      ];
        return;
    }
    if (addr == 0x0020) {
        HTBRAL_SIGN                     = (*HTBRAL     )["SIGN"       ];
        HTBRAL_HTBAL                    = (*HTBRAL     )["HTBAL"      ];
        return;
    }
    if (addr == 0x0024) {
        HTBRBU_SIGN                     = (*HTBRBU     )["SIGN"       ];
        HTBRBU_HTBBU                    = (*HTBRBU     )["HTBBU"      ];
        return;
    }
    if (addr == 0x0028) {
        HTBRBL_SIGN                     = (*HTBRBL     )["SIGN"       ];
        HTBRBL_HTBBL                    = (*HTBRBL     )["HTBBL"      ];
        return;
    }
    if (addr == 0x002C) {
        LTBRAU_SIGN                     = (*LTBRAU     )["SIGN"       ];
        LTBRAU_LTBAU                    = (*LTBRAU     )["LTBAU"      ];
        return;
    }
    if (addr == 0x0030) {
        LTBRAL_SIGN                     = (*LTBRAL     )["SIGN"       ];
        LTBRAL_LTBAL                    = (*LTBRAL     )["LTBAL"      ];
        return;
    }
    if (addr == 0x0034) {
        TDLR_SIGN                       = (*TDLR       )["SIGN"       ];
        TDLR_TDL                        = (*TDLR       )["TDL"        ];
        return;
    }
    if (addr == 0x0038) {
        COEFFRA_SIGN                    = (*COEFFRA    )["SIGN"       ];
        COEFFRA_COEFFRA                 = (*COEFFRA    )["COEFFRA"    ];
        return;
    }
    if (addr == 0x003C) {
        COEFFRB_SIGN                    = (*COEFFRB    )["SIGN"       ];
        COEFFRB_COEFFRB                 = (*COEFFRB    )["COEFFRB"    ];
        return;
    }
    if (addr == 0x0040) {
        COEFFRC_SIGN                    = (*COEFFRC    )["SIGN"       ];
        COEFFRC_COEFFRC                 = (*COEFFRC    )["COEFFRC"    ];
        return;
    }
    if (addr == 0x0080) {
        COEFFSR_COEFFS                  = (*COEFFSR    )["COEFFS"     ];
        return;
    }
    if (addr == 0x0084) {
        COEFFTUNERA_COEFFTUNERA         = (*COEFFTUNERA)["COEFFTUNERA"];
        return;
    }
    if (addr == 0x0088) {
        COEFFTUNERB_COEFFTUNERB         = (*COEFFTUNERB)["COEFFTUNERB"];
        return;
    }
    if (addr == 0x008C) {
        COEFFTUNERC_COEFFTUNERC         = (*COEFFTUNERC)["COEFFTUNERC"];
        return;
    }
    if (addr == 0x0090) {
        TSTRA_OVSR                      = (*TSTRA      )["OVSR"       ];
        TSTRA_EXANMD                    = (*TSTRA      )["EXANMD"     ];
        TSTRA_OCCHP                     = (*TSTRA      )["OCCHP"      ];
        TSTRA_AMPCHP                    = (*TSTRA      )["AMPCHP"     ];
        TSTRA_TEST                      = (*TSTRA      )["TEST"       ];
        return;
    }
    if (addr == 0x0094) {
        TSTRB_ONDO                      = (*TSTRB      )["ONDO"       ];
        return;
    }
    if (addr == 0x0098) {
        TSTRC_IBIAS                     = (*TSTRC      )["IBIAS"      ];
        return;
    }
    if (addr == 0x009C) {
        TSTRD_FFCHK                     = (*TSTRD      )["FFCHK"      ];
        return;
    }
    if (addr == 0x00A0) {
        SDIAGCTL_ADCIN                  = (*SDIAGCTL   )["ADCIN"      ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cots_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*OTSTCR     )["OTST"       ] = OTSTCR_OTST;
        return;
    }
    if (addr == 0x0004) {
        (*OTENDCR    )["OTEND"      ] = OTENDCR_OTEND;
        return;
    }
    if (addr == 0x0008) {
        (*OTCR       )["OTEE"       ] = OTCR_OTEE;
        (*OTCR       )["OTULIE"     ] = OTCR_OTULIE;
        (*OTCR       )["OTABEE"     ] = OTCR_OTABEE;
        (*OTCR       )["SDE"        ] = OTCR_SDE;
        (*OTCR       )["OTMD"       ] = OTCR_OTMD;
        return;
    }
    if (addr == 0x000C) {
        (*OTFCR      )["SDERC"      ] = OTFCR_SDERC;
        (*OTFCR      )["OTFC"       ] = OTFCR_OTFC;
        return;
    }
    if (addr == 0x0010) {
        (*OTFR       )["SDER"       ] = OTFR_SDER;
        (*OTFR       )["OTACT"      ] = OTFR_OTACT;
        (*OTFR       )["OTF"        ] = OTFR_OTF;
        return;
    }
    if (addr == 0x0014) {
        (*OTSTR      )["TSTAT"      ] = OTSTR_TSTAT;
        return;
    }
    if (addr == 0x0018) {
        (*OTDR       )["SIGN"       ] = OTDR_SIGN;
        (*OTDR       )["OTDR"       ] = OTDR_OTDR;
        return;
    }
    if (addr == 0x001C) {
        (*HTBRAU     )["SIGN"       ] = HTBRAU_SIGN;
        (*HTBRAU     )["HTBAU"      ] = HTBRAU_HTBAU;
        return;
    }
    if (addr == 0x0020) {
        (*HTBRAL     )["SIGN"       ] = HTBRAL_SIGN;
        (*HTBRAL     )["HTBAL"      ] = HTBRAL_HTBAL;
        return;
    }
    if (addr == 0x0024) {
        (*HTBRBU     )["SIGN"       ] = HTBRBU_SIGN;
        (*HTBRBU     )["HTBBU"      ] = HTBRBU_HTBBU;
        return;
    }
    if (addr == 0x0028) {
        (*HTBRBL     )["SIGN"       ] = HTBRBL_SIGN;
        (*HTBRBL     )["HTBBL"      ] = HTBRBL_HTBBL;
        return;
    }
    if (addr == 0x002C) {
        (*LTBRAU     )["SIGN"       ] = LTBRAU_SIGN;
        (*LTBRAU     )["LTBAU"      ] = LTBRAU_LTBAU;
        return;
    }
    if (addr == 0x0030) {
        (*LTBRAL     )["SIGN"       ] = LTBRAL_SIGN;
        (*LTBRAL     )["LTBAL"      ] = LTBRAL_LTBAL;
        return;
    }
    if (addr == 0x0034) {
        (*TDLR       )["SIGN"       ] = TDLR_SIGN;
        (*TDLR       )["TDL"        ] = TDLR_TDL;
        return;
    }
    if (addr == 0x0038) {
        (*COEFFRA    )["SIGN"       ] = COEFFRA_SIGN;
        (*COEFFRA    )["COEFFRA"    ] = COEFFRA_COEFFRA;
        return;
    }
    if (addr == 0x003C) {
        (*COEFFRB    )["SIGN"       ] = COEFFRB_SIGN;
        (*COEFFRB    )["COEFFRB"    ] = COEFFRB_COEFFRB;
        return;
    }
    if (addr == 0x0040) {
        (*COEFFRC    )["SIGN"       ] = COEFFRC_SIGN;
        (*COEFFRC    )["COEFFRC"    ] = COEFFRC_COEFFRC;
        return;
    }
    if (addr == 0x0080) {
        (*COEFFSR    )["COEFFS"     ] = COEFFSR_COEFFS;
        return;
    }
    if (addr == 0x0084) {
        (*COEFFTUNERA)["COEFFTUNERA"] = COEFFTUNERA_COEFFTUNERA;
        return;
    }
    if (addr == 0x0088) {
        (*COEFFTUNERB)["COEFFTUNERB"] = COEFFTUNERB_COEFFTUNERB;
        return;
    }
    if (addr == 0x008C) {
        (*COEFFTUNERC)["COEFFTUNERC"] = COEFFTUNERC_COEFFTUNERC;
        return;
    }
    if (addr == 0x0090) {
        (*TSTRA      )["OVSR"       ] = TSTRA_OVSR;
        (*TSTRA      )["EXANMD"     ] = TSTRA_EXANMD;
        (*TSTRA      )["OCCHP"      ] = TSTRA_OCCHP;
        (*TSTRA      )["AMPCHP"     ] = TSTRA_AMPCHP;
        (*TSTRA      )["TEST"       ] = TSTRA_TEST;
        return;
    }
    if (addr == 0x0094) {
        (*TSTRB      )["ONDO"       ] = TSTRB_ONDO;
        return;
    }
    if (addr == 0x0098) {
        (*TSTRC      )["IBIAS"      ] = TSTRC_IBIAS;
        return;
    }
    if (addr == 0x009C) {
        (*TSTRD      )["FFCHK"      ] = TSTRD_FFCHK;
        return;
    }
    if (addr == 0x00A0) {
        (*SDIAGCTL   )["ADCIN"      ] = SDIAGCTL_ADCIN;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cots_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cots_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cots_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cots_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cots_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cots_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cots_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USE_CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cots_regif::uint Cots_regif::rd_cb(cuint addr)
{
    #ifdef USE_CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cots_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    } else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cots_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cots_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cots_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if (is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USE_CWR_SYSTEMC
uint Cots_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

uint Cots_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Cots_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
