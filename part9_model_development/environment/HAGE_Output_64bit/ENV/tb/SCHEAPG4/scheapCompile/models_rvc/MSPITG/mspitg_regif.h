// -----------------------------------------------------------------------------
// $Id: mspitg_regif.h,v 1.3 2020/02/08 11:00:27 ducla Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// Description: Copyright of mspitg_regif.h
// Ref: {MSPITG_DD_Copyright_001}
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : mspitg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE MSPITG
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         6
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name            reg_name        wsize     rsize    length   offset   factor_start  factor_end  factor_index factor_step     access  init        support     callback
//     %%REG    -      MSPITGCTLn      MSPITGCTLn      8|16|32    8|16|32  32       0x0      0              9          -             0x4             R|W     0x0000      TRUE         W
//     %%REG    -      MSPITGDMAALT    MSPITGDMAALT    8|16|32    8|16|32  32       0x28     -              -          -             -             R|W     0x0000      TRUE         W
//     %%REG    -      MSPITGDTSALT    MSPITGDTSALT    8|16|32    8|16|32  32       0x2c     -              -          -             -             R|W     0x0000      TRUE         W
// 
//         
// 
// %REG_NAME    MSPITGCTLn
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        TRGSEL0                0        0            0x0         R|W            TRUE        W        
//     %%BIT        SRCSEL0                3        1            0x0         R|W            TRUE        -        
//     %%BIT        TRGSEL1                4        4            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL1                7        5            0x0         R|W            TRUE        -        
//     %%BIT        TRGSEL2                8        8            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL2                11        9            0x0         R|W            TRUE        -        
//     %%BIT        TRGSEL3                12        12            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL3                15        13            0x0         R|W            TRUE        -    
//     %%BIT        TRGSEL4                16        16            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL4                19        17            0x0         R|W            TRUE        -    
//     %%BIT        TRGSEL5                20        20            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL5                23        21            0x0         R|W            TRUE        -    
//     %%BIT        TRGSEL6                24        24            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL6                27        25            0x0         R|W            TRUE        -    
//     %%BIT        TRGSEL7                28        28            0x0         R|W            TRUE        -        
//     %%BIT        SRCSEL7                31        29            0x0         R|W            TRUE        -        
// 
// %REG_NAME   MSPITGDMAALT    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        DMAAS02                0        0            0x0         R|W            TRUE        W        
//     %%BIT        DMAAS03             1        1            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS06             2        2            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS07                3        3            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS12             4        4            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS13             5        5            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS16             6        6            0x0         R|W            TRUE        -        
//     %%BIT        DMAAS17             7        7            0x0         R|W            TRUE        -            
//             
// %REG_NAME   MSPITGDTSALT    
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT        DTSAS06                0        0            0x0         R|W         TRUE        W    
//     %%BIT        DTSAS07                1        1            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS14                2        2            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS15                3        3            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS16                4        4            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS17                5        5            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS24                6        6            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS25                7        7            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS26                8        8            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS27                9        9            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS34                10        10            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS35                11        11            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS36                12        12            0x0         R|W         TRUE        -    
//     %%BIT        DTSAS37                13        13            0x0         R|W         TRUE        -        
//         
////////////////////////////////////////////////////////////////////////////////
/// @file mspitg_regif.h
/// @brief Register IF class of model MSPITG
/// $Id: mspitg_regif.h,v 1.3 2020/02/08 11:00:27 ducla Exp $
/// $Date: 2020/02/08 11:00:27 $
/// $Revison$
/// $Author: ducla $
////////////////////////////////////////////////////////////////////////////////
#ifndef __MSPITG_REGIF_H__
#define __MSPITG_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of MSPITG model
class Cmspitg_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_MSPITGCTLn   = 10
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cmspitg_regif(std::string name, uint buswidth);
    ~Cmspitg_regif();

protected:
    vpcl::re_register *MSPITGCTLn  [10];
    vpcl::re_register *MSPITGDMAALT;
    vpcl::re_register *MSPITGDTSALT;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_MSPITGCTLn  [10];
    scml2::reg<uint> *CW_MSPITGDMAALT;
    scml2::reg<uint> *CW_MSPITGDTSALT;
    #endif

    uint MSPITGCTLn_TRGSEL0[10];
    uint MSPITGCTLn_SRCSEL0[10];
    uint MSPITGCTLn_TRGSEL1[10];
    uint MSPITGCTLn_SRCSEL1[10];
    uint MSPITGCTLn_TRGSEL2[10];
    uint MSPITGCTLn_SRCSEL2[10];
    uint MSPITGCTLn_TRGSEL3[10];
    uint MSPITGCTLn_SRCSEL3[10];
    uint MSPITGCTLn_TRGSEL4[10];
    uint MSPITGCTLn_SRCSEL4[10];
    uint MSPITGCTLn_TRGSEL5[10];
    uint MSPITGCTLn_SRCSEL5[10];
    uint MSPITGCTLn_TRGSEL6[10];
    uint MSPITGCTLn_SRCSEL6[10];
    uint MSPITGCTLn_TRGSEL7[10];
    uint MSPITGCTLn_SRCSEL7[10];
    uint MSPITGDMAALT_DMAAS02;
    uint MSPITGDMAALT_DMAAS03;
    uint MSPITGDMAALT_DMAAS06;
    uint MSPITGDMAALT_DMAAS07;
    uint MSPITGDMAALT_DMAAS12;
    uint MSPITGDMAALT_DMAAS13;
    uint MSPITGDMAALT_DMAAS16;
    uint MSPITGDMAALT_DMAAS17;
    uint MSPITGDTSALT_DTSAS06;
    uint MSPITGDTSALT_DTSAS07;
    uint MSPITGDTSALT_DTSAS14;
    uint MSPITGDTSALT_DTSAS15;
    uint MSPITGDTSALT_DTSAS16;
    uint MSPITGDTSALT_DTSAS17;
    uint MSPITGDTSALT_DTSAS24;
    uint MSPITGDTSALT_DTSAS25;
    uint MSPITGDTSALT_DTSAS26;
    uint MSPITGDTSALT_DTSAS27;
    uint MSPITGDTSALT_DTSAS34;
    uint MSPITGDTSALT_DTSAS35;
    uint MSPITGDTSALT_DTSAS36;
    uint MSPITGDTSALT_DTSAS37;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_MSPITGCTLn_TRGSEL0(RegCBstr str) = 0;
    virtual void cb_MSPITGDMAALT_DMAAS02(RegCBstr str) = 0;
    virtual void cb_MSPITGDTSALT_DTSAS06(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cmspitg_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cmspitg_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__MSPITG_REG_DEF_H__
