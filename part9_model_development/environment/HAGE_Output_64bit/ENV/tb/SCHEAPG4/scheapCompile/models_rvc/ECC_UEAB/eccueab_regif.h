// -----------------------------------------------------------------------------
// $Id: eccueab_regif.h,v 1.0 2013/08/07 10:02:20 dungvannguyen Exp $
//
// Copyright(c) 2010-2013 Renesas Electronics Corporation
// Copyright(c) 2010-2013 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_h.skl 1.29 2014/05/09 02:57:13 sontran
//
// Input file : eccueab_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECCUEAB
//     #                 name       offset_size
//     %%REG_INSTANCE    reg_def        8
// 
// %REG_CHANNEL reg_def
//     %%TITLE     group   name        reg_name     wsize    rsize    length   offset  factor_start  factor_end  factor_index  access   init  support  callback
//     %%REG       -       ERRINT      ERRINT      8|16|32  8|16|32   32       0x0         -           -             -         W|R       0     TRUE     -
//     %%REG       -       SSTCLR      SSTCLR      8|16|32  8|16|32   32       0x4         -           -             -         W         0     TRUE     -
//     %%REG       -       DSTCLR      DSTCLR      8|16|32  8|16|32   32       0x8         -           -             -         W         0     TRUE     -
//     %%REG       -       OVFSTR      OVFSTR      8|16|32  8|16|32   32       0xC         -           -             -         R         0     TRUE     -
//     %%REG       -       SERSTR      SERSTR      8|16|32  8|16|32   32       0x20        -           -             -         R         0     TRUE     -
//     %%REG       -       DERSTR      DERSTR      8|16|32  8|16|32   32       0x30        -           -             -         R         0     TRUE     -
//     %%REG       -       SEADR       SEADR            32  8|16|32   32       0x40        0           31            -         R         0     TRUE     -
//     %%REG       -       DEADR00     DEADR00          32  8|16|32   32       0xC0        -           -             -         R         0     TRUE     -
// 
// %REG_NAME ERRINT
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDIE       0      0      0     W|R      TRUE     -
//     %%BIT    DEDIE       1      1      0     W|R      TRUE     -
//     %%BIT    APEIE       2      2      0     W|R      TRUE     -
//     %%BIT    ASEDIE      4      4      0     W|R      TRUE     -
//     %%BIT    ADEDIE      5      5      0     W|R      TRUE     -
//     %%BIT    SEOVFIE     6      6      0     W|R      TRUE     -
// 
// %REG_NAME SSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SSTCLR00    0      0      0     W        TRUE     W
//     %%BIT    SSTCLR01    1      1      0     W        TRUE     -
//     %%BIT    SSTCLR02    2      2      0     W        TRUE     -
//     %%BIT    SSTCLR03    3      3      0     W        TRUE     -
//     %%BIT    SSTCLR04    4      4      0     W        TRUE     -
//     %%BIT    SSTCLR05    5      5      0     W        TRUE     -
//     %%BIT    SSTCLR06    6      6      0     W        TRUE     -
//     %%BIT    SSTCLR07    7      7      0     W        TRUE     -
//     %%BIT    SSTCLR08    8      8      0     W        TRUE     -
//     %%BIT    SSTCLR09    9      9      0     W        TRUE     -
//     %%BIT    SSTCLR10    10     10     0     W        TRUE     -
//     %%BIT    SSTCLR11    11     11     0     W        TRUE     -
//     %%BIT    SSTCLR12    12     12     0     W        TRUE     -
//     %%BIT    SSTCLR13    13     13     0     W        TRUE     -
//     %%BIT    SSTCLR14    14     14     0     W        TRUE     -
//     %%BIT    SSTCLR15    15     15     0     W        TRUE     -
//     %%BIT    SSTCLR16    16     16     0     W        TRUE     -
//     %%BIT    SSTCLR17    17     17     0     W        TRUE     -
//     %%BIT    SSTCLR18    18     18     0     W        TRUE     -
//     %%BIT    SSTCLR19    19     19     0     W        TRUE     -
//     %%BIT    SSTCLR20    20     20     0     W        TRUE     -
//     %%BIT    SSTCLR21    21     21     0     W        TRUE     -
//     %%BIT    SSTCLR22    22     22     0     W        TRUE     -
//     %%BIT    SSTCLR23    23     23     0     W        TRUE     -
//     %%BIT    SSTCLR24    24     24     0     W        TRUE     -
//     %%BIT    SSTCLR25    25     25     0     W        TRUE     -
//     %%BIT    SSTCLR26    26     26     0     W        TRUE     -
//     %%BIT    SSTCLR27    27     27     0     W        TRUE     -
//     %%BIT    SSTCLR28    28     28     0     W        TRUE     -
//     %%BIT    SSTCLR29    29     29     0     W        TRUE     -
//     %%BIT    SSTCLR30    30     30     0     W        TRUE     -
//     %%BIT    SSTCLR31    31     31     0     W        TRUE     -
// 
// %REG_NAME DSTCLR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DSTCLR00    0      0      0     W        TRUE     W
// 
// %REG_NAME OVFSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SERROVF0    0      0      0     R        TRUE     -
// 
// %REG_NAME SERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEDF00      0      0      0     R        TRUE     -
//     %%BIT    SEDF01      1      1      0     R        TRUE     -
//     %%BIT    SEDF02      2      2      0     R        TRUE     -
//     %%BIT    SEDF03      3      3      0     R        TRUE     -
//     %%BIT    SEDF04      4      4      0     R        TRUE     -
//     %%BIT    SEDF05      5      5      0     R        TRUE     -
//     %%BIT    SEDF06      6      6      0     R        TRUE     -
//     %%BIT    SEDF07      7      7      0     R        TRUE     -
//     %%BIT    SEDF08      8      8      0     R        TRUE     -
//     %%BIT    SEDF09      9      9      0     R        TRUE     -
//     %%BIT    SEDF10      10     10     0     R        TRUE     -
//     %%BIT    SEDF11      11     11     0     R        TRUE     -
//     %%BIT    SEDF12      12     12     0     R        TRUE     -
//     %%BIT    SEDF13      13     13     0     R        TRUE     -
//     %%BIT    SEDF14      14     14     0     R        TRUE     -
//     %%BIT    SEDF15      15     15     0     R        TRUE     -
//     %%BIT    SEDF16      16     16     0     R        TRUE     -
//     %%BIT    SEDF17      17     17     0     R        TRUE     -
//     %%BIT    SEDF18      18     18     0     R        TRUE     -
//     %%BIT    SEDF19      19     19     0     R        TRUE     -
//     %%BIT    SEDF20      20     20     0     R        TRUE     -
//     %%BIT    SEDF21      21     21     0     R        TRUE     -
//     %%BIT    SEDF22      22     22     0     R        TRUE     -
//     %%BIT    SEDF23      23     23     0     R        TRUE     -
//     %%BIT    SEDF24      24     24     0     R        TRUE     -
//     %%BIT    SEDF25      25     25     0     R        TRUE     -
//     %%BIT    SEDF26      26     26     0     R        TRUE     -
//     %%BIT    SEDF27      27     27     0     R        TRUE     -
//     %%BIT    SEDF28      28     28     0     R        TRUE     -
//     %%BIT    SEDF29      29     29     0     R        TRUE     -
//     %%BIT    SEDF30      30     30     0     R        TRUE     -
//     %%BIT    SEDF31      31     31     0     R        TRUE     -
// 
// %REG_NAME DERSTR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEDF00      0      0      0     R        TRUE     -
//     %%BIT    APEF00      2      2      0     R        TRUE     -
//     %%BIT    AECSEDF00   4      4      0     R        TRUE     -
//     %%BIT    AECDEDF00   5      5      0     R        TRUE     -
// 
// %REG_NAME SEADR
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    SEADR       31     0      0     R        TRUE     -
// 
// %REG_NAME DEADR00
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    DEADR00     31     0      0     R        TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file eccueab_regif.h
/// @brief Register IF class of model ECCUEAB
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ECCUEAB_REGIF_H__
#define __ECCUEAB_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ECCUEAB model
class Ceccueab_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_SEADR   = 32
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Ceccueab_regif(std::string name, uint buswidth, uint ERRINTInitial = 0);
    ~Ceccueab_regif();

protected:
    vpcl::re_register *ERRINT ;
    vpcl::re_register *SSTCLR ;
    vpcl::re_register *DSTCLR ;
    vpcl::re_register *OVFSTR ;
    vpcl::re_register *SERSTR ;
    vpcl::re_register *DERSTR ;
    vpcl::re_register *SEADR  [32];
    vpcl::re_register *DEADR00;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint> *CW_ERRINT ;
    scml2::reg<uint> *CW_SSTCLR ;
    scml2::reg<uint> *CW_DSTCLR ;
    scml2::reg<uint> *CW_OVFSTR ;
    scml2::reg<uint> *CW_SERSTR ;
    scml2::reg<uint> *CW_DERSTR ;
    scml2::reg<uint> *CW_SEADR  [32];
    scml2::reg<uint> *CW_DEADR00;
    #endif

    uint ERRINT_SEDIE;
    uint ERRINT_DEDIE;
    uint ERRINT_APEIE;
    uint ERRINT_ASEDIE;
    uint ERRINT_ADEDIE;
    uint ERRINT_SEOVFIE;
    uint SSTCLR_SSTCLR00;
    uint SSTCLR_SSTCLR01;
    uint SSTCLR_SSTCLR02;
    uint SSTCLR_SSTCLR03;
    uint SSTCLR_SSTCLR04;
    uint SSTCLR_SSTCLR05;
    uint SSTCLR_SSTCLR06;
    uint SSTCLR_SSTCLR07;
    uint SSTCLR_SSTCLR08;
    uint SSTCLR_SSTCLR09;
    uint SSTCLR_SSTCLR10;
    uint SSTCLR_SSTCLR11;
    uint SSTCLR_SSTCLR12;
    uint SSTCLR_SSTCLR13;
    uint SSTCLR_SSTCLR14;
    uint SSTCLR_SSTCLR15;
    uint SSTCLR_SSTCLR16;
    uint SSTCLR_SSTCLR17;
    uint SSTCLR_SSTCLR18;
    uint SSTCLR_SSTCLR19;
    uint SSTCLR_SSTCLR20;
    uint SSTCLR_SSTCLR21;
    uint SSTCLR_SSTCLR22;
    uint SSTCLR_SSTCLR23;
    uint SSTCLR_SSTCLR24;
    uint SSTCLR_SSTCLR25;
    uint SSTCLR_SSTCLR26;
    uint SSTCLR_SSTCLR27;
    uint SSTCLR_SSTCLR28;
    uint SSTCLR_SSTCLR29;
    uint SSTCLR_SSTCLR30;
    uint SSTCLR_SSTCLR31;
    uint DSTCLR_DSTCLR00;
    uint OVFSTR_SERROVF0;
    uint SERSTR_SEDF00;
    uint SERSTR_SEDF01;
    uint SERSTR_SEDF02;
    uint SERSTR_SEDF03;
    uint SERSTR_SEDF04;
    uint SERSTR_SEDF05;
    uint SERSTR_SEDF06;
    uint SERSTR_SEDF07;
    uint SERSTR_SEDF08;
    uint SERSTR_SEDF09;
    uint SERSTR_SEDF10;
    uint SERSTR_SEDF11;
    uint SERSTR_SEDF12;
    uint SERSTR_SEDF13;
    uint SERSTR_SEDF14;
    uint SERSTR_SEDF15;
    uint SERSTR_SEDF16;
    uint SERSTR_SEDF17;
    uint SERSTR_SEDF18;
    uint SERSTR_SEDF19;
    uint SERSTR_SEDF20;
    uint SERSTR_SEDF21;
    uint SERSTR_SEDF22;
    uint SERSTR_SEDF23;
    uint SERSTR_SEDF24;
    uint SERSTR_SEDF25;
    uint SERSTR_SEDF26;
    uint SERSTR_SEDF27;
    uint SERSTR_SEDF28;
    uint SERSTR_SEDF29;
    uint SERSTR_SEDF30;
    uint SERSTR_SEDF31;
    uint DERSTR_DEDF00;
    uint DERSTR_APEF00;
    uint DERSTR_AECSEDF00;
    uint DERSTR_AECDEDF00;
    uint SEADR_SEADR[32];
    uint DEADR00_DEADR00;

    void EnableReset(const bool is_active, const std::string clock_domain);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_SSTCLR_SSTCLR00(RegCBstr str) = 0;
    virtual void cb_DSTCLR_DSTCLR00(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Ceccueab_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Ceccueab_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ECCUEAB_REG_DEF_H__
