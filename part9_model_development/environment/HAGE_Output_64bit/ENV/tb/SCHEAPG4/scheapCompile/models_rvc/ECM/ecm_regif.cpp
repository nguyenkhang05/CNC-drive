// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2013 Renesas Electronics Corporation
// Copyright(c) 2010-2013 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_cpp.skl 1.52 2014/05/19 02:28:22 sontran
//
// Input file : ecm_regif.txt
////////////////////////////////////////////////////////////////////////////////
// ## ----------------------------------------------------------------------
// ## $Id: ecm_regif.txt,v 1.8 2013/07/23 08:03:11 uyenle
// ##
// ## Copyright(c) 2012 Renesas Electronics Corporation
// ## Copyright(c) 2012 Renesas Design Vietnam Co., Ltd.
// ## RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY
// ## This program must be used solely for the purpose for which
// ## it was furnished by Renesas Electronics Corporation. No part of this
// ## program may be reproduced or disclosed to others, in any
// ## form, without the prior written permission of Renesas Electronics
// ## Corporation.
// ## ----------------------------------------------------------------------
// 
// %MODULE ECM 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  9
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name         reg_name       size       wsize      length  offset    access  init     support  callback
//     %%REG      ECMmESET     ECMmESET       8|16|32    8|16|32    8       0x000      W       0        TRUE     -
//     %%REG      ECMmECLR     ECMmECLR       8|16|32    8|16|32    8       0x004      W       0        TRUE     -
//     %%REG      ECMmESSTR0   ECMmESSTR0     8|16|32    32         32      0x008      R       0        TRUE     -
//     %%REG      ECMmESSTR1   ECMmESSTR1     8|16|32    32         32      0x00C      R       0        TRUE     -
//     %%REG      ECMmESSTR2   ECMmESSTR2     8|16|32    32         32      0x010      R       0        TRUE     -
//     %%REG      ECMmPCMD0    ECMmPCMD0      8|16|32    32         32      0x014      W       0        TRUE     -
//                                                                  
//     %%REG      ECMEPCFG     ECMEPCFG       8|16|32    8|16|32    8       0x100      R|W     0        TRUE     -
//     %%REG      ECMMICFG0    ECMMICFG0      8|16|32    8|16|32    32      0x104      R|W     0        TRUE     -
//     %%REG      ECMMICFG1    ECMMICFG1      8|16|32    8|16|32    32      0x108      R|W     0        TRUE     -
//     %%REG      ECMMICFG2    ECMMICFG2      8|16|32    8|16|32    32      0x10C      R|W     0        TRUE     -
//     %%REG      ECMNMICFG0   ECMNMICFG0     8|16|32    8|16|32    32      0x110      R|W     0        TRUE     -
//     %%REG      ECMNMICFG1   ECMNMICFG1     8|16|32    8|16|32    32      0x114      R|W     0        TRUE     -
//     %%REG      ECMNMICFG2   ECMNMICFG2     8|16|32    8|16|32    32      0x118      R|W     0        TRUE     -
//     %%REG      ECMIRCFG0    ECMIRCFG0      8|16|32    8|16|32    32      0x11C      R|W     1        TRUE     -
//     %%REG      ECMIRCFG1    ECMIRCFG1      8|16|32    8|16|32    32      0x120      R|W     0        TRUE     -
//     %%REG      ECMIRCFG2    ECMIRCFG2      8|16|32    8|16|32    32      0x124      R|W     0        TRUE     -
//     %%REG      ECMEMK0      ECMEMK0        8|16|32    8|16|32    32      0x128      R|W     0        TRUE     -
//     %%REG      ECMEMK1      ECMEMK1        8|16|32    8|16|32    32      0x12C      R|W     0        TRUE     -
//     %%REG      ECMEMK2      ECMEMK2        8|16|32    8|16|32    32      0x130      R|W     0        TRUE     -
//     %%REG      ECMESSTC0    ECMESSTC0      8|16|32    32         32      0x134      W       0        TRUE     -
//     %%REG      ECMESSTC1    ECMESSTC1      8|16|32    32         32      0x138      W       0        TRUE     -
//     %%REG      ECMESSTC2    ECMESSTC2      8|16|32    32         32      0x13C      W       0        TRUE     -
//     %%REG      ECMPCMD1     ECMPCMD1       8|16|32    32         32      0x140      W       0        TRUE     -
//     %%REG      ECMPS        ECMPS          8|16|32    32         8       0x144      R       0        TRUE     -
//     %%REG      ECMPE0       ECMPE0         8|16|32    8|16|32    32      0x148      W       0        TRUE     -
//     %%REG      ECMPE1       ECMPE1         8|16|32    8|16|32    32      0x14C      W       0        TRUE     -
//     %%REG      ECMPE2       ECMPE2         8|16|32    8|16|32    32      0x150      W       0        TRUE     -
//     %%REG      ECMDTMCTL    ECMDTMCTL      8|16|32    8|16|32    8       0x154      R|W     0        TRUE     -
//     %%REG      ECMDTMR      ECMDTMR        8|16|32    16         16      0x158      R       0        TRUE     -
//     %%REG      ECMDTMCMP    ECMDTMCMP      8|16|32    16|32      16      0x15C      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG0   ECMDTMCFG0     8|16|32    8|16|32    32      0x160      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG1   ECMDTMCFG1     8|16|32    8|16|32    32      0x164      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG2   ECMDTMCFG2     8|16|32    8|16|32    32      0x168      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG3   ECMDTMCFG3     8|16|32    8|16|32    32      0x16C      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG4   ECMDTMCFG4     8|16|32    8|16|32    32      0x170      R|W     0        TRUE     -
//     %%REG      ECMDTMCFG5   ECMDTMCFG5     8|16|32    8|16|32    32      0x174      R|W     0        TRUE     -
//     %%REG      ECMEOUTCLRT  ECMEOUTCLRT    8|16|32    16|32      16      0x178      R|W     0        TRUE     -
// 
// %REG_NAME ECMmESET      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmEST        0      0      0     W1      TRUE     W   
// 
// %REG_NAME ECMmECLR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmECT        0      0      0     W1      TRUE     W   
// 
// %REG_NAME ECMmESSTR0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE031    31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE030    30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE029    29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE028    28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE027    27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE026    26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE025    25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE024    24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE023    23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE022    22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE021    21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE020    20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE019    19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE018    18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE017    17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE016    16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE015    15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE014    14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE013    13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE012    12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE011    11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE010    10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE009    9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE008    8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE007    7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE006    6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE005    5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE004    4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE003    3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE002    2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE001    1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE000    0      0      0     R       TRUE     -    
//     
// %REG_NAME ECMmESSTR1     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE131    31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE130    30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE129    29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE128    28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE127    27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE126    26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE125    25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE124    24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE123    23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE122    22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE121    21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE120    20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE119    19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE118    18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE117    17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE116    16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE115    15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE114    14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE113    13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE112    12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE111    11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE110    10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE109    9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE108    8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE107    7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE106    6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE105    5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE104    4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE103    3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE102    2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE101    1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE100    0      0      0     R       TRUE     -    
// 
// %REG_NAME ECMmESSTR2    
//     %%TITLE  name          upper  lower  init  access  support  callback    
//     %%BIT    ECMmSSE231    31     31     0     R       TRUE     -    
//     %%BIT    ECMmSSE230    30     30     0     R       TRUE     -    
//     %%BIT    ECMmSSE229    29     29     0     R       TRUE     -    
//     %%BIT    ECMmSSE228    28     28     0     R       TRUE     -    
//     %%BIT    ECMmSSE227    27     27     0     R       TRUE     -    
//     %%BIT    ECMmSSE226    26     26     0     R       TRUE     -    
//     %%BIT    ECMmSSE225    25     25     0     R       TRUE     -    
//     %%BIT    ECMmSSE224    24     24     0     R       TRUE     -    
//     %%BIT    ECMmSSE223    23     23     0     R       TRUE     -    
//     %%BIT    ECMmSSE222    22     22     0     R       TRUE     -    
//     %%BIT    ECMmSSE221    21     21     0     R       TRUE     -    
//     %%BIT    ECMmSSE220    20     20     0     R       TRUE     -    
//     %%BIT    ECMmSSE219    19     19     0     R       TRUE     -    
//     %%BIT    ECMmSSE218    18     18     0     R       TRUE     -    
//     %%BIT    ECMmSSE217    17     17     0     R       TRUE     -    
//     %%BIT    ECMmSSE216    16     16     0     R       TRUE     -    
//     %%BIT    ECMmSSE215    15     15     0     R       TRUE     -    
//     %%BIT    ECMmSSE214    14     14     0     R       TRUE     -    
//     %%BIT    ECMmSSE213    13     13     0     R       TRUE     -    
//     %%BIT    ECMmSSE212    12     12     0     R       TRUE     -    
//     %%BIT    ECMmSSE211    11     11     0     R       TRUE     -    
//     %%BIT    ECMmSSE210    10     10     0     R       TRUE     -    
//     %%BIT    ECMmSSE209    9      9      0     R       TRUE     -    
//     %%BIT    ECMmSSE208    8      8      0     R       TRUE     -    
//     %%BIT    ECMmSSE207    7      7      0     R       TRUE     -    
//     %%BIT    ECMmSSE206    6      6      0     R       TRUE     -    
//     %%BIT    ECMmSSE205    5      5      0     R       TRUE     -    
//     %%BIT    ECMmSSE204    4      4      0     R       TRUE     -    
//     %%BIT    ECMmSSE203    3      3      0     R       TRUE     -    
//     %%BIT    ECMmSSE202    2      2      0     R       TRUE     -    
//     %%BIT    ECMmSSE201    1      1      0     R       TRUE     -    
//     %%BIT    ECMmSSE200    0      0      0     R       TRUE     -    
// 
// %REG_NAME ECMmPCMD0     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMm0REG       7      0      0     W       TRUE     -    
// 
// %REG_NAME ECMEPCFG      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMSL0         0      0      0     R|W     TRUE     -   
// 
// %REG_NAME ECMMICFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE031     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMMIE030     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMMIE029     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMMIE028     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMMIE027     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMMIE026     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMMIE025     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMMIE024     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMMIE023     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMMIE022     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMMIE021     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMMIE020     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMMIE019     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMMIE018     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMMIE017     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMMIE016     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMMIE015     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMMIE014     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMMIE013     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMMIE012     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMMIE011     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMMIE010     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMMIE009     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMMIE008     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMMIE007     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMMIE006     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMMIE005     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMMIE004     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMMIE003     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMMIE002     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMMIE001     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMMIE000     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMMICFG1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE131     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMMIE130     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMMIE129     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMMIE128     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMMIE127     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMMIE126     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMMIE125     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMMIE124     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMMIE123     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMMIE122     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMMIE121     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMMIE120     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMMIE119     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMMIE118     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMMIE117     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMMIE116     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMMIE115     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMMIE114     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMMIE113     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMMIE112     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMMIE111     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMMIE110     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMMIE109     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMMIE108     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMMIE107     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMMIE106     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMMIE105     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMMIE104     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMMIE103     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMMIE102     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMMIE101     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMMIE100     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMMICFG2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMMIE228     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMMIE227     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMMIE226     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMMIE225     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMMIE224     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMMIE223     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMMIE222     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMMIE221     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMMIE220     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMMIE219     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMMIE218     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMMIE217     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMMIE216     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMMIE215     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMMIE214     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMMIE213     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMMIE212     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMMIE211     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMMIE210     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMMIE209     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMMIE208     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMMIE207     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMMIE206     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMMIE205     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMMIE204     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMMIE203     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMMIE202     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMMIE201     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMMIE200     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMNMICFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE031     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE030     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE029     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE028     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE027     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE026     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE025     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE024     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE023     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE022     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE021     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE020     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE019     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE018     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE017     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE016     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE015     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE014     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE013     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE012     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE011     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE010     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE009     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE008     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE007     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE006     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE005     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE004     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE003     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE002     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE001     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE000     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMNMICFG1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE131     31     31     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE130     30     30     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE129     29     29     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE128     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE127     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE126     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE125     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE124     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE123     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE122     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE121     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE120     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE119     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE118     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE117     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE116     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE115     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE114     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE113     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE112     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE111     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE110     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE109     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE108     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE107     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE106     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE105     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE104     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE103     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE102     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE101     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE100     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMNMICFG2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMNMIE228     28     28     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE227     27     27     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE226     26     26     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE225     25     25     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE224     24     24     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE223     23     23     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE222     22     22     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE221     21     21     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE220     20     20     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE219     19     19     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE218     18     18     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE217     17     17     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE216     16     16     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE215     15     15     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE214     14     14     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE213     13     13     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE212     12     12     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE211     11     11     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE210     10     10     0     R|W     TRUE     -    
//     %%BIT    ECMNMIE209     9      9      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE208     8      8      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE207     7      7      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE206     6      6      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE205     5      5      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE204     4      4      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE203     3      3      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE202     2      2      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE201     1      1      0     R|W     TRUE     -    
//     %%BIT    ECMNMIE200     0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMIRCFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE031      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIRE030      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIRE029      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE028      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE027      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE026      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIRE025      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE024      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE023      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE022      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE021      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE020      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE019      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE018      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE017      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE016      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE015      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE014      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE013      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE012      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE011      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE010      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE009      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE008      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE007      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE006      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE005      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE004      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE003      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE002      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE001      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE000      0      0      1     R|W     TRUE     W    
// 
// %REG_NAME ECMIRCFG1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE131      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMIRE130      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMIRE129      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE128      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE127      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE126      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIRE125      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE124      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE123      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE122      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE121      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE120      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE119      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE118      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE117      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE116      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE115      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE114      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE113      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE112      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE111      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE110      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE109      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE108      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE107      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE106      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE105      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE104      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE103      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE102      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE101      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE100      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMIRCFG2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMIRE229      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMIRE228      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMIRE227      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMIRE226      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMIRE225      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMIRE224      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMIRE223      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMIRE222      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMIRE221      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMIRE220      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMIRE219      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMIRE218      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMIRE217      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMIRE216      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMIRE215      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMIRE214      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMIRE213      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMIRE212      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMIRE211      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMIRE210      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMIRE209      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMIRE208      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMIRE207      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMIRE206      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMIRE205      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMIRE204      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMIRE203      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMIRE202      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMIRE201      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMIRE200      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMEMK0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK031      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMEMK030      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMEMK029      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK028      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK027      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK026      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMEMK025      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK024      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK023      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK022      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK021      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK020      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK019      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK018      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK017      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK016      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK015      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK014      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK013      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK012      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK011      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK010      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK009      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK008      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK007      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK006      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK005      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK004      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK003      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK002      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK001      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK000      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMEMK1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK131      31     31     0     R|W     TRUE     -    
//     %%BIT    ECMEMK130      30     30     0     R|W     TRUE     -    
//     %%BIT    ECMEMK129      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK128      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK127      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK126      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMEMK125      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK124      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK123      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK122      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK121      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK120      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK119      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK118      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK117      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK116      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK115      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK114      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK113      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK112      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK111      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK110      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK109      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK108      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK107      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK106      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK105      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK104      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK103      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK102      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK101      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK100      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMEMK2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMEMK229      29     29     0     R|W     TRUE     -    
//     %%BIT    ECMEMK228      28     28     0     R|W     TRUE     -    
//     %%BIT    ECMEMK227      27     27     0     R|W     TRUE     -    
//     %%BIT    ECMEMK226      26     26     0     R|W     TRUE     -    
//     %%BIT    ECMEMK225      25     25     0     R|W     TRUE     -    
//     %%BIT    ECMEMK224      24     24     0     R|W     TRUE     -    
//     %%BIT    ECMEMK223      23     23     0     R|W     TRUE     -    
//     %%BIT    ECMEMK222      22     22     0     R|W     TRUE     -    
//     %%BIT    ECMEMK221      21     21     0     R|W     TRUE     -    
//     %%BIT    ECMEMK220      20     20     0     R|W     TRUE     -    
//     %%BIT    ECMEMK219      19     19     0     R|W     TRUE     -    
//     %%BIT    ECMEMK218      18     18     0     R|W     TRUE     -    
//     %%BIT    ECMEMK217      17     17     0     R|W     TRUE     -    
//     %%BIT    ECMEMK216      16     16     0     R|W     TRUE     -    
//     %%BIT    ECMEMK215      15     15     0     R|W     TRUE     -    
//     %%BIT    ECMEMK214      14     14     0     R|W     TRUE     -    
//     %%BIT    ECMEMK213      13     13     0     R|W     TRUE     -    
//     %%BIT    ECMEMK212      12     12     0     R|W     TRUE     -    
//     %%BIT    ECMEMK211      11     11     0     R|W     TRUE     -    
//     %%BIT    ECMEMK210      10     10     0     R|W     TRUE     -    
//     %%BIT    ECMEMK209      9      9      0     R|W     TRUE     -    
//     %%BIT    ECMEMK208      8      8      0     R|W     TRUE     -    
//     %%BIT    ECMEMK207      7      7      0     R|W     TRUE     -    
//     %%BIT    ECMEMK206      6      6      0     R|W     TRUE     -    
//     %%BIT    ECMEMK205      5      5      0     R|W     TRUE     -    
//     %%BIT    ECMEMK204      4      4      0     R|W     TRUE     -    
//     %%BIT    ECMEMK203      3      3      0     R|W     TRUE     -    
//     %%BIT    ECMEMK202      2      2      0     R|W     TRUE     -    
//     %%BIT    ECMEMK201      1      1      0     R|W     TRUE     -    
//     %%BIT    ECMEMK200      0      0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMESSTC0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE031    31     31     0     W       TRUE     -    
//     %%BIT    ECMCLSSE030    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE029    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE028    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE027    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE026    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE025    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE024    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE023    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE022    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE021    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE020    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE019    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE018    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE017    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE016    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE015    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE014    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE013    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE012    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE011    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE010    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE009    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE008    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE007    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE006    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE005    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE004    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE003    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE002    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE001    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE000    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMESSTC1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE131    31     31     0     W       TRUE     -    
//     %%BIT    ECMCLSSE130    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE129    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE128    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE127    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE126    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE125    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE124    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE123    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE122    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE121    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE120    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE119    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE118    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE117    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE116    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE115    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE114    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE113    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE112    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE111    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE110    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE109    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE108    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE107    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE106    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE105    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE104    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE103    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE102    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE101    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE100    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMESSTC2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMCLSSE230    30     30     0     W       TRUE     -    
//     %%BIT    ECMCLSSE229    29     29     0     W       TRUE     -    
//     %%BIT    ECMCLSSE228    28     28     0     W       TRUE     -    
//     %%BIT    ECMCLSSE227    27     27     0     W       TRUE     -    
//     %%BIT    ECMCLSSE226    26     26     0     W       TRUE     -    
//     %%BIT    ECMCLSSE225    25     25     0     W       TRUE     -    
//     %%BIT    ECMCLSSE224    24     24     0     W       TRUE     -    
//     %%BIT    ECMCLSSE223    23     23     0     W       TRUE     -    
//     %%BIT    ECMCLSSE222    22     22     0     W       TRUE     -    
//     %%BIT    ECMCLSSE221    21     21     0     W       TRUE     -    
//     %%BIT    ECMCLSSE220    20     20     0     W       TRUE     -    
//     %%BIT    ECMCLSSE219    19     19     0     W       TRUE     -    
//     %%BIT    ECMCLSSE218    18     18     0     W       TRUE     -    
//     %%BIT    ECMCLSSE217    17     17     0     W       TRUE     -    
//     %%BIT    ECMCLSSE216    16     16     0     W       TRUE     -    
//     %%BIT    ECMCLSSE215    15     15     0     W       TRUE     -    
//     %%BIT    ECMCLSSE214    14     14     0     W       TRUE     -    
//     %%BIT    ECMCLSSE213    13     13     0     W       TRUE     -    
//     %%BIT    ECMCLSSE212    12     12     0     W       TRUE     -    
//     %%BIT    ECMCLSSE211    11     11     0     W       TRUE     -    
//     %%BIT    ECMCLSSE210    10     10     0     W       TRUE     -    
//     %%BIT    ECMCLSSE209    9      9      0     W       TRUE     -    
//     %%BIT    ECMCLSSE208    8      8      0     W       TRUE     -    
//     %%BIT    ECMCLSSE207    7      7      0     W       TRUE     -    
//     %%BIT    ECMCLSSE206    6      6      0     W       TRUE     -    
//     %%BIT    ECMCLSSE205    5      5      0     W       TRUE     -    
//     %%BIT    ECMCLSSE204    4      4      0     W       TRUE     -    
//     %%BIT    ECMCLSSE203    3      3      0     W       TRUE     -    
//     %%BIT    ECMCLSSE202    2      2      0     W       TRUE     -    
//     %%BIT    ECMCLSSE201    1      1      0     W       TRUE     -    
//     %%BIT    ECMCLSSE200    0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMPCMD1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECM1REG        7      0      0     W       TRUE     -    
// 
// %REG_NAME ECMPS      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPRERR       0      0      0     R       TRUE     -    
// 
// %REG_NAME ECMPE0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE031       31     31     0     W       TRUE     -    
//     %%BIT    ECMPE030       30     30     0     W       TRUE     -    
//     %%BIT    ECMPE029       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE028       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE027       27     27     0     W       TRUE     -    
//     %%BIT    ECMPE026       26     26     0     W       TRUE     -    
//     %%BIT    ECMPE025       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE024       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE023       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE022       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE021       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE020       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE019       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE018       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE017       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE016       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE015       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE014       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE013       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE012       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE011       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE010       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE009       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE008       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE007       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE006       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE005       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE004       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE003       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE002       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE001       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE000       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMPE1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE131       31     31     0     W       TRUE     -    
//     %%BIT    ECMPE130       30     30     0     W       TRUE     -    
//     %%BIT    ECMPE129       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE128       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE127       27     27     0     W       TRUE     -    
//     %%BIT    ECMPE126       26     26     0     W       TRUE     -    
//     %%BIT    ECMPE125       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE124       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE123       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE122       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE121       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE120       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE119       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE118       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE117       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE116       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE115       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE114       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE113       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE112       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE111       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE110       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE109       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE108       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE107       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE106       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE105       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE104       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE103       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE102       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE101       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE100       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMPE2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMPE229       29     29     0     W       TRUE     -    
//     %%BIT    ECMPE228       28     28     0     W       TRUE     -    
//     %%BIT    ECMPE227       27     27     0     W       TRUE     -    
//     %%BIT    ECMPE226       26     26     0     W       TRUE     -    
//     %%BIT    ECMPE225       25     25     0     W       TRUE     -    
//     %%BIT    ECMPE224       24     24     0     W       TRUE     -    
//     %%BIT    ECMPE223       23     23     0     W       TRUE     -    
//     %%BIT    ECMPE222       22     22     0     W       TRUE     -    
//     %%BIT    ECMPE221       21     21     0     W       TRUE     -    
//     %%BIT    ECMPE220       20     20     0     W       TRUE     -    
//     %%BIT    ECMPE219       19     19     0     W       TRUE     -    
//     %%BIT    ECMPE218       18     18     0     W       TRUE     -    
//     %%BIT    ECMPE217       17     17     0     W       TRUE     -    
//     %%BIT    ECMPE216       16     16     0     W       TRUE     -    
//     %%BIT    ECMPE215       15     15     0     W       TRUE     -    
//     %%BIT    ECMPE214       14     14     0     W       TRUE     -    
//     %%BIT    ECMPE213       13     13     0     W       TRUE     -    
//     %%BIT    ECMPE212       12     12     0     W       TRUE     -    
//     %%BIT    ECMPE211       11     11     0     W       TRUE     -    
//     %%BIT    ECMPE210       10     10     0     W       TRUE     -    
//     %%BIT    ECMPE209       9      9      0     W       TRUE     -    
//     %%BIT    ECMPE208       8      8      0     W       TRUE     -    
//     %%BIT    ECMPE207       7      7      0     W       TRUE     -    
//     %%BIT    ECMPE206       6      6      0     W       TRUE     -    
//     %%BIT    ECMPE205       5      5      0     W       TRUE     -    
//     %%BIT    ECMPE204       4      4      0     W       TRUE     -    
//     %%BIT    ECMPE203       3      3      0     W       TRUE     -    
//     %%BIT    ECMPE202       2      2      0     W       TRUE     -    
//     %%BIT    ECMPE201       1      1      0     W       TRUE     -    
//     %%BIT    ECMPE200       0      0      0     W       TRUE     W    
// 
// %REG_NAME ECMDTMCTL      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMSTP         1      1      0     W       TRUE     W    
//     %%BIT    ECMSTA         0      0      0     R|W     TRUE     -    
// 
// %REG_NAME ECMDTMR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMR        15     0      0     R       TRUE     R    
// 
// %REG_NAME ECMDTMCMP      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCMP      15     0      0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG0      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG031       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG030       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG029       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG028       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG027       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG026       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG025       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG024       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG023       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG022       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG021       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG020       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG019       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG018       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG017       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG016       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG015       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG014       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG013       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG012       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG011       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG010       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG009       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG008       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG007       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG006       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG005       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG004       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG003       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG002       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG001       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG000       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG1      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG131       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG130       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG129       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG128       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG127       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG126       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG125       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG124       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG123       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG122       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG121       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG120       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG119       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG118       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG117       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG116       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG115       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG114       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG113       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG112       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG111       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG110       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG109       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG108       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG107       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG106       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG105       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG104       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG103       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG102       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG101       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG100       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG2      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG228       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG227       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG226       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG225       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG224       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG223       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG222       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG221       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG220       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG219       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG218       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG217       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG216       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG215       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG214       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG213       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG212       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG211       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG210       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG209       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG208       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG207       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG206       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG205       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG204       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG203       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG202       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG201       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG200       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG3      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG331       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG330       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG329       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG328       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG327       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG326       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG325       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG324       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG323       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG322       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG321       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG320       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG319       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG318       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG317       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG316       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG315       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG314       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG313       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG312       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG311       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG310       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG309       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG308       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG307       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG306       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG305       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG304       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG303       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG302       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG301       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG300       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG4      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG431       31     31      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG430       30     30      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG429       29     29      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG428       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG427       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG426       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG425       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG424       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG423       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG422       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG421       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG420       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG419       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG418       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG417       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG416       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG415       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG414       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG413       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG412       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG411       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG410       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG409       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG408       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG407       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG406       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG405       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG404       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG403       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG402       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG401       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG400       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMDTMCFG5      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    ECMDTMCFG528       28     28      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG527       27     27      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG526       26     26      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG525       25     25      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG524       24     24      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG523       23     23      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG522       22     22      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG521       21     21      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG520       20     20      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG519       19     19      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG518       18     18      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG517       17     17      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG516       16     16      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG515       15     15      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG514       14     14      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG513       13     13      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG512       12     12      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG511       11     11      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG510       10     10      0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG509       9      9       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG508       8      8       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG507       7      7       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG506       6      6       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG505       5      5       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG504       4      4       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG503       3      3       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG502       2      2       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG501       1      1       0     R|W     TRUE     -    
//     %%BIT    ECMDTMCFG500       0      0       0     R|W     TRUE     W    
// 
// %REG_NAME ECMEOUTCLRT      
//     %%TITLE  name               upper  lower   init  access  support  callback    
//     %%BIT    ECMEOUTCLRT        15     0       0     R|W     TRUE     W    
//                                                
////////////////////////////////////////////////////////////////////////////////
/// @file ecm_regif.cpp
/// @brief Register IF class of model ECM
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "ecm_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cecm_regif::Cecm_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x17C/4))
    #endif
{
    CommandInit();
    ECMmESET    = new vpcl::re_register(0x0000, this, "ECMmESET"   , name.c_str());
    ECMmECLR    = new vpcl::re_register(0x0004, this, "ECMmECLR"   , name.c_str());
    ECMmESSTR0  = new vpcl::re_register(0x0008, this, "ECMmESSTR0" , name.c_str());
    ECMmESSTR1  = new vpcl::re_register(0x000C, this, "ECMmESSTR1" , name.c_str());
    ECMmESSTR2  = new vpcl::re_register(0x0010, this, "ECMmESSTR2" , name.c_str());
    ECMmPCMD0   = new vpcl::re_register(0x0014, this, "ECMmPCMD0"  , name.c_str());
    ECMEPCFG    = new vpcl::re_register(0x0100, this, "ECMEPCFG"   , name.c_str());
    ECMMICFG0   = new vpcl::re_register(0x0104, this, "ECMMICFG0"  , name.c_str());
    ECMMICFG1   = new vpcl::re_register(0x0108, this, "ECMMICFG1"  , name.c_str());
    ECMMICFG2   = new vpcl::re_register(0x010C, this, "ECMMICFG2"  , name.c_str());
    ECMNMICFG0  = new vpcl::re_register(0x0110, this, "ECMNMICFG0" , name.c_str());
    ECMNMICFG1  = new vpcl::re_register(0x0114, this, "ECMNMICFG1" , name.c_str());
    ECMNMICFG2  = new vpcl::re_register(0x0118, this, "ECMNMICFG2" , name.c_str());
    ECMIRCFG0   = new vpcl::re_register(0x011C, this, "ECMIRCFG0"  , name.c_str());
    ECMIRCFG1   = new vpcl::re_register(0x0120, this, "ECMIRCFG1"  , name.c_str());
    ECMIRCFG2   = new vpcl::re_register(0x0124, this, "ECMIRCFG2"  , name.c_str());
    ECMEMK0     = new vpcl::re_register(0x0128, this, "ECMEMK0"    , name.c_str());
    ECMEMK1     = new vpcl::re_register(0x012C, this, "ECMEMK1"    , name.c_str());
    ECMEMK2     = new vpcl::re_register(0x0130, this, "ECMEMK2"    , name.c_str());
    ECMESSTC0   = new vpcl::re_register(0x0134, this, "ECMESSTC0"  , name.c_str());
    ECMESSTC1   = new vpcl::re_register(0x0138, this, "ECMESSTC1"  , name.c_str());
    ECMESSTC2   = new vpcl::re_register(0x013C, this, "ECMESSTC2"  , name.c_str());
    ECMPCMD1    = new vpcl::re_register(0x0140, this, "ECMPCMD1"   , name.c_str());
    ECMPS       = new vpcl::re_register(0x0144, this, "ECMPS"      , name.c_str());
    ECMPE0      = new vpcl::re_register(0x0148, this, "ECMPE0"     , name.c_str());
    ECMPE1      = new vpcl::re_register(0x014C, this, "ECMPE1"     , name.c_str());
    ECMPE2      = new vpcl::re_register(0x0150, this, "ECMPE2"     , name.c_str());
    ECMDTMCTL   = new vpcl::re_register(0x0154, this, "ECMDTMCTL"  , name.c_str());
    ECMDTMR     = new vpcl::re_register(0x0158, this, "ECMDTMR"    , name.c_str());
    ECMDTMCMP   = new vpcl::re_register(0x015C, this, "ECMDTMCMP"  , name.c_str());
    ECMDTMCFG0  = new vpcl::re_register(0x0160, this, "ECMDTMCFG0" , name.c_str());
    ECMDTMCFG1  = new vpcl::re_register(0x0164, this, "ECMDTMCFG1" , name.c_str());
    ECMDTMCFG2  = new vpcl::re_register(0x0168, this, "ECMDTMCFG2" , name.c_str());
    ECMDTMCFG3  = new vpcl::re_register(0x016C, this, "ECMDTMCFG3" , name.c_str());
    ECMDTMCFG4  = new vpcl::re_register(0x0170, this, "ECMDTMCFG4" , name.c_str());
    ECMDTMCFG5  = new vpcl::re_register(0x0174, this, "ECMDTMCFG5" , name.c_str());
    ECMEOUTCLRT = new vpcl::re_register(0x0178, this, "ECMEOUTCLRT", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<9];
    for (uint i = 0; i < (1<<9); i++) {
        mRegMap[i] = (1<<9);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0100]     = index++;
    mRegMap[0x0104]     = index;
    mRegMap[0x0104 + 1] = index;
    mRegMap[0x0104 + 2] = index;
    mRegMap[0x0104 + 3] = index++;
    mRegMap[0x0108]     = index;
    mRegMap[0x0108 + 1] = index;
    mRegMap[0x0108 + 2] = index;
    mRegMap[0x0108 + 3] = index++;
    mRegMap[0x010C]     = index;
    mRegMap[0x010C + 1] = index;
    mRegMap[0x010C + 2] = index;
    mRegMap[0x010C + 3] = index++;
    mRegMap[0x0110]     = index;
    mRegMap[0x0110 + 1] = index;
    mRegMap[0x0110 + 2] = index;
    mRegMap[0x0110 + 3] = index++;
    mRegMap[0x0114]     = index;
    mRegMap[0x0114 + 1] = index;
    mRegMap[0x0114 + 2] = index;
    mRegMap[0x0114 + 3] = index++;
    mRegMap[0x0118]     = index;
    mRegMap[0x0118 + 1] = index;
    mRegMap[0x0118 + 2] = index;
    mRegMap[0x0118 + 3] = index++;
    mRegMap[0x011C]     = index;
    mRegMap[0x011C + 1] = index;
    mRegMap[0x011C + 2] = index;
    mRegMap[0x011C + 3] = index++;
    mRegMap[0x0120]     = index;
    mRegMap[0x0120 + 1] = index;
    mRegMap[0x0120 + 2] = index;
    mRegMap[0x0120 + 3] = index++;
    mRegMap[0x0124]     = index;
    mRegMap[0x0124 + 1] = index;
    mRegMap[0x0124 + 2] = index;
    mRegMap[0x0124 + 3] = index++;
    mRegMap[0x0128]     = index;
    mRegMap[0x0128 + 1] = index;
    mRegMap[0x0128 + 2] = index;
    mRegMap[0x0128 + 3] = index++;
    mRegMap[0x012C]     = index;
    mRegMap[0x012C + 1] = index;
    mRegMap[0x012C + 2] = index;
    mRegMap[0x012C + 3] = index++;
    mRegMap[0x0130]     = index;
    mRegMap[0x0130 + 1] = index;
    mRegMap[0x0130 + 2] = index;
    mRegMap[0x0130 + 3] = index++;
    mRegMap[0x0134]     = index;
    mRegMap[0x0134 + 1] = index;
    mRegMap[0x0134 + 2] = index;
    mRegMap[0x0134 + 3] = index++;
    mRegMap[0x0138]     = index;
    mRegMap[0x0138 + 1] = index;
    mRegMap[0x0138 + 2] = index;
    mRegMap[0x0138 + 3] = index++;
    mRegMap[0x013C]     = index;
    mRegMap[0x013C + 1] = index;
    mRegMap[0x013C + 2] = index;
    mRegMap[0x013C + 3] = index++;
    mRegMap[0x0140]     = index;
    mRegMap[0x0140 + 1] = index;
    mRegMap[0x0140 + 2] = index;
    mRegMap[0x0140 + 3] = index++;
    mRegMap[0x0144]     = index++;
    mRegMap[0x0148]     = index;
    mRegMap[0x0148 + 1] = index;
    mRegMap[0x0148 + 2] = index;
    mRegMap[0x0148 + 3] = index++;
    mRegMap[0x014C]     = index;
    mRegMap[0x014C + 1] = index;
    mRegMap[0x014C + 2] = index;
    mRegMap[0x014C + 3] = index++;
    mRegMap[0x0150]     = index;
    mRegMap[0x0150 + 1] = index;
    mRegMap[0x0150 + 2] = index;
    mRegMap[0x0150 + 3] = index++;
    mRegMap[0x0154]     = index++;
    mRegMap[0x0158]     = index;
    mRegMap[0x0158 + 1] = index++;
    mRegMap[0x015C]     = index;
    mRegMap[0x015C + 1] = index++;
    mRegMap[0x0160]     = index;
    mRegMap[0x0160 + 1] = index;
    mRegMap[0x0160 + 2] = index;
    mRegMap[0x0160 + 3] = index++;
    mRegMap[0x0164]     = index;
    mRegMap[0x0164 + 1] = index;
    mRegMap[0x0164 + 2] = index;
    mRegMap[0x0164 + 3] = index++;
    mRegMap[0x0168]     = index;
    mRegMap[0x0168 + 1] = index;
    mRegMap[0x0168 + 2] = index;
    mRegMap[0x0168 + 3] = index++;
    mRegMap[0x016C]     = index;
    mRegMap[0x016C + 1] = index;
    mRegMap[0x016C + 2] = index;
    mRegMap[0x016C + 3] = index++;
    mRegMap[0x0170]     = index;
    mRegMap[0x0170 + 1] = index;
    mRegMap[0x0170 + 2] = index;
    mRegMap[0x0170 + 3] = index++;
    mRegMap[0x0174]     = index;
    mRegMap[0x0174 + 1] = index;
    mRegMap[0x0174 + 2] = index;
    mRegMap[0x0174 + 3] = index++;
    mRegMap[0x0178]     = index;
    mRegMap[0x0178 + 1] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_ECMmESET_, "ECMmESET_", 0x0000);
    CW_ECMmESET    = new scml2::bitfield<uint>(ECMmESET->name()   , CW_ECMmESET_             ,  0,  8);
    cw_instantiate_reg(CW_ECMmECLR_, "ECMmECLR_", 0x0004);
    CW_ECMmECLR    = new scml2::bitfield<uint>(ECMmECLR->name()   , CW_ECMmECLR_             ,  0,  8);
    cw_instantiate_reg(CW_ECMEPCFG_, "ECMEPCFG_", 0x0100);
    CW_ECMEPCFG    = new scml2::bitfield<uint>(ECMEPCFG->name()   , CW_ECMEPCFG_             ,  0,  8);
    cw_instantiate_reg(CW_ECMPS_, "ECMPS_", 0x0144);
    CW_ECMPS       = new scml2::bitfield<uint>(ECMPS->name()      , CW_ECMPS_                ,  0,  8);
    cw_instantiate_reg(CW_ECMDTMCTL_, "ECMDTMCTL_", 0x0154);
    CW_ECMDTMCTL   = new scml2::bitfield<uint>(ECMDTMCTL->name()  , CW_ECMDTMCTL_            ,  0,  8);
    cw_instantiate_reg(CW_ECMDTMR_, "ECMDTMR_", 0x0158);
    CW_ECMDTMR     = new scml2::bitfield<uint>(ECMDTMR->name()    , CW_ECMDTMR_              ,  0, 16);
    cw_instantiate_reg(CW_ECMDTMCMP_, "ECMDTMCMP_", 0x015C);
    CW_ECMDTMCMP   = new scml2::bitfield<uint>(ECMDTMCMP->name()  , CW_ECMDTMCMP_            ,  0, 16);
    cw_instantiate_reg(CW_ECMEOUTCLRT_, "ECMEOUTCLRT_", 0x0178);
    CW_ECMEOUTCLRT = new scml2::bitfield<uint>(ECMEOUTCLRT->name(), CW_ECMEOUTCLRT_          ,  0, 16);
    cw_instantiate_reg(CW_ECMmESSTR0   , ECMmESSTR0->name() , ECMmESSTR0->addr() );
    cw_instantiate_reg(CW_ECMmESSTR1   , ECMmESSTR1->name() , ECMmESSTR1->addr() );
    cw_instantiate_reg(CW_ECMmESSTR2   , ECMmESSTR2->name() , ECMmESSTR2->addr() );
    cw_instantiate_reg(CW_ECMmPCMD0    , ECMmPCMD0->name()  , ECMmPCMD0->addr()  );
    cw_instantiate_reg(CW_ECMMICFG0    , ECMMICFG0->name()  , ECMMICFG0->addr()  );
    cw_instantiate_reg(CW_ECMMICFG1    , ECMMICFG1->name()  , ECMMICFG1->addr()  );
    cw_instantiate_reg(CW_ECMMICFG2    , ECMMICFG2->name()  , ECMMICFG2->addr()  );
    cw_instantiate_reg(CW_ECMNMICFG0   , ECMNMICFG0->name() , ECMNMICFG0->addr() );
    cw_instantiate_reg(CW_ECMNMICFG1   , ECMNMICFG1->name() , ECMNMICFG1->addr() );
    cw_instantiate_reg(CW_ECMNMICFG2   , ECMNMICFG2->name() , ECMNMICFG2->addr() );
    cw_instantiate_reg(CW_ECMIRCFG0    , ECMIRCFG0->name()  , ECMIRCFG0->addr()  );
    cw_instantiate_reg(CW_ECMIRCFG1    , ECMIRCFG1->name()  , ECMIRCFG1->addr()  );
    cw_instantiate_reg(CW_ECMIRCFG2    , ECMIRCFG2->name()  , ECMIRCFG2->addr()  );
    cw_instantiate_reg(CW_ECMEMK0      , ECMEMK0->name()    , ECMEMK0->addr()    );
    cw_instantiate_reg(CW_ECMEMK1      , ECMEMK1->name()    , ECMEMK1->addr()    );
    cw_instantiate_reg(CW_ECMEMK2      , ECMEMK2->name()    , ECMEMK2->addr()    );
    cw_instantiate_reg(CW_ECMESSTC0    , ECMESSTC0->name()  , ECMESSTC0->addr()  );
    cw_instantiate_reg(CW_ECMESSTC1    , ECMESSTC1->name()  , ECMESSTC1->addr()  );
    cw_instantiate_reg(CW_ECMESSTC2    , ECMESSTC2->name()  , ECMESSTC2->addr()  );
    cw_instantiate_reg(CW_ECMPCMD1     , ECMPCMD1->name()   , ECMPCMD1->addr()   );
    cw_instantiate_reg(CW_ECMPE0       , ECMPE0->name()     , ECMPE0->addr()     );
    cw_instantiate_reg(CW_ECMPE1       , ECMPE1->name()     , ECMPE1->addr()     );
    cw_instantiate_reg(CW_ECMPE2       , ECMPE2->name()     , ECMPE2->addr()     );
    cw_instantiate_reg(CW_ECMDTMCFG0   , ECMDTMCFG0->name() , ECMDTMCFG0->addr() );
    cw_instantiate_reg(CW_ECMDTMCFG1   , ECMDTMCFG1->name() , ECMDTMCFG1->addr() );
    cw_instantiate_reg(CW_ECMDTMCFG2   , ECMDTMCFG2->name() , ECMDTMCFG2->addr() );
    cw_instantiate_reg(CW_ECMDTMCFG3   , ECMDTMCFG3->name() , ECMDTMCFG3->addr() );
    cw_instantiate_reg(CW_ECMDTMCFG4   , ECMDTMCFG4->name() , ECMDTMCFG4->addr() );
    cw_instantiate_reg(CW_ECMDTMCFG5   , ECMDTMCFG5->name() , ECMDTMCFG5->addr() );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(ECMmESET     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmECLR     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR0   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmESSTR2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMmPCMD0    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEPCFG     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMICFG0    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMICFG1    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMMICFG2    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG0   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG1   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMNMICFG2   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG0    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG1    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMIRCFG2    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEMK0      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEMK1      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEMK2      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMESSTC0    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMESSTC1    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMESSTC2    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPCMD1     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPS        , mCurReg, 0,  1,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPE0       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPE1       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMPE2       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCTL    , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMR      , mCurReg, 0,  2,      "16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCMP    , mCurReg, 0,  2,   "16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG0   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG1   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG2   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG3   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG4   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMDTMCFG5   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(ECMEOUTCLRT  , mCurReg, 0,  2,   "16|32", "8|16|32");

    mRegList = mCurReg;

    (*ECMmESET     ) ( 0,  0, "ECMmEST" , 0x0       , "W1"    , vpcl::SPP_ENABLE);
    (*ECMmECLR     ) ( 0,  0, "ECMmECT" , 0x0       , "W1"    , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (31, 31, "ECMmSSE031", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (30, 30, "ECMmSSE030", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (29, 29, "ECMmSSE029", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (28, 28, "ECMmSSE028", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (27, 27, "ECMmSSE027", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (26, 26, "ECMmSSE026", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (25, 25, "ECMmSSE025", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (24, 24, "ECMmSSE024", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (23, 23, "ECMmSSE023", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (22, 22, "ECMmSSE022", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (21, 21, "ECMmSSE021", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (20, 20, "ECMmSSE020", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (19, 19, "ECMmSSE019", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (18, 18, "ECMmSSE018", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (17, 17, "ECMmSSE017", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (16, 16, "ECMmSSE016", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (15, 15, "ECMmSSE015", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (14, 14, "ECMmSSE014", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (13, 13, "ECMmSSE013", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (12, 12, "ECMmSSE012", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (11, 11, "ECMmSSE011", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) (10, 10, "ECMmSSE010", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 9,  9, "ECMmSSE009", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 8,  8, "ECMmSSE008", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 7,  7, "ECMmSSE007", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 6,  6, "ECMmSSE006", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 5,  5, "ECMmSSE005", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 4,  4, "ECMmSSE004", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 3,  3, "ECMmSSE003", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 2,  2, "ECMmSSE002", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 1,  1, "ECMmSSE001", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR0   ) ( 0,  0, "ECMmSSE000", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (31, 31, "ECMmSSE131", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (30, 30, "ECMmSSE130", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (29, 29, "ECMmSSE129", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (28, 28, "ECMmSSE128", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (27, 27, "ECMmSSE127", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (26, 26, "ECMmSSE126", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (25, 25, "ECMmSSE125", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (24, 24, "ECMmSSE124", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (23, 23, "ECMmSSE123", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (22, 22, "ECMmSSE122", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (21, 21, "ECMmSSE121", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (20, 20, "ECMmSSE120", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (19, 19, "ECMmSSE119", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (18, 18, "ECMmSSE118", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (17, 17, "ECMmSSE117", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (16, 16, "ECMmSSE116", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (15, 15, "ECMmSSE115", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (14, 14, "ECMmSSE114", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (13, 13, "ECMmSSE113", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (12, 12, "ECMmSSE112", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (11, 11, "ECMmSSE111", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) (10, 10, "ECMmSSE110", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 9,  9, "ECMmSSE109", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 8,  8, "ECMmSSE108", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 7,  7, "ECMmSSE107", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 6,  6, "ECMmSSE106", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 5,  5, "ECMmSSE105", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 4,  4, "ECMmSSE104", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 3,  3, "ECMmSSE103", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 2,  2, "ECMmSSE102", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 1,  1, "ECMmSSE101", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR1   ) ( 0,  0, "ECMmSSE100", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (31, 31, "ECMmSSE231", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (30, 30, "ECMmSSE230", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (29, 29, "ECMmSSE229", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (28, 28, "ECMmSSE228", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (27, 27, "ECMmSSE227", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (26, 26, "ECMmSSE226", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (25, 25, "ECMmSSE225", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (24, 24, "ECMmSSE224", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (23, 23, "ECMmSSE223", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (22, 22, "ECMmSSE222", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (21, 21, "ECMmSSE221", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (20, 20, "ECMmSSE220", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (19, 19, "ECMmSSE219", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (18, 18, "ECMmSSE218", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (17, 17, "ECMmSSE217", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (16, 16, "ECMmSSE216", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (15, 15, "ECMmSSE215", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (14, 14, "ECMmSSE214", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (13, 13, "ECMmSSE213", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (12, 12, "ECMmSSE212", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (11, 11, "ECMmSSE211", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) (10, 10, "ECMmSSE210", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 9,  9, "ECMmSSE209", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 8,  8, "ECMmSSE208", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 7,  7, "ECMmSSE207", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 6,  6, "ECMmSSE206", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 5,  5, "ECMmSSE205", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 4,  4, "ECMmSSE204", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 3,  3, "ECMmSSE203", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 2,  2, "ECMmSSE202", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 1,  1, "ECMmSSE201", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmESSTR2   ) ( 0,  0, "ECMmSSE200", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMmPCMD0    ) ( 7,  0, "ECMm0REG", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMEPCFG     ) ( 0,  0, "ECMSL0"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (31, 31, "ECMMIE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (30, 30, "ECMMIE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (29, 29, "ECMMIE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (28, 28, "ECMMIE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (27, 27, "ECMMIE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (26, 26, "ECMMIE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (25, 25, "ECMMIE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (24, 24, "ECMMIE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (23, 23, "ECMMIE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (22, 22, "ECMMIE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (21, 21, "ECMMIE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (20, 20, "ECMMIE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (19, 19, "ECMMIE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (18, 18, "ECMMIE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (17, 17, "ECMMIE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (16, 16, "ECMMIE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (15, 15, "ECMMIE015", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (14, 14, "ECMMIE014", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (13, 13, "ECMMIE013", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (12, 12, "ECMMIE012", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (11, 11, "ECMMIE011", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) (10, 10, "ECMMIE010", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 9,  9, "ECMMIE009", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 8,  8, "ECMMIE008", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 7,  7, "ECMMIE007", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 6,  6, "ECMMIE006", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 5,  5, "ECMMIE005", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 4,  4, "ECMMIE004", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 3,  3, "ECMMIE003", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 2,  2, "ECMMIE002", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 1,  1, "ECMMIE001", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG0    ) ( 0,  0, "ECMMIE000", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (31, 31, "ECMMIE131", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (30, 30, "ECMMIE130", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (29, 29, "ECMMIE129", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (28, 28, "ECMMIE128", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (27, 27, "ECMMIE127", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (26, 26, "ECMMIE126", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (25, 25, "ECMMIE125", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (24, 24, "ECMMIE124", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (23, 23, "ECMMIE123", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (22, 22, "ECMMIE122", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (21, 21, "ECMMIE121", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (20, 20, "ECMMIE120", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (19, 19, "ECMMIE119", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (18, 18, "ECMMIE118", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (17, 17, "ECMMIE117", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (16, 16, "ECMMIE116", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (15, 15, "ECMMIE115", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (14, 14, "ECMMIE114", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (13, 13, "ECMMIE113", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (12, 12, "ECMMIE112", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (11, 11, "ECMMIE111", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) (10, 10, "ECMMIE110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 9,  9, "ECMMIE109", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 8,  8, "ECMMIE108", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 7,  7, "ECMMIE107", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 6,  6, "ECMMIE106", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 5,  5, "ECMMIE105", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 4,  4, "ECMMIE104", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 3,  3, "ECMMIE103", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 2,  2, "ECMMIE102", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 1,  1, "ECMMIE101", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG1    ) ( 0,  0, "ECMMIE100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (28, 28, "ECMMIE228", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (27, 27, "ECMMIE227", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (26, 26, "ECMMIE226", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (25, 25, "ECMMIE225", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (24, 24, "ECMMIE224", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (23, 23, "ECMMIE223", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (22, 22, "ECMMIE222", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (21, 21, "ECMMIE221", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (20, 20, "ECMMIE220", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (19, 19, "ECMMIE219", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (18, 18, "ECMMIE218", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (17, 17, "ECMMIE217", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (16, 16, "ECMMIE216", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (15, 15, "ECMMIE215", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (14, 14, "ECMMIE214", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (13, 13, "ECMMIE213", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (12, 12, "ECMMIE212", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (11, 11, "ECMMIE211", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) (10, 10, "ECMMIE210", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 9,  9, "ECMMIE209", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 8,  8, "ECMMIE208", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 7,  7, "ECMMIE207", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 6,  6, "ECMMIE206", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 5,  5, "ECMMIE205", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 4,  4, "ECMMIE204", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 3,  3, "ECMMIE203", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 2,  2, "ECMMIE202", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 1,  1, "ECMMIE201", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMMICFG2    ) ( 0,  0, "ECMMIE200", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (31, 31, "ECMNMIE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (30, 30, "ECMNMIE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (29, 29, "ECMNMIE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (28, 28, "ECMNMIE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (27, 27, "ECMNMIE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (26, 26, "ECMNMIE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (25, 25, "ECMNMIE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (24, 24, "ECMNMIE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (23, 23, "ECMNMIE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (22, 22, "ECMNMIE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (21, 21, "ECMNMIE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (20, 20, "ECMNMIE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (19, 19, "ECMNMIE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (18, 18, "ECMNMIE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (17, 17, "ECMNMIE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (16, 16, "ECMNMIE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (15, 15, "ECMNMIE015", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (14, 14, "ECMNMIE014", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (13, 13, "ECMNMIE013", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (12, 12, "ECMNMIE012", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (11, 11, "ECMNMIE011", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) (10, 10, "ECMNMIE010", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 9,  9, "ECMNMIE009", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 8,  8, "ECMNMIE008", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 7,  7, "ECMNMIE007", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 6,  6, "ECMNMIE006", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 5,  5, "ECMNMIE005", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 4,  4, "ECMNMIE004", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 3,  3, "ECMNMIE003", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 2,  2, "ECMNMIE002", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 1,  1, "ECMNMIE001", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG0   ) ( 0,  0, "ECMNMIE000", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (31, 31, "ECMNMIE131", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (30, 30, "ECMNMIE130", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (29, 29, "ECMNMIE129", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (28, 28, "ECMNMIE128", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (27, 27, "ECMNMIE127", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (26, 26, "ECMNMIE126", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (25, 25, "ECMNMIE125", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (24, 24, "ECMNMIE124", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (23, 23, "ECMNMIE123", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (22, 22, "ECMNMIE122", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (21, 21, "ECMNMIE121", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (20, 20, "ECMNMIE120", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (19, 19, "ECMNMIE119", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (18, 18, "ECMNMIE118", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (17, 17, "ECMNMIE117", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (16, 16, "ECMNMIE116", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (15, 15, "ECMNMIE115", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (14, 14, "ECMNMIE114", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (13, 13, "ECMNMIE113", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (12, 12, "ECMNMIE112", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (11, 11, "ECMNMIE111", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) (10, 10, "ECMNMIE110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 9,  9, "ECMNMIE109", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 8,  8, "ECMNMIE108", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 7,  7, "ECMNMIE107", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 6,  6, "ECMNMIE106", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 5,  5, "ECMNMIE105", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 4,  4, "ECMNMIE104", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 3,  3, "ECMNMIE103", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 2,  2, "ECMNMIE102", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 1,  1, "ECMNMIE101", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG1   ) ( 0,  0, "ECMNMIE100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (28, 28, "ECMNMIE228", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (27, 27, "ECMNMIE227", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (26, 26, "ECMNMIE226", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (25, 25, "ECMNMIE225", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (24, 24, "ECMNMIE224", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (23, 23, "ECMNMIE223", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (22, 22, "ECMNMIE222", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (21, 21, "ECMNMIE221", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (20, 20, "ECMNMIE220", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (19, 19, "ECMNMIE219", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (18, 18, "ECMNMIE218", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (17, 17, "ECMNMIE217", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (16, 16, "ECMNMIE216", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (15, 15, "ECMNMIE215", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (14, 14, "ECMNMIE214", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (13, 13, "ECMNMIE213", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (12, 12, "ECMNMIE212", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (11, 11, "ECMNMIE211", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) (10, 10, "ECMNMIE210", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 9,  9, "ECMNMIE209", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 8,  8, "ECMNMIE208", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 7,  7, "ECMNMIE207", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 6,  6, "ECMNMIE206", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 5,  5, "ECMNMIE205", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 4,  4, "ECMNMIE204", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 3,  3, "ECMNMIE203", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 2,  2, "ECMNMIE202", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 1,  1, "ECMNMIE201", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMNMICFG2   ) ( 0,  0, "ECMNMIE200", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (31, 31, "ECMIRE031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (30, 30, "ECMIRE030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (29, 29, "ECMIRE029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (28, 28, "ECMIRE028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (27, 27, "ECMIRE027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (26, 26, "ECMIRE026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (25, 25, "ECMIRE025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (24, 24, "ECMIRE024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (23, 23, "ECMIRE023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (22, 22, "ECMIRE022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (21, 21, "ECMIRE021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (20, 20, "ECMIRE020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (19, 19, "ECMIRE019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (18, 18, "ECMIRE018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (17, 17, "ECMIRE017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (16, 16, "ECMIRE016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (15, 15, "ECMIRE015", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (14, 14, "ECMIRE014", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (13, 13, "ECMIRE013", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (12, 12, "ECMIRE012", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (11, 11, "ECMIRE011", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) (10, 10, "ECMIRE010", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 9,  9, "ECMIRE009", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 8,  8, "ECMIRE008", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 7,  7, "ECMIRE007", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 6,  6, "ECMIRE006", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 5,  5, "ECMIRE005", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 4,  4, "ECMIRE004", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 3,  3, "ECMIRE003", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 2,  2, "ECMIRE002", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 1,  1, "ECMIRE001", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG0    ) ( 0,  0, "ECMIRE000", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (31, 31, "ECMIRE131", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (30, 30, "ECMIRE130", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (29, 29, "ECMIRE129", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (28, 28, "ECMIRE128", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (27, 27, "ECMIRE127", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (26, 26, "ECMIRE126", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (25, 25, "ECMIRE125", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (24, 24, "ECMIRE124", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (23, 23, "ECMIRE123", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (22, 22, "ECMIRE122", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (21, 21, "ECMIRE121", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (20, 20, "ECMIRE120", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (19, 19, "ECMIRE119", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (18, 18, "ECMIRE118", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (17, 17, "ECMIRE117", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (16, 16, "ECMIRE116", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (15, 15, "ECMIRE115", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (14, 14, "ECMIRE114", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (13, 13, "ECMIRE113", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (12, 12, "ECMIRE112", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (11, 11, "ECMIRE111", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) (10, 10, "ECMIRE110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 9,  9, "ECMIRE109", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 8,  8, "ECMIRE108", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 7,  7, "ECMIRE107", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 6,  6, "ECMIRE106", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 5,  5, "ECMIRE105", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 4,  4, "ECMIRE104", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 3,  3, "ECMIRE103", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 2,  2, "ECMIRE102", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 1,  1, "ECMIRE101", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG1    ) ( 0,  0, "ECMIRE100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (29, 29, "ECMIRE229", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (28, 28, "ECMIRE228", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (27, 27, "ECMIRE227", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (26, 26, "ECMIRE226", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (25, 25, "ECMIRE225", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (24, 24, "ECMIRE224", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (23, 23, "ECMIRE223", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (22, 22, "ECMIRE222", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (21, 21, "ECMIRE221", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (20, 20, "ECMIRE220", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (19, 19, "ECMIRE219", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (18, 18, "ECMIRE218", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (17, 17, "ECMIRE217", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (16, 16, "ECMIRE216", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (15, 15, "ECMIRE215", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (14, 14, "ECMIRE214", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (13, 13, "ECMIRE213", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (12, 12, "ECMIRE212", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (11, 11, "ECMIRE211", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) (10, 10, "ECMIRE210", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 9,  9, "ECMIRE209", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 8,  8, "ECMIRE208", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 7,  7, "ECMIRE207", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 6,  6, "ECMIRE206", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 5,  5, "ECMIRE205", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 4,  4, "ECMIRE204", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 3,  3, "ECMIRE203", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 2,  2, "ECMIRE202", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 1,  1, "ECMIRE201", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMIRCFG2    ) ( 0,  0, "ECMIRE200", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (31, 31, "ECMEMK031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (30, 30, "ECMEMK030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (29, 29, "ECMEMK029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (28, 28, "ECMEMK028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (27, 27, "ECMEMK027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (26, 26, "ECMEMK026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (25, 25, "ECMEMK025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (24, 24, "ECMEMK024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (23, 23, "ECMEMK023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (22, 22, "ECMEMK022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (21, 21, "ECMEMK021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (20, 20, "ECMEMK020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (19, 19, "ECMEMK019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (18, 18, "ECMEMK018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (17, 17, "ECMEMK017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (16, 16, "ECMEMK016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (15, 15, "ECMEMK015", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (14, 14, "ECMEMK014", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (13, 13, "ECMEMK013", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (12, 12, "ECMEMK012", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (11, 11, "ECMEMK011", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) (10, 10, "ECMEMK010", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 9,  9, "ECMEMK009", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 8,  8, "ECMEMK008", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 7,  7, "ECMEMK007", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 6,  6, "ECMEMK006", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 5,  5, "ECMEMK005", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 4,  4, "ECMEMK004", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 3,  3, "ECMEMK003", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 2,  2, "ECMEMK002", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 1,  1, "ECMEMK001", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK0      ) ( 0,  0, "ECMEMK000", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (31, 31, "ECMEMK131", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (30, 30, "ECMEMK130", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (29, 29, "ECMEMK129", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (28, 28, "ECMEMK128", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (27, 27, "ECMEMK127", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (26, 26, "ECMEMK126", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (25, 25, "ECMEMK125", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (24, 24, "ECMEMK124", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (23, 23, "ECMEMK123", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (22, 22, "ECMEMK122", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (21, 21, "ECMEMK121", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (20, 20, "ECMEMK120", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (19, 19, "ECMEMK119", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (18, 18, "ECMEMK118", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (17, 17, "ECMEMK117", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (16, 16, "ECMEMK116", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (15, 15, "ECMEMK115", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (14, 14, "ECMEMK114", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (13, 13, "ECMEMK113", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (12, 12, "ECMEMK112", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (11, 11, "ECMEMK111", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) (10, 10, "ECMEMK110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 9,  9, "ECMEMK109", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 8,  8, "ECMEMK108", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 7,  7, "ECMEMK107", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 6,  6, "ECMEMK106", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 5,  5, "ECMEMK105", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 4,  4, "ECMEMK104", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 3,  3, "ECMEMK103", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 2,  2, "ECMEMK102", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 1,  1, "ECMEMK101", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK1      ) ( 0,  0, "ECMEMK100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (29, 29, "ECMEMK229", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (28, 28, "ECMEMK228", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (27, 27, "ECMEMK227", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (26, 26, "ECMEMK226", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (25, 25, "ECMEMK225", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (24, 24, "ECMEMK224", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (23, 23, "ECMEMK223", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (22, 22, "ECMEMK222", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (21, 21, "ECMEMK221", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (20, 20, "ECMEMK220", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (19, 19, "ECMEMK219", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (18, 18, "ECMEMK218", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (17, 17, "ECMEMK217", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (16, 16, "ECMEMK216", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (15, 15, "ECMEMK215", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (14, 14, "ECMEMK214", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (13, 13, "ECMEMK213", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (12, 12, "ECMEMK212", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (11, 11, "ECMEMK211", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) (10, 10, "ECMEMK210", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 9,  9, "ECMEMK209", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 8,  8, "ECMEMK208", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 7,  7, "ECMEMK207", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 6,  6, "ECMEMK206", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 5,  5, "ECMEMK205", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 4,  4, "ECMEMK204", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 3,  3, "ECMEMK203", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 2,  2, "ECMEMK202", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 1,  1, "ECMEMK201", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEMK2      ) ( 0,  0, "ECMEMK200", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (31, 31, "ECMCLSSE031", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (30, 30, "ECMCLSSE030", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (29, 29, "ECMCLSSE029", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (28, 28, "ECMCLSSE028", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (27, 27, "ECMCLSSE027", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (26, 26, "ECMCLSSE026", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (25, 25, "ECMCLSSE025", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (24, 24, "ECMCLSSE024", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (23, 23, "ECMCLSSE023", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (22, 22, "ECMCLSSE022", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (21, 21, "ECMCLSSE021", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (20, 20, "ECMCLSSE020", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (19, 19, "ECMCLSSE019", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (18, 18, "ECMCLSSE018", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (17, 17, "ECMCLSSE017", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (16, 16, "ECMCLSSE016", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (15, 15, "ECMCLSSE015", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (14, 14, "ECMCLSSE014", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (13, 13, "ECMCLSSE013", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (12, 12, "ECMCLSSE012", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (11, 11, "ECMCLSSE011", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) (10, 10, "ECMCLSSE010", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 9,  9, "ECMCLSSE009", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 8,  8, "ECMCLSSE008", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 7,  7, "ECMCLSSE007", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 6,  6, "ECMCLSSE006", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 5,  5, "ECMCLSSE005", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 4,  4, "ECMCLSSE004", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 3,  3, "ECMCLSSE003", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 2,  2, "ECMCLSSE002", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 1,  1, "ECMCLSSE001", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC0    ) ( 0,  0, "ECMCLSSE000", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (31, 31, "ECMCLSSE131", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (30, 30, "ECMCLSSE130", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (29, 29, "ECMCLSSE129", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (28, 28, "ECMCLSSE128", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (27, 27, "ECMCLSSE127", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (26, 26, "ECMCLSSE126", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (25, 25, "ECMCLSSE125", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (24, 24, "ECMCLSSE124", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (23, 23, "ECMCLSSE123", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (22, 22, "ECMCLSSE122", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (21, 21, "ECMCLSSE121", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (20, 20, "ECMCLSSE120", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (19, 19, "ECMCLSSE119", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (18, 18, "ECMCLSSE118", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (17, 17, "ECMCLSSE117", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (16, 16, "ECMCLSSE116", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (15, 15, "ECMCLSSE115", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (14, 14, "ECMCLSSE114", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (13, 13, "ECMCLSSE113", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (12, 12, "ECMCLSSE112", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (11, 11, "ECMCLSSE111", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) (10, 10, "ECMCLSSE110", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 9,  9, "ECMCLSSE109", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 8,  8, "ECMCLSSE108", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 7,  7, "ECMCLSSE107", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 6,  6, "ECMCLSSE106", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 5,  5, "ECMCLSSE105", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 4,  4, "ECMCLSSE104", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 3,  3, "ECMCLSSE103", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 2,  2, "ECMCLSSE102", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 1,  1, "ECMCLSSE101", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC1    ) ( 0,  0, "ECMCLSSE100", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (30, 30, "ECMCLSSE230", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (29, 29, "ECMCLSSE229", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (28, 28, "ECMCLSSE228", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (27, 27, "ECMCLSSE227", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (26, 26, "ECMCLSSE226", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (25, 25, "ECMCLSSE225", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (24, 24, "ECMCLSSE224", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (23, 23, "ECMCLSSE223", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (22, 22, "ECMCLSSE222", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (21, 21, "ECMCLSSE221", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (20, 20, "ECMCLSSE220", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (19, 19, "ECMCLSSE219", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (18, 18, "ECMCLSSE218", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (17, 17, "ECMCLSSE217", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (16, 16, "ECMCLSSE216", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (15, 15, "ECMCLSSE215", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (14, 14, "ECMCLSSE214", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (13, 13, "ECMCLSSE213", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (12, 12, "ECMCLSSE212", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (11, 11, "ECMCLSSE211", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) (10, 10, "ECMCLSSE210", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 9,  9, "ECMCLSSE209", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 8,  8, "ECMCLSSE208", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 7,  7, "ECMCLSSE207", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 6,  6, "ECMCLSSE206", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 5,  5, "ECMCLSSE205", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 4,  4, "ECMCLSSE204", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 3,  3, "ECMCLSSE203", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 2,  2, "ECMCLSSE202", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 1,  1, "ECMCLSSE201", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMESSTC2    ) ( 0,  0, "ECMCLSSE200", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPCMD1     ) ( 7,  0, "ECM1REG" , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPS        ) ( 0,  0, "ECMPRERR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (31, 31, "ECMPE031", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (30, 30, "ECMPE030", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (29, 29, "ECMPE029", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (28, 28, "ECMPE028", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (27, 27, "ECMPE027", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (26, 26, "ECMPE026", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (25, 25, "ECMPE025", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (24, 24, "ECMPE024", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (23, 23, "ECMPE023", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (22, 22, "ECMPE022", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (21, 21, "ECMPE021", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (20, 20, "ECMPE020", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (19, 19, "ECMPE019", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (18, 18, "ECMPE018", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (17, 17, "ECMPE017", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (16, 16, "ECMPE016", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (15, 15, "ECMPE015", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (14, 14, "ECMPE014", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (13, 13, "ECMPE013", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (12, 12, "ECMPE012", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (11, 11, "ECMPE011", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) (10, 10, "ECMPE010", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 9,  9, "ECMPE009", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 8,  8, "ECMPE008", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 7,  7, "ECMPE007", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 6,  6, "ECMPE006", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 5,  5, "ECMPE005", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 4,  4, "ECMPE004", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 3,  3, "ECMPE003", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 2,  2, "ECMPE002", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 1,  1, "ECMPE001", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE0       ) ( 0,  0, "ECMPE000", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (31, 31, "ECMPE131", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (30, 30, "ECMPE130", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (29, 29, "ECMPE129", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (28, 28, "ECMPE128", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (27, 27, "ECMPE127", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (26, 26, "ECMPE126", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (25, 25, "ECMPE125", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (24, 24, "ECMPE124", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (23, 23, "ECMPE123", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (22, 22, "ECMPE122", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (21, 21, "ECMPE121", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (20, 20, "ECMPE120", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (19, 19, "ECMPE119", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (18, 18, "ECMPE118", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (17, 17, "ECMPE117", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (16, 16, "ECMPE116", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (15, 15, "ECMPE115", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (14, 14, "ECMPE114", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (13, 13, "ECMPE113", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (12, 12, "ECMPE112", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (11, 11, "ECMPE111", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) (10, 10, "ECMPE110", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 9,  9, "ECMPE109", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 8,  8, "ECMPE108", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 7,  7, "ECMPE107", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 6,  6, "ECMPE106", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 5,  5, "ECMPE105", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 4,  4, "ECMPE104", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 3,  3, "ECMPE103", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 2,  2, "ECMPE102", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 1,  1, "ECMPE101", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE1       ) ( 0,  0, "ECMPE100", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (29, 29, "ECMPE229", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (28, 28, "ECMPE228", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (27, 27, "ECMPE227", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (26, 26, "ECMPE226", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (25, 25, "ECMPE225", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (24, 24, "ECMPE224", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (23, 23, "ECMPE223", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (22, 22, "ECMPE222", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (21, 21, "ECMPE221", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (20, 20, "ECMPE220", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (19, 19, "ECMPE219", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (18, 18, "ECMPE218", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (17, 17, "ECMPE217", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (16, 16, "ECMPE216", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (15, 15, "ECMPE215", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (14, 14, "ECMPE214", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (13, 13, "ECMPE213", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (12, 12, "ECMPE212", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (11, 11, "ECMPE211", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) (10, 10, "ECMPE210", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 9,  9, "ECMPE209", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 8,  8, "ECMPE208", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 7,  7, "ECMPE207", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 6,  6, "ECMPE206", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 5,  5, "ECMPE205", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 4,  4, "ECMPE204", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 3,  3, "ECMPE203", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 2,  2, "ECMPE202", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 1,  1, "ECMPE201", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMPE2       ) ( 0,  0, "ECMPE200", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL    ) ( 1,  1, "ECMSTP"  , 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*ECMDTMCTL    ) ( 0,  0, "ECMSTA"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMR      ) (15,  0, "ECMDTMR" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*ECMDTMCMP    ) (15,  0, "ECMDTMCMP", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (31, 31, "ECMDTMCFG031", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (30, 30, "ECMDTMCFG030", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (29, 29, "ECMDTMCFG029", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (28, 28, "ECMDTMCFG028", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (27, 27, "ECMDTMCFG027", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (26, 26, "ECMDTMCFG026", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (25, 25, "ECMDTMCFG025", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (24, 24, "ECMDTMCFG024", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (23, 23, "ECMDTMCFG023", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (22, 22, "ECMDTMCFG022", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (21, 21, "ECMDTMCFG021", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (20, 20, "ECMDTMCFG020", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (19, 19, "ECMDTMCFG019", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (18, 18, "ECMDTMCFG018", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (17, 17, "ECMDTMCFG017", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (16, 16, "ECMDTMCFG016", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (15, 15, "ECMDTMCFG015", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (14, 14, "ECMDTMCFG014", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (13, 13, "ECMDTMCFG013", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (12, 12, "ECMDTMCFG012", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (11, 11, "ECMDTMCFG011", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) (10, 10, "ECMDTMCFG010", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 9,  9, "ECMDTMCFG009", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 8,  8, "ECMDTMCFG008", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 7,  7, "ECMDTMCFG007", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 6,  6, "ECMDTMCFG006", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 5,  5, "ECMDTMCFG005", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 4,  4, "ECMDTMCFG004", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 3,  3, "ECMDTMCFG003", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 2,  2, "ECMDTMCFG002", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 1,  1, "ECMDTMCFG001", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG0   ) ( 0,  0, "ECMDTMCFG000", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (31, 31, "ECMDTMCFG131", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (30, 30, "ECMDTMCFG130", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (29, 29, "ECMDTMCFG129", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (28, 28, "ECMDTMCFG128", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (27, 27, "ECMDTMCFG127", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (26, 26, "ECMDTMCFG126", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (25, 25, "ECMDTMCFG125", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (24, 24, "ECMDTMCFG124", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (23, 23, "ECMDTMCFG123", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (22, 22, "ECMDTMCFG122", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (21, 21, "ECMDTMCFG121", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (20, 20, "ECMDTMCFG120", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (19, 19, "ECMDTMCFG119", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (18, 18, "ECMDTMCFG118", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (17, 17, "ECMDTMCFG117", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (16, 16, "ECMDTMCFG116", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (15, 15, "ECMDTMCFG115", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (14, 14, "ECMDTMCFG114", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (13, 13, "ECMDTMCFG113", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (12, 12, "ECMDTMCFG112", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (11, 11, "ECMDTMCFG111", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) (10, 10, "ECMDTMCFG110", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 9,  9, "ECMDTMCFG109", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 8,  8, "ECMDTMCFG108", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 7,  7, "ECMDTMCFG107", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 6,  6, "ECMDTMCFG106", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 5,  5, "ECMDTMCFG105", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 4,  4, "ECMDTMCFG104", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 3,  3, "ECMDTMCFG103", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 2,  2, "ECMDTMCFG102", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 1,  1, "ECMDTMCFG101", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG1   ) ( 0,  0, "ECMDTMCFG100", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (28, 28, "ECMDTMCFG228", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (27, 27, "ECMDTMCFG227", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (26, 26, "ECMDTMCFG226", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (25, 25, "ECMDTMCFG225", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (24, 24, "ECMDTMCFG224", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (23, 23, "ECMDTMCFG223", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (22, 22, "ECMDTMCFG222", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (21, 21, "ECMDTMCFG221", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (20, 20, "ECMDTMCFG220", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (19, 19, "ECMDTMCFG219", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (18, 18, "ECMDTMCFG218", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (17, 17, "ECMDTMCFG217", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (16, 16, "ECMDTMCFG216", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (15, 15, "ECMDTMCFG215", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (14, 14, "ECMDTMCFG214", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (13, 13, "ECMDTMCFG213", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (12, 12, "ECMDTMCFG212", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (11, 11, "ECMDTMCFG211", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) (10, 10, "ECMDTMCFG210", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 9,  9, "ECMDTMCFG209", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 8,  8, "ECMDTMCFG208", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 7,  7, "ECMDTMCFG207", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 6,  6, "ECMDTMCFG206", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 5,  5, "ECMDTMCFG205", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 4,  4, "ECMDTMCFG204", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 3,  3, "ECMDTMCFG203", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 2,  2, "ECMDTMCFG202", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 1,  1, "ECMDTMCFG201", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG2   ) ( 0,  0, "ECMDTMCFG200", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (31, 31, "ECMDTMCFG331", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (30, 30, "ECMDTMCFG330", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (29, 29, "ECMDTMCFG329", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (28, 28, "ECMDTMCFG328", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (27, 27, "ECMDTMCFG327", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (26, 26, "ECMDTMCFG326", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (25, 25, "ECMDTMCFG325", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (24, 24, "ECMDTMCFG324", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (23, 23, "ECMDTMCFG323", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (22, 22, "ECMDTMCFG322", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (21, 21, "ECMDTMCFG321", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (20, 20, "ECMDTMCFG320", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (19, 19, "ECMDTMCFG319", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (18, 18, "ECMDTMCFG318", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (17, 17, "ECMDTMCFG317", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (16, 16, "ECMDTMCFG316", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (15, 15, "ECMDTMCFG315", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (14, 14, "ECMDTMCFG314", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (13, 13, "ECMDTMCFG313", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (12, 12, "ECMDTMCFG312", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (11, 11, "ECMDTMCFG311", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) (10, 10, "ECMDTMCFG310", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 9,  9, "ECMDTMCFG309", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 8,  8, "ECMDTMCFG308", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 7,  7, "ECMDTMCFG307", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 6,  6, "ECMDTMCFG306", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 5,  5, "ECMDTMCFG305", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 4,  4, "ECMDTMCFG304", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 3,  3, "ECMDTMCFG303", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 2,  2, "ECMDTMCFG302", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 1,  1, "ECMDTMCFG301", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG3   ) ( 0,  0, "ECMDTMCFG300", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (31, 31, "ECMDTMCFG431", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (30, 30, "ECMDTMCFG430", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (29, 29, "ECMDTMCFG429", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (28, 28, "ECMDTMCFG428", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (27, 27, "ECMDTMCFG427", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (26, 26, "ECMDTMCFG426", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (25, 25, "ECMDTMCFG425", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (24, 24, "ECMDTMCFG424", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (23, 23, "ECMDTMCFG423", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (22, 22, "ECMDTMCFG422", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (21, 21, "ECMDTMCFG421", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (20, 20, "ECMDTMCFG420", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (19, 19, "ECMDTMCFG419", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (18, 18, "ECMDTMCFG418", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (17, 17, "ECMDTMCFG417", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (16, 16, "ECMDTMCFG416", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (15, 15, "ECMDTMCFG415", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (14, 14, "ECMDTMCFG414", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (13, 13, "ECMDTMCFG413", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (12, 12, "ECMDTMCFG412", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (11, 11, "ECMDTMCFG411", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) (10, 10, "ECMDTMCFG410", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 9,  9, "ECMDTMCFG409", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 8,  8, "ECMDTMCFG408", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 7,  7, "ECMDTMCFG407", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 6,  6, "ECMDTMCFG406", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 5,  5, "ECMDTMCFG405", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 4,  4, "ECMDTMCFG404", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 3,  3, "ECMDTMCFG403", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 2,  2, "ECMDTMCFG402", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 1,  1, "ECMDTMCFG401", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG4   ) ( 0,  0, "ECMDTMCFG400", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (28, 28, "ECMDTMCFG528", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (27, 27, "ECMDTMCFG527", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (26, 26, "ECMDTMCFG526", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (25, 25, "ECMDTMCFG525", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (24, 24, "ECMDTMCFG524", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (23, 23, "ECMDTMCFG523", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (22, 22, "ECMDTMCFG522", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (21, 21, "ECMDTMCFG521", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (20, 20, "ECMDTMCFG520", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (19, 19, "ECMDTMCFG519", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (18, 18, "ECMDTMCFG518", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (17, 17, "ECMDTMCFG517", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (16, 16, "ECMDTMCFG516", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (15, 15, "ECMDTMCFG515", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (14, 14, "ECMDTMCFG514", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (13, 13, "ECMDTMCFG513", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (12, 12, "ECMDTMCFG512", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (11, 11, "ECMDTMCFG511", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) (10, 10, "ECMDTMCFG510", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 9,  9, "ECMDTMCFG509", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 8,  8, "ECMDTMCFG508", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 7,  7, "ECMDTMCFG507", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 6,  6, "ECMDTMCFG506", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 5,  5, "ECMDTMCFG505", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 4,  4, "ECMDTMCFG504", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 3,  3, "ECMDTMCFG503", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 2,  2, "ECMDTMCFG502", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 1,  1, "ECMDTMCFG501", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMDTMCFG5   ) ( 0,  0, "ECMDTMCFG500", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*ECMEOUTCLRT  ) (15,  0, "ECMEOUTCLRT", 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["ECMmESET" ]["ECMmEST"  ] = &Cecm_regif::cb_ECMmESET_ECMmEST;
    mWrCbAPI["ECMmECLR" ]["ECMmECT"  ] = &Cecm_regif::cb_ECMmECLR_ECMmECT;
    mWrCbAPI["ECMMICFG0"]["ECMMIE000"] = &Cecm_regif::cb_ECMMICFG0_ECMMIE000;
    mWrCbAPI["ECMMICFG1"]["ECMMIE100"] = &Cecm_regif::cb_ECMMICFG1_ECMMIE100;
    mWrCbAPI["ECMMICFG2"]["ECMMIE200"] = &Cecm_regif::cb_ECMMICFG2_ECMMIE200;
    mWrCbAPI["ECMNMICFG0"]["ECMNMIE000"] = &Cecm_regif::cb_ECMNMICFG0_ECMNMIE000;
    mWrCbAPI["ECMNMICFG1"]["ECMNMIE100"] = &Cecm_regif::cb_ECMNMICFG1_ECMNMIE100;
    mWrCbAPI["ECMNMICFG2"]["ECMNMIE200"] = &Cecm_regif::cb_ECMNMICFG2_ECMNMIE200;
    mWrCbAPI["ECMIRCFG0"]["ECMIRE000"] = &Cecm_regif::cb_ECMIRCFG0_ECMIRE000;
    mWrCbAPI["ECMIRCFG1"]["ECMIRE100"] = &Cecm_regif::cb_ECMIRCFG1_ECMIRE100;
    mWrCbAPI["ECMIRCFG2"]["ECMIRE200"] = &Cecm_regif::cb_ECMIRCFG2_ECMIRE200;
    mWrCbAPI["ECMEMK0"  ]["ECMEMK000"] = &Cecm_regif::cb_ECMEMK0_ECMEMK000;
    mWrCbAPI["ECMEMK1"  ]["ECMEMK100"] = &Cecm_regif::cb_ECMEMK1_ECMEMK100;
    mWrCbAPI["ECMEMK2"  ]["ECMEMK200"] = &Cecm_regif::cb_ECMEMK2_ECMEMK200;
    mWrCbAPI["ECMESSTC0"]["ECMCLSSE000"] = &Cecm_regif::cb_ECMESSTC0_ECMCLSSE000;
    mWrCbAPI["ECMESSTC1"]["ECMCLSSE100"] = &Cecm_regif::cb_ECMESSTC1_ECMCLSSE100;
    mWrCbAPI["ECMESSTC2"]["ECMCLSSE200"] = &Cecm_regif::cb_ECMESSTC2_ECMCLSSE200;
    mWrCbAPI["ECMPE0"   ]["ECMPE000" ] = &Cecm_regif::cb_ECMPE0_ECMPE000;
    mWrCbAPI["ECMPE1"   ]["ECMPE100" ] = &Cecm_regif::cb_ECMPE1_ECMPE100;
    mWrCbAPI["ECMPE2"   ]["ECMPE200" ] = &Cecm_regif::cb_ECMPE2_ECMPE200;
    mWrCbAPI["ECMDTMCTL"]["ECMSTP"   ] = &Cecm_regif::cb_ECMDTMCTL_ECMSTP;
    mWrCbAPI["ECMDTMCMP"]["ECMDTMCMP"] = &Cecm_regif::cb_ECMDTMCMP_ECMDTMCMP;
    mWrCbAPI["ECMDTMCFG0"]["ECMDTMCFG000"] = &Cecm_regif::cb_ECMDTMCFG0_ECMDTMCFG000;
    mWrCbAPI["ECMDTMCFG1"]["ECMDTMCFG100"] = &Cecm_regif::cb_ECMDTMCFG1_ECMDTMCFG100;
    mWrCbAPI["ECMDTMCFG2"]["ECMDTMCFG200"] = &Cecm_regif::cb_ECMDTMCFG2_ECMDTMCFG200;
    mWrCbAPI["ECMDTMCFG3"]["ECMDTMCFG300"] = &Cecm_regif::cb_ECMDTMCFG3_ECMDTMCFG300;
    mWrCbAPI["ECMDTMCFG4"]["ECMDTMCFG400"] = &Cecm_regif::cb_ECMDTMCFG4_ECMDTMCFG400;
    mWrCbAPI["ECMDTMCFG5"]["ECMDTMCFG500"] = &Cecm_regif::cb_ECMDTMCFG5_ECMDTMCFG500;
    mWrCbAPI["ECMEOUTCLRT"]["ECMEOUTCLRT"] = &Cecm_regif::cb_ECMEOUTCLRT_ECMEOUTCLRT;

    mRdCbAPI["ECMDTMR"  ]["ECMDTMR"  ] = &Cecm_regif::cb_ECMDTMR_ECMDTMR;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cecm_regif::~Cecm_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cecm_regif::uint Cecm_regif::bit_select(
                        cuint val,    ///< [in] Writting address
                        cuint start,  ///< [in] start bit position
                        cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                        const unsigned char *p_data,   ///< [in] Writing data
                        cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                        unsigned char *p_data,   ///< [out] Reading data
                        cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cecm_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                const unsigned char *p_data,  ///< [in] Writing data
                                cuint size,                   ///< [in] Data size (byte)
                                bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cecm_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size,              ///< [in]  Data size (byte)
                                bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 9-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cecm_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                             unsigned char *p_data,          ///< [out] Reading data
                             cuint size,                     ///< [in]  Data size (byte)
                             cuint reg_index,                ///< [in] Register index
                             bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 //Access size less than the register's length
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 //Access size less than the register's length
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 //Access size less than the register's length
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cecm_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                             const unsigned char *p_data,      ///< [in] Writing data
                             cuint size,                       ///< [in] Data size (byte)
                             cuint reg_index,                  ///< [in] Register index
                             bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 //Access size less than the register's length
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 //Access size less than the register's length
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cecm_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cecm_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cecm_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cecm_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cecm_regif::InitLocalVal()
{
    // Initialize local variables
    ECMmESET_ECMmEST = 0x0;
    ECMmECLR_ECMmECT = 0x0;
    ECMmESSTR0_ECMmSSE031 = 0x0;
    ECMmESSTR0_ECMmSSE030 = 0x0;
    ECMmESSTR0_ECMmSSE029 = 0x0;
    ECMmESSTR0_ECMmSSE028 = 0x0;
    ECMmESSTR0_ECMmSSE027 = 0x0;
    ECMmESSTR0_ECMmSSE026 = 0x0;
    ECMmESSTR0_ECMmSSE025 = 0x0;
    ECMmESSTR0_ECMmSSE024 = 0x0;
    ECMmESSTR0_ECMmSSE023 = 0x0;
    ECMmESSTR0_ECMmSSE022 = 0x0;
    ECMmESSTR0_ECMmSSE021 = 0x0;
    ECMmESSTR0_ECMmSSE020 = 0x0;
    ECMmESSTR0_ECMmSSE019 = 0x0;
    ECMmESSTR0_ECMmSSE018 = 0x0;
    ECMmESSTR0_ECMmSSE017 = 0x0;
    ECMmESSTR0_ECMmSSE016 = 0x0;
    ECMmESSTR0_ECMmSSE015 = 0x0;
    ECMmESSTR0_ECMmSSE014 = 0x0;
    ECMmESSTR0_ECMmSSE013 = 0x0;
    ECMmESSTR0_ECMmSSE012 = 0x0;
    ECMmESSTR0_ECMmSSE011 = 0x0;
    ECMmESSTR0_ECMmSSE010 = 0x0;
    ECMmESSTR0_ECMmSSE009 = 0x0;
    ECMmESSTR0_ECMmSSE008 = 0x0;
    ECMmESSTR0_ECMmSSE007 = 0x0;
    ECMmESSTR0_ECMmSSE006 = 0x0;
    ECMmESSTR0_ECMmSSE005 = 0x0;
    ECMmESSTR0_ECMmSSE004 = 0x0;
    ECMmESSTR0_ECMmSSE003 = 0x0;
    ECMmESSTR0_ECMmSSE002 = 0x0;
    ECMmESSTR0_ECMmSSE001 = 0x0;
    ECMmESSTR0_ECMmSSE000 = 0x0;
    ECMmESSTR1_ECMmSSE131 = 0x0;
    ECMmESSTR1_ECMmSSE130 = 0x0;
    ECMmESSTR1_ECMmSSE129 = 0x0;
    ECMmESSTR1_ECMmSSE128 = 0x0;
    ECMmESSTR1_ECMmSSE127 = 0x0;
    ECMmESSTR1_ECMmSSE126 = 0x0;
    ECMmESSTR1_ECMmSSE125 = 0x0;
    ECMmESSTR1_ECMmSSE124 = 0x0;
    ECMmESSTR1_ECMmSSE123 = 0x0;
    ECMmESSTR1_ECMmSSE122 = 0x0;
    ECMmESSTR1_ECMmSSE121 = 0x0;
    ECMmESSTR1_ECMmSSE120 = 0x0;
    ECMmESSTR1_ECMmSSE119 = 0x0;
    ECMmESSTR1_ECMmSSE118 = 0x0;
    ECMmESSTR1_ECMmSSE117 = 0x0;
    ECMmESSTR1_ECMmSSE116 = 0x0;
    ECMmESSTR1_ECMmSSE115 = 0x0;
    ECMmESSTR1_ECMmSSE114 = 0x0;
    ECMmESSTR1_ECMmSSE113 = 0x0;
    ECMmESSTR1_ECMmSSE112 = 0x0;
    ECMmESSTR1_ECMmSSE111 = 0x0;
    ECMmESSTR1_ECMmSSE110 = 0x0;
    ECMmESSTR1_ECMmSSE109 = 0x0;
    ECMmESSTR1_ECMmSSE108 = 0x0;
    ECMmESSTR1_ECMmSSE107 = 0x0;
    ECMmESSTR1_ECMmSSE106 = 0x0;
    ECMmESSTR1_ECMmSSE105 = 0x0;
    ECMmESSTR1_ECMmSSE104 = 0x0;
    ECMmESSTR1_ECMmSSE103 = 0x0;
    ECMmESSTR1_ECMmSSE102 = 0x0;
    ECMmESSTR1_ECMmSSE101 = 0x0;
    ECMmESSTR1_ECMmSSE100 = 0x0;
    ECMmESSTR2_ECMmSSE231 = 0x0;
    ECMmESSTR2_ECMmSSE230 = 0x0;
    ECMmESSTR2_ECMmSSE229 = 0x0;
    ECMmESSTR2_ECMmSSE228 = 0x0;
    ECMmESSTR2_ECMmSSE227 = 0x0;
    ECMmESSTR2_ECMmSSE226 = 0x0;
    ECMmESSTR2_ECMmSSE225 = 0x0;
    ECMmESSTR2_ECMmSSE224 = 0x0;
    ECMmESSTR2_ECMmSSE223 = 0x0;
    ECMmESSTR2_ECMmSSE222 = 0x0;
    ECMmESSTR2_ECMmSSE221 = 0x0;
    ECMmESSTR2_ECMmSSE220 = 0x0;
    ECMmESSTR2_ECMmSSE219 = 0x0;
    ECMmESSTR2_ECMmSSE218 = 0x0;
    ECMmESSTR2_ECMmSSE217 = 0x0;
    ECMmESSTR2_ECMmSSE216 = 0x0;
    ECMmESSTR2_ECMmSSE215 = 0x0;
    ECMmESSTR2_ECMmSSE214 = 0x0;
    ECMmESSTR2_ECMmSSE213 = 0x0;
    ECMmESSTR2_ECMmSSE212 = 0x0;
    ECMmESSTR2_ECMmSSE211 = 0x0;
    ECMmESSTR2_ECMmSSE210 = 0x0;
    ECMmESSTR2_ECMmSSE209 = 0x0;
    ECMmESSTR2_ECMmSSE208 = 0x0;
    ECMmESSTR2_ECMmSSE207 = 0x0;
    ECMmESSTR2_ECMmSSE206 = 0x0;
    ECMmESSTR2_ECMmSSE205 = 0x0;
    ECMmESSTR2_ECMmSSE204 = 0x0;
    ECMmESSTR2_ECMmSSE203 = 0x0;
    ECMmESSTR2_ECMmSSE202 = 0x0;
    ECMmESSTR2_ECMmSSE201 = 0x0;
    ECMmESSTR2_ECMmSSE200 = 0x0;
    ECMmPCMD0_ECMm0REG = 0x0;
    ECMEPCFG_ECMSL0 = 0x0;
    ECMMICFG0_ECMMIE031 = 0x0;
    ECMMICFG0_ECMMIE030 = 0x0;
    ECMMICFG0_ECMMIE029 = 0x0;
    ECMMICFG0_ECMMIE028 = 0x0;
    ECMMICFG0_ECMMIE027 = 0x0;
    ECMMICFG0_ECMMIE026 = 0x0;
    ECMMICFG0_ECMMIE025 = 0x0;
    ECMMICFG0_ECMMIE024 = 0x0;
    ECMMICFG0_ECMMIE023 = 0x0;
    ECMMICFG0_ECMMIE022 = 0x0;
    ECMMICFG0_ECMMIE021 = 0x0;
    ECMMICFG0_ECMMIE020 = 0x0;
    ECMMICFG0_ECMMIE019 = 0x0;
    ECMMICFG0_ECMMIE018 = 0x0;
    ECMMICFG0_ECMMIE017 = 0x0;
    ECMMICFG0_ECMMIE016 = 0x0;
    ECMMICFG0_ECMMIE015 = 0x0;
    ECMMICFG0_ECMMIE014 = 0x0;
    ECMMICFG0_ECMMIE013 = 0x0;
    ECMMICFG0_ECMMIE012 = 0x0;
    ECMMICFG0_ECMMIE011 = 0x0;
    ECMMICFG0_ECMMIE010 = 0x0;
    ECMMICFG0_ECMMIE009 = 0x0;
    ECMMICFG0_ECMMIE008 = 0x0;
    ECMMICFG0_ECMMIE007 = 0x0;
    ECMMICFG0_ECMMIE006 = 0x0;
    ECMMICFG0_ECMMIE005 = 0x0;
    ECMMICFG0_ECMMIE004 = 0x0;
    ECMMICFG0_ECMMIE003 = 0x0;
    ECMMICFG0_ECMMIE002 = 0x0;
    ECMMICFG0_ECMMIE001 = 0x0;
    ECMMICFG0_ECMMIE000 = 0x0;
    ECMMICFG1_ECMMIE131 = 0x0;
    ECMMICFG1_ECMMIE130 = 0x0;
    ECMMICFG1_ECMMIE129 = 0x0;
    ECMMICFG1_ECMMIE128 = 0x0;
    ECMMICFG1_ECMMIE127 = 0x0;
    ECMMICFG1_ECMMIE126 = 0x0;
    ECMMICFG1_ECMMIE125 = 0x0;
    ECMMICFG1_ECMMIE124 = 0x0;
    ECMMICFG1_ECMMIE123 = 0x0;
    ECMMICFG1_ECMMIE122 = 0x0;
    ECMMICFG1_ECMMIE121 = 0x0;
    ECMMICFG1_ECMMIE120 = 0x0;
    ECMMICFG1_ECMMIE119 = 0x0;
    ECMMICFG1_ECMMIE118 = 0x0;
    ECMMICFG1_ECMMIE117 = 0x0;
    ECMMICFG1_ECMMIE116 = 0x0;
    ECMMICFG1_ECMMIE115 = 0x0;
    ECMMICFG1_ECMMIE114 = 0x0;
    ECMMICFG1_ECMMIE113 = 0x0;
    ECMMICFG1_ECMMIE112 = 0x0;
    ECMMICFG1_ECMMIE111 = 0x0;
    ECMMICFG1_ECMMIE110 = 0x0;
    ECMMICFG1_ECMMIE109 = 0x0;
    ECMMICFG1_ECMMIE108 = 0x0;
    ECMMICFG1_ECMMIE107 = 0x0;
    ECMMICFG1_ECMMIE106 = 0x0;
    ECMMICFG1_ECMMIE105 = 0x0;
    ECMMICFG1_ECMMIE104 = 0x0;
    ECMMICFG1_ECMMIE103 = 0x0;
    ECMMICFG1_ECMMIE102 = 0x0;
    ECMMICFG1_ECMMIE101 = 0x0;
    ECMMICFG1_ECMMIE100 = 0x0;
    ECMMICFG2_ECMMIE228 = 0x0;
    ECMMICFG2_ECMMIE227 = 0x0;
    ECMMICFG2_ECMMIE226 = 0x0;
    ECMMICFG2_ECMMIE225 = 0x0;
    ECMMICFG2_ECMMIE224 = 0x0;
    ECMMICFG2_ECMMIE223 = 0x0;
    ECMMICFG2_ECMMIE222 = 0x0;
    ECMMICFG2_ECMMIE221 = 0x0;
    ECMMICFG2_ECMMIE220 = 0x0;
    ECMMICFG2_ECMMIE219 = 0x0;
    ECMMICFG2_ECMMIE218 = 0x0;
    ECMMICFG2_ECMMIE217 = 0x0;
    ECMMICFG2_ECMMIE216 = 0x0;
    ECMMICFG2_ECMMIE215 = 0x0;
    ECMMICFG2_ECMMIE214 = 0x0;
    ECMMICFG2_ECMMIE213 = 0x0;
    ECMMICFG2_ECMMIE212 = 0x0;
    ECMMICFG2_ECMMIE211 = 0x0;
    ECMMICFG2_ECMMIE210 = 0x0;
    ECMMICFG2_ECMMIE209 = 0x0;
    ECMMICFG2_ECMMIE208 = 0x0;
    ECMMICFG2_ECMMIE207 = 0x0;
    ECMMICFG2_ECMMIE206 = 0x0;
    ECMMICFG2_ECMMIE205 = 0x0;
    ECMMICFG2_ECMMIE204 = 0x0;
    ECMMICFG2_ECMMIE203 = 0x0;
    ECMMICFG2_ECMMIE202 = 0x0;
    ECMMICFG2_ECMMIE201 = 0x0;
    ECMMICFG2_ECMMIE200 = 0x0;
    ECMNMICFG0_ECMNMIE031 = 0x0;
    ECMNMICFG0_ECMNMIE030 = 0x0;
    ECMNMICFG0_ECMNMIE029 = 0x0;
    ECMNMICFG0_ECMNMIE028 = 0x0;
    ECMNMICFG0_ECMNMIE027 = 0x0;
    ECMNMICFG0_ECMNMIE026 = 0x0;
    ECMNMICFG0_ECMNMIE025 = 0x0;
    ECMNMICFG0_ECMNMIE024 = 0x0;
    ECMNMICFG0_ECMNMIE023 = 0x0;
    ECMNMICFG0_ECMNMIE022 = 0x0;
    ECMNMICFG0_ECMNMIE021 = 0x0;
    ECMNMICFG0_ECMNMIE020 = 0x0;
    ECMNMICFG0_ECMNMIE019 = 0x0;
    ECMNMICFG0_ECMNMIE018 = 0x0;
    ECMNMICFG0_ECMNMIE017 = 0x0;
    ECMNMICFG0_ECMNMIE016 = 0x0;
    ECMNMICFG0_ECMNMIE015 = 0x0;
    ECMNMICFG0_ECMNMIE014 = 0x0;
    ECMNMICFG0_ECMNMIE013 = 0x0;
    ECMNMICFG0_ECMNMIE012 = 0x0;
    ECMNMICFG0_ECMNMIE011 = 0x0;
    ECMNMICFG0_ECMNMIE010 = 0x0;
    ECMNMICFG0_ECMNMIE009 = 0x0;
    ECMNMICFG0_ECMNMIE008 = 0x0;
    ECMNMICFG0_ECMNMIE007 = 0x0;
    ECMNMICFG0_ECMNMIE006 = 0x0;
    ECMNMICFG0_ECMNMIE005 = 0x0;
    ECMNMICFG0_ECMNMIE004 = 0x0;
    ECMNMICFG0_ECMNMIE003 = 0x0;
    ECMNMICFG0_ECMNMIE002 = 0x0;
    ECMNMICFG0_ECMNMIE001 = 0x0;
    ECMNMICFG0_ECMNMIE000 = 0x0;
    ECMNMICFG1_ECMNMIE131 = 0x0;
    ECMNMICFG1_ECMNMIE130 = 0x0;
    ECMNMICFG1_ECMNMIE129 = 0x0;
    ECMNMICFG1_ECMNMIE128 = 0x0;
    ECMNMICFG1_ECMNMIE127 = 0x0;
    ECMNMICFG1_ECMNMIE126 = 0x0;
    ECMNMICFG1_ECMNMIE125 = 0x0;
    ECMNMICFG1_ECMNMIE124 = 0x0;
    ECMNMICFG1_ECMNMIE123 = 0x0;
    ECMNMICFG1_ECMNMIE122 = 0x0;
    ECMNMICFG1_ECMNMIE121 = 0x0;
    ECMNMICFG1_ECMNMIE120 = 0x0;
    ECMNMICFG1_ECMNMIE119 = 0x0;
    ECMNMICFG1_ECMNMIE118 = 0x0;
    ECMNMICFG1_ECMNMIE117 = 0x0;
    ECMNMICFG1_ECMNMIE116 = 0x0;
    ECMNMICFG1_ECMNMIE115 = 0x0;
    ECMNMICFG1_ECMNMIE114 = 0x0;
    ECMNMICFG1_ECMNMIE113 = 0x0;
    ECMNMICFG1_ECMNMIE112 = 0x0;
    ECMNMICFG1_ECMNMIE111 = 0x0;
    ECMNMICFG1_ECMNMIE110 = 0x0;
    ECMNMICFG1_ECMNMIE109 = 0x0;
    ECMNMICFG1_ECMNMIE108 = 0x0;
    ECMNMICFG1_ECMNMIE107 = 0x0;
    ECMNMICFG1_ECMNMIE106 = 0x0;
    ECMNMICFG1_ECMNMIE105 = 0x0;
    ECMNMICFG1_ECMNMIE104 = 0x0;
    ECMNMICFG1_ECMNMIE103 = 0x0;
    ECMNMICFG1_ECMNMIE102 = 0x0;
    ECMNMICFG1_ECMNMIE101 = 0x0;
    ECMNMICFG1_ECMNMIE100 = 0x0;
    ECMNMICFG2_ECMNMIE228 = 0x0;
    ECMNMICFG2_ECMNMIE227 = 0x0;
    ECMNMICFG2_ECMNMIE226 = 0x0;
    ECMNMICFG2_ECMNMIE225 = 0x0;
    ECMNMICFG2_ECMNMIE224 = 0x0;
    ECMNMICFG2_ECMNMIE223 = 0x0;
    ECMNMICFG2_ECMNMIE222 = 0x0;
    ECMNMICFG2_ECMNMIE221 = 0x0;
    ECMNMICFG2_ECMNMIE220 = 0x0;
    ECMNMICFG2_ECMNMIE219 = 0x0;
    ECMNMICFG2_ECMNMIE218 = 0x0;
    ECMNMICFG2_ECMNMIE217 = 0x0;
    ECMNMICFG2_ECMNMIE216 = 0x0;
    ECMNMICFG2_ECMNMIE215 = 0x0;
    ECMNMICFG2_ECMNMIE214 = 0x0;
    ECMNMICFG2_ECMNMIE213 = 0x0;
    ECMNMICFG2_ECMNMIE212 = 0x0;
    ECMNMICFG2_ECMNMIE211 = 0x0;
    ECMNMICFG2_ECMNMIE210 = 0x0;
    ECMNMICFG2_ECMNMIE209 = 0x0;
    ECMNMICFG2_ECMNMIE208 = 0x0;
    ECMNMICFG2_ECMNMIE207 = 0x0;
    ECMNMICFG2_ECMNMIE206 = 0x0;
    ECMNMICFG2_ECMNMIE205 = 0x0;
    ECMNMICFG2_ECMNMIE204 = 0x0;
    ECMNMICFG2_ECMNMIE203 = 0x0;
    ECMNMICFG2_ECMNMIE202 = 0x0;
    ECMNMICFG2_ECMNMIE201 = 0x0;
    ECMNMICFG2_ECMNMIE200 = 0x0;
    ECMIRCFG0_ECMIRE031 = 0x0;
    ECMIRCFG0_ECMIRE030 = 0x0;
    ECMIRCFG0_ECMIRE029 = 0x0;
    ECMIRCFG0_ECMIRE028 = 0x0;
    ECMIRCFG0_ECMIRE027 = 0x0;
    ECMIRCFG0_ECMIRE026 = 0x0;
    ECMIRCFG0_ECMIRE025 = 0x0;
    ECMIRCFG0_ECMIRE024 = 0x0;
    ECMIRCFG0_ECMIRE023 = 0x0;
    ECMIRCFG0_ECMIRE022 = 0x0;
    ECMIRCFG0_ECMIRE021 = 0x0;
    ECMIRCFG0_ECMIRE020 = 0x0;
    ECMIRCFG0_ECMIRE019 = 0x0;
    ECMIRCFG0_ECMIRE018 = 0x0;
    ECMIRCFG0_ECMIRE017 = 0x0;
    ECMIRCFG0_ECMIRE016 = 0x0;
    ECMIRCFG0_ECMIRE015 = 0x0;
    ECMIRCFG0_ECMIRE014 = 0x0;
    ECMIRCFG0_ECMIRE013 = 0x0;
    ECMIRCFG0_ECMIRE012 = 0x0;
    ECMIRCFG0_ECMIRE011 = 0x0;
    ECMIRCFG0_ECMIRE010 = 0x0;
    ECMIRCFG0_ECMIRE009 = 0x0;
    ECMIRCFG0_ECMIRE008 = 0x0;
    ECMIRCFG0_ECMIRE007 = 0x0;
    ECMIRCFG0_ECMIRE006 = 0x0;
    ECMIRCFG0_ECMIRE005 = 0x0;
    ECMIRCFG0_ECMIRE004 = 0x0;
    ECMIRCFG0_ECMIRE003 = 0x0;
    ECMIRCFG0_ECMIRE002 = 0x0;
    ECMIRCFG0_ECMIRE001 = 0x0;
    ECMIRCFG0_ECMIRE000 = 0x1;
    ECMIRCFG1_ECMIRE131 = 0x0;
    ECMIRCFG1_ECMIRE130 = 0x0;
    ECMIRCFG1_ECMIRE129 = 0x0;
    ECMIRCFG1_ECMIRE128 = 0x0;
    ECMIRCFG1_ECMIRE127 = 0x0;
    ECMIRCFG1_ECMIRE126 = 0x0;
    ECMIRCFG1_ECMIRE125 = 0x0;
    ECMIRCFG1_ECMIRE124 = 0x0;
    ECMIRCFG1_ECMIRE123 = 0x0;
    ECMIRCFG1_ECMIRE122 = 0x0;
    ECMIRCFG1_ECMIRE121 = 0x0;
    ECMIRCFG1_ECMIRE120 = 0x0;
    ECMIRCFG1_ECMIRE119 = 0x0;
    ECMIRCFG1_ECMIRE118 = 0x0;
    ECMIRCFG1_ECMIRE117 = 0x0;
    ECMIRCFG1_ECMIRE116 = 0x0;
    ECMIRCFG1_ECMIRE115 = 0x0;
    ECMIRCFG1_ECMIRE114 = 0x0;
    ECMIRCFG1_ECMIRE113 = 0x0;
    ECMIRCFG1_ECMIRE112 = 0x0;
    ECMIRCFG1_ECMIRE111 = 0x0;
    ECMIRCFG1_ECMIRE110 = 0x0;
    ECMIRCFG1_ECMIRE109 = 0x0;
    ECMIRCFG1_ECMIRE108 = 0x0;
    ECMIRCFG1_ECMIRE107 = 0x0;
    ECMIRCFG1_ECMIRE106 = 0x0;
    ECMIRCFG1_ECMIRE105 = 0x0;
    ECMIRCFG1_ECMIRE104 = 0x0;
    ECMIRCFG1_ECMIRE103 = 0x0;
    ECMIRCFG1_ECMIRE102 = 0x0;
    ECMIRCFG1_ECMIRE101 = 0x0;
    ECMIRCFG1_ECMIRE100 = 0x0;
    ECMIRCFG2_ECMIRE229 = 0x0;
    ECMIRCFG2_ECMIRE228 = 0x0;
    ECMIRCFG2_ECMIRE227 = 0x0;
    ECMIRCFG2_ECMIRE226 = 0x0;
    ECMIRCFG2_ECMIRE225 = 0x0;
    ECMIRCFG2_ECMIRE224 = 0x0;
    ECMIRCFG2_ECMIRE223 = 0x0;
    ECMIRCFG2_ECMIRE222 = 0x0;
    ECMIRCFG2_ECMIRE221 = 0x0;
    ECMIRCFG2_ECMIRE220 = 0x0;
    ECMIRCFG2_ECMIRE219 = 0x0;
    ECMIRCFG2_ECMIRE218 = 0x0;
    ECMIRCFG2_ECMIRE217 = 0x0;
    ECMIRCFG2_ECMIRE216 = 0x0;
    ECMIRCFG2_ECMIRE215 = 0x0;
    ECMIRCFG2_ECMIRE214 = 0x0;
    ECMIRCFG2_ECMIRE213 = 0x0;
    ECMIRCFG2_ECMIRE212 = 0x0;
    ECMIRCFG2_ECMIRE211 = 0x0;
    ECMIRCFG2_ECMIRE210 = 0x0;
    ECMIRCFG2_ECMIRE209 = 0x0;
    ECMIRCFG2_ECMIRE208 = 0x0;
    ECMIRCFG2_ECMIRE207 = 0x0;
    ECMIRCFG2_ECMIRE206 = 0x0;
    ECMIRCFG2_ECMIRE205 = 0x0;
    ECMIRCFG2_ECMIRE204 = 0x0;
    ECMIRCFG2_ECMIRE203 = 0x0;
    ECMIRCFG2_ECMIRE202 = 0x0;
    ECMIRCFG2_ECMIRE201 = 0x0;
    ECMIRCFG2_ECMIRE200 = 0x0;
    ECMEMK0_ECMEMK031 = 0x0;
    ECMEMK0_ECMEMK030 = 0x0;
    ECMEMK0_ECMEMK029 = 0x0;
    ECMEMK0_ECMEMK028 = 0x0;
    ECMEMK0_ECMEMK027 = 0x0;
    ECMEMK0_ECMEMK026 = 0x0;
    ECMEMK0_ECMEMK025 = 0x0;
    ECMEMK0_ECMEMK024 = 0x0;
    ECMEMK0_ECMEMK023 = 0x0;
    ECMEMK0_ECMEMK022 = 0x0;
    ECMEMK0_ECMEMK021 = 0x0;
    ECMEMK0_ECMEMK020 = 0x0;
    ECMEMK0_ECMEMK019 = 0x0;
    ECMEMK0_ECMEMK018 = 0x0;
    ECMEMK0_ECMEMK017 = 0x0;
    ECMEMK0_ECMEMK016 = 0x0;
    ECMEMK0_ECMEMK015 = 0x0;
    ECMEMK0_ECMEMK014 = 0x0;
    ECMEMK0_ECMEMK013 = 0x0;
    ECMEMK0_ECMEMK012 = 0x0;
    ECMEMK0_ECMEMK011 = 0x0;
    ECMEMK0_ECMEMK010 = 0x0;
    ECMEMK0_ECMEMK009 = 0x0;
    ECMEMK0_ECMEMK008 = 0x0;
    ECMEMK0_ECMEMK007 = 0x0;
    ECMEMK0_ECMEMK006 = 0x0;
    ECMEMK0_ECMEMK005 = 0x0;
    ECMEMK0_ECMEMK004 = 0x0;
    ECMEMK0_ECMEMK003 = 0x0;
    ECMEMK0_ECMEMK002 = 0x0;
    ECMEMK0_ECMEMK001 = 0x0;
    ECMEMK0_ECMEMK000 = 0x0;
    ECMEMK1_ECMEMK131 = 0x0;
    ECMEMK1_ECMEMK130 = 0x0;
    ECMEMK1_ECMEMK129 = 0x0;
    ECMEMK1_ECMEMK128 = 0x0;
    ECMEMK1_ECMEMK127 = 0x0;
    ECMEMK1_ECMEMK126 = 0x0;
    ECMEMK1_ECMEMK125 = 0x0;
    ECMEMK1_ECMEMK124 = 0x0;
    ECMEMK1_ECMEMK123 = 0x0;
    ECMEMK1_ECMEMK122 = 0x0;
    ECMEMK1_ECMEMK121 = 0x0;
    ECMEMK1_ECMEMK120 = 0x0;
    ECMEMK1_ECMEMK119 = 0x0;
    ECMEMK1_ECMEMK118 = 0x0;
    ECMEMK1_ECMEMK117 = 0x0;
    ECMEMK1_ECMEMK116 = 0x0;
    ECMEMK1_ECMEMK115 = 0x0;
    ECMEMK1_ECMEMK114 = 0x0;
    ECMEMK1_ECMEMK113 = 0x0;
    ECMEMK1_ECMEMK112 = 0x0;
    ECMEMK1_ECMEMK111 = 0x0;
    ECMEMK1_ECMEMK110 = 0x0;
    ECMEMK1_ECMEMK109 = 0x0;
    ECMEMK1_ECMEMK108 = 0x0;
    ECMEMK1_ECMEMK107 = 0x0;
    ECMEMK1_ECMEMK106 = 0x0;
    ECMEMK1_ECMEMK105 = 0x0;
    ECMEMK1_ECMEMK104 = 0x0;
    ECMEMK1_ECMEMK103 = 0x0;
    ECMEMK1_ECMEMK102 = 0x0;
    ECMEMK1_ECMEMK101 = 0x0;
    ECMEMK1_ECMEMK100 = 0x0;
    ECMEMK2_ECMEMK229 = 0x0;
    ECMEMK2_ECMEMK228 = 0x0;
    ECMEMK2_ECMEMK227 = 0x0;
    ECMEMK2_ECMEMK226 = 0x0;
    ECMEMK2_ECMEMK225 = 0x0;
    ECMEMK2_ECMEMK224 = 0x0;
    ECMEMK2_ECMEMK223 = 0x0;
    ECMEMK2_ECMEMK222 = 0x0;
    ECMEMK2_ECMEMK221 = 0x0;
    ECMEMK2_ECMEMK220 = 0x0;
    ECMEMK2_ECMEMK219 = 0x0;
    ECMEMK2_ECMEMK218 = 0x0;
    ECMEMK2_ECMEMK217 = 0x0;
    ECMEMK2_ECMEMK216 = 0x0;
    ECMEMK2_ECMEMK215 = 0x0;
    ECMEMK2_ECMEMK214 = 0x0;
    ECMEMK2_ECMEMK213 = 0x0;
    ECMEMK2_ECMEMK212 = 0x0;
    ECMEMK2_ECMEMK211 = 0x0;
    ECMEMK2_ECMEMK210 = 0x0;
    ECMEMK2_ECMEMK209 = 0x0;
    ECMEMK2_ECMEMK208 = 0x0;
    ECMEMK2_ECMEMK207 = 0x0;
    ECMEMK2_ECMEMK206 = 0x0;
    ECMEMK2_ECMEMK205 = 0x0;
    ECMEMK2_ECMEMK204 = 0x0;
    ECMEMK2_ECMEMK203 = 0x0;
    ECMEMK2_ECMEMK202 = 0x0;
    ECMEMK2_ECMEMK201 = 0x0;
    ECMEMK2_ECMEMK200 = 0x0;
    ECMESSTC0_ECMCLSSE031 = 0x0;
    ECMESSTC0_ECMCLSSE030 = 0x0;
    ECMESSTC0_ECMCLSSE029 = 0x0;
    ECMESSTC0_ECMCLSSE028 = 0x0;
    ECMESSTC0_ECMCLSSE027 = 0x0;
    ECMESSTC0_ECMCLSSE026 = 0x0;
    ECMESSTC0_ECMCLSSE025 = 0x0;
    ECMESSTC0_ECMCLSSE024 = 0x0;
    ECMESSTC0_ECMCLSSE023 = 0x0;
    ECMESSTC0_ECMCLSSE022 = 0x0;
    ECMESSTC0_ECMCLSSE021 = 0x0;
    ECMESSTC0_ECMCLSSE020 = 0x0;
    ECMESSTC0_ECMCLSSE019 = 0x0;
    ECMESSTC0_ECMCLSSE018 = 0x0;
    ECMESSTC0_ECMCLSSE017 = 0x0;
    ECMESSTC0_ECMCLSSE016 = 0x0;
    ECMESSTC0_ECMCLSSE015 = 0x0;
    ECMESSTC0_ECMCLSSE014 = 0x0;
    ECMESSTC0_ECMCLSSE013 = 0x0;
    ECMESSTC0_ECMCLSSE012 = 0x0;
    ECMESSTC0_ECMCLSSE011 = 0x0;
    ECMESSTC0_ECMCLSSE010 = 0x0;
    ECMESSTC0_ECMCLSSE009 = 0x0;
    ECMESSTC0_ECMCLSSE008 = 0x0;
    ECMESSTC0_ECMCLSSE007 = 0x0;
    ECMESSTC0_ECMCLSSE006 = 0x0;
    ECMESSTC0_ECMCLSSE005 = 0x0;
    ECMESSTC0_ECMCLSSE004 = 0x0;
    ECMESSTC0_ECMCLSSE003 = 0x0;
    ECMESSTC0_ECMCLSSE002 = 0x0;
    ECMESSTC0_ECMCLSSE001 = 0x0;
    ECMESSTC0_ECMCLSSE000 = 0x0;
    ECMESSTC1_ECMCLSSE131 = 0x0;
    ECMESSTC1_ECMCLSSE130 = 0x0;
    ECMESSTC1_ECMCLSSE129 = 0x0;
    ECMESSTC1_ECMCLSSE128 = 0x0;
    ECMESSTC1_ECMCLSSE127 = 0x0;
    ECMESSTC1_ECMCLSSE126 = 0x0;
    ECMESSTC1_ECMCLSSE125 = 0x0;
    ECMESSTC1_ECMCLSSE124 = 0x0;
    ECMESSTC1_ECMCLSSE123 = 0x0;
    ECMESSTC1_ECMCLSSE122 = 0x0;
    ECMESSTC1_ECMCLSSE121 = 0x0;
    ECMESSTC1_ECMCLSSE120 = 0x0;
    ECMESSTC1_ECMCLSSE119 = 0x0;
    ECMESSTC1_ECMCLSSE118 = 0x0;
    ECMESSTC1_ECMCLSSE117 = 0x0;
    ECMESSTC1_ECMCLSSE116 = 0x0;
    ECMESSTC1_ECMCLSSE115 = 0x0;
    ECMESSTC1_ECMCLSSE114 = 0x0;
    ECMESSTC1_ECMCLSSE113 = 0x0;
    ECMESSTC1_ECMCLSSE112 = 0x0;
    ECMESSTC1_ECMCLSSE111 = 0x0;
    ECMESSTC1_ECMCLSSE110 = 0x0;
    ECMESSTC1_ECMCLSSE109 = 0x0;
    ECMESSTC1_ECMCLSSE108 = 0x0;
    ECMESSTC1_ECMCLSSE107 = 0x0;
    ECMESSTC1_ECMCLSSE106 = 0x0;
    ECMESSTC1_ECMCLSSE105 = 0x0;
    ECMESSTC1_ECMCLSSE104 = 0x0;
    ECMESSTC1_ECMCLSSE103 = 0x0;
    ECMESSTC1_ECMCLSSE102 = 0x0;
    ECMESSTC1_ECMCLSSE101 = 0x0;
    ECMESSTC1_ECMCLSSE100 = 0x0;
    ECMESSTC2_ECMCLSSE230 = 0x0;
    ECMESSTC2_ECMCLSSE229 = 0x0;
    ECMESSTC2_ECMCLSSE228 = 0x0;
    ECMESSTC2_ECMCLSSE227 = 0x0;
    ECMESSTC2_ECMCLSSE226 = 0x0;
    ECMESSTC2_ECMCLSSE225 = 0x0;
    ECMESSTC2_ECMCLSSE224 = 0x0;
    ECMESSTC2_ECMCLSSE223 = 0x0;
    ECMESSTC2_ECMCLSSE222 = 0x0;
    ECMESSTC2_ECMCLSSE221 = 0x0;
    ECMESSTC2_ECMCLSSE220 = 0x0;
    ECMESSTC2_ECMCLSSE219 = 0x0;
    ECMESSTC2_ECMCLSSE218 = 0x0;
    ECMESSTC2_ECMCLSSE217 = 0x0;
    ECMESSTC2_ECMCLSSE216 = 0x0;
    ECMESSTC2_ECMCLSSE215 = 0x0;
    ECMESSTC2_ECMCLSSE214 = 0x0;
    ECMESSTC2_ECMCLSSE213 = 0x0;
    ECMESSTC2_ECMCLSSE212 = 0x0;
    ECMESSTC2_ECMCLSSE211 = 0x0;
    ECMESSTC2_ECMCLSSE210 = 0x0;
    ECMESSTC2_ECMCLSSE209 = 0x0;
    ECMESSTC2_ECMCLSSE208 = 0x0;
    ECMESSTC2_ECMCLSSE207 = 0x0;
    ECMESSTC2_ECMCLSSE206 = 0x0;
    ECMESSTC2_ECMCLSSE205 = 0x0;
    ECMESSTC2_ECMCLSSE204 = 0x0;
    ECMESSTC2_ECMCLSSE203 = 0x0;
    ECMESSTC2_ECMCLSSE202 = 0x0;
    ECMESSTC2_ECMCLSSE201 = 0x0;
    ECMESSTC2_ECMCLSSE200 = 0x0;
    ECMPCMD1_ECM1REG = 0x0;
    ECMPS_ECMPRERR = 0x0;
    ECMPE0_ECMPE031 = 0x0;
    ECMPE0_ECMPE030 = 0x0;
    ECMPE0_ECMPE029 = 0x0;
    ECMPE0_ECMPE028 = 0x0;
    ECMPE0_ECMPE027 = 0x0;
    ECMPE0_ECMPE026 = 0x0;
    ECMPE0_ECMPE025 = 0x0;
    ECMPE0_ECMPE024 = 0x0;
    ECMPE0_ECMPE023 = 0x0;
    ECMPE0_ECMPE022 = 0x0;
    ECMPE0_ECMPE021 = 0x0;
    ECMPE0_ECMPE020 = 0x0;
    ECMPE0_ECMPE019 = 0x0;
    ECMPE0_ECMPE018 = 0x0;
    ECMPE0_ECMPE017 = 0x0;
    ECMPE0_ECMPE016 = 0x0;
    ECMPE0_ECMPE015 = 0x0;
    ECMPE0_ECMPE014 = 0x0;
    ECMPE0_ECMPE013 = 0x0;
    ECMPE0_ECMPE012 = 0x0;
    ECMPE0_ECMPE011 = 0x0;
    ECMPE0_ECMPE010 = 0x0;
    ECMPE0_ECMPE009 = 0x0;
    ECMPE0_ECMPE008 = 0x0;
    ECMPE0_ECMPE007 = 0x0;
    ECMPE0_ECMPE006 = 0x0;
    ECMPE0_ECMPE005 = 0x0;
    ECMPE0_ECMPE004 = 0x0;
    ECMPE0_ECMPE003 = 0x0;
    ECMPE0_ECMPE002 = 0x0;
    ECMPE0_ECMPE001 = 0x0;
    ECMPE0_ECMPE000 = 0x0;
    ECMPE1_ECMPE131 = 0x0;
    ECMPE1_ECMPE130 = 0x0;
    ECMPE1_ECMPE129 = 0x0;
    ECMPE1_ECMPE128 = 0x0;
    ECMPE1_ECMPE127 = 0x0;
    ECMPE1_ECMPE126 = 0x0;
    ECMPE1_ECMPE125 = 0x0;
    ECMPE1_ECMPE124 = 0x0;
    ECMPE1_ECMPE123 = 0x0;
    ECMPE1_ECMPE122 = 0x0;
    ECMPE1_ECMPE121 = 0x0;
    ECMPE1_ECMPE120 = 0x0;
    ECMPE1_ECMPE119 = 0x0;
    ECMPE1_ECMPE118 = 0x0;
    ECMPE1_ECMPE117 = 0x0;
    ECMPE1_ECMPE116 = 0x0;
    ECMPE1_ECMPE115 = 0x0;
    ECMPE1_ECMPE114 = 0x0;
    ECMPE1_ECMPE113 = 0x0;
    ECMPE1_ECMPE112 = 0x0;
    ECMPE1_ECMPE111 = 0x0;
    ECMPE1_ECMPE110 = 0x0;
    ECMPE1_ECMPE109 = 0x0;
    ECMPE1_ECMPE108 = 0x0;
    ECMPE1_ECMPE107 = 0x0;
    ECMPE1_ECMPE106 = 0x0;
    ECMPE1_ECMPE105 = 0x0;
    ECMPE1_ECMPE104 = 0x0;
    ECMPE1_ECMPE103 = 0x0;
    ECMPE1_ECMPE102 = 0x0;
    ECMPE1_ECMPE101 = 0x0;
    ECMPE1_ECMPE100 = 0x0;
    ECMPE2_ECMPE229 = 0x0;
    ECMPE2_ECMPE228 = 0x0;
    ECMPE2_ECMPE227 = 0x0;
    ECMPE2_ECMPE226 = 0x0;
    ECMPE2_ECMPE225 = 0x0;
    ECMPE2_ECMPE224 = 0x0;
    ECMPE2_ECMPE223 = 0x0;
    ECMPE2_ECMPE222 = 0x0;
    ECMPE2_ECMPE221 = 0x0;
    ECMPE2_ECMPE220 = 0x0;
    ECMPE2_ECMPE219 = 0x0;
    ECMPE2_ECMPE218 = 0x0;
    ECMPE2_ECMPE217 = 0x0;
    ECMPE2_ECMPE216 = 0x0;
    ECMPE2_ECMPE215 = 0x0;
    ECMPE2_ECMPE214 = 0x0;
    ECMPE2_ECMPE213 = 0x0;
    ECMPE2_ECMPE212 = 0x0;
    ECMPE2_ECMPE211 = 0x0;
    ECMPE2_ECMPE210 = 0x0;
    ECMPE2_ECMPE209 = 0x0;
    ECMPE2_ECMPE208 = 0x0;
    ECMPE2_ECMPE207 = 0x0;
    ECMPE2_ECMPE206 = 0x0;
    ECMPE2_ECMPE205 = 0x0;
    ECMPE2_ECMPE204 = 0x0;
    ECMPE2_ECMPE203 = 0x0;
    ECMPE2_ECMPE202 = 0x0;
    ECMPE2_ECMPE201 = 0x0;
    ECMPE2_ECMPE200 = 0x0;
    ECMDTMCTL_ECMSTP = 0x0;
    ECMDTMCTL_ECMSTA = 0x0;
    ECMDTMR_ECMDTMR = 0x0;
    ECMDTMCMP_ECMDTMCMP = 0x0;
    ECMDTMCFG0_ECMDTMCFG031 = 0x0;
    ECMDTMCFG0_ECMDTMCFG030 = 0x0;
    ECMDTMCFG0_ECMDTMCFG029 = 0x0;
    ECMDTMCFG0_ECMDTMCFG028 = 0x0;
    ECMDTMCFG0_ECMDTMCFG027 = 0x0;
    ECMDTMCFG0_ECMDTMCFG026 = 0x0;
    ECMDTMCFG0_ECMDTMCFG025 = 0x0;
    ECMDTMCFG0_ECMDTMCFG024 = 0x0;
    ECMDTMCFG0_ECMDTMCFG023 = 0x0;
    ECMDTMCFG0_ECMDTMCFG022 = 0x0;
    ECMDTMCFG0_ECMDTMCFG021 = 0x0;
    ECMDTMCFG0_ECMDTMCFG020 = 0x0;
    ECMDTMCFG0_ECMDTMCFG019 = 0x0;
    ECMDTMCFG0_ECMDTMCFG018 = 0x0;
    ECMDTMCFG0_ECMDTMCFG017 = 0x0;
    ECMDTMCFG0_ECMDTMCFG016 = 0x0;
    ECMDTMCFG0_ECMDTMCFG015 = 0x0;
    ECMDTMCFG0_ECMDTMCFG014 = 0x0;
    ECMDTMCFG0_ECMDTMCFG013 = 0x0;
    ECMDTMCFG0_ECMDTMCFG012 = 0x0;
    ECMDTMCFG0_ECMDTMCFG011 = 0x0;
    ECMDTMCFG0_ECMDTMCFG010 = 0x0;
    ECMDTMCFG0_ECMDTMCFG009 = 0x0;
    ECMDTMCFG0_ECMDTMCFG008 = 0x0;
    ECMDTMCFG0_ECMDTMCFG007 = 0x0;
    ECMDTMCFG0_ECMDTMCFG006 = 0x0;
    ECMDTMCFG0_ECMDTMCFG005 = 0x0;
    ECMDTMCFG0_ECMDTMCFG004 = 0x0;
    ECMDTMCFG0_ECMDTMCFG003 = 0x0;
    ECMDTMCFG0_ECMDTMCFG002 = 0x0;
    ECMDTMCFG0_ECMDTMCFG001 = 0x0;
    ECMDTMCFG0_ECMDTMCFG000 = 0x0;
    ECMDTMCFG1_ECMDTMCFG131 = 0x0;
    ECMDTMCFG1_ECMDTMCFG130 = 0x0;
    ECMDTMCFG1_ECMDTMCFG129 = 0x0;
    ECMDTMCFG1_ECMDTMCFG128 = 0x0;
    ECMDTMCFG1_ECMDTMCFG127 = 0x0;
    ECMDTMCFG1_ECMDTMCFG126 = 0x0;
    ECMDTMCFG1_ECMDTMCFG125 = 0x0;
    ECMDTMCFG1_ECMDTMCFG124 = 0x0;
    ECMDTMCFG1_ECMDTMCFG123 = 0x0;
    ECMDTMCFG1_ECMDTMCFG122 = 0x0;
    ECMDTMCFG1_ECMDTMCFG121 = 0x0;
    ECMDTMCFG1_ECMDTMCFG120 = 0x0;
    ECMDTMCFG1_ECMDTMCFG119 = 0x0;
    ECMDTMCFG1_ECMDTMCFG118 = 0x0;
    ECMDTMCFG1_ECMDTMCFG117 = 0x0;
    ECMDTMCFG1_ECMDTMCFG116 = 0x0;
    ECMDTMCFG1_ECMDTMCFG115 = 0x0;
    ECMDTMCFG1_ECMDTMCFG114 = 0x0;
    ECMDTMCFG1_ECMDTMCFG113 = 0x0;
    ECMDTMCFG1_ECMDTMCFG112 = 0x0;
    ECMDTMCFG1_ECMDTMCFG111 = 0x0;
    ECMDTMCFG1_ECMDTMCFG110 = 0x0;
    ECMDTMCFG1_ECMDTMCFG109 = 0x0;
    ECMDTMCFG1_ECMDTMCFG108 = 0x0;
    ECMDTMCFG1_ECMDTMCFG107 = 0x0;
    ECMDTMCFG1_ECMDTMCFG106 = 0x0;
    ECMDTMCFG1_ECMDTMCFG105 = 0x0;
    ECMDTMCFG1_ECMDTMCFG104 = 0x0;
    ECMDTMCFG1_ECMDTMCFG103 = 0x0;
    ECMDTMCFG1_ECMDTMCFG102 = 0x0;
    ECMDTMCFG1_ECMDTMCFG101 = 0x0;
    ECMDTMCFG1_ECMDTMCFG100 = 0x0;
    ECMDTMCFG2_ECMDTMCFG228 = 0x0;
    ECMDTMCFG2_ECMDTMCFG227 = 0x0;
    ECMDTMCFG2_ECMDTMCFG226 = 0x0;
    ECMDTMCFG2_ECMDTMCFG225 = 0x0;
    ECMDTMCFG2_ECMDTMCFG224 = 0x0;
    ECMDTMCFG2_ECMDTMCFG223 = 0x0;
    ECMDTMCFG2_ECMDTMCFG222 = 0x0;
    ECMDTMCFG2_ECMDTMCFG221 = 0x0;
    ECMDTMCFG2_ECMDTMCFG220 = 0x0;
    ECMDTMCFG2_ECMDTMCFG219 = 0x0;
    ECMDTMCFG2_ECMDTMCFG218 = 0x0;
    ECMDTMCFG2_ECMDTMCFG217 = 0x0;
    ECMDTMCFG2_ECMDTMCFG216 = 0x0;
    ECMDTMCFG2_ECMDTMCFG215 = 0x0;
    ECMDTMCFG2_ECMDTMCFG214 = 0x0;
    ECMDTMCFG2_ECMDTMCFG213 = 0x0;
    ECMDTMCFG2_ECMDTMCFG212 = 0x0;
    ECMDTMCFG2_ECMDTMCFG211 = 0x0;
    ECMDTMCFG2_ECMDTMCFG210 = 0x0;
    ECMDTMCFG2_ECMDTMCFG209 = 0x0;
    ECMDTMCFG2_ECMDTMCFG208 = 0x0;
    ECMDTMCFG2_ECMDTMCFG207 = 0x0;
    ECMDTMCFG2_ECMDTMCFG206 = 0x0;
    ECMDTMCFG2_ECMDTMCFG205 = 0x0;
    ECMDTMCFG2_ECMDTMCFG204 = 0x0;
    ECMDTMCFG2_ECMDTMCFG203 = 0x0;
    ECMDTMCFG2_ECMDTMCFG202 = 0x0;
    ECMDTMCFG2_ECMDTMCFG201 = 0x0;
    ECMDTMCFG2_ECMDTMCFG200 = 0x0;
    ECMDTMCFG3_ECMDTMCFG331 = 0x0;
    ECMDTMCFG3_ECMDTMCFG330 = 0x0;
    ECMDTMCFG3_ECMDTMCFG329 = 0x0;
    ECMDTMCFG3_ECMDTMCFG328 = 0x0;
    ECMDTMCFG3_ECMDTMCFG327 = 0x0;
    ECMDTMCFG3_ECMDTMCFG326 = 0x0;
    ECMDTMCFG3_ECMDTMCFG325 = 0x0;
    ECMDTMCFG3_ECMDTMCFG324 = 0x0;
    ECMDTMCFG3_ECMDTMCFG323 = 0x0;
    ECMDTMCFG3_ECMDTMCFG322 = 0x0;
    ECMDTMCFG3_ECMDTMCFG321 = 0x0;
    ECMDTMCFG3_ECMDTMCFG320 = 0x0;
    ECMDTMCFG3_ECMDTMCFG319 = 0x0;
    ECMDTMCFG3_ECMDTMCFG318 = 0x0;
    ECMDTMCFG3_ECMDTMCFG317 = 0x0;
    ECMDTMCFG3_ECMDTMCFG316 = 0x0;
    ECMDTMCFG3_ECMDTMCFG315 = 0x0;
    ECMDTMCFG3_ECMDTMCFG314 = 0x0;
    ECMDTMCFG3_ECMDTMCFG313 = 0x0;
    ECMDTMCFG3_ECMDTMCFG312 = 0x0;
    ECMDTMCFG3_ECMDTMCFG311 = 0x0;
    ECMDTMCFG3_ECMDTMCFG310 = 0x0;
    ECMDTMCFG3_ECMDTMCFG309 = 0x0;
    ECMDTMCFG3_ECMDTMCFG308 = 0x0;
    ECMDTMCFG3_ECMDTMCFG307 = 0x0;
    ECMDTMCFG3_ECMDTMCFG306 = 0x0;
    ECMDTMCFG3_ECMDTMCFG305 = 0x0;
    ECMDTMCFG3_ECMDTMCFG304 = 0x0;
    ECMDTMCFG3_ECMDTMCFG303 = 0x0;
    ECMDTMCFG3_ECMDTMCFG302 = 0x0;
    ECMDTMCFG3_ECMDTMCFG301 = 0x0;
    ECMDTMCFG3_ECMDTMCFG300 = 0x0;
    ECMDTMCFG4_ECMDTMCFG431 = 0x0;
    ECMDTMCFG4_ECMDTMCFG430 = 0x0;
    ECMDTMCFG4_ECMDTMCFG429 = 0x0;
    ECMDTMCFG4_ECMDTMCFG428 = 0x0;
    ECMDTMCFG4_ECMDTMCFG427 = 0x0;
    ECMDTMCFG4_ECMDTMCFG426 = 0x0;
    ECMDTMCFG4_ECMDTMCFG425 = 0x0;
    ECMDTMCFG4_ECMDTMCFG424 = 0x0;
    ECMDTMCFG4_ECMDTMCFG423 = 0x0;
    ECMDTMCFG4_ECMDTMCFG422 = 0x0;
    ECMDTMCFG4_ECMDTMCFG421 = 0x0;
    ECMDTMCFG4_ECMDTMCFG420 = 0x0;
    ECMDTMCFG4_ECMDTMCFG419 = 0x0;
    ECMDTMCFG4_ECMDTMCFG418 = 0x0;
    ECMDTMCFG4_ECMDTMCFG417 = 0x0;
    ECMDTMCFG4_ECMDTMCFG416 = 0x0;
    ECMDTMCFG4_ECMDTMCFG415 = 0x0;
    ECMDTMCFG4_ECMDTMCFG414 = 0x0;
    ECMDTMCFG4_ECMDTMCFG413 = 0x0;
    ECMDTMCFG4_ECMDTMCFG412 = 0x0;
    ECMDTMCFG4_ECMDTMCFG411 = 0x0;
    ECMDTMCFG4_ECMDTMCFG410 = 0x0;
    ECMDTMCFG4_ECMDTMCFG409 = 0x0;
    ECMDTMCFG4_ECMDTMCFG408 = 0x0;
    ECMDTMCFG4_ECMDTMCFG407 = 0x0;
    ECMDTMCFG4_ECMDTMCFG406 = 0x0;
    ECMDTMCFG4_ECMDTMCFG405 = 0x0;
    ECMDTMCFG4_ECMDTMCFG404 = 0x0;
    ECMDTMCFG4_ECMDTMCFG403 = 0x0;
    ECMDTMCFG4_ECMDTMCFG402 = 0x0;
    ECMDTMCFG4_ECMDTMCFG401 = 0x0;
    ECMDTMCFG4_ECMDTMCFG400 = 0x0;
    ECMDTMCFG5_ECMDTMCFG528 = 0x0;
    ECMDTMCFG5_ECMDTMCFG527 = 0x0;
    ECMDTMCFG5_ECMDTMCFG526 = 0x0;
    ECMDTMCFG5_ECMDTMCFG525 = 0x0;
    ECMDTMCFG5_ECMDTMCFG524 = 0x0;
    ECMDTMCFG5_ECMDTMCFG523 = 0x0;
    ECMDTMCFG5_ECMDTMCFG522 = 0x0;
    ECMDTMCFG5_ECMDTMCFG521 = 0x0;
    ECMDTMCFG5_ECMDTMCFG520 = 0x0;
    ECMDTMCFG5_ECMDTMCFG519 = 0x0;
    ECMDTMCFG5_ECMDTMCFG518 = 0x0;
    ECMDTMCFG5_ECMDTMCFG517 = 0x0;
    ECMDTMCFG5_ECMDTMCFG516 = 0x0;
    ECMDTMCFG5_ECMDTMCFG515 = 0x0;
    ECMDTMCFG5_ECMDTMCFG514 = 0x0;
    ECMDTMCFG5_ECMDTMCFG513 = 0x0;
    ECMDTMCFG5_ECMDTMCFG512 = 0x0;
    ECMDTMCFG5_ECMDTMCFG511 = 0x0;
    ECMDTMCFG5_ECMDTMCFG510 = 0x0;
    ECMDTMCFG5_ECMDTMCFG509 = 0x0;
    ECMDTMCFG5_ECMDTMCFG508 = 0x0;
    ECMDTMCFG5_ECMDTMCFG507 = 0x0;
    ECMDTMCFG5_ECMDTMCFG506 = 0x0;
    ECMDTMCFG5_ECMDTMCFG505 = 0x0;
    ECMDTMCFG5_ECMDTMCFG504 = 0x0;
    ECMDTMCFG5_ECMDTMCFG503 = 0x0;
    ECMDTMCFG5_ECMDTMCFG502 = 0x0;
    ECMDTMCFG5_ECMDTMCFG501 = 0x0;
    ECMDTMCFG5_ECMDTMCFG500 = 0x0;
    ECMEOUTCLRT_ECMEOUTCLRT = 0x0;
}

/// Update bit value to local value
/// @return None
void Cecm_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        ECMmESET_ECMmEST                = (*ECMmESET   )["ECMmEST"    ];
        return;
    }
    if (addr == 0x0004) {
        ECMmECLR_ECMmECT                = (*ECMmECLR   )["ECMmECT"    ];
        return;
    }
    if (addr == 0x0008) {
        ECMmESSTR0_ECMmSSE031           = (*ECMmESSTR0 )["ECMmSSE031" ];
        ECMmESSTR0_ECMmSSE030           = (*ECMmESSTR0 )["ECMmSSE030" ];
        ECMmESSTR0_ECMmSSE029           = (*ECMmESSTR0 )["ECMmSSE029" ];
        ECMmESSTR0_ECMmSSE028           = (*ECMmESSTR0 )["ECMmSSE028" ];
        ECMmESSTR0_ECMmSSE027           = (*ECMmESSTR0 )["ECMmSSE027" ];
        ECMmESSTR0_ECMmSSE026           = (*ECMmESSTR0 )["ECMmSSE026" ];
        ECMmESSTR0_ECMmSSE025           = (*ECMmESSTR0 )["ECMmSSE025" ];
        ECMmESSTR0_ECMmSSE024           = (*ECMmESSTR0 )["ECMmSSE024" ];
        ECMmESSTR0_ECMmSSE023           = (*ECMmESSTR0 )["ECMmSSE023" ];
        ECMmESSTR0_ECMmSSE022           = (*ECMmESSTR0 )["ECMmSSE022" ];
        ECMmESSTR0_ECMmSSE021           = (*ECMmESSTR0 )["ECMmSSE021" ];
        ECMmESSTR0_ECMmSSE020           = (*ECMmESSTR0 )["ECMmSSE020" ];
        ECMmESSTR0_ECMmSSE019           = (*ECMmESSTR0 )["ECMmSSE019" ];
        ECMmESSTR0_ECMmSSE018           = (*ECMmESSTR0 )["ECMmSSE018" ];
        ECMmESSTR0_ECMmSSE017           = (*ECMmESSTR0 )["ECMmSSE017" ];
        ECMmESSTR0_ECMmSSE016           = (*ECMmESSTR0 )["ECMmSSE016" ];
        ECMmESSTR0_ECMmSSE015           = (*ECMmESSTR0 )["ECMmSSE015" ];
        ECMmESSTR0_ECMmSSE014           = (*ECMmESSTR0 )["ECMmSSE014" ];
        ECMmESSTR0_ECMmSSE013           = (*ECMmESSTR0 )["ECMmSSE013" ];
        ECMmESSTR0_ECMmSSE012           = (*ECMmESSTR0 )["ECMmSSE012" ];
        ECMmESSTR0_ECMmSSE011           = (*ECMmESSTR0 )["ECMmSSE011" ];
        ECMmESSTR0_ECMmSSE010           = (*ECMmESSTR0 )["ECMmSSE010" ];
        ECMmESSTR0_ECMmSSE009           = (*ECMmESSTR0 )["ECMmSSE009" ];
        ECMmESSTR0_ECMmSSE008           = (*ECMmESSTR0 )["ECMmSSE008" ];
        ECMmESSTR0_ECMmSSE007           = (*ECMmESSTR0 )["ECMmSSE007" ];
        ECMmESSTR0_ECMmSSE006           = (*ECMmESSTR0 )["ECMmSSE006" ];
        ECMmESSTR0_ECMmSSE005           = (*ECMmESSTR0 )["ECMmSSE005" ];
        ECMmESSTR0_ECMmSSE004           = (*ECMmESSTR0 )["ECMmSSE004" ];
        ECMmESSTR0_ECMmSSE003           = (*ECMmESSTR0 )["ECMmSSE003" ];
        ECMmESSTR0_ECMmSSE002           = (*ECMmESSTR0 )["ECMmSSE002" ];
        ECMmESSTR0_ECMmSSE001           = (*ECMmESSTR0 )["ECMmSSE001" ];
        ECMmESSTR0_ECMmSSE000           = (*ECMmESSTR0 )["ECMmSSE000" ];
        return;
    }
    if (addr == 0x000C) {
        ECMmESSTR1_ECMmSSE131           = (*ECMmESSTR1 )["ECMmSSE131" ];
        ECMmESSTR1_ECMmSSE130           = (*ECMmESSTR1 )["ECMmSSE130" ];
        ECMmESSTR1_ECMmSSE129           = (*ECMmESSTR1 )["ECMmSSE129" ];
        ECMmESSTR1_ECMmSSE128           = (*ECMmESSTR1 )["ECMmSSE128" ];
        ECMmESSTR1_ECMmSSE127           = (*ECMmESSTR1 )["ECMmSSE127" ];
        ECMmESSTR1_ECMmSSE126           = (*ECMmESSTR1 )["ECMmSSE126" ];
        ECMmESSTR1_ECMmSSE125           = (*ECMmESSTR1 )["ECMmSSE125" ];
        ECMmESSTR1_ECMmSSE124           = (*ECMmESSTR1 )["ECMmSSE124" ];
        ECMmESSTR1_ECMmSSE123           = (*ECMmESSTR1 )["ECMmSSE123" ];
        ECMmESSTR1_ECMmSSE122           = (*ECMmESSTR1 )["ECMmSSE122" ];
        ECMmESSTR1_ECMmSSE121           = (*ECMmESSTR1 )["ECMmSSE121" ];
        ECMmESSTR1_ECMmSSE120           = (*ECMmESSTR1 )["ECMmSSE120" ];
        ECMmESSTR1_ECMmSSE119           = (*ECMmESSTR1 )["ECMmSSE119" ];
        ECMmESSTR1_ECMmSSE118           = (*ECMmESSTR1 )["ECMmSSE118" ];
        ECMmESSTR1_ECMmSSE117           = (*ECMmESSTR1 )["ECMmSSE117" ];
        ECMmESSTR1_ECMmSSE116           = (*ECMmESSTR1 )["ECMmSSE116" ];
        ECMmESSTR1_ECMmSSE115           = (*ECMmESSTR1 )["ECMmSSE115" ];
        ECMmESSTR1_ECMmSSE114           = (*ECMmESSTR1 )["ECMmSSE114" ];
        ECMmESSTR1_ECMmSSE113           = (*ECMmESSTR1 )["ECMmSSE113" ];
        ECMmESSTR1_ECMmSSE112           = (*ECMmESSTR1 )["ECMmSSE112" ];
        ECMmESSTR1_ECMmSSE111           = (*ECMmESSTR1 )["ECMmSSE111" ];
        ECMmESSTR1_ECMmSSE110           = (*ECMmESSTR1 )["ECMmSSE110" ];
        ECMmESSTR1_ECMmSSE109           = (*ECMmESSTR1 )["ECMmSSE109" ];
        ECMmESSTR1_ECMmSSE108           = (*ECMmESSTR1 )["ECMmSSE108" ];
        ECMmESSTR1_ECMmSSE107           = (*ECMmESSTR1 )["ECMmSSE107" ];
        ECMmESSTR1_ECMmSSE106           = (*ECMmESSTR1 )["ECMmSSE106" ];
        ECMmESSTR1_ECMmSSE105           = (*ECMmESSTR1 )["ECMmSSE105" ];
        ECMmESSTR1_ECMmSSE104           = (*ECMmESSTR1 )["ECMmSSE104" ];
        ECMmESSTR1_ECMmSSE103           = (*ECMmESSTR1 )["ECMmSSE103" ];
        ECMmESSTR1_ECMmSSE102           = (*ECMmESSTR1 )["ECMmSSE102" ];
        ECMmESSTR1_ECMmSSE101           = (*ECMmESSTR1 )["ECMmSSE101" ];
        ECMmESSTR1_ECMmSSE100           = (*ECMmESSTR1 )["ECMmSSE100" ];
        return;
    }
    if (addr == 0x0010) {
        ECMmESSTR2_ECMmSSE231           = (*ECMmESSTR2 )["ECMmSSE231" ];
        ECMmESSTR2_ECMmSSE230           = (*ECMmESSTR2 )["ECMmSSE230" ];
        ECMmESSTR2_ECMmSSE229           = (*ECMmESSTR2 )["ECMmSSE229" ];
        ECMmESSTR2_ECMmSSE228           = (*ECMmESSTR2 )["ECMmSSE228" ];
        ECMmESSTR2_ECMmSSE227           = (*ECMmESSTR2 )["ECMmSSE227" ];
        ECMmESSTR2_ECMmSSE226           = (*ECMmESSTR2 )["ECMmSSE226" ];
        ECMmESSTR2_ECMmSSE225           = (*ECMmESSTR2 )["ECMmSSE225" ];
        ECMmESSTR2_ECMmSSE224           = (*ECMmESSTR2 )["ECMmSSE224" ];
        ECMmESSTR2_ECMmSSE223           = (*ECMmESSTR2 )["ECMmSSE223" ];
        ECMmESSTR2_ECMmSSE222           = (*ECMmESSTR2 )["ECMmSSE222" ];
        ECMmESSTR2_ECMmSSE221           = (*ECMmESSTR2 )["ECMmSSE221" ];
        ECMmESSTR2_ECMmSSE220           = (*ECMmESSTR2 )["ECMmSSE220" ];
        ECMmESSTR2_ECMmSSE219           = (*ECMmESSTR2 )["ECMmSSE219" ];
        ECMmESSTR2_ECMmSSE218           = (*ECMmESSTR2 )["ECMmSSE218" ];
        ECMmESSTR2_ECMmSSE217           = (*ECMmESSTR2 )["ECMmSSE217" ];
        ECMmESSTR2_ECMmSSE216           = (*ECMmESSTR2 )["ECMmSSE216" ];
        ECMmESSTR2_ECMmSSE215           = (*ECMmESSTR2 )["ECMmSSE215" ];
        ECMmESSTR2_ECMmSSE214           = (*ECMmESSTR2 )["ECMmSSE214" ];
        ECMmESSTR2_ECMmSSE213           = (*ECMmESSTR2 )["ECMmSSE213" ];
        ECMmESSTR2_ECMmSSE212           = (*ECMmESSTR2 )["ECMmSSE212" ];
        ECMmESSTR2_ECMmSSE211           = (*ECMmESSTR2 )["ECMmSSE211" ];
        ECMmESSTR2_ECMmSSE210           = (*ECMmESSTR2 )["ECMmSSE210" ];
        ECMmESSTR2_ECMmSSE209           = (*ECMmESSTR2 )["ECMmSSE209" ];
        ECMmESSTR2_ECMmSSE208           = (*ECMmESSTR2 )["ECMmSSE208" ];
        ECMmESSTR2_ECMmSSE207           = (*ECMmESSTR2 )["ECMmSSE207" ];
        ECMmESSTR2_ECMmSSE206           = (*ECMmESSTR2 )["ECMmSSE206" ];
        ECMmESSTR2_ECMmSSE205           = (*ECMmESSTR2 )["ECMmSSE205" ];
        ECMmESSTR2_ECMmSSE204           = (*ECMmESSTR2 )["ECMmSSE204" ];
        ECMmESSTR2_ECMmSSE203           = (*ECMmESSTR2 )["ECMmSSE203" ];
        ECMmESSTR2_ECMmSSE202           = (*ECMmESSTR2 )["ECMmSSE202" ];
        ECMmESSTR2_ECMmSSE201           = (*ECMmESSTR2 )["ECMmSSE201" ];
        ECMmESSTR2_ECMmSSE200           = (*ECMmESSTR2 )["ECMmSSE200" ];
        return;
    }
    if (addr == 0x0014) {
        ECMmPCMD0_ECMm0REG              = (*ECMmPCMD0  )["ECMm0REG"   ];
        return;
    }
    if (addr == 0x0100) {
        ECMEPCFG_ECMSL0                 = (*ECMEPCFG   )["ECMSL0"     ];
        return;
    }
    if (addr == 0x0104) {
        ECMMICFG0_ECMMIE031             = (*ECMMICFG0  )["ECMMIE031"  ];
        ECMMICFG0_ECMMIE030             = (*ECMMICFG0  )["ECMMIE030"  ];
        ECMMICFG0_ECMMIE029             = (*ECMMICFG0  )["ECMMIE029"  ];
        ECMMICFG0_ECMMIE028             = (*ECMMICFG0  )["ECMMIE028"  ];
        ECMMICFG0_ECMMIE027             = (*ECMMICFG0  )["ECMMIE027"  ];
        ECMMICFG0_ECMMIE026             = (*ECMMICFG0  )["ECMMIE026"  ];
        ECMMICFG0_ECMMIE025             = (*ECMMICFG0  )["ECMMIE025"  ];
        ECMMICFG0_ECMMIE024             = (*ECMMICFG0  )["ECMMIE024"  ];
        ECMMICFG0_ECMMIE023             = (*ECMMICFG0  )["ECMMIE023"  ];
        ECMMICFG0_ECMMIE022             = (*ECMMICFG0  )["ECMMIE022"  ];
        ECMMICFG0_ECMMIE021             = (*ECMMICFG0  )["ECMMIE021"  ];
        ECMMICFG0_ECMMIE020             = (*ECMMICFG0  )["ECMMIE020"  ];
        ECMMICFG0_ECMMIE019             = (*ECMMICFG0  )["ECMMIE019"  ];
        ECMMICFG0_ECMMIE018             = (*ECMMICFG0  )["ECMMIE018"  ];
        ECMMICFG0_ECMMIE017             = (*ECMMICFG0  )["ECMMIE017"  ];
        ECMMICFG0_ECMMIE016             = (*ECMMICFG0  )["ECMMIE016"  ];
        ECMMICFG0_ECMMIE015             = (*ECMMICFG0  )["ECMMIE015"  ];
        ECMMICFG0_ECMMIE014             = (*ECMMICFG0  )["ECMMIE014"  ];
        ECMMICFG0_ECMMIE013             = (*ECMMICFG0  )["ECMMIE013"  ];
        ECMMICFG0_ECMMIE012             = (*ECMMICFG0  )["ECMMIE012"  ];
        ECMMICFG0_ECMMIE011             = (*ECMMICFG0  )["ECMMIE011"  ];
        ECMMICFG0_ECMMIE010             = (*ECMMICFG0  )["ECMMIE010"  ];
        ECMMICFG0_ECMMIE009             = (*ECMMICFG0  )["ECMMIE009"  ];
        ECMMICFG0_ECMMIE008             = (*ECMMICFG0  )["ECMMIE008"  ];
        ECMMICFG0_ECMMIE007             = (*ECMMICFG0  )["ECMMIE007"  ];
        ECMMICFG0_ECMMIE006             = (*ECMMICFG0  )["ECMMIE006"  ];
        ECMMICFG0_ECMMIE005             = (*ECMMICFG0  )["ECMMIE005"  ];
        ECMMICFG0_ECMMIE004             = (*ECMMICFG0  )["ECMMIE004"  ];
        ECMMICFG0_ECMMIE003             = (*ECMMICFG0  )["ECMMIE003"  ];
        ECMMICFG0_ECMMIE002             = (*ECMMICFG0  )["ECMMIE002"  ];
        ECMMICFG0_ECMMIE001             = (*ECMMICFG0  )["ECMMIE001"  ];
        ECMMICFG0_ECMMIE000             = (*ECMMICFG0  )["ECMMIE000"  ];
        return;
    }
    if (addr == 0x0108) {
        ECMMICFG1_ECMMIE131             = (*ECMMICFG1  )["ECMMIE131"  ];
        ECMMICFG1_ECMMIE130             = (*ECMMICFG1  )["ECMMIE130"  ];
        ECMMICFG1_ECMMIE129             = (*ECMMICFG1  )["ECMMIE129"  ];
        ECMMICFG1_ECMMIE128             = (*ECMMICFG1  )["ECMMIE128"  ];
        ECMMICFG1_ECMMIE127             = (*ECMMICFG1  )["ECMMIE127"  ];
        ECMMICFG1_ECMMIE126             = (*ECMMICFG1  )["ECMMIE126"  ];
        ECMMICFG1_ECMMIE125             = (*ECMMICFG1  )["ECMMIE125"  ];
        ECMMICFG1_ECMMIE124             = (*ECMMICFG1  )["ECMMIE124"  ];
        ECMMICFG1_ECMMIE123             = (*ECMMICFG1  )["ECMMIE123"  ];
        ECMMICFG1_ECMMIE122             = (*ECMMICFG1  )["ECMMIE122"  ];
        ECMMICFG1_ECMMIE121             = (*ECMMICFG1  )["ECMMIE121"  ];
        ECMMICFG1_ECMMIE120             = (*ECMMICFG1  )["ECMMIE120"  ];
        ECMMICFG1_ECMMIE119             = (*ECMMICFG1  )["ECMMIE119"  ];
        ECMMICFG1_ECMMIE118             = (*ECMMICFG1  )["ECMMIE118"  ];
        ECMMICFG1_ECMMIE117             = (*ECMMICFG1  )["ECMMIE117"  ];
        ECMMICFG1_ECMMIE116             = (*ECMMICFG1  )["ECMMIE116"  ];
        ECMMICFG1_ECMMIE115             = (*ECMMICFG1  )["ECMMIE115"  ];
        ECMMICFG1_ECMMIE114             = (*ECMMICFG1  )["ECMMIE114"  ];
        ECMMICFG1_ECMMIE113             = (*ECMMICFG1  )["ECMMIE113"  ];
        ECMMICFG1_ECMMIE112             = (*ECMMICFG1  )["ECMMIE112"  ];
        ECMMICFG1_ECMMIE111             = (*ECMMICFG1  )["ECMMIE111"  ];
        ECMMICFG1_ECMMIE110             = (*ECMMICFG1  )["ECMMIE110"  ];
        ECMMICFG1_ECMMIE109             = (*ECMMICFG1  )["ECMMIE109"  ];
        ECMMICFG1_ECMMIE108             = (*ECMMICFG1  )["ECMMIE108"  ];
        ECMMICFG1_ECMMIE107             = (*ECMMICFG1  )["ECMMIE107"  ];
        ECMMICFG1_ECMMIE106             = (*ECMMICFG1  )["ECMMIE106"  ];
        ECMMICFG1_ECMMIE105             = (*ECMMICFG1  )["ECMMIE105"  ];
        ECMMICFG1_ECMMIE104             = (*ECMMICFG1  )["ECMMIE104"  ];
        ECMMICFG1_ECMMIE103             = (*ECMMICFG1  )["ECMMIE103"  ];
        ECMMICFG1_ECMMIE102             = (*ECMMICFG1  )["ECMMIE102"  ];
        ECMMICFG1_ECMMIE101             = (*ECMMICFG1  )["ECMMIE101"  ];
        ECMMICFG1_ECMMIE100             = (*ECMMICFG1  )["ECMMIE100"  ];
        return;
    }
    if (addr == 0x010C) {
        ECMMICFG2_ECMMIE228             = (*ECMMICFG2  )["ECMMIE228"  ];
        ECMMICFG2_ECMMIE227             = (*ECMMICFG2  )["ECMMIE227"  ];
        ECMMICFG2_ECMMIE226             = (*ECMMICFG2  )["ECMMIE226"  ];
        ECMMICFG2_ECMMIE225             = (*ECMMICFG2  )["ECMMIE225"  ];
        ECMMICFG2_ECMMIE224             = (*ECMMICFG2  )["ECMMIE224"  ];
        ECMMICFG2_ECMMIE223             = (*ECMMICFG2  )["ECMMIE223"  ];
        ECMMICFG2_ECMMIE222             = (*ECMMICFG2  )["ECMMIE222"  ];
        ECMMICFG2_ECMMIE221             = (*ECMMICFG2  )["ECMMIE221"  ];
        ECMMICFG2_ECMMIE220             = (*ECMMICFG2  )["ECMMIE220"  ];
        ECMMICFG2_ECMMIE219             = (*ECMMICFG2  )["ECMMIE219"  ];
        ECMMICFG2_ECMMIE218             = (*ECMMICFG2  )["ECMMIE218"  ];
        ECMMICFG2_ECMMIE217             = (*ECMMICFG2  )["ECMMIE217"  ];
        ECMMICFG2_ECMMIE216             = (*ECMMICFG2  )["ECMMIE216"  ];
        ECMMICFG2_ECMMIE215             = (*ECMMICFG2  )["ECMMIE215"  ];
        ECMMICFG2_ECMMIE214             = (*ECMMICFG2  )["ECMMIE214"  ];
        ECMMICFG2_ECMMIE213             = (*ECMMICFG2  )["ECMMIE213"  ];
        ECMMICFG2_ECMMIE212             = (*ECMMICFG2  )["ECMMIE212"  ];
        ECMMICFG2_ECMMIE211             = (*ECMMICFG2  )["ECMMIE211"  ];
        ECMMICFG2_ECMMIE210             = (*ECMMICFG2  )["ECMMIE210"  ];
        ECMMICFG2_ECMMIE209             = (*ECMMICFG2  )["ECMMIE209"  ];
        ECMMICFG2_ECMMIE208             = (*ECMMICFG2  )["ECMMIE208"  ];
        ECMMICFG2_ECMMIE207             = (*ECMMICFG2  )["ECMMIE207"  ];
        ECMMICFG2_ECMMIE206             = (*ECMMICFG2  )["ECMMIE206"  ];
        ECMMICFG2_ECMMIE205             = (*ECMMICFG2  )["ECMMIE205"  ];
        ECMMICFG2_ECMMIE204             = (*ECMMICFG2  )["ECMMIE204"  ];
        ECMMICFG2_ECMMIE203             = (*ECMMICFG2  )["ECMMIE203"  ];
        ECMMICFG2_ECMMIE202             = (*ECMMICFG2  )["ECMMIE202"  ];
        ECMMICFG2_ECMMIE201             = (*ECMMICFG2  )["ECMMIE201"  ];
        ECMMICFG2_ECMMIE200             = (*ECMMICFG2  )["ECMMIE200"  ];
        return;
    }
    if (addr == 0x0110) {
        ECMNMICFG0_ECMNMIE031           = (*ECMNMICFG0 )["ECMNMIE031" ];
        ECMNMICFG0_ECMNMIE030           = (*ECMNMICFG0 )["ECMNMIE030" ];
        ECMNMICFG0_ECMNMIE029           = (*ECMNMICFG0 )["ECMNMIE029" ];
        ECMNMICFG0_ECMNMIE028           = (*ECMNMICFG0 )["ECMNMIE028" ];
        ECMNMICFG0_ECMNMIE027           = (*ECMNMICFG0 )["ECMNMIE027" ];
        ECMNMICFG0_ECMNMIE026           = (*ECMNMICFG0 )["ECMNMIE026" ];
        ECMNMICFG0_ECMNMIE025           = (*ECMNMICFG0 )["ECMNMIE025" ];
        ECMNMICFG0_ECMNMIE024           = (*ECMNMICFG0 )["ECMNMIE024" ];
        ECMNMICFG0_ECMNMIE023           = (*ECMNMICFG0 )["ECMNMIE023" ];
        ECMNMICFG0_ECMNMIE022           = (*ECMNMICFG0 )["ECMNMIE022" ];
        ECMNMICFG0_ECMNMIE021           = (*ECMNMICFG0 )["ECMNMIE021" ];
        ECMNMICFG0_ECMNMIE020           = (*ECMNMICFG0 )["ECMNMIE020" ];
        ECMNMICFG0_ECMNMIE019           = (*ECMNMICFG0 )["ECMNMIE019" ];
        ECMNMICFG0_ECMNMIE018           = (*ECMNMICFG0 )["ECMNMIE018" ];
        ECMNMICFG0_ECMNMIE017           = (*ECMNMICFG0 )["ECMNMIE017" ];
        ECMNMICFG0_ECMNMIE016           = (*ECMNMICFG0 )["ECMNMIE016" ];
        ECMNMICFG0_ECMNMIE015           = (*ECMNMICFG0 )["ECMNMIE015" ];
        ECMNMICFG0_ECMNMIE014           = (*ECMNMICFG0 )["ECMNMIE014" ];
        ECMNMICFG0_ECMNMIE013           = (*ECMNMICFG0 )["ECMNMIE013" ];
        ECMNMICFG0_ECMNMIE012           = (*ECMNMICFG0 )["ECMNMIE012" ];
        ECMNMICFG0_ECMNMIE011           = (*ECMNMICFG0 )["ECMNMIE011" ];
        ECMNMICFG0_ECMNMIE010           = (*ECMNMICFG0 )["ECMNMIE010" ];
        ECMNMICFG0_ECMNMIE009           = (*ECMNMICFG0 )["ECMNMIE009" ];
        ECMNMICFG0_ECMNMIE008           = (*ECMNMICFG0 )["ECMNMIE008" ];
        ECMNMICFG0_ECMNMIE007           = (*ECMNMICFG0 )["ECMNMIE007" ];
        ECMNMICFG0_ECMNMIE006           = (*ECMNMICFG0 )["ECMNMIE006" ];
        ECMNMICFG0_ECMNMIE005           = (*ECMNMICFG0 )["ECMNMIE005" ];
        ECMNMICFG0_ECMNMIE004           = (*ECMNMICFG0 )["ECMNMIE004" ];
        ECMNMICFG0_ECMNMIE003           = (*ECMNMICFG0 )["ECMNMIE003" ];
        ECMNMICFG0_ECMNMIE002           = (*ECMNMICFG0 )["ECMNMIE002" ];
        ECMNMICFG0_ECMNMIE001           = (*ECMNMICFG0 )["ECMNMIE001" ];
        ECMNMICFG0_ECMNMIE000           = (*ECMNMICFG0 )["ECMNMIE000" ];
        return;
    }
    if (addr == 0x0114) {
        ECMNMICFG1_ECMNMIE131           = (*ECMNMICFG1 )["ECMNMIE131" ];
        ECMNMICFG1_ECMNMIE130           = (*ECMNMICFG1 )["ECMNMIE130" ];
        ECMNMICFG1_ECMNMIE129           = (*ECMNMICFG1 )["ECMNMIE129" ];
        ECMNMICFG1_ECMNMIE128           = (*ECMNMICFG1 )["ECMNMIE128" ];
        ECMNMICFG1_ECMNMIE127           = (*ECMNMICFG1 )["ECMNMIE127" ];
        ECMNMICFG1_ECMNMIE126           = (*ECMNMICFG1 )["ECMNMIE126" ];
        ECMNMICFG1_ECMNMIE125           = (*ECMNMICFG1 )["ECMNMIE125" ];
        ECMNMICFG1_ECMNMIE124           = (*ECMNMICFG1 )["ECMNMIE124" ];
        ECMNMICFG1_ECMNMIE123           = (*ECMNMICFG1 )["ECMNMIE123" ];
        ECMNMICFG1_ECMNMIE122           = (*ECMNMICFG1 )["ECMNMIE122" ];
        ECMNMICFG1_ECMNMIE121           = (*ECMNMICFG1 )["ECMNMIE121" ];
        ECMNMICFG1_ECMNMIE120           = (*ECMNMICFG1 )["ECMNMIE120" ];
        ECMNMICFG1_ECMNMIE119           = (*ECMNMICFG1 )["ECMNMIE119" ];
        ECMNMICFG1_ECMNMIE118           = (*ECMNMICFG1 )["ECMNMIE118" ];
        ECMNMICFG1_ECMNMIE117           = (*ECMNMICFG1 )["ECMNMIE117" ];
        ECMNMICFG1_ECMNMIE116           = (*ECMNMICFG1 )["ECMNMIE116" ];
        ECMNMICFG1_ECMNMIE115           = (*ECMNMICFG1 )["ECMNMIE115" ];
        ECMNMICFG1_ECMNMIE114           = (*ECMNMICFG1 )["ECMNMIE114" ];
        ECMNMICFG1_ECMNMIE113           = (*ECMNMICFG1 )["ECMNMIE113" ];
        ECMNMICFG1_ECMNMIE112           = (*ECMNMICFG1 )["ECMNMIE112" ];
        ECMNMICFG1_ECMNMIE111           = (*ECMNMICFG1 )["ECMNMIE111" ];
        ECMNMICFG1_ECMNMIE110           = (*ECMNMICFG1 )["ECMNMIE110" ];
        ECMNMICFG1_ECMNMIE109           = (*ECMNMICFG1 )["ECMNMIE109" ];
        ECMNMICFG1_ECMNMIE108           = (*ECMNMICFG1 )["ECMNMIE108" ];
        ECMNMICFG1_ECMNMIE107           = (*ECMNMICFG1 )["ECMNMIE107" ];
        ECMNMICFG1_ECMNMIE106           = (*ECMNMICFG1 )["ECMNMIE106" ];
        ECMNMICFG1_ECMNMIE105           = (*ECMNMICFG1 )["ECMNMIE105" ];
        ECMNMICFG1_ECMNMIE104           = (*ECMNMICFG1 )["ECMNMIE104" ];
        ECMNMICFG1_ECMNMIE103           = (*ECMNMICFG1 )["ECMNMIE103" ];
        ECMNMICFG1_ECMNMIE102           = (*ECMNMICFG1 )["ECMNMIE102" ];
        ECMNMICFG1_ECMNMIE101           = (*ECMNMICFG1 )["ECMNMIE101" ];
        ECMNMICFG1_ECMNMIE100           = (*ECMNMICFG1 )["ECMNMIE100" ];
        return;
    }
    if (addr == 0x0118) {
        ECMNMICFG2_ECMNMIE228           = (*ECMNMICFG2 )["ECMNMIE228" ];
        ECMNMICFG2_ECMNMIE227           = (*ECMNMICFG2 )["ECMNMIE227" ];
        ECMNMICFG2_ECMNMIE226           = (*ECMNMICFG2 )["ECMNMIE226" ];
        ECMNMICFG2_ECMNMIE225           = (*ECMNMICFG2 )["ECMNMIE225" ];
        ECMNMICFG2_ECMNMIE224           = (*ECMNMICFG2 )["ECMNMIE224" ];
        ECMNMICFG2_ECMNMIE223           = (*ECMNMICFG2 )["ECMNMIE223" ];
        ECMNMICFG2_ECMNMIE222           = (*ECMNMICFG2 )["ECMNMIE222" ];
        ECMNMICFG2_ECMNMIE221           = (*ECMNMICFG2 )["ECMNMIE221" ];
        ECMNMICFG2_ECMNMIE220           = (*ECMNMICFG2 )["ECMNMIE220" ];
        ECMNMICFG2_ECMNMIE219           = (*ECMNMICFG2 )["ECMNMIE219" ];
        ECMNMICFG2_ECMNMIE218           = (*ECMNMICFG2 )["ECMNMIE218" ];
        ECMNMICFG2_ECMNMIE217           = (*ECMNMICFG2 )["ECMNMIE217" ];
        ECMNMICFG2_ECMNMIE216           = (*ECMNMICFG2 )["ECMNMIE216" ];
        ECMNMICFG2_ECMNMIE215           = (*ECMNMICFG2 )["ECMNMIE215" ];
        ECMNMICFG2_ECMNMIE214           = (*ECMNMICFG2 )["ECMNMIE214" ];
        ECMNMICFG2_ECMNMIE213           = (*ECMNMICFG2 )["ECMNMIE213" ];
        ECMNMICFG2_ECMNMIE212           = (*ECMNMICFG2 )["ECMNMIE212" ];
        ECMNMICFG2_ECMNMIE211           = (*ECMNMICFG2 )["ECMNMIE211" ];
        ECMNMICFG2_ECMNMIE210           = (*ECMNMICFG2 )["ECMNMIE210" ];
        ECMNMICFG2_ECMNMIE209           = (*ECMNMICFG2 )["ECMNMIE209" ];
        ECMNMICFG2_ECMNMIE208           = (*ECMNMICFG2 )["ECMNMIE208" ];
        ECMNMICFG2_ECMNMIE207           = (*ECMNMICFG2 )["ECMNMIE207" ];
        ECMNMICFG2_ECMNMIE206           = (*ECMNMICFG2 )["ECMNMIE206" ];
        ECMNMICFG2_ECMNMIE205           = (*ECMNMICFG2 )["ECMNMIE205" ];
        ECMNMICFG2_ECMNMIE204           = (*ECMNMICFG2 )["ECMNMIE204" ];
        ECMNMICFG2_ECMNMIE203           = (*ECMNMICFG2 )["ECMNMIE203" ];
        ECMNMICFG2_ECMNMIE202           = (*ECMNMICFG2 )["ECMNMIE202" ];
        ECMNMICFG2_ECMNMIE201           = (*ECMNMICFG2 )["ECMNMIE201" ];
        ECMNMICFG2_ECMNMIE200           = (*ECMNMICFG2 )["ECMNMIE200" ];
        return;
    }
    if (addr == 0x011C) {
        ECMIRCFG0_ECMIRE031             = (*ECMIRCFG0  )["ECMIRE031"  ];
        ECMIRCFG0_ECMIRE030             = (*ECMIRCFG0  )["ECMIRE030"  ];
        ECMIRCFG0_ECMIRE029             = (*ECMIRCFG0  )["ECMIRE029"  ];
        ECMIRCFG0_ECMIRE028             = (*ECMIRCFG0  )["ECMIRE028"  ];
        ECMIRCFG0_ECMIRE027             = (*ECMIRCFG0  )["ECMIRE027"  ];
        ECMIRCFG0_ECMIRE026             = (*ECMIRCFG0  )["ECMIRE026"  ];
        ECMIRCFG0_ECMIRE025             = (*ECMIRCFG0  )["ECMIRE025"  ];
        ECMIRCFG0_ECMIRE024             = (*ECMIRCFG0  )["ECMIRE024"  ];
        ECMIRCFG0_ECMIRE023             = (*ECMIRCFG0  )["ECMIRE023"  ];
        ECMIRCFG0_ECMIRE022             = (*ECMIRCFG0  )["ECMIRE022"  ];
        ECMIRCFG0_ECMIRE021             = (*ECMIRCFG0  )["ECMIRE021"  ];
        ECMIRCFG0_ECMIRE020             = (*ECMIRCFG0  )["ECMIRE020"  ];
        ECMIRCFG0_ECMIRE019             = (*ECMIRCFG0  )["ECMIRE019"  ];
        ECMIRCFG0_ECMIRE018             = (*ECMIRCFG0  )["ECMIRE018"  ];
        ECMIRCFG0_ECMIRE017             = (*ECMIRCFG0  )["ECMIRE017"  ];
        ECMIRCFG0_ECMIRE016             = (*ECMIRCFG0  )["ECMIRE016"  ];
        ECMIRCFG0_ECMIRE015             = (*ECMIRCFG0  )["ECMIRE015"  ];
        ECMIRCFG0_ECMIRE014             = (*ECMIRCFG0  )["ECMIRE014"  ];
        ECMIRCFG0_ECMIRE013             = (*ECMIRCFG0  )["ECMIRE013"  ];
        ECMIRCFG0_ECMIRE012             = (*ECMIRCFG0  )["ECMIRE012"  ];
        ECMIRCFG0_ECMIRE011             = (*ECMIRCFG0  )["ECMIRE011"  ];
        ECMIRCFG0_ECMIRE010             = (*ECMIRCFG0  )["ECMIRE010"  ];
        ECMIRCFG0_ECMIRE009             = (*ECMIRCFG0  )["ECMIRE009"  ];
        ECMIRCFG0_ECMIRE008             = (*ECMIRCFG0  )["ECMIRE008"  ];
        ECMIRCFG0_ECMIRE007             = (*ECMIRCFG0  )["ECMIRE007"  ];
        ECMIRCFG0_ECMIRE006             = (*ECMIRCFG0  )["ECMIRE006"  ];
        ECMIRCFG0_ECMIRE005             = (*ECMIRCFG0  )["ECMIRE005"  ];
        ECMIRCFG0_ECMIRE004             = (*ECMIRCFG0  )["ECMIRE004"  ];
        ECMIRCFG0_ECMIRE003             = (*ECMIRCFG0  )["ECMIRE003"  ];
        ECMIRCFG0_ECMIRE002             = (*ECMIRCFG0  )["ECMIRE002"  ];
        ECMIRCFG0_ECMIRE001             = (*ECMIRCFG0  )["ECMIRE001"  ];
        ECMIRCFG0_ECMIRE000             = (*ECMIRCFG0  )["ECMIRE000"  ];
        return;
    }
    if (addr == 0x0120) {
        ECMIRCFG1_ECMIRE131             = (*ECMIRCFG1  )["ECMIRE131"  ];
        ECMIRCFG1_ECMIRE130             = (*ECMIRCFG1  )["ECMIRE130"  ];
        ECMIRCFG1_ECMIRE129             = (*ECMIRCFG1  )["ECMIRE129"  ];
        ECMIRCFG1_ECMIRE128             = (*ECMIRCFG1  )["ECMIRE128"  ];
        ECMIRCFG1_ECMIRE127             = (*ECMIRCFG1  )["ECMIRE127"  ];
        ECMIRCFG1_ECMIRE126             = (*ECMIRCFG1  )["ECMIRE126"  ];
        ECMIRCFG1_ECMIRE125             = (*ECMIRCFG1  )["ECMIRE125"  ];
        ECMIRCFG1_ECMIRE124             = (*ECMIRCFG1  )["ECMIRE124"  ];
        ECMIRCFG1_ECMIRE123             = (*ECMIRCFG1  )["ECMIRE123"  ];
        ECMIRCFG1_ECMIRE122             = (*ECMIRCFG1  )["ECMIRE122"  ];
        ECMIRCFG1_ECMIRE121             = (*ECMIRCFG1  )["ECMIRE121"  ];
        ECMIRCFG1_ECMIRE120             = (*ECMIRCFG1  )["ECMIRE120"  ];
        ECMIRCFG1_ECMIRE119             = (*ECMIRCFG1  )["ECMIRE119"  ];
        ECMIRCFG1_ECMIRE118             = (*ECMIRCFG1  )["ECMIRE118"  ];
        ECMIRCFG1_ECMIRE117             = (*ECMIRCFG1  )["ECMIRE117"  ];
        ECMIRCFG1_ECMIRE116             = (*ECMIRCFG1  )["ECMIRE116"  ];
        ECMIRCFG1_ECMIRE115             = (*ECMIRCFG1  )["ECMIRE115"  ];
        ECMIRCFG1_ECMIRE114             = (*ECMIRCFG1  )["ECMIRE114"  ];
        ECMIRCFG1_ECMIRE113             = (*ECMIRCFG1  )["ECMIRE113"  ];
        ECMIRCFG1_ECMIRE112             = (*ECMIRCFG1  )["ECMIRE112"  ];
        ECMIRCFG1_ECMIRE111             = (*ECMIRCFG1  )["ECMIRE111"  ];
        ECMIRCFG1_ECMIRE110             = (*ECMIRCFG1  )["ECMIRE110"  ];
        ECMIRCFG1_ECMIRE109             = (*ECMIRCFG1  )["ECMIRE109"  ];
        ECMIRCFG1_ECMIRE108             = (*ECMIRCFG1  )["ECMIRE108"  ];
        ECMIRCFG1_ECMIRE107             = (*ECMIRCFG1  )["ECMIRE107"  ];
        ECMIRCFG1_ECMIRE106             = (*ECMIRCFG1  )["ECMIRE106"  ];
        ECMIRCFG1_ECMIRE105             = (*ECMIRCFG1  )["ECMIRE105"  ];
        ECMIRCFG1_ECMIRE104             = (*ECMIRCFG1  )["ECMIRE104"  ];
        ECMIRCFG1_ECMIRE103             = (*ECMIRCFG1  )["ECMIRE103"  ];
        ECMIRCFG1_ECMIRE102             = (*ECMIRCFG1  )["ECMIRE102"  ];
        ECMIRCFG1_ECMIRE101             = (*ECMIRCFG1  )["ECMIRE101"  ];
        ECMIRCFG1_ECMIRE100             = (*ECMIRCFG1  )["ECMIRE100"  ];
        return;
    }
    if (addr == 0x0124) {
        ECMIRCFG2_ECMIRE229             = (*ECMIRCFG2  )["ECMIRE229"  ];
        ECMIRCFG2_ECMIRE228             = (*ECMIRCFG2  )["ECMIRE228"  ];
        ECMIRCFG2_ECMIRE227             = (*ECMIRCFG2  )["ECMIRE227"  ];
        ECMIRCFG2_ECMIRE226             = (*ECMIRCFG2  )["ECMIRE226"  ];
        ECMIRCFG2_ECMIRE225             = (*ECMIRCFG2  )["ECMIRE225"  ];
        ECMIRCFG2_ECMIRE224             = (*ECMIRCFG2  )["ECMIRE224"  ];
        ECMIRCFG2_ECMIRE223             = (*ECMIRCFG2  )["ECMIRE223"  ];
        ECMIRCFG2_ECMIRE222             = (*ECMIRCFG2  )["ECMIRE222"  ];
        ECMIRCFG2_ECMIRE221             = (*ECMIRCFG2  )["ECMIRE221"  ];
        ECMIRCFG2_ECMIRE220             = (*ECMIRCFG2  )["ECMIRE220"  ];
        ECMIRCFG2_ECMIRE219             = (*ECMIRCFG2  )["ECMIRE219"  ];
        ECMIRCFG2_ECMIRE218             = (*ECMIRCFG2  )["ECMIRE218"  ];
        ECMIRCFG2_ECMIRE217             = (*ECMIRCFG2  )["ECMIRE217"  ];
        ECMIRCFG2_ECMIRE216             = (*ECMIRCFG2  )["ECMIRE216"  ];
        ECMIRCFG2_ECMIRE215             = (*ECMIRCFG2  )["ECMIRE215"  ];
        ECMIRCFG2_ECMIRE214             = (*ECMIRCFG2  )["ECMIRE214"  ];
        ECMIRCFG2_ECMIRE213             = (*ECMIRCFG2  )["ECMIRE213"  ];
        ECMIRCFG2_ECMIRE212             = (*ECMIRCFG2  )["ECMIRE212"  ];
        ECMIRCFG2_ECMIRE211             = (*ECMIRCFG2  )["ECMIRE211"  ];
        ECMIRCFG2_ECMIRE210             = (*ECMIRCFG2  )["ECMIRE210"  ];
        ECMIRCFG2_ECMIRE209             = (*ECMIRCFG2  )["ECMIRE209"  ];
        ECMIRCFG2_ECMIRE208             = (*ECMIRCFG2  )["ECMIRE208"  ];
        ECMIRCFG2_ECMIRE207             = (*ECMIRCFG2  )["ECMIRE207"  ];
        ECMIRCFG2_ECMIRE206             = (*ECMIRCFG2  )["ECMIRE206"  ];
        ECMIRCFG2_ECMIRE205             = (*ECMIRCFG2  )["ECMIRE205"  ];
        ECMIRCFG2_ECMIRE204             = (*ECMIRCFG2  )["ECMIRE204"  ];
        ECMIRCFG2_ECMIRE203             = (*ECMIRCFG2  )["ECMIRE203"  ];
        ECMIRCFG2_ECMIRE202             = (*ECMIRCFG2  )["ECMIRE202"  ];
        ECMIRCFG2_ECMIRE201             = (*ECMIRCFG2  )["ECMIRE201"  ];
        ECMIRCFG2_ECMIRE200             = (*ECMIRCFG2  )["ECMIRE200"  ];
        return;
    }
    if (addr == 0x0128) {
        ECMEMK0_ECMEMK031               = (*ECMEMK0    )["ECMEMK031"  ];
        ECMEMK0_ECMEMK030               = (*ECMEMK0    )["ECMEMK030"  ];
        ECMEMK0_ECMEMK029               = (*ECMEMK0    )["ECMEMK029"  ];
        ECMEMK0_ECMEMK028               = (*ECMEMK0    )["ECMEMK028"  ];
        ECMEMK0_ECMEMK027               = (*ECMEMK0    )["ECMEMK027"  ];
        ECMEMK0_ECMEMK026               = (*ECMEMK0    )["ECMEMK026"  ];
        ECMEMK0_ECMEMK025               = (*ECMEMK0    )["ECMEMK025"  ];
        ECMEMK0_ECMEMK024               = (*ECMEMK0    )["ECMEMK024"  ];
        ECMEMK0_ECMEMK023               = (*ECMEMK0    )["ECMEMK023"  ];
        ECMEMK0_ECMEMK022               = (*ECMEMK0    )["ECMEMK022"  ];
        ECMEMK0_ECMEMK021               = (*ECMEMK0    )["ECMEMK021"  ];
        ECMEMK0_ECMEMK020               = (*ECMEMK0    )["ECMEMK020"  ];
        ECMEMK0_ECMEMK019               = (*ECMEMK0    )["ECMEMK019"  ];
        ECMEMK0_ECMEMK018               = (*ECMEMK0    )["ECMEMK018"  ];
        ECMEMK0_ECMEMK017               = (*ECMEMK0    )["ECMEMK017"  ];
        ECMEMK0_ECMEMK016               = (*ECMEMK0    )["ECMEMK016"  ];
        ECMEMK0_ECMEMK015               = (*ECMEMK0    )["ECMEMK015"  ];
        ECMEMK0_ECMEMK014               = (*ECMEMK0    )["ECMEMK014"  ];
        ECMEMK0_ECMEMK013               = (*ECMEMK0    )["ECMEMK013"  ];
        ECMEMK0_ECMEMK012               = (*ECMEMK0    )["ECMEMK012"  ];
        ECMEMK0_ECMEMK011               = (*ECMEMK0    )["ECMEMK011"  ];
        ECMEMK0_ECMEMK010               = (*ECMEMK0    )["ECMEMK010"  ];
        ECMEMK0_ECMEMK009               = (*ECMEMK0    )["ECMEMK009"  ];
        ECMEMK0_ECMEMK008               = (*ECMEMK0    )["ECMEMK008"  ];
        ECMEMK0_ECMEMK007               = (*ECMEMK0    )["ECMEMK007"  ];
        ECMEMK0_ECMEMK006               = (*ECMEMK0    )["ECMEMK006"  ];
        ECMEMK0_ECMEMK005               = (*ECMEMK0    )["ECMEMK005"  ];
        ECMEMK0_ECMEMK004               = (*ECMEMK0    )["ECMEMK004"  ];
        ECMEMK0_ECMEMK003               = (*ECMEMK0    )["ECMEMK003"  ];
        ECMEMK0_ECMEMK002               = (*ECMEMK0    )["ECMEMK002"  ];
        ECMEMK0_ECMEMK001               = (*ECMEMK0    )["ECMEMK001"  ];
        ECMEMK0_ECMEMK000               = (*ECMEMK0    )["ECMEMK000"  ];
        return;
    }
    if (addr == 0x012C) {
        ECMEMK1_ECMEMK131               = (*ECMEMK1    )["ECMEMK131"  ];
        ECMEMK1_ECMEMK130               = (*ECMEMK1    )["ECMEMK130"  ];
        ECMEMK1_ECMEMK129               = (*ECMEMK1    )["ECMEMK129"  ];
        ECMEMK1_ECMEMK128               = (*ECMEMK1    )["ECMEMK128"  ];
        ECMEMK1_ECMEMK127               = (*ECMEMK1    )["ECMEMK127"  ];
        ECMEMK1_ECMEMK126               = (*ECMEMK1    )["ECMEMK126"  ];
        ECMEMK1_ECMEMK125               = (*ECMEMK1    )["ECMEMK125"  ];
        ECMEMK1_ECMEMK124               = (*ECMEMK1    )["ECMEMK124"  ];
        ECMEMK1_ECMEMK123               = (*ECMEMK1    )["ECMEMK123"  ];
        ECMEMK1_ECMEMK122               = (*ECMEMK1    )["ECMEMK122"  ];
        ECMEMK1_ECMEMK121               = (*ECMEMK1    )["ECMEMK121"  ];
        ECMEMK1_ECMEMK120               = (*ECMEMK1    )["ECMEMK120"  ];
        ECMEMK1_ECMEMK119               = (*ECMEMK1    )["ECMEMK119"  ];
        ECMEMK1_ECMEMK118               = (*ECMEMK1    )["ECMEMK118"  ];
        ECMEMK1_ECMEMK117               = (*ECMEMK1    )["ECMEMK117"  ];
        ECMEMK1_ECMEMK116               = (*ECMEMK1    )["ECMEMK116"  ];
        ECMEMK1_ECMEMK115               = (*ECMEMK1    )["ECMEMK115"  ];
        ECMEMK1_ECMEMK114               = (*ECMEMK1    )["ECMEMK114"  ];
        ECMEMK1_ECMEMK113               = (*ECMEMK1    )["ECMEMK113"  ];
        ECMEMK1_ECMEMK112               = (*ECMEMK1    )["ECMEMK112"  ];
        ECMEMK1_ECMEMK111               = (*ECMEMK1    )["ECMEMK111"  ];
        ECMEMK1_ECMEMK110               = (*ECMEMK1    )["ECMEMK110"  ];
        ECMEMK1_ECMEMK109               = (*ECMEMK1    )["ECMEMK109"  ];
        ECMEMK1_ECMEMK108               = (*ECMEMK1    )["ECMEMK108"  ];
        ECMEMK1_ECMEMK107               = (*ECMEMK1    )["ECMEMK107"  ];
        ECMEMK1_ECMEMK106               = (*ECMEMK1    )["ECMEMK106"  ];
        ECMEMK1_ECMEMK105               = (*ECMEMK1    )["ECMEMK105"  ];
        ECMEMK1_ECMEMK104               = (*ECMEMK1    )["ECMEMK104"  ];
        ECMEMK1_ECMEMK103               = (*ECMEMK1    )["ECMEMK103"  ];
        ECMEMK1_ECMEMK102               = (*ECMEMK1    )["ECMEMK102"  ];
        ECMEMK1_ECMEMK101               = (*ECMEMK1    )["ECMEMK101"  ];
        ECMEMK1_ECMEMK100               = (*ECMEMK1    )["ECMEMK100"  ];
        return;
    }
    if (addr == 0x0130) {
        ECMEMK2_ECMEMK229               = (*ECMEMK2    )["ECMEMK229"  ];
        ECMEMK2_ECMEMK228               = (*ECMEMK2    )["ECMEMK228"  ];
        ECMEMK2_ECMEMK227               = (*ECMEMK2    )["ECMEMK227"  ];
        ECMEMK2_ECMEMK226               = (*ECMEMK2    )["ECMEMK226"  ];
        ECMEMK2_ECMEMK225               = (*ECMEMK2    )["ECMEMK225"  ];
        ECMEMK2_ECMEMK224               = (*ECMEMK2    )["ECMEMK224"  ];
        ECMEMK2_ECMEMK223               = (*ECMEMK2    )["ECMEMK223"  ];
        ECMEMK2_ECMEMK222               = (*ECMEMK2    )["ECMEMK222"  ];
        ECMEMK2_ECMEMK221               = (*ECMEMK2    )["ECMEMK221"  ];
        ECMEMK2_ECMEMK220               = (*ECMEMK2    )["ECMEMK220"  ];
        ECMEMK2_ECMEMK219               = (*ECMEMK2    )["ECMEMK219"  ];
        ECMEMK2_ECMEMK218               = (*ECMEMK2    )["ECMEMK218"  ];
        ECMEMK2_ECMEMK217               = (*ECMEMK2    )["ECMEMK217"  ];
        ECMEMK2_ECMEMK216               = (*ECMEMK2    )["ECMEMK216"  ];
        ECMEMK2_ECMEMK215               = (*ECMEMK2    )["ECMEMK215"  ];
        ECMEMK2_ECMEMK214               = (*ECMEMK2    )["ECMEMK214"  ];
        ECMEMK2_ECMEMK213               = (*ECMEMK2    )["ECMEMK213"  ];
        ECMEMK2_ECMEMK212               = (*ECMEMK2    )["ECMEMK212"  ];
        ECMEMK2_ECMEMK211               = (*ECMEMK2    )["ECMEMK211"  ];
        ECMEMK2_ECMEMK210               = (*ECMEMK2    )["ECMEMK210"  ];
        ECMEMK2_ECMEMK209               = (*ECMEMK2    )["ECMEMK209"  ];
        ECMEMK2_ECMEMK208               = (*ECMEMK2    )["ECMEMK208"  ];
        ECMEMK2_ECMEMK207               = (*ECMEMK2    )["ECMEMK207"  ];
        ECMEMK2_ECMEMK206               = (*ECMEMK2    )["ECMEMK206"  ];
        ECMEMK2_ECMEMK205               = (*ECMEMK2    )["ECMEMK205"  ];
        ECMEMK2_ECMEMK204               = (*ECMEMK2    )["ECMEMK204"  ];
        ECMEMK2_ECMEMK203               = (*ECMEMK2    )["ECMEMK203"  ];
        ECMEMK2_ECMEMK202               = (*ECMEMK2    )["ECMEMK202"  ];
        ECMEMK2_ECMEMK201               = (*ECMEMK2    )["ECMEMK201"  ];
        ECMEMK2_ECMEMK200               = (*ECMEMK2    )["ECMEMK200"  ];
        return;
    }
    if (addr == 0x0134) {
        ECMESSTC0_ECMCLSSE031           = (*ECMESSTC0  )["ECMCLSSE031"];
        ECMESSTC0_ECMCLSSE030           = (*ECMESSTC0  )["ECMCLSSE030"];
        ECMESSTC0_ECMCLSSE029           = (*ECMESSTC0  )["ECMCLSSE029"];
        ECMESSTC0_ECMCLSSE028           = (*ECMESSTC0  )["ECMCLSSE028"];
        ECMESSTC0_ECMCLSSE027           = (*ECMESSTC0  )["ECMCLSSE027"];
        ECMESSTC0_ECMCLSSE026           = (*ECMESSTC0  )["ECMCLSSE026"];
        ECMESSTC0_ECMCLSSE025           = (*ECMESSTC0  )["ECMCLSSE025"];
        ECMESSTC0_ECMCLSSE024           = (*ECMESSTC0  )["ECMCLSSE024"];
        ECMESSTC0_ECMCLSSE023           = (*ECMESSTC0  )["ECMCLSSE023"];
        ECMESSTC0_ECMCLSSE022           = (*ECMESSTC0  )["ECMCLSSE022"];
        ECMESSTC0_ECMCLSSE021           = (*ECMESSTC0  )["ECMCLSSE021"];
        ECMESSTC0_ECMCLSSE020           = (*ECMESSTC0  )["ECMCLSSE020"];
        ECMESSTC0_ECMCLSSE019           = (*ECMESSTC0  )["ECMCLSSE019"];
        ECMESSTC0_ECMCLSSE018           = (*ECMESSTC0  )["ECMCLSSE018"];
        ECMESSTC0_ECMCLSSE017           = (*ECMESSTC0  )["ECMCLSSE017"];
        ECMESSTC0_ECMCLSSE016           = (*ECMESSTC0  )["ECMCLSSE016"];
        ECMESSTC0_ECMCLSSE015           = (*ECMESSTC0  )["ECMCLSSE015"];
        ECMESSTC0_ECMCLSSE014           = (*ECMESSTC0  )["ECMCLSSE014"];
        ECMESSTC0_ECMCLSSE013           = (*ECMESSTC0  )["ECMCLSSE013"];
        ECMESSTC0_ECMCLSSE012           = (*ECMESSTC0  )["ECMCLSSE012"];
        ECMESSTC0_ECMCLSSE011           = (*ECMESSTC0  )["ECMCLSSE011"];
        ECMESSTC0_ECMCLSSE010           = (*ECMESSTC0  )["ECMCLSSE010"];
        ECMESSTC0_ECMCLSSE009           = (*ECMESSTC0  )["ECMCLSSE009"];
        ECMESSTC0_ECMCLSSE008           = (*ECMESSTC0  )["ECMCLSSE008"];
        ECMESSTC0_ECMCLSSE007           = (*ECMESSTC0  )["ECMCLSSE007"];
        ECMESSTC0_ECMCLSSE006           = (*ECMESSTC0  )["ECMCLSSE006"];
        ECMESSTC0_ECMCLSSE005           = (*ECMESSTC0  )["ECMCLSSE005"];
        ECMESSTC0_ECMCLSSE004           = (*ECMESSTC0  )["ECMCLSSE004"];
        ECMESSTC0_ECMCLSSE003           = (*ECMESSTC0  )["ECMCLSSE003"];
        ECMESSTC0_ECMCLSSE002           = (*ECMESSTC0  )["ECMCLSSE002"];
        ECMESSTC0_ECMCLSSE001           = (*ECMESSTC0  )["ECMCLSSE001"];
        ECMESSTC0_ECMCLSSE000           = (*ECMESSTC0  )["ECMCLSSE000"];
        return;
    }
    if (addr == 0x0138) {
        ECMESSTC1_ECMCLSSE131           = (*ECMESSTC1  )["ECMCLSSE131"];
        ECMESSTC1_ECMCLSSE130           = (*ECMESSTC1  )["ECMCLSSE130"];
        ECMESSTC1_ECMCLSSE129           = (*ECMESSTC1  )["ECMCLSSE129"];
        ECMESSTC1_ECMCLSSE128           = (*ECMESSTC1  )["ECMCLSSE128"];
        ECMESSTC1_ECMCLSSE127           = (*ECMESSTC1  )["ECMCLSSE127"];
        ECMESSTC1_ECMCLSSE126           = (*ECMESSTC1  )["ECMCLSSE126"];
        ECMESSTC1_ECMCLSSE125           = (*ECMESSTC1  )["ECMCLSSE125"];
        ECMESSTC1_ECMCLSSE124           = (*ECMESSTC1  )["ECMCLSSE124"];
        ECMESSTC1_ECMCLSSE123           = (*ECMESSTC1  )["ECMCLSSE123"];
        ECMESSTC1_ECMCLSSE122           = (*ECMESSTC1  )["ECMCLSSE122"];
        ECMESSTC1_ECMCLSSE121           = (*ECMESSTC1  )["ECMCLSSE121"];
        ECMESSTC1_ECMCLSSE120           = (*ECMESSTC1  )["ECMCLSSE120"];
        ECMESSTC1_ECMCLSSE119           = (*ECMESSTC1  )["ECMCLSSE119"];
        ECMESSTC1_ECMCLSSE118           = (*ECMESSTC1  )["ECMCLSSE118"];
        ECMESSTC1_ECMCLSSE117           = (*ECMESSTC1  )["ECMCLSSE117"];
        ECMESSTC1_ECMCLSSE116           = (*ECMESSTC1  )["ECMCLSSE116"];
        ECMESSTC1_ECMCLSSE115           = (*ECMESSTC1  )["ECMCLSSE115"];
        ECMESSTC1_ECMCLSSE114           = (*ECMESSTC1  )["ECMCLSSE114"];
        ECMESSTC1_ECMCLSSE113           = (*ECMESSTC1  )["ECMCLSSE113"];
        ECMESSTC1_ECMCLSSE112           = (*ECMESSTC1  )["ECMCLSSE112"];
        ECMESSTC1_ECMCLSSE111           = (*ECMESSTC1  )["ECMCLSSE111"];
        ECMESSTC1_ECMCLSSE110           = (*ECMESSTC1  )["ECMCLSSE110"];
        ECMESSTC1_ECMCLSSE109           = (*ECMESSTC1  )["ECMCLSSE109"];
        ECMESSTC1_ECMCLSSE108           = (*ECMESSTC1  )["ECMCLSSE108"];
        ECMESSTC1_ECMCLSSE107           = (*ECMESSTC1  )["ECMCLSSE107"];
        ECMESSTC1_ECMCLSSE106           = (*ECMESSTC1  )["ECMCLSSE106"];
        ECMESSTC1_ECMCLSSE105           = (*ECMESSTC1  )["ECMCLSSE105"];
        ECMESSTC1_ECMCLSSE104           = (*ECMESSTC1  )["ECMCLSSE104"];
        ECMESSTC1_ECMCLSSE103           = (*ECMESSTC1  )["ECMCLSSE103"];
        ECMESSTC1_ECMCLSSE102           = (*ECMESSTC1  )["ECMCLSSE102"];
        ECMESSTC1_ECMCLSSE101           = (*ECMESSTC1  )["ECMCLSSE101"];
        ECMESSTC1_ECMCLSSE100           = (*ECMESSTC1  )["ECMCLSSE100"];
        return;
    }
    if (addr == 0x013C) {
        ECMESSTC2_ECMCLSSE230           = (*ECMESSTC2  )["ECMCLSSE230"];
        ECMESSTC2_ECMCLSSE229           = (*ECMESSTC2  )["ECMCLSSE229"];
        ECMESSTC2_ECMCLSSE228           = (*ECMESSTC2  )["ECMCLSSE228"];
        ECMESSTC2_ECMCLSSE227           = (*ECMESSTC2  )["ECMCLSSE227"];
        ECMESSTC2_ECMCLSSE226           = (*ECMESSTC2  )["ECMCLSSE226"];
        ECMESSTC2_ECMCLSSE225           = (*ECMESSTC2  )["ECMCLSSE225"];
        ECMESSTC2_ECMCLSSE224           = (*ECMESSTC2  )["ECMCLSSE224"];
        ECMESSTC2_ECMCLSSE223           = (*ECMESSTC2  )["ECMCLSSE223"];
        ECMESSTC2_ECMCLSSE222           = (*ECMESSTC2  )["ECMCLSSE222"];
        ECMESSTC2_ECMCLSSE221           = (*ECMESSTC2  )["ECMCLSSE221"];
        ECMESSTC2_ECMCLSSE220           = (*ECMESSTC2  )["ECMCLSSE220"];
        ECMESSTC2_ECMCLSSE219           = (*ECMESSTC2  )["ECMCLSSE219"];
        ECMESSTC2_ECMCLSSE218           = (*ECMESSTC2  )["ECMCLSSE218"];
        ECMESSTC2_ECMCLSSE217           = (*ECMESSTC2  )["ECMCLSSE217"];
        ECMESSTC2_ECMCLSSE216           = (*ECMESSTC2  )["ECMCLSSE216"];
        ECMESSTC2_ECMCLSSE215           = (*ECMESSTC2  )["ECMCLSSE215"];
        ECMESSTC2_ECMCLSSE214           = (*ECMESSTC2  )["ECMCLSSE214"];
        ECMESSTC2_ECMCLSSE213           = (*ECMESSTC2  )["ECMCLSSE213"];
        ECMESSTC2_ECMCLSSE212           = (*ECMESSTC2  )["ECMCLSSE212"];
        ECMESSTC2_ECMCLSSE211           = (*ECMESSTC2  )["ECMCLSSE211"];
        ECMESSTC2_ECMCLSSE210           = (*ECMESSTC2  )["ECMCLSSE210"];
        ECMESSTC2_ECMCLSSE209           = (*ECMESSTC2  )["ECMCLSSE209"];
        ECMESSTC2_ECMCLSSE208           = (*ECMESSTC2  )["ECMCLSSE208"];
        ECMESSTC2_ECMCLSSE207           = (*ECMESSTC2  )["ECMCLSSE207"];
        ECMESSTC2_ECMCLSSE206           = (*ECMESSTC2  )["ECMCLSSE206"];
        ECMESSTC2_ECMCLSSE205           = (*ECMESSTC2  )["ECMCLSSE205"];
        ECMESSTC2_ECMCLSSE204           = (*ECMESSTC2  )["ECMCLSSE204"];
        ECMESSTC2_ECMCLSSE203           = (*ECMESSTC2  )["ECMCLSSE203"];
        ECMESSTC2_ECMCLSSE202           = (*ECMESSTC2  )["ECMCLSSE202"];
        ECMESSTC2_ECMCLSSE201           = (*ECMESSTC2  )["ECMCLSSE201"];
        ECMESSTC2_ECMCLSSE200           = (*ECMESSTC2  )["ECMCLSSE200"];
        return;
    }
    if (addr == 0x0140) {
        ECMPCMD1_ECM1REG                = (*ECMPCMD1   )["ECM1REG"    ];
        return;
    }
    if (addr == 0x0144) {
        ECMPS_ECMPRERR                  = (*ECMPS      )["ECMPRERR"   ];
        return;
    }
    if (addr == 0x0148) {
        ECMPE0_ECMPE031                 = (*ECMPE0     )["ECMPE031"   ];
        ECMPE0_ECMPE030                 = (*ECMPE0     )["ECMPE030"   ];
        ECMPE0_ECMPE029                 = (*ECMPE0     )["ECMPE029"   ];
        ECMPE0_ECMPE028                 = (*ECMPE0     )["ECMPE028"   ];
        ECMPE0_ECMPE027                 = (*ECMPE0     )["ECMPE027"   ];
        ECMPE0_ECMPE026                 = (*ECMPE0     )["ECMPE026"   ];
        ECMPE0_ECMPE025                 = (*ECMPE0     )["ECMPE025"   ];
        ECMPE0_ECMPE024                 = (*ECMPE0     )["ECMPE024"   ];
        ECMPE0_ECMPE023                 = (*ECMPE0     )["ECMPE023"   ];
        ECMPE0_ECMPE022                 = (*ECMPE0     )["ECMPE022"   ];
        ECMPE0_ECMPE021                 = (*ECMPE0     )["ECMPE021"   ];
        ECMPE0_ECMPE020                 = (*ECMPE0     )["ECMPE020"   ];
        ECMPE0_ECMPE019                 = (*ECMPE0     )["ECMPE019"   ];
        ECMPE0_ECMPE018                 = (*ECMPE0     )["ECMPE018"   ];
        ECMPE0_ECMPE017                 = (*ECMPE0     )["ECMPE017"   ];
        ECMPE0_ECMPE016                 = (*ECMPE0     )["ECMPE016"   ];
        ECMPE0_ECMPE015                 = (*ECMPE0     )["ECMPE015"   ];
        ECMPE0_ECMPE014                 = (*ECMPE0     )["ECMPE014"   ];
        ECMPE0_ECMPE013                 = (*ECMPE0     )["ECMPE013"   ];
        ECMPE0_ECMPE012                 = (*ECMPE0     )["ECMPE012"   ];
        ECMPE0_ECMPE011                 = (*ECMPE0     )["ECMPE011"   ];
        ECMPE0_ECMPE010                 = (*ECMPE0     )["ECMPE010"   ];
        ECMPE0_ECMPE009                 = (*ECMPE0     )["ECMPE009"   ];
        ECMPE0_ECMPE008                 = (*ECMPE0     )["ECMPE008"   ];
        ECMPE0_ECMPE007                 = (*ECMPE0     )["ECMPE007"   ];
        ECMPE0_ECMPE006                 = (*ECMPE0     )["ECMPE006"   ];
        ECMPE0_ECMPE005                 = (*ECMPE0     )["ECMPE005"   ];
        ECMPE0_ECMPE004                 = (*ECMPE0     )["ECMPE004"   ];
        ECMPE0_ECMPE003                 = (*ECMPE0     )["ECMPE003"   ];
        ECMPE0_ECMPE002                 = (*ECMPE0     )["ECMPE002"   ];
        ECMPE0_ECMPE001                 = (*ECMPE0     )["ECMPE001"   ];
        ECMPE0_ECMPE000                 = (*ECMPE0     )["ECMPE000"   ];
        return;
    }
    if (addr == 0x014C) {
        ECMPE1_ECMPE131                 = (*ECMPE1     )["ECMPE131"   ];
        ECMPE1_ECMPE130                 = (*ECMPE1     )["ECMPE130"   ];
        ECMPE1_ECMPE129                 = (*ECMPE1     )["ECMPE129"   ];
        ECMPE1_ECMPE128                 = (*ECMPE1     )["ECMPE128"   ];
        ECMPE1_ECMPE127                 = (*ECMPE1     )["ECMPE127"   ];
        ECMPE1_ECMPE126                 = (*ECMPE1     )["ECMPE126"   ];
        ECMPE1_ECMPE125                 = (*ECMPE1     )["ECMPE125"   ];
        ECMPE1_ECMPE124                 = (*ECMPE1     )["ECMPE124"   ];
        ECMPE1_ECMPE123                 = (*ECMPE1     )["ECMPE123"   ];
        ECMPE1_ECMPE122                 = (*ECMPE1     )["ECMPE122"   ];
        ECMPE1_ECMPE121                 = (*ECMPE1     )["ECMPE121"   ];
        ECMPE1_ECMPE120                 = (*ECMPE1     )["ECMPE120"   ];
        ECMPE1_ECMPE119                 = (*ECMPE1     )["ECMPE119"   ];
        ECMPE1_ECMPE118                 = (*ECMPE1     )["ECMPE118"   ];
        ECMPE1_ECMPE117                 = (*ECMPE1     )["ECMPE117"   ];
        ECMPE1_ECMPE116                 = (*ECMPE1     )["ECMPE116"   ];
        ECMPE1_ECMPE115                 = (*ECMPE1     )["ECMPE115"   ];
        ECMPE1_ECMPE114                 = (*ECMPE1     )["ECMPE114"   ];
        ECMPE1_ECMPE113                 = (*ECMPE1     )["ECMPE113"   ];
        ECMPE1_ECMPE112                 = (*ECMPE1     )["ECMPE112"   ];
        ECMPE1_ECMPE111                 = (*ECMPE1     )["ECMPE111"   ];
        ECMPE1_ECMPE110                 = (*ECMPE1     )["ECMPE110"   ];
        ECMPE1_ECMPE109                 = (*ECMPE1     )["ECMPE109"   ];
        ECMPE1_ECMPE108                 = (*ECMPE1     )["ECMPE108"   ];
        ECMPE1_ECMPE107                 = (*ECMPE1     )["ECMPE107"   ];
        ECMPE1_ECMPE106                 = (*ECMPE1     )["ECMPE106"   ];
        ECMPE1_ECMPE105                 = (*ECMPE1     )["ECMPE105"   ];
        ECMPE1_ECMPE104                 = (*ECMPE1     )["ECMPE104"   ];
        ECMPE1_ECMPE103                 = (*ECMPE1     )["ECMPE103"   ];
        ECMPE1_ECMPE102                 = (*ECMPE1     )["ECMPE102"   ];
        ECMPE1_ECMPE101                 = (*ECMPE1     )["ECMPE101"   ];
        ECMPE1_ECMPE100                 = (*ECMPE1     )["ECMPE100"   ];
        return;
    }
    if (addr == 0x0150) {
        ECMPE2_ECMPE229                 = (*ECMPE2     )["ECMPE229"   ];
        ECMPE2_ECMPE228                 = (*ECMPE2     )["ECMPE228"   ];
        ECMPE2_ECMPE227                 = (*ECMPE2     )["ECMPE227"   ];
        ECMPE2_ECMPE226                 = (*ECMPE2     )["ECMPE226"   ];
        ECMPE2_ECMPE225                 = (*ECMPE2     )["ECMPE225"   ];
        ECMPE2_ECMPE224                 = (*ECMPE2     )["ECMPE224"   ];
        ECMPE2_ECMPE223                 = (*ECMPE2     )["ECMPE223"   ];
        ECMPE2_ECMPE222                 = (*ECMPE2     )["ECMPE222"   ];
        ECMPE2_ECMPE221                 = (*ECMPE2     )["ECMPE221"   ];
        ECMPE2_ECMPE220                 = (*ECMPE2     )["ECMPE220"   ];
        ECMPE2_ECMPE219                 = (*ECMPE2     )["ECMPE219"   ];
        ECMPE2_ECMPE218                 = (*ECMPE2     )["ECMPE218"   ];
        ECMPE2_ECMPE217                 = (*ECMPE2     )["ECMPE217"   ];
        ECMPE2_ECMPE216                 = (*ECMPE2     )["ECMPE216"   ];
        ECMPE2_ECMPE215                 = (*ECMPE2     )["ECMPE215"   ];
        ECMPE2_ECMPE214                 = (*ECMPE2     )["ECMPE214"   ];
        ECMPE2_ECMPE213                 = (*ECMPE2     )["ECMPE213"   ];
        ECMPE2_ECMPE212                 = (*ECMPE2     )["ECMPE212"   ];
        ECMPE2_ECMPE211                 = (*ECMPE2     )["ECMPE211"   ];
        ECMPE2_ECMPE210                 = (*ECMPE2     )["ECMPE210"   ];
        ECMPE2_ECMPE209                 = (*ECMPE2     )["ECMPE209"   ];
        ECMPE2_ECMPE208                 = (*ECMPE2     )["ECMPE208"   ];
        ECMPE2_ECMPE207                 = (*ECMPE2     )["ECMPE207"   ];
        ECMPE2_ECMPE206                 = (*ECMPE2     )["ECMPE206"   ];
        ECMPE2_ECMPE205                 = (*ECMPE2     )["ECMPE205"   ];
        ECMPE2_ECMPE204                 = (*ECMPE2     )["ECMPE204"   ];
        ECMPE2_ECMPE203                 = (*ECMPE2     )["ECMPE203"   ];
        ECMPE2_ECMPE202                 = (*ECMPE2     )["ECMPE202"   ];
        ECMPE2_ECMPE201                 = (*ECMPE2     )["ECMPE201"   ];
        ECMPE2_ECMPE200                 = (*ECMPE2     )["ECMPE200"   ];
        return;
    }
    if (addr == 0x0154) {
        ECMDTMCTL_ECMSTP                = (*ECMDTMCTL  )["ECMSTP"     ];
        ECMDTMCTL_ECMSTA                = (*ECMDTMCTL  )["ECMSTA"     ];
        return;
    }
    if (addr == 0x0158) {
        ECMDTMR_ECMDTMR                 = (*ECMDTMR    )["ECMDTMR"    ];
        return;
    }
    if (addr == 0x015C) {
        ECMDTMCMP_ECMDTMCMP             = (*ECMDTMCMP  )["ECMDTMCMP"  ];
        return;
    }
    if (addr == 0x0160) {
        ECMDTMCFG0_ECMDTMCFG031         = (*ECMDTMCFG0 )["ECMDTMCFG031"];
        ECMDTMCFG0_ECMDTMCFG030         = (*ECMDTMCFG0 )["ECMDTMCFG030"];
        ECMDTMCFG0_ECMDTMCFG029         = (*ECMDTMCFG0 )["ECMDTMCFG029"];
        ECMDTMCFG0_ECMDTMCFG028         = (*ECMDTMCFG0 )["ECMDTMCFG028"];
        ECMDTMCFG0_ECMDTMCFG027         = (*ECMDTMCFG0 )["ECMDTMCFG027"];
        ECMDTMCFG0_ECMDTMCFG026         = (*ECMDTMCFG0 )["ECMDTMCFG026"];
        ECMDTMCFG0_ECMDTMCFG025         = (*ECMDTMCFG0 )["ECMDTMCFG025"];
        ECMDTMCFG0_ECMDTMCFG024         = (*ECMDTMCFG0 )["ECMDTMCFG024"];
        ECMDTMCFG0_ECMDTMCFG023         = (*ECMDTMCFG0 )["ECMDTMCFG023"];
        ECMDTMCFG0_ECMDTMCFG022         = (*ECMDTMCFG0 )["ECMDTMCFG022"];
        ECMDTMCFG0_ECMDTMCFG021         = (*ECMDTMCFG0 )["ECMDTMCFG021"];
        ECMDTMCFG0_ECMDTMCFG020         = (*ECMDTMCFG0 )["ECMDTMCFG020"];
        ECMDTMCFG0_ECMDTMCFG019         = (*ECMDTMCFG0 )["ECMDTMCFG019"];
        ECMDTMCFG0_ECMDTMCFG018         = (*ECMDTMCFG0 )["ECMDTMCFG018"];
        ECMDTMCFG0_ECMDTMCFG017         = (*ECMDTMCFG0 )["ECMDTMCFG017"];
        ECMDTMCFG0_ECMDTMCFG016         = (*ECMDTMCFG0 )["ECMDTMCFG016"];
        ECMDTMCFG0_ECMDTMCFG015         = (*ECMDTMCFG0 )["ECMDTMCFG015"];
        ECMDTMCFG0_ECMDTMCFG014         = (*ECMDTMCFG0 )["ECMDTMCFG014"];
        ECMDTMCFG0_ECMDTMCFG013         = (*ECMDTMCFG0 )["ECMDTMCFG013"];
        ECMDTMCFG0_ECMDTMCFG012         = (*ECMDTMCFG0 )["ECMDTMCFG012"];
        ECMDTMCFG0_ECMDTMCFG011         = (*ECMDTMCFG0 )["ECMDTMCFG011"];
        ECMDTMCFG0_ECMDTMCFG010         = (*ECMDTMCFG0 )["ECMDTMCFG010"];
        ECMDTMCFG0_ECMDTMCFG009         = (*ECMDTMCFG0 )["ECMDTMCFG009"];
        ECMDTMCFG0_ECMDTMCFG008         = (*ECMDTMCFG0 )["ECMDTMCFG008"];
        ECMDTMCFG0_ECMDTMCFG007         = (*ECMDTMCFG0 )["ECMDTMCFG007"];
        ECMDTMCFG0_ECMDTMCFG006         = (*ECMDTMCFG0 )["ECMDTMCFG006"];
        ECMDTMCFG0_ECMDTMCFG005         = (*ECMDTMCFG0 )["ECMDTMCFG005"];
        ECMDTMCFG0_ECMDTMCFG004         = (*ECMDTMCFG0 )["ECMDTMCFG004"];
        ECMDTMCFG0_ECMDTMCFG003         = (*ECMDTMCFG0 )["ECMDTMCFG003"];
        ECMDTMCFG0_ECMDTMCFG002         = (*ECMDTMCFG0 )["ECMDTMCFG002"];
        ECMDTMCFG0_ECMDTMCFG001         = (*ECMDTMCFG0 )["ECMDTMCFG001"];
        ECMDTMCFG0_ECMDTMCFG000         = (*ECMDTMCFG0 )["ECMDTMCFG000"];
        return;
    }
    if (addr == 0x0164) {
        ECMDTMCFG1_ECMDTMCFG131         = (*ECMDTMCFG1 )["ECMDTMCFG131"];
        ECMDTMCFG1_ECMDTMCFG130         = (*ECMDTMCFG1 )["ECMDTMCFG130"];
        ECMDTMCFG1_ECMDTMCFG129         = (*ECMDTMCFG1 )["ECMDTMCFG129"];
        ECMDTMCFG1_ECMDTMCFG128         = (*ECMDTMCFG1 )["ECMDTMCFG128"];
        ECMDTMCFG1_ECMDTMCFG127         = (*ECMDTMCFG1 )["ECMDTMCFG127"];
        ECMDTMCFG1_ECMDTMCFG126         = (*ECMDTMCFG1 )["ECMDTMCFG126"];
        ECMDTMCFG1_ECMDTMCFG125         = (*ECMDTMCFG1 )["ECMDTMCFG125"];
        ECMDTMCFG1_ECMDTMCFG124         = (*ECMDTMCFG1 )["ECMDTMCFG124"];
        ECMDTMCFG1_ECMDTMCFG123         = (*ECMDTMCFG1 )["ECMDTMCFG123"];
        ECMDTMCFG1_ECMDTMCFG122         = (*ECMDTMCFG1 )["ECMDTMCFG122"];
        ECMDTMCFG1_ECMDTMCFG121         = (*ECMDTMCFG1 )["ECMDTMCFG121"];
        ECMDTMCFG1_ECMDTMCFG120         = (*ECMDTMCFG1 )["ECMDTMCFG120"];
        ECMDTMCFG1_ECMDTMCFG119         = (*ECMDTMCFG1 )["ECMDTMCFG119"];
        ECMDTMCFG1_ECMDTMCFG118         = (*ECMDTMCFG1 )["ECMDTMCFG118"];
        ECMDTMCFG1_ECMDTMCFG117         = (*ECMDTMCFG1 )["ECMDTMCFG117"];
        ECMDTMCFG1_ECMDTMCFG116         = (*ECMDTMCFG1 )["ECMDTMCFG116"];
        ECMDTMCFG1_ECMDTMCFG115         = (*ECMDTMCFG1 )["ECMDTMCFG115"];
        ECMDTMCFG1_ECMDTMCFG114         = (*ECMDTMCFG1 )["ECMDTMCFG114"];
        ECMDTMCFG1_ECMDTMCFG113         = (*ECMDTMCFG1 )["ECMDTMCFG113"];
        ECMDTMCFG1_ECMDTMCFG112         = (*ECMDTMCFG1 )["ECMDTMCFG112"];
        ECMDTMCFG1_ECMDTMCFG111         = (*ECMDTMCFG1 )["ECMDTMCFG111"];
        ECMDTMCFG1_ECMDTMCFG110         = (*ECMDTMCFG1 )["ECMDTMCFG110"];
        ECMDTMCFG1_ECMDTMCFG109         = (*ECMDTMCFG1 )["ECMDTMCFG109"];
        ECMDTMCFG1_ECMDTMCFG108         = (*ECMDTMCFG1 )["ECMDTMCFG108"];
        ECMDTMCFG1_ECMDTMCFG107         = (*ECMDTMCFG1 )["ECMDTMCFG107"];
        ECMDTMCFG1_ECMDTMCFG106         = (*ECMDTMCFG1 )["ECMDTMCFG106"];
        ECMDTMCFG1_ECMDTMCFG105         = (*ECMDTMCFG1 )["ECMDTMCFG105"];
        ECMDTMCFG1_ECMDTMCFG104         = (*ECMDTMCFG1 )["ECMDTMCFG104"];
        ECMDTMCFG1_ECMDTMCFG103         = (*ECMDTMCFG1 )["ECMDTMCFG103"];
        ECMDTMCFG1_ECMDTMCFG102         = (*ECMDTMCFG1 )["ECMDTMCFG102"];
        ECMDTMCFG1_ECMDTMCFG101         = (*ECMDTMCFG1 )["ECMDTMCFG101"];
        ECMDTMCFG1_ECMDTMCFG100         = (*ECMDTMCFG1 )["ECMDTMCFG100"];
        return;
    }
    if (addr == 0x0168) {
        ECMDTMCFG2_ECMDTMCFG228         = (*ECMDTMCFG2 )["ECMDTMCFG228"];
        ECMDTMCFG2_ECMDTMCFG227         = (*ECMDTMCFG2 )["ECMDTMCFG227"];
        ECMDTMCFG2_ECMDTMCFG226         = (*ECMDTMCFG2 )["ECMDTMCFG226"];
        ECMDTMCFG2_ECMDTMCFG225         = (*ECMDTMCFG2 )["ECMDTMCFG225"];
        ECMDTMCFG2_ECMDTMCFG224         = (*ECMDTMCFG2 )["ECMDTMCFG224"];
        ECMDTMCFG2_ECMDTMCFG223         = (*ECMDTMCFG2 )["ECMDTMCFG223"];
        ECMDTMCFG2_ECMDTMCFG222         = (*ECMDTMCFG2 )["ECMDTMCFG222"];
        ECMDTMCFG2_ECMDTMCFG221         = (*ECMDTMCFG2 )["ECMDTMCFG221"];
        ECMDTMCFG2_ECMDTMCFG220         = (*ECMDTMCFG2 )["ECMDTMCFG220"];
        ECMDTMCFG2_ECMDTMCFG219         = (*ECMDTMCFG2 )["ECMDTMCFG219"];
        ECMDTMCFG2_ECMDTMCFG218         = (*ECMDTMCFG2 )["ECMDTMCFG218"];
        ECMDTMCFG2_ECMDTMCFG217         = (*ECMDTMCFG2 )["ECMDTMCFG217"];
        ECMDTMCFG2_ECMDTMCFG216         = (*ECMDTMCFG2 )["ECMDTMCFG216"];
        ECMDTMCFG2_ECMDTMCFG215         = (*ECMDTMCFG2 )["ECMDTMCFG215"];
        ECMDTMCFG2_ECMDTMCFG214         = (*ECMDTMCFG2 )["ECMDTMCFG214"];
        ECMDTMCFG2_ECMDTMCFG213         = (*ECMDTMCFG2 )["ECMDTMCFG213"];
        ECMDTMCFG2_ECMDTMCFG212         = (*ECMDTMCFG2 )["ECMDTMCFG212"];
        ECMDTMCFG2_ECMDTMCFG211         = (*ECMDTMCFG2 )["ECMDTMCFG211"];
        ECMDTMCFG2_ECMDTMCFG210         = (*ECMDTMCFG2 )["ECMDTMCFG210"];
        ECMDTMCFG2_ECMDTMCFG209         = (*ECMDTMCFG2 )["ECMDTMCFG209"];
        ECMDTMCFG2_ECMDTMCFG208         = (*ECMDTMCFG2 )["ECMDTMCFG208"];
        ECMDTMCFG2_ECMDTMCFG207         = (*ECMDTMCFG2 )["ECMDTMCFG207"];
        ECMDTMCFG2_ECMDTMCFG206         = (*ECMDTMCFG2 )["ECMDTMCFG206"];
        ECMDTMCFG2_ECMDTMCFG205         = (*ECMDTMCFG2 )["ECMDTMCFG205"];
        ECMDTMCFG2_ECMDTMCFG204         = (*ECMDTMCFG2 )["ECMDTMCFG204"];
        ECMDTMCFG2_ECMDTMCFG203         = (*ECMDTMCFG2 )["ECMDTMCFG203"];
        ECMDTMCFG2_ECMDTMCFG202         = (*ECMDTMCFG2 )["ECMDTMCFG202"];
        ECMDTMCFG2_ECMDTMCFG201         = (*ECMDTMCFG2 )["ECMDTMCFG201"];
        ECMDTMCFG2_ECMDTMCFG200         = (*ECMDTMCFG2 )["ECMDTMCFG200"];
        return;
    }
    if (addr == 0x016C) {
        ECMDTMCFG3_ECMDTMCFG331         = (*ECMDTMCFG3 )["ECMDTMCFG331"];
        ECMDTMCFG3_ECMDTMCFG330         = (*ECMDTMCFG3 )["ECMDTMCFG330"];
        ECMDTMCFG3_ECMDTMCFG329         = (*ECMDTMCFG3 )["ECMDTMCFG329"];
        ECMDTMCFG3_ECMDTMCFG328         = (*ECMDTMCFG3 )["ECMDTMCFG328"];
        ECMDTMCFG3_ECMDTMCFG327         = (*ECMDTMCFG3 )["ECMDTMCFG327"];
        ECMDTMCFG3_ECMDTMCFG326         = (*ECMDTMCFG3 )["ECMDTMCFG326"];
        ECMDTMCFG3_ECMDTMCFG325         = (*ECMDTMCFG3 )["ECMDTMCFG325"];
        ECMDTMCFG3_ECMDTMCFG324         = (*ECMDTMCFG3 )["ECMDTMCFG324"];
        ECMDTMCFG3_ECMDTMCFG323         = (*ECMDTMCFG3 )["ECMDTMCFG323"];
        ECMDTMCFG3_ECMDTMCFG322         = (*ECMDTMCFG3 )["ECMDTMCFG322"];
        ECMDTMCFG3_ECMDTMCFG321         = (*ECMDTMCFG3 )["ECMDTMCFG321"];
        ECMDTMCFG3_ECMDTMCFG320         = (*ECMDTMCFG3 )["ECMDTMCFG320"];
        ECMDTMCFG3_ECMDTMCFG319         = (*ECMDTMCFG3 )["ECMDTMCFG319"];
        ECMDTMCFG3_ECMDTMCFG318         = (*ECMDTMCFG3 )["ECMDTMCFG318"];
        ECMDTMCFG3_ECMDTMCFG317         = (*ECMDTMCFG3 )["ECMDTMCFG317"];
        ECMDTMCFG3_ECMDTMCFG316         = (*ECMDTMCFG3 )["ECMDTMCFG316"];
        ECMDTMCFG3_ECMDTMCFG315         = (*ECMDTMCFG3 )["ECMDTMCFG315"];
        ECMDTMCFG3_ECMDTMCFG314         = (*ECMDTMCFG3 )["ECMDTMCFG314"];
        ECMDTMCFG3_ECMDTMCFG313         = (*ECMDTMCFG3 )["ECMDTMCFG313"];
        ECMDTMCFG3_ECMDTMCFG312         = (*ECMDTMCFG3 )["ECMDTMCFG312"];
        ECMDTMCFG3_ECMDTMCFG311         = (*ECMDTMCFG3 )["ECMDTMCFG311"];
        ECMDTMCFG3_ECMDTMCFG310         = (*ECMDTMCFG3 )["ECMDTMCFG310"];
        ECMDTMCFG3_ECMDTMCFG309         = (*ECMDTMCFG3 )["ECMDTMCFG309"];
        ECMDTMCFG3_ECMDTMCFG308         = (*ECMDTMCFG3 )["ECMDTMCFG308"];
        ECMDTMCFG3_ECMDTMCFG307         = (*ECMDTMCFG3 )["ECMDTMCFG307"];
        ECMDTMCFG3_ECMDTMCFG306         = (*ECMDTMCFG3 )["ECMDTMCFG306"];
        ECMDTMCFG3_ECMDTMCFG305         = (*ECMDTMCFG3 )["ECMDTMCFG305"];
        ECMDTMCFG3_ECMDTMCFG304         = (*ECMDTMCFG3 )["ECMDTMCFG304"];
        ECMDTMCFG3_ECMDTMCFG303         = (*ECMDTMCFG3 )["ECMDTMCFG303"];
        ECMDTMCFG3_ECMDTMCFG302         = (*ECMDTMCFG3 )["ECMDTMCFG302"];
        ECMDTMCFG3_ECMDTMCFG301         = (*ECMDTMCFG3 )["ECMDTMCFG301"];
        ECMDTMCFG3_ECMDTMCFG300         = (*ECMDTMCFG3 )["ECMDTMCFG300"];
        return;
    }
    if (addr == 0x0170) {
        ECMDTMCFG4_ECMDTMCFG431         = (*ECMDTMCFG4 )["ECMDTMCFG431"];
        ECMDTMCFG4_ECMDTMCFG430         = (*ECMDTMCFG4 )["ECMDTMCFG430"];
        ECMDTMCFG4_ECMDTMCFG429         = (*ECMDTMCFG4 )["ECMDTMCFG429"];
        ECMDTMCFG4_ECMDTMCFG428         = (*ECMDTMCFG4 )["ECMDTMCFG428"];
        ECMDTMCFG4_ECMDTMCFG427         = (*ECMDTMCFG4 )["ECMDTMCFG427"];
        ECMDTMCFG4_ECMDTMCFG426         = (*ECMDTMCFG4 )["ECMDTMCFG426"];
        ECMDTMCFG4_ECMDTMCFG425         = (*ECMDTMCFG4 )["ECMDTMCFG425"];
        ECMDTMCFG4_ECMDTMCFG424         = (*ECMDTMCFG4 )["ECMDTMCFG424"];
        ECMDTMCFG4_ECMDTMCFG423         = (*ECMDTMCFG4 )["ECMDTMCFG423"];
        ECMDTMCFG4_ECMDTMCFG422         = (*ECMDTMCFG4 )["ECMDTMCFG422"];
        ECMDTMCFG4_ECMDTMCFG421         = (*ECMDTMCFG4 )["ECMDTMCFG421"];
        ECMDTMCFG4_ECMDTMCFG420         = (*ECMDTMCFG4 )["ECMDTMCFG420"];
        ECMDTMCFG4_ECMDTMCFG419         = (*ECMDTMCFG4 )["ECMDTMCFG419"];
        ECMDTMCFG4_ECMDTMCFG418         = (*ECMDTMCFG4 )["ECMDTMCFG418"];
        ECMDTMCFG4_ECMDTMCFG417         = (*ECMDTMCFG4 )["ECMDTMCFG417"];
        ECMDTMCFG4_ECMDTMCFG416         = (*ECMDTMCFG4 )["ECMDTMCFG416"];
        ECMDTMCFG4_ECMDTMCFG415         = (*ECMDTMCFG4 )["ECMDTMCFG415"];
        ECMDTMCFG4_ECMDTMCFG414         = (*ECMDTMCFG4 )["ECMDTMCFG414"];
        ECMDTMCFG4_ECMDTMCFG413         = (*ECMDTMCFG4 )["ECMDTMCFG413"];
        ECMDTMCFG4_ECMDTMCFG412         = (*ECMDTMCFG4 )["ECMDTMCFG412"];
        ECMDTMCFG4_ECMDTMCFG411         = (*ECMDTMCFG4 )["ECMDTMCFG411"];
        ECMDTMCFG4_ECMDTMCFG410         = (*ECMDTMCFG4 )["ECMDTMCFG410"];
        ECMDTMCFG4_ECMDTMCFG409         = (*ECMDTMCFG4 )["ECMDTMCFG409"];
        ECMDTMCFG4_ECMDTMCFG408         = (*ECMDTMCFG4 )["ECMDTMCFG408"];
        ECMDTMCFG4_ECMDTMCFG407         = (*ECMDTMCFG4 )["ECMDTMCFG407"];
        ECMDTMCFG4_ECMDTMCFG406         = (*ECMDTMCFG4 )["ECMDTMCFG406"];
        ECMDTMCFG4_ECMDTMCFG405         = (*ECMDTMCFG4 )["ECMDTMCFG405"];
        ECMDTMCFG4_ECMDTMCFG404         = (*ECMDTMCFG4 )["ECMDTMCFG404"];
        ECMDTMCFG4_ECMDTMCFG403         = (*ECMDTMCFG4 )["ECMDTMCFG403"];
        ECMDTMCFG4_ECMDTMCFG402         = (*ECMDTMCFG4 )["ECMDTMCFG402"];
        ECMDTMCFG4_ECMDTMCFG401         = (*ECMDTMCFG4 )["ECMDTMCFG401"];
        ECMDTMCFG4_ECMDTMCFG400         = (*ECMDTMCFG4 )["ECMDTMCFG400"];
        return;
    }
    if (addr == 0x0174) {
        ECMDTMCFG5_ECMDTMCFG528         = (*ECMDTMCFG5 )["ECMDTMCFG528"];
        ECMDTMCFG5_ECMDTMCFG527         = (*ECMDTMCFG5 )["ECMDTMCFG527"];
        ECMDTMCFG5_ECMDTMCFG526         = (*ECMDTMCFG5 )["ECMDTMCFG526"];
        ECMDTMCFG5_ECMDTMCFG525         = (*ECMDTMCFG5 )["ECMDTMCFG525"];
        ECMDTMCFG5_ECMDTMCFG524         = (*ECMDTMCFG5 )["ECMDTMCFG524"];
        ECMDTMCFG5_ECMDTMCFG523         = (*ECMDTMCFG5 )["ECMDTMCFG523"];
        ECMDTMCFG5_ECMDTMCFG522         = (*ECMDTMCFG5 )["ECMDTMCFG522"];
        ECMDTMCFG5_ECMDTMCFG521         = (*ECMDTMCFG5 )["ECMDTMCFG521"];
        ECMDTMCFG5_ECMDTMCFG520         = (*ECMDTMCFG5 )["ECMDTMCFG520"];
        ECMDTMCFG5_ECMDTMCFG519         = (*ECMDTMCFG5 )["ECMDTMCFG519"];
        ECMDTMCFG5_ECMDTMCFG518         = (*ECMDTMCFG5 )["ECMDTMCFG518"];
        ECMDTMCFG5_ECMDTMCFG517         = (*ECMDTMCFG5 )["ECMDTMCFG517"];
        ECMDTMCFG5_ECMDTMCFG516         = (*ECMDTMCFG5 )["ECMDTMCFG516"];
        ECMDTMCFG5_ECMDTMCFG515         = (*ECMDTMCFG5 )["ECMDTMCFG515"];
        ECMDTMCFG5_ECMDTMCFG514         = (*ECMDTMCFG5 )["ECMDTMCFG514"];
        ECMDTMCFG5_ECMDTMCFG513         = (*ECMDTMCFG5 )["ECMDTMCFG513"];
        ECMDTMCFG5_ECMDTMCFG512         = (*ECMDTMCFG5 )["ECMDTMCFG512"];
        ECMDTMCFG5_ECMDTMCFG511         = (*ECMDTMCFG5 )["ECMDTMCFG511"];
        ECMDTMCFG5_ECMDTMCFG510         = (*ECMDTMCFG5 )["ECMDTMCFG510"];
        ECMDTMCFG5_ECMDTMCFG509         = (*ECMDTMCFG5 )["ECMDTMCFG509"];
        ECMDTMCFG5_ECMDTMCFG508         = (*ECMDTMCFG5 )["ECMDTMCFG508"];
        ECMDTMCFG5_ECMDTMCFG507         = (*ECMDTMCFG5 )["ECMDTMCFG507"];
        ECMDTMCFG5_ECMDTMCFG506         = (*ECMDTMCFG5 )["ECMDTMCFG506"];
        ECMDTMCFG5_ECMDTMCFG505         = (*ECMDTMCFG5 )["ECMDTMCFG505"];
        ECMDTMCFG5_ECMDTMCFG504         = (*ECMDTMCFG5 )["ECMDTMCFG504"];
        ECMDTMCFG5_ECMDTMCFG503         = (*ECMDTMCFG5 )["ECMDTMCFG503"];
        ECMDTMCFG5_ECMDTMCFG502         = (*ECMDTMCFG5 )["ECMDTMCFG502"];
        ECMDTMCFG5_ECMDTMCFG501         = (*ECMDTMCFG5 )["ECMDTMCFG501"];
        ECMDTMCFG5_ECMDTMCFG500         = (*ECMDTMCFG5 )["ECMDTMCFG500"];
        return;
    }
    if (addr == 0x0178) {
        ECMEOUTCLRT_ECMEOUTCLRT         = (*ECMEOUTCLRT)["ECMEOUTCLRT"];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cecm_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*ECMmESET   )["ECMmEST"    ] = ECMmESET_ECMmEST;
        return;
    }
    if (addr == 0x0004) {
        (*ECMmECLR   )["ECMmECT"    ] = ECMmECLR_ECMmECT;
        return;
    }
    if (addr == 0x0008) {
        (*ECMmESSTR0 )["ECMmSSE031" ] = ECMmESSTR0_ECMmSSE031;
        (*ECMmESSTR0 )["ECMmSSE030" ] = ECMmESSTR0_ECMmSSE030;
        (*ECMmESSTR0 )["ECMmSSE029" ] = ECMmESSTR0_ECMmSSE029;
        (*ECMmESSTR0 )["ECMmSSE028" ] = ECMmESSTR0_ECMmSSE028;
        (*ECMmESSTR0 )["ECMmSSE027" ] = ECMmESSTR0_ECMmSSE027;
        (*ECMmESSTR0 )["ECMmSSE026" ] = ECMmESSTR0_ECMmSSE026;
        (*ECMmESSTR0 )["ECMmSSE025" ] = ECMmESSTR0_ECMmSSE025;
        (*ECMmESSTR0 )["ECMmSSE024" ] = ECMmESSTR0_ECMmSSE024;
        (*ECMmESSTR0 )["ECMmSSE023" ] = ECMmESSTR0_ECMmSSE023;
        (*ECMmESSTR0 )["ECMmSSE022" ] = ECMmESSTR0_ECMmSSE022;
        (*ECMmESSTR0 )["ECMmSSE021" ] = ECMmESSTR0_ECMmSSE021;
        (*ECMmESSTR0 )["ECMmSSE020" ] = ECMmESSTR0_ECMmSSE020;
        (*ECMmESSTR0 )["ECMmSSE019" ] = ECMmESSTR0_ECMmSSE019;
        (*ECMmESSTR0 )["ECMmSSE018" ] = ECMmESSTR0_ECMmSSE018;
        (*ECMmESSTR0 )["ECMmSSE017" ] = ECMmESSTR0_ECMmSSE017;
        (*ECMmESSTR0 )["ECMmSSE016" ] = ECMmESSTR0_ECMmSSE016;
        (*ECMmESSTR0 )["ECMmSSE015" ] = ECMmESSTR0_ECMmSSE015;
        (*ECMmESSTR0 )["ECMmSSE014" ] = ECMmESSTR0_ECMmSSE014;
        (*ECMmESSTR0 )["ECMmSSE013" ] = ECMmESSTR0_ECMmSSE013;
        (*ECMmESSTR0 )["ECMmSSE012" ] = ECMmESSTR0_ECMmSSE012;
        (*ECMmESSTR0 )["ECMmSSE011" ] = ECMmESSTR0_ECMmSSE011;
        (*ECMmESSTR0 )["ECMmSSE010" ] = ECMmESSTR0_ECMmSSE010;
        (*ECMmESSTR0 )["ECMmSSE009" ] = ECMmESSTR0_ECMmSSE009;
        (*ECMmESSTR0 )["ECMmSSE008" ] = ECMmESSTR0_ECMmSSE008;
        (*ECMmESSTR0 )["ECMmSSE007" ] = ECMmESSTR0_ECMmSSE007;
        (*ECMmESSTR0 )["ECMmSSE006" ] = ECMmESSTR0_ECMmSSE006;
        (*ECMmESSTR0 )["ECMmSSE005" ] = ECMmESSTR0_ECMmSSE005;
        (*ECMmESSTR0 )["ECMmSSE004" ] = ECMmESSTR0_ECMmSSE004;
        (*ECMmESSTR0 )["ECMmSSE003" ] = ECMmESSTR0_ECMmSSE003;
        (*ECMmESSTR0 )["ECMmSSE002" ] = ECMmESSTR0_ECMmSSE002;
        (*ECMmESSTR0 )["ECMmSSE001" ] = ECMmESSTR0_ECMmSSE001;
        (*ECMmESSTR0 )["ECMmSSE000" ] = ECMmESSTR0_ECMmSSE000;
        return;
    }
    if (addr == 0x000C) {
        (*ECMmESSTR1 )["ECMmSSE131" ] = ECMmESSTR1_ECMmSSE131;
        (*ECMmESSTR1 )["ECMmSSE130" ] = ECMmESSTR1_ECMmSSE130;
        (*ECMmESSTR1 )["ECMmSSE129" ] = ECMmESSTR1_ECMmSSE129;
        (*ECMmESSTR1 )["ECMmSSE128" ] = ECMmESSTR1_ECMmSSE128;
        (*ECMmESSTR1 )["ECMmSSE127" ] = ECMmESSTR1_ECMmSSE127;
        (*ECMmESSTR1 )["ECMmSSE126" ] = ECMmESSTR1_ECMmSSE126;
        (*ECMmESSTR1 )["ECMmSSE125" ] = ECMmESSTR1_ECMmSSE125;
        (*ECMmESSTR1 )["ECMmSSE124" ] = ECMmESSTR1_ECMmSSE124;
        (*ECMmESSTR1 )["ECMmSSE123" ] = ECMmESSTR1_ECMmSSE123;
        (*ECMmESSTR1 )["ECMmSSE122" ] = ECMmESSTR1_ECMmSSE122;
        (*ECMmESSTR1 )["ECMmSSE121" ] = ECMmESSTR1_ECMmSSE121;
        (*ECMmESSTR1 )["ECMmSSE120" ] = ECMmESSTR1_ECMmSSE120;
        (*ECMmESSTR1 )["ECMmSSE119" ] = ECMmESSTR1_ECMmSSE119;
        (*ECMmESSTR1 )["ECMmSSE118" ] = ECMmESSTR1_ECMmSSE118;
        (*ECMmESSTR1 )["ECMmSSE117" ] = ECMmESSTR1_ECMmSSE117;
        (*ECMmESSTR1 )["ECMmSSE116" ] = ECMmESSTR1_ECMmSSE116;
        (*ECMmESSTR1 )["ECMmSSE115" ] = ECMmESSTR1_ECMmSSE115;
        (*ECMmESSTR1 )["ECMmSSE114" ] = ECMmESSTR1_ECMmSSE114;
        (*ECMmESSTR1 )["ECMmSSE113" ] = ECMmESSTR1_ECMmSSE113;
        (*ECMmESSTR1 )["ECMmSSE112" ] = ECMmESSTR1_ECMmSSE112;
        (*ECMmESSTR1 )["ECMmSSE111" ] = ECMmESSTR1_ECMmSSE111;
        (*ECMmESSTR1 )["ECMmSSE110" ] = ECMmESSTR1_ECMmSSE110;
        (*ECMmESSTR1 )["ECMmSSE109" ] = ECMmESSTR1_ECMmSSE109;
        (*ECMmESSTR1 )["ECMmSSE108" ] = ECMmESSTR1_ECMmSSE108;
        (*ECMmESSTR1 )["ECMmSSE107" ] = ECMmESSTR1_ECMmSSE107;
        (*ECMmESSTR1 )["ECMmSSE106" ] = ECMmESSTR1_ECMmSSE106;
        (*ECMmESSTR1 )["ECMmSSE105" ] = ECMmESSTR1_ECMmSSE105;
        (*ECMmESSTR1 )["ECMmSSE104" ] = ECMmESSTR1_ECMmSSE104;
        (*ECMmESSTR1 )["ECMmSSE103" ] = ECMmESSTR1_ECMmSSE103;
        (*ECMmESSTR1 )["ECMmSSE102" ] = ECMmESSTR1_ECMmSSE102;
        (*ECMmESSTR1 )["ECMmSSE101" ] = ECMmESSTR1_ECMmSSE101;
        (*ECMmESSTR1 )["ECMmSSE100" ] = ECMmESSTR1_ECMmSSE100;
        return;
    }
    if (addr == 0x0010) {
        (*ECMmESSTR2 )["ECMmSSE231" ] = ECMmESSTR2_ECMmSSE231;
        (*ECMmESSTR2 )["ECMmSSE230" ] = ECMmESSTR2_ECMmSSE230;
        (*ECMmESSTR2 )["ECMmSSE229" ] = ECMmESSTR2_ECMmSSE229;
        (*ECMmESSTR2 )["ECMmSSE228" ] = ECMmESSTR2_ECMmSSE228;
        (*ECMmESSTR2 )["ECMmSSE227" ] = ECMmESSTR2_ECMmSSE227;
        (*ECMmESSTR2 )["ECMmSSE226" ] = ECMmESSTR2_ECMmSSE226;
        (*ECMmESSTR2 )["ECMmSSE225" ] = ECMmESSTR2_ECMmSSE225;
        (*ECMmESSTR2 )["ECMmSSE224" ] = ECMmESSTR2_ECMmSSE224;
        (*ECMmESSTR2 )["ECMmSSE223" ] = ECMmESSTR2_ECMmSSE223;
        (*ECMmESSTR2 )["ECMmSSE222" ] = ECMmESSTR2_ECMmSSE222;
        (*ECMmESSTR2 )["ECMmSSE221" ] = ECMmESSTR2_ECMmSSE221;
        (*ECMmESSTR2 )["ECMmSSE220" ] = ECMmESSTR2_ECMmSSE220;
        (*ECMmESSTR2 )["ECMmSSE219" ] = ECMmESSTR2_ECMmSSE219;
        (*ECMmESSTR2 )["ECMmSSE218" ] = ECMmESSTR2_ECMmSSE218;
        (*ECMmESSTR2 )["ECMmSSE217" ] = ECMmESSTR2_ECMmSSE217;
        (*ECMmESSTR2 )["ECMmSSE216" ] = ECMmESSTR2_ECMmSSE216;
        (*ECMmESSTR2 )["ECMmSSE215" ] = ECMmESSTR2_ECMmSSE215;
        (*ECMmESSTR2 )["ECMmSSE214" ] = ECMmESSTR2_ECMmSSE214;
        (*ECMmESSTR2 )["ECMmSSE213" ] = ECMmESSTR2_ECMmSSE213;
        (*ECMmESSTR2 )["ECMmSSE212" ] = ECMmESSTR2_ECMmSSE212;
        (*ECMmESSTR2 )["ECMmSSE211" ] = ECMmESSTR2_ECMmSSE211;
        (*ECMmESSTR2 )["ECMmSSE210" ] = ECMmESSTR2_ECMmSSE210;
        (*ECMmESSTR2 )["ECMmSSE209" ] = ECMmESSTR2_ECMmSSE209;
        (*ECMmESSTR2 )["ECMmSSE208" ] = ECMmESSTR2_ECMmSSE208;
        (*ECMmESSTR2 )["ECMmSSE207" ] = ECMmESSTR2_ECMmSSE207;
        (*ECMmESSTR2 )["ECMmSSE206" ] = ECMmESSTR2_ECMmSSE206;
        (*ECMmESSTR2 )["ECMmSSE205" ] = ECMmESSTR2_ECMmSSE205;
        (*ECMmESSTR2 )["ECMmSSE204" ] = ECMmESSTR2_ECMmSSE204;
        (*ECMmESSTR2 )["ECMmSSE203" ] = ECMmESSTR2_ECMmSSE203;
        (*ECMmESSTR2 )["ECMmSSE202" ] = ECMmESSTR2_ECMmSSE202;
        (*ECMmESSTR2 )["ECMmSSE201" ] = ECMmESSTR2_ECMmSSE201;
        (*ECMmESSTR2 )["ECMmSSE200" ] = ECMmESSTR2_ECMmSSE200;
        return;
    }
    if (addr == 0x0014) {
        (*ECMmPCMD0  )["ECMm0REG"   ] = ECMmPCMD0_ECMm0REG;
        return;
    }
    if (addr == 0x0100) {
        (*ECMEPCFG   )["ECMSL0"     ] = ECMEPCFG_ECMSL0;
        return;
    }
    if (addr == 0x0104) {
        (*ECMMICFG0  )["ECMMIE031"  ] = ECMMICFG0_ECMMIE031;
        (*ECMMICFG0  )["ECMMIE030"  ] = ECMMICFG0_ECMMIE030;
        (*ECMMICFG0  )["ECMMIE029"  ] = ECMMICFG0_ECMMIE029;
        (*ECMMICFG0  )["ECMMIE028"  ] = ECMMICFG0_ECMMIE028;
        (*ECMMICFG0  )["ECMMIE027"  ] = ECMMICFG0_ECMMIE027;
        (*ECMMICFG0  )["ECMMIE026"  ] = ECMMICFG0_ECMMIE026;
        (*ECMMICFG0  )["ECMMIE025"  ] = ECMMICFG0_ECMMIE025;
        (*ECMMICFG0  )["ECMMIE024"  ] = ECMMICFG0_ECMMIE024;
        (*ECMMICFG0  )["ECMMIE023"  ] = ECMMICFG0_ECMMIE023;
        (*ECMMICFG0  )["ECMMIE022"  ] = ECMMICFG0_ECMMIE022;
        (*ECMMICFG0  )["ECMMIE021"  ] = ECMMICFG0_ECMMIE021;
        (*ECMMICFG0  )["ECMMIE020"  ] = ECMMICFG0_ECMMIE020;
        (*ECMMICFG0  )["ECMMIE019"  ] = ECMMICFG0_ECMMIE019;
        (*ECMMICFG0  )["ECMMIE018"  ] = ECMMICFG0_ECMMIE018;
        (*ECMMICFG0  )["ECMMIE017"  ] = ECMMICFG0_ECMMIE017;
        (*ECMMICFG0  )["ECMMIE016"  ] = ECMMICFG0_ECMMIE016;
        (*ECMMICFG0  )["ECMMIE015"  ] = ECMMICFG0_ECMMIE015;
        (*ECMMICFG0  )["ECMMIE014"  ] = ECMMICFG0_ECMMIE014;
        (*ECMMICFG0  )["ECMMIE013"  ] = ECMMICFG0_ECMMIE013;
        (*ECMMICFG0  )["ECMMIE012"  ] = ECMMICFG0_ECMMIE012;
        (*ECMMICFG0  )["ECMMIE011"  ] = ECMMICFG0_ECMMIE011;
        (*ECMMICFG0  )["ECMMIE010"  ] = ECMMICFG0_ECMMIE010;
        (*ECMMICFG0  )["ECMMIE009"  ] = ECMMICFG0_ECMMIE009;
        (*ECMMICFG0  )["ECMMIE008"  ] = ECMMICFG0_ECMMIE008;
        (*ECMMICFG0  )["ECMMIE007"  ] = ECMMICFG0_ECMMIE007;
        (*ECMMICFG0  )["ECMMIE006"  ] = ECMMICFG0_ECMMIE006;
        (*ECMMICFG0  )["ECMMIE005"  ] = ECMMICFG0_ECMMIE005;
        (*ECMMICFG0  )["ECMMIE004"  ] = ECMMICFG0_ECMMIE004;
        (*ECMMICFG0  )["ECMMIE003"  ] = ECMMICFG0_ECMMIE003;
        (*ECMMICFG0  )["ECMMIE002"  ] = ECMMICFG0_ECMMIE002;
        (*ECMMICFG0  )["ECMMIE001"  ] = ECMMICFG0_ECMMIE001;
        (*ECMMICFG0  )["ECMMIE000"  ] = ECMMICFG0_ECMMIE000;
        return;
    }
    if (addr == 0x0108) {
        (*ECMMICFG1  )["ECMMIE131"  ] = ECMMICFG1_ECMMIE131;
        (*ECMMICFG1  )["ECMMIE130"  ] = ECMMICFG1_ECMMIE130;
        (*ECMMICFG1  )["ECMMIE129"  ] = ECMMICFG1_ECMMIE129;
        (*ECMMICFG1  )["ECMMIE128"  ] = ECMMICFG1_ECMMIE128;
        (*ECMMICFG1  )["ECMMIE127"  ] = ECMMICFG1_ECMMIE127;
        (*ECMMICFG1  )["ECMMIE126"  ] = ECMMICFG1_ECMMIE126;
        (*ECMMICFG1  )["ECMMIE125"  ] = ECMMICFG1_ECMMIE125;
        (*ECMMICFG1  )["ECMMIE124"  ] = ECMMICFG1_ECMMIE124;
        (*ECMMICFG1  )["ECMMIE123"  ] = ECMMICFG1_ECMMIE123;
        (*ECMMICFG1  )["ECMMIE122"  ] = ECMMICFG1_ECMMIE122;
        (*ECMMICFG1  )["ECMMIE121"  ] = ECMMICFG1_ECMMIE121;
        (*ECMMICFG1  )["ECMMIE120"  ] = ECMMICFG1_ECMMIE120;
        (*ECMMICFG1  )["ECMMIE119"  ] = ECMMICFG1_ECMMIE119;
        (*ECMMICFG1  )["ECMMIE118"  ] = ECMMICFG1_ECMMIE118;
        (*ECMMICFG1  )["ECMMIE117"  ] = ECMMICFG1_ECMMIE117;
        (*ECMMICFG1  )["ECMMIE116"  ] = ECMMICFG1_ECMMIE116;
        (*ECMMICFG1  )["ECMMIE115"  ] = ECMMICFG1_ECMMIE115;
        (*ECMMICFG1  )["ECMMIE114"  ] = ECMMICFG1_ECMMIE114;
        (*ECMMICFG1  )["ECMMIE113"  ] = ECMMICFG1_ECMMIE113;
        (*ECMMICFG1  )["ECMMIE112"  ] = ECMMICFG1_ECMMIE112;
        (*ECMMICFG1  )["ECMMIE111"  ] = ECMMICFG1_ECMMIE111;
        (*ECMMICFG1  )["ECMMIE110"  ] = ECMMICFG1_ECMMIE110;
        (*ECMMICFG1  )["ECMMIE109"  ] = ECMMICFG1_ECMMIE109;
        (*ECMMICFG1  )["ECMMIE108"  ] = ECMMICFG1_ECMMIE108;
        (*ECMMICFG1  )["ECMMIE107"  ] = ECMMICFG1_ECMMIE107;
        (*ECMMICFG1  )["ECMMIE106"  ] = ECMMICFG1_ECMMIE106;
        (*ECMMICFG1  )["ECMMIE105"  ] = ECMMICFG1_ECMMIE105;
        (*ECMMICFG1  )["ECMMIE104"  ] = ECMMICFG1_ECMMIE104;
        (*ECMMICFG1  )["ECMMIE103"  ] = ECMMICFG1_ECMMIE103;
        (*ECMMICFG1  )["ECMMIE102"  ] = ECMMICFG1_ECMMIE102;
        (*ECMMICFG1  )["ECMMIE101"  ] = ECMMICFG1_ECMMIE101;
        (*ECMMICFG1  )["ECMMIE100"  ] = ECMMICFG1_ECMMIE100;
        return;
    }
    if (addr == 0x010C) {
        (*ECMMICFG2  )["ECMMIE228"  ] = ECMMICFG2_ECMMIE228;
        (*ECMMICFG2  )["ECMMIE227"  ] = ECMMICFG2_ECMMIE227;
        (*ECMMICFG2  )["ECMMIE226"  ] = ECMMICFG2_ECMMIE226;
        (*ECMMICFG2  )["ECMMIE225"  ] = ECMMICFG2_ECMMIE225;
        (*ECMMICFG2  )["ECMMIE224"  ] = ECMMICFG2_ECMMIE224;
        (*ECMMICFG2  )["ECMMIE223"  ] = ECMMICFG2_ECMMIE223;
        (*ECMMICFG2  )["ECMMIE222"  ] = ECMMICFG2_ECMMIE222;
        (*ECMMICFG2  )["ECMMIE221"  ] = ECMMICFG2_ECMMIE221;
        (*ECMMICFG2  )["ECMMIE220"  ] = ECMMICFG2_ECMMIE220;
        (*ECMMICFG2  )["ECMMIE219"  ] = ECMMICFG2_ECMMIE219;
        (*ECMMICFG2  )["ECMMIE218"  ] = ECMMICFG2_ECMMIE218;
        (*ECMMICFG2  )["ECMMIE217"  ] = ECMMICFG2_ECMMIE217;
        (*ECMMICFG2  )["ECMMIE216"  ] = ECMMICFG2_ECMMIE216;
        (*ECMMICFG2  )["ECMMIE215"  ] = ECMMICFG2_ECMMIE215;
        (*ECMMICFG2  )["ECMMIE214"  ] = ECMMICFG2_ECMMIE214;
        (*ECMMICFG2  )["ECMMIE213"  ] = ECMMICFG2_ECMMIE213;
        (*ECMMICFG2  )["ECMMIE212"  ] = ECMMICFG2_ECMMIE212;
        (*ECMMICFG2  )["ECMMIE211"  ] = ECMMICFG2_ECMMIE211;
        (*ECMMICFG2  )["ECMMIE210"  ] = ECMMICFG2_ECMMIE210;
        (*ECMMICFG2  )["ECMMIE209"  ] = ECMMICFG2_ECMMIE209;
        (*ECMMICFG2  )["ECMMIE208"  ] = ECMMICFG2_ECMMIE208;
        (*ECMMICFG2  )["ECMMIE207"  ] = ECMMICFG2_ECMMIE207;
        (*ECMMICFG2  )["ECMMIE206"  ] = ECMMICFG2_ECMMIE206;
        (*ECMMICFG2  )["ECMMIE205"  ] = ECMMICFG2_ECMMIE205;
        (*ECMMICFG2  )["ECMMIE204"  ] = ECMMICFG2_ECMMIE204;
        (*ECMMICFG2  )["ECMMIE203"  ] = ECMMICFG2_ECMMIE203;
        (*ECMMICFG2  )["ECMMIE202"  ] = ECMMICFG2_ECMMIE202;
        (*ECMMICFG2  )["ECMMIE201"  ] = ECMMICFG2_ECMMIE201;
        (*ECMMICFG2  )["ECMMIE200"  ] = ECMMICFG2_ECMMIE200;
        return;
    }
    if (addr == 0x0110) {
        (*ECMNMICFG0 )["ECMNMIE031" ] = ECMNMICFG0_ECMNMIE031;
        (*ECMNMICFG0 )["ECMNMIE030" ] = ECMNMICFG0_ECMNMIE030;
        (*ECMNMICFG0 )["ECMNMIE029" ] = ECMNMICFG0_ECMNMIE029;
        (*ECMNMICFG0 )["ECMNMIE028" ] = ECMNMICFG0_ECMNMIE028;
        (*ECMNMICFG0 )["ECMNMIE027" ] = ECMNMICFG0_ECMNMIE027;
        (*ECMNMICFG0 )["ECMNMIE026" ] = ECMNMICFG0_ECMNMIE026;
        (*ECMNMICFG0 )["ECMNMIE025" ] = ECMNMICFG0_ECMNMIE025;
        (*ECMNMICFG0 )["ECMNMIE024" ] = ECMNMICFG0_ECMNMIE024;
        (*ECMNMICFG0 )["ECMNMIE023" ] = ECMNMICFG0_ECMNMIE023;
        (*ECMNMICFG0 )["ECMNMIE022" ] = ECMNMICFG0_ECMNMIE022;
        (*ECMNMICFG0 )["ECMNMIE021" ] = ECMNMICFG0_ECMNMIE021;
        (*ECMNMICFG0 )["ECMNMIE020" ] = ECMNMICFG0_ECMNMIE020;
        (*ECMNMICFG0 )["ECMNMIE019" ] = ECMNMICFG0_ECMNMIE019;
        (*ECMNMICFG0 )["ECMNMIE018" ] = ECMNMICFG0_ECMNMIE018;
        (*ECMNMICFG0 )["ECMNMIE017" ] = ECMNMICFG0_ECMNMIE017;
        (*ECMNMICFG0 )["ECMNMIE016" ] = ECMNMICFG0_ECMNMIE016;
        (*ECMNMICFG0 )["ECMNMIE015" ] = ECMNMICFG0_ECMNMIE015;
        (*ECMNMICFG0 )["ECMNMIE014" ] = ECMNMICFG0_ECMNMIE014;
        (*ECMNMICFG0 )["ECMNMIE013" ] = ECMNMICFG0_ECMNMIE013;
        (*ECMNMICFG0 )["ECMNMIE012" ] = ECMNMICFG0_ECMNMIE012;
        (*ECMNMICFG0 )["ECMNMIE011" ] = ECMNMICFG0_ECMNMIE011;
        (*ECMNMICFG0 )["ECMNMIE010" ] = ECMNMICFG0_ECMNMIE010;
        (*ECMNMICFG0 )["ECMNMIE009" ] = ECMNMICFG0_ECMNMIE009;
        (*ECMNMICFG0 )["ECMNMIE008" ] = ECMNMICFG0_ECMNMIE008;
        (*ECMNMICFG0 )["ECMNMIE007" ] = ECMNMICFG0_ECMNMIE007;
        (*ECMNMICFG0 )["ECMNMIE006" ] = ECMNMICFG0_ECMNMIE006;
        (*ECMNMICFG0 )["ECMNMIE005" ] = ECMNMICFG0_ECMNMIE005;
        (*ECMNMICFG0 )["ECMNMIE004" ] = ECMNMICFG0_ECMNMIE004;
        (*ECMNMICFG0 )["ECMNMIE003" ] = ECMNMICFG0_ECMNMIE003;
        (*ECMNMICFG0 )["ECMNMIE002" ] = ECMNMICFG0_ECMNMIE002;
        (*ECMNMICFG0 )["ECMNMIE001" ] = ECMNMICFG0_ECMNMIE001;
        (*ECMNMICFG0 )["ECMNMIE000" ] = ECMNMICFG0_ECMNMIE000;
        return;
    }
    if (addr == 0x0114) {
        (*ECMNMICFG1 )["ECMNMIE131" ] = ECMNMICFG1_ECMNMIE131;
        (*ECMNMICFG1 )["ECMNMIE130" ] = ECMNMICFG1_ECMNMIE130;
        (*ECMNMICFG1 )["ECMNMIE129" ] = ECMNMICFG1_ECMNMIE129;
        (*ECMNMICFG1 )["ECMNMIE128" ] = ECMNMICFG1_ECMNMIE128;
        (*ECMNMICFG1 )["ECMNMIE127" ] = ECMNMICFG1_ECMNMIE127;
        (*ECMNMICFG1 )["ECMNMIE126" ] = ECMNMICFG1_ECMNMIE126;
        (*ECMNMICFG1 )["ECMNMIE125" ] = ECMNMICFG1_ECMNMIE125;
        (*ECMNMICFG1 )["ECMNMIE124" ] = ECMNMICFG1_ECMNMIE124;
        (*ECMNMICFG1 )["ECMNMIE123" ] = ECMNMICFG1_ECMNMIE123;
        (*ECMNMICFG1 )["ECMNMIE122" ] = ECMNMICFG1_ECMNMIE122;
        (*ECMNMICFG1 )["ECMNMIE121" ] = ECMNMICFG1_ECMNMIE121;
        (*ECMNMICFG1 )["ECMNMIE120" ] = ECMNMICFG1_ECMNMIE120;
        (*ECMNMICFG1 )["ECMNMIE119" ] = ECMNMICFG1_ECMNMIE119;
        (*ECMNMICFG1 )["ECMNMIE118" ] = ECMNMICFG1_ECMNMIE118;
        (*ECMNMICFG1 )["ECMNMIE117" ] = ECMNMICFG1_ECMNMIE117;
        (*ECMNMICFG1 )["ECMNMIE116" ] = ECMNMICFG1_ECMNMIE116;
        (*ECMNMICFG1 )["ECMNMIE115" ] = ECMNMICFG1_ECMNMIE115;
        (*ECMNMICFG1 )["ECMNMIE114" ] = ECMNMICFG1_ECMNMIE114;
        (*ECMNMICFG1 )["ECMNMIE113" ] = ECMNMICFG1_ECMNMIE113;
        (*ECMNMICFG1 )["ECMNMIE112" ] = ECMNMICFG1_ECMNMIE112;
        (*ECMNMICFG1 )["ECMNMIE111" ] = ECMNMICFG1_ECMNMIE111;
        (*ECMNMICFG1 )["ECMNMIE110" ] = ECMNMICFG1_ECMNMIE110;
        (*ECMNMICFG1 )["ECMNMIE109" ] = ECMNMICFG1_ECMNMIE109;
        (*ECMNMICFG1 )["ECMNMIE108" ] = ECMNMICFG1_ECMNMIE108;
        (*ECMNMICFG1 )["ECMNMIE107" ] = ECMNMICFG1_ECMNMIE107;
        (*ECMNMICFG1 )["ECMNMIE106" ] = ECMNMICFG1_ECMNMIE106;
        (*ECMNMICFG1 )["ECMNMIE105" ] = ECMNMICFG1_ECMNMIE105;
        (*ECMNMICFG1 )["ECMNMIE104" ] = ECMNMICFG1_ECMNMIE104;
        (*ECMNMICFG1 )["ECMNMIE103" ] = ECMNMICFG1_ECMNMIE103;
        (*ECMNMICFG1 )["ECMNMIE102" ] = ECMNMICFG1_ECMNMIE102;
        (*ECMNMICFG1 )["ECMNMIE101" ] = ECMNMICFG1_ECMNMIE101;
        (*ECMNMICFG1 )["ECMNMIE100" ] = ECMNMICFG1_ECMNMIE100;
        return;
    }
    if (addr == 0x0118) {
        (*ECMNMICFG2 )["ECMNMIE228" ] = ECMNMICFG2_ECMNMIE228;
        (*ECMNMICFG2 )["ECMNMIE227" ] = ECMNMICFG2_ECMNMIE227;
        (*ECMNMICFG2 )["ECMNMIE226" ] = ECMNMICFG2_ECMNMIE226;
        (*ECMNMICFG2 )["ECMNMIE225" ] = ECMNMICFG2_ECMNMIE225;
        (*ECMNMICFG2 )["ECMNMIE224" ] = ECMNMICFG2_ECMNMIE224;
        (*ECMNMICFG2 )["ECMNMIE223" ] = ECMNMICFG2_ECMNMIE223;
        (*ECMNMICFG2 )["ECMNMIE222" ] = ECMNMICFG2_ECMNMIE222;
        (*ECMNMICFG2 )["ECMNMIE221" ] = ECMNMICFG2_ECMNMIE221;
        (*ECMNMICFG2 )["ECMNMIE220" ] = ECMNMICFG2_ECMNMIE220;
        (*ECMNMICFG2 )["ECMNMIE219" ] = ECMNMICFG2_ECMNMIE219;
        (*ECMNMICFG2 )["ECMNMIE218" ] = ECMNMICFG2_ECMNMIE218;
        (*ECMNMICFG2 )["ECMNMIE217" ] = ECMNMICFG2_ECMNMIE217;
        (*ECMNMICFG2 )["ECMNMIE216" ] = ECMNMICFG2_ECMNMIE216;
        (*ECMNMICFG2 )["ECMNMIE215" ] = ECMNMICFG2_ECMNMIE215;
        (*ECMNMICFG2 )["ECMNMIE214" ] = ECMNMICFG2_ECMNMIE214;
        (*ECMNMICFG2 )["ECMNMIE213" ] = ECMNMICFG2_ECMNMIE213;
        (*ECMNMICFG2 )["ECMNMIE212" ] = ECMNMICFG2_ECMNMIE212;
        (*ECMNMICFG2 )["ECMNMIE211" ] = ECMNMICFG2_ECMNMIE211;
        (*ECMNMICFG2 )["ECMNMIE210" ] = ECMNMICFG2_ECMNMIE210;
        (*ECMNMICFG2 )["ECMNMIE209" ] = ECMNMICFG2_ECMNMIE209;
        (*ECMNMICFG2 )["ECMNMIE208" ] = ECMNMICFG2_ECMNMIE208;
        (*ECMNMICFG2 )["ECMNMIE207" ] = ECMNMICFG2_ECMNMIE207;
        (*ECMNMICFG2 )["ECMNMIE206" ] = ECMNMICFG2_ECMNMIE206;
        (*ECMNMICFG2 )["ECMNMIE205" ] = ECMNMICFG2_ECMNMIE205;
        (*ECMNMICFG2 )["ECMNMIE204" ] = ECMNMICFG2_ECMNMIE204;
        (*ECMNMICFG2 )["ECMNMIE203" ] = ECMNMICFG2_ECMNMIE203;
        (*ECMNMICFG2 )["ECMNMIE202" ] = ECMNMICFG2_ECMNMIE202;
        (*ECMNMICFG2 )["ECMNMIE201" ] = ECMNMICFG2_ECMNMIE201;
        (*ECMNMICFG2 )["ECMNMIE200" ] = ECMNMICFG2_ECMNMIE200;
        return;
    }
    if (addr == 0x011C) {
        (*ECMIRCFG0  )["ECMIRE031"  ] = ECMIRCFG0_ECMIRE031;
        (*ECMIRCFG0  )["ECMIRE030"  ] = ECMIRCFG0_ECMIRE030;
        (*ECMIRCFG0  )["ECMIRE029"  ] = ECMIRCFG0_ECMIRE029;
        (*ECMIRCFG0  )["ECMIRE028"  ] = ECMIRCFG0_ECMIRE028;
        (*ECMIRCFG0  )["ECMIRE027"  ] = ECMIRCFG0_ECMIRE027;
        (*ECMIRCFG0  )["ECMIRE026"  ] = ECMIRCFG0_ECMIRE026;
        (*ECMIRCFG0  )["ECMIRE025"  ] = ECMIRCFG0_ECMIRE025;
        (*ECMIRCFG0  )["ECMIRE024"  ] = ECMIRCFG0_ECMIRE024;
        (*ECMIRCFG0  )["ECMIRE023"  ] = ECMIRCFG0_ECMIRE023;
        (*ECMIRCFG0  )["ECMIRE022"  ] = ECMIRCFG0_ECMIRE022;
        (*ECMIRCFG0  )["ECMIRE021"  ] = ECMIRCFG0_ECMIRE021;
        (*ECMIRCFG0  )["ECMIRE020"  ] = ECMIRCFG0_ECMIRE020;
        (*ECMIRCFG0  )["ECMIRE019"  ] = ECMIRCFG0_ECMIRE019;
        (*ECMIRCFG0  )["ECMIRE018"  ] = ECMIRCFG0_ECMIRE018;
        (*ECMIRCFG0  )["ECMIRE017"  ] = ECMIRCFG0_ECMIRE017;
        (*ECMIRCFG0  )["ECMIRE016"  ] = ECMIRCFG0_ECMIRE016;
        (*ECMIRCFG0  )["ECMIRE015"  ] = ECMIRCFG0_ECMIRE015;
        (*ECMIRCFG0  )["ECMIRE014"  ] = ECMIRCFG0_ECMIRE014;
        (*ECMIRCFG0  )["ECMIRE013"  ] = ECMIRCFG0_ECMIRE013;
        (*ECMIRCFG0  )["ECMIRE012"  ] = ECMIRCFG0_ECMIRE012;
        (*ECMIRCFG0  )["ECMIRE011"  ] = ECMIRCFG0_ECMIRE011;
        (*ECMIRCFG0  )["ECMIRE010"  ] = ECMIRCFG0_ECMIRE010;
        (*ECMIRCFG0  )["ECMIRE009"  ] = ECMIRCFG0_ECMIRE009;
        (*ECMIRCFG0  )["ECMIRE008"  ] = ECMIRCFG0_ECMIRE008;
        (*ECMIRCFG0  )["ECMIRE007"  ] = ECMIRCFG0_ECMIRE007;
        (*ECMIRCFG0  )["ECMIRE006"  ] = ECMIRCFG0_ECMIRE006;
        (*ECMIRCFG0  )["ECMIRE005"  ] = ECMIRCFG0_ECMIRE005;
        (*ECMIRCFG0  )["ECMIRE004"  ] = ECMIRCFG0_ECMIRE004;
        (*ECMIRCFG0  )["ECMIRE003"  ] = ECMIRCFG0_ECMIRE003;
        (*ECMIRCFG0  )["ECMIRE002"  ] = ECMIRCFG0_ECMIRE002;
        (*ECMIRCFG0  )["ECMIRE001"  ] = ECMIRCFG0_ECMIRE001;
        (*ECMIRCFG0  )["ECMIRE000"  ] = ECMIRCFG0_ECMIRE000;
        return;
    }
    if (addr == 0x0120) {
        (*ECMIRCFG1  )["ECMIRE131"  ] = ECMIRCFG1_ECMIRE131;
        (*ECMIRCFG1  )["ECMIRE130"  ] = ECMIRCFG1_ECMIRE130;
        (*ECMIRCFG1  )["ECMIRE129"  ] = ECMIRCFG1_ECMIRE129;
        (*ECMIRCFG1  )["ECMIRE128"  ] = ECMIRCFG1_ECMIRE128;
        (*ECMIRCFG1  )["ECMIRE127"  ] = ECMIRCFG1_ECMIRE127;
        (*ECMIRCFG1  )["ECMIRE126"  ] = ECMIRCFG1_ECMIRE126;
        (*ECMIRCFG1  )["ECMIRE125"  ] = ECMIRCFG1_ECMIRE125;
        (*ECMIRCFG1  )["ECMIRE124"  ] = ECMIRCFG1_ECMIRE124;
        (*ECMIRCFG1  )["ECMIRE123"  ] = ECMIRCFG1_ECMIRE123;
        (*ECMIRCFG1  )["ECMIRE122"  ] = ECMIRCFG1_ECMIRE122;
        (*ECMIRCFG1  )["ECMIRE121"  ] = ECMIRCFG1_ECMIRE121;
        (*ECMIRCFG1  )["ECMIRE120"  ] = ECMIRCFG1_ECMIRE120;
        (*ECMIRCFG1  )["ECMIRE119"  ] = ECMIRCFG1_ECMIRE119;
        (*ECMIRCFG1  )["ECMIRE118"  ] = ECMIRCFG1_ECMIRE118;
        (*ECMIRCFG1  )["ECMIRE117"  ] = ECMIRCFG1_ECMIRE117;
        (*ECMIRCFG1  )["ECMIRE116"  ] = ECMIRCFG1_ECMIRE116;
        (*ECMIRCFG1  )["ECMIRE115"  ] = ECMIRCFG1_ECMIRE115;
        (*ECMIRCFG1  )["ECMIRE114"  ] = ECMIRCFG1_ECMIRE114;
        (*ECMIRCFG1  )["ECMIRE113"  ] = ECMIRCFG1_ECMIRE113;
        (*ECMIRCFG1  )["ECMIRE112"  ] = ECMIRCFG1_ECMIRE112;
        (*ECMIRCFG1  )["ECMIRE111"  ] = ECMIRCFG1_ECMIRE111;
        (*ECMIRCFG1  )["ECMIRE110"  ] = ECMIRCFG1_ECMIRE110;
        (*ECMIRCFG1  )["ECMIRE109"  ] = ECMIRCFG1_ECMIRE109;
        (*ECMIRCFG1  )["ECMIRE108"  ] = ECMIRCFG1_ECMIRE108;
        (*ECMIRCFG1  )["ECMIRE107"  ] = ECMIRCFG1_ECMIRE107;
        (*ECMIRCFG1  )["ECMIRE106"  ] = ECMIRCFG1_ECMIRE106;
        (*ECMIRCFG1  )["ECMIRE105"  ] = ECMIRCFG1_ECMIRE105;
        (*ECMIRCFG1  )["ECMIRE104"  ] = ECMIRCFG1_ECMIRE104;
        (*ECMIRCFG1  )["ECMIRE103"  ] = ECMIRCFG1_ECMIRE103;
        (*ECMIRCFG1  )["ECMIRE102"  ] = ECMIRCFG1_ECMIRE102;
        (*ECMIRCFG1  )["ECMIRE101"  ] = ECMIRCFG1_ECMIRE101;
        (*ECMIRCFG1  )["ECMIRE100"  ] = ECMIRCFG1_ECMIRE100;
        return;
    }
    if (addr == 0x0124) {
        (*ECMIRCFG2  )["ECMIRE229"  ] = ECMIRCFG2_ECMIRE229;
        (*ECMIRCFG2  )["ECMIRE228"  ] = ECMIRCFG2_ECMIRE228;
        (*ECMIRCFG2  )["ECMIRE227"  ] = ECMIRCFG2_ECMIRE227;
        (*ECMIRCFG2  )["ECMIRE226"  ] = ECMIRCFG2_ECMIRE226;
        (*ECMIRCFG2  )["ECMIRE225"  ] = ECMIRCFG2_ECMIRE225;
        (*ECMIRCFG2  )["ECMIRE224"  ] = ECMIRCFG2_ECMIRE224;
        (*ECMIRCFG2  )["ECMIRE223"  ] = ECMIRCFG2_ECMIRE223;
        (*ECMIRCFG2  )["ECMIRE222"  ] = ECMIRCFG2_ECMIRE222;
        (*ECMIRCFG2  )["ECMIRE221"  ] = ECMIRCFG2_ECMIRE221;
        (*ECMIRCFG2  )["ECMIRE220"  ] = ECMIRCFG2_ECMIRE220;
        (*ECMIRCFG2  )["ECMIRE219"  ] = ECMIRCFG2_ECMIRE219;
        (*ECMIRCFG2  )["ECMIRE218"  ] = ECMIRCFG2_ECMIRE218;
        (*ECMIRCFG2  )["ECMIRE217"  ] = ECMIRCFG2_ECMIRE217;
        (*ECMIRCFG2  )["ECMIRE216"  ] = ECMIRCFG2_ECMIRE216;
        (*ECMIRCFG2  )["ECMIRE215"  ] = ECMIRCFG2_ECMIRE215;
        (*ECMIRCFG2  )["ECMIRE214"  ] = ECMIRCFG2_ECMIRE214;
        (*ECMIRCFG2  )["ECMIRE213"  ] = ECMIRCFG2_ECMIRE213;
        (*ECMIRCFG2  )["ECMIRE212"  ] = ECMIRCFG2_ECMIRE212;
        (*ECMIRCFG2  )["ECMIRE211"  ] = ECMIRCFG2_ECMIRE211;
        (*ECMIRCFG2  )["ECMIRE210"  ] = ECMIRCFG2_ECMIRE210;
        (*ECMIRCFG2  )["ECMIRE209"  ] = ECMIRCFG2_ECMIRE209;
        (*ECMIRCFG2  )["ECMIRE208"  ] = ECMIRCFG2_ECMIRE208;
        (*ECMIRCFG2  )["ECMIRE207"  ] = ECMIRCFG2_ECMIRE207;
        (*ECMIRCFG2  )["ECMIRE206"  ] = ECMIRCFG2_ECMIRE206;
        (*ECMIRCFG2  )["ECMIRE205"  ] = ECMIRCFG2_ECMIRE205;
        (*ECMIRCFG2  )["ECMIRE204"  ] = ECMIRCFG2_ECMIRE204;
        (*ECMIRCFG2  )["ECMIRE203"  ] = ECMIRCFG2_ECMIRE203;
        (*ECMIRCFG2  )["ECMIRE202"  ] = ECMIRCFG2_ECMIRE202;
        (*ECMIRCFG2  )["ECMIRE201"  ] = ECMIRCFG2_ECMIRE201;
        (*ECMIRCFG2  )["ECMIRE200"  ] = ECMIRCFG2_ECMIRE200;
        return;
    }
    if (addr == 0x0128) {
        (*ECMEMK0    )["ECMEMK031"  ] = ECMEMK0_ECMEMK031;
        (*ECMEMK0    )["ECMEMK030"  ] = ECMEMK0_ECMEMK030;
        (*ECMEMK0    )["ECMEMK029"  ] = ECMEMK0_ECMEMK029;
        (*ECMEMK0    )["ECMEMK028"  ] = ECMEMK0_ECMEMK028;
        (*ECMEMK0    )["ECMEMK027"  ] = ECMEMK0_ECMEMK027;
        (*ECMEMK0    )["ECMEMK026"  ] = ECMEMK0_ECMEMK026;
        (*ECMEMK0    )["ECMEMK025"  ] = ECMEMK0_ECMEMK025;
        (*ECMEMK0    )["ECMEMK024"  ] = ECMEMK0_ECMEMK024;
        (*ECMEMK0    )["ECMEMK023"  ] = ECMEMK0_ECMEMK023;
        (*ECMEMK0    )["ECMEMK022"  ] = ECMEMK0_ECMEMK022;
        (*ECMEMK0    )["ECMEMK021"  ] = ECMEMK0_ECMEMK021;
        (*ECMEMK0    )["ECMEMK020"  ] = ECMEMK0_ECMEMK020;
        (*ECMEMK0    )["ECMEMK019"  ] = ECMEMK0_ECMEMK019;
        (*ECMEMK0    )["ECMEMK018"  ] = ECMEMK0_ECMEMK018;
        (*ECMEMK0    )["ECMEMK017"  ] = ECMEMK0_ECMEMK017;
        (*ECMEMK0    )["ECMEMK016"  ] = ECMEMK0_ECMEMK016;
        (*ECMEMK0    )["ECMEMK015"  ] = ECMEMK0_ECMEMK015;
        (*ECMEMK0    )["ECMEMK014"  ] = ECMEMK0_ECMEMK014;
        (*ECMEMK0    )["ECMEMK013"  ] = ECMEMK0_ECMEMK013;
        (*ECMEMK0    )["ECMEMK012"  ] = ECMEMK0_ECMEMK012;
        (*ECMEMK0    )["ECMEMK011"  ] = ECMEMK0_ECMEMK011;
        (*ECMEMK0    )["ECMEMK010"  ] = ECMEMK0_ECMEMK010;
        (*ECMEMK0    )["ECMEMK009"  ] = ECMEMK0_ECMEMK009;
        (*ECMEMK0    )["ECMEMK008"  ] = ECMEMK0_ECMEMK008;
        (*ECMEMK0    )["ECMEMK007"  ] = ECMEMK0_ECMEMK007;
        (*ECMEMK0    )["ECMEMK006"  ] = ECMEMK0_ECMEMK006;
        (*ECMEMK0    )["ECMEMK005"  ] = ECMEMK0_ECMEMK005;
        (*ECMEMK0    )["ECMEMK004"  ] = ECMEMK0_ECMEMK004;
        (*ECMEMK0    )["ECMEMK003"  ] = ECMEMK0_ECMEMK003;
        (*ECMEMK0    )["ECMEMK002"  ] = ECMEMK0_ECMEMK002;
        (*ECMEMK0    )["ECMEMK001"  ] = ECMEMK0_ECMEMK001;
        (*ECMEMK0    )["ECMEMK000"  ] = ECMEMK0_ECMEMK000;
        return;
    }
    if (addr == 0x012C) {
        (*ECMEMK1    )["ECMEMK131"  ] = ECMEMK1_ECMEMK131;
        (*ECMEMK1    )["ECMEMK130"  ] = ECMEMK1_ECMEMK130;
        (*ECMEMK1    )["ECMEMK129"  ] = ECMEMK1_ECMEMK129;
        (*ECMEMK1    )["ECMEMK128"  ] = ECMEMK1_ECMEMK128;
        (*ECMEMK1    )["ECMEMK127"  ] = ECMEMK1_ECMEMK127;
        (*ECMEMK1    )["ECMEMK126"  ] = ECMEMK1_ECMEMK126;
        (*ECMEMK1    )["ECMEMK125"  ] = ECMEMK1_ECMEMK125;
        (*ECMEMK1    )["ECMEMK124"  ] = ECMEMK1_ECMEMK124;
        (*ECMEMK1    )["ECMEMK123"  ] = ECMEMK1_ECMEMK123;
        (*ECMEMK1    )["ECMEMK122"  ] = ECMEMK1_ECMEMK122;
        (*ECMEMK1    )["ECMEMK121"  ] = ECMEMK1_ECMEMK121;
        (*ECMEMK1    )["ECMEMK120"  ] = ECMEMK1_ECMEMK120;
        (*ECMEMK1    )["ECMEMK119"  ] = ECMEMK1_ECMEMK119;
        (*ECMEMK1    )["ECMEMK118"  ] = ECMEMK1_ECMEMK118;
        (*ECMEMK1    )["ECMEMK117"  ] = ECMEMK1_ECMEMK117;
        (*ECMEMK1    )["ECMEMK116"  ] = ECMEMK1_ECMEMK116;
        (*ECMEMK1    )["ECMEMK115"  ] = ECMEMK1_ECMEMK115;
        (*ECMEMK1    )["ECMEMK114"  ] = ECMEMK1_ECMEMK114;
        (*ECMEMK1    )["ECMEMK113"  ] = ECMEMK1_ECMEMK113;
        (*ECMEMK1    )["ECMEMK112"  ] = ECMEMK1_ECMEMK112;
        (*ECMEMK1    )["ECMEMK111"  ] = ECMEMK1_ECMEMK111;
        (*ECMEMK1    )["ECMEMK110"  ] = ECMEMK1_ECMEMK110;
        (*ECMEMK1    )["ECMEMK109"  ] = ECMEMK1_ECMEMK109;
        (*ECMEMK1    )["ECMEMK108"  ] = ECMEMK1_ECMEMK108;
        (*ECMEMK1    )["ECMEMK107"  ] = ECMEMK1_ECMEMK107;
        (*ECMEMK1    )["ECMEMK106"  ] = ECMEMK1_ECMEMK106;
        (*ECMEMK1    )["ECMEMK105"  ] = ECMEMK1_ECMEMK105;
        (*ECMEMK1    )["ECMEMK104"  ] = ECMEMK1_ECMEMK104;
        (*ECMEMK1    )["ECMEMK103"  ] = ECMEMK1_ECMEMK103;
        (*ECMEMK1    )["ECMEMK102"  ] = ECMEMK1_ECMEMK102;
        (*ECMEMK1    )["ECMEMK101"  ] = ECMEMK1_ECMEMK101;
        (*ECMEMK1    )["ECMEMK100"  ] = ECMEMK1_ECMEMK100;
        return;
    }
    if (addr == 0x0130) {
        (*ECMEMK2    )["ECMEMK229"  ] = ECMEMK2_ECMEMK229;
        (*ECMEMK2    )["ECMEMK228"  ] = ECMEMK2_ECMEMK228;
        (*ECMEMK2    )["ECMEMK227"  ] = ECMEMK2_ECMEMK227;
        (*ECMEMK2    )["ECMEMK226"  ] = ECMEMK2_ECMEMK226;
        (*ECMEMK2    )["ECMEMK225"  ] = ECMEMK2_ECMEMK225;
        (*ECMEMK2    )["ECMEMK224"  ] = ECMEMK2_ECMEMK224;
        (*ECMEMK2    )["ECMEMK223"  ] = ECMEMK2_ECMEMK223;
        (*ECMEMK2    )["ECMEMK222"  ] = ECMEMK2_ECMEMK222;
        (*ECMEMK2    )["ECMEMK221"  ] = ECMEMK2_ECMEMK221;
        (*ECMEMK2    )["ECMEMK220"  ] = ECMEMK2_ECMEMK220;
        (*ECMEMK2    )["ECMEMK219"  ] = ECMEMK2_ECMEMK219;
        (*ECMEMK2    )["ECMEMK218"  ] = ECMEMK2_ECMEMK218;
        (*ECMEMK2    )["ECMEMK217"  ] = ECMEMK2_ECMEMK217;
        (*ECMEMK2    )["ECMEMK216"  ] = ECMEMK2_ECMEMK216;
        (*ECMEMK2    )["ECMEMK215"  ] = ECMEMK2_ECMEMK215;
        (*ECMEMK2    )["ECMEMK214"  ] = ECMEMK2_ECMEMK214;
        (*ECMEMK2    )["ECMEMK213"  ] = ECMEMK2_ECMEMK213;
        (*ECMEMK2    )["ECMEMK212"  ] = ECMEMK2_ECMEMK212;
        (*ECMEMK2    )["ECMEMK211"  ] = ECMEMK2_ECMEMK211;
        (*ECMEMK2    )["ECMEMK210"  ] = ECMEMK2_ECMEMK210;
        (*ECMEMK2    )["ECMEMK209"  ] = ECMEMK2_ECMEMK209;
        (*ECMEMK2    )["ECMEMK208"  ] = ECMEMK2_ECMEMK208;
        (*ECMEMK2    )["ECMEMK207"  ] = ECMEMK2_ECMEMK207;
        (*ECMEMK2    )["ECMEMK206"  ] = ECMEMK2_ECMEMK206;
        (*ECMEMK2    )["ECMEMK205"  ] = ECMEMK2_ECMEMK205;
        (*ECMEMK2    )["ECMEMK204"  ] = ECMEMK2_ECMEMK204;
        (*ECMEMK2    )["ECMEMK203"  ] = ECMEMK2_ECMEMK203;
        (*ECMEMK2    )["ECMEMK202"  ] = ECMEMK2_ECMEMK202;
        (*ECMEMK2    )["ECMEMK201"  ] = ECMEMK2_ECMEMK201;
        (*ECMEMK2    )["ECMEMK200"  ] = ECMEMK2_ECMEMK200;
        return;
    }
    if (addr == 0x0134) {
        (*ECMESSTC0  )["ECMCLSSE031"] = ECMESSTC0_ECMCLSSE031;
        (*ECMESSTC0  )["ECMCLSSE030"] = ECMESSTC0_ECMCLSSE030;
        (*ECMESSTC0  )["ECMCLSSE029"] = ECMESSTC0_ECMCLSSE029;
        (*ECMESSTC0  )["ECMCLSSE028"] = ECMESSTC0_ECMCLSSE028;
        (*ECMESSTC0  )["ECMCLSSE027"] = ECMESSTC0_ECMCLSSE027;
        (*ECMESSTC0  )["ECMCLSSE026"] = ECMESSTC0_ECMCLSSE026;
        (*ECMESSTC0  )["ECMCLSSE025"] = ECMESSTC0_ECMCLSSE025;
        (*ECMESSTC0  )["ECMCLSSE024"] = ECMESSTC0_ECMCLSSE024;
        (*ECMESSTC0  )["ECMCLSSE023"] = ECMESSTC0_ECMCLSSE023;
        (*ECMESSTC0  )["ECMCLSSE022"] = ECMESSTC0_ECMCLSSE022;
        (*ECMESSTC0  )["ECMCLSSE021"] = ECMESSTC0_ECMCLSSE021;
        (*ECMESSTC0  )["ECMCLSSE020"] = ECMESSTC0_ECMCLSSE020;
        (*ECMESSTC0  )["ECMCLSSE019"] = ECMESSTC0_ECMCLSSE019;
        (*ECMESSTC0  )["ECMCLSSE018"] = ECMESSTC0_ECMCLSSE018;
        (*ECMESSTC0  )["ECMCLSSE017"] = ECMESSTC0_ECMCLSSE017;
        (*ECMESSTC0  )["ECMCLSSE016"] = ECMESSTC0_ECMCLSSE016;
        (*ECMESSTC0  )["ECMCLSSE015"] = ECMESSTC0_ECMCLSSE015;
        (*ECMESSTC0  )["ECMCLSSE014"] = ECMESSTC0_ECMCLSSE014;
        (*ECMESSTC0  )["ECMCLSSE013"] = ECMESSTC0_ECMCLSSE013;
        (*ECMESSTC0  )["ECMCLSSE012"] = ECMESSTC0_ECMCLSSE012;
        (*ECMESSTC0  )["ECMCLSSE011"] = ECMESSTC0_ECMCLSSE011;
        (*ECMESSTC0  )["ECMCLSSE010"] = ECMESSTC0_ECMCLSSE010;
        (*ECMESSTC0  )["ECMCLSSE009"] = ECMESSTC0_ECMCLSSE009;
        (*ECMESSTC0  )["ECMCLSSE008"] = ECMESSTC0_ECMCLSSE008;
        (*ECMESSTC0  )["ECMCLSSE007"] = ECMESSTC0_ECMCLSSE007;
        (*ECMESSTC0  )["ECMCLSSE006"] = ECMESSTC0_ECMCLSSE006;
        (*ECMESSTC0  )["ECMCLSSE005"] = ECMESSTC0_ECMCLSSE005;
        (*ECMESSTC0  )["ECMCLSSE004"] = ECMESSTC0_ECMCLSSE004;
        (*ECMESSTC0  )["ECMCLSSE003"] = ECMESSTC0_ECMCLSSE003;
        (*ECMESSTC0  )["ECMCLSSE002"] = ECMESSTC0_ECMCLSSE002;
        (*ECMESSTC0  )["ECMCLSSE001"] = ECMESSTC0_ECMCLSSE001;
        (*ECMESSTC0  )["ECMCLSSE000"] = ECMESSTC0_ECMCLSSE000;
        return;
    }
    if (addr == 0x0138) {
        (*ECMESSTC1  )["ECMCLSSE131"] = ECMESSTC1_ECMCLSSE131;
        (*ECMESSTC1  )["ECMCLSSE130"] = ECMESSTC1_ECMCLSSE130;
        (*ECMESSTC1  )["ECMCLSSE129"] = ECMESSTC1_ECMCLSSE129;
        (*ECMESSTC1  )["ECMCLSSE128"] = ECMESSTC1_ECMCLSSE128;
        (*ECMESSTC1  )["ECMCLSSE127"] = ECMESSTC1_ECMCLSSE127;
        (*ECMESSTC1  )["ECMCLSSE126"] = ECMESSTC1_ECMCLSSE126;
        (*ECMESSTC1  )["ECMCLSSE125"] = ECMESSTC1_ECMCLSSE125;
        (*ECMESSTC1  )["ECMCLSSE124"] = ECMESSTC1_ECMCLSSE124;
        (*ECMESSTC1  )["ECMCLSSE123"] = ECMESSTC1_ECMCLSSE123;
        (*ECMESSTC1  )["ECMCLSSE122"] = ECMESSTC1_ECMCLSSE122;
        (*ECMESSTC1  )["ECMCLSSE121"] = ECMESSTC1_ECMCLSSE121;
        (*ECMESSTC1  )["ECMCLSSE120"] = ECMESSTC1_ECMCLSSE120;
        (*ECMESSTC1  )["ECMCLSSE119"] = ECMESSTC1_ECMCLSSE119;
        (*ECMESSTC1  )["ECMCLSSE118"] = ECMESSTC1_ECMCLSSE118;
        (*ECMESSTC1  )["ECMCLSSE117"] = ECMESSTC1_ECMCLSSE117;
        (*ECMESSTC1  )["ECMCLSSE116"] = ECMESSTC1_ECMCLSSE116;
        (*ECMESSTC1  )["ECMCLSSE115"] = ECMESSTC1_ECMCLSSE115;
        (*ECMESSTC1  )["ECMCLSSE114"] = ECMESSTC1_ECMCLSSE114;
        (*ECMESSTC1  )["ECMCLSSE113"] = ECMESSTC1_ECMCLSSE113;
        (*ECMESSTC1  )["ECMCLSSE112"] = ECMESSTC1_ECMCLSSE112;
        (*ECMESSTC1  )["ECMCLSSE111"] = ECMESSTC1_ECMCLSSE111;
        (*ECMESSTC1  )["ECMCLSSE110"] = ECMESSTC1_ECMCLSSE110;
        (*ECMESSTC1  )["ECMCLSSE109"] = ECMESSTC1_ECMCLSSE109;
        (*ECMESSTC1  )["ECMCLSSE108"] = ECMESSTC1_ECMCLSSE108;
        (*ECMESSTC1  )["ECMCLSSE107"] = ECMESSTC1_ECMCLSSE107;
        (*ECMESSTC1  )["ECMCLSSE106"] = ECMESSTC1_ECMCLSSE106;
        (*ECMESSTC1  )["ECMCLSSE105"] = ECMESSTC1_ECMCLSSE105;
        (*ECMESSTC1  )["ECMCLSSE104"] = ECMESSTC1_ECMCLSSE104;
        (*ECMESSTC1  )["ECMCLSSE103"] = ECMESSTC1_ECMCLSSE103;
        (*ECMESSTC1  )["ECMCLSSE102"] = ECMESSTC1_ECMCLSSE102;
        (*ECMESSTC1  )["ECMCLSSE101"] = ECMESSTC1_ECMCLSSE101;
        (*ECMESSTC1  )["ECMCLSSE100"] = ECMESSTC1_ECMCLSSE100;
        return;
    }
    if (addr == 0x013C) {
        (*ECMESSTC2  )["ECMCLSSE230"] = ECMESSTC2_ECMCLSSE230;
        (*ECMESSTC2  )["ECMCLSSE229"] = ECMESSTC2_ECMCLSSE229;
        (*ECMESSTC2  )["ECMCLSSE228"] = ECMESSTC2_ECMCLSSE228;
        (*ECMESSTC2  )["ECMCLSSE227"] = ECMESSTC2_ECMCLSSE227;
        (*ECMESSTC2  )["ECMCLSSE226"] = ECMESSTC2_ECMCLSSE226;
        (*ECMESSTC2  )["ECMCLSSE225"] = ECMESSTC2_ECMCLSSE225;
        (*ECMESSTC2  )["ECMCLSSE224"] = ECMESSTC2_ECMCLSSE224;
        (*ECMESSTC2  )["ECMCLSSE223"] = ECMESSTC2_ECMCLSSE223;
        (*ECMESSTC2  )["ECMCLSSE222"] = ECMESSTC2_ECMCLSSE222;
        (*ECMESSTC2  )["ECMCLSSE221"] = ECMESSTC2_ECMCLSSE221;
        (*ECMESSTC2  )["ECMCLSSE220"] = ECMESSTC2_ECMCLSSE220;
        (*ECMESSTC2  )["ECMCLSSE219"] = ECMESSTC2_ECMCLSSE219;
        (*ECMESSTC2  )["ECMCLSSE218"] = ECMESSTC2_ECMCLSSE218;
        (*ECMESSTC2  )["ECMCLSSE217"] = ECMESSTC2_ECMCLSSE217;
        (*ECMESSTC2  )["ECMCLSSE216"] = ECMESSTC2_ECMCLSSE216;
        (*ECMESSTC2  )["ECMCLSSE215"] = ECMESSTC2_ECMCLSSE215;
        (*ECMESSTC2  )["ECMCLSSE214"] = ECMESSTC2_ECMCLSSE214;
        (*ECMESSTC2  )["ECMCLSSE213"] = ECMESSTC2_ECMCLSSE213;
        (*ECMESSTC2  )["ECMCLSSE212"] = ECMESSTC2_ECMCLSSE212;
        (*ECMESSTC2  )["ECMCLSSE211"] = ECMESSTC2_ECMCLSSE211;
        (*ECMESSTC2  )["ECMCLSSE210"] = ECMESSTC2_ECMCLSSE210;
        (*ECMESSTC2  )["ECMCLSSE209"] = ECMESSTC2_ECMCLSSE209;
        (*ECMESSTC2  )["ECMCLSSE208"] = ECMESSTC2_ECMCLSSE208;
        (*ECMESSTC2  )["ECMCLSSE207"] = ECMESSTC2_ECMCLSSE207;
        (*ECMESSTC2  )["ECMCLSSE206"] = ECMESSTC2_ECMCLSSE206;
        (*ECMESSTC2  )["ECMCLSSE205"] = ECMESSTC2_ECMCLSSE205;
        (*ECMESSTC2  )["ECMCLSSE204"] = ECMESSTC2_ECMCLSSE204;
        (*ECMESSTC2  )["ECMCLSSE203"] = ECMESSTC2_ECMCLSSE203;
        (*ECMESSTC2  )["ECMCLSSE202"] = ECMESSTC2_ECMCLSSE202;
        (*ECMESSTC2  )["ECMCLSSE201"] = ECMESSTC2_ECMCLSSE201;
        (*ECMESSTC2  )["ECMCLSSE200"] = ECMESSTC2_ECMCLSSE200;
        return;
    }
    if (addr == 0x0140) {
        (*ECMPCMD1   )["ECM1REG"    ] = ECMPCMD1_ECM1REG;
        return;
    }
    if (addr == 0x0144) {
        (*ECMPS      )["ECMPRERR"   ] = ECMPS_ECMPRERR;
        return;
    }
    if (addr == 0x0148) {
        (*ECMPE0     )["ECMPE031"   ] = ECMPE0_ECMPE031;
        (*ECMPE0     )["ECMPE030"   ] = ECMPE0_ECMPE030;
        (*ECMPE0     )["ECMPE029"   ] = ECMPE0_ECMPE029;
        (*ECMPE0     )["ECMPE028"   ] = ECMPE0_ECMPE028;
        (*ECMPE0     )["ECMPE027"   ] = ECMPE0_ECMPE027;
        (*ECMPE0     )["ECMPE026"   ] = ECMPE0_ECMPE026;
        (*ECMPE0     )["ECMPE025"   ] = ECMPE0_ECMPE025;
        (*ECMPE0     )["ECMPE024"   ] = ECMPE0_ECMPE024;
        (*ECMPE0     )["ECMPE023"   ] = ECMPE0_ECMPE023;
        (*ECMPE0     )["ECMPE022"   ] = ECMPE0_ECMPE022;
        (*ECMPE0     )["ECMPE021"   ] = ECMPE0_ECMPE021;
        (*ECMPE0     )["ECMPE020"   ] = ECMPE0_ECMPE020;
        (*ECMPE0     )["ECMPE019"   ] = ECMPE0_ECMPE019;
        (*ECMPE0     )["ECMPE018"   ] = ECMPE0_ECMPE018;
        (*ECMPE0     )["ECMPE017"   ] = ECMPE0_ECMPE017;
        (*ECMPE0     )["ECMPE016"   ] = ECMPE0_ECMPE016;
        (*ECMPE0     )["ECMPE015"   ] = ECMPE0_ECMPE015;
        (*ECMPE0     )["ECMPE014"   ] = ECMPE0_ECMPE014;
        (*ECMPE0     )["ECMPE013"   ] = ECMPE0_ECMPE013;
        (*ECMPE0     )["ECMPE012"   ] = ECMPE0_ECMPE012;
        (*ECMPE0     )["ECMPE011"   ] = ECMPE0_ECMPE011;
        (*ECMPE0     )["ECMPE010"   ] = ECMPE0_ECMPE010;
        (*ECMPE0     )["ECMPE009"   ] = ECMPE0_ECMPE009;
        (*ECMPE0     )["ECMPE008"   ] = ECMPE0_ECMPE008;
        (*ECMPE0     )["ECMPE007"   ] = ECMPE0_ECMPE007;
        (*ECMPE0     )["ECMPE006"   ] = ECMPE0_ECMPE006;
        (*ECMPE0     )["ECMPE005"   ] = ECMPE0_ECMPE005;
        (*ECMPE0     )["ECMPE004"   ] = ECMPE0_ECMPE004;
        (*ECMPE0     )["ECMPE003"   ] = ECMPE0_ECMPE003;
        (*ECMPE0     )["ECMPE002"   ] = ECMPE0_ECMPE002;
        (*ECMPE0     )["ECMPE001"   ] = ECMPE0_ECMPE001;
        (*ECMPE0     )["ECMPE000"   ] = ECMPE0_ECMPE000;
        return;
    }
    if (addr == 0x014C) {
        (*ECMPE1     )["ECMPE131"   ] = ECMPE1_ECMPE131;
        (*ECMPE1     )["ECMPE130"   ] = ECMPE1_ECMPE130;
        (*ECMPE1     )["ECMPE129"   ] = ECMPE1_ECMPE129;
        (*ECMPE1     )["ECMPE128"   ] = ECMPE1_ECMPE128;
        (*ECMPE1     )["ECMPE127"   ] = ECMPE1_ECMPE127;
        (*ECMPE1     )["ECMPE126"   ] = ECMPE1_ECMPE126;
        (*ECMPE1     )["ECMPE125"   ] = ECMPE1_ECMPE125;
        (*ECMPE1     )["ECMPE124"   ] = ECMPE1_ECMPE124;
        (*ECMPE1     )["ECMPE123"   ] = ECMPE1_ECMPE123;
        (*ECMPE1     )["ECMPE122"   ] = ECMPE1_ECMPE122;
        (*ECMPE1     )["ECMPE121"   ] = ECMPE1_ECMPE121;
        (*ECMPE1     )["ECMPE120"   ] = ECMPE1_ECMPE120;
        (*ECMPE1     )["ECMPE119"   ] = ECMPE1_ECMPE119;
        (*ECMPE1     )["ECMPE118"   ] = ECMPE1_ECMPE118;
        (*ECMPE1     )["ECMPE117"   ] = ECMPE1_ECMPE117;
        (*ECMPE1     )["ECMPE116"   ] = ECMPE1_ECMPE116;
        (*ECMPE1     )["ECMPE115"   ] = ECMPE1_ECMPE115;
        (*ECMPE1     )["ECMPE114"   ] = ECMPE1_ECMPE114;
        (*ECMPE1     )["ECMPE113"   ] = ECMPE1_ECMPE113;
        (*ECMPE1     )["ECMPE112"   ] = ECMPE1_ECMPE112;
        (*ECMPE1     )["ECMPE111"   ] = ECMPE1_ECMPE111;
        (*ECMPE1     )["ECMPE110"   ] = ECMPE1_ECMPE110;
        (*ECMPE1     )["ECMPE109"   ] = ECMPE1_ECMPE109;
        (*ECMPE1     )["ECMPE108"   ] = ECMPE1_ECMPE108;
        (*ECMPE1     )["ECMPE107"   ] = ECMPE1_ECMPE107;
        (*ECMPE1     )["ECMPE106"   ] = ECMPE1_ECMPE106;
        (*ECMPE1     )["ECMPE105"   ] = ECMPE1_ECMPE105;
        (*ECMPE1     )["ECMPE104"   ] = ECMPE1_ECMPE104;
        (*ECMPE1     )["ECMPE103"   ] = ECMPE1_ECMPE103;
        (*ECMPE1     )["ECMPE102"   ] = ECMPE1_ECMPE102;
        (*ECMPE1     )["ECMPE101"   ] = ECMPE1_ECMPE101;
        (*ECMPE1     )["ECMPE100"   ] = ECMPE1_ECMPE100;
        return;
    }
    if (addr == 0x0150) {
        (*ECMPE2     )["ECMPE229"   ] = ECMPE2_ECMPE229;
        (*ECMPE2     )["ECMPE228"   ] = ECMPE2_ECMPE228;
        (*ECMPE2     )["ECMPE227"   ] = ECMPE2_ECMPE227;
        (*ECMPE2     )["ECMPE226"   ] = ECMPE2_ECMPE226;
        (*ECMPE2     )["ECMPE225"   ] = ECMPE2_ECMPE225;
        (*ECMPE2     )["ECMPE224"   ] = ECMPE2_ECMPE224;
        (*ECMPE2     )["ECMPE223"   ] = ECMPE2_ECMPE223;
        (*ECMPE2     )["ECMPE222"   ] = ECMPE2_ECMPE222;
        (*ECMPE2     )["ECMPE221"   ] = ECMPE2_ECMPE221;
        (*ECMPE2     )["ECMPE220"   ] = ECMPE2_ECMPE220;
        (*ECMPE2     )["ECMPE219"   ] = ECMPE2_ECMPE219;
        (*ECMPE2     )["ECMPE218"   ] = ECMPE2_ECMPE218;
        (*ECMPE2     )["ECMPE217"   ] = ECMPE2_ECMPE217;
        (*ECMPE2     )["ECMPE216"   ] = ECMPE2_ECMPE216;
        (*ECMPE2     )["ECMPE215"   ] = ECMPE2_ECMPE215;
        (*ECMPE2     )["ECMPE214"   ] = ECMPE2_ECMPE214;
        (*ECMPE2     )["ECMPE213"   ] = ECMPE2_ECMPE213;
        (*ECMPE2     )["ECMPE212"   ] = ECMPE2_ECMPE212;
        (*ECMPE2     )["ECMPE211"   ] = ECMPE2_ECMPE211;
        (*ECMPE2     )["ECMPE210"   ] = ECMPE2_ECMPE210;
        (*ECMPE2     )["ECMPE209"   ] = ECMPE2_ECMPE209;
        (*ECMPE2     )["ECMPE208"   ] = ECMPE2_ECMPE208;
        (*ECMPE2     )["ECMPE207"   ] = ECMPE2_ECMPE207;
        (*ECMPE2     )["ECMPE206"   ] = ECMPE2_ECMPE206;
        (*ECMPE2     )["ECMPE205"   ] = ECMPE2_ECMPE205;
        (*ECMPE2     )["ECMPE204"   ] = ECMPE2_ECMPE204;
        (*ECMPE2     )["ECMPE203"   ] = ECMPE2_ECMPE203;
        (*ECMPE2     )["ECMPE202"   ] = ECMPE2_ECMPE202;
        (*ECMPE2     )["ECMPE201"   ] = ECMPE2_ECMPE201;
        (*ECMPE2     )["ECMPE200"   ] = ECMPE2_ECMPE200;
        return;
    }
    if (addr == 0x0154) {
        (*ECMDTMCTL  )["ECMSTP"     ] = ECMDTMCTL_ECMSTP;
        (*ECMDTMCTL  )["ECMSTA"     ] = ECMDTMCTL_ECMSTA;
        return;
    }
    if (addr == 0x0158) {
        (*ECMDTMR    )["ECMDTMR"    ] = ECMDTMR_ECMDTMR;
        return;
    }
    if (addr == 0x015C) {
        (*ECMDTMCMP  )["ECMDTMCMP"  ] = ECMDTMCMP_ECMDTMCMP;
        return;
    }
    if (addr == 0x0160) {
        (*ECMDTMCFG0 )["ECMDTMCFG031"] = ECMDTMCFG0_ECMDTMCFG031;
        (*ECMDTMCFG0 )["ECMDTMCFG030"] = ECMDTMCFG0_ECMDTMCFG030;
        (*ECMDTMCFG0 )["ECMDTMCFG029"] = ECMDTMCFG0_ECMDTMCFG029;
        (*ECMDTMCFG0 )["ECMDTMCFG028"] = ECMDTMCFG0_ECMDTMCFG028;
        (*ECMDTMCFG0 )["ECMDTMCFG027"] = ECMDTMCFG0_ECMDTMCFG027;
        (*ECMDTMCFG0 )["ECMDTMCFG026"] = ECMDTMCFG0_ECMDTMCFG026;
        (*ECMDTMCFG0 )["ECMDTMCFG025"] = ECMDTMCFG0_ECMDTMCFG025;
        (*ECMDTMCFG0 )["ECMDTMCFG024"] = ECMDTMCFG0_ECMDTMCFG024;
        (*ECMDTMCFG0 )["ECMDTMCFG023"] = ECMDTMCFG0_ECMDTMCFG023;
        (*ECMDTMCFG0 )["ECMDTMCFG022"] = ECMDTMCFG0_ECMDTMCFG022;
        (*ECMDTMCFG0 )["ECMDTMCFG021"] = ECMDTMCFG0_ECMDTMCFG021;
        (*ECMDTMCFG0 )["ECMDTMCFG020"] = ECMDTMCFG0_ECMDTMCFG020;
        (*ECMDTMCFG0 )["ECMDTMCFG019"] = ECMDTMCFG0_ECMDTMCFG019;
        (*ECMDTMCFG0 )["ECMDTMCFG018"] = ECMDTMCFG0_ECMDTMCFG018;
        (*ECMDTMCFG0 )["ECMDTMCFG017"] = ECMDTMCFG0_ECMDTMCFG017;
        (*ECMDTMCFG0 )["ECMDTMCFG016"] = ECMDTMCFG0_ECMDTMCFG016;
        (*ECMDTMCFG0 )["ECMDTMCFG015"] = ECMDTMCFG0_ECMDTMCFG015;
        (*ECMDTMCFG0 )["ECMDTMCFG014"] = ECMDTMCFG0_ECMDTMCFG014;
        (*ECMDTMCFG0 )["ECMDTMCFG013"] = ECMDTMCFG0_ECMDTMCFG013;
        (*ECMDTMCFG0 )["ECMDTMCFG012"] = ECMDTMCFG0_ECMDTMCFG012;
        (*ECMDTMCFG0 )["ECMDTMCFG011"] = ECMDTMCFG0_ECMDTMCFG011;
        (*ECMDTMCFG0 )["ECMDTMCFG010"] = ECMDTMCFG0_ECMDTMCFG010;
        (*ECMDTMCFG0 )["ECMDTMCFG009"] = ECMDTMCFG0_ECMDTMCFG009;
        (*ECMDTMCFG0 )["ECMDTMCFG008"] = ECMDTMCFG0_ECMDTMCFG008;
        (*ECMDTMCFG0 )["ECMDTMCFG007"] = ECMDTMCFG0_ECMDTMCFG007;
        (*ECMDTMCFG0 )["ECMDTMCFG006"] = ECMDTMCFG0_ECMDTMCFG006;
        (*ECMDTMCFG0 )["ECMDTMCFG005"] = ECMDTMCFG0_ECMDTMCFG005;
        (*ECMDTMCFG0 )["ECMDTMCFG004"] = ECMDTMCFG0_ECMDTMCFG004;
        (*ECMDTMCFG0 )["ECMDTMCFG003"] = ECMDTMCFG0_ECMDTMCFG003;
        (*ECMDTMCFG0 )["ECMDTMCFG002"] = ECMDTMCFG0_ECMDTMCFG002;
        (*ECMDTMCFG0 )["ECMDTMCFG001"] = ECMDTMCFG0_ECMDTMCFG001;
        (*ECMDTMCFG0 )["ECMDTMCFG000"] = ECMDTMCFG0_ECMDTMCFG000;
        return;
    }
    if (addr == 0x0164) {
        (*ECMDTMCFG1 )["ECMDTMCFG131"] = ECMDTMCFG1_ECMDTMCFG131;
        (*ECMDTMCFG1 )["ECMDTMCFG130"] = ECMDTMCFG1_ECMDTMCFG130;
        (*ECMDTMCFG1 )["ECMDTMCFG129"] = ECMDTMCFG1_ECMDTMCFG129;
        (*ECMDTMCFG1 )["ECMDTMCFG128"] = ECMDTMCFG1_ECMDTMCFG128;
        (*ECMDTMCFG1 )["ECMDTMCFG127"] = ECMDTMCFG1_ECMDTMCFG127;
        (*ECMDTMCFG1 )["ECMDTMCFG126"] = ECMDTMCFG1_ECMDTMCFG126;
        (*ECMDTMCFG1 )["ECMDTMCFG125"] = ECMDTMCFG1_ECMDTMCFG125;
        (*ECMDTMCFG1 )["ECMDTMCFG124"] = ECMDTMCFG1_ECMDTMCFG124;
        (*ECMDTMCFG1 )["ECMDTMCFG123"] = ECMDTMCFG1_ECMDTMCFG123;
        (*ECMDTMCFG1 )["ECMDTMCFG122"] = ECMDTMCFG1_ECMDTMCFG122;
        (*ECMDTMCFG1 )["ECMDTMCFG121"] = ECMDTMCFG1_ECMDTMCFG121;
        (*ECMDTMCFG1 )["ECMDTMCFG120"] = ECMDTMCFG1_ECMDTMCFG120;
        (*ECMDTMCFG1 )["ECMDTMCFG119"] = ECMDTMCFG1_ECMDTMCFG119;
        (*ECMDTMCFG1 )["ECMDTMCFG118"] = ECMDTMCFG1_ECMDTMCFG118;
        (*ECMDTMCFG1 )["ECMDTMCFG117"] = ECMDTMCFG1_ECMDTMCFG117;
        (*ECMDTMCFG1 )["ECMDTMCFG116"] = ECMDTMCFG1_ECMDTMCFG116;
        (*ECMDTMCFG1 )["ECMDTMCFG115"] = ECMDTMCFG1_ECMDTMCFG115;
        (*ECMDTMCFG1 )["ECMDTMCFG114"] = ECMDTMCFG1_ECMDTMCFG114;
        (*ECMDTMCFG1 )["ECMDTMCFG113"] = ECMDTMCFG1_ECMDTMCFG113;
        (*ECMDTMCFG1 )["ECMDTMCFG112"] = ECMDTMCFG1_ECMDTMCFG112;
        (*ECMDTMCFG1 )["ECMDTMCFG111"] = ECMDTMCFG1_ECMDTMCFG111;
        (*ECMDTMCFG1 )["ECMDTMCFG110"] = ECMDTMCFG1_ECMDTMCFG110;
        (*ECMDTMCFG1 )["ECMDTMCFG109"] = ECMDTMCFG1_ECMDTMCFG109;
        (*ECMDTMCFG1 )["ECMDTMCFG108"] = ECMDTMCFG1_ECMDTMCFG108;
        (*ECMDTMCFG1 )["ECMDTMCFG107"] = ECMDTMCFG1_ECMDTMCFG107;
        (*ECMDTMCFG1 )["ECMDTMCFG106"] = ECMDTMCFG1_ECMDTMCFG106;
        (*ECMDTMCFG1 )["ECMDTMCFG105"] = ECMDTMCFG1_ECMDTMCFG105;
        (*ECMDTMCFG1 )["ECMDTMCFG104"] = ECMDTMCFG1_ECMDTMCFG104;
        (*ECMDTMCFG1 )["ECMDTMCFG103"] = ECMDTMCFG1_ECMDTMCFG103;
        (*ECMDTMCFG1 )["ECMDTMCFG102"] = ECMDTMCFG1_ECMDTMCFG102;
        (*ECMDTMCFG1 )["ECMDTMCFG101"] = ECMDTMCFG1_ECMDTMCFG101;
        (*ECMDTMCFG1 )["ECMDTMCFG100"] = ECMDTMCFG1_ECMDTMCFG100;
        return;
    }
    if (addr == 0x0168) {
        (*ECMDTMCFG2 )["ECMDTMCFG228"] = ECMDTMCFG2_ECMDTMCFG228;
        (*ECMDTMCFG2 )["ECMDTMCFG227"] = ECMDTMCFG2_ECMDTMCFG227;
        (*ECMDTMCFG2 )["ECMDTMCFG226"] = ECMDTMCFG2_ECMDTMCFG226;
        (*ECMDTMCFG2 )["ECMDTMCFG225"] = ECMDTMCFG2_ECMDTMCFG225;
        (*ECMDTMCFG2 )["ECMDTMCFG224"] = ECMDTMCFG2_ECMDTMCFG224;
        (*ECMDTMCFG2 )["ECMDTMCFG223"] = ECMDTMCFG2_ECMDTMCFG223;
        (*ECMDTMCFG2 )["ECMDTMCFG222"] = ECMDTMCFG2_ECMDTMCFG222;
        (*ECMDTMCFG2 )["ECMDTMCFG221"] = ECMDTMCFG2_ECMDTMCFG221;
        (*ECMDTMCFG2 )["ECMDTMCFG220"] = ECMDTMCFG2_ECMDTMCFG220;
        (*ECMDTMCFG2 )["ECMDTMCFG219"] = ECMDTMCFG2_ECMDTMCFG219;
        (*ECMDTMCFG2 )["ECMDTMCFG218"] = ECMDTMCFG2_ECMDTMCFG218;
        (*ECMDTMCFG2 )["ECMDTMCFG217"] = ECMDTMCFG2_ECMDTMCFG217;
        (*ECMDTMCFG2 )["ECMDTMCFG216"] = ECMDTMCFG2_ECMDTMCFG216;
        (*ECMDTMCFG2 )["ECMDTMCFG215"] = ECMDTMCFG2_ECMDTMCFG215;
        (*ECMDTMCFG2 )["ECMDTMCFG214"] = ECMDTMCFG2_ECMDTMCFG214;
        (*ECMDTMCFG2 )["ECMDTMCFG213"] = ECMDTMCFG2_ECMDTMCFG213;
        (*ECMDTMCFG2 )["ECMDTMCFG212"] = ECMDTMCFG2_ECMDTMCFG212;
        (*ECMDTMCFG2 )["ECMDTMCFG211"] = ECMDTMCFG2_ECMDTMCFG211;
        (*ECMDTMCFG2 )["ECMDTMCFG210"] = ECMDTMCFG2_ECMDTMCFG210;
        (*ECMDTMCFG2 )["ECMDTMCFG209"] = ECMDTMCFG2_ECMDTMCFG209;
        (*ECMDTMCFG2 )["ECMDTMCFG208"] = ECMDTMCFG2_ECMDTMCFG208;
        (*ECMDTMCFG2 )["ECMDTMCFG207"] = ECMDTMCFG2_ECMDTMCFG207;
        (*ECMDTMCFG2 )["ECMDTMCFG206"] = ECMDTMCFG2_ECMDTMCFG206;
        (*ECMDTMCFG2 )["ECMDTMCFG205"] = ECMDTMCFG2_ECMDTMCFG205;
        (*ECMDTMCFG2 )["ECMDTMCFG204"] = ECMDTMCFG2_ECMDTMCFG204;
        (*ECMDTMCFG2 )["ECMDTMCFG203"] = ECMDTMCFG2_ECMDTMCFG203;
        (*ECMDTMCFG2 )["ECMDTMCFG202"] = ECMDTMCFG2_ECMDTMCFG202;
        (*ECMDTMCFG2 )["ECMDTMCFG201"] = ECMDTMCFG2_ECMDTMCFG201;
        (*ECMDTMCFG2 )["ECMDTMCFG200"] = ECMDTMCFG2_ECMDTMCFG200;
        return;
    }
    if (addr == 0x016C) {
        (*ECMDTMCFG3 )["ECMDTMCFG331"] = ECMDTMCFG3_ECMDTMCFG331;
        (*ECMDTMCFG3 )["ECMDTMCFG330"] = ECMDTMCFG3_ECMDTMCFG330;
        (*ECMDTMCFG3 )["ECMDTMCFG329"] = ECMDTMCFG3_ECMDTMCFG329;
        (*ECMDTMCFG3 )["ECMDTMCFG328"] = ECMDTMCFG3_ECMDTMCFG328;
        (*ECMDTMCFG3 )["ECMDTMCFG327"] = ECMDTMCFG3_ECMDTMCFG327;
        (*ECMDTMCFG3 )["ECMDTMCFG326"] = ECMDTMCFG3_ECMDTMCFG326;
        (*ECMDTMCFG3 )["ECMDTMCFG325"] = ECMDTMCFG3_ECMDTMCFG325;
        (*ECMDTMCFG3 )["ECMDTMCFG324"] = ECMDTMCFG3_ECMDTMCFG324;
        (*ECMDTMCFG3 )["ECMDTMCFG323"] = ECMDTMCFG3_ECMDTMCFG323;
        (*ECMDTMCFG3 )["ECMDTMCFG322"] = ECMDTMCFG3_ECMDTMCFG322;
        (*ECMDTMCFG3 )["ECMDTMCFG321"] = ECMDTMCFG3_ECMDTMCFG321;
        (*ECMDTMCFG3 )["ECMDTMCFG320"] = ECMDTMCFG3_ECMDTMCFG320;
        (*ECMDTMCFG3 )["ECMDTMCFG319"] = ECMDTMCFG3_ECMDTMCFG319;
        (*ECMDTMCFG3 )["ECMDTMCFG318"] = ECMDTMCFG3_ECMDTMCFG318;
        (*ECMDTMCFG3 )["ECMDTMCFG317"] = ECMDTMCFG3_ECMDTMCFG317;
        (*ECMDTMCFG3 )["ECMDTMCFG316"] = ECMDTMCFG3_ECMDTMCFG316;
        (*ECMDTMCFG3 )["ECMDTMCFG315"] = ECMDTMCFG3_ECMDTMCFG315;
        (*ECMDTMCFG3 )["ECMDTMCFG314"] = ECMDTMCFG3_ECMDTMCFG314;
        (*ECMDTMCFG3 )["ECMDTMCFG313"] = ECMDTMCFG3_ECMDTMCFG313;
        (*ECMDTMCFG3 )["ECMDTMCFG312"] = ECMDTMCFG3_ECMDTMCFG312;
        (*ECMDTMCFG3 )["ECMDTMCFG311"] = ECMDTMCFG3_ECMDTMCFG311;
        (*ECMDTMCFG3 )["ECMDTMCFG310"] = ECMDTMCFG3_ECMDTMCFG310;
        (*ECMDTMCFG3 )["ECMDTMCFG309"] = ECMDTMCFG3_ECMDTMCFG309;
        (*ECMDTMCFG3 )["ECMDTMCFG308"] = ECMDTMCFG3_ECMDTMCFG308;
        (*ECMDTMCFG3 )["ECMDTMCFG307"] = ECMDTMCFG3_ECMDTMCFG307;
        (*ECMDTMCFG3 )["ECMDTMCFG306"] = ECMDTMCFG3_ECMDTMCFG306;
        (*ECMDTMCFG3 )["ECMDTMCFG305"] = ECMDTMCFG3_ECMDTMCFG305;
        (*ECMDTMCFG3 )["ECMDTMCFG304"] = ECMDTMCFG3_ECMDTMCFG304;
        (*ECMDTMCFG3 )["ECMDTMCFG303"] = ECMDTMCFG3_ECMDTMCFG303;
        (*ECMDTMCFG3 )["ECMDTMCFG302"] = ECMDTMCFG3_ECMDTMCFG302;
        (*ECMDTMCFG3 )["ECMDTMCFG301"] = ECMDTMCFG3_ECMDTMCFG301;
        (*ECMDTMCFG3 )["ECMDTMCFG300"] = ECMDTMCFG3_ECMDTMCFG300;
        return;
    }
    if (addr == 0x0170) {
        (*ECMDTMCFG4 )["ECMDTMCFG431"] = ECMDTMCFG4_ECMDTMCFG431;
        (*ECMDTMCFG4 )["ECMDTMCFG430"] = ECMDTMCFG4_ECMDTMCFG430;
        (*ECMDTMCFG4 )["ECMDTMCFG429"] = ECMDTMCFG4_ECMDTMCFG429;
        (*ECMDTMCFG4 )["ECMDTMCFG428"] = ECMDTMCFG4_ECMDTMCFG428;
        (*ECMDTMCFG4 )["ECMDTMCFG427"] = ECMDTMCFG4_ECMDTMCFG427;
        (*ECMDTMCFG4 )["ECMDTMCFG426"] = ECMDTMCFG4_ECMDTMCFG426;
        (*ECMDTMCFG4 )["ECMDTMCFG425"] = ECMDTMCFG4_ECMDTMCFG425;
        (*ECMDTMCFG4 )["ECMDTMCFG424"] = ECMDTMCFG4_ECMDTMCFG424;
        (*ECMDTMCFG4 )["ECMDTMCFG423"] = ECMDTMCFG4_ECMDTMCFG423;
        (*ECMDTMCFG4 )["ECMDTMCFG422"] = ECMDTMCFG4_ECMDTMCFG422;
        (*ECMDTMCFG4 )["ECMDTMCFG421"] = ECMDTMCFG4_ECMDTMCFG421;
        (*ECMDTMCFG4 )["ECMDTMCFG420"] = ECMDTMCFG4_ECMDTMCFG420;
        (*ECMDTMCFG4 )["ECMDTMCFG419"] = ECMDTMCFG4_ECMDTMCFG419;
        (*ECMDTMCFG4 )["ECMDTMCFG418"] = ECMDTMCFG4_ECMDTMCFG418;
        (*ECMDTMCFG4 )["ECMDTMCFG417"] = ECMDTMCFG4_ECMDTMCFG417;
        (*ECMDTMCFG4 )["ECMDTMCFG416"] = ECMDTMCFG4_ECMDTMCFG416;
        (*ECMDTMCFG4 )["ECMDTMCFG415"] = ECMDTMCFG4_ECMDTMCFG415;
        (*ECMDTMCFG4 )["ECMDTMCFG414"] = ECMDTMCFG4_ECMDTMCFG414;
        (*ECMDTMCFG4 )["ECMDTMCFG413"] = ECMDTMCFG4_ECMDTMCFG413;
        (*ECMDTMCFG4 )["ECMDTMCFG412"] = ECMDTMCFG4_ECMDTMCFG412;
        (*ECMDTMCFG4 )["ECMDTMCFG411"] = ECMDTMCFG4_ECMDTMCFG411;
        (*ECMDTMCFG4 )["ECMDTMCFG410"] = ECMDTMCFG4_ECMDTMCFG410;
        (*ECMDTMCFG4 )["ECMDTMCFG409"] = ECMDTMCFG4_ECMDTMCFG409;
        (*ECMDTMCFG4 )["ECMDTMCFG408"] = ECMDTMCFG4_ECMDTMCFG408;
        (*ECMDTMCFG4 )["ECMDTMCFG407"] = ECMDTMCFG4_ECMDTMCFG407;
        (*ECMDTMCFG4 )["ECMDTMCFG406"] = ECMDTMCFG4_ECMDTMCFG406;
        (*ECMDTMCFG4 )["ECMDTMCFG405"] = ECMDTMCFG4_ECMDTMCFG405;
        (*ECMDTMCFG4 )["ECMDTMCFG404"] = ECMDTMCFG4_ECMDTMCFG404;
        (*ECMDTMCFG4 )["ECMDTMCFG403"] = ECMDTMCFG4_ECMDTMCFG403;
        (*ECMDTMCFG4 )["ECMDTMCFG402"] = ECMDTMCFG4_ECMDTMCFG402;
        (*ECMDTMCFG4 )["ECMDTMCFG401"] = ECMDTMCFG4_ECMDTMCFG401;
        (*ECMDTMCFG4 )["ECMDTMCFG400"] = ECMDTMCFG4_ECMDTMCFG400;
        return;
    }
    if (addr == 0x0174) {
        (*ECMDTMCFG5 )["ECMDTMCFG528"] = ECMDTMCFG5_ECMDTMCFG528;
        (*ECMDTMCFG5 )["ECMDTMCFG527"] = ECMDTMCFG5_ECMDTMCFG527;
        (*ECMDTMCFG5 )["ECMDTMCFG526"] = ECMDTMCFG5_ECMDTMCFG526;
        (*ECMDTMCFG5 )["ECMDTMCFG525"] = ECMDTMCFG5_ECMDTMCFG525;
        (*ECMDTMCFG5 )["ECMDTMCFG524"] = ECMDTMCFG5_ECMDTMCFG524;
        (*ECMDTMCFG5 )["ECMDTMCFG523"] = ECMDTMCFG5_ECMDTMCFG523;
        (*ECMDTMCFG5 )["ECMDTMCFG522"] = ECMDTMCFG5_ECMDTMCFG522;
        (*ECMDTMCFG5 )["ECMDTMCFG521"] = ECMDTMCFG5_ECMDTMCFG521;
        (*ECMDTMCFG5 )["ECMDTMCFG520"] = ECMDTMCFG5_ECMDTMCFG520;
        (*ECMDTMCFG5 )["ECMDTMCFG519"] = ECMDTMCFG5_ECMDTMCFG519;
        (*ECMDTMCFG5 )["ECMDTMCFG518"] = ECMDTMCFG5_ECMDTMCFG518;
        (*ECMDTMCFG5 )["ECMDTMCFG517"] = ECMDTMCFG5_ECMDTMCFG517;
        (*ECMDTMCFG5 )["ECMDTMCFG516"] = ECMDTMCFG5_ECMDTMCFG516;
        (*ECMDTMCFG5 )["ECMDTMCFG515"] = ECMDTMCFG5_ECMDTMCFG515;
        (*ECMDTMCFG5 )["ECMDTMCFG514"] = ECMDTMCFG5_ECMDTMCFG514;
        (*ECMDTMCFG5 )["ECMDTMCFG513"] = ECMDTMCFG5_ECMDTMCFG513;
        (*ECMDTMCFG5 )["ECMDTMCFG512"] = ECMDTMCFG5_ECMDTMCFG512;
        (*ECMDTMCFG5 )["ECMDTMCFG511"] = ECMDTMCFG5_ECMDTMCFG511;
        (*ECMDTMCFG5 )["ECMDTMCFG510"] = ECMDTMCFG5_ECMDTMCFG510;
        (*ECMDTMCFG5 )["ECMDTMCFG509"] = ECMDTMCFG5_ECMDTMCFG509;
        (*ECMDTMCFG5 )["ECMDTMCFG508"] = ECMDTMCFG5_ECMDTMCFG508;
        (*ECMDTMCFG5 )["ECMDTMCFG507"] = ECMDTMCFG5_ECMDTMCFG507;
        (*ECMDTMCFG5 )["ECMDTMCFG506"] = ECMDTMCFG5_ECMDTMCFG506;
        (*ECMDTMCFG5 )["ECMDTMCFG505"] = ECMDTMCFG5_ECMDTMCFG505;
        (*ECMDTMCFG5 )["ECMDTMCFG504"] = ECMDTMCFG5_ECMDTMCFG504;
        (*ECMDTMCFG5 )["ECMDTMCFG503"] = ECMDTMCFG5_ECMDTMCFG503;
        (*ECMDTMCFG5 )["ECMDTMCFG502"] = ECMDTMCFG5_ECMDTMCFG502;
        (*ECMDTMCFG5 )["ECMDTMCFG501"] = ECMDTMCFG5_ECMDTMCFG501;
        (*ECMDTMCFG5 )["ECMDTMCFG500"] = ECMDTMCFG5_ECMDTMCFG500;
        return;
    }
    if (addr == 0x0178) {
        (*ECMEOUTCLRT)["ECMEOUTCLRT"] = ECMEOUTCLRT_ECMEOUTCLRT;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cecm_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cecm_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cecm_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,9, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cecm_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<9)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cecm_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cecm_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cecm_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cecm_regif::uint Cecm_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cecm_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cecm_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cecm_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cecm_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cecm_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cecm_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cecm_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
