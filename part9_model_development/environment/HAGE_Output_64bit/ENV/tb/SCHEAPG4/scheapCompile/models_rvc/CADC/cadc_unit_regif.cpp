// -----------------------------------------------------------------------------
// $Id: cadc_unit_regif.cpp,v 1.1 2018/11/19 02:50:58 chanle Exp $
//
// Copyright(c) 2016-2018 Renesas Electronics Corporation
// Copyright(c) 2016-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : CADC/cadc_unit_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE CADC_UNIT
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access init        support callback
//     %%REG    CADCnVCR      CADCnVCR      8|16|32  8|16|32  32      0x00    0             7           -             -            W|R    0           TRUE    -
//     %%REG    CADCnDIR      CADCnDIR      8|16|32  8|16|32  32      0x20    0             7           -             -            R      0           TRUE    -
//     %%REG    CADCnADSTCR   CADCnADSTCR   8        8|16|32  8       0x40    -             -           -             -            W      0           TRUE    W
//     %%REG    CADCnADENDCR  CADCnADENDCR  8        8|16|32  8       0x44    -             -           -             -            W      0           TRUE    W
//     %%REG    CADCnCLBSTCR  CADCnCLBSTCR  8        8|16|32  8       0x48    -             -           -             -            W      0           TRUE    W
//     %%REG    CADCnCLBEDCR  CADCnCLBEDCR  8        8|16|32  8       0x4C    -             -           -             -            W      0           TRUE    W
//     %%REG    CADCnADTCR    CADCnADTCR    8        8|16|32  8       0x50    -             -           -             -            W|R    0           TRUE    -
//     %%REG    CADCnUCR      CADCnUCR      8|16|32  8|16|32  32      0x54    -             -           -             -            W|R    0           TRUE    -
//     %%REG    CADCnVCPTRR   CADCnVCPTRR   8        8|16|32  8       0x58    -             -           -             -            W|R    0           TRUE    W
//     %%REG    CADCnADSR     CADCnADSR     8|16|32  8|16|32  8       0x60    -             -           -             -            R      0           TRUE    -
//     %%REG    CADCnUDPTRR   CADCnUDPTRR   8|16|32  8|16|32  8       0x64    -             -           -             -            R      0           TRUE    -
//     %%REG    CADCnUDIR     CADCnUDIR     8|16|32  8|16|32  32      0x68    -             -           -             -            R      0           TRUE    -
//     %%REG    CADCnSMPCR    CADCnSMPCR    8|16|32  8|16|32  32      0x6C    -             -           -             -            R|W    0x00010707  TRUE    -
//     %%REG    CADCnSFTCR    CADCnSFTCR    8        8|16|32  8       0x70    -             -           -             -            W|R    0           TRUE    -
//     %%REG    CADCnECR      CADCnECR      8        8|16|32  8       0x74    -             -           -             -            W      0           TRUE    W
//     %%REG    CADCnER       CADCnER       8|16|32  8|16|32  32      0x78    -             -           -             -            R      0           TRUE    -
//     %%REG    CADCnTDLVR    CADCnTDLVR    8        8|16|32  8       0x7C    -             -           -             -            W|R    0           TRUE    -
//     %%REG    CADCnULTBR    CADCnULTBR    16|32    8|16|32  32      0x80    0             3           -             -            W|R    0x7FFF8000  TRUE    -
// 
// 
// %REG_NAME CADCnVCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00VCULME      27     27     0     W|R     TRUE     -
//     %%BIT    CADC00VCLLME      26     26     0     W|R     TRUE     -
//     %%BIT    CADC00VCULLMTBS   25     24     0     W|R     TRUE     -
//     %%BIT    CADC00ADIE        15     15     0     W|R     TRUE     -
//     %%BIT    CADC00ULEIE       14     14     0     W|R     TRUE     -
//     %%BIT    CADC00DFENT       12     12     0     W|R     TRUE     -
//     %%BIT    CADC00DFTAG       11     8      0     W|R     TRUE     -
//     %%BIT    CADC00CNVCLS      5      4      0     W|R     TRUE     -
//     %%BIT    CADC00GCTRL       3      0      0     W|R     TRUE     -
// 
// %REG_NAME CADCnDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00IDEF          26     26     0     R       TRUE     -
//     %%BIT    CADC00WFLG        25     25     0     R       TRUE     -
//     %%BIT    CADC00PRTY        24     24     0     R       TRUE     -
//     %%BIT    CADC00DR          15     0      0     R       TRUE     -
// 
// %REG_NAME CADCnADSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ADST        0      0      0     W       TRUE     W
// 
// %REG_NAME CADCnADENDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ADEND       0      0      0     W       TRUE     W
// 
// %REG_NAME CADCnCLBSTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00CLBST       0      0      0     W       TRUE     W
// 
// %REG_NAME CADCnCLBEDCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00CLBEND      0      0      0     W       TRUE     W
// 
// %REG_NAME CADCnADTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ENDTRGE     1      1      0     W|R     TRUE     -
//     %%BIT    CADC00STTRGE      0      0      0     W|R     TRUE     -
// 
// %REG_NAME CADCnUCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00VPRSTE      29     29     0     W|R     TRUE     -
//     %%BIT    CADC00RDMA        28     28     0     W|R     TRUE     -
//     %%BIT    CADC00DFMT        11     8      0     W|R     TRUE     -
//     %%BIT    CADC00VCEP        2      0      0     W|R     TRUE     -
// 
// %REG_NAME CADCnVCPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00VCPTR       2      0      0     W|R     TRUE     W
// 
// %REG_NAME CADCnADSR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00CLBACT      1      1      0     R       TRUE     -
//     %%BIT    CADC00ADACT       0      0      0     R       TRUE     -
// 
// %REG_NAME CADCnUDPTRR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00UDPTR       2      0      0     R       TRUE     -
// 
// %REG_NAME CADCnUDIR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00CHNUM       31     29     0     R       TRUE     -
//     %%BIT    CADC00UIDEF       26     26     0     R       TRUE     -
//     %%BIT    CADC00UWFLG       25     25     0     R       TRUE     -
//     %%BIT    CADC00UPRTY       24     24     0     R       TRUE     -
//     %%BIT    CADC00UDR         15     0      0     R       TRUE     -
// 
// %REG_NAME CADCnSMPCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ODAV       16     16     0x1   R|W       TRUE     -
// 
// %REG_NAME CADCnSFTCR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00RDCLRE      7      7      0     W|R     TRUE     -
//     %%BIT    CADC00OWEIE       2      2      0     W|R     TRUE     -
//     %%BIT    CADC00PEIE        1      1      0     W|R     TRUE     -
//     %%BIT    CADC00IDEIE       0      0      0     W|R     TRUE     -
// 
// %REG_NAME CADCnECR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ULEC        4      4      0     W       TRUE     W
//     %%BIT    CADC00LLEC        3      3      0     W       TRUE     -
//     %%BIT    CADC00OWEC        2      2      0     W       TRUE     -
//     %%BIT    CADC00PEC         1      1      0     W       TRUE     -
// 
// %REG_NAME CADCnER
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00ULE         31     31     0     R       TRUE     -
//     %%BIT    CADC00LLE         30     30     0     R       TRUE     -
//     %%BIT    CADC00ULECAP      26     24     0     R       TRUE     -
//     %%BIT    CADC00OWE         23     23     0     R       TRUE     -
//     %%BIT    CADC00OWECAP      18     16     0     R       TRUE     -
//     %%BIT    CADC00PE          15     15     0     R       TRUE     -
//     %%BIT    CADC00PECAP       10     8      0     R       TRUE     -
// 
// %REG_NAME CADCnTDLVR
//     %%TITLE  name        upper  lower  init  access  support  callback
//     %%BIT    CADC00AN3NLV      7      7      0     W|R     TRUE     -
//     %%BIT    CADC00AN3PLV      6      6      0     W|R     TRUE     -
//     %%BIT    CADC00AN2NLV      5      5      0     W|R     TRUE     -
//     %%BIT    CADC00AN2PLV      4      4      0     W|R     TRUE     -
//     %%BIT    CADC00AN1NLV      3      3      0     W|R     TRUE     -
//     %%BIT    CADC00AN1PLV      2      2      0     W|R     TRUE     -
//     %%BIT    CADC00AN0NLV      1      1      0     W|R     TRUE     -
//     %%BIT    CADC00AN0PLV      0      0      0     W|R     TRUE     -
// 
// %REG_NAME CADCnULTBR
//     %%TITLE  name        upper  lower  init    access  support  callback
//     %%BIT    CADC00ULMTB       31     16     0x7FFF  W|R     TRUE     -
//     %%BIT    CADC00LLMTB       15     0      0x8000  W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file cadc_unit_regif.cpp
/// @brief Register IF class of model ADC_UNIT
/// $Id: cadc_unit_regif.cpp,v 1.1 2018/11/19 02:50:58 chanle Exp $
/// $Date: 2018/11/19 02:50:58 $
/// $Revison$
/// $Author: chanle $
////////////////////////////////////////////////////////////////////////////////
#include "cadc_unit_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Ccadc_unit_regif::Ccadc_unit_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x90/4))
    #endif
{
    CommandInit();
    CADCnADSTCR  = new vpcl::re_register(0x0040, this, "CADCnADSTCR" , name.c_str());
    CADCnADENDCR = new vpcl::re_register(0x0044, this, "CADCnADENDCR", name.c_str());
    CADCnCLBSTCR = new vpcl::re_register(0x0048, this, "CADCnCLBSTCR", name.c_str());
    CADCnCLBEDCR = new vpcl::re_register(0x004C, this, "CADCnCLBEDCR", name.c_str());
    CADCnADTCR   = new vpcl::re_register(0x0050, this, "CADCnADTCR"  , name.c_str());
    CADCnUCR     = new vpcl::re_register(0x0054, this, "CADCnUCR"    , name.c_str());
    CADCnVCPTRR  = new vpcl::re_register(0x0058, this, "CADCnVCPTRR" , name.c_str());
    CADCnADSR    = new vpcl::re_register(0x0060, this, "CADCnADSR"   , name.c_str());
    CADCnUDPTRR  = new vpcl::re_register(0x0064, this, "CADCnUDPTRR" , name.c_str());
    CADCnUDIR    = new vpcl::re_register(0x0068, this, "CADCnUDIR"   , name.c_str());
    CADCnSMPCR   = new vpcl::re_register(0x006C, this, "CADCnSMPCR"  , name.c_str());
    CADCnSFTCR   = new vpcl::re_register(0x0070, this, "CADCnSFTCR"  , name.c_str());
    CADCnECR     = new vpcl::re_register(0x0074, this, "CADCnECR"    , name.c_str());
    CADCnER      = new vpcl::re_register(0x0078, this, "CADCnER"     , name.c_str());
    CADCnTDLVR   = new vpcl::re_register(0x007C, this, "CADCnTDLVR"  , name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_CADCnVCR; i++) {
        str_tmp.str("");
        str_tmp<<"CADCnVCR"<< i;
        CADCnVCR    [i] = new vpcl::re_register((0x0000) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_CADCnDIR; i++) {
        str_tmp.str("");
        str_tmp<<"CADCnDIR"<< i;
        CADCnDIR    [i] = new vpcl::re_register((0x0020) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_CADCnULTBR; i++) {
        str_tmp.str("");
        str_tmp<<"CADCnULTBR"<< i;
        CADCnULTBR  [i] = new vpcl::re_register((0x0080) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    for(uint i = 0; i < emNUM_CADCnVCR;    i++) {
        mRegMap[(0x0000)     + i*4 ] = index;
        mRegMap[(0x0000 + 1) + i*4 ] = index;
        mRegMap[(0x0000 + 2) + i*4 ] = index;
        mRegMap[(0x0000 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_CADCnDIR;    i++) {
        mRegMap[(0x0020)     + i*4 ] = index;
        mRegMap[(0x0020 + 1) + i*4 ] = index;
        mRegMap[(0x0020 + 2) + i*4 ] = index;
        mRegMap[(0x0020 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0040]     = index++;
    mRegMap[0x0044]     = index++;
    mRegMap[0x0048]     = index++;
    mRegMap[0x004C]     = index++;
    mRegMap[0x0050]     = index++;
    mRegMap[0x0054]     = index;
    mRegMap[0x0054 + 1] = index;
    mRegMap[0x0054 + 2] = index;
    mRegMap[0x0054 + 3] = index++;
    mRegMap[0x0058]     = index++;
    mRegMap[0x0060]     = index++;
    mRegMap[0x0064]     = index++;
    mRegMap[0x0068]     = index;
    mRegMap[0x0068 + 1] = index;
    mRegMap[0x0068 + 2] = index;
    mRegMap[0x0068 + 3] = index++;
    mRegMap[0x006C]     = index;
    mRegMap[0x006C + 1] = index;
    mRegMap[0x006C + 2] = index;
    mRegMap[0x006C + 3] = index++;
    mRegMap[0x0070]     = index++;
    mRegMap[0x0074]     = index++;
    mRegMap[0x0078]     = index;
    mRegMap[0x0078 + 1] = index;
    mRegMap[0x0078 + 2] = index;
    mRegMap[0x0078 + 3] = index++;
    mRegMap[0x007C]     = index++;
    for(uint i = 0; i < emNUM_CADCnULTBR;  i++) {
        mRegMap[(0x0080)     + i*4 ] = index;
        mRegMap[(0x0080 + 1) + i*4 ] = index;
        mRegMap[(0x0080 + 2) + i*4 ] = index;
        mRegMap[(0x0080 + 3) + i*4 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_CADCnADSTCR_, "CADCnADSTCR_", 0x0040);
    CW_CADCnADSTCR  = new scml2::bitfield<uint>(CADCnADSTCR->name() , CW_CADCnADSTCR_            ,  0,  8);
    cw_instantiate_reg(CW_CADCnADENDCR_, "CADCnADENDCR_", 0x0044);
    CW_CADCnADENDCR = new scml2::bitfield<uint>(CADCnADENDCR->name(), CW_CADCnADENDCR_           ,  0,  8);
    cw_instantiate_reg(CW_CADCnCLBSTCR_, "CADCnCLBSTCR_", 0x0048);
    CW_CADCnCLBSTCR = new scml2::bitfield<uint>(CADCnCLBSTCR->name(), CW_CADCnCLBSTCR_           ,  0,  8);
    cw_instantiate_reg(CW_CADCnCLBEDCR_, "CADCnCLBEDCR_", 0x004C);
    CW_CADCnCLBEDCR = new scml2::bitfield<uint>(CADCnCLBEDCR->name(), CW_CADCnCLBEDCR_           ,  0,  8);
    cw_instantiate_reg(CW_CADCnADTCR_, "CADCnADTCR_", 0x0050);
    CW_CADCnADTCR   = new scml2::bitfield<uint>(CADCnADTCR->name()  , CW_CADCnADTCR_             ,  0,  8);
    cw_instantiate_reg(CW_CADCnVCPTRR_, "CADCnVCPTRR_", 0x0058);
    CW_CADCnVCPTRR  = new scml2::bitfield<uint>(CADCnVCPTRR->name() , CW_CADCnVCPTRR_            ,  0,  8);
    cw_instantiate_reg(CW_CADCnADSR_, "CADCnADSR_", 0x0060);
    CW_CADCnADSR    = new scml2::bitfield<uint>(CADCnADSR->name()   , CW_CADCnADSR_              ,  0,  8);
    cw_instantiate_reg(CW_CADCnUDPTRR_, "CADCnUDPTRR_", 0x0064);
    CW_CADCnUDPTRR  = new scml2::bitfield<uint>(CADCnUDPTRR->name() , CW_CADCnUDPTRR_            ,  0,  8);
    cw_instantiate_reg(CW_CADCnSFTCR_, "CADCnSFTCR_", 0x0070);
    CW_CADCnSFTCR   = new scml2::bitfield<uint>(CADCnSFTCR->name()  , CW_CADCnSFTCR_             ,  0,  8);
    cw_instantiate_reg(CW_CADCnECR_, "CADCnECR_", 0x0074);
    CW_CADCnECR     = new scml2::bitfield<uint>(CADCnECR->name()    , CW_CADCnECR_               ,  0,  8);
    cw_instantiate_reg(CW_CADCnTDLVR_, "CADCnTDLVR_", 0x007C);
    CW_CADCnTDLVR   = new scml2::bitfield<uint>(CADCnTDLVR->name()  , CW_CADCnTDLVR_             ,  0,  8);
    for(uint i = 0; i < emNUM_CADCnVCR    ; i++) cw_instantiate_reg(CW_CADCnVCR      [i], CADCnVCR    [i]->name(), CADCnVCR    [i]->addr());
    for(uint i = 0; i < emNUM_CADCnDIR    ; i++) cw_instantiate_reg(CW_CADCnDIR      [i], CADCnDIR    [i]->name(), CADCnDIR    [i]->addr());
    cw_instantiate_reg(CW_CADCnUCR      , CADCnUCR->name()    , CADCnUCR->addr()    );
    cw_instantiate_reg(CW_CADCnUDIR     , CADCnUDIR->name()   , CADCnUDIR->addr()   );
    cw_instantiate_reg(CW_CADCnSMPCR    , CADCnSMPCR->name()  , CADCnSMPCR->addr()  );
    cw_instantiate_reg(CW_CADCnER       , CADCnER->name()     , CADCnER->addr()     );
    for(uint i = 0; i < emNUM_CADCnULTBR  ; i++) cw_instantiate_reg(CW_CADCnULTBR    [i], CADCnULTBR  [i]->name(), CADCnULTBR  [i]->addr());
    #endif
    for(uint i = 0; i < emNUM_CADCnVCR    ; i++) mCurReg = mRegArray[index++] = new SRegList(CADCnVCR      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_CADCnDIR    ; i++) mCurReg = mRegArray[index++] = new SRegList(CADCnDIR      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnADSTCR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnADENDCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnCLBSTCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnCLBEDCR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnADTCR    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnUCR      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnVCPTRR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnADSR     , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnUDPTRR   , mCurReg, 0,  1, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnUDIR     , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnSMPCR    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnSFTCR    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnECR      , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnER       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(CADCnTDLVR    , mCurReg, 0,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_CADCnULTBR  ; i++) mCurReg = mRegArray[index++] = new SRegList(CADCnULTBR    [i], mCurReg, i,  4,   "16|32", "8|16|32");

    mRegList = mCurReg;

    (*CADCnADSTCR   ) ( 0,  0, "CADC00ADST", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnADENDCR  ) ( 0,  0, "CADC00ADEND", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnCLBSTCR  ) ( 0,  0, "CADC00CLBST", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnCLBEDCR  ) ( 0,  0, "CADC00CLBEND", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnADTCR    ) ( 1,  1, "CADC00ENDTRGE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnADTCR    ) ( 0,  0, "CADC00STTRGE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnUCR      ) (29, 29, "CADC00VPRSTE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnUCR      ) (28, 28, "CADC00RDMA", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnUCR      ) (11,  8, "CADC00DFMT", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnUCR      ) ( 2,  0, "CADC00VCEP", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnVCPTRR   ) ( 2,  0, "CADC00VCPTR", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnADSR     ) ( 1,  1, "CADC00CLBACT", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnADSR     ) ( 0,  0, "CADC00ADACT", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDPTRR   ) ( 2,  0, "CADC00UDPTR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDIR     ) (31, 29, "CADC00CHNUM", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDIR     ) (26, 26, "CADC00UIDEF", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDIR     ) (25, 25, "CADC00UWFLG", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDIR     ) (24, 24, "CADC00UPRTY", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnUDIR     ) (15,  0, "CADC00UDR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnSMPCR    ) (16, 16, "CADC00ODAV", 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*CADCnSFTCR    ) ( 7,  7, "CADC00RDCLRE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnSFTCR    ) ( 2,  2, "CADC00OWEIE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnSFTCR    ) ( 1,  1, "CADC00PEIE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnSFTCR    ) ( 0,  0, "CADC00IDEIE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnECR      ) ( 4,  4, "CADC00ULEC", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnECR      ) ( 3,  3, "CADC00LLEC", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnECR      ) ( 2,  2, "CADC00OWEC", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnECR      ) ( 1,  1, "CADC00PEC", 0x0       , "W"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (31, 31, "CADC00ULE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (30, 30, "CADC00LLE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (26, 24, "CADC00ULECAP", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (23, 23, "CADC00OWE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (18, 16, "CADC00OWECAP", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (15, 15, "CADC00PE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnER       ) (10,  8, "CADC00PECAP", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 7,  7, "CADC00AN3NLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 6,  6, "CADC00AN3PLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 5,  5, "CADC00AN2NLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 4,  4, "CADC00AN2PLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 3,  3, "CADC00AN1NLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 2,  2, "CADC00AN1PLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 1,  1, "CADC00AN0NLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*CADCnTDLVR    ) ( 0,  0, "CADC00AN0PLV", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_CADCnVCR; i++) {
        (*CADCnVCR      [i]) (27, 27, "CADC00VCULME", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (26, 26, "CADC00VCLLME", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (25, 24, "CADC00VCULLMTBS", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (15, 15, "CADC00ADIE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (14, 14, "CADC00ULEIE", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (12, 12, "CADC00DFENT", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) (11,  8, "CADC00DFTAG", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) ( 5,  4, "CADC00CNVCLS", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnVCR      [i]) ( 3,  0, "CADC00GCTRL", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_CADCnDIR; i++) {
        (*CADCnDIR      [i]) (26, 26, "CADC00IDEF", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*CADCnDIR      [i]) (25, 25, "CADC00WFLG", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*CADCnDIR      [i]) (24, 24, "CADC00PRTY", 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*CADCnDIR      [i]) (15,  0, "CADC00DR", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_CADCnULTBR; i++) {
        (*CADCnULTBR    [i]) (31, 16, "CADC00ULMTB", 0x7FFF    , "W|R"   , vpcl::SPP_ENABLE);
        (*CADCnULTBR    [i]) (15,  0, "CADC00LLMTB", 0x8000    , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["CADCnADSTCR"]["CADC00ADST"] = &Ccadc_unit_regif::cb_CADCnADSTCR_CADC00ADST;
    mWrCbAPI["CADCnADENDCR"]["CADC00ADEND"] = &Ccadc_unit_regif::cb_CADCnADENDCR_CADC00ADEND;
    mWrCbAPI["CADCnCLBSTCR"]["CADC00CLBST"] = &Ccadc_unit_regif::cb_CADCnCLBSTCR_CADC00CLBST;
    mWrCbAPI["CADCnCLBEDCR"]["CADC00CLBEND"] = &Ccadc_unit_regif::cb_CADCnCLBEDCR_CADC00CLBEND;
    mWrCbAPI["CADCnVCPTRR"]["CADC00VCPTR"] = &Ccadc_unit_regif::cb_CADCnVCPTRR_CADC00VCPTR;
    mWrCbAPI["CADCnECR"  ]["CADC00ULEC"] = &Ccadc_unit_regif::cb_CADCnECR_CADC00ULEC;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Ccadc_unit_regif::~Ccadc_unit_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Ccadc_unit_regif::uint Ccadc_unit_regif::bit_select(
                             cuint val,    ///< [in] Writting address
                             cuint start,  ///< [in] start bit position
                             cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ccadc_unit_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ccadc_unit_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ccadc_unit_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ccadc_unit_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Ccadc_unit_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                     const unsigned char *p_data,  ///< [in] Writing data
                                     cuint size,                   ///< [in] Data size (byte)
                                     bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Ccadc_unit_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size,              ///< [in]  Data size (byte)
                                     bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Ccadc_unit_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                  unsigned char *p_data,          ///< [out] Reading data
                                  cuint size,                     ///< [in]  Data size (byte)
                                  cuint reg_index,                ///< [in] Register index
                                  bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Ccadc_unit_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                  const unsigned char *p_data,      ///< [in] Writing data
                                  cuint size,                       ///< [in] Data size (byte)
                                  cuint reg_index,                  ///< [in] Register index
                                  bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Ccadc_unit_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Ccadc_unit_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Ccadc_unit_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Ccadc_unit_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Ccadc_unit_regif::InitLocalVal()
{
    // Initialize local variables
    for(uint i = 0; i < emNUM_CADCnVCR;    i++) {
        CADCnVCR_CADC00VCULME[i] = 0x0;
        CADCnVCR_CADC00VCLLME[i] = 0x0;
        CADCnVCR_CADC00VCULLMTBS[i] = 0x0;
        CADCnVCR_CADC00ADIE[i] = 0x0;
        CADCnVCR_CADC00ULEIE[i] = 0x0;
        CADCnVCR_CADC00DFENT[i] = 0x0;
        CADCnVCR_CADC00DFTAG[i] = 0x0;
        CADCnVCR_CADC00CNVCLS[i] = 0x0;
        CADCnVCR_CADC00GCTRL[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_CADCnDIR;    i++) {
        CADCnDIR_CADC00IDEF[i] = 0x0;
        CADCnDIR_CADC00WFLG[i] = 0x0;
        CADCnDIR_CADC00PRTY[i] = 0x0;
        CADCnDIR_CADC00DR[i] = 0x0;
    }
    CADCnADSTCR_CADC00ADST = 0x0;
    CADCnADENDCR_CADC00ADEND = 0x0;
    CADCnCLBSTCR_CADC00CLBST = 0x0;
    CADCnCLBEDCR_CADC00CLBEND = 0x0;
    CADCnADTCR_CADC00ENDTRGE = 0x0;
    CADCnADTCR_CADC00STTRGE = 0x0;
    CADCnUCR_CADC00VPRSTE = 0x0;
    CADCnUCR_CADC00RDMA = 0x0;
    CADCnUCR_CADC00DFMT = 0x0;
    CADCnUCR_CADC00VCEP = 0x0;
    CADCnVCPTRR_CADC00VCPTR = 0x0;
    CADCnADSR_CADC00CLBACT = 0x0;
    CADCnADSR_CADC00ADACT = 0x0;
    CADCnUDPTRR_CADC00UDPTR = 0x0;
    CADCnUDIR_CADC00CHNUM = 0x0;
    CADCnUDIR_CADC00UIDEF = 0x0;
    CADCnUDIR_CADC00UWFLG = 0x0;
    CADCnUDIR_CADC00UPRTY = 0x0;
    CADCnUDIR_CADC00UDR = 0x0;
    CADCnSMPCR_CADC00ODAV = 0x1;
    CADCnSFTCR_CADC00RDCLRE = 0x0;
    CADCnSFTCR_CADC00OWEIE = 0x0;
    CADCnSFTCR_CADC00PEIE = 0x0;
    CADCnSFTCR_CADC00IDEIE = 0x0;
    CADCnECR_CADC00ULEC = 0x0;
    CADCnECR_CADC00LLEC = 0x0;
    CADCnECR_CADC00OWEC = 0x0;
    CADCnECR_CADC00PEC = 0x0;
    CADCnER_CADC00ULE = 0x0;
    CADCnER_CADC00LLE = 0x0;
    CADCnER_CADC00ULECAP = 0x0;
    CADCnER_CADC00OWE = 0x0;
    CADCnER_CADC00OWECAP = 0x0;
    CADCnER_CADC00PE = 0x0;
    CADCnER_CADC00PECAP = 0x0;
    CADCnTDLVR_CADC00AN3NLV = 0x0;
    CADCnTDLVR_CADC00AN3PLV = 0x0;
    CADCnTDLVR_CADC00AN2NLV = 0x0;
    CADCnTDLVR_CADC00AN2PLV = 0x0;
    CADCnTDLVR_CADC00AN1NLV = 0x0;
    CADCnTDLVR_CADC00AN1PLV = 0x0;
    CADCnTDLVR_CADC00AN0NLV = 0x0;
    CADCnTDLVR_CADC00AN0PLV = 0x0;
    for(uint i = 0; i < emNUM_CADCnULTBR;  i++) {
        CADCnULTBR_CADC00ULMTB[i] = 0x7FFF;
        CADCnULTBR_CADC00LLMTB[i] = 0x8000;
    }
}

/// Update bit value to local value
/// @return None
void Ccadc_unit_regif::UpdateLocalVal(cuint addr)
{
    if ((0x0000 <= addr) && (addr <= (0x0000)+(4*7)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        CADCnVCR_CADC00VCULME           [i] = (*(CADCnVCR    [i]))["CADC00VCULME"];
        CADCnVCR_CADC00VCLLME           [i] = (*(CADCnVCR    [i]))["CADC00VCLLME"];
        CADCnVCR_CADC00VCULLMTBS        [i] = (*(CADCnVCR    [i]))["CADC00VCULLMTBS"];
        CADCnVCR_CADC00ADIE             [i] = (*(CADCnVCR    [i]))["CADC00ADIE"  ];
        CADCnVCR_CADC00ULEIE            [i] = (*(CADCnVCR    [i]))["CADC00ULEIE" ];
        CADCnVCR_CADC00DFENT            [i] = (*(CADCnVCR    [i]))["CADC00DFENT" ];
        CADCnVCR_CADC00DFTAG            [i] = (*(CADCnVCR    [i]))["CADC00DFTAG" ];
        CADCnVCR_CADC00CNVCLS           [i] = (*(CADCnVCR    [i]))["CADC00CNVCLS"];
        CADCnVCR_CADC00GCTRL            [i] = (*(CADCnVCR    [i]))["CADC00GCTRL" ];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*7)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        CADCnDIR_CADC00IDEF             [i] = (*(CADCnDIR    [i]))["CADC00IDEF"  ];
        CADCnDIR_CADC00WFLG             [i] = (*(CADCnDIR    [i]))["CADC00WFLG"  ];
        CADCnDIR_CADC00PRTY             [i] = (*(CADCnDIR    [i]))["CADC00PRTY"  ];
        CADCnDIR_CADC00DR               [i] = (*(CADCnDIR    [i]))["CADC00DR"    ];
        return;
    }
    if (addr == 0x0040) {
        CADCnADSTCR_CADC00ADST           = (*CADCnADSTCR )["CADC00ADST"  ];
        return;
    }
    if (addr == 0x0044) {
        CADCnADENDCR_CADC00ADEND         = (*CADCnADENDCR)["CADC00ADEND" ];
        return;
    }
    if (addr == 0x0048) {
        CADCnCLBSTCR_CADC00CLBST         = (*CADCnCLBSTCR)["CADC00CLBST" ];
        return;
    }
    if (addr == 0x004C) {
        CADCnCLBEDCR_CADC00CLBEND        = (*CADCnCLBEDCR)["CADC00CLBEND"];
        return;
    }
    if (addr == 0x0050) {
        CADCnADTCR_CADC00ENDTRGE         = (*CADCnADTCR  )["CADC00ENDTRGE"];
        CADCnADTCR_CADC00STTRGE          = (*CADCnADTCR  )["CADC00STTRGE"];
        return;
    }
    if (addr == 0x0054) {
        CADCnUCR_CADC00VPRSTE            = (*CADCnUCR    )["CADC00VPRSTE"];
        CADCnUCR_CADC00RDMA              = (*CADCnUCR    )["CADC00RDMA"  ];
        CADCnUCR_CADC00DFMT              = (*CADCnUCR    )["CADC00DFMT"  ];
        CADCnUCR_CADC00VCEP              = (*CADCnUCR    )["CADC00VCEP"  ];
        return;
    }
    if (addr == 0x0058) {
        CADCnVCPTRR_CADC00VCPTR          = (*CADCnVCPTRR )["CADC00VCPTR" ];
        return;
    }
    if (addr == 0x0060) {
        CADCnADSR_CADC00CLBACT           = (*CADCnADSR   )["CADC00CLBACT"];
        CADCnADSR_CADC00ADACT            = (*CADCnADSR   )["CADC00ADACT" ];
        return;
    }
    if (addr == 0x0064) {
        CADCnUDPTRR_CADC00UDPTR          = (*CADCnUDPTRR )["CADC00UDPTR" ];
        return;
    }
    if (addr == 0x0068) {
        CADCnUDIR_CADC00CHNUM            = (*CADCnUDIR   )["CADC00CHNUM" ];
        CADCnUDIR_CADC00UIDEF            = (*CADCnUDIR   )["CADC00UIDEF" ];
        CADCnUDIR_CADC00UWFLG            = (*CADCnUDIR   )["CADC00UWFLG" ];
        CADCnUDIR_CADC00UPRTY            = (*CADCnUDIR   )["CADC00UPRTY" ];
        CADCnUDIR_CADC00UDR              = (*CADCnUDIR   )["CADC00UDR"   ];
        return;
    }
    if (addr == 0x006C) {
        CADCnSMPCR_CADC00ODAV            = (*CADCnSMPCR  )["CADC00ODAV"  ];
        return;
    }
    if (addr == 0x0070) {
        CADCnSFTCR_CADC00RDCLRE          = (*CADCnSFTCR  )["CADC00RDCLRE"];
        CADCnSFTCR_CADC00OWEIE           = (*CADCnSFTCR  )["CADC00OWEIE" ];
        CADCnSFTCR_CADC00PEIE            = (*CADCnSFTCR  )["CADC00PEIE"  ];
        CADCnSFTCR_CADC00IDEIE           = (*CADCnSFTCR  )["CADC00IDEIE" ];
        return;
    }
    if (addr == 0x0074) {
        CADCnECR_CADC00ULEC              = (*CADCnECR    )["CADC00ULEC"  ];
        CADCnECR_CADC00LLEC              = (*CADCnECR    )["CADC00LLEC"  ];
        CADCnECR_CADC00OWEC              = (*CADCnECR    )["CADC00OWEC"  ];
        CADCnECR_CADC00PEC               = (*CADCnECR    )["CADC00PEC"   ];
        return;
    }
    if (addr == 0x0078) {
        CADCnER_CADC00ULE                = (*CADCnER     )["CADC00ULE"   ];
        CADCnER_CADC00LLE                = (*CADCnER     )["CADC00LLE"   ];
        CADCnER_CADC00ULECAP             = (*CADCnER     )["CADC00ULECAP"];
        CADCnER_CADC00OWE                = (*CADCnER     )["CADC00OWE"   ];
        CADCnER_CADC00OWECAP             = (*CADCnER     )["CADC00OWECAP"];
        CADCnER_CADC00PE                 = (*CADCnER     )["CADC00PE"    ];
        CADCnER_CADC00PECAP              = (*CADCnER     )["CADC00PECAP" ];
        return;
    }
    if (addr == 0x007C) {
        CADCnTDLVR_CADC00AN3NLV          = (*CADCnTDLVR  )["CADC00AN3NLV"];
        CADCnTDLVR_CADC00AN3PLV          = (*CADCnTDLVR  )["CADC00AN3PLV"];
        CADCnTDLVR_CADC00AN2NLV          = (*CADCnTDLVR  )["CADC00AN2NLV"];
        CADCnTDLVR_CADC00AN2PLV          = (*CADCnTDLVR  )["CADC00AN2PLV"];
        CADCnTDLVR_CADC00AN1NLV          = (*CADCnTDLVR  )["CADC00AN1NLV"];
        CADCnTDLVR_CADC00AN1PLV          = (*CADCnTDLVR  )["CADC00AN1PLV"];
        CADCnTDLVR_CADC00AN0NLV          = (*CADCnTDLVR  )["CADC00AN0NLV"];
        CADCnTDLVR_CADC00AN0PLV          = (*CADCnTDLVR  )["CADC00AN0PLV"];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        CADCnULTBR_CADC00ULMTB          [i] = (*(CADCnULTBR  [i]))["CADC00ULMTB" ];
        CADCnULTBR_CADC00LLMTB          [i] = (*(CADCnULTBR  [i]))["CADC00LLMTB" ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Ccadc_unit_regif::UpdateRegVal(cuint addr)
{
    if ((0x0000 <= addr) && (addr <= (0x0000)+(4*7)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        (*(CADCnVCR    [i]))["CADC00VCULME"] = CADCnVCR_CADC00VCULME[i];
        (*(CADCnVCR    [i]))["CADC00VCLLME"] = CADCnVCR_CADC00VCLLME[i];
        (*(CADCnVCR    [i]))["CADC00VCULLMTBS"] = CADCnVCR_CADC00VCULLMTBS[i];
        (*(CADCnVCR    [i]))["CADC00ADIE"  ] = CADCnVCR_CADC00ADIE[i];
        (*(CADCnVCR    [i]))["CADC00ULEIE" ] = CADCnVCR_CADC00ULEIE[i];
        (*(CADCnVCR    [i]))["CADC00DFENT" ] = CADCnVCR_CADC00DFENT[i];
        (*(CADCnVCR    [i]))["CADC00DFTAG" ] = CADCnVCR_CADC00DFTAG[i];
        (*(CADCnVCR    [i]))["CADC00CNVCLS"] = CADCnVCR_CADC00CNVCLS[i];
        (*(CADCnVCR    [i]))["CADC00GCTRL" ] = CADCnVCR_CADC00GCTRL[i];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(4*7)) && ((addr-0x0020)%4 == 0)) {
        uint i = (addr - 0x0020)/4;
        (*(CADCnDIR    [i]))["CADC00IDEF"  ] = CADCnDIR_CADC00IDEF[i];
        (*(CADCnDIR    [i]))["CADC00WFLG"  ] = CADCnDIR_CADC00WFLG[i];
        (*(CADCnDIR    [i]))["CADC00PRTY"  ] = CADCnDIR_CADC00PRTY[i];
        (*(CADCnDIR    [i]))["CADC00DR"    ] = CADCnDIR_CADC00DR[i];
        return;
    }
    if (addr == 0x0040) {
        (*CADCnADSTCR )["CADC00ADST"  ] = CADCnADSTCR_CADC00ADST;
        return;
    }
    if (addr == 0x0044) {
        (*CADCnADENDCR)["CADC00ADEND" ] = CADCnADENDCR_CADC00ADEND;
        return;
    }
    if (addr == 0x0048) {
        (*CADCnCLBSTCR)["CADC00CLBST" ] = CADCnCLBSTCR_CADC00CLBST;
        return;
    }
    if (addr == 0x004C) {
        (*CADCnCLBEDCR)["CADC00CLBEND"] = CADCnCLBEDCR_CADC00CLBEND;
        return;
    }
    if (addr == 0x0050) {
        (*CADCnADTCR  )["CADC00ENDTRGE"] = CADCnADTCR_CADC00ENDTRGE;
        (*CADCnADTCR  )["CADC00STTRGE"] = CADCnADTCR_CADC00STTRGE;
        return;
    }
    if (addr == 0x0054) {
        (*CADCnUCR    )["CADC00VPRSTE"] = CADCnUCR_CADC00VPRSTE;
        (*CADCnUCR    )["CADC00RDMA"  ] = CADCnUCR_CADC00RDMA;
        (*CADCnUCR    )["CADC00DFMT"  ] = CADCnUCR_CADC00DFMT;
        (*CADCnUCR    )["CADC00VCEP"  ] = CADCnUCR_CADC00VCEP;
        return;
    }
    if (addr == 0x0058) {
        (*CADCnVCPTRR )["CADC00VCPTR" ] = CADCnVCPTRR_CADC00VCPTR;
        return;
    }
    if (addr == 0x0060) {
        (*CADCnADSR   )["CADC00CLBACT"] = CADCnADSR_CADC00CLBACT;
        (*CADCnADSR   )["CADC00ADACT" ] = CADCnADSR_CADC00ADACT;
        return;
    }
    if (addr == 0x0064) {
        (*CADCnUDPTRR )["CADC00UDPTR" ] = CADCnUDPTRR_CADC00UDPTR;
        return;
    }
    if (addr == 0x0068) {
        (*CADCnUDIR   )["CADC00CHNUM" ] = CADCnUDIR_CADC00CHNUM;
        (*CADCnUDIR   )["CADC00UIDEF" ] = CADCnUDIR_CADC00UIDEF;
        (*CADCnUDIR   )["CADC00UWFLG" ] = CADCnUDIR_CADC00UWFLG;
        (*CADCnUDIR   )["CADC00UPRTY" ] = CADCnUDIR_CADC00UPRTY;
        (*CADCnUDIR   )["CADC00UDR"   ] = CADCnUDIR_CADC00UDR;
        return;
    }
    if (addr == 0x006C) {
        (*CADCnSMPCR  )["CADC00ODAV"  ] = CADCnSMPCR_CADC00ODAV;
        return;
    }
    if (addr == 0x0070) {
        (*CADCnSFTCR  )["CADC00RDCLRE"] = CADCnSFTCR_CADC00RDCLRE;
        (*CADCnSFTCR  )["CADC00OWEIE" ] = CADCnSFTCR_CADC00OWEIE;
        (*CADCnSFTCR  )["CADC00PEIE"  ] = CADCnSFTCR_CADC00PEIE;
        (*CADCnSFTCR  )["CADC00IDEIE" ] = CADCnSFTCR_CADC00IDEIE;
        return;
    }
    if (addr == 0x0074) {
        (*CADCnECR    )["CADC00ULEC"  ] = CADCnECR_CADC00ULEC;
        (*CADCnECR    )["CADC00LLEC"  ] = CADCnECR_CADC00LLEC;
        (*CADCnECR    )["CADC00OWEC"  ] = CADCnECR_CADC00OWEC;
        (*CADCnECR    )["CADC00PEC"   ] = CADCnECR_CADC00PEC;
        return;
    }
    if (addr == 0x0078) {
        (*CADCnER     )["CADC00ULE"   ] = CADCnER_CADC00ULE;
        (*CADCnER     )["CADC00LLE"   ] = CADCnER_CADC00LLE;
        (*CADCnER     )["CADC00ULECAP"] = CADCnER_CADC00ULECAP;
        (*CADCnER     )["CADC00OWE"   ] = CADCnER_CADC00OWE;
        (*CADCnER     )["CADC00OWECAP"] = CADCnER_CADC00OWECAP;
        (*CADCnER     )["CADC00PE"    ] = CADCnER_CADC00PE;
        (*CADCnER     )["CADC00PECAP" ] = CADCnER_CADC00PECAP;
        return;
    }
    if (addr == 0x007C) {
        (*CADCnTDLVR  )["CADC00AN3NLV"] = CADCnTDLVR_CADC00AN3NLV;
        (*CADCnTDLVR  )["CADC00AN3PLV"] = CADCnTDLVR_CADC00AN3PLV;
        (*CADCnTDLVR  )["CADC00AN2NLV"] = CADCnTDLVR_CADC00AN2NLV;
        (*CADCnTDLVR  )["CADC00AN2PLV"] = CADCnTDLVR_CADC00AN2PLV;
        (*CADCnTDLVR  )["CADC00AN1NLV"] = CADCnTDLVR_CADC00AN1NLV;
        (*CADCnTDLVR  )["CADC00AN1PLV"] = CADCnTDLVR_CADC00AN1PLV;
        (*CADCnTDLVR  )["CADC00AN0NLV"] = CADCnTDLVR_CADC00AN0NLV;
        (*CADCnTDLVR  )["CADC00AN0PLV"] = CADCnTDLVR_CADC00AN0PLV;
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*3)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        (*(CADCnULTBR  [i]))["CADC00ULMTB" ] = CADCnULTBR_CADC00ULMTB[i];
        (*(CADCnULTBR  [i]))["CADC00LLMTB" ] = CADCnULTBR_CADC00LLMTB[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Ccadc_unit_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Ccadc_unit_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Ccadc_unit_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Ccadc_unit_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Ccadc_unit_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Ccadc_unit_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Ccadc_unit_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Ccadc_unit_regif::uint Ccadc_unit_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Ccadc_unit_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Ccadc_unit_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Ccadc_unit_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Ccadc_unit_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Ccadc_unit_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Ccadc_unit_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Ccadc_unit_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
