// -----------------------------------------------------------------------------
// $Id: hsifl10_all_regif.cpp,v 1.5 2020/03/16 02:13:01 quynhnhunguyen Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : /home/truongvv2/RHSIF/GenSrc/hsifl10_all_input/hsifl10_all_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HSIFL10_ALL
// 
// %%REG_INSTANCE  reg_def 8
// 
// %REG_CHANNEL reg_def
//     %%TITLE     name             reg_name        wsize     rsize     length      offset      access      init           factor_start    factor_end      factor_step     support     callback
//     %%REG       RHSIFMDCR        RHSIFMDCR       32          8|16|32   32          0x0         R|W         0x00010100     -               -               -               TRUE        -
//     %%REG       RHSIFSMCR        RHSIFSMCR       32        8|16|32   32          0x4         R|W         0x00000000     -               -               -               TRUE        -
//     %%REG       RHSIFPCR         RHSIFPCR        32        8|16|32   32          0x8         R|W         0x00000001     -               -               -               TRUE        -
//     %%REG       RHSIFSPCR        RHSIFSPCR       32        8|16|32   32          0xC         R|W         0x00000000     -               -               -               TRUE        -
//     %%REG       RHSIFTMDCR       RHSIFTMDCR      32        8|16|32   32          0x10        R|W         0x00000000     -               -               -               TRUE        -    
//     %%REG       RHSIFL1SR        RHSIFL1SR       -         8|16|32   32          0x18        R           0x00010101     -               -               -               TRUE        -
//     %%REG       RHSIFLTXFRMRL1   RHSIFLTXFRMRL1  -         8|16|32   32          0x30        R           0x00000000     -               -               -               TRUE        -
//     %%REG       RHSIFLRXFRMRL1   RHSIFLRXFRMRL1  -         8|16|32   32          0x34        R           0x00000000     -               -               -               TRUE        -
//     %%REG       RHSIFLTXFRMRL2   RHSIFLTXFRMRL2  -         8|16|32   32          0x38        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFLRXFRMRL2   RHSIFLRXFRMRL2  -         8|16|32   32          0x3C        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXRXCR      RHSIFTXRXCR     32        8|16|32   32          0x50        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFICCR        RHSIFICCR       32        8|16|32   32          0x60        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFCCR         RHSIFCCR        32        8|16|32   32          0x70        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXCMPST     RHSIFTXCMPST    -         8|16|32   32          0x80        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXCMPSC     RHSIFTXCMPSC    32        8|16|32   32          0x84        R|W1:0      0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXCMPIE     RHSIFTXCMPIE    32        8|16|32   32          0x88        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXERRST     RHSIFTXERRST    -         8|16|32   32          0x90        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXERRSC     RHSIFTXERRSC    32        8|16|32   32          0x94        R|W1:0      0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFTXERRIE     RHSIFTXERRIE    32        8|16|32   32          0x98        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXCMPST     RHSIFRXCMPST    -         8|16|32   32          0xA0        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXCMPSC     RHSIFRXCMPSC    32        8|16|32   32          0xA4        R|W1:0      0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXCMPIE     RHSIFRXCMPIE    32        8|16|32   32          0xA8        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXERRST     RHSIFRXERRST    -         8|16|32   32          0xB0        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXERRSC     RHSIFRXERRSC    32        8|16|32   32          0xB4        R|W1:0      0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXERRIE     RHSIFRXERRIE    32        8|16|32   32          0xB8        R|W         0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXICST      RHSIFRXICST     -         8|16|32   32          0xC0        R           0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXICSC      RHSIFRXICSC     32        8|16|32   32          0xC4        R|W1:0      0x00000000     -               -               -               TRUE        -
//        %%REG       RHSIFRXICIE      RHSIFRXICIE     32        8|16|32   32          0xC8        R|W         0x00000000     -               -               -               TRUE        -
// 
// 
// %REG_NAME RHSIFMDCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       CTSEN       16      16      1       R|W     TRUE        W
//        %%BIT       CTSV          8       8       1       R|W     TRUE        -
//     %%BIT       CLKSEL      1       1       0       R|W     TRUE        -
//     %%BIT       MST         0       0       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFPCR
//      %%TITLE     name        upper   lower   init    access  support     callback
//      %%BIT       PLLSTBY     0       0       1       R|W     TRUE        -
//     
// %REG_NAME RHSIFSMCR
//      %%TITLE     name        upper   lower   init    access  support     callback
//      %%BIT       SLP         0       0       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFSPCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       FMBR        25      24      0       R|W     TRUE        W
//        %%BIT       TXSP        8       8       0       R|W     TRUE        -
//     %%BIT       RXSP        0       0       0       R|W     TRUE        -
//     
// %REG_NAME RHSIFTMDCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       CKTM        9       9       0       R|W     TRUE        -
//        %%BIT       CKTMSEL     8       8       0       R|W     TRUE        -
//     %%BIT       TXLPBK      1       1       0       R|W     TRUE        -
//     %%BIT       RXLPBK      0       0       0       R|W     TRUE        W
// 
// %REG_NAME RHSIFL1SR
//      %%TITLE     name        upper   lower   init    access  support     callback
//      %%BIT       RCTS        16      16      1       R       TRUE        -
//      %%BIT       TFFUL       9       9       0       R       TRUE        -
//      %%BIT       TFEMP       8       8       1       R       TRUE        -
//      %%BIT       RFFUL       1       1       0       R       TRUE        -
//      %%BIT       RFEMP       0       0       1       R       TRUE        -
// 
// %REG_NAME RHSIFLTXFRMRL1
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       TL1E        16      16      0       R       TRUE        -
//     %%BIT       TL1P        15      8       0       R       TRUE        -
//     %%BIT       TL1H        7       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFLRXFRMRL1
//      %%TITLE     name        upper   lower   init    access  support     callback
//      %%BIT       RL1E        16      16      0       R       TRUE        -
//      %%BIT       RL1P        15      8       0       R       TRUE        -
//      %%BIT       RL1H        7       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFLTXFRMRL2
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       T2L2H       31      16      0       R       TRUE        -
//     %%BIT       T2L1H       7       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFLRXFRMRL2
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       R2L2H       31      16      0       R       TRUE        -
//     %%BIT       R2L1H       7       0       0       R       TRUE        -
//     
// %REG_NAME RHSIFTXRXCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TXEN        16      16      0       R|W     TRUE        -
//     %%BIT       RXEN        0       0       0       R|W     TRUE        -
//     
// %REG_NAME RHSIFICCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       ITRG        16      16      0       R|W     TRUE        W
//     %%BIT       PLD         7       0       0       R|W     TRUE        -
//     
// %REG_NAME RHSIFCCR
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       CTRG        16      16      0       R|W     TRUE        W
//     %%BIT       CTS         8       8       0       R|W     TRUE        -
//     %%BIT       PLD         7       0       0       R|W     TRUE        -
//     
// %REG_NAME RHSIFTXCMPST
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TCL2        16      16      0       R         TRUE        -
//        %%BIT       TCCT        8       8       0       R         TRUE        -
//     %%BIT       TCIC        0       0       0       R         TRUE        -
//     
// %REG_NAME RHSIFTXCMPSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TCCL2       16      16      0       R|W1:0  TRUE        W
//        %%BIT       TCCCT       8       8       0       R|W1:0  TRUE        -
//     %%BIT       TCCIC       0       0       0       R|W1:0  TRUE        -
// 
// %REG_NAME RHSIFTXCMPIE
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       TCEL2       16      16      0       R|W     TRUE        -
//     %%BIT       TCECT       8       8       0       R|W     TRUE        -
//     %%BIT       TCEIC       0       0       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFTXERRST
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TERSZ       31      31      0       R       TRUE        -
//        %%BIT       TERSZI5     20      20      0       R       TRUE        -
//        %%BIT       TERSZI4     19      19      0       R       TRUE        -
//        %%BIT       TERCTF      15      15      0       R       TRUE        -
//        %%BIT       TERCTE      14      14      0       R       TRUE        -
//        %%BIT       TERCTD      13      13      0       R       TRUE        -
//        %%BIT       TERCTC      12      12      0       R       TRUE        -
//        %%BIT       TERCTB      11      11      0       R       TRUE        -
//        %%BIT       TERCTA      10      10      0       R       TRUE        -
//        %%BIT       TERCT9      9       9       0       R       TRUE        -
//        %%BIT       TERCT8      8       8       0       R       TRUE        -
//        %%BIT       TERCT2      2       2       0       R       TRUE        -
//     %%BIT       TERCT1      1       1       0       R       TRUE        -
// 
// %REG_NAME RHSIFTXERRSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TERCSZ      31      31      0       R|W1:0  TRUE        W
//        %%BIT       TERCSZI5    20      20      0       R|W1:0  TRUE        -
//        %%BIT       TERCSZI4    19      19      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTF     15      15      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTE     14      14      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTD     13      13      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTC     12      12      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTB     11      11      0       R|W1:0  TRUE        -
//        %%BIT       TERCCTA     10      10      0       R|W1:0  TRUE        -
//        %%BIT       TERCCT9     9       9       0       R|W1:0  TRUE        -
//        %%BIT       TERCCT8     8       8       0       R|W1:0  TRUE        -
//        %%BIT       TERCCT2     2       2       0       R|W1:0  TRUE        -
//     %%BIT       TERCCT1     1       1       0       R|W1:0  TRUE        -
// 
// %REG_NAME RHSIFTXERRIE
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       TERESZ      31      31      0       R|W     TRUE        -
//        %%BIT       TERESZI5    20      20      0       R|W     TRUE        -
//        %%BIT       TERESZI4    19      19      0       R|W     TRUE        -
//        %%BIT       TERECTF     15      15      0       R|W     TRUE        -
//        %%BIT       TERECTE     14      14      0       R|W     TRUE        -
//        %%BIT       TERECTD     13      13      0       R|W     TRUE        -
//        %%BIT       TERECTC     12      12      0       R|W     TRUE        -
//        %%BIT       TERECTB     11      11      0       R|W     TRUE        -
//        %%BIT       TERECTA     10      10      0       R|W     TRUE        -
//        %%BIT       TERECT9     9       9       0       R|W     TRUE        -
//        %%BIT       TERECT8     8       8       0       R|W     TRUE        -
//        %%BIT       TERECT2     2       2       0       R|W     TRUE        -
//     %%BIT       TERECT1     1       1       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFRXCMPST
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RCL2        16      16      0       R       TRUE        -
//        %%BIT       RCCT        8       8       0       R       TRUE        -
//        %%BIT       RCIC        0       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFRXCMPSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RCCL2       16      16      0       R|W1:0  TRUE        W
//        %%BIT       RCCCT       8       8       0       R|W1:0  TRUE        -
//        %%BIT       RCCIC       0       0       0       R|W1:0  TRUE        -
// 
// %REG_NAME RHSIFRXCMPIE
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RCEL2       16      16      0       R|W     TRUE        -
//        %%BIT       RCECT       8       8       0       R|W     TRUE        -
//        %%BIT       RCEIC       0       0       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFRXERRST
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RERSZ       31      31      0       R       TRUE        -
//        %%BIT       RERSZI5     20      20      0       R       TRUE        -
//        %%BIT       RERSZI4     19      19      0       R       TRUE        -
//        %%BIT       RERCTF      15      15      0       R       TRUE        -
//        %%BIT       RERCTE      14      14      0       R       TRUE        -
//        %%BIT       RERCTD      13      13      0       R       TRUE        -
//        %%BIT       RERCTC      12      12      0       R       TRUE        -
//        %%BIT       RERCTB      11      11      0       R       TRUE        -
//        %%BIT       RERCTA      10      10      0       R       TRUE        -
//        %%BIT       RERCT9      9       9       0       R       TRUE        -
//        %%BIT       RERCT8      8       8       0       R       TRUE        -
//        %%BIT       RERCT2      2       2       0       R       TRUE        -
//     %%BIT       RERCT1      1       1       0       R       TRUE        -
//        %%BIT       RERIPV      0       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFRXERRSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RERCSZ      31      31      0       R|W1:0  TRUE        W
//        %%BIT       RERCSZI5    20      20      0       R|W1:0  TRUE        -
//        %%BIT       RERCSZI4    19      19      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTF     15      15      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTE     14      14      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTD     13      13      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTC     12      12      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTB     11      11      0       R|W1:0  TRUE        -
//        %%BIT       RERCCTA     10      10      0       R|W1:0  TRUE        -
//        %%BIT       RERCCT9     9       9       0       R|W1:0  TRUE        -
//        %%BIT       RERCCT8     8       8       0       R|W1:0  TRUE        -
//        %%BIT       RERCCT2     2       2       0       R|W1:0  TRUE        -
//     %%BIT       RERCCT1     1       1       0       R|W1:0  TRUE        -
//        %%BIT       RERCIPV     0       0       0       R|W1:0  TRUE        -
// 
// %REG_NAME RHSIFRXERRIE
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RERESZ      31      31      0       R|W     TRUE        -
//        %%BIT       RERESZI5    20      20      0       R|W     TRUE        -
//        %%BIT       RERESZI4    19      19      0       R|W     TRUE        -
//        %%BIT       RERECTF     15      15      0       R|W     TRUE        -
//        %%BIT       RERECTE     14      14      0       R|W     TRUE        -
//        %%BIT       RERECTD     13      13      0       R|W     TRUE        -
//        %%BIT       RERECTC     12      12      0       R|W     TRUE        -
//        %%BIT       RERECTB     11      11      0       R|W     TRUE        -
//        %%BIT       RERECTA     10      10      0       R|W     TRUE        -
//        %%BIT       RERECT9     9       9       0       R|W     TRUE        -
//        %%BIT       RERECT8     8       8       0       R|W     TRUE        -
//        %%BIT       RERECT2     2       2       0       R|W     TRUE        -
//     %%BIT       RERECT1     1       1       0       R|W     TRUE        -
//        %%BIT       REREIPV     0       0       0       R|W     TRUE        -
// 
// %REG_NAME RHSIFRXICST
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RIPA        16      16      0       R       TRUE        -
//        %%BIT       RITOL       11      11      0       R       TRUE        -
//        %%BIT       RITOF       10      10      0       R       TRUE        -
//        %%BIT       RITON       9       9       0       R       TRUE        -
//        %%BIT       RIDT        8       8       0       R       TRUE        -
//        %%BIT       RIET        7       7       0       R       TRUE        -
//        %%BIT       RIFT        6       6       0       R       TRUE        -
//        %%BIT       RIST        5       5       0       R       TRUE        -
//        %%BIT       RIFR        4       4       0       R       TRUE        -
//        %%BIT       RISR        3       3       0       R       TRUE        -
//        %%BIT       RIPSTP      2       2       0       R       TRUE        -
//        %%BIT       RIPSRT      1       1       0       R       TRUE        -
//     %%BIT       RIPG        0       0       0       R       TRUE        -
// 
// %REG_NAME RHSIFRXICSC
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RICPA       16      16      0       R|W1:0  TRUE        W
//        %%BIT       RICTOL      11      11      0       R|W1:0  TRUE        -
//        %%BIT       RICTOF      10      10      0       R|W1:0  TRUE        -
//        %%BIT       RICTON      9       9       0       R|W1:0  TRUE        -
//        %%BIT       RICDT       8       8       0       R|W1:0  TRUE        -
//        %%BIT       RICET       7       7       0       R|W1:0  TRUE        -
//        %%BIT       RICFT       6       6       0       R|W1:0  TRUE        -
//        %%BIT       RICST       5       5       0       R|W1:0  TRUE        -
//        %%BIT       RICFR       4       4       0       R|W1:0  TRUE        -
//        %%BIT       RICSR       3       3       0       R|W1:0  TRUE        -
//        %%BIT       RICPSTP     2       2       0       R|W1:0  TRUE        -
//        %%BIT       RICPSRT     1       1       0       R|W1:0  TRUE        -
//     %%BIT       RICPG       0       0       0       R|W1:0  TRUE        -
// 
// %REG_NAME RHSIFRXICIE
//     %%TITLE     name        upper   lower   init    access  support     callback
//        %%BIT       RIEPA        16      16      0       R|W    TRUE        -
//        %%BIT       RIETOL       11      11      0       R|W    TRUE        -
//        %%BIT       RIETOF       10      10      0       R|W    TRUE        -
//        %%BIT       RIETON       9       9       0       R|W    TRUE        -
//        %%BIT       RIEDT        8       8       0       R|W    TRUE        -
//        %%BIT       RIEET        7       7       0       R|W    TRUE        -
//        %%BIT       RIEFT        6       6       0       R|W    TRUE        -
//        %%BIT       RIEST        5       5       0       R|W    TRUE        -
//        %%BIT       RIEFR        4       4       0       R|W    TRUE        -
//        %%BIT       RIESR        3       3       0       R|W    TRUE        -
//        %%BIT       RIEPSTP      2       2       0       R|W    TRUE        -
//        %%BIT       RIEPSRT      1       1       0       R|W    TRUE        -
//     %%BIT       RIEPG        0       0       0       R|W    TRUE        -
////////////////////////////////////////////////////////////////////////////////
/// @file hsifl10_all_regif.cpp
/// @brief Register IF class of model HSIFL10_ALL
/// $Id: hsifl10_all_regif.cpp,v 1.5 2020/03/16 02:13:01 quynhnhunguyen Exp $
/// $Date: 2020/03/16 02:13:01 $
/// $Revison$
/// $Author: quynhnhunguyen $
////////////////////////////////////////////////////////////////////////////////
#include "hsifl10_all_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Chsifl10_all_regif::Chsifl10_all_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xCC/4))
    #endif
{
    CommandInit();
    RHSIFMDCR      = new vpcl::re_register(0x0000, this, "RHSIFMDCR"     , name.c_str());
    RHSIFSMCR      = new vpcl::re_register(0x0004, this, "RHSIFSMCR"     , name.c_str());
    RHSIFPCR       = new vpcl::re_register(0x0008, this, "RHSIFPCR"      , name.c_str());
    RHSIFSPCR      = new vpcl::re_register(0x000C, this, "RHSIFSPCR"     , name.c_str());
    RHSIFTMDCR     = new vpcl::re_register(0x0010, this, "RHSIFTMDCR"    , name.c_str());
    RHSIFL1SR      = new vpcl::re_register(0x0018, this, "RHSIFL1SR"     , name.c_str());
    RHSIFLTXFRMRL1 = new vpcl::re_register(0x0030, this, "RHSIFLTXFRMRL1", name.c_str());
    RHSIFLRXFRMRL1 = new vpcl::re_register(0x0034, this, "RHSIFLRXFRMRL1", name.c_str());
    RHSIFLTXFRMRL2 = new vpcl::re_register(0x0038, this, "RHSIFLTXFRMRL2", name.c_str());
    RHSIFLRXFRMRL2 = new vpcl::re_register(0x003C, this, "RHSIFLRXFRMRL2", name.c_str());
    RHSIFTXRXCR    = new vpcl::re_register(0x0050, this, "RHSIFTXRXCR"   , name.c_str());
    RHSIFICCR      = new vpcl::re_register(0x0060, this, "RHSIFICCR"     , name.c_str());
    RHSIFCCR       = new vpcl::re_register(0x0070, this, "RHSIFCCR"      , name.c_str());
    RHSIFTXCMPST   = new vpcl::re_register(0x0080, this, "RHSIFTXCMPST"  , name.c_str());
    RHSIFTXCMPSC   = new vpcl::re_register(0x0084, this, "RHSIFTXCMPSC"  , name.c_str());
    RHSIFTXCMPIE   = new vpcl::re_register(0x0088, this, "RHSIFTXCMPIE"  , name.c_str());
    RHSIFTXERRST   = new vpcl::re_register(0x0090, this, "RHSIFTXERRST"  , name.c_str());
    RHSIFTXERRSC   = new vpcl::re_register(0x0094, this, "RHSIFTXERRSC"  , name.c_str());
    RHSIFTXERRIE   = new vpcl::re_register(0x0098, this, "RHSIFTXERRIE"  , name.c_str());
    RHSIFRXCMPST   = new vpcl::re_register(0x00A0, this, "RHSIFRXCMPST"  , name.c_str());
    RHSIFRXCMPSC   = new vpcl::re_register(0x00A4, this, "RHSIFRXCMPSC"  , name.c_str());
    RHSIFRXCMPIE   = new vpcl::re_register(0x00A8, this, "RHSIFRXCMPIE"  , name.c_str());
    RHSIFRXERRST   = new vpcl::re_register(0x00B0, this, "RHSIFRXERRST"  , name.c_str());
    RHSIFRXERRSC   = new vpcl::re_register(0x00B4, this, "RHSIFRXERRSC"  , name.c_str());
    RHSIFRXERRIE   = new vpcl::re_register(0x00B8, this, "RHSIFRXERRIE"  , name.c_str());
    RHSIFRXICST    = new vpcl::re_register(0x00C0, this, "RHSIFRXICST"   , name.c_str());
    RHSIFRXICSC    = new vpcl::re_register(0x00C4, this, "RHSIFRXICSC"   , name.c_str());
    RHSIFRXICIE    = new vpcl::re_register(0x00C8, this, "RHSIFRXICIE"   , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0004]     = index;
    mRegMap[0x0004 + 1] = index;
    mRegMap[0x0004 + 2] = index;
    mRegMap[0x0004 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    mRegMap[0x0050]     = index;
    mRegMap[0x0050 + 1] = index;
    mRegMap[0x0050 + 2] = index;
    mRegMap[0x0050 + 3] = index++;
    mRegMap[0x0060]     = index;
    mRegMap[0x0060 + 1] = index;
    mRegMap[0x0060 + 2] = index;
    mRegMap[0x0060 + 3] = index++;
    mRegMap[0x0070]     = index;
    mRegMap[0x0070 + 1] = index;
    mRegMap[0x0070 + 2] = index;
    mRegMap[0x0070 + 3] = index++;
    mRegMap[0x0080]     = index;
    mRegMap[0x0080 + 1] = index;
    mRegMap[0x0080 + 2] = index;
    mRegMap[0x0080 + 3] = index++;
    mRegMap[0x0084]     = index;
    mRegMap[0x0084 + 1] = index;
    mRegMap[0x0084 + 2] = index;
    mRegMap[0x0084 + 3] = index++;
    mRegMap[0x0088]     = index;
    mRegMap[0x0088 + 1] = index;
    mRegMap[0x0088 + 2] = index;
    mRegMap[0x0088 + 3] = index++;
    mRegMap[0x0090]     = index;
    mRegMap[0x0090 + 1] = index;
    mRegMap[0x0090 + 2] = index;
    mRegMap[0x0090 + 3] = index++;
    mRegMap[0x0094]     = index;
    mRegMap[0x0094 + 1] = index;
    mRegMap[0x0094 + 2] = index;
    mRegMap[0x0094 + 3] = index++;
    mRegMap[0x0098]     = index;
    mRegMap[0x0098 + 1] = index;
    mRegMap[0x0098 + 2] = index;
    mRegMap[0x0098 + 3] = index++;
    mRegMap[0x00A0]     = index;
    mRegMap[0x00A0 + 1] = index;
    mRegMap[0x00A0 + 2] = index;
    mRegMap[0x00A0 + 3] = index++;
    mRegMap[0x00A4]     = index;
    mRegMap[0x00A4 + 1] = index;
    mRegMap[0x00A4 + 2] = index;
    mRegMap[0x00A4 + 3] = index++;
    mRegMap[0x00A8]     = index;
    mRegMap[0x00A8 + 1] = index;
    mRegMap[0x00A8 + 2] = index;
    mRegMap[0x00A8 + 3] = index++;
    mRegMap[0x00B0]     = index;
    mRegMap[0x00B0 + 1] = index;
    mRegMap[0x00B0 + 2] = index;
    mRegMap[0x00B0 + 3] = index++;
    mRegMap[0x00B4]     = index;
    mRegMap[0x00B4 + 1] = index;
    mRegMap[0x00B4 + 2] = index;
    mRegMap[0x00B4 + 3] = index++;
    mRegMap[0x00B8]     = index;
    mRegMap[0x00B8 + 1] = index;
    mRegMap[0x00B8 + 2] = index;
    mRegMap[0x00B8 + 3] = index++;
    mRegMap[0x00C0]     = index;
    mRegMap[0x00C0 + 1] = index;
    mRegMap[0x00C0 + 2] = index;
    mRegMap[0x00C0 + 3] = index++;
    mRegMap[0x00C4]     = index;
    mRegMap[0x00C4 + 1] = index;
    mRegMap[0x00C4 + 2] = index;
    mRegMap[0x00C4 + 3] = index++;
    mRegMap[0x00C8]     = index;
    mRegMap[0x00C8 + 1] = index;
    mRegMap[0x00C8 + 2] = index;
    mRegMap[0x00C8 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_RHSIFMDCR       , RHSIFMDCR->name()     , RHSIFMDCR->addr()     );
    cw_instantiate_reg(CW_RHSIFSMCR       , RHSIFSMCR->name()     , RHSIFSMCR->addr()     );
    cw_instantiate_reg(CW_RHSIFPCR        , RHSIFPCR->name()      , RHSIFPCR->addr()      );
    cw_instantiate_reg(CW_RHSIFSPCR       , RHSIFSPCR->name()     , RHSIFSPCR->addr()     );
    cw_instantiate_reg(CW_RHSIFTMDCR      , RHSIFTMDCR->name()    , RHSIFTMDCR->addr()    );
    cw_instantiate_reg(CW_RHSIFL1SR       , RHSIFL1SR->name()     , RHSIFL1SR->addr()     );
    cw_instantiate_reg(CW_RHSIFLTXFRMRL1  , RHSIFLTXFRMRL1->name(), RHSIFLTXFRMRL1->addr());
    cw_instantiate_reg(CW_RHSIFLRXFRMRL1  , RHSIFLRXFRMRL1->name(), RHSIFLRXFRMRL1->addr());
    cw_instantiate_reg(CW_RHSIFLTXFRMRL2  , RHSIFLTXFRMRL2->name(), RHSIFLTXFRMRL2->addr());
    cw_instantiate_reg(CW_RHSIFLRXFRMRL2  , RHSIFLRXFRMRL2->name(), RHSIFLRXFRMRL2->addr());
    cw_instantiate_reg(CW_RHSIFTXRXCR     , RHSIFTXRXCR->name()   , RHSIFTXRXCR->addr()   );
    cw_instantiate_reg(CW_RHSIFICCR       , RHSIFICCR->name()     , RHSIFICCR->addr()     );
    cw_instantiate_reg(CW_RHSIFCCR        , RHSIFCCR->name()      , RHSIFCCR->addr()      );
    cw_instantiate_reg(CW_RHSIFTXCMPST    , RHSIFTXCMPST->name()  , RHSIFTXCMPST->addr()  );
    cw_instantiate_reg(CW_RHSIFTXCMPSC    , RHSIFTXCMPSC->name()  , RHSIFTXCMPSC->addr()  );
    cw_instantiate_reg(CW_RHSIFTXCMPIE    , RHSIFTXCMPIE->name()  , RHSIFTXCMPIE->addr()  );
    cw_instantiate_reg(CW_RHSIFTXERRST    , RHSIFTXERRST->name()  , RHSIFTXERRST->addr()  );
    cw_instantiate_reg(CW_RHSIFTXERRSC    , RHSIFTXERRSC->name()  , RHSIFTXERRSC->addr()  );
    cw_instantiate_reg(CW_RHSIFTXERRIE    , RHSIFTXERRIE->name()  , RHSIFTXERRIE->addr()  );
    cw_instantiate_reg(CW_RHSIFRXCMPST    , RHSIFRXCMPST->name()  , RHSIFRXCMPST->addr()  );
    cw_instantiate_reg(CW_RHSIFRXCMPSC    , RHSIFRXCMPSC->name()  , RHSIFRXCMPSC->addr()  );
    cw_instantiate_reg(CW_RHSIFRXCMPIE    , RHSIFRXCMPIE->name()  , RHSIFRXCMPIE->addr()  );
    cw_instantiate_reg(CW_RHSIFRXERRST    , RHSIFRXERRST->name()  , RHSIFRXERRST->addr()  );
    cw_instantiate_reg(CW_RHSIFRXERRSC    , RHSIFRXERRSC->name()  , RHSIFRXERRSC->addr()  );
    cw_instantiate_reg(CW_RHSIFRXERRIE    , RHSIFRXERRIE->name()  , RHSIFRXERRIE->addr()  );
    cw_instantiate_reg(CW_RHSIFRXICST     , RHSIFRXICST->name()   , RHSIFRXICST->addr()   );
    cw_instantiate_reg(CW_RHSIFRXICSC     , RHSIFRXICSC->name()   , RHSIFRXICSC->addr()   );
    cw_instantiate_reg(CW_RHSIFRXICIE     , RHSIFRXICIE->name()   , RHSIFRXICIE->addr()   );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(RHSIFMDCR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFSMCR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFPCR        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFSPCR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTMDCR      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFL1SR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFLTXFRMRL1  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFLRXFRMRL1  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFLTXFRMRL2  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFLRXFRMRL2  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXRXCR     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFICCR       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFCCR        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXCMPST    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXCMPSC    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXCMPIE    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXERRST    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXERRSC    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFTXERRIE    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXCMPST    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXCMPSC    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXCMPIE    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXERRST    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXERRSC    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXERRIE    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXICST     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXICSC     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RHSIFRXICIE     , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*RHSIFMDCR       ) (16, 16, "CTSEN"   , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFMDCR       ) ( 8,  8, "CTSV"    , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFMDCR       ) ( 1,  1, "CLKSEL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFMDCR       ) ( 0,  0, "MST"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFSMCR       ) ( 0,  0, "SLP"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFPCR        ) ( 0,  0, "PLLSTBY" , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFSPCR       ) (25, 24, "FMBR"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFSPCR       ) ( 8,  8, "TXSP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFSPCR       ) ( 0,  0, "RXSP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTMDCR      ) ( 9,  9, "CKTM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTMDCR      ) ( 8,  8, "CKTMSEL" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTMDCR      ) ( 1,  1, "TXLPBK"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTMDCR      ) ( 0,  0, "RXLPBK"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFL1SR       ) (16, 16, "RCTS"    , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFL1SR       ) ( 9,  9, "TFFUL"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFL1SR       ) ( 8,  8, "TFEMP"   , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFL1SR       ) ( 1,  1, "RFFUL"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFL1SR       ) ( 0,  0, "RFEMP"   , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLTXFRMRL1  ) (16, 16, "TL1E"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLTXFRMRL1  ) (15,  8, "TL1P"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLTXFRMRL1  ) ( 7,  0, "TL1H"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLRXFRMRL1  ) (16, 16, "RL1E"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLRXFRMRL1  ) (15,  8, "RL1P"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLRXFRMRL1  ) ( 7,  0, "RL1H"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLTXFRMRL2  ) (31, 16, "T2L2H"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLTXFRMRL2  ) ( 7,  0, "T2L1H"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLRXFRMRL2  ) (31, 16, "R2L2H"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFLRXFRMRL2  ) ( 7,  0, "R2L1H"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXRXCR     ) (16, 16, "TXEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXRXCR     ) ( 0,  0, "RXEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFICCR       ) (16, 16, "ITRG"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFICCR       ) ( 7,  0, "PLD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFCCR        ) (16, 16, "CTRG"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFCCR        ) ( 8,  8, "CTS"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFCCR        ) ( 7,  0, "PLD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPST    ) (16, 16, "TCL2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPST    ) ( 8,  8, "TCCT"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPST    ) ( 0,  0, "TCIC"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPSC    ) (16, 16, "TCCL2"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXCMPSC    ) ( 8,  8, "TCCCT"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXCMPSC    ) ( 0,  0, "TCCIC"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXCMPIE    ) (16, 16, "TCEL2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPIE    ) ( 8,  8, "TCECT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXCMPIE    ) ( 0,  0, "TCEIC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (31, 31, "TERSZ"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (20, 20, "TERSZI5" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (19, 19, "TERSZI4" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (15, 15, "TERCTF"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (14, 14, "TERCTE"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (13, 13, "TERCTD"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (12, 12, "TERCTC"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (11, 11, "TERCTB"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) (10, 10, "TERCTA"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) ( 9,  9, "TERCT9"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) ( 8,  8, "TERCT8"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) ( 2,  2, "TERCT2"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRST    ) ( 1,  1, "TERCT1"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (31, 31, "TERCSZ"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (20, 20, "TERCSZI5", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (19, 19, "TERCSZI4", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (15, 15, "TERCCTF" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (14, 14, "TERCCTE" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (13, 13, "TERCCTD" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (12, 12, "TERCCTC" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (11, 11, "TERCCTB" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) (10, 10, "TERCCTA" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) ( 9,  9, "TERCCT9" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) ( 8,  8, "TERCCT8" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) ( 2,  2, "TERCCT2" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRSC    ) ( 1,  1, "TERCCT1" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (31, 31, "TERESZ"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (20, 20, "TERESZI5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (19, 19, "TERESZI4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (15, 15, "TERECTF" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (14, 14, "TERECTE" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (13, 13, "TERECTD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (12, 12, "TERECTC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (11, 11, "TERECTB" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) (10, 10, "TERECTA" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) ( 9,  9, "TERECT9" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) ( 8,  8, "TERECT8" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) ( 2,  2, "TERECT2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFTXERRIE    ) ( 1,  1, "TERECT1" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPST    ) (16, 16, "RCL2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPST    ) ( 8,  8, "RCCT"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPST    ) ( 0,  0, "RCIC"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPSC    ) (16, 16, "RCCL2"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXCMPSC    ) ( 8,  8, "RCCCT"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXCMPSC    ) ( 0,  0, "RCCIC"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXCMPIE    ) (16, 16, "RCEL2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPIE    ) ( 8,  8, "RCECT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXCMPIE    ) ( 0,  0, "RCEIC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (31, 31, "RERSZ"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (20, 20, "RERSZI5" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (19, 19, "RERSZI4" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (15, 15, "RERCTF"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (14, 14, "RERCTE"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (13, 13, "RERCTD"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (12, 12, "RERCTC"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (11, 11, "RERCTB"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) (10, 10, "RERCTA"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) ( 9,  9, "RERCT9"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) ( 8,  8, "RERCT8"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) ( 2,  2, "RERCT2"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) ( 1,  1, "RERCT1"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRST    ) ( 0,  0, "RERIPV"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (31, 31, "RERCSZ"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (20, 20, "RERCSZI5", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (19, 19, "RERCSZI4", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (15, 15, "RERCCTF" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (14, 14, "RERCCTE" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (13, 13, "RERCCTD" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (12, 12, "RERCCTC" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (11, 11, "RERCCTB" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) (10, 10, "RERCCTA" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) ( 9,  9, "RERCCT9" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) ( 8,  8, "RERCCT8" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) ( 2,  2, "RERCCT2" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) ( 1,  1, "RERCCT1" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRSC    ) ( 0,  0, "RERCIPV" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (31, 31, "RERESZ"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (20, 20, "RERESZI5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (19, 19, "RERESZI4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (15, 15, "RERECTF" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (14, 14, "RERECTE" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (13, 13, "RERECTD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (12, 12, "RERECTC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (11, 11, "RERECTB" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) (10, 10, "RERECTA" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) ( 9,  9, "RERECT9" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) ( 8,  8, "RERECT8" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) ( 2,  2, "RERECT2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) ( 1,  1, "RERECT1" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXERRIE    ) ( 0,  0, "REREIPV" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) (16, 16, "RIPA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) (11, 11, "RITOL"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) (10, 10, "RITOF"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 9,  9, "RITON"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 8,  8, "RIDT"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 7,  7, "RIET"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 6,  6, "RIFT"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 5,  5, "RIST"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 4,  4, "RIFR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 3,  3, "RISR"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 2,  2, "RIPSTP"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 1,  1, "RIPSRT"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICST     ) ( 0,  0, "RIPG"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) (16, 16, "RICPA"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) (11, 11, "RICTOL"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) (10, 10, "RICTOF"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 9,  9, "RICTON"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 8,  8, "RICDT"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 7,  7, "RICET"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 6,  6, "RICFT"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 5,  5, "RICST"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 4,  4, "RICFR"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 3,  3, "RICSR"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 2,  2, "RICPSTP" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 1,  1, "RICPSRT" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICSC     ) ( 0,  0, "RICPG"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) (16, 16, "RIEPA"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) (11, 11, "RIETOL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) (10, 10, "RIETOF"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 9,  9, "RIETON"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 8,  8, "RIEDT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 7,  7, "RIEET"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 6,  6, "RIEFT"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 5,  5, "RIEST"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 4,  4, "RIEFR"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 3,  3, "RIESR"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 2,  2, "RIEPSTP" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 1,  1, "RIEPSRT" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RHSIFRXICIE     ) ( 0,  0, "RIEPG"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["RHSIFMDCR"   ]["CTSEN"       ] = &Chsifl10_all_regif::cb_RHSIFMDCR_CTSEN;
    mWrCbAPI["RHSIFSPCR"   ]["FMBR"        ] = &Chsifl10_all_regif::cb_RHSIFSPCR_FMBR;
    mWrCbAPI["RHSIFTMDCR"  ]["RXLPBK"      ] = &Chsifl10_all_regif::cb_RHSIFTMDCR_RXLPBK;
    mWrCbAPI["RHSIFICCR"   ]["ITRG"        ] = &Chsifl10_all_regif::cb_RHSIFICCR_ITRG;
    mWrCbAPI["RHSIFCCR"    ]["CTRG"        ] = &Chsifl10_all_regif::cb_RHSIFCCR_CTRG;
    mWrCbAPI["RHSIFTXCMPSC"]["TCCL2"       ] = &Chsifl10_all_regif::cb_RHSIFTXCMPSC_TCCL2;
    mWrCbAPI["RHSIFTXERRSC"]["TERCSZ"      ] = &Chsifl10_all_regif::cb_RHSIFTXERRSC_TERCSZ;
    mWrCbAPI["RHSIFRXCMPSC"]["RCCL2"       ] = &Chsifl10_all_regif::cb_RHSIFRXCMPSC_RCCL2;
    mWrCbAPI["RHSIFRXERRSC"]["RERCSZ"      ] = &Chsifl10_all_regif::cb_RHSIFRXERRSC_RERCSZ;
    mWrCbAPI["RHSIFRXICSC" ]["RICPA"       ] = &Chsifl10_all_regif::cb_RHSIFRXICSC_RICPA;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Chsifl10_all_regif::~Chsifl10_all_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Chsifl10_all_regif::uint Chsifl10_all_regif::bit_select(
                                cuint val,    ///< [in] Writting address
                                cuint start,  ///< [in] start bit position
                                cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsifl10_all_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsifl10_all_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsifl10_all_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                    const unsigned char *p_data,   ///< [in] Writing data
                                    cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsifl10_all_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsifl10_all_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                        const unsigned char *p_data,  ///< [in] Writing data
                                        cuint size,                   ///< [in] Data size (byte)
                                        bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsifl10_all_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                        unsigned char *p_data,   ///< [out] Reading data
                                        cuint size,              ///< [in]  Data size (byte)
                                        bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Chsifl10_all_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                     unsigned char *p_data,          ///< [out] Reading data
                                     cuint size,                     ///< [in]  Data size (byte)
                                     cuint reg_index,                ///< [in] Register index
                                     bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Chsifl10_all_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                     const unsigned char *p_data,      ///< [in] Writing data
                                     cuint size,                       ///< [in] Data size (byte)
                                     cuint reg_index,                  ///< [in] Register index
                                     bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Chsifl10_all_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Chsifl10_all_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Chsifl10_all_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Chsifl10_all_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Chsifl10_all_regif::InitLocalVal()
{
    // Initialize local variables
    RHSIFMDCR_CTSEN = 0x1;
    RHSIFMDCR_CTSV = 0x1;
    RHSIFMDCR_CLKSEL = 0x0;
    RHSIFMDCR_MST  = 0x0;
    RHSIFSMCR_SLP  = 0x0;
    RHSIFPCR_PLLSTBY = 0x1;
    RHSIFSPCR_FMBR = 0x0;
    RHSIFSPCR_TXSP = 0x0;
    RHSIFSPCR_RXSP = 0x0;
    RHSIFTMDCR_CKTM = 0x0;
    RHSIFTMDCR_CKTMSEL = 0x0;
    RHSIFTMDCR_TXLPBK = 0x0;
    RHSIFTMDCR_RXLPBK = 0x0;
    RHSIFL1SR_RCTS = 0x1;
    RHSIFL1SR_TFFUL = 0x0;
    RHSIFL1SR_TFEMP = 0x1;
    RHSIFL1SR_RFFUL = 0x0;
    RHSIFL1SR_RFEMP = 0x1;
    RHSIFLTXFRMRL1_TL1E = 0x0;
    RHSIFLTXFRMRL1_TL1P = 0x0;
    RHSIFLTXFRMRL1_TL1H = 0x0;
    RHSIFLRXFRMRL1_RL1E = 0x0;
    RHSIFLRXFRMRL1_RL1P = 0x0;
    RHSIFLRXFRMRL1_RL1H = 0x0;
    RHSIFLTXFRMRL2_T2L2H = 0x0;
    RHSIFLTXFRMRL2_T2L1H = 0x0;
    RHSIFLRXFRMRL2_R2L2H = 0x0;
    RHSIFLRXFRMRL2_R2L1H = 0x0;
    RHSIFTXRXCR_TXEN = 0x0;
    RHSIFTXRXCR_RXEN = 0x0;
    RHSIFICCR_ITRG = 0x0;
    RHSIFICCR_PLD  = 0x0;
    RHSIFCCR_CTRG  = 0x0;
    RHSIFCCR_CTS   = 0x0;
    RHSIFCCR_PLD   = 0x0;
    RHSIFTXCMPST_TCL2 = 0x0;
    RHSIFTXCMPST_TCCT = 0x0;
    RHSIFTXCMPST_TCIC = 0x0;
    RHSIFTXCMPSC_TCCL2 = 0x0;
    RHSIFTXCMPSC_TCCCT = 0x0;
    RHSIFTXCMPSC_TCCIC = 0x0;
    RHSIFTXCMPIE_TCEL2 = 0x0;
    RHSIFTXCMPIE_TCECT = 0x0;
    RHSIFTXCMPIE_TCEIC = 0x0;
    RHSIFTXERRST_TERSZ = 0x0;
    RHSIFTXERRST_TERSZI5 = 0x0;
    RHSIFTXERRST_TERSZI4 = 0x0;
    RHSIFTXERRST_TERCTF = 0x0;
    RHSIFTXERRST_TERCTE = 0x0;
    RHSIFTXERRST_TERCTD = 0x0;
    RHSIFTXERRST_TERCTC = 0x0;
    RHSIFTXERRST_TERCTB = 0x0;
    RHSIFTXERRST_TERCTA = 0x0;
    RHSIFTXERRST_TERCT9 = 0x0;
    RHSIFTXERRST_TERCT8 = 0x0;
    RHSIFTXERRST_TERCT2 = 0x0;
    RHSIFTXERRST_TERCT1 = 0x0;
    RHSIFTXERRSC_TERCSZ = 0x0;
    RHSIFTXERRSC_TERCSZI5 = 0x0;
    RHSIFTXERRSC_TERCSZI4 = 0x0;
    RHSIFTXERRSC_TERCCTF = 0x0;
    RHSIFTXERRSC_TERCCTE = 0x0;
    RHSIFTXERRSC_TERCCTD = 0x0;
    RHSIFTXERRSC_TERCCTC = 0x0;
    RHSIFTXERRSC_TERCCTB = 0x0;
    RHSIFTXERRSC_TERCCTA = 0x0;
    RHSIFTXERRSC_TERCCT9 = 0x0;
    RHSIFTXERRSC_TERCCT8 = 0x0;
    RHSIFTXERRSC_TERCCT2 = 0x0;
    RHSIFTXERRSC_TERCCT1 = 0x0;
    RHSIFTXERRIE_TERESZ = 0x0;
    RHSIFTXERRIE_TERESZI5 = 0x0;
    RHSIFTXERRIE_TERESZI4 = 0x0;
    RHSIFTXERRIE_TERECTF = 0x0;
    RHSIFTXERRIE_TERECTE = 0x0;
    RHSIFTXERRIE_TERECTD = 0x0;
    RHSIFTXERRIE_TERECTC = 0x0;
    RHSIFTXERRIE_TERECTB = 0x0;
    RHSIFTXERRIE_TERECTA = 0x0;
    RHSIFTXERRIE_TERECT9 = 0x0;
    RHSIFTXERRIE_TERECT8 = 0x0;
    RHSIFTXERRIE_TERECT2 = 0x0;
    RHSIFTXERRIE_TERECT1 = 0x0;
    RHSIFRXCMPST_RCL2 = 0x0;
    RHSIFRXCMPST_RCCT = 0x0;
    RHSIFRXCMPST_RCIC = 0x0;
    RHSIFRXCMPSC_RCCL2 = 0x0;
    RHSIFRXCMPSC_RCCCT = 0x0;
    RHSIFRXCMPSC_RCCIC = 0x0;
    RHSIFRXCMPIE_RCEL2 = 0x0;
    RHSIFRXCMPIE_RCECT = 0x0;
    RHSIFRXCMPIE_RCEIC = 0x0;
    RHSIFRXERRST_RERSZ = 0x0;
    RHSIFRXERRST_RERSZI5 = 0x0;
    RHSIFRXERRST_RERSZI4 = 0x0;
    RHSIFRXERRST_RERCTF = 0x0;
    RHSIFRXERRST_RERCTE = 0x0;
    RHSIFRXERRST_RERCTD = 0x0;
    RHSIFRXERRST_RERCTC = 0x0;
    RHSIFRXERRST_RERCTB = 0x0;
    RHSIFRXERRST_RERCTA = 0x0;
    RHSIFRXERRST_RERCT9 = 0x0;
    RHSIFRXERRST_RERCT8 = 0x0;
    RHSIFRXERRST_RERCT2 = 0x0;
    RHSIFRXERRST_RERCT1 = 0x0;
    RHSIFRXERRST_RERIPV = 0x0;
    RHSIFRXERRSC_RERCSZ = 0x0;
    RHSIFRXERRSC_RERCSZI5 = 0x0;
    RHSIFRXERRSC_RERCSZI4 = 0x0;
    RHSIFRXERRSC_RERCCTF = 0x0;
    RHSIFRXERRSC_RERCCTE = 0x0;
    RHSIFRXERRSC_RERCCTD = 0x0;
    RHSIFRXERRSC_RERCCTC = 0x0;
    RHSIFRXERRSC_RERCCTB = 0x0;
    RHSIFRXERRSC_RERCCTA = 0x0;
    RHSIFRXERRSC_RERCCT9 = 0x0;
    RHSIFRXERRSC_RERCCT8 = 0x0;
    RHSIFRXERRSC_RERCCT2 = 0x0;
    RHSIFRXERRSC_RERCCT1 = 0x0;
    RHSIFRXERRSC_RERCIPV = 0x0;
    RHSIFRXERRIE_RERESZ = 0x0;
    RHSIFRXERRIE_RERESZI5 = 0x0;
    RHSIFRXERRIE_RERESZI4 = 0x0;
    RHSIFRXERRIE_RERECTF = 0x0;
    RHSIFRXERRIE_RERECTE = 0x0;
    RHSIFRXERRIE_RERECTD = 0x0;
    RHSIFRXERRIE_RERECTC = 0x0;
    RHSIFRXERRIE_RERECTB = 0x0;
    RHSIFRXERRIE_RERECTA = 0x0;
    RHSIFRXERRIE_RERECT9 = 0x0;
    RHSIFRXERRIE_RERECT8 = 0x0;
    RHSIFRXERRIE_RERECT2 = 0x0;
    RHSIFRXERRIE_RERECT1 = 0x0;
    RHSIFRXERRIE_REREIPV = 0x0;
    RHSIFRXICST_RIPA = 0x0;
    RHSIFRXICST_RITOL = 0x0;
    RHSIFRXICST_RITOF = 0x0;
    RHSIFRXICST_RITON = 0x0;
    RHSIFRXICST_RIDT = 0x0;
    RHSIFRXICST_RIET = 0x0;
    RHSIFRXICST_RIFT = 0x0;
    RHSIFRXICST_RIST = 0x0;
    RHSIFRXICST_RIFR = 0x0;
    RHSIFRXICST_RISR = 0x0;
    RHSIFRXICST_RIPSTP = 0x0;
    RHSIFRXICST_RIPSRT = 0x0;
    RHSIFRXICST_RIPG = 0x0;
    RHSIFRXICSC_RICPA = 0x0;
    RHSIFRXICSC_RICTOL = 0x0;
    RHSIFRXICSC_RICTOF = 0x0;
    RHSIFRXICSC_RICTON = 0x0;
    RHSIFRXICSC_RICDT = 0x0;
    RHSIFRXICSC_RICET = 0x0;
    RHSIFRXICSC_RICFT = 0x0;
    RHSIFRXICSC_RICST = 0x0;
    RHSIFRXICSC_RICFR = 0x0;
    RHSIFRXICSC_RICSR = 0x0;
    RHSIFRXICSC_RICPSTP = 0x0;
    RHSIFRXICSC_RICPSRT = 0x0;
    RHSIFRXICSC_RICPG = 0x0;
    RHSIFRXICIE_RIEPA = 0x0;
    RHSIFRXICIE_RIETOL = 0x0;
    RHSIFRXICIE_RIETOF = 0x0;
    RHSIFRXICIE_RIETON = 0x0;
    RHSIFRXICIE_RIEDT = 0x0;
    RHSIFRXICIE_RIEET = 0x0;
    RHSIFRXICIE_RIEFT = 0x0;
    RHSIFRXICIE_RIEST = 0x0;
    RHSIFRXICIE_RIEFR = 0x0;
    RHSIFRXICIE_RIESR = 0x0;
    RHSIFRXICIE_RIEPSTP = 0x0;
    RHSIFRXICIE_RIEPSRT = 0x0;
    RHSIFRXICIE_RIEPG = 0x0;
}

/// Update bit value to local value
/// @return None
void Chsifl10_all_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        RHSIFMDCR_CTSEN                    = (*RHSIFMDCR     )["CTSEN"         ];
        RHSIFMDCR_CTSV                     = (*RHSIFMDCR     )["CTSV"          ];
        RHSIFMDCR_CLKSEL                   = (*RHSIFMDCR     )["CLKSEL"        ];
        RHSIFMDCR_MST                      = (*RHSIFMDCR     )["MST"           ];
        return;
    }
    if (addr == 0x0004) {
        RHSIFSMCR_SLP                      = (*RHSIFSMCR     )["SLP"           ];
        return;
    }
    if (addr == 0x0008) {
        RHSIFPCR_PLLSTBY                   = (*RHSIFPCR      )["PLLSTBY"       ];
        return;
    }
    if (addr == 0x000C) {
        RHSIFSPCR_FMBR                     = (*RHSIFSPCR     )["FMBR"          ];
        RHSIFSPCR_TXSP                     = (*RHSIFSPCR     )["TXSP"          ];
        RHSIFSPCR_RXSP                     = (*RHSIFSPCR     )["RXSP"          ];
        return;
    }
    if (addr == 0x0010) {
        RHSIFTMDCR_CKTM                    = (*RHSIFTMDCR    )["CKTM"          ];
        RHSIFTMDCR_CKTMSEL                 = (*RHSIFTMDCR    )["CKTMSEL"       ];
        RHSIFTMDCR_TXLPBK                  = (*RHSIFTMDCR    )["TXLPBK"        ];
        RHSIFTMDCR_RXLPBK                  = (*RHSIFTMDCR    )["RXLPBK"        ];
        return;
    }
    if (addr == 0x0018) {
        RHSIFL1SR_RCTS                     = (*RHSIFL1SR     )["RCTS"          ];
        RHSIFL1SR_TFFUL                    = (*RHSIFL1SR     )["TFFUL"         ];
        RHSIFL1SR_TFEMP                    = (*RHSIFL1SR     )["TFEMP"         ];
        RHSIFL1SR_RFFUL                    = (*RHSIFL1SR     )["RFFUL"         ];
        RHSIFL1SR_RFEMP                    = (*RHSIFL1SR     )["RFEMP"         ];
        return;
    }
    if (addr == 0x0030) {
        RHSIFLTXFRMRL1_TL1E                = (*RHSIFLTXFRMRL1)["TL1E"          ];
        RHSIFLTXFRMRL1_TL1P                = (*RHSIFLTXFRMRL1)["TL1P"          ];
        RHSIFLTXFRMRL1_TL1H                = (*RHSIFLTXFRMRL1)["TL1H"          ];
        return;
    }
    if (addr == 0x0034) {
        RHSIFLRXFRMRL1_RL1E                = (*RHSIFLRXFRMRL1)["RL1E"          ];
        RHSIFLRXFRMRL1_RL1P                = (*RHSIFLRXFRMRL1)["RL1P"          ];
        RHSIFLRXFRMRL1_RL1H                = (*RHSIFLRXFRMRL1)["RL1H"          ];
        return;
    }
    if (addr == 0x0038) {
        RHSIFLTXFRMRL2_T2L2H               = (*RHSIFLTXFRMRL2)["T2L2H"         ];
        RHSIFLTXFRMRL2_T2L1H               = (*RHSIFLTXFRMRL2)["T2L1H"         ];
        return;
    }
    if (addr == 0x003C) {
        RHSIFLRXFRMRL2_R2L2H               = (*RHSIFLRXFRMRL2)["R2L2H"         ];
        RHSIFLRXFRMRL2_R2L1H               = (*RHSIFLRXFRMRL2)["R2L1H"         ];
        return;
    }
    if (addr == 0x0050) {
        RHSIFTXRXCR_TXEN                   = (*RHSIFTXRXCR   )["TXEN"          ];
        RHSIFTXRXCR_RXEN                   = (*RHSIFTXRXCR   )["RXEN"          ];
        return;
    }
    if (addr == 0x0060) {
        RHSIFICCR_ITRG                     = (*RHSIFICCR     )["ITRG"          ];
        RHSIFICCR_PLD                      = (*RHSIFICCR     )["PLD"           ];
        return;
    }
    if (addr == 0x0070) {
        RHSIFCCR_CTRG                      = (*RHSIFCCR      )["CTRG"          ];
        RHSIFCCR_CTS                       = (*RHSIFCCR      )["CTS"           ];
        RHSIFCCR_PLD                       = (*RHSIFCCR      )["PLD"           ];
        return;
    }
    if (addr == 0x0080) {
        RHSIFTXCMPST_TCL2                  = (*RHSIFTXCMPST  )["TCL2"          ];
        RHSIFTXCMPST_TCCT                  = (*RHSIFTXCMPST  )["TCCT"          ];
        RHSIFTXCMPST_TCIC                  = (*RHSIFTXCMPST  )["TCIC"          ];
        return;
    }
    if (addr == 0x0084) {
        RHSIFTXCMPSC_TCCL2                 = (*RHSIFTXCMPSC  )["TCCL2"         ];
        RHSIFTXCMPSC_TCCCT                 = (*RHSIFTXCMPSC  )["TCCCT"         ];
        RHSIFTXCMPSC_TCCIC                 = (*RHSIFTXCMPSC  )["TCCIC"         ];
        return;
    }
    if (addr == 0x0088) {
        RHSIFTXCMPIE_TCEL2                 = (*RHSIFTXCMPIE  )["TCEL2"         ];
        RHSIFTXCMPIE_TCECT                 = (*RHSIFTXCMPIE  )["TCECT"         ];
        RHSIFTXCMPIE_TCEIC                 = (*RHSIFTXCMPIE  )["TCEIC"         ];
        return;
    }
    if (addr == 0x0090) {
        RHSIFTXERRST_TERSZ                 = (*RHSIFTXERRST  )["TERSZ"         ];
        RHSIFTXERRST_TERSZI5               = (*RHSIFTXERRST  )["TERSZI5"       ];
        RHSIFTXERRST_TERSZI4               = (*RHSIFTXERRST  )["TERSZI4"       ];
        RHSIFTXERRST_TERCTF                = (*RHSIFTXERRST  )["TERCTF"        ];
        RHSIFTXERRST_TERCTE                = (*RHSIFTXERRST  )["TERCTE"        ];
        RHSIFTXERRST_TERCTD                = (*RHSIFTXERRST  )["TERCTD"        ];
        RHSIFTXERRST_TERCTC                = (*RHSIFTXERRST  )["TERCTC"        ];
        RHSIFTXERRST_TERCTB                = (*RHSIFTXERRST  )["TERCTB"        ];
        RHSIFTXERRST_TERCTA                = (*RHSIFTXERRST  )["TERCTA"        ];
        RHSIFTXERRST_TERCT9                = (*RHSIFTXERRST  )["TERCT9"        ];
        RHSIFTXERRST_TERCT8                = (*RHSIFTXERRST  )["TERCT8"        ];
        RHSIFTXERRST_TERCT2                = (*RHSIFTXERRST  )["TERCT2"        ];
        RHSIFTXERRST_TERCT1                = (*RHSIFTXERRST  )["TERCT1"        ];
        return;
    }
    if (addr == 0x0094) {
        RHSIFTXERRSC_TERCSZ                = (*RHSIFTXERRSC  )["TERCSZ"        ];
        RHSIFTXERRSC_TERCSZI5              = (*RHSIFTXERRSC  )["TERCSZI5"      ];
        RHSIFTXERRSC_TERCSZI4              = (*RHSIFTXERRSC  )["TERCSZI4"      ];
        RHSIFTXERRSC_TERCCTF               = (*RHSIFTXERRSC  )["TERCCTF"       ];
        RHSIFTXERRSC_TERCCTE               = (*RHSIFTXERRSC  )["TERCCTE"       ];
        RHSIFTXERRSC_TERCCTD               = (*RHSIFTXERRSC  )["TERCCTD"       ];
        RHSIFTXERRSC_TERCCTC               = (*RHSIFTXERRSC  )["TERCCTC"       ];
        RHSIFTXERRSC_TERCCTB               = (*RHSIFTXERRSC  )["TERCCTB"       ];
        RHSIFTXERRSC_TERCCTA               = (*RHSIFTXERRSC  )["TERCCTA"       ];
        RHSIFTXERRSC_TERCCT9               = (*RHSIFTXERRSC  )["TERCCT9"       ];
        RHSIFTXERRSC_TERCCT8               = (*RHSIFTXERRSC  )["TERCCT8"       ];
        RHSIFTXERRSC_TERCCT2               = (*RHSIFTXERRSC  )["TERCCT2"       ];
        RHSIFTXERRSC_TERCCT1               = (*RHSIFTXERRSC  )["TERCCT1"       ];
        return;
    }
    if (addr == 0x0098) {
        RHSIFTXERRIE_TERESZ                = (*RHSIFTXERRIE  )["TERESZ"        ];
        RHSIFTXERRIE_TERESZI5              = (*RHSIFTXERRIE  )["TERESZI5"      ];
        RHSIFTXERRIE_TERESZI4              = (*RHSIFTXERRIE  )["TERESZI4"      ];
        RHSIFTXERRIE_TERECTF               = (*RHSIFTXERRIE  )["TERECTF"       ];
        RHSIFTXERRIE_TERECTE               = (*RHSIFTXERRIE  )["TERECTE"       ];
        RHSIFTXERRIE_TERECTD               = (*RHSIFTXERRIE  )["TERECTD"       ];
        RHSIFTXERRIE_TERECTC               = (*RHSIFTXERRIE  )["TERECTC"       ];
        RHSIFTXERRIE_TERECTB               = (*RHSIFTXERRIE  )["TERECTB"       ];
        RHSIFTXERRIE_TERECTA               = (*RHSIFTXERRIE  )["TERECTA"       ];
        RHSIFTXERRIE_TERECT9               = (*RHSIFTXERRIE  )["TERECT9"       ];
        RHSIFTXERRIE_TERECT8               = (*RHSIFTXERRIE  )["TERECT8"       ];
        RHSIFTXERRIE_TERECT2               = (*RHSIFTXERRIE  )["TERECT2"       ];
        RHSIFTXERRIE_TERECT1               = (*RHSIFTXERRIE  )["TERECT1"       ];
        return;
    }
    if (addr == 0x00A0) {
        RHSIFRXCMPST_RCL2                  = (*RHSIFRXCMPST  )["RCL2"          ];
        RHSIFRXCMPST_RCCT                  = (*RHSIFRXCMPST  )["RCCT"          ];
        RHSIFRXCMPST_RCIC                  = (*RHSIFRXCMPST  )["RCIC"          ];
        return;
    }
    if (addr == 0x00A4) {
        RHSIFRXCMPSC_RCCL2                 = (*RHSIFRXCMPSC  )["RCCL2"         ];
        RHSIFRXCMPSC_RCCCT                 = (*RHSIFRXCMPSC  )["RCCCT"         ];
        RHSIFRXCMPSC_RCCIC                 = (*RHSIFRXCMPSC  )["RCCIC"         ];
        return;
    }
    if (addr == 0x00A8) {
        RHSIFRXCMPIE_RCEL2                 = (*RHSIFRXCMPIE  )["RCEL2"         ];
        RHSIFRXCMPIE_RCECT                 = (*RHSIFRXCMPIE  )["RCECT"         ];
        RHSIFRXCMPIE_RCEIC                 = (*RHSIFRXCMPIE  )["RCEIC"         ];
        return;
    }
    if (addr == 0x00B0) {
        RHSIFRXERRST_RERSZ                 = (*RHSIFRXERRST  )["RERSZ"         ];
        RHSIFRXERRST_RERSZI5               = (*RHSIFRXERRST  )["RERSZI5"       ];
        RHSIFRXERRST_RERSZI4               = (*RHSIFRXERRST  )["RERSZI4"       ];
        RHSIFRXERRST_RERCTF                = (*RHSIFRXERRST  )["RERCTF"        ];
        RHSIFRXERRST_RERCTE                = (*RHSIFRXERRST  )["RERCTE"        ];
        RHSIFRXERRST_RERCTD                = (*RHSIFRXERRST  )["RERCTD"        ];
        RHSIFRXERRST_RERCTC                = (*RHSIFRXERRST  )["RERCTC"        ];
        RHSIFRXERRST_RERCTB                = (*RHSIFRXERRST  )["RERCTB"        ];
        RHSIFRXERRST_RERCTA                = (*RHSIFRXERRST  )["RERCTA"        ];
        RHSIFRXERRST_RERCT9                = (*RHSIFRXERRST  )["RERCT9"        ];
        RHSIFRXERRST_RERCT8                = (*RHSIFRXERRST  )["RERCT8"        ];
        RHSIFRXERRST_RERCT2                = (*RHSIFRXERRST  )["RERCT2"        ];
        RHSIFRXERRST_RERCT1                = (*RHSIFRXERRST  )["RERCT1"        ];
        RHSIFRXERRST_RERIPV                = (*RHSIFRXERRST  )["RERIPV"        ];
        return;
    }
    if (addr == 0x00B4) {
        RHSIFRXERRSC_RERCSZ                = (*RHSIFRXERRSC  )["RERCSZ"        ];
        RHSIFRXERRSC_RERCSZI5              = (*RHSIFRXERRSC  )["RERCSZI5"      ];
        RHSIFRXERRSC_RERCSZI4              = (*RHSIFRXERRSC  )["RERCSZI4"      ];
        RHSIFRXERRSC_RERCCTF               = (*RHSIFRXERRSC  )["RERCCTF"       ];
        RHSIFRXERRSC_RERCCTE               = (*RHSIFRXERRSC  )["RERCCTE"       ];
        RHSIFRXERRSC_RERCCTD               = (*RHSIFRXERRSC  )["RERCCTD"       ];
        RHSIFRXERRSC_RERCCTC               = (*RHSIFRXERRSC  )["RERCCTC"       ];
        RHSIFRXERRSC_RERCCTB               = (*RHSIFRXERRSC  )["RERCCTB"       ];
        RHSIFRXERRSC_RERCCTA               = (*RHSIFRXERRSC  )["RERCCTA"       ];
        RHSIFRXERRSC_RERCCT9               = (*RHSIFRXERRSC  )["RERCCT9"       ];
        RHSIFRXERRSC_RERCCT8               = (*RHSIFRXERRSC  )["RERCCT8"       ];
        RHSIFRXERRSC_RERCCT2               = (*RHSIFRXERRSC  )["RERCCT2"       ];
        RHSIFRXERRSC_RERCCT1               = (*RHSIFRXERRSC  )["RERCCT1"       ];
        RHSIFRXERRSC_RERCIPV               = (*RHSIFRXERRSC  )["RERCIPV"       ];
        return;
    }
    if (addr == 0x00B8) {
        RHSIFRXERRIE_RERESZ                = (*RHSIFRXERRIE  )["RERESZ"        ];
        RHSIFRXERRIE_RERESZI5              = (*RHSIFRXERRIE  )["RERESZI5"      ];
        RHSIFRXERRIE_RERESZI4              = (*RHSIFRXERRIE  )["RERESZI4"      ];
        RHSIFRXERRIE_RERECTF               = (*RHSIFRXERRIE  )["RERECTF"       ];
        RHSIFRXERRIE_RERECTE               = (*RHSIFRXERRIE  )["RERECTE"       ];
        RHSIFRXERRIE_RERECTD               = (*RHSIFRXERRIE  )["RERECTD"       ];
        RHSIFRXERRIE_RERECTC               = (*RHSIFRXERRIE  )["RERECTC"       ];
        RHSIFRXERRIE_RERECTB               = (*RHSIFRXERRIE  )["RERECTB"       ];
        RHSIFRXERRIE_RERECTA               = (*RHSIFRXERRIE  )["RERECTA"       ];
        RHSIFRXERRIE_RERECT9               = (*RHSIFRXERRIE  )["RERECT9"       ];
        RHSIFRXERRIE_RERECT8               = (*RHSIFRXERRIE  )["RERECT8"       ];
        RHSIFRXERRIE_RERECT2               = (*RHSIFRXERRIE  )["RERECT2"       ];
        RHSIFRXERRIE_RERECT1               = (*RHSIFRXERRIE  )["RERECT1"       ];
        RHSIFRXERRIE_REREIPV               = (*RHSIFRXERRIE  )["REREIPV"       ];
        return;
    }
    if (addr == 0x00C0) {
        RHSIFRXICST_RIPA                   = (*RHSIFRXICST   )["RIPA"          ];
        RHSIFRXICST_RITOL                  = (*RHSIFRXICST   )["RITOL"         ];
        RHSIFRXICST_RITOF                  = (*RHSIFRXICST   )["RITOF"         ];
        RHSIFRXICST_RITON                  = (*RHSIFRXICST   )["RITON"         ];
        RHSIFRXICST_RIDT                   = (*RHSIFRXICST   )["RIDT"          ];
        RHSIFRXICST_RIET                   = (*RHSIFRXICST   )["RIET"          ];
        RHSIFRXICST_RIFT                   = (*RHSIFRXICST   )["RIFT"          ];
        RHSIFRXICST_RIST                   = (*RHSIFRXICST   )["RIST"          ];
        RHSIFRXICST_RIFR                   = (*RHSIFRXICST   )["RIFR"          ];
        RHSIFRXICST_RISR                   = (*RHSIFRXICST   )["RISR"          ];
        RHSIFRXICST_RIPSTP                 = (*RHSIFRXICST   )["RIPSTP"        ];
        RHSIFRXICST_RIPSRT                 = (*RHSIFRXICST   )["RIPSRT"        ];
        RHSIFRXICST_RIPG                   = (*RHSIFRXICST   )["RIPG"          ];
        return;
    }
    if (addr == 0x00C4) {
        RHSIFRXICSC_RICPA                  = (*RHSIFRXICSC   )["RICPA"         ];
        RHSIFRXICSC_RICTOL                 = (*RHSIFRXICSC   )["RICTOL"        ];
        RHSIFRXICSC_RICTOF                 = (*RHSIFRXICSC   )["RICTOF"        ];
        RHSIFRXICSC_RICTON                 = (*RHSIFRXICSC   )["RICTON"        ];
        RHSIFRXICSC_RICDT                  = (*RHSIFRXICSC   )["RICDT"         ];
        RHSIFRXICSC_RICET                  = (*RHSIFRXICSC   )["RICET"         ];
        RHSIFRXICSC_RICFT                  = (*RHSIFRXICSC   )["RICFT"         ];
        RHSIFRXICSC_RICST                  = (*RHSIFRXICSC   )["RICST"         ];
        RHSIFRXICSC_RICFR                  = (*RHSIFRXICSC   )["RICFR"         ];
        RHSIFRXICSC_RICSR                  = (*RHSIFRXICSC   )["RICSR"         ];
        RHSIFRXICSC_RICPSTP                = (*RHSIFRXICSC   )["RICPSTP"       ];
        RHSIFRXICSC_RICPSRT                = (*RHSIFRXICSC   )["RICPSRT"       ];
        RHSIFRXICSC_RICPG                  = (*RHSIFRXICSC   )["RICPG"         ];
        return;
    }
    if (addr == 0x00C8) {
        RHSIFRXICIE_RIEPA                  = (*RHSIFRXICIE   )["RIEPA"         ];
        RHSIFRXICIE_RIETOL                 = (*RHSIFRXICIE   )["RIETOL"        ];
        RHSIFRXICIE_RIETOF                 = (*RHSIFRXICIE   )["RIETOF"        ];
        RHSIFRXICIE_RIETON                 = (*RHSIFRXICIE   )["RIETON"        ];
        RHSIFRXICIE_RIEDT                  = (*RHSIFRXICIE   )["RIEDT"         ];
        RHSIFRXICIE_RIEET                  = (*RHSIFRXICIE   )["RIEET"         ];
        RHSIFRXICIE_RIEFT                  = (*RHSIFRXICIE   )["RIEFT"         ];
        RHSIFRXICIE_RIEST                  = (*RHSIFRXICIE   )["RIEST"         ];
        RHSIFRXICIE_RIEFR                  = (*RHSIFRXICIE   )["RIEFR"         ];
        RHSIFRXICIE_RIESR                  = (*RHSIFRXICIE   )["RIESR"         ];
        RHSIFRXICIE_RIEPSTP                = (*RHSIFRXICIE   )["RIEPSTP"       ];
        RHSIFRXICIE_RIEPSRT                = (*RHSIFRXICIE   )["RIEPSRT"       ];
        RHSIFRXICIE_RIEPG                  = (*RHSIFRXICIE   )["RIEPG"         ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Chsifl10_all_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*RHSIFMDCR     )["CTSEN"         ] = RHSIFMDCR_CTSEN;
        (*RHSIFMDCR     )["CTSV"          ] = RHSIFMDCR_CTSV;
        (*RHSIFMDCR     )["CLKSEL"        ] = RHSIFMDCR_CLKSEL;
        (*RHSIFMDCR     )["MST"           ] = RHSIFMDCR_MST;
        return;
    }
    if (addr == 0x0004) {
        (*RHSIFSMCR     )["SLP"           ] = RHSIFSMCR_SLP;
        return;
    }
    if (addr == 0x0008) {
        (*RHSIFPCR      )["PLLSTBY"       ] = RHSIFPCR_PLLSTBY;
        return;
    }
    if (addr == 0x000C) {
        (*RHSIFSPCR     )["FMBR"          ] = RHSIFSPCR_FMBR;
        (*RHSIFSPCR     )["TXSP"          ] = RHSIFSPCR_TXSP;
        (*RHSIFSPCR     )["RXSP"          ] = RHSIFSPCR_RXSP;
        return;
    }
    if (addr == 0x0010) {
        (*RHSIFTMDCR    )["CKTM"          ] = RHSIFTMDCR_CKTM;
        (*RHSIFTMDCR    )["CKTMSEL"       ] = RHSIFTMDCR_CKTMSEL;
        (*RHSIFTMDCR    )["TXLPBK"        ] = RHSIFTMDCR_TXLPBK;
        (*RHSIFTMDCR    )["RXLPBK"        ] = RHSIFTMDCR_RXLPBK;
        return;
    }
    if (addr == 0x0018) {
        (*RHSIFL1SR     )["RCTS"          ] = RHSIFL1SR_RCTS;
        (*RHSIFL1SR     )["TFFUL"         ] = RHSIFL1SR_TFFUL;
        (*RHSIFL1SR     )["TFEMP"         ] = RHSIFL1SR_TFEMP;
        (*RHSIFL1SR     )["RFFUL"         ] = RHSIFL1SR_RFFUL;
        (*RHSIFL1SR     )["RFEMP"         ] = RHSIFL1SR_RFEMP;
        return;
    }
    if (addr == 0x0030) {
        (*RHSIFLTXFRMRL1)["TL1E"          ] = RHSIFLTXFRMRL1_TL1E;
        (*RHSIFLTXFRMRL1)["TL1P"          ] = RHSIFLTXFRMRL1_TL1P;
        (*RHSIFLTXFRMRL1)["TL1H"          ] = RHSIFLTXFRMRL1_TL1H;
        return;
    }
    if (addr == 0x0034) {
        (*RHSIFLRXFRMRL1)["RL1E"          ] = RHSIFLRXFRMRL1_RL1E;
        (*RHSIFLRXFRMRL1)["RL1P"          ] = RHSIFLRXFRMRL1_RL1P;
        (*RHSIFLRXFRMRL1)["RL1H"          ] = RHSIFLRXFRMRL1_RL1H;
        return;
    }
    if (addr == 0x0038) {
        (*RHSIFLTXFRMRL2)["T2L2H"         ] = RHSIFLTXFRMRL2_T2L2H;
        (*RHSIFLTXFRMRL2)["T2L1H"         ] = RHSIFLTXFRMRL2_T2L1H;
        return;
    }
    if (addr == 0x003C) {
        (*RHSIFLRXFRMRL2)["R2L2H"         ] = RHSIFLRXFRMRL2_R2L2H;
        (*RHSIFLRXFRMRL2)["R2L1H"         ] = RHSIFLRXFRMRL2_R2L1H;
        return;
    }
    if (addr == 0x0050) {
        (*RHSIFTXRXCR   )["TXEN"          ] = RHSIFTXRXCR_TXEN;
        (*RHSIFTXRXCR   )["RXEN"          ] = RHSIFTXRXCR_RXEN;
        return;
    }
    if (addr == 0x0060) {
        (*RHSIFICCR     )["ITRG"          ] = RHSIFICCR_ITRG;
        (*RHSIFICCR     )["PLD"           ] = RHSIFICCR_PLD;
        return;
    }
    if (addr == 0x0070) {
        (*RHSIFCCR      )["CTRG"          ] = RHSIFCCR_CTRG;
        (*RHSIFCCR      )["CTS"           ] = RHSIFCCR_CTS;
        (*RHSIFCCR      )["PLD"           ] = RHSIFCCR_PLD;
        return;
    }
    if (addr == 0x0080) {
        (*RHSIFTXCMPST  )["TCL2"          ] = RHSIFTXCMPST_TCL2;
        (*RHSIFTXCMPST  )["TCCT"          ] = RHSIFTXCMPST_TCCT;
        (*RHSIFTXCMPST  )["TCIC"          ] = RHSIFTXCMPST_TCIC;
        return;
    }
    if (addr == 0x0084) {
        (*RHSIFTXCMPSC  )["TCCL2"         ] = RHSIFTXCMPSC_TCCL2;
        (*RHSIFTXCMPSC  )["TCCCT"         ] = RHSIFTXCMPSC_TCCCT;
        (*RHSIFTXCMPSC  )["TCCIC"         ] = RHSIFTXCMPSC_TCCIC;
        return;
    }
    if (addr == 0x0088) {
        (*RHSIFTXCMPIE  )["TCEL2"         ] = RHSIFTXCMPIE_TCEL2;
        (*RHSIFTXCMPIE  )["TCECT"         ] = RHSIFTXCMPIE_TCECT;
        (*RHSIFTXCMPIE  )["TCEIC"         ] = RHSIFTXCMPIE_TCEIC;
        return;
    }
    if (addr == 0x0090) {
        (*RHSIFTXERRST  )["TERSZ"         ] = RHSIFTXERRST_TERSZ;
        (*RHSIFTXERRST  )["TERSZI5"       ] = RHSIFTXERRST_TERSZI5;
        (*RHSIFTXERRST  )["TERSZI4"       ] = RHSIFTXERRST_TERSZI4;
        (*RHSIFTXERRST  )["TERCTF"        ] = RHSIFTXERRST_TERCTF;
        (*RHSIFTXERRST  )["TERCTE"        ] = RHSIFTXERRST_TERCTE;
        (*RHSIFTXERRST  )["TERCTD"        ] = RHSIFTXERRST_TERCTD;
        (*RHSIFTXERRST  )["TERCTC"        ] = RHSIFTXERRST_TERCTC;
        (*RHSIFTXERRST  )["TERCTB"        ] = RHSIFTXERRST_TERCTB;
        (*RHSIFTXERRST  )["TERCTA"        ] = RHSIFTXERRST_TERCTA;
        (*RHSIFTXERRST  )["TERCT9"        ] = RHSIFTXERRST_TERCT9;
        (*RHSIFTXERRST  )["TERCT8"        ] = RHSIFTXERRST_TERCT8;
        (*RHSIFTXERRST  )["TERCT2"        ] = RHSIFTXERRST_TERCT2;
        (*RHSIFTXERRST  )["TERCT1"        ] = RHSIFTXERRST_TERCT1;
        return;
    }
    if (addr == 0x0094) {
        (*RHSIFTXERRSC  )["TERCSZ"        ] = RHSIFTXERRSC_TERCSZ;
        (*RHSIFTXERRSC  )["TERCSZI5"      ] = RHSIFTXERRSC_TERCSZI5;
        (*RHSIFTXERRSC  )["TERCSZI4"      ] = RHSIFTXERRSC_TERCSZI4;
        (*RHSIFTXERRSC  )["TERCCTF"       ] = RHSIFTXERRSC_TERCCTF;
        (*RHSIFTXERRSC  )["TERCCTE"       ] = RHSIFTXERRSC_TERCCTE;
        (*RHSIFTXERRSC  )["TERCCTD"       ] = RHSIFTXERRSC_TERCCTD;
        (*RHSIFTXERRSC  )["TERCCTC"       ] = RHSIFTXERRSC_TERCCTC;
        (*RHSIFTXERRSC  )["TERCCTB"       ] = RHSIFTXERRSC_TERCCTB;
        (*RHSIFTXERRSC  )["TERCCTA"       ] = RHSIFTXERRSC_TERCCTA;
        (*RHSIFTXERRSC  )["TERCCT9"       ] = RHSIFTXERRSC_TERCCT9;
        (*RHSIFTXERRSC  )["TERCCT8"       ] = RHSIFTXERRSC_TERCCT8;
        (*RHSIFTXERRSC  )["TERCCT2"       ] = RHSIFTXERRSC_TERCCT2;
        (*RHSIFTXERRSC  )["TERCCT1"       ] = RHSIFTXERRSC_TERCCT1;
        return;
    }
    if (addr == 0x0098) {
        (*RHSIFTXERRIE  )["TERESZ"        ] = RHSIFTXERRIE_TERESZ;
        (*RHSIFTXERRIE  )["TERESZI5"      ] = RHSIFTXERRIE_TERESZI5;
        (*RHSIFTXERRIE  )["TERESZI4"      ] = RHSIFTXERRIE_TERESZI4;
        (*RHSIFTXERRIE  )["TERECTF"       ] = RHSIFTXERRIE_TERECTF;
        (*RHSIFTXERRIE  )["TERECTE"       ] = RHSIFTXERRIE_TERECTE;
        (*RHSIFTXERRIE  )["TERECTD"       ] = RHSIFTXERRIE_TERECTD;
        (*RHSIFTXERRIE  )["TERECTC"       ] = RHSIFTXERRIE_TERECTC;
        (*RHSIFTXERRIE  )["TERECTB"       ] = RHSIFTXERRIE_TERECTB;
        (*RHSIFTXERRIE  )["TERECTA"       ] = RHSIFTXERRIE_TERECTA;
        (*RHSIFTXERRIE  )["TERECT9"       ] = RHSIFTXERRIE_TERECT9;
        (*RHSIFTXERRIE  )["TERECT8"       ] = RHSIFTXERRIE_TERECT8;
        (*RHSIFTXERRIE  )["TERECT2"       ] = RHSIFTXERRIE_TERECT2;
        (*RHSIFTXERRIE  )["TERECT1"       ] = RHSIFTXERRIE_TERECT1;
        return;
    }
    if (addr == 0x00A0) {
        (*RHSIFRXCMPST  )["RCL2"          ] = RHSIFRXCMPST_RCL2;
        (*RHSIFRXCMPST  )["RCCT"          ] = RHSIFRXCMPST_RCCT;
        (*RHSIFRXCMPST  )["RCIC"          ] = RHSIFRXCMPST_RCIC;
        return;
    }
    if (addr == 0x00A4) {
        (*RHSIFRXCMPSC  )["RCCL2"         ] = RHSIFRXCMPSC_RCCL2;
        (*RHSIFRXCMPSC  )["RCCCT"         ] = RHSIFRXCMPSC_RCCCT;
        (*RHSIFRXCMPSC  )["RCCIC"         ] = RHSIFRXCMPSC_RCCIC;
        return;
    }
    if (addr == 0x00A8) {
        (*RHSIFRXCMPIE  )["RCEL2"         ] = RHSIFRXCMPIE_RCEL2;
        (*RHSIFRXCMPIE  )["RCECT"         ] = RHSIFRXCMPIE_RCECT;
        (*RHSIFRXCMPIE  )["RCEIC"         ] = RHSIFRXCMPIE_RCEIC;
        return;
    }
    if (addr == 0x00B0) {
        (*RHSIFRXERRST  )["RERSZ"         ] = RHSIFRXERRST_RERSZ;
        (*RHSIFRXERRST  )["RERSZI5"       ] = RHSIFRXERRST_RERSZI5;
        (*RHSIFRXERRST  )["RERSZI4"       ] = RHSIFRXERRST_RERSZI4;
        (*RHSIFRXERRST  )["RERCTF"        ] = RHSIFRXERRST_RERCTF;
        (*RHSIFRXERRST  )["RERCTE"        ] = RHSIFRXERRST_RERCTE;
        (*RHSIFRXERRST  )["RERCTD"        ] = RHSIFRXERRST_RERCTD;
        (*RHSIFRXERRST  )["RERCTC"        ] = RHSIFRXERRST_RERCTC;
        (*RHSIFRXERRST  )["RERCTB"        ] = RHSIFRXERRST_RERCTB;
        (*RHSIFRXERRST  )["RERCTA"        ] = RHSIFRXERRST_RERCTA;
        (*RHSIFRXERRST  )["RERCT9"        ] = RHSIFRXERRST_RERCT9;
        (*RHSIFRXERRST  )["RERCT8"        ] = RHSIFRXERRST_RERCT8;
        (*RHSIFRXERRST  )["RERCT2"        ] = RHSIFRXERRST_RERCT2;
        (*RHSIFRXERRST  )["RERCT1"        ] = RHSIFRXERRST_RERCT1;
        (*RHSIFRXERRST  )["RERIPV"        ] = RHSIFRXERRST_RERIPV;
        return;
    }
    if (addr == 0x00B4) {
        (*RHSIFRXERRSC  )["RERCSZ"        ] = RHSIFRXERRSC_RERCSZ;
        (*RHSIFRXERRSC  )["RERCSZI5"      ] = RHSIFRXERRSC_RERCSZI5;
        (*RHSIFRXERRSC  )["RERCSZI4"      ] = RHSIFRXERRSC_RERCSZI4;
        (*RHSIFRXERRSC  )["RERCCTF"       ] = RHSIFRXERRSC_RERCCTF;
        (*RHSIFRXERRSC  )["RERCCTE"       ] = RHSIFRXERRSC_RERCCTE;
        (*RHSIFRXERRSC  )["RERCCTD"       ] = RHSIFRXERRSC_RERCCTD;
        (*RHSIFRXERRSC  )["RERCCTC"       ] = RHSIFRXERRSC_RERCCTC;
        (*RHSIFRXERRSC  )["RERCCTB"       ] = RHSIFRXERRSC_RERCCTB;
        (*RHSIFRXERRSC  )["RERCCTA"       ] = RHSIFRXERRSC_RERCCTA;
        (*RHSIFRXERRSC  )["RERCCT9"       ] = RHSIFRXERRSC_RERCCT9;
        (*RHSIFRXERRSC  )["RERCCT8"       ] = RHSIFRXERRSC_RERCCT8;
        (*RHSIFRXERRSC  )["RERCCT2"       ] = RHSIFRXERRSC_RERCCT2;
        (*RHSIFRXERRSC  )["RERCCT1"       ] = RHSIFRXERRSC_RERCCT1;
        (*RHSIFRXERRSC  )["RERCIPV"       ] = RHSIFRXERRSC_RERCIPV;
        return;
    }
    if (addr == 0x00B8) {
        (*RHSIFRXERRIE  )["RERESZ"        ] = RHSIFRXERRIE_RERESZ;
        (*RHSIFRXERRIE  )["RERESZI5"      ] = RHSIFRXERRIE_RERESZI5;
        (*RHSIFRXERRIE  )["RERESZI4"      ] = RHSIFRXERRIE_RERESZI4;
        (*RHSIFRXERRIE  )["RERECTF"       ] = RHSIFRXERRIE_RERECTF;
        (*RHSIFRXERRIE  )["RERECTE"       ] = RHSIFRXERRIE_RERECTE;
        (*RHSIFRXERRIE  )["RERECTD"       ] = RHSIFRXERRIE_RERECTD;
        (*RHSIFRXERRIE  )["RERECTC"       ] = RHSIFRXERRIE_RERECTC;
        (*RHSIFRXERRIE  )["RERECTB"       ] = RHSIFRXERRIE_RERECTB;
        (*RHSIFRXERRIE  )["RERECTA"       ] = RHSIFRXERRIE_RERECTA;
        (*RHSIFRXERRIE  )["RERECT9"       ] = RHSIFRXERRIE_RERECT9;
        (*RHSIFRXERRIE  )["RERECT8"       ] = RHSIFRXERRIE_RERECT8;
        (*RHSIFRXERRIE  )["RERECT2"       ] = RHSIFRXERRIE_RERECT2;
        (*RHSIFRXERRIE  )["RERECT1"       ] = RHSIFRXERRIE_RERECT1;
        (*RHSIFRXERRIE  )["REREIPV"       ] = RHSIFRXERRIE_REREIPV;
        return;
    }
    if (addr == 0x00C0) {
        (*RHSIFRXICST   )["RIPA"          ] = RHSIFRXICST_RIPA;
        (*RHSIFRXICST   )["RITOL"         ] = RHSIFRXICST_RITOL;
        (*RHSIFRXICST   )["RITOF"         ] = RHSIFRXICST_RITOF;
        (*RHSIFRXICST   )["RITON"         ] = RHSIFRXICST_RITON;
        (*RHSIFRXICST   )["RIDT"          ] = RHSIFRXICST_RIDT;
        (*RHSIFRXICST   )["RIET"          ] = RHSIFRXICST_RIET;
        (*RHSIFRXICST   )["RIFT"          ] = RHSIFRXICST_RIFT;
        (*RHSIFRXICST   )["RIST"          ] = RHSIFRXICST_RIST;
        (*RHSIFRXICST   )["RIFR"          ] = RHSIFRXICST_RIFR;
        (*RHSIFRXICST   )["RISR"          ] = RHSIFRXICST_RISR;
        (*RHSIFRXICST   )["RIPSTP"        ] = RHSIFRXICST_RIPSTP;
        (*RHSIFRXICST   )["RIPSRT"        ] = RHSIFRXICST_RIPSRT;
        (*RHSIFRXICST   )["RIPG"          ] = RHSIFRXICST_RIPG;
        return;
    }
    if (addr == 0x00C4) {
        (*RHSIFRXICSC   )["RICPA"         ] = RHSIFRXICSC_RICPA;
        (*RHSIFRXICSC   )["RICTOL"        ] = RHSIFRXICSC_RICTOL;
        (*RHSIFRXICSC   )["RICTOF"        ] = RHSIFRXICSC_RICTOF;
        (*RHSIFRXICSC   )["RICTON"        ] = RHSIFRXICSC_RICTON;
        (*RHSIFRXICSC   )["RICDT"         ] = RHSIFRXICSC_RICDT;
        (*RHSIFRXICSC   )["RICET"         ] = RHSIFRXICSC_RICET;
        (*RHSIFRXICSC   )["RICFT"         ] = RHSIFRXICSC_RICFT;
        (*RHSIFRXICSC   )["RICST"         ] = RHSIFRXICSC_RICST;
        (*RHSIFRXICSC   )["RICFR"         ] = RHSIFRXICSC_RICFR;
        (*RHSIFRXICSC   )["RICSR"         ] = RHSIFRXICSC_RICSR;
        (*RHSIFRXICSC   )["RICPSTP"       ] = RHSIFRXICSC_RICPSTP;
        (*RHSIFRXICSC   )["RICPSRT"       ] = RHSIFRXICSC_RICPSRT;
        (*RHSIFRXICSC   )["RICPG"         ] = RHSIFRXICSC_RICPG;
        return;
    }
    if (addr == 0x00C8) {
        (*RHSIFRXICIE   )["RIEPA"         ] = RHSIFRXICIE_RIEPA;
        (*RHSIFRXICIE   )["RIETOL"        ] = RHSIFRXICIE_RIETOL;
        (*RHSIFRXICIE   )["RIETOF"        ] = RHSIFRXICIE_RIETOF;
        (*RHSIFRXICIE   )["RIETON"        ] = RHSIFRXICIE_RIETON;
        (*RHSIFRXICIE   )["RIEDT"         ] = RHSIFRXICIE_RIEDT;
        (*RHSIFRXICIE   )["RIEET"         ] = RHSIFRXICIE_RIEET;
        (*RHSIFRXICIE   )["RIEFT"         ] = RHSIFRXICIE_RIEFT;
        (*RHSIFRXICIE   )["RIEST"         ] = RHSIFRXICIE_RIEST;
        (*RHSIFRXICIE   )["RIEFR"         ] = RHSIFRXICIE_RIEFR;
        (*RHSIFRXICIE   )["RIESR"         ] = RHSIFRXICIE_RIESR;
        (*RHSIFRXICIE   )["RIEPSTP"       ] = RHSIFRXICIE_RIEPSTP;
        (*RHSIFRXICIE   )["RIEPSRT"       ] = RHSIFRXICIE_RIEPSRT;
        (*RHSIFRXICIE   )["RIEPG"         ] = RHSIFRXICIE_RIEPG;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Chsifl10_all_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Chsifl10_all_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Chsifl10_all_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Chsifl10_all_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Chsifl10_all_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Chsifl10_all_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Chsifl10_all_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Chsifl10_all_regif::uint Chsifl10_all_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Chsifl10_all_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Chsifl10_all_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Chsifl10_all_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Chsifl10_all_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Chsifl10_all_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Chsifl10_all_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Chsifl10_all_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
