// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2018 Renesas Electronics Corporation
// Copyright(c) 2010-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : ots_info.txt
////////////////////////////////////////////////////////////////////////////////
// # ---------------------------------------------------------------------
// # $Id$
// #
// # Copyright(c) 2012 Renesas Electronics Corporation
// # Copyright(c) 2012 Renesas Design Vietnam Co., Ltd.
// # RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// # This program must be used solely for the purpose for which
// # it was furnished by Renesas Electronics Corporation. No part of this
// # program may be reproduced or disclosed to others, in any
// # form, without the prior written permission of Renesas Electronics
// # Corporation.
// # ---------------------------------------------------------------------
// 
// %MODULE ots
//     #              name     offset_size  
//     %%REG_INSTANCE reg_def  8           
// 
// %REG_CHANNEL   reg_def
//      %%TITLE    name        reg_name     size    length   offset    init   access  support  callback
//      %%REG      OTSTCR      OTSTCR        8       8        0x00     0      W       TRUE      - 
//      %%REG      OTENDCR     OTENDCR       8       8        0x04     0      W       TRUE      -
//      %%REG      OTCR        OTCR          8       8        0x08     0      W|R     TRUE      -
//      %%REG      OTFCR       OTFCR         8       8        0x0C     0      W       TRUE      -
//      %%REG      OTFR        OTFR          8       8        0x10     0      R       TRUE      -
//      %%REG      OTSTR       OTSTR         8       8        0x14     0      R       TRUE      -
//      %%REG      OTDR        OTDR          16      16       0x18     0      R       TRUE      -
//      %%REG      HTBRAU      HTBRAU        8|16    16       0x1C     0      W|R     TRUE      -
//      %%REG      HTBRAL      HTBRAL        8|16    16       0x20     0      W|R     TRUE      -
//      %%REG      HTBRBU      HTBRBU        8|16    16       0x24     0      W|R     TRUE      -
//      %%REG      HTBRBL      HTBRBL        8|16    16       0x28     0      W|R     TRUE      -
//      %%REG      LTBRAU      LTBRAU        8|16    16       0x2C     0      W|R     TRUE      -
//      %%REG      LTBRAL      LTBRAL        8|16    16       0x30     0      W|R     TRUE      -
//      %%REG      TDLR        TDLR          8|16    16       0x34     0x7FFF W|R     TRUE      -
//      %%REG      COEFFRA     COEFFRA       16|32   32       0x38     0      R       TRUE      -
//      %%REG      COEFFRB     COEFFRB       16|32   32       0x3C     0      R       TRUE      -
//      %%REG      COEFFRC     COEFFRC       16|32   32       0x40     0      R       TRUE      -
//      %%REG      COEFFSR     COEFFSR       8       8        0x80     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERA COEFFTUNERA   8|16|32 32       0x84     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERB COEFFTUNERB   8|16|32 32       0x88     0      W|R     FALSE     - 
//      %%REG      COEFFTUNERC COEFFTUNERC   8|16|32 32       0x8C     0      W|R     FALSE     - 
//      %%REG      TSTRA       TSTRA         8       8        0x90     0      W|R     FALSE     - 
//      %%REG      TSTRB       TSTRB         8       8        0x94     0      W|R     FALSE     - 
//      %%REG      TSTRC       TSTRC         8       8        0x98     0      W|R     FALSE     - 
//      %%REG      TSTRD       TSTRD         8       8        0x9C     0      R       FALSE     -
//      %%REG      SDIAGCTL    SDIAGCTL      8       8        0xA0     0      W|R     TRUE      -
// 
// %REG_NAME OTSTCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTST         0        0       0        W         -            W    
// 
// %REG_NAME OTENDCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTEND        0        0       0        W         -            W    
// 
// %REG_NAME OTCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       OTEE         4        4       0        D           -            -    
//     %%BIT       OTULIE       3        3       0        D           -            -   
//     %%BIT       OTABEE       2        2       0        D           -            -  
//     %%BIT       SDE          1        1       0        D           -            -   
//     %%BIT       OTMD         0        0       0        D           -            -   
// 
// %REG_NAME OTFCR
//     %%TITLE     name       upper   lower     init    access      support     callback    
//     %%BIT       SDERC        2       2        0       W           -            W    
//     %%BIT       OTFC         0       0        0       W           -            -    
// 
// %REG_NAME OTFR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SDER         2       2       0        R           -           -   
//     %%BIT       OTACT        1       1       0        R           -           -
//     %%BIT       OTF          0       0       0        R           -           -
// 
// %REG_NAME OTSTR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       TSTAT       1       0       0        R            -            -    
// 
// %REG_NAME OTDR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15      0        D             -            -    
//     %%BIT       OTDR        14       0       0        D             -            -    
// 
// %REG_NAME HTBRAU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBAU       14     0        0       D           -          -       
// 
// %REG_NAME HTBRAL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBAL       14     0        0       D           -          -       
// 
// %REG_NAME HTBRBU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0         -          -       
//     %%BIT       HTBBU       14     0        0       D           -          -       
// 
// %REG_NAME HTBRBL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       HTBBL       14     0        0       D           -          -       
// 
// %REG_NAME LTBRAU
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       LTBAU       14     0        0       D           -          -       
// 
// %REG_NAME LTBRAL
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15     15       0       R|W0        -          -       
//     %%BIT       LTBAL       14     0        0       D           -          -       
// 
// %REG_NAME TDLR
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN       15       15       0       R|W0        -           -      
//     %%BIT       TDL        14       0        32767   D           -           -       
// 
// %REG_NAME COEFFRA
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRA     14       0        0       D           -           -       
// 
// %REG_NAME COEFFRB
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRB     14       0        0       D           -           -       
// 
// %REG_NAME COEFFRC
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       SIGN        15       15       0       D           -           -      
//     %%BIT       COEFFRC     14       0        0       D           -           -       
// 
// %REG_NAME COEFFSR    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFS       0       0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERA    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERA  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERB    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERB  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME COEFFTUNERC    
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       COEFFTUNERC  15      0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRA      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       OVSR        7       7       0       W|R        FALSE           -      
//     %%BIT       EXANMD      6       6       0       W|R        FALSE           -      
//     %%BIT       OCCHP       5       5       0       W|R        FALSE           -      
//     %%BIT       AMPCHP      4       4       0       W|R        FALSE           -      
//     %%BIT       TEST        3       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRB      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       ONDO        1       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRC      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       IBIAS       3       0       0       W|R        FALSE           -      
// 
// %REG_NAME TSTRD      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       FFCHK       0       0       0       R          FALSE           -      
// 
// %REG_NAME SDIAGCTL      
//     %%TITLE     name       upper   lower   init    access      support     callback    
//     %%BIT       ADCIN       1       0       0       W|R        TRUE            W      
// 
// %CMD_BASEID   tgt reg
// %CMD_NODUMP_API EnableInsertInput EnableDumpResult CommandCB DumpProfile ClearProfile
// %CMD_RW DumpInterrupt <enable: bool=false> @ Display interrupt information when interrupt get set[ns]
// %CMD_RW AccelerationRate <rate: unsigned int=1> @ rate of conversion time 
// %CMD_RW MaxTemperature <max_temp: unsigned int=0x3BD8> @ maximum temperature setting in OTDR
// %CMD_RW MinTemperature <min_temp: unsigned int=0x200F> @ minimum temperature setting in OTDR
// %CMD_ACTION DumpStatInfo : void @ Dump the statistical information about OTS model activity
// %CMD_ACTION SetTemp <temperature: unsigned short> : void @ Set current temperature for OTS model
// %CMD_ACTION SetCLKfreq <clk_name: std::string> <clk_freq: double>: void @ Setup the new clock frequency
// 
// 
////////////////////////////////////////////////////////////////////////////////
/// @file ots_regif.h
/// @brief Register IF class of model OTS
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __OTS_REGIF_H__
#define __OTS_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USE_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of OTS model
class Cots_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USE_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USE_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USE_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Cots_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Cots_regif(std::string name, uint buswidth, const short coeffra, const short coeffrb, const short coeffrc);
    ~Cots_regif();

protected:
    vpcl::re_register *OTSTCR     ;
    vpcl::re_register *OTENDCR    ;
    vpcl::re_register *OTCR       ;
    vpcl::re_register *OTFCR      ;
    vpcl::re_register *OTFR       ;
    vpcl::re_register *OTSTR      ;
    vpcl::re_register *OTDR       ;
    vpcl::re_register *HTBRAU     ;
    vpcl::re_register *HTBRAL     ;
    vpcl::re_register *HTBRBU     ;
    vpcl::re_register *HTBRBL     ;
    vpcl::re_register *LTBRAU     ;
    vpcl::re_register *LTBRAL     ;
    vpcl::re_register *TDLR       ;
    vpcl::re_register *COEFFRA    ;
    vpcl::re_register *COEFFRB    ;
    vpcl::re_register *COEFFRC    ;
    vpcl::re_register *COEFFSR    ;
    vpcl::re_register *COEFFTUNERA;
    vpcl::re_register *COEFFTUNERB;
    vpcl::re_register *COEFFTUNERC;
    vpcl::re_register *TSTRA      ;
    vpcl::re_register *TSTRB      ;
    vpcl::re_register *TSTRC      ;
    vpcl::re_register *TSTRD      ;
    vpcl::re_register *SDIAGCTL   ;

    #ifdef USE_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif

    uint OTSTCR_OTST;
    uint OTENDCR_OTEND;
    uint OTCR_OTEE  ;
    uint OTCR_OTULIE;
    uint OTCR_OTABEE;
    uint OTCR_SDE   ;
    uint OTCR_OTMD  ;
    uint OTFCR_SDERC;
    uint OTFCR_OTFC ;
    uint OTFR_SDER  ;
    uint OTFR_OTACT ;
    uint OTFR_OTF   ;
    uint OTSTR_TSTAT;
    uint OTDR_SIGN  ;
    uint OTDR_OTDR  ;
    uint HTBRAU_SIGN;
    uint HTBRAU_HTBAU;
    uint HTBRAL_SIGN;
    uint HTBRAL_HTBAL;
    uint HTBRBU_SIGN;
    uint HTBRBU_HTBBU;
    uint HTBRBL_SIGN;
    uint HTBRBL_HTBBL;
    uint LTBRAU_SIGN;
    uint LTBRAU_LTBAU;
    uint LTBRAL_SIGN;
    uint LTBRAL_LTBAL;
    uint TDLR_SIGN  ;
    uint TDLR_TDL   ;
    uint COEFFRA_SIGN;
    uint COEFFRA_COEFFRA;
    uint COEFFRB_SIGN;
    uint COEFFRB_COEFFRB;
    uint COEFFRC_SIGN;
    uint COEFFRC_COEFFRC;
    uint COEFFSR_COEFFS;
    uint COEFFTUNERA_COEFFTUNERA;
    uint COEFFTUNERB_COEFFTUNERB;
    uint COEFFTUNERC_COEFFTUNERC;
    uint TSTRA_OVSR ;
    uint TSTRA_EXANMD;
    uint TSTRA_OCCHP;
    uint TSTRA_AMPCHP;
    uint TSTRA_TEST ;
    uint TSTRB_ONDO ;
    uint TSTRC_IBIAS;
    uint TSTRD_FFCHK;
    uint SDIAGCTL_ADCIN;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_OTSTCR_OTST(RegCBstr str) = 0;
    virtual void cb_OTENDCR_OTEND(RegCBstr str) = 0;
    virtual void cb_OTFCR_SDERC(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cots_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cots_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USE_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif
};
#endif //__OTS_REG_DEF_H__
