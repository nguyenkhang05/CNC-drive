// -----------------------------------------------------------------------------
// $Id: atu5010_timera_regif.h,v 1.0 2016/11/24 10:15:45 binhnguyen Exp $
//
// Copyright(c) 2016 Renesas Electronics Corporation
// Copyright(c) 2016 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_h.skl 1.30 2014/10/13 03:14:25 sontran
//
// Input file : input/atu5010_timera_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5010_TIMERA
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         9
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name        reg_name    wsize       rsize       length  offset  factor_start    factor_end  factor_index    factor_step     access  init    support     callback
//     %%REG    -      TCR1A       TCR1A       8           8|16|32      8      0x00    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2A       TCR2A       8|16        8|16|32     16      0x02    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR3A       TCR3A       8|16        8|16|32     16      0x04    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR4A       TCR4A       8|16        8|16|32     16      0x06    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TSRA        TSRA        -           8|16|32     16      0x08    -               -           -               -               R       0x0     TRUE        -
//     %%REG    -      TSCRA       TSCRA       8|16        8|16|32     16      0x0A    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCMCR1A     NCMCR1A     8           8|16|32      8      0x0C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCMCR2A     NCMCR2A     8           8|16|32      8      0x0E    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIOR1A      TIOR1A      8|16        8|16|32     16      0x10    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIOR2A      TIOR2A      8|16|32     8|16|32     32      0x14    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TILRA       TILRA       -           8|16|32      8      0x18    -               -           -               -               R       0x0     TRUE        -
//     %%REG    -      TCR5A       TCR5A       8           8|16|32      8      0x1C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCNTA       TCNTA       32          8|16|32     32      0x20    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2AS1     TCR2AS1     8           8|16|32      8      0x24    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TCR2AS2     TCR2AS2     8           8|16|32      8      0x26    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      TIERA       TIERA       8|16        8|16|32     16      0x2C    -               -           -               -               W|R     0x0     TRUE        -
//     %%REG    -      NCNTA       NCNTA       16          8|16|32     16      0x40    0               7           -               0x20            W|R     0x0     TRUE        -
//     %%REG    -      NCRA        NCRA        16          8|16|32     16      0x42    0               7           -               0x20            W|R     0x0     TRUE        -
//     %%REG    -      ICRA        ICRA        -           8|16|32     32      0x44    0               7           -               0x20            R       0x0     TRUE        -
//     %%REG    -      ICRA2       ICRA2       -           8|16|32     32      0x48    0               7           -               0x20            R       0x0     TRUE        -
// 
// %REG_NAME TCR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CKSELA            2      0     0         W|R     TRUE     W
//     %%BIT    EVOSEL1           5      3     0         W|R     TRUE     -
//     %%BIT    EVOSEL2B          6      6     0         W|R     TRUE     -
//     %%BIT    EVOSEL2A          7      7     0         W|R     TRUE     -
// 
// %REG_NAME TCR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1          7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE1E        15     15     0         W|R     TRUE     -
// 
// %REG_NAME TCR3A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE2A         7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE2AE       15     15     0         W|R     TRUE     -
// 
// %REG_NAME TCR4A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE2B         7      0     0         W|R     TRUE     -
//     %%BIT    EVOSELE2BE       15     15     0         W|R     TRUE     -
// 
// %REG_NAME TSRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICFA              7      0     0         R       TRUE     -
//     %%BIT    OVFA             15     15     0         R       TRUE     -
// 
// %REG_NAME TSCRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICFCA             7      0     0         W|R     TRUE     W
//     %%BIT    OVFCA            15     15     0         W|R     TRUE     -
// 
// %REG_NAME NCMCR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCM1A             7      0     0         W|R     TRUE     W
// 
// %REG_NAME NCMCR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCM2A             7      0     0         W|R     TRUE     W
// 
// %REG_NAME TIOR1A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    IOA0              1      0     0         W|R     TRUE     -
//     %%BIT    IOA1              3      2     0         W|R     TRUE     -
//     %%BIT    IOA2              5      4     0         W|R     TRUE     -
//     %%BIT    IOA3              7      6     0         W|R     TRUE     -
//     %%BIT    IOA4              9      8     0         W|R     TRUE     -
//     %%BIT    IOA5             11     10     0         W|R     TRUE     -
//     %%BIT    IOA6             13     12     0         W|R     TRUE     -
//     %%BIT    IOA7             15     14     0         W|R     TRUE     -
// 
// %REG_NAME TIOR2A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCEA              7      0     0         W|R     TRUE     W
//     %%BIT    NCKA             15      8     0         W|R     TRUE     -
//     %%BIT    NCKGA            23     16     0         W|R     TRUE     -
// 
// %REG_NAME TILRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    TIAL0             7      0     0         R       TRUE     -
// 
// %REG_NAME TCR5A
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICRA2SEL          0      0     0         W|R     TRUE     -
// 
// %REG_NAME TCNTA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CNTA             31      0     0         W|R     TRUE     W
// 
// %REG_NAME TCR2AS1
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1S1        7      0     0         W|R     TRUE     -
// 
// %REG_NAME TCR2AS2
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    EVOSELE1S2        7      0     0         W|R     TRUE     -
// 
// %REG_NAME TIERA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICIEA0            0      0     0         W|R     TRUE     -
//     %%BIT    ICIEA1            1      1     0         W|R     TRUE     -
//     %%BIT    ICIEA2            2      2     0         W|R     TRUE     -
//     %%BIT    ICIEA3            3      3     0         W|R     TRUE     -
//     %%BIT    ICIEA4            4      4     0         W|R     TRUE     -
//     %%BIT    ICIEA5            5      5     0         W|R     TRUE     -
//     %%BIT    ICIEA6            6      6     0         W|R     TRUE     -
//     %%BIT    ICIEA7            7      7     0         W|R     TRUE     -
//     %%BIT    OVEA             15     15     0         W|R     TRUE     -
// 
// %REG_NAME NCNTA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCNTA            15      0     0         W|R     TRUE     -
// 
// %REG_NAME NCRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    NCTA             15      0     0         W|R     TRUE     -
// 
// %REG_NAME ICRA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICA              31      0     0         R       TRUE     -
// 
// %REG_NAME ICRA2
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ICA2             31      0     0         R       TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timera_regif.h
/// @brief Register IF class of model ATU5010_TIMERA
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ATU5010_TIMERA_REGIF_H__
#define __ATU5010_TIMERA_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ATU5010_TIMERA model
class Catu5010_timera_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_NCNTA   = 8,
        emNUM_NCRA    = 8,
        emNUM_ICRA    = 8,
        emNUM_ICRA2   = 8
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Catu5010_timera_regif(std::string name, uint buswidth);
    ~Catu5010_timera_regif();

protected:
    vpcl::re_register *TCR1A  ;
    vpcl::re_register *TCR2A  ;
    vpcl::re_register *TCR3A  ;
    vpcl::re_register *TCR4A  ;
    vpcl::re_register *TSRA   ;
    vpcl::re_register *TSCRA  ;
    vpcl::re_register *NCMCR1A;
    vpcl::re_register *NCMCR2A;
    vpcl::re_register *TIOR1A ;
    vpcl::re_register *TIOR2A ;
    vpcl::re_register *TILRA  ;
    vpcl::re_register *TCR5A  ;
    vpcl::re_register *TCNTA  ;
    vpcl::re_register *TCR2AS1;
    vpcl::re_register *TCR2AS2;
    vpcl::re_register *TIERA  ;
    vpcl::re_register *NCNTA  [8];
    vpcl::re_register *NCRA   [8];
    vpcl::re_register *ICRA   [8];
    vpcl::re_register *ICRA2  [8];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_TCR1A_TCR2A;
    scml2::reg<uint>      *CW_TCR3A_TCR4A;
    scml2::reg<uint>      *CW_TSRA_TSCRA;
    scml2::reg<uint>      *CW_NCMCR1A_NCMCR2A;
    scml2::reg<uint>      *CW_TIOR1A_;
    scml2::reg<uint>      *CW_TILRA_ ;
    scml2::reg<uint>      *CW_TCR5A_ ;
    scml2::reg<uint>      *CW_TCR2AS1_TCR2AS2;
    scml2::reg<uint>      *CW_TIERA_ ;
    scml2::reg<uint>      *CW_NCNTA_0_NCRA_0;
    scml2::reg<uint>      *CW_NCNTA_1_NCRA_1;
    scml2::reg<uint>      *CW_NCNTA_2_NCRA_2;
    scml2::reg<uint>      *CW_NCNTA_3_NCRA_3;
    scml2::reg<uint>      *CW_NCNTA_4_NCRA_4;
    scml2::reg<uint>      *CW_NCNTA_5_NCRA_5;
    scml2::reg<uint>      *CW_NCNTA_6_NCRA_6;
    scml2::reg<uint>      *CW_NCNTA_7_NCRA_7;
    scml2::bitfield<uint> *CW_TCR1A  ;
    scml2::bitfield<uint> *CW_TCR2A  ;
    scml2::bitfield<uint> *CW_TCR3A  ;
    scml2::bitfield<uint> *CW_TCR4A  ;
    scml2::bitfield<uint> *CW_TSRA   ;
    scml2::bitfield<uint> *CW_TSCRA  ;
    scml2::bitfield<uint> *CW_NCMCR1A;
    scml2::bitfield<uint> *CW_NCMCR2A;
    scml2::bitfield<uint> *CW_TIOR1A ;
    scml2::reg<uint>      *CW_TIOR2A ;
    scml2::bitfield<uint> *CW_TILRA  ;
    scml2::bitfield<uint> *CW_TCR5A  ;
    scml2::reg<uint>      *CW_TCNTA  ;
    scml2::bitfield<uint> *CW_TCR2AS1;
    scml2::bitfield<uint> *CW_TCR2AS2;
    scml2::bitfield<uint> *CW_TIERA  ;
    scml2::bitfield<uint> *CW_NCNTA  [8];
    scml2::bitfield<uint> *CW_NCRA   [8];
    scml2::reg<uint>      *CW_ICRA   [8];
    scml2::reg<uint>      *CW_ICRA2  [8];
    #endif

    uint TCR1A_CKSELA;
    uint TCR1A_EVOSEL1;
    uint TCR1A_EVOSEL2B;
    uint TCR1A_EVOSEL2A;
    uint TCR2A_EVOSELE1;
    uint TCR2A_EVOSELE1E;
    uint TCR3A_EVOSELE2A;
    uint TCR3A_EVOSELE2AE;
    uint TCR4A_EVOSELE2B;
    uint TCR4A_EVOSELE2BE;
    uint TSRA_ICFA;
    uint TSRA_OVFA;
    uint TSCRA_ICFCA;
    uint TSCRA_OVFCA;
    uint NCMCR1A_NCM1A;
    uint NCMCR2A_NCM2A;
    uint TIOR1A_IOA0;
    uint TIOR1A_IOA1;
    uint TIOR1A_IOA2;
    uint TIOR1A_IOA3;
    uint TIOR1A_IOA4;
    uint TIOR1A_IOA5;
    uint TIOR1A_IOA6;
    uint TIOR1A_IOA7;
    uint TIOR2A_NCEA;
    uint TIOR2A_NCKA;
    uint TIOR2A_NCKGA;
    uint TILRA_TIAL0;
    uint TCR5A_ICRA2SEL;
    uint TCNTA_CNTA;
    uint TCR2AS1_EVOSELE1S1;
    uint TCR2AS2_EVOSELE1S2;
    uint TIERA_ICIEA0;
    uint TIERA_ICIEA1;
    uint TIERA_ICIEA2;
    uint TIERA_ICIEA3;
    uint TIERA_ICIEA4;
    uint TIERA_ICIEA5;
    uint TIERA_ICIEA6;
    uint TIERA_ICIEA7;
    uint TIERA_OVEA;
    uint NCNTA_NCNTA[8];
    uint NCRA_NCTA[8];
    uint ICRA_ICA[8];
    uint ICRA2_ICA2[8];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_TCR1A_CKSELA(RegCBstr str) = 0;
    virtual void cb_TSCRA_ICFCA(RegCBstr str) = 0;
    virtual void cb_NCMCR1A_NCM1A(RegCBstr str) = 0;
    virtual void cb_NCMCR2A_NCM2A(RegCBstr str) = 0;
    virtual void cb_TIOR2A_NCEA(RegCBstr str) = 0;
    virtual void cb_TCNTA_CNTA(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Catu5010_timera_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Catu5010_timera_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ATU5010_TIMERA_REG_DEF_H__
