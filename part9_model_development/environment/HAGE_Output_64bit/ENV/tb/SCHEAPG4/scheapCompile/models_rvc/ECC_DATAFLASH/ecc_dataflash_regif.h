// -----------------------------------------------------------------------------
// $Id: ecc_dataflash_regif.h,v 1.5 2015/08/06 11:11:14 huepham Exp $
//
// Copyright(c) 2014-2015 Renesas Electronics Corporation
// Copyright(c) 2014-2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_h.skl 1.29 2014/05/09 02:57:13 sontran
//
// Input file : ecc_dataflash_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ECC_DATAFLASH
// %%REG_INSTANCE  reg_def 6
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name                 reg_name            wsize       rsize       length      offset      access      init    support     callback    
//     %%REG      DFECCCTL             DFECCCTL            16|32       8|16|32     16          0x0         R|W         0x0     TRUE        -
//     %%REG      DFERSTR              DFERSTR             -           8|16|32     8           0x4         R           0x0     TRUE        -
//     %%REG      DFERSTC              DFERSTC             8|16|32     -           8           0x8         W           0x0     TRUE        -
//     %%REG      DFOVFSTR             DFOVFSTR            -           8|16|32     8           0xC         R           0x0     TRUE        -
//     %%REG      DFOVFSTC             DFOVFSTC            8|16|32     -           8           0x10        W           0x0     TRUE        -
//     %%REG      DFERRINT             DFERRINT            8|16|32     8|16|32     8           0x14        R|W         0x7     TRUE        -
//     %%REG      DFEADR               DFEADR              -           8|16|32     32          0x18        R           0x0     TRUE        -
//     %%REG      DFTSTCTL             DFTSTCTL            16|32       8|16|32     16          0x1C        R|W         0x0     TRUE        -
// 
// %REG_NAME DFECCCTL
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PROT1       15      15      0       R|W     TRUE        -
//     %%BIT       PROT0       14      14      0       R|W     TRUE        -
//     %%BIT       SEDDIS      1       1       0       R|W     TRUE        -
//     %%BIT       ECCDIS      0       0       0       R|W     TRUE        W
//     
// %REG_NAME DFERSTR     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       DEDF        1       1       0       R       TRUE        -
//     %%BIT       SEDF        0       0       0       R       TRUE        -
// 
// %REG_NAME DFERSTC     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       ERRCLR      0       0       0       W       TRUE        W
// 
// %REG_NAME DFOVFSTR     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       ERROVF      0       0       0       R       TRUE        -
// 
// %REG_NAME DFOVFSTC     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       ERROVFCLR   0       0       0       W       TRUE        W
// 
// %REG_NAME DFERRINT     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       EOVFIE      2       2       1       R|W     TRUE        -
//     %%BIT       DEDIE       1       1       1       R|W     TRUE        -
//     %%BIT       SEDIE       0       0       1       R|W     TRUE        -
// 
// %REG_NAME DFEADR     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       DFEADR      20      2       0       R       TRUE        -
// 
// %REG_NAME DFTSTCTL     
//     %%TITLE     name        upper   lower   init    access  support     callback
//     %%BIT       PROT1       15      15      0       R|W     TRUE        -
//     %%BIT       PROT0       14      14      0       R|W     TRUE        -
//     %%BIT       ECCTST      0       0       0       R|W     TRUE        W
////////////////////////////////////////////////////////////////////////////////
/// @file ecc_dataflash_regif.h
/// @brief Register IF class of model ECC_DATAFLASH
/// $Id: ecc_dataflash_regif.h,v 1.5 2015/08/06 11:11:14 huepham Exp $
/// $Date: 2015/08/06 11:11:14 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#ifndef __ECC_DATAFLASH_REGIF_H__
#define __ECC_DATAFLASH_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ECC_DATAFLASH model
class Cecc_dataflash_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
    //Modified
    bool mIsAddcapEnabled;
    unsigned int mPawidth;

public:
    Cecc_dataflash_regif(std::string name, uint buswidth, bool is_addcap_enabled, unsigned int pawidth, std::string ecc_dataflash_version = "G3M_V30");
    ~Cecc_dataflash_regif();

protected:
    vpcl::re_register *DFECCCTL;
    vpcl::re_register *DFERSTR ;
    vpcl::re_register *DFERSTC ;
    vpcl::re_register *DFOVFSTR;
    vpcl::re_register *DFOVFSTC;
    vpcl::re_register *DFERRINT;
    vpcl::re_register *DFEADR  ;
    vpcl::re_register *DFTSTCTL;

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_DFECCCTL_;
    scml2::reg<uint>      *CW_DFERSTR_;
    scml2::reg<uint>      *CW_DFERSTC_;
    scml2::reg<uint>      *CW_DFOVFSTR_;
    scml2::reg<uint>      *CW_DFOVFSTC_;
    scml2::reg<uint>      *CW_DFERRINT_;
    scml2::reg<uint>      *CW_DFTSTCTL_;
    scml2::bitfield<uint> *CW_DFECCCTL;
    scml2::bitfield<uint> *CW_DFERSTR ;
    scml2::bitfield<uint> *CW_DFERSTC ;
    scml2::bitfield<uint> *CW_DFOVFSTR;
    scml2::bitfield<uint> *CW_DFOVFSTC;
    scml2::bitfield<uint> *CW_DFERRINT;
    scml2::reg<uint>      *CW_DFEADR  ;
    scml2::bitfield<uint> *CW_DFTSTCTL;
    #endif

    uint DFECCCTL_PROT1;
    uint DFECCCTL_PROT0;
    uint DFECCCTL_SEDDIS;
    uint DFECCCTL_ECCDIS;
    uint DFERSTR_DEDF;
    uint DFERSTR_SEDF;
    uint DFERSTC_ERRCLR;
    uint DFOVFSTR_ERROVF;
    uint DFOVFSTC_ERROVFCLR;
    uint DFERRINT_EOVFIE;
    uint DFERRINT_DEDIE;
    uint DFERRINT_SEDIE;
    uint DFEADR_DFEADR;
    uint DFTSTCTL_PROT1;
    uint DFTSTCTL_PROT0;
    uint DFTSTCTL_ECCTST;

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_DFECCCTL_ECCDIS(RegCBstr str) = 0;
    virtual void cb_DFERSTC_ERRCLR(RegCBstr str) = 0;
    virtual void cb_DFOVFSTC_ERROVFCLR(RegCBstr str) = 0;
    virtual void cb_DFTSTCTL_ECCTST(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);
    std::string mECCDATAFLASHVersion;
    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cecc_dataflash_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cecc_dataflash_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ECC_DATAFLASH_REG_DEF_H__
