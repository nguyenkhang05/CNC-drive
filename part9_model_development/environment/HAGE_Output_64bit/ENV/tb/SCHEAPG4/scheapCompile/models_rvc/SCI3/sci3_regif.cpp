// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2014 Renesas Electronics Corporation
// Copyright(c) 2010-2014 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif_class.py 1.64 2015/03/30 03:05:44 ducduong
//
// Input file : sci3_regif.txt
////////////////////////////////////////////////////////////////////////////////
//  %MODULE SCI3 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  5
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name       reg_name    wsize         rsize     length  offset    access  init     support  callback
//     %%REG      SMR        SMR         8             8|16|32   8       0x00      -       0        TRUE     -
//     %%REG      BRR        BRR         8             8|16|32   8       0x04      -       0xFF     TRUE     -
//     %%REG      SCR        SCR         8             8|16|32   8       0x08      -       0        TRUE     - 
//     %%REG      TDR        TDR         8|16          8|16|32   16      0x0C      -       0xFFFF   TRUE     -  
//     %%REG      SSR        SSR         8             8|16|32   8       0x10      -       0x84     TRUE     -
//     %%REG      RDR        RDR         8|16          8|16|32   16      0x14      R       0        TRUE     -
//     %%REG      SCMR       SCMR        8             8|16|32   8       0x18      -       0xF2     TRUE     -
//     %%REG      SEMR       SEMR        8             8|16|32   8       0x1C      -       0x04     TRUE     -
//                        
// %REG_NAME RDR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    RDR            15      0      0     R       TRUE     R   
// 
// %REG_NAME TDR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TDR            15      0     0xFFFF   R|W     TRUE     W    
//     
// %REG_NAME SMR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    CM             7      7      0     R|W     TRUE     W    
//     %%BIT    CHR            6      6      0     R|W     TRUE     -    
//     %%BIT    PE             5      5      0     R|W     TRUE     -    
//     %%BIT    PM             4      4      0     R|W     TRUE     -    
//     %%BIT    STOP           3      3      0     R|W     TRUE     -    
//     %%BIT    MP             2      2      0     R|W     TRUE     -    
//     %%BIT    CKS1           1      1      0     R|W     TRUE     -    
//     %%BIT    CKS0           0      0      0     R|W     TRUE     -    
//     
// %REG_NAME SCR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TIE            7      7      0     R|W     TRUE     -    
//     %%BIT    RIE            6      6      0     R|W     TRUE     W    
//     %%BIT    TE             5      5      0     R|W     TRUE     W    
//     %%BIT    RE             4      4      0     R|W     TRUE     W    
//     %%BIT    MPIE           3      3      0     R|W     TRUE     -    
//     %%BIT    TEIE           2      2      0     R|W     TRUE     W    
//     %%BIT    CKE1           1      1      0     R|W     TRUE     W    
//     %%BIT    CKE0           0      0      0     R|W     TRUE     W    
//     
// %REG_NAME SSR     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TDRE           7      7      1     R-W0    TRUE     R|W    
//     %%BIT    RDRF           6      6      0     R-W0    TRUE     -    
//     %%BIT    ORER           5      5      0     R-W0    TRUE     -    
//     %%BIT    FER            4      4      0     R-W0    TRUE     -    
//     %%BIT    PER            3      3      0     R-W0    TRUE     -    
//     %%BIT    TEND           2      2      1     R       TRUE     -    
//     %%BIT    MPB            1      1      0     R       TRUE     -    
//     %%BIT    MPBT           0      0      0     R|W     TRUE     -    
// 
// %REG_NAME BRR      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    BRR            7      0      255   R|W     TRUE     W    
//     
// %REG_NAME SCMR    
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    BCP2           7      7      1     R|W     FALSE    -      
//     %%BIT    RESERVED_BIT1  6      5      7     R       FALSE    -      
//     %%BIT    CHR1           4      4      1     R|W     TRUE     -    
//     %%BIT    SDIR           3      3      0     R|W     TRUE     -    
//     %%BIT    SINV           2      2      0     R|W     FALSE    -    
//     %%BIT    ASTLS          1      1      1     R|W     TRUE     -      
//     %%BIT    SMIF           0      0      0     R|W0    TRUE     W    
//     
// %REG_NAME SEMR    
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    BRME           7      7      0     R|W     TRUE     W      
//     %%BIT    MDDRS          6      6      0     R|W     TRUE     -    
//     %%BIT    BGDM           4      4      0     R|W     TRUE     -    
//     %%BIT    ABCS           3      3      0     R|W     TRUE     -    
//     %%BIT    RXDMON         2      2      1     R       TRUE     -    
////////////////////////////////////////////////////////////////////////////////
/// @file sci3_regif.cpp
/// @brief Register IF class of model SCI3
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "sci3_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Csci3_regif::Csci3_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", 0x1E)
    #endif
{
    CommandInit();
    SMR  = new vpcl::re_register(0x0000, this, "SMR" , name.c_str());
    BRR  = new vpcl::re_register(0x0004, this, "BRR" , name.c_str());
    SCR  = new vpcl::re_register(0x0008, this, "SCR" , name.c_str());
    TDR  = new vpcl::re_register(0x000C, this, "TDR" , name.c_str());
    SSR  = new vpcl::re_register(0x0010, this, "SSR" , name.c_str());
    RDR  = new vpcl::re_register(0x0014, this, "RDR" , name.c_str());
    SCMR = new vpcl::re_register(0x0018, this, "SCMR", name.c_str());
    SEMR = new vpcl::re_register(0x001C, this, "SEMR", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<5];
    for (uint i = 0; i < (1<<5); i++) {
        mRegMap[i] = (1<<5);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index++;
    mRegMap[0x0010]     = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index++;
    mRegMap[0x0018]     = index++;
    mRegMap[0x001C]     = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
#ifdef CWR_SYSTEMC
    mCurReg = mRegArray[index++] = new SRegList(SMR   , mCurReg, 0,  1,       "8", "8|16|32", false, &cwmem);
#else
    mCurReg = mRegArray[index++] = new SRegList(SMR   , mCurReg, 0,  1,       "8", "8|16|32");
#endif
    mCurReg = mRegArray[index++] = new SRegList(BRR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SCR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TDR   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SSR   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RDR   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SCMR  , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(SEMR  , mCurReg, 0,  1,       "8", "8|16|32");

    mRegList = mCurReg;

    (*SMR   ) ( 7,  7, "CM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 6,  6, "CHR"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 5,  5, "PE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 4,  4, "PM"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 3,  3, "STOP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 2,  2, "MP"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 1,  1, "CKS1"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SMR   ) ( 0,  0, "CKS0"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*BRR   ) ( 7,  0, "BRR"     , 0xFF      , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 7,  7, "TIE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 6,  6, "RIE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 5,  5, "TE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 4,  4, "RE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 3,  3, "MPIE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 2,  2, "TEIE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 1,  1, "CKE1"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCR   ) ( 0,  0, "CKE0"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*TDR   ) (15,  0, "TDR"     , 0xFFFF    , "R|W"   , vpcl::SPP_ENABLE);
    (*SSR   ) ( 7,  7, "TDRE"    , 0x1       , "R-W0"  , vpcl::SPP_ENABLE);
    (*SSR   ) ( 6,  6, "RDRF"    , 0x0       , "R-W0"  , vpcl::SPP_ENABLE);
    (*SSR   ) ( 5,  5, "ORER"    , 0x0       , "R-W0"  , vpcl::SPP_ENABLE);
    (*SSR   ) ( 4,  4, "FER"     , 0x0       , "R-W0"  , vpcl::SPP_ENABLE);
    (*SSR   ) ( 3,  3, "PER"     , 0x0       , "R-W0"  , vpcl::SPP_ENABLE);
    (*SSR   ) ( 2,  2, "TEND"    , 0x1       , "R"     , vpcl::SPP_ENABLE);
    (*SSR   ) ( 1,  1, "MPB"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SSR   ) ( 0,  0, "MPBT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*RDR   ) (15,  0, "RDR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*SCMR  ) ( 7,  7, "BCP2"    , 0x1       , "R|W"   , vpcl::SPP_DISABLE);
    (*SCMR  ) ( 6,  5, "RESERVED_BIT1", 0x7       , "R"     , vpcl::SPP_DISABLE);
    (*SCMR  ) ( 4,  4, "CHR1"    , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCMR  ) ( 3,  3, "SDIR"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCMR  ) ( 2,  2, "SINV"    , 0x0       , "R|W"   , vpcl::SPP_DISABLE);
    (*SCMR  ) ( 1,  1, "ASTLS"   , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
    (*SCMR  ) ( 0,  0, "SMIF"    , 0x0       , "R|W0"  , vpcl::SPP_ENABLE);
    (*SEMR  ) ( 7,  7, "BRME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SEMR  ) ( 6,  6, "MDDRS"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SEMR  ) ( 4,  4, "BGDM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SEMR  ) ( 3,  3, "ABCS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*SEMR  ) ( 2,  2, "RXDMON"  , 0x1       , "R"     , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["SMR"]["CM"] = &Csci3_regif::cb_SMR_CM;
    mWrCbAPI["BRR"]["BRR"] = &Csci3_regif::cb_BRR_BRR;
    mWrCbAPI["SCR"]["RIE"] = &Csci3_regif::cb_SCR_RIE;
    mWrCbAPI["SCR"]["TE"] = &Csci3_regif::cb_SCR_TE;
    mWrCbAPI["SCR"]["RE"] = &Csci3_regif::cb_SCR_RE;
    mWrCbAPI["SCR"]["TEIE"] = &Csci3_regif::cb_SCR_TEIE;
    mWrCbAPI["SCR"]["CKE1"] = &Csci3_regif::cb_SCR_CKE1;
    mWrCbAPI["SCR"]["CKE0"] = &Csci3_regif::cb_SCR_CKE0;
    mWrCbAPI["TDR"]["TDR"] = &Csci3_regif::cb_TDR_TDR;
    mWrCbAPI["SSR"]["TDRE"] = &Csci3_regif::cb_SSR_TDRE;
    mWrCbAPI["SCMR"]["SMIF"] = &Csci3_regif::cb_SCMR_SMIF;
    mWrCbAPI["SEMR"]["BRME"] = &Csci3_regif::cb_SEMR_BRME;

    mRdCbAPI["SSR"]["TDRE"] = &Csci3_regif::cb_SSR_TDRE;
    mRdCbAPI["RDR"]["RDR"] = &Csci3_regif::cb_RDR_RDR;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Csci3_regif::~Csci3_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
        delete mRegArray[i];
    }
    delete [] mRegMap;
    delete [] mRegArray;
}

/// Mask unselected bit
/// @return selected value
Csci3_regif::uint Csci3_regif::bit_select(cuint val,    ///< [in] Writting address
                                          cuint start,  ///< [in] start bit position
                                          cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csci3_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                         const unsigned char *p_data,   ///< [in] Writing data
                         cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csci3_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                         unsigned char *p_data,   ///< [out] Reading data
                         cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csci3_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                             const unsigned char *p_data,   ///< [in] Writing data
                             cuint size)                    ///< [in] Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csci3_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                             unsigned char *p_data,   ///< [out] Reading data
                             cuint size)              ///< [in]  Data size (byte)
{
    if (size == 0) {
        re_printf("error", "Invalid access size: 0 byte\n");
        return false;
    }
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, size);
        return false;
    }
    #endif

    bool ret_val = false;
    assert(p_data != NULL);
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Csci3_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                 const unsigned char *p_data,  ///< [in] Writing data
                                 cuint size,                   ///< [in] Data size (byte)
                                 bool IsDbgFunc)               ///< [in] Flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 5-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr, true)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size; // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!IsDbgFunc) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Csci3_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size,              ///< [in]  Data size (byte)
                                 bool IsDbgFunc)          ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    assert(p_data != NULL);
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 5-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if (IsDbgFunc || valid_addr || ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr, false)) {
                valid_addr = true;
                list_index.push_back(reg_index);
            } else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            if (mAPBAccessMode || IsDbgFunc || valid_addr) {
                access_addr += 1;
            } else {
                access_addr += size;  // To break out while loop
            }
        }
    }
    if (valid_addr) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (!(IsDbgFunc || mAPBAccessMode)) {
            memset(p_data, 0, size);
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Csci3_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                              unsigned char *p_data,          ///< [out] Reading data
                              cuint size,                     ///< [in]  Data size (byte)
                              cuint reg_index,                ///< [in]  Register index
                              bool IsDbgFunc)                 ///< [in]  Flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    assert(Register != NULL);
    uint pre_data = 0;
    uint pst_data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    if (!IsDbgFunc) {
        if (mIsReset) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            pre_data = (uint)(*Register);
            pst_data = Register->read();
            for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }

    assert(p_data != NULL);
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        if (mDumpBitInfo) {
            DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
        }
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Csci3_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                              const unsigned char *p_data,      ///< [in] Writing data
                              cuint size,                       ///< [in] Data size (byte)
                              cuint reg_index,                  ///< [in] Register index
                              bool IsDbgFunc)                   ///< [in] Flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    assert ((p_data != NULL) && (Register != NULL));
    memcpy(&data, p_data, size);
    uint wr_data = data;
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (!IsDbgFunc)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - size)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }

    if (!mRegArray[reg_index]->block || IsDbgFunc){
        pre_data = (uint)(*Register);
        if (IsDbgFunc) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"] = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"] = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, wr_data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            if (mDumpBitInfo) {
                DumpRegMsg("W", Register->name(), it->name(), size, addr, (unsigned int)*it, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            }
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    } else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Csci3_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if (addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    if (is_wr || !(mAPBAccessMode)) {
        for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
            errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
            assert(err_p != NULL);
            if (errno != ERANGE && *err_p == '\0') {
                if ((size/8) == detect_size) {
                    return true;
                }
            }
        }
    } else {
        return true;
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Csci3_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mAPBAccessMode  = false;
    mDumpBitInfo    = true;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Csci3_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal|error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg APBAccessMode <true/false>              Select for APB access mode when reading (Default: false)\n";
            ret += "    reg DumpBitInfo <true/false>                Select for dump bit information (Default: true)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal|error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        } else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                } else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        } else if (args[1] == "APBAccessMode") {
            if (args.size() == 2) {
                ret = (mAPBAccessMode)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mAPBAccessMode = true;
                } else if (args[2] == "false") {
                    mAPBAccessMode = false;
                } else {
                    ret = err_msg + "APBAccessMode command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "APBAccessMode has too much arguments\n";
            }
        } else if (args[1] == "DumpBitInfo") {
            if (args.size() == 2) {
                ret = (mDumpBitInfo)? "true" : "false";
            } else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpBitInfo = true;
                } else if (args[2] == "false") {
                    mDumpBitInfo = false;
                } else {
                    ret = err_msg + "DumpBitInfo command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpBitInfo has too much arguments\n";
            }
        } else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Csci3_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    assert(Register != NULL);
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        assert(err_p != NULL);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Csci3_regif::InitLocalVal()
{
    // Initialize local variables
    SMR_CM = 0x0;
    SMR_CHR = 0x0;
    SMR_PE = 0x0;
    SMR_PM = 0x0;
    SMR_STOP = 0x0;
    SMR_MP = 0x0;
    SMR_CKS1 = 0x0;
    SMR_CKS0 = 0x0;
    BRR_BRR = 0xFF;
    SCR_TIE = 0x0;
    SCR_RIE = 0x0;
    SCR_TE = 0x0;
    SCR_RE = 0x0;
    SCR_MPIE = 0x0;
    SCR_TEIE = 0x0;
    SCR_CKE1 = 0x0;
    SCR_CKE0 = 0x0;
    TDR_TDR = 0xFFFF;
    SSR_TDRE = 0x1;
    SSR_RDRF = 0x0;
    SSR_ORER = 0x0;
    SSR_FER = 0x0;
    SSR_PER = 0x0;
    SSR_TEND = 0x1;
    SSR_MPB = 0x0;
    SSR_MPBT = 0x0;
    RDR_RDR = 0x0;
    SCMR_BCP2 = 0x1;
    SCMR_RESERVED_BIT1 = 0x7;
    SCMR_CHR1 = 0x1;
    SCMR_SDIR = 0x0;
    SCMR_SINV = 0x0;
    SCMR_ASTLS = 0x1;
    SCMR_SMIF = 0x0;
    SEMR_BRME = 0x0;
    SEMR_MDDRS = 0x0;
    SEMR_BGDM = 0x0;
    SEMR_ABCS = 0x0;
    SEMR_RXDMON = 0x1;
}

/// Update bit value to local value
/// @return None
void Csci3_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        SMR_CM                   = (*SMR )["CM"  ];
        SMR_CHR                  = (*SMR )["CHR" ];
        SMR_PE                   = (*SMR )["PE"  ];
        SMR_PM                   = (*SMR )["PM"  ];
        SMR_STOP                 = (*SMR )["STOP"];
        SMR_MP                   = (*SMR )["MP"  ];
        SMR_CKS1                 = (*SMR )["CKS1"];
        SMR_CKS0                 = (*SMR )["CKS0"];
        return;
    }
    if (addr == 0x0004) {
        BRR_BRR                  = (*BRR )["BRR" ];
        return;
    }
    if (addr == 0x0008) {
        SCR_TIE                  = (*SCR )["TIE" ];
        SCR_RIE                  = (*SCR )["RIE" ];
        SCR_TE                   = (*SCR )["TE"  ];
        SCR_RE                   = (*SCR )["RE"  ];
        SCR_MPIE                 = (*SCR )["MPIE"];
        SCR_TEIE                 = (*SCR )["TEIE"];
        SCR_CKE1                 = (*SCR )["CKE1"];
        SCR_CKE0                 = (*SCR )["CKE0"];
        return;
    }
    if (addr == 0x000C) {
        TDR_TDR                  = (*TDR )["TDR" ];
        return;
    }
    if (addr == 0x0010) {
        SSR_TDRE                 = (*SSR )["TDRE"];
        SSR_RDRF                 = (*SSR )["RDRF"];
        SSR_ORER                 = (*SSR )["ORER"];
        SSR_FER                  = (*SSR )["FER" ];
        SSR_PER                  = (*SSR )["PER" ];
        SSR_TEND                 = (*SSR )["TEND"];
        SSR_MPB                  = (*SSR )["MPB" ];
        SSR_MPBT                 = (*SSR )["MPBT"];
        return;
    }
    if (addr == 0x0014) {
        RDR_RDR                  = (*RDR )["RDR" ];
        return;
    }
    if (addr == 0x0018) {
        SCMR_BCP2                = (*SCMR)["BCP2"];
        SCMR_RESERVED_BIT1       = (*SCMR)["RESERVED_BIT1"];
        SCMR_CHR1                = (*SCMR)["CHR1"];
        SCMR_SDIR                = (*SCMR)["SDIR"];
        SCMR_SINV                = (*SCMR)["SINV"];
        SCMR_ASTLS               = (*SCMR)["ASTLS"];
        SCMR_SMIF                = (*SCMR)["SMIF"];
        return;
    }
    if (addr == 0x001C) {
        SEMR_BRME                = (*SEMR)["BRME"];
        SEMR_MDDRS               = (*SEMR)["MDDRS"];
        SEMR_BGDM                = (*SEMR)["BGDM"];
        SEMR_ABCS                = (*SEMR)["ABCS"];
        SEMR_RXDMON              = (*SEMR)["RXDMON"];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Csci3_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*SMR )["CM"  ] = SMR_CM;
        (*SMR )["CHR" ] = SMR_CHR;
        (*SMR )["PE"  ] = SMR_PE;
        (*SMR )["PM"  ] = SMR_PM;
        (*SMR )["STOP"] = SMR_STOP;
        (*SMR )["MP"  ] = SMR_MP;
        (*SMR )["CKS1"] = SMR_CKS1;
        (*SMR )["CKS0"] = SMR_CKS0;
        return;
    }
    if (addr == 0x0004) {
        (*BRR )["BRR" ] = BRR_BRR;
        return;
    }
    if (addr == 0x0008) {
        (*SCR )["TIE" ] = SCR_TIE;
        (*SCR )["RIE" ] = SCR_RIE;
        (*SCR )["TE"  ] = SCR_TE;
        (*SCR )["RE"  ] = SCR_RE;
        (*SCR )["MPIE"] = SCR_MPIE;
        (*SCR )["TEIE"] = SCR_TEIE;
        (*SCR )["CKE1"] = SCR_CKE1;
        (*SCR )["CKE0"] = SCR_CKE0;
        return;
    }
    if (addr == 0x000C) {
        (*TDR )["TDR" ] = TDR_TDR;
        return;
    }
    if (addr == 0x0010) {
        (*SSR )["TDRE"] = SSR_TDRE;
        (*SSR )["RDRF"] = SSR_RDRF;
        (*SSR )["ORER"] = SSR_ORER;
        (*SSR )["FER" ] = SSR_FER;
        (*SSR )["PER" ] = SSR_PER;
        (*SSR )["TEND"] = SSR_TEND;
        (*SSR )["MPB" ] = SSR_MPB;
        (*SSR )["MPBT"] = SSR_MPBT;
        return;
    }
    if (addr == 0x0014) {
        (*RDR )["RDR" ] = RDR_RDR;
        return;
    }
    if (addr == 0x0018) {
        (*SCMR)["BCP2"] = SCMR_BCP2;
        (*SCMR)["RESERVED_BIT1"] = SCMR_RESERVED_BIT1;
        (*SCMR)["CHR1"] = SCMR_CHR1;
        (*SCMR)["SDIR"] = SCMR_SDIR;
        (*SCMR)["SINV"] = SCMR_SINV;
        (*SCMR)["ASTLS"] = SCMR_ASTLS;
        (*SCMR)["SMIF"] = SCMR_SMIF;
        return;
    }
    if (addr == 0x001C) {
        (*SEMR)["BRME"] = SEMR_BRME;
        (*SEMR)["MDDRS"] = SEMR_MDDRS;
        (*SEMR)["BGDM"] = SEMR_BGDM;
        (*SEMR)["ABCS"] = SEMR_ABCS;
        (*SEMR)["RXDMON"] = SEMR_RXDMON;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Csci3_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Csci3_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_wr_data, uint acc_size)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = 0;
    acc_size = acc_size*8;
    if ((acc_size < num_length) && is_wr_data) {
        total_length = (acc_size + 3)/4; // Calculate number of hexadecimal number
    } else {
        total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    }
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Csci3_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if (mDumpRegisterRW) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,5, false, false, size);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true, true, size);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false, false, size);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false, true, size);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false, false, size);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true, false, size);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Csci3_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<5)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Csci3_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Csci3_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Csci3_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put( (addr&0xFFFF), data);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Csci3_regif::uint Csci3_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    uint data=0;
    data = cwmem.get((addr&0xFFFF));
    return data;
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Csci3_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (!mMessageLevel[group]) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    } else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    } else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    } else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    } else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    } else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    } else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    } else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    } else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    } else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    } else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Csci3_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Csci3_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Csci3_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if (is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
unsigned short Csci3_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(REG_TYPE));
    reg_rd_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

unsigned short Csci3_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    int reg_index = get_reg_index((uint)tag);
    assert(reg_index != (1<<16));
    uint length = mRegArray[reg_index]->length;
    uint tmp_addr = (uint)tag;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (length < mBusByteWidth) {
        tmp_addr = (uint)tag ^ (mBusByteWidth - length);
    }
    #endif
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg(tmp_addr, ptr, length);
    return sizeof(REG_TYPE);
}

void Csci3_regif::cw_set_all_callback_reg(void)
{
    for(uint indx=0; indx<mTotalRegNum; indx++){
        cw_set_callback_reg( mRegArray[indx]->my_cw_p, (unsigned int)mRegArray[indx]->my_p->addr());
    }
}
#endif
