// -----------------------------------------------------------------------------
// $Id: dfe_regif.cpp,v 1.2 2018/09/06 10:17:09 huepham Exp $
//
// Copyright(c) 2015 Renesas Electronics Corporation
// Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : /home/truongvv2/RHSIF/gen/dfe_input/dfe_regif.txt
////////////////////////////////////////////////////////////////////////////////
// ## ----------------------------------------------------------------------
// ## $Id: dfe_regif.cpp,v 1.2 2018/09/06 10:17:09 huepham Exp $
// ##
// ## Copyright(c) 2015 Renesas System Design Co., Ltd.
// ## Copyright(c) 2015 Renesas Design Vietnam Co., Ltd.
// ## RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// ## This program must be used solely for the purpose for which
// ## it was furnished by Renesas Electronics Corporation. No part of this
// ## program may be reproduced or disclosed to others, in any
// ## form, without the prior written permission of Renesas Electronics
// ## Corporation.
// ## ----------------------------------------------------------------------
// 
// %MODULE DFE 
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  12
// 
// %REG_CHANNEL reg_def
//     %%TITLE    name             reg_name            rsize      wsize      length  offset    factor_start factor_end  factor_index    factor_step access  init        support  callback
//     %%REG      DFEjCTLACHn      DFEjCTLACHn         8|16|32    8|16|32    32      0x000      0           11          -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjCTLBCHn      DFEjCTLBCHn         8|16|32    8|16|32    32      0x040      0           11          -               0x04        R|W     0x01010000  TRUE     -
//     %%REG      DFEjDOCHn        DFEjDOCHn           8|16|32    -          32      0x080      0           11          -               0x04        R       0           TRUE     R
//     %%REG      DFEjPHCHn        DFEjPHCHn           8|16|32    -          32      0x0C0      0           11          -               0x04        R       0x80000000  TRUE     -
//     %%REG      DFEjPHINDCHn     DFEjPHINDCHn        8|16|32    -          32      0x100      0           11          -               0x04        R       0           TRUE     -
//     %%REG      DFEjSTCHn        DFEjSTCHn           8|16|32    -          32      0x140      0           11          -               0x04        R       0           TRUE     -
//     %%REG      DFEjCLRSTCHn     DFEjCLRSTCHn        8|16|32    8|16       16      0x180      0           11          -               0x04        R|W1:0  0           TRUE     -
//     %%REG      DFEjERMCHn       DFEjERMCHn          8|16|32    8           8      0x1C0      0           11          -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjTRGCHn       DFEjTRGCHn          8|16|32    8|16|32    32      0x200      0           11          -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjTRHCHn       DFEjTRHCHn          8|16|32    -           8      0x240      0           11          -               0x04        R       0           TRUE     -
//     %%REG      DFEjCPA          DFEjCPA             8|16|32    8|16|32    32      0x280      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjCPB          DFEjCPB             8|16|32    8|16|32    32      0x284      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjCPC          DFEjCPC             8|16|32    8|16|32    32      0x288      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjCPD          DFEjCPD             8|16|32    8|16|32    32      0x28C      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPHIA         DFEjPHIA            8|16|32    8|16|32    32      0x290      -           -           -               -           R|W     0x80000000  TRUE     -
//     %%REG      DFEjPHIB         DFEjPHIB            8|16|32    8|16|32    32      0x294      -           -           -               -           R|W     0x80000000  TRUE     -
//     %%REG      DFEjPHIC         DFEjPHIC            8|16|32    8|16|32    32      0x298      -           -           -               -           R|W     0x80000000  TRUE     -
//     %%REG      DFEjPHID         DFEjPHID            8|16|32    8|16|32    32      0x29C      -           -           -               -           R|W     0x80000000  TRUE     -
//     %%REG      DFEjPMITRG0      DFEjPMITRG0         8|16|32    8|16|32    32      0x2A8      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPMITRG1      DFEjPMITRG1         8|16|32    8|16|32    32      0x2AC      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjACA          DFEjACA             8|16|32    8|16       16      0x2B0      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjACB          DFEjACB             8|16|32    8|16       16      0x2B4      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjACC          DFEjACC             8|16|32    8|16       16      0x2B8      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjACD          DFEjACD             8|16|32    8|16       16      0x2BC      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjDI           DFEjDI              8|16|32    8|16|32    32      0x2C0      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjTRG          DFEjTRG             8|16|32    8           8      0x2C4      -           -           -               -           R|W1:0  0           TRUE     -
//     %%REG      DFEjEST          DFEjEST             8|16|32    -          32      0x2C8      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjST           DFEjST              8|16|32    -          32      0x2CC      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjPITRG1       DFEjPITRG1          8|16|32    8|16|32    32      0x2D4      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjMITRG1       DFEjMITRG1          8|16|32    8|16|32    32      0x2D8      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjFITRG1       DFEjFITRG1          8|16|32    8|16|32    32      0x2DC      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPITRG        DFEjPITRG           8|16|32    8|16|32    32      0x300      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjMITRG        DFEjMITRG           8|16|32    8|16|32    32      0x304      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjFITRG        DFEjFITRG           8|16|32    8|16|32    32      0x308      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPHUPDCn      DFEjPHUPDCn         8|16|32    8           8      0x310      0           3           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjHOLCH0       DFEjHOLCH0          8|16|32    -          32      0x320      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH0       DFEjHOHCH0          8|16|32    -          32      0x324      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLCH2       DFEjHOLCH2          8|16|32    -          32      0x328      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH2       DFEjHOHCH2          8|16|32    -          32      0x32C      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLCH4       DFEjHOLCH4          8|16|32    -          32      0x330      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH4       DFEjHOHCH4          8|16|32    -          32      0x334      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLCH6       DFEjHOLCH6          8|16|32    -          32      0x338      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH6       DFEjHOHCH6          8|16|32    -          32      0x33C      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLCH8       DFEjHOLCH8          8|16|32    -          32      0x340      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH8       DFEjHOHCH8          8|16|32    -          32      0x344      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLCH10      DFEjHOLCH10         8|16|32    -          32      0x348      -           -           -               -           R       0           TRUE     R
//     %%REG      DFEjHOHCH10      DFEjHOHCH10         8|16|32    -          32      0x34C      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH0      DFEjHOLMCH0         8|16|32    -          32      0x360      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH2      DFEjHOLMCH2         8|16|32    -          32      0x364      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH4      DFEjHOLMCH4         8|16|32    -          32      0x368      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH6      DFEjHOLMCH6         8|16|32    -          32      0x36C      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH8      DFEjHOLMCH8         8|16|32    -          32      0x370      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjHOLMCH10     DFEjHOLMCH10        8|16|32    -          32      0x374      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjGAINCHn      DFEjGAINCHn         8|16|32    8|16|32    32      0x380      0           11          -               0x04        R|W     0x40004000  TRUE     -
//     %%REG      DFEjTMTRGCHn     DFEjTMTRGCHn        8|16|32    8|16|32    32      0x3C0      0           11          -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjCPOFSTn      DFEjCPOFSTn         8|16|32    8|16|32    32      0x440      0           2           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjPH23CCTL0    DFEjPH23CCTL0       8|16|32    8|16|32    32      0x700      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPH2CTL0      DFEjPH2CTL0         8|16|32    8|16|32    32      0x704      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPH3CTL0      DFEjPH3CTL0         8|16|32    8|16|32    32      0x708      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjPH20         DFEjPH20            8|16|32    -          32      0x780      -           -           -               -           R       0x80000000  TRUE     -
//     %%REG      DFEjPH30         DFEjPH30            8|16|32    -          32      0x784      -           -           -               -           R       0x80000000  TRUE     -
//     %%REG      DFEjPH2IND0      DFEjPH2IND0         8|16|32    -          32      0x7E0      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjPH3IND0      DFEjPH3IND0         8|16|32    -          32      0x7E4      -           -           -               -           R       0           TRUE     -
//     %%REG      DFEjSUBCTLCHn    DFEjSUBCTLCHn       8|16|32    8|16|32    32      0x840      0           2           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjSUBDOCHn     DFEjSUBDOCHn        8|16|32    -          32      0x860      0           2           -               0x04        R       0           TRUE     R
//     %%REG      DFEjSUBSTCHn     DFEjSUBSTCHn        8|16|32    -          32      0x880      0           2           -               0x04        R       0           TRUE     -
//     %%REG      DFEjSUBCLRSTCHn  DFEjSUBCLRSTCHn     8|16|32    8|16|32    32      0x8A0      0           2           -               0x04        R|W1:0  0           TRUE     -
//     %%REG      DFEjSUBERMCHn    DFEjSUBERMCHn       8|16|32    8|16|32    32      0x8C0      0           2           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjSUBTRGCHn    DFEjSUBTRGCHn       8|16|32    8|16|32    32      0x8E0      0           2           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjSUBTRHCHn    DFEjSUBTRHCHn       8|16|32    -          32      0x900      0           2           -               0x04        R       0           TRUE     -
//     %%REG      DFEjSUBTRG0      DFEjSUBTRG0         8|16|32    8|16|32    32      0x920      -           -           -               -           R|W     0           TRUE     -
//     %%REG      DFEjCAPCTLCHn    DFEjCAPCTLCHn       8|16|32    8|16|32    32      0x940      0           2           -               0x04        R|W     0           TRUE     -
//     %%REG      DFEjCAPDOCHn     DFEjCAPDOCHn        8|16|32    -          32      0x960      0           2           -               0x04        R       0           TRUE     R
//     %%REG      DFEjCAPSTCHn     DFEjCAPSTCHn        8|16|32    -          32      0x980      0           2           -               0x04        R       0           TRUE     -
//     %%REG      DFEjCAPCLRSTCHn  DFEjCAPCLRSTCHn     8|16|32    8|16|32    32      0x9A0      0           2           -               0x04        R|W1:0  0           TRUE     -
//     %%REG      DFEjCAPERMCHn    DFEjCAPERMCHn       8|16|32    8|16|32    32      0x9C0      0           2           -               0x04        R|W     0           TRUE     -
// 
// %REG_NAME DFEjCTLACHn      
//     %%TITLE  name           upper  lower  init  access   support  callback    
//     %%BIT    CATAG          30     26     0     R|W      TRUE     -
//     %%BIT    CAEN           25     24     0     R|W      TRUE     -
//     %%BIT    TAG            20     16     0     R|W      TRUE     -
//     %%BIT    CMD            15     12     0     R|W      TRUE     -
//     %%BIT    FMT             8      8     0     R|W      TRUE     -
//     %%BIT    IEP             7      7     0     R|W      TRUE     -
//     %%BIT    IEE             6      6     0     R|W      TRUE     -
//     %%BIT    IEC             5      5     0     R|W      TRUE     -
//     %%BIT    IEO             4      4     0     R|W      TRUE     -
//     %%BIT    CNSL            3      3     0     R|W      TRUE     -
//     %%BIT    CNSLE           2      2     0     R|W      TRUE     -
//     %%BIT    AIME            1      1     0     R|W      TRUE     -
//     %%BIT    EN              0      0     0     R|W      TRUE     W
// 
// %REG_NAME DFEjCTLBCHn      
//     %%TITLE  name           upper  lower  init  access   support  callback    
//     %%BIT    OFSL           26     25     0     R|W      TRUE     -
//     %%BIT    DISB           24     24     1     R|W      TRUE     -
//     %%BIT    PHPS           23     23     0     R|W      TRUE     -
//     %%BIT    CPCS           22     22     0     R|W      TRUE     -
//     %%BIT    PHSLB2         19     17     0     R|W      TRUE     -
//     %%BIT    DISA           16     16     1     R|W      TRUE     -
//     %%BIT    PRCSC          15     15     0     R|W      TRUE     -
//     %%BIT    SELB2          14     12     0     R|W      TRUE     -
//     %%BIT    SELB1          11     10     0     R|W      TRUE     -
//     %%BIT    PRCSB           9      8     0     R|W      TRUE     -
//     %%BIT    HOFS            7      7     0     R|W      TRUE     -
//     %%BIT    PICS            6      6     0     R|W      TRUE     -
//     %%BIT    SELA            5      4     0     R|W      TRUE     -
//     %%BIT    PFMT            3      3     0     R|W      TRUE     -
//     %%BIT    ABS             2      2     0     R|W      TRUE     -
//     %%BIT    PRCSA           1      0     0     R|W      TRUE     W
// 
// %REG_NAME DFEjPHINDCHn     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PHIOW          15     15     0     R        TRUE     -
//     %%BIT    PHIOF          14     14     0     R        TRUE     R
//     %%BIT    PHIND          13      0     0     R        TRUE     -
// 
// %REG_NAME DFEjSTCHn       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PH23ST         18     16     0     R        TRUE     -
//     %%BIT    VALID          12     12     0     R        TRUE     -
//     %%BIT    PHE            10     10     0     R        TRUE     -
//     %%BIT    CND             9      9     0     R        TRUE     -
//     %%BIT    DOEN            8      8     0     R        TRUE     -
//     %%BIT    CER             5      5     0     R        TRUE     -
//     %%BIT    AER             4      4     0     R        TRUE     -
//     %%BIT    MER             3      3     0     R        TRUE     -
//     %%BIT    GER             2      2     0     R        TRUE     -
//     %%BIT    DOOW            1      1     0     R        TRUE     -
//     %%BIT    DIOW            0      0     0     R        TRUE     -
// 
// %REG_NAME DFEjCLRSTCHn     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    CLRPHIOW       15     15     0     R|W1:0  TRUE     -
//     %%BIT    CLRPHE         10     10     0     R|W1:0  TRUE     -
//     %%BIT    CLRCND          9      9     0     R|W1:0  TRUE     -
//     %%BIT    CLRDOEN         8      8     0     R|W1:0  TRUE     -
//     %%BIT    CLRCER          5      5     0     R|W1:0  TRUE     -
//     %%BIT    CLRAER          4      4     0     R|W1:0  TRUE     -
//     %%BIT    CLRMER          3      3     0     R|W1:0  TRUE     -
//     %%BIT    CLRGER          2      2     0     R|W1:0  TRUE     -
//     %%BIT    CLRDOOW         1      1     0     R|W1:0  TRUE     -
//     %%BIT    CLRDIOW         0      0     0     R|W1:0  TRUE     W
// 
// %REG_NAME DFEjERMCHn       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    MSKCER          5      5     0     R|W      TRUE     -
//     %%BIT    MSKAER          4      4     0     R|W      TRUE     -
//     %%BIT    MSKMER          3      3     0     R|W      TRUE     -
//     %%BIT    MSKGER          2      2     0     R|W      TRUE     -
//     %%BIT    MSKDOOW         1      1     0     R|W      TRUE     -
//     %%BIT    MSKDIOW         0      0     0     R|W      TRUE     -
// 
// %REG_NAME DFEjTRGCHn       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PMFE           23     22     0     R|W     TRUE     -
//     %%BIT    PME            21     20     0     R|W     TRUE     -
//     %%BIT    PFE            19     18     0     R|W     TRUE     -
//     %%BIT    AFE            15     14     0     R|W     TRUE     -
//     %%BIT    PE             11     10     0     R|W     TRUE     -
//     %%BIT    PT              9      8     0     R|W     TRUE     -
//     %%BIT    AE              7      6     0     R|W     TRUE     -
//     %%BIT    AT              5      4     0     R|W     TRUE     -
//     %%BIT    FE              3      2     0     R|W     TRUE     -
//     %%BIT    FT              1      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjTRHCHn       
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PMITS           6      6     0     R        TRUE     -
//     %%BIT    PMETS           5      5     0     R        TRUE     -
//     %%BIT    PITS            4      4     0     R        TRUE     -
//     %%BIT    PETS            3      3     0     R        TRUE     -
//     %%BIT    MITS            2      2     0     R        TRUE     -
//     %%BIT    METS            1      1     0     R        TRUE     -
//     %%BIT    FITS            0      0     0     R        TRUE     -
// 
// %REG_NAME DFEjPMITRG0     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PMITMTRG3      28     24     0     R|W     TRUE     -
//     %%BIT    PMITMTRG2      20     16     0     R|W     TRUE     -
//     %%BIT    PMITMTRG1      12      8     0     R|W     TRUE     -
//     %%BIT    PMITMTRG0       4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjPMITRG1     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PMITMTRG5      12      8     0     R|W     TRUE     -
//     %%BIT    PMITMTRG4       4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjACA     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    AC              8      0     0     R|W      TRUE     -
// 
// %REG_NAME DFEjACB     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    AC              8      0     0     R|W      TRUE     -
// 
// %REG_NAME DFEjACC     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    AC              8      0     0     R|W      TRUE     -
// 
// %REG_NAME DFEjACD     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    AC              8      0     0     R|W      TRUE     -
// 
// %REG_NAME DFEjDI      
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TAG            20     16     0     R|W      TRUE     -
//     %%BIT    DI             15      0     0     R|W      TRUE     W
// 
// %REG_NAME DFEjTRG     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    TRGA            0      0     0     R|W1:0  TRUE      W
// 
// %REG_NAME DFEjEST     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    CP2S           18     18     0     R        TRUE     -
//     %%BIT    CP1S           17     17     0     R        TRUE     -
//     %%BIT    CP0S           16     16     0     R        TRUE     -
//     %%BIT    SB2S            2      2     0     R        TRUE     -
//     %%BIT    SB1S            1      1     0     R        TRUE     -
//     %%BIT    SB0S            0      0     0     R        TRUE     -
// 
// %REG_NAME DFEjST     
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    CH11S          23     22     0     R        TRUE     -
//     %%BIT    CH10S          21     20     0     R        TRUE     -
//     %%BIT    CH9S           19     18     0     R        TRUE     -
//     %%BIT    CH8S           17     16     0     R        TRUE     -
//     %%BIT    CH7S           15     14     0     R        TRUE     -
//     %%BIT    CH6S           13     12     0     R        TRUE     -
//     %%BIT    CH5S           11     10     0     R        TRUE     -
//     %%BIT    CH4S            9      8     0     R        TRUE     -
//     %%BIT    CH3S            7      6     0     R        TRUE     -
//     %%BIT    CH2S            5      4     0     R        TRUE     -
//     %%BIT    CH1S            3      2     0     R        TRUE     -
//     %%BIT    CH0S            1      0     0     R        TRUE     -
// 
// %REG_NAME DFEjPITRG1  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PITMTRG5       12      8     0     R|W     TRUE     -
//     %%BIT    PITMTRG4        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjMITRG1  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    MITMTRG5       12      8     0     R|W     TRUE     -
//     %%BIT    MITMTRG4        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjFITRG1  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    FITMTRG5       12      8     0     R|W     TRUE     -
//     %%BIT    FITMTRG4        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjPITRG  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PITMTRG3       28     24     0     R|W     TRUE     -
//     %%BIT    PITMTRG2       20     16     0     R|W     TRUE     -
//     %%BIT    PITMTRG1       12      8     0     R|W     TRUE     -
//     %%BIT    PITMTRG0        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjMITRG  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    MITMTRG3       28     24     0     R|W     TRUE     -
//     %%BIT    MITMTRG2       20     16     0     R|W     TRUE     -
//     %%BIT    MITMTRG1       12      8     0     R|W     TRUE     -
//     %%BIT    MITMTRG0        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjFITRG  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    FITMTRG3       28     24     0     R|W     TRUE     -
//     %%BIT    FITMTRG2       20     16     0     R|W     TRUE     -
//     %%BIT    FITMTRG1       12      8     0     R|W     TRUE     -
//     %%BIT    FITMTRG0        4      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjPHUPDCn 
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    PHUPDCH         7      4     0     R|W     TRUE     -
//     %%BIT    PH23SL          2      2     0     R|W     TRUE     -
//     %%BIT    PH23E           1      1     0     R|W     TRUE     -
//     %%BIT    OEPHUPD         0      0     0     R|W     TRUE     -
// 
// %REG_NAME DFEjHOHCH0  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjHOHCH2  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjHOHCH4  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjHOHCH6  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjHOHCH8  
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjHOHCH10 
//     %%TITLE  name           upper  lower  init  access  support  callback    
//     %%BIT    GURD            5      0     0     R        TRUE     R
// 
// %REG_NAME DFEjGAINCHn 
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    GAIN3          31     16     0x4000  R|W      TRUE     -
//     %%BIT    GAIN2          15      0     0x4000  R|W      TRUE     -
// 
// %REG_NAME DFEjTMTRGCHn
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    PMT            14     12     0       R|W     TRUE     -
//     %%BIT    PT             10      8     0       R|W     TRUE     -
//     %%BIT    AT              6      4     0       R|W     TRUE     -
//     %%BIT    FT              2      0     0       R|W     TRUE     -
// 
// %REG_NAME DFEjPH23CCTL0
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    CHS             7      4     0       R|W     TRUE     -
//     %%BIT    PFMT            3      3     0       R|W     TRUE     -
//     %%BIT    PEN             0      0     0       R|W     TRUE     W
// 
// %REG_NAME DFEjPH2CTL0  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    OFSL            9      8     0       R|W     TRUE     -
//     %%BIT    PH2SLB2         6      4     0       R|W     TRUE     -
//     %%BIT    PHPS            3      3     0       R|W     TRUE     -
//     %%BIT    CN2SLB2         2      0     0       R|W     TRUE     W
// 
// %REG_NAME DFEjPH3CTL0  
//     %%TITLE  name           upper  lower  init    access   support  callback    
//     %%BIT    OFSL            9      8     0       R|W      TRUE     -
//     %%BIT    PH3SLB2         6      4     0       R|W      TRUE     -
//     %%BIT    PHPS            3      3     0       R|W      TRUE     -
//     %%BIT    CN3SLB2         2      0     0       R|W      TRUE     W
// 
// %REG_NAME DFEjPH2IND0  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    PH2IOW         15     15     0       R        TRUE     -
//     %%BIT    PH2IOF         14     14     0       R        TRUE     -
//     %%BIT    PH2IND         13      0     0       R        TRUE     -
// 
// %REG_NAME DFEjPH3IND0  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    PH3IOW         15     15     0       R        TRUE     -
//     %%BIT    PH3IOF         14     14     0       R        TRUE     -
//     %%BIT    PH3IND         13      0     0       R        TRUE     -
// 
// %REG_NAME DFEjSUBCTLCHn 
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    CATAG          30     26     0       R|W     TRUE     -
//     %%BIT    CAEN           25     24     0       R|W     TRUE     -
//     %%BIT    MINCH          11      8     0       R|W     TRUE     -
//     %%BIT    SUBCH           7      4     0       R|W     TRUE     -
//     %%BIT    SFMT            3      3     0       R|W     TRUE     -
//     %%BIT    SIEE            2      2     0       R|W     TRUE     -
//     %%BIT    SIEO            1      1     0       R|W     TRUE     -
//     %%BIT    SEN             0      0     0       R|W     TRUE     W
// 
// %REG_NAME DFEjSUBSTCHn  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    SDOEN           8      8     0       R      TRUE     -
//     %%BIT    MINF            7      7     0       R      TRUE     -
//     %%BIT    SUBF            6      6     0       R      TRUE     -
//     %%BIT    SCER            5      5     0       R      TRUE     -
//     %%BIT    SGER            2      2     0       R      TRUE     -
//     %%BIT    SDOOW           1      1     0       R      TRUE     -
// 
// %REG_NAME DFEjSUBCLRSTCHn
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    CLRSDOEN        8      8     0       R|W1:0  TRUE     -
//     %%BIT    CLRSCER         5      5     0       R|W1:0  TRUE     -
//     %%BIT    CLRSGER         2      2     0       R|W1:0  TRUE     -
//     %%BIT    CLRSDOOW        1      1     0       R|W1:0  TRUE     W
// 
// %REG_NAME DFEjSUBERMCHn  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    MSKSCER         5      5     0       R|W    TRUE     -
//     %%BIT    MSKSGER         2      2     0       R|W    TRUE     -
//     %%BIT    MSKSDOOW        1      1     0       R|W    TRUE     -
// 
// %REG_NAME DFEjSUBTRGCHn  
//     %%TITLE  name           upper  lower  init    access support  callback    
//     %%BIT    SBFE           15     14     0       R|W    TRUE     -
//     %%BIT    SBE             7      6     0       R|W    TRUE     -
//     %%BIT    SBT             1      0     0       R|W    TRUE     W
// 
// %REG_NAME DFEjSUBTRHCHn  
//     %%TITLE  name           upper  lower  init    access support  callback    
//     %%BIT    SITS            1      1     0       R      TRUE     -
//     %%BIT    SETS            0      0     0       R      TRUE     -
// 
// %REG_NAME DFEjSUBTRG0   
//     %%TITLE  name           upper  lower  init    access support  callback    
//     %%BIT    SUBTMTRG2      20     16     0       R|W    TRUE     -
//     %%BIT    SUBTMTRG1      12      8     0       R|W    TRUE     -
//     %%BIT    SUBTMTRG0       4      0     0       R|W    TRUE     -
// 
// %REG_NAME DFEjCAPCTLCHn  
//     %%TITLE  name           upper  lower  init    access support  callback    
//     %%BIT    CAPCH           7      4     0       R|W    TRUE     -
//     %%BIT    CIEE            2      2     0       R|W    TRUE     -
//     %%BIT    CEN             0      0     0       R|W    TRUE     W
// 
// %REG_NAME DFEjCAPSTCHn  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    CDOEN           8      8     0       R      TRUE     -
//     %%BIT    CDOOW           1      1     0       R      TRUE     -
// 
// %REG_NAME DFEjCAPCLRSTCHn  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    CLRCDOEN        8      8     0       R|W1:0  TRUE     -
//     %%BIT    CLRCDOOW        1      1     0       R|W1:0  TRUE     W
// 
// %REG_NAME DFEjCAPERMCHn  
//     %%TITLE  name           upper  lower  init    access  support  callback    
//     %%BIT    MSKCDOOW        1      1     0       R|W     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file dfe_regif.cpp
/// @brief Register IF class of model DFE
/// $Id: dfe_regif.cpp,v 1.2 2018/09/06 10:17:09 huepham Exp $
/// $Date: 2018/09/06 10:17:09 $
/// $Revison$
/// $Author: huepham $
////////////////////////////////////////////////////////////////////////////////
#include "dfe_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cdfe_regif::Cdfe_regif(std::string name, uint buswidth, uint num_chan)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x9CC/4))
    #endif
{
    CommandInit();
    DFEjCPA         = new vpcl::re_register(0x0280, this, "DFEjCPA"        , name.c_str());
    DFEjCPB         = new vpcl::re_register(0x0284, this, "DFEjCPB"        , name.c_str());
    DFEjCPC         = new vpcl::re_register(0x0288, this, "DFEjCPC"        , name.c_str());
    DFEjCPD         = new vpcl::re_register(0x028C, this, "DFEjCPD"        , name.c_str());
    DFEjPHIA        = new vpcl::re_register(0x0290, this, "DFEjPHIA"       , name.c_str());
    DFEjPHIB        = new vpcl::re_register(0x0294, this, "DFEjPHIB"       , name.c_str());
    DFEjPHIC        = new vpcl::re_register(0x0298, this, "DFEjPHIC"       , name.c_str());
    DFEjPHID        = new vpcl::re_register(0x029C, this, "DFEjPHID"       , name.c_str());
    DFEjPMITRG0     = new vpcl::re_register(0x02A8, this, "DFEjPMITRG0"    , name.c_str());
    DFEjPMITRG1     = new vpcl::re_register(0x02AC, this, "DFEjPMITRG1"    , name.c_str());
    DFEjACA         = new vpcl::re_register(0x02B0, this, "DFEjACA"        , name.c_str());
    DFEjACB         = new vpcl::re_register(0x02B4, this, "DFEjACB"        , name.c_str());
    DFEjACC         = new vpcl::re_register(0x02B8, this, "DFEjACC"        , name.c_str());
    DFEjACD         = new vpcl::re_register(0x02BC, this, "DFEjACD"        , name.c_str());
    DFEjDI          = new vpcl::re_register(0x02C0, this, "DFEjDI"         , name.c_str());
    DFEjTRG         = new vpcl::re_register(0x02C4, this, "DFEjTRG"        , name.c_str());
    DFEjEST         = new vpcl::re_register(0x02C8, this, "DFEjEST"        , name.c_str());
    DFEjST          = new vpcl::re_register(0x02CC, this, "DFEjST"         , name.c_str());
    DFEjPITRG1      = new vpcl::re_register(0x02D4, this, "DFEjPITRG1"     , name.c_str());
    DFEjMITRG1      = new vpcl::re_register(0x02D8, this, "DFEjMITRG1"     , name.c_str());
    DFEjFITRG1      = new vpcl::re_register(0x02DC, this, "DFEjFITRG1"     , name.c_str());
    DFEjPITRG       = new vpcl::re_register(0x0300, this, "DFEjPITRG"      , name.c_str());
    DFEjMITRG       = new vpcl::re_register(0x0304, this, "DFEjMITRG"      , name.c_str());
    DFEjFITRG       = new vpcl::re_register(0x0308, this, "DFEjFITRG"      , name.c_str());
    DFEjHOLCH0      = new vpcl::re_register(0x0320, this, "DFEjHOLCH0"     , name.c_str());
    DFEjHOHCH0      = new vpcl::re_register(0x0324, this, "DFEjHOHCH0"     , name.c_str());
    DFEjHOLCH2      = new vpcl::re_register(0x0328, this, "DFEjHOLCH2"     , name.c_str());
    DFEjHOHCH2      = new vpcl::re_register(0x032C, this, "DFEjHOHCH2"     , name.c_str());
    DFEjHOLCH4      = new vpcl::re_register(0x0330, this, "DFEjHOLCH4"     , name.c_str());
    DFEjHOHCH4      = new vpcl::re_register(0x0334, this, "DFEjHOHCH4"     , name.c_str());
    DFEjHOLCH6      = new vpcl::re_register(0x0338, this, "DFEjHOLCH6"     , name.c_str());
    DFEjHOHCH6      = new vpcl::re_register(0x033C, this, "DFEjHOHCH6"     , name.c_str());
    DFEjHOLCH8      = new vpcl::re_register(0x0340, this, "DFEjHOLCH8"     , name.c_str());
    DFEjHOHCH8      = new vpcl::re_register(0x0344, this, "DFEjHOHCH8"     , name.c_str());
    DFEjHOLCH10     = new vpcl::re_register(0x0348, this, "DFEjHOLCH10"    , name.c_str());
    DFEjHOHCH10     = new vpcl::re_register(0x034C, this, "DFEjHOHCH10"    , name.c_str());
    DFEjHOLMCH0     = new vpcl::re_register(0x0360, this, "DFEjHOLMCH0"    , name.c_str());
    DFEjHOLMCH2     = new vpcl::re_register(0x0364, this, "DFEjHOLMCH2"    , name.c_str());
    DFEjHOLMCH4     = new vpcl::re_register(0x0368, this, "DFEjHOLMCH4"    , name.c_str());
    DFEjHOLMCH6     = new vpcl::re_register(0x036C, this, "DFEjHOLMCH6"    , name.c_str());
    DFEjHOLMCH8     = new vpcl::re_register(0x0370, this, "DFEjHOLMCH8"    , name.c_str());
    DFEjHOLMCH10    = new vpcl::re_register(0x0374, this, "DFEjHOLMCH10"   , name.c_str());
    DFEjPH23CCTL0   = new vpcl::re_register(0x0700, this, "DFEjPH23CCTL0"  , name.c_str());
    DFEjPH2CTL0     = new vpcl::re_register(0x0704, this, "DFEjPH2CTL0"    , name.c_str());
    DFEjPH3CTL0     = new vpcl::re_register(0x0708, this, "DFEjPH3CTL0"    , name.c_str());
    DFEjPH20        = new vpcl::re_register(0x0780, this, "DFEjPH20"       , name.c_str());
    DFEjPH30        = new vpcl::re_register(0x0784, this, "DFEjPH30"       , name.c_str());
    DFEjPH2IND0     = new vpcl::re_register(0x07E0, this, "DFEjPH2IND0"    , name.c_str());
    DFEjPH3IND0     = new vpcl::re_register(0x07E4, this, "DFEjPH3IND0"    , name.c_str());
    DFEjSUBTRG0     = new vpcl::re_register(0x0920, this, "DFEjSUBTRG0"    , name.c_str());
    std::ostringstream str_tmp;
    mNumChan = num_chan;
    for(uint i = 0; i < emNUM_DFEjCTLACHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCTLACHn"<< i;
        DFEjCTLACHn    [i] = new vpcl::re_register((0x0000) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCTLBCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCTLBCHn"<< i;
        DFEjCTLBCHn    [i] = new vpcl::re_register((0x0040) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjDOCHn"<< i;
        DFEjDOCHn      [i] = new vpcl::re_register((0x0080) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjPHCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjPHCHn"<< i;
        DFEjPHCHn      [i] = new vpcl::re_register((0x00C0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjPHINDCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjPHINDCHn"<< i;
        DFEjPHINDCHn   [i] = new vpcl::re_register((0x0100) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSTCHn"<< i;
        DFEjSTCHn      [i] = new vpcl::re_register((0x0140) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCLRSTCHn"<< i;
        DFEjCLRSTCHn   [i] = new vpcl::re_register((0x0180) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjERMCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjERMCHn"<< i;
        DFEjERMCHn     [i] = new vpcl::re_register((0x01C0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjTRGCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjTRGCHn"<< i;
        DFEjTRGCHn     [i] = new vpcl::re_register((0x0200) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjTRHCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjTRHCHn"<< i;
        DFEjTRHCHn     [i] = new vpcl::re_register((0x0240) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjPHUPDCn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjPHUPDCn"<< i;
        DFEjPHUPDCn    [i] = new vpcl::re_register((0x0310) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjGAINCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjGAINCHn"<< i;
        DFEjGAINCHn    [i] = new vpcl::re_register((0x0380) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjTMTRGCHn"<< i;
        DFEjTMTRGCHn   [i] = new vpcl::re_register((0x03C0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCPOFSTn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCPOFSTn"<< i;
        DFEjCPOFSTn    [i] = new vpcl::re_register((0x0440) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBCTLCHn"<< i;
        DFEjSUBCTLCHn  [i] = new vpcl::re_register((0x0840) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBDOCHn"<< i;
        DFEjSUBDOCHn   [i] = new vpcl::re_register((0x0860) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBSTCHn"<< i;
        DFEjSUBSTCHn   [i] = new vpcl::re_register((0x0880) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBCLRSTCHn"<< i;
        DFEjSUBCLRSTCHn[i] = new vpcl::re_register((0x08A0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBERMCHn"<< i;
        DFEjSUBERMCHn  [i] = new vpcl::re_register((0x08C0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBTRGCHn"<< i;
        DFEjSUBTRGCHn  [i] = new vpcl::re_register((0x08E0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBTRHCHn"<< i;
        DFEjSUBTRHCHn  [i] = new vpcl::re_register((0x0900) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPCTLCHn"<< i;
        DFEjCAPCTLCHn  [i] = new vpcl::re_register((0x0940) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPDOCHn"<< i;
        DFEjCAPDOCHn   [i] = new vpcl::re_register((0x0960) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPSTCHn"<< i;
        DFEjCAPSTCHn   [i] = new vpcl::re_register((0x0980) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPCLRSTCHn"<< i;
        DFEjCAPCLRSTCHn[i] = new vpcl::re_register((0x09A0) + 4*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPERMCHn"<< i;
        DFEjCAPERMCHn  [i] = new vpcl::re_register((0x09C0) + 4*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    for(uint i = 0; i < emNUM_DFEjCTLACHn;    i++) {
        mRegMap[(0x0000)     + i*4 ] = index;
        mRegMap[(0x0000 + 1) + i*4 ] = index;
        mRegMap[(0x0000 + 2) + i*4 ] = index;
        mRegMap[(0x0000 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCTLBCHn;    i++) {
        mRegMap[(0x0040)     + i*4 ] = index;
        mRegMap[(0x0040 + 1) + i*4 ] = index;
        mRegMap[(0x0040 + 2) + i*4 ] = index;
        mRegMap[(0x0040 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjDOCHn;      i++) {
        mRegMap[(0x0080)     + i*4 ] = index;
        mRegMap[(0x0080 + 1) + i*4 ] = index;
        mRegMap[(0x0080 + 2) + i*4 ] = index;
        mRegMap[(0x0080 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjPHCHn;      i++) {
        mRegMap[(0x00C0)     + i*4 ] = index;
        mRegMap[(0x00C0 + 1) + i*4 ] = index;
        mRegMap[(0x00C0 + 2) + i*4 ] = index;
        mRegMap[(0x00C0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjPHINDCHn;   i++) {
        mRegMap[(0x0100)     + i*4 ] = index;
        mRegMap[(0x0100 + 1) + i*4 ] = index;
        mRegMap[(0x0100 + 2) + i*4 ] = index;
        mRegMap[(0x0100 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSTCHn;      i++) {
        mRegMap[(0x0140)     + i*4 ] = index;
        mRegMap[(0x0140 + 1) + i*4 ] = index;
        mRegMap[(0x0140 + 2) + i*4 ] = index;
        mRegMap[(0x0140 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn;   i++) {
        mRegMap[(0x0180)     + i*4 ] = index;
        mRegMap[(0x0180 + 1) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjERMCHn;     i++) {
        mRegMap[(0x01C0)     + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjTRGCHn;     i++) {
        mRegMap[(0x0200)     + i*4 ] = index;
        mRegMap[(0x0200 + 1) + i*4 ] = index;
        mRegMap[(0x0200 + 2) + i*4 ] = index;
        mRegMap[(0x0200 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjTRHCHn;     i++) {
        mRegMap[(0x0240)     + i*4 ] = index++;
    }
    mRegMap[0x0280]     = index;
    mRegMap[0x0280 + 1] = index;
    mRegMap[0x0280 + 2] = index;
    mRegMap[0x0280 + 3] = index++;
    mRegMap[0x0284]     = index;
    mRegMap[0x0284 + 1] = index;
    mRegMap[0x0284 + 2] = index;
    mRegMap[0x0284 + 3] = index++;
    mRegMap[0x0288]     = index;
    mRegMap[0x0288 + 1] = index;
    mRegMap[0x0288 + 2] = index;
    mRegMap[0x0288 + 3] = index++;
    mRegMap[0x028C]     = index;
    mRegMap[0x028C + 1] = index;
    mRegMap[0x028C + 2] = index;
    mRegMap[0x028C + 3] = index++;
    mRegMap[0x0290]     = index;
    mRegMap[0x0290 + 1] = index;
    mRegMap[0x0290 + 2] = index;
    mRegMap[0x0290 + 3] = index++;
    mRegMap[0x0294]     = index;
    mRegMap[0x0294 + 1] = index;
    mRegMap[0x0294 + 2] = index;
    mRegMap[0x0294 + 3] = index++;
    mRegMap[0x0298]     = index;
    mRegMap[0x0298 + 1] = index;
    mRegMap[0x0298 + 2] = index;
    mRegMap[0x0298 + 3] = index++;
    mRegMap[0x029C]     = index;
    mRegMap[0x029C + 1] = index;
    mRegMap[0x029C + 2] = index;
    mRegMap[0x029C + 3] = index++;
    mRegMap[0x02A8]     = index;
    mRegMap[0x02A8 + 1] = index;
    mRegMap[0x02A8 + 2] = index;
    mRegMap[0x02A8 + 3] = index++;
    mRegMap[0x02AC]     = index;
    mRegMap[0x02AC + 1] = index;
    mRegMap[0x02AC + 2] = index;
    mRegMap[0x02AC + 3] = index++;
    mRegMap[0x02B0]     = index;
    mRegMap[0x02B0 + 1] = index++;
    mRegMap[0x02B4]     = index;
    mRegMap[0x02B4 + 1] = index++;
    mRegMap[0x02B8]     = index;
    mRegMap[0x02B8 + 1] = index++;
    mRegMap[0x02BC]     = index;
    mRegMap[0x02BC + 1] = index++;
    mRegMap[0x02C0]     = index;
    mRegMap[0x02C0 + 1] = index;
    mRegMap[0x02C0 + 2] = index;
    mRegMap[0x02C0 + 3] = index++;
    mRegMap[0x02C4]     = index++;
    mRegMap[0x02C8]     = index;
    mRegMap[0x02C8 + 1] = index;
    mRegMap[0x02C8 + 2] = index;
    mRegMap[0x02C8 + 3] = index++;
    mRegMap[0x02CC]     = index;
    mRegMap[0x02CC + 1] = index;
    mRegMap[0x02CC + 2] = index;
    mRegMap[0x02CC + 3] = index++;
    mRegMap[0x02D4]     = index;
    mRegMap[0x02D4 + 1] = index;
    mRegMap[0x02D4 + 2] = index;
    mRegMap[0x02D4 + 3] = index++;
    mRegMap[0x02D8]     = index;
    mRegMap[0x02D8 + 1] = index;
    mRegMap[0x02D8 + 2] = index;
    mRegMap[0x02D8 + 3] = index++;
    mRegMap[0x02DC]     = index;
    mRegMap[0x02DC + 1] = index;
    mRegMap[0x02DC + 2] = index;
    mRegMap[0x02DC + 3] = index++;
    mRegMap[0x0300]     = index;
    mRegMap[0x0300 + 1] = index;
    mRegMap[0x0300 + 2] = index;
    mRegMap[0x0300 + 3] = index++;
    mRegMap[0x0304]     = index;
    mRegMap[0x0304 + 1] = index;
    mRegMap[0x0304 + 2] = index;
    mRegMap[0x0304 + 3] = index++;
    mRegMap[0x0308]     = index;
    mRegMap[0x0308 + 1] = index;
    mRegMap[0x0308 + 2] = index;
    mRegMap[0x0308 + 3] = index++;
    for(uint i = 0; i < emNUM_DFEjPHUPDCn;    i++) {
        mRegMap[(0x0310)     + i*4 ] = index++;
    }
    mRegMap[0x0320]     = index;
    mRegMap[0x0320 + 1] = index;
    mRegMap[0x0320 + 2] = index;
    mRegMap[0x0320 + 3] = index++;
    mRegMap[0x0324]     = index;
    mRegMap[0x0324 + 1] = index;
    mRegMap[0x0324 + 2] = index;
    mRegMap[0x0324 + 3] = index++;
    mRegMap[0x0328]     = index;
    mRegMap[0x0328 + 1] = index;
    mRegMap[0x0328 + 2] = index;
    mRegMap[0x0328 + 3] = index++;
    mRegMap[0x032C]     = index;
    mRegMap[0x032C + 1] = index;
    mRegMap[0x032C + 2] = index;
    mRegMap[0x032C + 3] = index++;
    mRegMap[0x0330]     = index;
    mRegMap[0x0330 + 1] = index;
    mRegMap[0x0330 + 2] = index;
    mRegMap[0x0330 + 3] = index++;
    mRegMap[0x0334]     = index;
    mRegMap[0x0334 + 1] = index;
    mRegMap[0x0334 + 2] = index;
    mRegMap[0x0334 + 3] = index++;
    mRegMap[0x0338]     = index;
    mRegMap[0x0338 + 1] = index;
    mRegMap[0x0338 + 2] = index;
    mRegMap[0x0338 + 3] = index++;
    mRegMap[0x033C]     = index;
    mRegMap[0x033C + 1] = index;
    mRegMap[0x033C + 2] = index;
    mRegMap[0x033C + 3] = index++;
    mRegMap[0x0340]     = index;
    mRegMap[0x0340 + 1] = index;
    mRegMap[0x0340 + 2] = index;
    mRegMap[0x0340 + 3] = index++;
    mRegMap[0x0344]     = index;
    mRegMap[0x0344 + 1] = index;
    mRegMap[0x0344 + 2] = index;
    mRegMap[0x0344 + 3] = index++;
    mRegMap[0x0348]     = index;
    mRegMap[0x0348 + 1] = index;
    mRegMap[0x0348 + 2] = index;
    mRegMap[0x0348 + 3] = index++;
    mRegMap[0x034C]     = index;
    mRegMap[0x034C + 1] = index;
    mRegMap[0x034C + 2] = index;
    mRegMap[0x034C + 3] = index++;
    mRegMap[0x0360]     = index;
    mRegMap[0x0360 + 1] = index;
    mRegMap[0x0360 + 2] = index;
    mRegMap[0x0360 + 3] = index++;
    mRegMap[0x0364]     = index;
    mRegMap[0x0364 + 1] = index;
    mRegMap[0x0364 + 2] = index;
    mRegMap[0x0364 + 3] = index++;
    mRegMap[0x0368]     = index;
    mRegMap[0x0368 + 1] = index;
    mRegMap[0x0368 + 2] = index;
    mRegMap[0x0368 + 3] = index++;
    mRegMap[0x036C]     = index;
    mRegMap[0x036C + 1] = index;
    mRegMap[0x036C + 2] = index;
    mRegMap[0x036C + 3] = index++;
    mRegMap[0x0370]     = index;
    mRegMap[0x0370 + 1] = index;
    mRegMap[0x0370 + 2] = index;
    mRegMap[0x0370 + 3] = index++;
    mRegMap[0x0374]     = index;
    mRegMap[0x0374 + 1] = index;
    mRegMap[0x0374 + 2] = index;
    mRegMap[0x0374 + 3] = index++;
    for(uint i = 0; i < emNUM_DFEjGAINCHn;    i++) {
        mRegMap[(0x0380)     + i*4 ] = index;
        mRegMap[(0x0380 + 1) + i*4 ] = index;
        mRegMap[(0x0380 + 2) + i*4 ] = index;
        mRegMap[(0x0380 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn;   i++) {
        mRegMap[(0x03C0)     + i*4 ] = index;
        mRegMap[(0x03C0 + 1) + i*4 ] = index;
        mRegMap[(0x03C0 + 2) + i*4 ] = index;
        mRegMap[(0x03C0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCPOFSTn;    i++) {
        mRegMap[(0x0440)     + i*4 ] = index;
        mRegMap[(0x0440 + 1) + i*4 ] = index;
        mRegMap[(0x0440 + 2) + i*4 ] = index;
        mRegMap[(0x0440 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0700]     = index;
    mRegMap[0x0700 + 1] = index;
    mRegMap[0x0700 + 2] = index;
    mRegMap[0x0700 + 3] = index++;
    mRegMap[0x0704]     = index;
    mRegMap[0x0704 + 1] = index;
    mRegMap[0x0704 + 2] = index;
    mRegMap[0x0704 + 3] = index++;
    mRegMap[0x0708]     = index;
    mRegMap[0x0708 + 1] = index;
    mRegMap[0x0708 + 2] = index;
    mRegMap[0x0708 + 3] = index++;
    mRegMap[0x0780]     = index;
    mRegMap[0x0780 + 1] = index;
    mRegMap[0x0780 + 2] = index;
    mRegMap[0x0780 + 3] = index++;
    mRegMap[0x0784]     = index;
    mRegMap[0x0784 + 1] = index;
    mRegMap[0x0784 + 2] = index;
    mRegMap[0x0784 + 3] = index++;
    mRegMap[0x07E0]     = index;
    mRegMap[0x07E0 + 1] = index;
    mRegMap[0x07E0 + 2] = index;
    mRegMap[0x07E0 + 3] = index++;
    mRegMap[0x07E4]     = index;
    mRegMap[0x07E4 + 1] = index;
    mRegMap[0x07E4 + 2] = index;
    mRegMap[0x07E4 + 3] = index++;
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn;  i++) {
        mRegMap[(0x0840)     + i*4 ] = index;
        mRegMap[(0x0840 + 1) + i*4 ] = index;
        mRegMap[(0x0840 + 2) + i*4 ] = index;
        mRegMap[(0x0840 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn;   i++) {
        mRegMap[(0x0860)     + i*4 ] = index;
        mRegMap[(0x0860 + 1) + i*4 ] = index;
        mRegMap[(0x0860 + 2) + i*4 ] = index;
        mRegMap[(0x0860 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn;   i++) {
        mRegMap[(0x0880)     + i*4 ] = index;
        mRegMap[(0x0880 + 1) + i*4 ] = index;
        mRegMap[(0x0880 + 2) + i*4 ] = index;
        mRegMap[(0x0880 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) {
        mRegMap[(0x08A0)     + i*4 ] = index;
        mRegMap[(0x08A0 + 1) + i*4 ] = index;
        mRegMap[(0x08A0 + 2) + i*4 ] = index;
        mRegMap[(0x08A0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn;  i++) {
        mRegMap[(0x08C0)     + i*4 ] = index;
        mRegMap[(0x08C0 + 1) + i*4 ] = index;
        mRegMap[(0x08C0 + 2) + i*4 ] = index;
        mRegMap[(0x08C0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn;  i++) {
        mRegMap[(0x08E0)     + i*4 ] = index;
        mRegMap[(0x08E0 + 1) + i*4 ] = index;
        mRegMap[(0x08E0 + 2) + i*4 ] = index;
        mRegMap[(0x08E0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn;  i++) {
        mRegMap[(0x0900)     + i*4 ] = index;
        mRegMap[(0x0900 + 1) + i*4 ] = index;
        mRegMap[(0x0900 + 2) + i*4 ] = index;
        mRegMap[(0x0900 + 3) + i*4 ] = index++;
    }
    mRegMap[0x0920]     = index;
    mRegMap[0x0920 + 1] = index;
    mRegMap[0x0920 + 2] = index;
    mRegMap[0x0920 + 3] = index++;
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn;  i++) {
        mRegMap[(0x0940)     + i*4 ] = index;
        mRegMap[(0x0940 + 1) + i*4 ] = index;
        mRegMap[(0x0940 + 2) + i*4 ] = index;
        mRegMap[(0x0940 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn;   i++) {
        mRegMap[(0x0960)     + i*4 ] = index;
        mRegMap[(0x0960 + 1) + i*4 ] = index;
        mRegMap[(0x0960 + 2) + i*4 ] = index;
        mRegMap[(0x0960 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn;   i++) {
        mRegMap[(0x0980)     + i*4 ] = index;
        mRegMap[(0x0980 + 1) + i*4 ] = index;
        mRegMap[(0x0980 + 2) + i*4 ] = index;
        mRegMap[(0x0980 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) {
        mRegMap[(0x09A0)     + i*4 ] = index;
        mRegMap[(0x09A0 + 1) + i*4 ] = index;
        mRegMap[(0x09A0 + 2) + i*4 ] = index;
        mRegMap[(0x09A0 + 3) + i*4 ] = index++;
    }
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn;  i++) {
        mRegMap[(0x09C0)     + i*4 ] = index;
        mRegMap[(0x09C0 + 1) + i*4 ] = index;
        mRegMap[(0x09C0 + 2) + i*4 ] = index;
        mRegMap[(0x09C0 + 3) + i*4 ] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn   ; i++) {
        cw_instantiate_reg(CW_DFEjCLRSTCHn_[i], DFEjCLRSTCHn   [i]->name(), DFEjCLRSTCHn   [i]->addr());
        CW_DFEjCLRSTCHn   [i] = new scml2::bitfield<uint>(DFEjCLRSTCHn->name()   , CW_DFEjCLRSTCHn_   [i],  0, 16);
    }
    for(uint i = 0; i < emNUM_DFEjERMCHn     ; i++) {
        cw_instantiate_reg(CW_DFEjERMCHn_[i], DFEjERMCHn     [i]->name(), DFEjERMCHn     [i]->addr());
        CW_DFEjERMCHn     [i] = new scml2::bitfield<uint>(DFEjERMCHn->name()     , CW_DFEjERMCHn_     [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_DFEjTRHCHn     ; i++) {
        cw_instantiate_reg(CW_DFEjTRHCHn_[i], DFEjTRHCHn     [i]->name(), DFEjTRHCHn     [i]->addr());
        CW_DFEjTRHCHn     [i] = new scml2::bitfield<uint>(DFEjTRHCHn->name()     , CW_DFEjTRHCHn_     [i],  0,  8);
    }
    cw_instantiate_reg(CW_DFEjACA_, "DFEjACA_", 0x02B0);
    CW_DFEjACA         = new scml2::bitfield<uint>(DFEjACA->name()        , CW_DFEjACA_                      ,  0, 16);
    cw_instantiate_reg(CW_DFEjACB_, "DFEjACB_", 0x02B4);
    CW_DFEjACB         = new scml2::bitfield<uint>(DFEjACB->name()        , CW_DFEjACB_                      ,  0, 16);
    cw_instantiate_reg(CW_DFEjACC_, "DFEjACC_", 0x02B8);
    CW_DFEjACC         = new scml2::bitfield<uint>(DFEjACC->name()        , CW_DFEjACC_                      ,  0, 16);
    cw_instantiate_reg(CW_DFEjACD_, "DFEjACD_", 0x02BC);
    CW_DFEjACD         = new scml2::bitfield<uint>(DFEjACD->name()        , CW_DFEjACD_                      ,  0, 16);
    cw_instantiate_reg(CW_DFEjTRG_, "DFEjTRG_", 0x02C4);
    CW_DFEjTRG         = new scml2::bitfield<uint>(DFEjTRG->name()        , CW_DFEjTRG_                      ,  0,  8);
    for(uint i = 0; i < emNUM_DFEjPHUPDCn    ; i++) {
        cw_instantiate_reg(CW_DFEjPHUPDCn_[i], DFEjPHUPDCn    [i]->name(), DFEjPHUPDCn    [i]->addr());
        CW_DFEjPHUPDCn    [i] = new scml2::bitfield<uint>(DFEjPHUPDCn->name()    , CW_DFEjPHUPDCn_    [i],  0,  8);
    }
    for(uint i = 0; i < emNUM_DFEjCTLACHn    ; i++) cw_instantiate_reg(CW_DFEjCTLACHn      [i], DFEjCTLACHn    [i]->name(), DFEjCTLACHn    [i]->addr());
    for(uint i = 0; i < emNUM_DFEjCTLBCHn    ; i++) cw_instantiate_reg(CW_DFEjCTLBCHn      [i], DFEjCTLBCHn    [i]->name(), DFEjCTLBCHn    [i]->addr());
    for(uint i = 0; i < emNUM_DFEjDOCHn      ; i++) cw_instantiate_reg(CW_DFEjDOCHn        [i], DFEjDOCHn      [i]->name(), DFEjDOCHn      [i]->addr());
    for(uint i = 0; i < emNUM_DFEjPHCHn      ; i++) cw_instantiate_reg(CW_DFEjPHCHn        [i], DFEjPHCHn      [i]->name(), DFEjPHCHn      [i]->addr());
    for(uint i = 0; i < emNUM_DFEjPHINDCHn   ; i++) cw_instantiate_reg(CW_DFEjPHINDCHn     [i], DFEjPHINDCHn   [i]->name(), DFEjPHINDCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSTCHn      ; i++) cw_instantiate_reg(CW_DFEjSTCHn        [i], DFEjSTCHn      [i]->name(), DFEjSTCHn      [i]->addr());
    for(uint i = 0; i < emNUM_DFEjTRGCHn     ; i++) cw_instantiate_reg(CW_DFEjTRGCHn       [i], DFEjTRGCHn     [i]->name(), DFEjTRGCHn     [i]->addr());
    cw_instantiate_reg(CW_DFEjCPA          , DFEjCPA->name()        , DFEjCPA->addr()        );
    cw_instantiate_reg(CW_DFEjCPB          , DFEjCPB->name()        , DFEjCPB->addr()        );
    cw_instantiate_reg(CW_DFEjCPC          , DFEjCPC->name()        , DFEjCPC->addr()        );
    cw_instantiate_reg(CW_DFEjCPD          , DFEjCPD->name()        , DFEjCPD->addr()        );
    cw_instantiate_reg(CW_DFEjPHIA         , DFEjPHIA->name()       , DFEjPHIA->addr()       );
    cw_instantiate_reg(CW_DFEjPHIB         , DFEjPHIB->name()       , DFEjPHIB->addr()       );
    cw_instantiate_reg(CW_DFEjPHIC         , DFEjPHIC->name()       , DFEjPHIC->addr()       );
    cw_instantiate_reg(CW_DFEjPHID         , DFEjPHID->name()       , DFEjPHID->addr()       );
    cw_instantiate_reg(CW_DFEjPMITRG0      , DFEjPMITRG0->name()    , DFEjPMITRG0->addr()    );
    cw_instantiate_reg(CW_DFEjPMITRG1      , DFEjPMITRG1->name()    , DFEjPMITRG1->addr()    );
    cw_instantiate_reg(CW_DFEjDI           , DFEjDI->name()         , DFEjDI->addr()         );
    cw_instantiate_reg(CW_DFEjEST          , DFEjEST->name()        , DFEjEST->addr()        );
    cw_instantiate_reg(CW_DFEjST           , DFEjST->name()         , DFEjST->addr()         );
    cw_instantiate_reg(CW_DFEjPITRG1       , DFEjPITRG1->name()     , DFEjPITRG1->addr()     );
    cw_instantiate_reg(CW_DFEjMITRG1       , DFEjMITRG1->name()     , DFEjMITRG1->addr()     );
    cw_instantiate_reg(CW_DFEjFITRG1       , DFEjFITRG1->name()     , DFEjFITRG1->addr()     );
    cw_instantiate_reg(CW_DFEjPITRG        , DFEjPITRG->name()      , DFEjPITRG->addr()      );
    cw_instantiate_reg(CW_DFEjMITRG        , DFEjMITRG->name()      , DFEjMITRG->addr()      );
    cw_instantiate_reg(CW_DFEjFITRG        , DFEjFITRG->name()      , DFEjFITRG->addr()      );
    cw_instantiate_reg(CW_DFEjHOLCH0       , DFEjHOLCH0->name()     , DFEjHOLCH0->addr()     );
    cw_instantiate_reg(CW_DFEjHOHCH0       , DFEjHOHCH0->name()     , DFEjHOHCH0->addr()     );
    cw_instantiate_reg(CW_DFEjHOLCH2       , DFEjHOLCH2->name()     , DFEjHOLCH2->addr()     );
    cw_instantiate_reg(CW_DFEjHOHCH2       , DFEjHOHCH2->name()     , DFEjHOHCH2->addr()     );
    cw_instantiate_reg(CW_DFEjHOLCH4       , DFEjHOLCH4->name()     , DFEjHOLCH4->addr()     );
    cw_instantiate_reg(CW_DFEjHOHCH4       , DFEjHOHCH4->name()     , DFEjHOHCH4->addr()     );
    cw_instantiate_reg(CW_DFEjHOLCH6       , DFEjHOLCH6->name()     , DFEjHOLCH6->addr()     );
    cw_instantiate_reg(CW_DFEjHOHCH6       , DFEjHOHCH6->name()     , DFEjHOHCH6->addr()     );
    cw_instantiate_reg(CW_DFEjHOLCH8       , DFEjHOLCH8->name()     , DFEjHOLCH8->addr()     );
    cw_instantiate_reg(CW_DFEjHOHCH8       , DFEjHOHCH8->name()     , DFEjHOHCH8->addr()     );
    cw_instantiate_reg(CW_DFEjHOLCH10      , DFEjHOLCH10->name()    , DFEjHOLCH10->addr()    );
    cw_instantiate_reg(CW_DFEjHOHCH10      , DFEjHOHCH10->name()    , DFEjHOHCH10->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH0      , DFEjHOLMCH0->name()    , DFEjHOLMCH0->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH2      , DFEjHOLMCH2->name()    , DFEjHOLMCH2->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH4      , DFEjHOLMCH4->name()    , DFEjHOLMCH4->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH6      , DFEjHOLMCH6->name()    , DFEjHOLMCH6->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH8      , DFEjHOLMCH8->name()    , DFEjHOLMCH8->addr()    );
    cw_instantiate_reg(CW_DFEjHOLMCH10     , DFEjHOLMCH10->name()   , DFEjHOLMCH10->addr()   );
    for(uint i = 0; i < emNUM_DFEjGAINCHn    ; i++) cw_instantiate_reg(CW_DFEjGAINCHn      [i], DFEjGAINCHn    [i]->name(), DFEjGAINCHn    [i]->addr());
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn   ; i++) cw_instantiate_reg(CW_DFEjTMTRGCHn     [i], DFEjTMTRGCHn   [i]->name(), DFEjTMTRGCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjCPOFSTn    ; i++) cw_instantiate_reg(CW_DFEjCPOFSTn      [i], DFEjCPOFSTn    [i]->name(), DFEjCPOFSTn    [i]->addr());
    cw_instantiate_reg(CW_DFEjPH23CCTL0    , DFEjPH23CCTL0->name()  , DFEjPH23CCTL0->addr()  );
    cw_instantiate_reg(CW_DFEjPH2CTL0      , DFEjPH2CTL0->name()    , DFEjPH2CTL0->addr()    );
    cw_instantiate_reg(CW_DFEjPH3CTL0      , DFEjPH3CTL0->name()    , DFEjPH3CTL0->addr()    );
    cw_instantiate_reg(CW_DFEjPH20         , DFEjPH20->name()       , DFEjPH20->addr()       );
    cw_instantiate_reg(CW_DFEjPH30         , DFEjPH30->name()       , DFEjPH30->addr()       );
    cw_instantiate_reg(CW_DFEjPH2IND0      , DFEjPH2IND0->name()    , DFEjPH2IND0->addr()    );
    cw_instantiate_reg(CW_DFEjPH3IND0      , DFEjPH3IND0->name()    , DFEjPH3IND0->addr()    );
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn  ; i++) cw_instantiate_reg(CW_DFEjSUBCTLCHn    [i], DFEjSUBCTLCHn  [i]->name(), DFEjSUBCTLCHn  [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn   ; i++) cw_instantiate_reg(CW_DFEjSUBDOCHn     [i], DFEjSUBDOCHn   [i]->name(), DFEjSUBDOCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn   ; i++) cw_instantiate_reg(CW_DFEjSUBSTCHn     [i], DFEjSUBSTCHn   [i]->name(), DFEjSUBSTCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) cw_instantiate_reg(CW_DFEjSUBCLRSTCHn  [i], DFEjSUBCLRSTCHn[i]->name(), DFEjSUBCLRSTCHn[i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn  ; i++) cw_instantiate_reg(CW_DFEjSUBERMCHn    [i], DFEjSUBERMCHn  [i]->name(), DFEjSUBERMCHn  [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn  ; i++) cw_instantiate_reg(CW_DFEjSUBTRGCHn    [i], DFEjSUBTRGCHn  [i]->name(), DFEjSUBTRGCHn  [i]->addr());
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn  ; i++) cw_instantiate_reg(CW_DFEjSUBTRHCHn    [i], DFEjSUBTRHCHn  [i]->name(), DFEjSUBTRHCHn  [i]->addr());
    cw_instantiate_reg(CW_DFEjSUBTRG0      , DFEjSUBTRG0->name()    , DFEjSUBTRG0->addr()    );
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn  ; i++) cw_instantiate_reg(CW_DFEjCAPCTLCHn    [i], DFEjCAPCTLCHn  [i]->name(), DFEjCAPCTLCHn  [i]->addr());
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn   ; i++) cw_instantiate_reg(CW_DFEjCAPDOCHn     [i], DFEjCAPDOCHn   [i]->name(), DFEjCAPDOCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn   ; i++) cw_instantiate_reg(CW_DFEjCAPSTCHn     [i], DFEjCAPSTCHn   [i]->name(), DFEjCAPSTCHn   [i]->addr());
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) cw_instantiate_reg(CW_DFEjCAPCLRSTCHn  [i], DFEjCAPCLRSTCHn[i]->name(), DFEjCAPCLRSTCHn[i]->addr());
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn  ; i++) cw_instantiate_reg(CW_DFEjCAPERMCHn    [i], DFEjCAPERMCHn  [i]->name(), DFEjCAPERMCHn  [i]->addr());
    #endif
    for(uint i = 0; i < emNUM_DFEjCTLACHn    ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCTLACHn      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCTLBCHn    ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCTLBCHn      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjDOCHn      ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjDOCHn        [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjPHCHn      ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjPHCHn        [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjPHINDCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjPHINDCHn     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSTCHn      ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSTCHn        [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCLRSTCHn     [i], mCurReg, i,  2,    "8|16", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjERMCHn     ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjERMCHn       [i], mCurReg, i,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjTRGCHn     ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjTRGCHn       [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjTRHCHn     ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjTRHCHn       [i], mCurReg, i,  1,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjCPA          , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjCPB          , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjCPC          , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjCPD          , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPHIA         , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPHIB         , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPHIC         , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPHID         , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPMITRG0      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPMITRG1      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjACA          , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjACB          , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjACC          , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjACD          , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjDI           , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjTRG          , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjEST          , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjST           , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPITRG1       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjMITRG1       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjFITRG1       , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPITRG        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjMITRG        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjFITRG        , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjPHUPDCn    ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjPHUPDCn      [i], mCurReg, i,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH2       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH2       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH4       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH4       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH6       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH6       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH8       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH8       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLCH10      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOHCH10      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH0      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH2      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH4      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH6      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH8      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjHOLMCH10     , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjGAINCHn    ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjGAINCHn      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjTMTRGCHn     [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCPOFSTn    ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCPOFSTn      [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH23CCTL0    , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH2CTL0      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH3CTL0      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH20         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH30         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH2IND0      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjPH3IND0      , mCurReg, 0,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBCTLCHn    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBDOCHn     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBSTCHn     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBCLRSTCHn  [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBERMCHn    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBTRGCHn    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjSUBTRHCHn    [i], mCurReg, i,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(DFEjSUBTRG0      , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCAPCTLCHn    [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCAPDOCHn     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn   ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCAPSTCHn     [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCAPCLRSTCHn  [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn  ; i++) mCurReg = mRegArray[index++] = new SRegList(DFEjCAPERMCHn    [i], mCurReg, i,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*DFEjCPA          ) (31,  0, "DFEjCPA" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjCPB          ) (31,  0, "DFEjCPB" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjCPC          ) (31,  0, "DFEjCPC" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjCPD          ) (31,  0, "DFEjCPD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPHIA         ) (31,  0, "DFEjPHIA", 0x80000000, "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPHIB         ) (31,  0, "DFEjPHIB", 0x80000000, "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPHIC         ) (31,  0, "DFEjPHIC", 0x80000000, "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPHID         ) (31,  0, "DFEjPHID", 0x80000000, "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG0      ) (28, 24, "PMITMTRG3", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG0      ) (20, 16, "PMITMTRG2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG0      ) (12,  8, "PMITMTRG1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG0      ) ( 4,  0, "PMITMTRG0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG1      ) (12,  8, "PMITMTRG5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPMITRG1      ) ( 4,  0, "PMITMTRG4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjACA          ) ( 8,  0, "AC"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjACB          ) ( 8,  0, "AC"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjACC          ) ( 8,  0, "AC"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjACD          ) ( 8,  0, "AC"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjDI           ) (20, 16, "TAG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjDI           ) (15,  0, "DI"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjTRG          ) ( 0,  0, "TRGA"    , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*DFEjEST          ) (18, 18, "CP2S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjEST          ) (17, 17, "CP1S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjEST          ) (16, 16, "CP0S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjEST          ) ( 2,  2, "SB2S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjEST          ) ( 1,  1, "SB1S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjEST          ) ( 0,  0, "SB0S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  if (mNumChan == 12) {
		    (*DFEjST           ) (23, 22, "CH11S"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) (21, 20, "CH10S"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  }
	  if (mNumChan >= 10) {
		    (*DFEjST           ) (19, 18, "CH9S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) (17, 16, "CH8S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
	  if (mNumChan >= 8) {
		    (*DFEjST           ) (15, 14, "CH7S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) (13, 12, "CH6S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  }
	  if (mNumChan >= 6) {
		    (*DFEjST           ) (11, 10, "CH5S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) ( 9,  8, "CH4S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  }
	  if (mNumChan >= 4) {
		    (*DFEjST           ) ( 7,  6, "CH3S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) ( 5,  4, "CH2S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  }
    if (mNumChan >= 2) {
		    (*DFEjST           ) ( 3,  2, "CH1S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjST           ) ( 1,  0, "CH0S"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
	  }
    (*DFEjPITRG1       ) (12,  8, "PITMTRG5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPITRG1       ) ( 4,  0, "PITMTRG4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG1       ) (12,  8, "MITMTRG5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG1       ) ( 4,  0, "MITMTRG4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG1       ) (12,  8, "FITMTRG5", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG1       ) ( 4,  0, "FITMTRG4", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPITRG        ) (28, 24, "PITMTRG3", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPITRG        ) (20, 16, "PITMTRG2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPITRG        ) (12,  8, "PITMTRG1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPITRG        ) ( 4,  0, "PITMTRG0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG        ) (28, 24, "MITMTRG3", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG        ) (20, 16, "MITMTRG2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG        ) (12,  8, "MITMTRG1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjMITRG        ) ( 4,  0, "MITMTRG0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG        ) (28, 24, "FITMTRG3", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG        ) (20, 16, "FITMTRG2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG        ) (12,  8, "FITMTRG1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjFITRG        ) ( 4,  0, "FITMTRG0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjHOLCH0       ) (31,  0, "DFEjHOLCH0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH0       ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLCH2       ) (31,  0, "DFEjHOLCH2", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH2       ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLCH4       ) (31,  0, "DFEjHOLCH4", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH4       ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLCH6       ) (31,  0, "DFEjHOLCH6", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH6       ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLCH8       ) (31,  0, "DFEjHOLCH8", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH8       ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLCH10      ) (31,  0, "DFEjHOLCH10", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOHCH10      ) ( 5,  0, "GURD"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH0      ) (31,  0, "DFEjHOLMCH0", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH2      ) (31,  0, "DFEjHOLMCH2", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH4      ) (31,  0, "DFEjHOLMCH4", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH6      ) (31,  0, "DFEjHOLMCH6", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH8      ) (31,  0, "DFEjHOLMCH8", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjHOLMCH10     ) (31,  0, "DFEjHOLMCH10", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH23CCTL0    ) ( 7,  4, "CHS"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH23CCTL0    ) ( 3,  3, "PFMT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH23CCTL0    ) ( 0,  0, "PEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH2CTL0      ) ( 9,  8, "OFSL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH2CTL0      ) ( 6,  4, "PH2SLB2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH2CTL0      ) ( 3,  3, "PHPS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH2CTL0      ) ( 2,  0, "CN2SLB2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH3CTL0      ) ( 9,  8, "OFSL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH3CTL0      ) ( 6,  4, "PH3SLB2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH3CTL0      ) ( 3,  3, "PHPS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH3CTL0      ) ( 2,  0, "CN3SLB2" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjPH20         ) (31,  0, "DFEjPH20", 0x80000000, "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH30         ) (31,  0, "DFEjPH30", 0x80000000, "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH2IND0      ) (15, 15, "PH2IOW"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH2IND0      ) (14, 14, "PH2IOF"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH2IND0      ) (13,  0, "PH2IND"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH3IND0      ) (15, 15, "PH3IOW"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH3IND0      ) (14, 14, "PH3IOF"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjPH3IND0      ) (13,  0, "PH3IND"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*DFEjSUBTRG0      ) (20, 16, "SUBTMTRG2", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjSUBTRG0      ) (12,  8, "SUBTMTRG1", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*DFEjSUBTRG0      ) ( 4,  0, "SUBTMTRG0", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_DFEjCTLACHn; i++) {
        (*DFEjCTLACHn      [i]) (30, 26, "CATAG"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) (25, 24, "CAEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) (20, 16, "TAG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) (15, 12, "CMD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 8,  8, "FMT"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 7,  7, "IEP"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 6,  6, "IEE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 5,  5, "IEC"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 4,  4, "IEO"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 3,  3, "CNSL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 2,  2, "CNSLE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 1,  1, "AIME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLACHn      [i]) ( 0,  0, "EN"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCTLBCHn; i++) {
        (*DFEjCTLBCHn      [i]) (26, 25, "OFSL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (24, 24, "DISB"    , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (23, 23, "PHPS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (22, 22, "CPCS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (19, 17, "PHSLB2"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (16, 16, "DISA"    , 0x1       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (15, 15, "PRCSC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (14, 12, "SELB2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) (11, 10, "SELB1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 9,  8, "PRCSB"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 7,  7, "HOFS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 6,  6, "PICS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 5,  4, "SELA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 3,  3, "PFMT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 2,  2, "ABS"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCTLBCHn      [i]) ( 1,  0, "PRCSA"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjDOCHn; i++) {
        (*DFEjDOCHn        [i]) (31,  0, "DFEjDOCHn", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjPHCHn; i++) {
        (*DFEjPHCHn        [i]) (31,  0, "DFEjPHCHn", 0x80000000, "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjPHINDCHn; i++) {
        (*DFEjPHINDCHn     [i]) (15, 15, "PHIOW"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjPHINDCHn     [i]) (14, 14, "PHIOF"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjPHINDCHn     [i]) (13,  0, "PHIND"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSTCHn; i++) {
        (*DFEjSTCHn        [i]) (18, 16, "PH23ST"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) (12, 12, "VALID"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) (10, 10, "PHE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 9,  9, "CND"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 8,  8, "DOEN"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 5,  5, "CER"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 4,  4, "AER"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 3,  3, "MER"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 2,  2, "GER"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 1,  1, "DOOW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSTCHn        [i]) ( 0,  0, "DIOW"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn; i++) {
        (*DFEjCLRSTCHn     [i]) (15, 15, "CLRPHIOW", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) (10, 10, "CLRPHE"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 9,  9, "CLRCND"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 8,  8, "CLRDOEN" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 5,  5, "CLRCER"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 4,  4, "CLRAER"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 3,  3, "CLRMER"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 2,  2, "CLRGER"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 1,  1, "CLRDOOW" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCLRSTCHn     [i]) ( 0,  0, "CLRDIOW" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjERMCHn; i++) {
        (*DFEjERMCHn       [i]) ( 5,  5, "MSKCER"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjERMCHn       [i]) ( 4,  4, "MSKAER"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjERMCHn       [i]) ( 3,  3, "MSKMER"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjERMCHn       [i]) ( 2,  2, "MSKGER"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjERMCHn       [i]) ( 1,  1, "MSKDOOW" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjERMCHn       [i]) ( 0,  0, "MSKDIOW" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjTRGCHn; i++) {
        (*DFEjTRGCHn       [i]) (23, 22, "PMFE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) (21, 20, "PME"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) (19, 18, "PFE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) (15, 14, "AFE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) (11, 10, "PE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) ( 9,  8, "PT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) ( 7,  6, "AE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) ( 5,  4, "AT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) ( 3,  2, "FE"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTRGCHn       [i]) ( 1,  0, "FT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjTRHCHn; i++) {
        (*DFEjTRHCHn       [i]) ( 6,  6, "PMITS"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 5,  5, "PMETS"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 4,  4, "PITS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 3,  3, "PETS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 2,  2, "MITS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 1,  1, "METS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjTRHCHn       [i]) ( 0,  0, "FITS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjPHUPDCn; i++) {
        (*DFEjPHUPDCn      [i]) ( 7,  4, "PHUPDCH" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjPHUPDCn      [i]) ( 2,  2, "PH23SL"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjPHUPDCn      [i]) ( 1,  1, "PH23E"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjPHUPDCn      [i]) ( 0,  0, "OEPHUPD" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjGAINCHn; i++) {
        (*DFEjGAINCHn      [i]) (31, 16, "GAIN3"   , 0x4000    , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjGAINCHn      [i]) (15,  0, "GAIN2"   , 0x4000    , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn; i++) {
        (*DFEjTMTRGCHn     [i]) (14, 12, "PMT"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTMTRGCHn     [i]) (10,  8, "PT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTMTRGCHn     [i]) ( 6,  4, "AT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjTMTRGCHn     [i]) ( 2,  0, "FT"      , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCPOFSTn; i++) {
        (*DFEjCPOFSTn      [i]) (31,  0, "DFEjCPOFSTn", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn; i++) {
        (*DFEjSUBCTLCHn    [i]) (30, 26, "CATAG"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) (25, 24, "CAEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) (11,  8, "MINCH"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) ( 7,  4, "SUBCH"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) ( 3,  3, "SFMT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) ( 2,  2, "SIEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) ( 1,  1, "SIEO"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBCTLCHn    [i]) ( 0,  0, "SEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn; i++) {
        (*DFEjSUBDOCHn     [i]) (31,  0, "DFEjSUBDOCHn", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn; i++) {
        (*DFEjSUBSTCHn     [i]) ( 8,  8, "SDOEN"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBSTCHn     [i]) ( 7,  7, "MINF"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBSTCHn     [i]) ( 6,  6, "SUBF"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBSTCHn     [i]) ( 5,  5, "SCER"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBSTCHn     [i]) ( 2,  2, "SGER"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBSTCHn     [i]) ( 1,  1, "SDOOW"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) {
        (*DFEjSUBCLRSTCHn  [i]) ( 8,  8, "CLRSDOEN", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjSUBCLRSTCHn  [i]) ( 5,  5, "CLRSCER" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjSUBCLRSTCHn  [i]) ( 2,  2, "CLRSGER" , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjSUBCLRSTCHn  [i]) ( 1,  1, "CLRSDOOW", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn; i++) {
        (*DFEjSUBERMCHn    [i]) ( 5,  5, "MSKSCER" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBERMCHn    [i]) ( 2,  2, "MSKSGER" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBERMCHn    [i]) ( 1,  1, "MSKSDOOW", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn; i++) {
        (*DFEjSUBTRGCHn    [i]) (15, 14, "SBFE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBTRGCHn    [i]) ( 7,  6, "SBE"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjSUBTRGCHn    [i]) ( 1,  0, "SBT"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn; i++) {
        (*DFEjSUBTRHCHn    [i]) ( 1,  1, "SITS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjSUBTRHCHn    [i]) ( 0,  0, "SETS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn; i++) {
        (*DFEjCAPCTLCHn    [i]) ( 7,  4, "CAPCH"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCAPCTLCHn    [i]) ( 2,  2, "CIEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
        (*DFEjCAPCTLCHn    [i]) ( 0,  0, "CEN"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn; i++) {
        (*DFEjCAPDOCHn     [i]) (31,  0, "DFEjCAPDOCHn", 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn; i++) {
        (*DFEjCAPSTCHn     [i]) ( 8,  8, "CDOEN"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
        (*DFEjCAPSTCHn     [i]) ( 1,  1, "CDOOW"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) {
        (*DFEjCAPCLRSTCHn  [i]) ( 8,  8, "CLRCDOEN", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
        (*DFEjCAPCLRSTCHn  [i]) ( 1,  1, "CLRCDOOW", 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn; i++) {
        (*DFEjCAPERMCHn    [i]) ( 1,  1, "MSKCDOOW", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["DFEjDI"       ]["DI"           ] = &Cdfe_regif::cb_DFEjDI_DI;
    mWrCbAPI["DFEjTRG"      ]["TRGA"         ] = &Cdfe_regif::cb_DFEjTRG_TRGA;
    mWrCbAPI["DFEjPH23CCTL0"]["PEN"          ] = &Cdfe_regif::cb_DFEjPH23CCTL0_PEN;
    mWrCbAPI["DFEjPH2CTL0"  ]["CN2SLB2"      ] = &Cdfe_regif::cb_DFEjPH2CTL0_CN2SLB2;
    mWrCbAPI["DFEjPH3CTL0"  ]["CN3SLB2"      ] = &Cdfe_regif::cb_DFEjPH3CTL0_CN3SLB2;

    mRdCbAPI["DFEjHOLCH0"   ]["DFEjHOLCH0"   ] = &Cdfe_regif::cb_DFEjHOLCH0_DFEjHOLCH0;
    mRdCbAPI["DFEjHOHCH0"   ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH0_GURD;
    mRdCbAPI["DFEjHOLCH2"   ]["DFEjHOLCH2"   ] = &Cdfe_regif::cb_DFEjHOLCH2_DFEjHOLCH2;
    mRdCbAPI["DFEjHOHCH2"   ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH2_GURD;
    mRdCbAPI["DFEjHOLCH4"   ]["DFEjHOLCH4"   ] = &Cdfe_regif::cb_DFEjHOLCH4_DFEjHOLCH4;
    mRdCbAPI["DFEjHOHCH4"   ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH4_GURD;
    mRdCbAPI["DFEjHOLCH6"   ]["DFEjHOLCH6"   ] = &Cdfe_regif::cb_DFEjHOLCH6_DFEjHOLCH6;
    mRdCbAPI["DFEjHOHCH6"   ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH6_GURD;
    mRdCbAPI["DFEjHOLCH8"   ]["DFEjHOLCH8"   ] = &Cdfe_regif::cb_DFEjHOLCH8_DFEjHOLCH8;
    mRdCbAPI["DFEjHOHCH8"   ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH8_GURD;
    mRdCbAPI["DFEjHOLCH10"  ]["DFEjHOLCH10"  ] = &Cdfe_regif::cb_DFEjHOLCH10_DFEjHOLCH10;
    mRdCbAPI["DFEjHOHCH10"  ]["GURD"         ] = &Cdfe_regif::cb_DFEjHOHCH10_GURD;

    for(uint i = 0; i < emNUM_DFEjCTLACHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCTLACHn"<< i;
        mWrCbAPI[str_tmp.str()]["EN"] = &Cdfe_regif::cb_DFEjCTLACHn_EN;
    }
    for(uint i = 0; i < emNUM_DFEjCTLBCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCTLBCHn"<< i;
        mWrCbAPI[str_tmp.str()]["PRCSA"] = &Cdfe_regif::cb_DFEjCTLBCHn_PRCSA;
    }
    for(uint i = 0; i < emNUM_DFEjDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjDOCHn"<< i;
        mRdCbAPI[str_tmp.str()]["DFEjDOCHn"] = &Cdfe_regif::cb_DFEjDOCHn_DFEjDOCHn;
    }
    for(uint i = 0; i < emNUM_DFEjPHINDCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjPHINDCHn"<< i;
        mRdCbAPI[str_tmp.str()]["PHIOF"] = &Cdfe_regif::cb_DFEjPHINDCHn_PHIOF;
    }
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCLRSTCHn"<< i;
        mWrCbAPI[str_tmp.str()]["CLRDIOW"] = &Cdfe_regif::cb_DFEjCLRSTCHn_CLRDIOW;
    }
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBCTLCHn"<< i;
        mWrCbAPI[str_tmp.str()]["SEN"] = &Cdfe_regif::cb_DFEjSUBCTLCHn_SEN;
    }
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBDOCHn"<< i;
        mRdCbAPI[str_tmp.str()]["DFEjSUBDOCHn"] = &Cdfe_regif::cb_DFEjSUBDOCHn_DFEjSUBDOCHn;
    }
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBCLRSTCHn"<< i;
        mWrCbAPI[str_tmp.str()]["CLRSDOOW"] = &Cdfe_regif::cb_DFEjSUBCLRSTCHn_CLRSDOOW;
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjSUBTRGCHn"<< i;
        mWrCbAPI[str_tmp.str()]["SBT"] = &Cdfe_regif::cb_DFEjSUBTRGCHn_SBT;
    }
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPCTLCHn"<< i;
        mWrCbAPI[str_tmp.str()]["CEN"] = &Cdfe_regif::cb_DFEjCAPCTLCHn_CEN;
    }
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPDOCHn"<< i;
        mRdCbAPI[str_tmp.str()]["DFEjCAPDOCHn"] = &Cdfe_regif::cb_DFEjCAPDOCHn_DFEjCAPDOCHn;
    }
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) {
        str_tmp.str("");
        str_tmp<<"DFEjCAPCLRSTCHn"<< i;
        mWrCbAPI[str_tmp.str()]["CLRCDOOW"] = &Cdfe_regif::cb_DFEjCAPCLRSTCHn_CLRCDOOW;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cdfe_regif::~Cdfe_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cdfe_regif::uint Cdfe_regif::bit_select(
                        cuint val,    ///< [in] Writting address
                        cuint start,  ///< [in] start bit position
                        cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdfe_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                        const unsigned char *p_data,   ///< [in] Writing data
                        cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdfe_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                        unsigned char *p_data,   ///< [out] Reading data
                        cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdfe_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdfe_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cdfe_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                const unsigned char *p_data,  ///< [in] Writing data
                                cuint size,                   ///< [in] Data size (byte)
                                bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cdfe_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size,              ///< [in]  Data size (byte)
                                bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cdfe_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                             unsigned char *p_data,          ///< [out] Reading data
                             cuint size,                     ///< [in]  Data size (byte)
                             cuint reg_index,                ///< [in] Register index
                             bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cdfe_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                             const unsigned char *p_data,      ///< [in] Writing data
                             cuint size,                       ///< [in] Data size (byte)
                             cuint reg_index,                  ///< [in] Register index
                             bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cdfe_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cdfe_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cdfe_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cdfe_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cdfe_regif::InitLocalVal()
{
    // Initialize local variables
    for(uint i = 0; i < emNUM_DFEjCTLACHn;    i++) {
        DFEjCTLACHn_CATAG [i] = 0x0;
        DFEjCTLACHn_CAEN  [i] = 0x0;
        DFEjCTLACHn_TAG   [i] = 0x0;
        DFEjCTLACHn_CMD   [i] = 0x0;
        DFEjCTLACHn_FMT   [i] = 0x0;
        DFEjCTLACHn_IEP   [i] = 0x0;
        DFEjCTLACHn_IEE   [i] = 0x0;
        DFEjCTLACHn_IEC   [i] = 0x0;
        DFEjCTLACHn_IEO   [i] = 0x0;
        DFEjCTLACHn_CNSL  [i] = 0x0;
        DFEjCTLACHn_CNSLE [i] = 0x0;
        DFEjCTLACHn_AIME  [i] = 0x0;
        DFEjCTLACHn_EN    [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCTLBCHn;    i++) {
        DFEjCTLBCHn_OFSL  [i] = 0x0;
        DFEjCTLBCHn_DISB  [i] = 0x1;
        DFEjCTLBCHn_PHPS  [i] = 0x0;
        DFEjCTLBCHn_CPCS  [i] = 0x0;
        DFEjCTLBCHn_PHSLB2[i] = 0x0;
        DFEjCTLBCHn_DISA  [i] = 0x1;
        DFEjCTLBCHn_PRCSC [i] = 0x0;
        DFEjCTLBCHn_SELB2 [i] = 0x0;
        DFEjCTLBCHn_SELB1 [i] = 0x0;
        DFEjCTLBCHn_PRCSB [i] = 0x0;
        DFEjCTLBCHn_HOFS  [i] = 0x0;
        DFEjCTLBCHn_PICS  [i] = 0x0;
        DFEjCTLBCHn_SELA  [i] = 0x0;
        DFEjCTLBCHn_PFMT  [i] = 0x0;
        DFEjCTLBCHn_ABS   [i] = 0x0;
        DFEjCTLBCHn_PRCSA [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjDOCHn;      i++) {
        DFEjDOCHn_DFEjDOCHn[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjPHCHn;      i++) {
        DFEjPHCHn_DFEjPHCHn[i] = 0x80000000;
    }
    for(uint i = 0; i < emNUM_DFEjPHINDCHn;   i++) {
        DFEjPHINDCHn_PHIOW[i] = 0x0;
        DFEjPHINDCHn_PHIOF[i] = 0x0;
        DFEjPHINDCHn_PHIND[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSTCHn;      i++) {
        DFEjSTCHn_PH23ST  [i] = 0x0;
        DFEjSTCHn_VALID   [i] = 0x0;
        DFEjSTCHn_PHE     [i] = 0x0;
        DFEjSTCHn_CND     [i] = 0x0;
        DFEjSTCHn_DOEN    [i] = 0x0;
        DFEjSTCHn_CER     [i] = 0x0;
        DFEjSTCHn_AER     [i] = 0x0;
        DFEjSTCHn_MER     [i] = 0x0;
        DFEjSTCHn_GER     [i] = 0x0;
        DFEjSTCHn_DOOW    [i] = 0x0;
        DFEjSTCHn_DIOW    [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCLRSTCHn;   i++) {
        DFEjCLRSTCHn_CLRPHIOW[i] = 0x0;
        DFEjCLRSTCHn_CLRPHE[i] = 0x0;
        DFEjCLRSTCHn_CLRCND[i] = 0x0;
        DFEjCLRSTCHn_CLRDOEN[i] = 0x0;
        DFEjCLRSTCHn_CLRCER[i] = 0x0;
        DFEjCLRSTCHn_CLRAER[i] = 0x0;
        DFEjCLRSTCHn_CLRMER[i] = 0x0;
        DFEjCLRSTCHn_CLRGER[i] = 0x0;
        DFEjCLRSTCHn_CLRDOOW[i] = 0x0;
        DFEjCLRSTCHn_CLRDIOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjERMCHn;     i++) {
        DFEjERMCHn_MSKCER [i] = 0x0;
        DFEjERMCHn_MSKAER [i] = 0x0;
        DFEjERMCHn_MSKMER [i] = 0x0;
        DFEjERMCHn_MSKGER [i] = 0x0;
        DFEjERMCHn_MSKDOOW[i] = 0x0;
        DFEjERMCHn_MSKDIOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjTRGCHn;     i++) {
        DFEjTRGCHn_PMFE   [i] = 0x0;
        DFEjTRGCHn_PME    [i] = 0x0;
        DFEjTRGCHn_PFE    [i] = 0x0;
        DFEjTRGCHn_AFE    [i] = 0x0;
        DFEjTRGCHn_PE     [i] = 0x0;
        DFEjTRGCHn_PT     [i] = 0x0;
        DFEjTRGCHn_AE     [i] = 0x0;
        DFEjTRGCHn_AT     [i] = 0x0;
        DFEjTRGCHn_FE     [i] = 0x0;
        DFEjTRGCHn_FT     [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjTRHCHn;     i++) {
        DFEjTRHCHn_PMITS  [i] = 0x0;
        DFEjTRHCHn_PMETS  [i] = 0x0;
        DFEjTRHCHn_PITS   [i] = 0x0;
        DFEjTRHCHn_PETS   [i] = 0x0;
        DFEjTRHCHn_MITS   [i] = 0x0;
        DFEjTRHCHn_METS   [i] = 0x0;
        DFEjTRHCHn_FITS   [i] = 0x0;
    }
    DFEjCPA_DFEjCPA    = 0x0;
    DFEjCPB_DFEjCPB    = 0x0;
    DFEjCPC_DFEjCPC    = 0x0;
    DFEjCPD_DFEjCPD    = 0x0;
    DFEjPHIA_DFEjPHIA  = 0x80000000;
    DFEjPHIB_DFEjPHIB  = 0x80000000;
    DFEjPHIC_DFEjPHIC  = 0x80000000;
    DFEjPHID_DFEjPHID  = 0x80000000;
    DFEjPMITRG0_PMITMTRG3 = 0x0;
    DFEjPMITRG0_PMITMTRG2 = 0x0;
    DFEjPMITRG0_PMITMTRG1 = 0x0;
    DFEjPMITRG0_PMITMTRG0 = 0x0;
    DFEjPMITRG1_PMITMTRG5 = 0x0;
    DFEjPMITRG1_PMITMTRG4 = 0x0;
    DFEjACA_AC         = 0x0;
    DFEjACB_AC         = 0x0;
    DFEjACC_AC         = 0x0;
    DFEjACD_AC         = 0x0;
    DFEjDI_TAG         = 0x0;
    DFEjDI_DI          = 0x0;
    DFEjTRG_TRGA       = 0x0;
    DFEjEST_CP2S       = 0x0;
    DFEjEST_CP1S       = 0x0;
    DFEjEST_CP0S       = 0x0;
    DFEjEST_SB2S       = 0x0;
    DFEjEST_SB1S       = 0x0;
    DFEjEST_SB0S       = 0x0;
	  if (mNumChan == 12) {
		    DFEjST_CH11S       = 0x0;
        DFEjST_CH10S       = 0x0;
    }
	  if (mNumChan >= 10) {
		    DFEjST_CH9S        = 0x0;
        DFEjST_CH8S        = 0x0;
	  }
	  if (mNumChan >= 8) {
		    DFEjST_CH7S        = 0x0;
        DFEjST_CH6S        = 0x0;
	  }
	  if (mNumChan >= 6) {
		    DFEjST_CH5S        = 0x0;
        DFEjST_CH4S        = 0x0;
    }
	  if (mNumChan >= 4) {
		    DFEjST_CH3S        = 0x0;
        DFEjST_CH2S        = 0x0;
	  }
	  if (mNumChan >= 2) {
		    DFEjST_CH1S        = 0x0;
        DFEjST_CH0S        = 0x0;
	  }
    DFEjPITRG1_PITMTRG5 = 0x0;
    DFEjPITRG1_PITMTRG4 = 0x0;
    DFEjMITRG1_MITMTRG5 = 0x0;
    DFEjMITRG1_MITMTRG4 = 0x0;
    DFEjFITRG1_FITMTRG5 = 0x0;
    DFEjFITRG1_FITMTRG4 = 0x0;
    DFEjPITRG_PITMTRG3 = 0x0;
    DFEjPITRG_PITMTRG2 = 0x0;
    DFEjPITRG_PITMTRG1 = 0x0;
    DFEjPITRG_PITMTRG0 = 0x0;
    DFEjMITRG_MITMTRG3 = 0x0;
    DFEjMITRG_MITMTRG2 = 0x0;
    DFEjMITRG_MITMTRG1 = 0x0;
    DFEjMITRG_MITMTRG0 = 0x0;
    DFEjFITRG_FITMTRG3 = 0x0;
    DFEjFITRG_FITMTRG2 = 0x0;
    DFEjFITRG_FITMTRG1 = 0x0;
    DFEjFITRG_FITMTRG0 = 0x0;
    for(uint i = 0; i < emNUM_DFEjPHUPDCn;    i++) {
        DFEjPHUPDCn_PHUPDCH[i] = 0x0;
        DFEjPHUPDCn_PH23SL[i] = 0x0;
        DFEjPHUPDCn_PH23E [i] = 0x0;
        DFEjPHUPDCn_OEPHUPD[i] = 0x0;
    }
    DFEjHOLCH0_DFEjHOLCH0 = 0x0;
    DFEjHOHCH0_GURD    = 0x0;
    DFEjHOLCH2_DFEjHOLCH2 = 0x0;
    DFEjHOHCH2_GURD    = 0x0;
    DFEjHOLCH4_DFEjHOLCH4 = 0x0;
    DFEjHOHCH4_GURD    = 0x0;
    DFEjHOLCH6_DFEjHOLCH6 = 0x0;
    DFEjHOHCH6_GURD    = 0x0;
    DFEjHOLCH8_DFEjHOLCH8 = 0x0;
    DFEjHOHCH8_GURD    = 0x0;
    DFEjHOLCH10_DFEjHOLCH10 = 0x0;
    DFEjHOHCH10_GURD   = 0x0;
    DFEjHOLMCH0_DFEjHOLMCH0 = 0x0;
    DFEjHOLMCH2_DFEjHOLMCH2 = 0x0;
    DFEjHOLMCH4_DFEjHOLMCH4 = 0x0;
    DFEjHOLMCH6_DFEjHOLMCH6 = 0x0;
    DFEjHOLMCH8_DFEjHOLMCH8 = 0x0;
    DFEjHOLMCH10_DFEjHOLMCH10 = 0x0;
    for(uint i = 0; i < emNUM_DFEjGAINCHn;    i++) {
        DFEjGAINCHn_GAIN3 [i] = 0x4000;
        DFEjGAINCHn_GAIN2 [i] = 0x4000;
    }
    for(uint i = 0; i < emNUM_DFEjTMTRGCHn;   i++) {
        DFEjTMTRGCHn_PMT  [i] = 0x0;
        DFEjTMTRGCHn_PT   [i] = 0x0;
        DFEjTMTRGCHn_AT   [i] = 0x0;
        DFEjTMTRGCHn_FT   [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCPOFSTn;    i++) {
        DFEjCPOFSTn_DFEjCPOFSTn[i] = 0x0;
    }
    DFEjPH23CCTL0_CHS  = 0x0;
    DFEjPH23CCTL0_PFMT = 0x0;
    DFEjPH23CCTL0_PEN  = 0x0;
    DFEjPH2CTL0_OFSL   = 0x0;
    DFEjPH2CTL0_PH2SLB2 = 0x0;
    DFEjPH2CTL0_PHPS   = 0x0;
    DFEjPH2CTL0_CN2SLB2 = 0x0;
    DFEjPH3CTL0_OFSL   = 0x0;
    DFEjPH3CTL0_PH3SLB2 = 0x0;
    DFEjPH3CTL0_PHPS   = 0x0;
    DFEjPH3CTL0_CN3SLB2 = 0x0;
    DFEjPH20_DFEjPH20  = 0x80000000;
    DFEjPH30_DFEjPH30  = 0x80000000;
    DFEjPH2IND0_PH2IOW = 0x0;
    DFEjPH2IND0_PH2IOF = 0x0;
    DFEjPH2IND0_PH2IND = 0x0;
    DFEjPH3IND0_PH3IOW = 0x0;
    DFEjPH3IND0_PH3IOF = 0x0;
    DFEjPH3IND0_PH3IND = 0x0;
    for(uint i = 0; i < emNUM_DFEjSUBCTLCHn;  i++) {
        DFEjSUBCTLCHn_CATAG[i] = 0x0;
        DFEjSUBCTLCHn_CAEN[i] = 0x0;
        DFEjSUBCTLCHn_MINCH[i] = 0x0;
        DFEjSUBCTLCHn_SUBCH[i] = 0x0;
        DFEjSUBCTLCHn_SFMT[i] = 0x0;
        DFEjSUBCTLCHn_SIEE[i] = 0x0;
        DFEjSUBCTLCHn_SIEO[i] = 0x0;
        DFEjSUBCTLCHn_SEN [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBDOCHn;   i++) {
        DFEjSUBDOCHn_DFEjSUBDOCHn[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBSTCHn;   i++) {
        DFEjSUBSTCHn_SDOEN[i] = 0x0;
        DFEjSUBSTCHn_MINF [i] = 0x0;
        DFEjSUBSTCHn_SUBF [i] = 0x0;
        DFEjSUBSTCHn_SCER [i] = 0x0;
        DFEjSUBSTCHn_SGER [i] = 0x0;
        DFEjSUBSTCHn_SDOOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBCLRSTCHn; i++) {
        DFEjSUBCLRSTCHn_CLRSDOEN[i] = 0x0;
        DFEjSUBCLRSTCHn_CLRSCER[i] = 0x0;
        DFEjSUBCLRSTCHn_CLRSGER[i] = 0x0;
        DFEjSUBCLRSTCHn_CLRSDOOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBERMCHn;  i++) {
        DFEjSUBERMCHn_MSKSCER[i] = 0x0;
        DFEjSUBERMCHn_MSKSGER[i] = 0x0;
        DFEjSUBERMCHn_MSKSDOOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRGCHn;  i++) {
        DFEjSUBTRGCHn_SBFE[i] = 0x0;
        DFEjSUBTRGCHn_SBE [i] = 0x0;
        DFEjSUBTRGCHn_SBT [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjSUBTRHCHn;  i++) {
        DFEjSUBTRHCHn_SITS[i] = 0x0;
        DFEjSUBTRHCHn_SETS[i] = 0x0;
    }
    DFEjSUBTRG0_SUBTMTRG2 = 0x0;
    DFEjSUBTRG0_SUBTMTRG1 = 0x0;
    DFEjSUBTRG0_SUBTMTRG0 = 0x0;
    for(uint i = 0; i < emNUM_DFEjCAPCTLCHn;  i++) {
        DFEjCAPCTLCHn_CAPCH[i] = 0x0;
        DFEjCAPCTLCHn_CIEE[i] = 0x0;
        DFEjCAPCTLCHn_CEN [i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCAPDOCHn;   i++) {
        DFEjCAPDOCHn_DFEjCAPDOCHn[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCAPSTCHn;   i++) {
        DFEjCAPSTCHn_CDOEN[i] = 0x0;
        DFEjCAPSTCHn_CDOOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCAPCLRSTCHn; i++) {
        DFEjCAPCLRSTCHn_CLRCDOEN[i] = 0x0;
        DFEjCAPCLRSTCHn_CLRCDOOW[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_DFEjCAPERMCHn;  i++) {
        DFEjCAPERMCHn_MSKCDOOW[i] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cdfe_regif::UpdateLocalVal(cuint addr)
{
    if ((0x0000 <= addr) && (addr <= (0x0000)+(4*11)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        DFEjCTLACHn_CATAG                  [i] = (*(DFEjCTLACHn    [i]))["CATAG"          ];
        DFEjCTLACHn_CAEN                   [i] = (*(DFEjCTLACHn    [i]))["CAEN"           ];
        DFEjCTLACHn_TAG                    [i] = (*(DFEjCTLACHn    [i]))["TAG"            ];
        DFEjCTLACHn_CMD                    [i] = (*(DFEjCTLACHn    [i]))["CMD"            ];
        DFEjCTLACHn_FMT                    [i] = (*(DFEjCTLACHn    [i]))["FMT"            ];
        DFEjCTLACHn_IEP                    [i] = (*(DFEjCTLACHn    [i]))["IEP"            ];
        DFEjCTLACHn_IEE                    [i] = (*(DFEjCTLACHn    [i]))["IEE"            ];
        DFEjCTLACHn_IEC                    [i] = (*(DFEjCTLACHn    [i]))["IEC"            ];
        DFEjCTLACHn_IEO                    [i] = (*(DFEjCTLACHn    [i]))["IEO"            ];
        DFEjCTLACHn_CNSL                   [i] = (*(DFEjCTLACHn    [i]))["CNSL"           ];
        DFEjCTLACHn_CNSLE                  [i] = (*(DFEjCTLACHn    [i]))["CNSLE"          ];
        DFEjCTLACHn_AIME                   [i] = (*(DFEjCTLACHn    [i]))["AIME"           ];
        DFEjCTLACHn_EN                     [i] = (*(DFEjCTLACHn    [i]))["EN"             ];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*11)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        DFEjCTLBCHn_OFSL                   [i] = (*(DFEjCTLBCHn    [i]))["OFSL"           ];
        DFEjCTLBCHn_DISB                   [i] = (*(DFEjCTLBCHn    [i]))["DISB"           ];
        DFEjCTLBCHn_PHPS                   [i] = (*(DFEjCTLBCHn    [i]))["PHPS"           ];
        DFEjCTLBCHn_CPCS                   [i] = (*(DFEjCTLBCHn    [i]))["CPCS"           ];
        DFEjCTLBCHn_PHSLB2                 [i] = (*(DFEjCTLBCHn    [i]))["PHSLB2"         ];
        DFEjCTLBCHn_DISA                   [i] = (*(DFEjCTLBCHn    [i]))["DISA"           ];
        DFEjCTLBCHn_PRCSC                  [i] = (*(DFEjCTLBCHn    [i]))["PRCSC"          ];
        DFEjCTLBCHn_SELB2                  [i] = (*(DFEjCTLBCHn    [i]))["SELB2"          ];
        DFEjCTLBCHn_SELB1                  [i] = (*(DFEjCTLBCHn    [i]))["SELB1"          ];
        DFEjCTLBCHn_PRCSB                  [i] = (*(DFEjCTLBCHn    [i]))["PRCSB"          ];
        DFEjCTLBCHn_HOFS                   [i] = (*(DFEjCTLBCHn    [i]))["HOFS"           ];
        DFEjCTLBCHn_PICS                   [i] = (*(DFEjCTLBCHn    [i]))["PICS"           ];
        DFEjCTLBCHn_SELA                   [i] = (*(DFEjCTLBCHn    [i]))["SELA"           ];
        DFEjCTLBCHn_PFMT                   [i] = (*(DFEjCTLBCHn    [i]))["PFMT"           ];
        DFEjCTLBCHn_ABS                    [i] = (*(DFEjCTLBCHn    [i]))["ABS"            ];
        DFEjCTLBCHn_PRCSA                  [i] = (*(DFEjCTLBCHn    [i]))["PRCSA"          ];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*11)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        DFEjDOCHn_DFEjDOCHn                [i] = (*(DFEjDOCHn      [i]))["DFEjDOCHn"      ];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(4*11)) && ((addr-0x00C0)%4 == 0)) {
        uint i = (addr - 0x00C0)/4;
        DFEjPHCHn_DFEjPHCHn                [i] = (*(DFEjPHCHn      [i]))["DFEjPHCHn"      ];
        return;
    }
    if ((0x0100 <= addr) && (addr <= (0x0100)+(4*11)) && ((addr-0x0100)%4 == 0)) {
        uint i = (addr - 0x0100)/4;
        DFEjPHINDCHn_PHIOW                 [i] = (*(DFEjPHINDCHn   [i]))["PHIOW"          ];
        DFEjPHINDCHn_PHIOF                 [i] = (*(DFEjPHINDCHn   [i]))["PHIOF"          ];
        DFEjPHINDCHn_PHIND                 [i] = (*(DFEjPHINDCHn   [i]))["PHIND"          ];
        return;
    }
    if ((0x0140 <= addr) && (addr <= (0x0140)+(4*11)) && ((addr-0x0140)%4 == 0)) {
        uint i = (addr - 0x0140)/4;
        DFEjSTCHn_PH23ST                   [i] = (*(DFEjSTCHn      [i]))["PH23ST"         ];
        DFEjSTCHn_VALID                    [i] = (*(DFEjSTCHn      [i]))["VALID"          ];
        DFEjSTCHn_PHE                      [i] = (*(DFEjSTCHn      [i]))["PHE"            ];
        DFEjSTCHn_CND                      [i] = (*(DFEjSTCHn      [i]))["CND"            ];
        DFEjSTCHn_DOEN                     [i] = (*(DFEjSTCHn      [i]))["DOEN"           ];
        DFEjSTCHn_CER                      [i] = (*(DFEjSTCHn      [i]))["CER"            ];
        DFEjSTCHn_AER                      [i] = (*(DFEjSTCHn      [i]))["AER"            ];
        DFEjSTCHn_MER                      [i] = (*(DFEjSTCHn      [i]))["MER"            ];
        DFEjSTCHn_GER                      [i] = (*(DFEjSTCHn      [i]))["GER"            ];
        DFEjSTCHn_DOOW                     [i] = (*(DFEjSTCHn      [i]))["DOOW"           ];
        DFEjSTCHn_DIOW                     [i] = (*(DFEjSTCHn      [i]))["DIOW"           ];
        return;
    }
    if ((0x0180 <= addr) && (addr <= (0x0180)+(4*11)) && ((addr-0x0180)%4 == 0)) {
        uint i = (addr - 0x0180)/4;
        DFEjCLRSTCHn_CLRPHIOW              [i] = (*(DFEjCLRSTCHn   [i]))["CLRPHIOW"       ];
        DFEjCLRSTCHn_CLRPHE                [i] = (*(DFEjCLRSTCHn   [i]))["CLRPHE"         ];
        DFEjCLRSTCHn_CLRCND                [i] = (*(DFEjCLRSTCHn   [i]))["CLRCND"         ];
        DFEjCLRSTCHn_CLRDOEN               [i] = (*(DFEjCLRSTCHn   [i]))["CLRDOEN"        ];
        DFEjCLRSTCHn_CLRCER                [i] = (*(DFEjCLRSTCHn   [i]))["CLRCER"         ];
        DFEjCLRSTCHn_CLRAER                [i] = (*(DFEjCLRSTCHn   [i]))["CLRAER"         ];
        DFEjCLRSTCHn_CLRMER                [i] = (*(DFEjCLRSTCHn   [i]))["CLRMER"         ];
        DFEjCLRSTCHn_CLRGER                [i] = (*(DFEjCLRSTCHn   [i]))["CLRGER"         ];
        DFEjCLRSTCHn_CLRDOOW               [i] = (*(DFEjCLRSTCHn   [i]))["CLRDOOW"        ];
        DFEjCLRSTCHn_CLRDIOW               [i] = (*(DFEjCLRSTCHn   [i]))["CLRDIOW"        ];
        return;
    }
    if ((0x01C0 <= addr) && (addr <= (0x01C0)+(4*11)) && ((addr-0x01C0)%4 == 0)) {
        uint i = (addr - 0x01C0)/4;
        DFEjERMCHn_MSKCER                  [i] = (*(DFEjERMCHn     [i]))["MSKCER"         ];
        DFEjERMCHn_MSKAER                  [i] = (*(DFEjERMCHn     [i]))["MSKAER"         ];
        DFEjERMCHn_MSKMER                  [i] = (*(DFEjERMCHn     [i]))["MSKMER"         ];
        DFEjERMCHn_MSKGER                  [i] = (*(DFEjERMCHn     [i]))["MSKGER"         ];
        DFEjERMCHn_MSKDOOW                 [i] = (*(DFEjERMCHn     [i]))["MSKDOOW"        ];
        DFEjERMCHn_MSKDIOW                 [i] = (*(DFEjERMCHn     [i]))["MSKDIOW"        ];
        return;
    }
    if ((0x0200 <= addr) && (addr <= (0x0200)+(4*11)) && ((addr-0x0200)%4 == 0)) {
        uint i = (addr - 0x0200)/4;
        DFEjTRGCHn_PMFE                    [i] = (*(DFEjTRGCHn     [i]))["PMFE"           ];
        DFEjTRGCHn_PME                     [i] = (*(DFEjTRGCHn     [i]))["PME"            ];
        DFEjTRGCHn_PFE                     [i] = (*(DFEjTRGCHn     [i]))["PFE"            ];
        DFEjTRGCHn_AFE                     [i] = (*(DFEjTRGCHn     [i]))["AFE"            ];
        DFEjTRGCHn_PE                      [i] = (*(DFEjTRGCHn     [i]))["PE"             ];
        DFEjTRGCHn_PT                      [i] = (*(DFEjTRGCHn     [i]))["PT"             ];
        DFEjTRGCHn_AE                      [i] = (*(DFEjTRGCHn     [i]))["AE"             ];
        DFEjTRGCHn_AT                      [i] = (*(DFEjTRGCHn     [i]))["AT"             ];
        DFEjTRGCHn_FE                      [i] = (*(DFEjTRGCHn     [i]))["FE"             ];
        DFEjTRGCHn_FT                      [i] = (*(DFEjTRGCHn     [i]))["FT"             ];
        return;
    }
    if ((0x0240 <= addr) && (addr <= (0x0240)+(4*11)) && ((addr-0x0240)%4 == 0)) {
        uint i = (addr - 0x0240)/4;
        DFEjTRHCHn_PMITS                   [i] = (*(DFEjTRHCHn     [i]))["PMITS"          ];
        DFEjTRHCHn_PMETS                   [i] = (*(DFEjTRHCHn     [i]))["PMETS"          ];
        DFEjTRHCHn_PITS                    [i] = (*(DFEjTRHCHn     [i]))["PITS"           ];
        DFEjTRHCHn_PETS                    [i] = (*(DFEjTRHCHn     [i]))["PETS"           ];
        DFEjTRHCHn_MITS                    [i] = (*(DFEjTRHCHn     [i]))["MITS"           ];
        DFEjTRHCHn_METS                    [i] = (*(DFEjTRHCHn     [i]))["METS"           ];
        DFEjTRHCHn_FITS                    [i] = (*(DFEjTRHCHn     [i]))["FITS"           ];
        return;
    }
    if (addr == 0x0280) {
        DFEjCPA_DFEjCPA                     = (*DFEjCPA        )["DFEjCPA"        ];
        return;
    }
    if (addr == 0x0284) {
        DFEjCPB_DFEjCPB                     = (*DFEjCPB        )["DFEjCPB"        ];
        return;
    }
    if (addr == 0x0288) {
        DFEjCPC_DFEjCPC                     = (*DFEjCPC        )["DFEjCPC"        ];
        return;
    }
    if (addr == 0x028C) {
        DFEjCPD_DFEjCPD                     = (*DFEjCPD        )["DFEjCPD"        ];
        return;
    }
    if (addr == 0x0290) {
        DFEjPHIA_DFEjPHIA                   = (*DFEjPHIA       )["DFEjPHIA"       ];
        return;
    }
    if (addr == 0x0294) {
        DFEjPHIB_DFEjPHIB                   = (*DFEjPHIB       )["DFEjPHIB"       ];
        return;
    }
    if (addr == 0x0298) {
        DFEjPHIC_DFEjPHIC                   = (*DFEjPHIC       )["DFEjPHIC"       ];
        return;
    }
    if (addr == 0x029C) {
        DFEjPHID_DFEjPHID                   = (*DFEjPHID       )["DFEjPHID"       ];
        return;
    }
    if (addr == 0x02A8) {
        DFEjPMITRG0_PMITMTRG3               = (*DFEjPMITRG0    )["PMITMTRG3"      ];
        DFEjPMITRG0_PMITMTRG2               = (*DFEjPMITRG0    )["PMITMTRG2"      ];
        DFEjPMITRG0_PMITMTRG1               = (*DFEjPMITRG0    )["PMITMTRG1"      ];
        DFEjPMITRG0_PMITMTRG0               = (*DFEjPMITRG0    )["PMITMTRG0"      ];
        return;
    }
    if (addr == 0x02AC) {
        DFEjPMITRG1_PMITMTRG5               = (*DFEjPMITRG1    )["PMITMTRG5"      ];
        DFEjPMITRG1_PMITMTRG4               = (*DFEjPMITRG1    )["PMITMTRG4"      ];
        return;
    }
    if (addr == 0x02B0) {
        DFEjACA_AC                          = (*DFEjACA        )["AC"             ];
        return;
    }
    if (addr == 0x02B4) {
        DFEjACB_AC                          = (*DFEjACB        )["AC"             ];
        return;
    }
    if (addr == 0x02B8) {
        DFEjACC_AC                          = (*DFEjACC        )["AC"             ];
        return;
    }
    if (addr == 0x02BC) {
        DFEjACD_AC                          = (*DFEjACD        )["AC"             ];
        return;
    }
    if (addr == 0x02C0) {
        DFEjDI_TAG                          = (*DFEjDI         )["TAG"            ];
        DFEjDI_DI                           = (*DFEjDI         )["DI"             ];
        return;
    }
    if (addr == 0x02C4) {
        DFEjTRG_TRGA                        = (*DFEjTRG        )["TRGA"           ];
        return;
    }
    if (addr == 0x02C8) {
        DFEjEST_CP2S                        = (*DFEjEST        )["CP2S"           ];
        DFEjEST_CP1S                        = (*DFEjEST        )["CP1S"           ];
        DFEjEST_CP0S                        = (*DFEjEST        )["CP0S"           ];
        DFEjEST_SB2S                        = (*DFEjEST        )["SB2S"           ];
        DFEjEST_SB1S                        = (*DFEjEST        )["SB1S"           ];
        DFEjEST_SB0S                        = (*DFEjEST        )["SB0S"           ];
        return;
    }
    if (addr == 0x02CC) {
		    if (mNumChan == 12) {
		        DFEjST_CH11S                        = (*DFEjST         )["CH11S"          ];
            DFEjST_CH10S                        = (*DFEjST         )["CH10S"          ];
	      }
	      if (mNumChan >= 10) {
		        DFEjST_CH9S                         = (*DFEjST         )["CH9S"           ];
            DFEjST_CH8S                         = (*DFEjST         )["CH8S"           ];
        }
	      if (mNumChan >= 8) {
		        DFEjST_CH7S                         = (*DFEjST         )["CH7S"           ];
            DFEjST_CH6S                         = (*DFEjST         )["CH6S"           ];
	      }
	      if (mNumChan >= 6) {
		        DFEjST_CH5S                         = (*DFEjST         )["CH5S"           ];
            DFEjST_CH4S                         = (*DFEjST         )["CH4S"           ];
	      }
	      if (mNumChan >= 4) {
		        DFEjST_CH3S                         = (*DFEjST         )["CH3S"           ];
            DFEjST_CH2S                         = (*DFEjST         )["CH2S"           ];
	      }
	      if (mNumChan >= 2) {
		        DFEjST_CH1S                         = (*DFEjST         )["CH1S"           ];
            DFEjST_CH0S                         = (*DFEjST         )["CH0S"           ];
	      }
        return;
    }
    if (addr == 0x02D4) {
        DFEjPITRG1_PITMTRG5                 = (*DFEjPITRG1     )["PITMTRG5"       ];
        DFEjPITRG1_PITMTRG4                 = (*DFEjPITRG1     )["PITMTRG4"       ];
        return;
    }
    if (addr == 0x02D8) {
        DFEjMITRG1_MITMTRG5                 = (*DFEjMITRG1     )["MITMTRG5"       ];
        DFEjMITRG1_MITMTRG4                 = (*DFEjMITRG1     )["MITMTRG4"       ];
        return;
    }
    if (addr == 0x02DC) {
        DFEjFITRG1_FITMTRG5                 = (*DFEjFITRG1     )["FITMTRG5"       ];
        DFEjFITRG1_FITMTRG4                 = (*DFEjFITRG1     )["FITMTRG4"       ];
        return;
    }
    if (addr == 0x0300) {
        DFEjPITRG_PITMTRG3                  = (*DFEjPITRG      )["PITMTRG3"       ];
        DFEjPITRG_PITMTRG2                  = (*DFEjPITRG      )["PITMTRG2"       ];
        DFEjPITRG_PITMTRG1                  = (*DFEjPITRG      )["PITMTRG1"       ];
        DFEjPITRG_PITMTRG0                  = (*DFEjPITRG      )["PITMTRG0"       ];
        return;
    }
    if (addr == 0x0304) {
        DFEjMITRG_MITMTRG3                  = (*DFEjMITRG      )["MITMTRG3"       ];
        DFEjMITRG_MITMTRG2                  = (*DFEjMITRG      )["MITMTRG2"       ];
        DFEjMITRG_MITMTRG1                  = (*DFEjMITRG      )["MITMTRG1"       ];
        DFEjMITRG_MITMTRG0                  = (*DFEjMITRG      )["MITMTRG0"       ];
        return;
    }
    if (addr == 0x0308) {
        DFEjFITRG_FITMTRG3                  = (*DFEjFITRG      )["FITMTRG3"       ];
        DFEjFITRG_FITMTRG2                  = (*DFEjFITRG      )["FITMTRG2"       ];
        DFEjFITRG_FITMTRG1                  = (*DFEjFITRG      )["FITMTRG1"       ];
        DFEjFITRG_FITMTRG0                  = (*DFEjFITRG      )["FITMTRG0"       ];
        return;
    }
    if ((0x0310 <= addr) && (addr <= (0x0310)+(4*3)) && ((addr-0x0310)%4 == 0)) {
        uint i = (addr - 0x0310)/4;
        DFEjPHUPDCn_PHUPDCH                [i] = (*(DFEjPHUPDCn    [i]))["PHUPDCH"        ];
        DFEjPHUPDCn_PH23SL                 [i] = (*(DFEjPHUPDCn    [i]))["PH23SL"         ];
        DFEjPHUPDCn_PH23E                  [i] = (*(DFEjPHUPDCn    [i]))["PH23E"          ];
        DFEjPHUPDCn_OEPHUPD                [i] = (*(DFEjPHUPDCn    [i]))["OEPHUPD"        ];
        return;
    }
    if (addr == 0x0320) {
        DFEjHOLCH0_DFEjHOLCH0               = (*DFEjHOLCH0     )["DFEjHOLCH0"     ];
        return;
    }
    if (addr == 0x0324) {
        DFEjHOHCH0_GURD                     = (*DFEjHOHCH0     )["GURD"           ];
        return;
    }
    if (addr == 0x0328) {
        DFEjHOLCH2_DFEjHOLCH2               = (*DFEjHOLCH2     )["DFEjHOLCH2"     ];
        return;
    }
    if (addr == 0x032C) {
        DFEjHOHCH2_GURD                     = (*DFEjHOHCH2     )["GURD"           ];
        return;
    }
    if (addr == 0x0330) {
        DFEjHOLCH4_DFEjHOLCH4               = (*DFEjHOLCH4     )["DFEjHOLCH4"     ];
        return;
    }
    if (addr == 0x0334) {
        DFEjHOHCH4_GURD                     = (*DFEjHOHCH4     )["GURD"           ];
        return;
    }
    if (addr == 0x0338) {
        DFEjHOLCH6_DFEjHOLCH6               = (*DFEjHOLCH6     )["DFEjHOLCH6"     ];
        return;
    }
    if (addr == 0x033C) {
        DFEjHOHCH6_GURD                     = (*DFEjHOHCH6     )["GURD"           ];
        return;
    }
    if (addr == 0x0340) {
        DFEjHOLCH8_DFEjHOLCH8               = (*DFEjHOLCH8     )["DFEjHOLCH8"     ];
        return;
    }
    if (addr == 0x0344) {
        DFEjHOHCH8_GURD                     = (*DFEjHOHCH8     )["GURD"           ];
        return;
    }
    if (addr == 0x0348) {
        DFEjHOLCH10_DFEjHOLCH10             = (*DFEjHOLCH10    )["DFEjHOLCH10"    ];
        return;
    }
    if (addr == 0x034C) {
        DFEjHOHCH10_GURD                    = (*DFEjHOHCH10    )["GURD"           ];
        return;
    }
    if (addr == 0x0360) {
        DFEjHOLMCH0_DFEjHOLMCH0             = (*DFEjHOLMCH0    )["DFEjHOLMCH0"    ];
        return;
    }
    if (addr == 0x0364) {
        DFEjHOLMCH2_DFEjHOLMCH2             = (*DFEjHOLMCH2    )["DFEjHOLMCH2"    ];
        return;
    }
    if (addr == 0x0368) {
        DFEjHOLMCH4_DFEjHOLMCH4             = (*DFEjHOLMCH4    )["DFEjHOLMCH4"    ];
        return;
    }
    if (addr == 0x036C) {
        DFEjHOLMCH6_DFEjHOLMCH6             = (*DFEjHOLMCH6    )["DFEjHOLMCH6"    ];
        return;
    }
    if (addr == 0x0370) {
        DFEjHOLMCH8_DFEjHOLMCH8             = (*DFEjHOLMCH8    )["DFEjHOLMCH8"    ];
        return;
    }
    if (addr == 0x0374) {
        DFEjHOLMCH10_DFEjHOLMCH10           = (*DFEjHOLMCH10   )["DFEjHOLMCH10"   ];
        return;
    }
    if ((0x0380 <= addr) && (addr <= (0x0380)+(4*11)) && ((addr-0x0380)%4 == 0)) {
        uint i = (addr - 0x0380)/4;
        DFEjGAINCHn_GAIN3                  [i] = (*(DFEjGAINCHn    [i]))["GAIN3"          ];
        DFEjGAINCHn_GAIN2                  [i] = (*(DFEjGAINCHn    [i]))["GAIN2"          ];
        return;
    }
    if ((0x03C0 <= addr) && (addr <= (0x03C0)+(4*11)) && ((addr-0x03C0)%4 == 0)) {
        uint i = (addr - 0x03C0)/4;
        DFEjTMTRGCHn_PMT                   [i] = (*(DFEjTMTRGCHn   [i]))["PMT"            ];
        DFEjTMTRGCHn_PT                    [i] = (*(DFEjTMTRGCHn   [i]))["PT"             ];
        DFEjTMTRGCHn_AT                    [i] = (*(DFEjTMTRGCHn   [i]))["AT"             ];
        DFEjTMTRGCHn_FT                    [i] = (*(DFEjTMTRGCHn   [i]))["FT"             ];
        return;
    }
    if ((0x0440 <= addr) && (addr <= (0x0440)+(4*2)) && ((addr-0x0440)%4 == 0)) {
        uint i = (addr - 0x0440)/4;
        DFEjCPOFSTn_DFEjCPOFSTn            [i] = (*(DFEjCPOFSTn    [i]))["DFEjCPOFSTn"    ];
        return;
    }
    if (addr == 0x0700) {
        DFEjPH23CCTL0_CHS                   = (*DFEjPH23CCTL0  )["CHS"            ];
        DFEjPH23CCTL0_PFMT                  = (*DFEjPH23CCTL0  )["PFMT"           ];
        DFEjPH23CCTL0_PEN                   = (*DFEjPH23CCTL0  )["PEN"            ];
        return;
    }
    if (addr == 0x0704) {
        DFEjPH2CTL0_OFSL                    = (*DFEjPH2CTL0    )["OFSL"           ];
        DFEjPH2CTL0_PH2SLB2                 = (*DFEjPH2CTL0    )["PH2SLB2"        ];
        DFEjPH2CTL0_PHPS                    = (*DFEjPH2CTL0    )["PHPS"           ];
        DFEjPH2CTL0_CN2SLB2                 = (*DFEjPH2CTL0    )["CN2SLB2"        ];
        return;
    }
    if (addr == 0x0708) {
        DFEjPH3CTL0_OFSL                    = (*DFEjPH3CTL0    )["OFSL"           ];
        DFEjPH3CTL0_PH3SLB2                 = (*DFEjPH3CTL0    )["PH3SLB2"        ];
        DFEjPH3CTL0_PHPS                    = (*DFEjPH3CTL0    )["PHPS"           ];
        DFEjPH3CTL0_CN3SLB2                 = (*DFEjPH3CTL0    )["CN3SLB2"        ];
        return;
    }
    if (addr == 0x0780) {
        DFEjPH20_DFEjPH20                   = (*DFEjPH20       )["DFEjPH20"       ];
        return;
    }
    if (addr == 0x0784) {
        DFEjPH30_DFEjPH30                   = (*DFEjPH30       )["DFEjPH30"       ];
        return;
    }
    if (addr == 0x07E0) {
        DFEjPH2IND0_PH2IOW                  = (*DFEjPH2IND0    )["PH2IOW"         ];
        DFEjPH2IND0_PH2IOF                  = (*DFEjPH2IND0    )["PH2IOF"         ];
        DFEjPH2IND0_PH2IND                  = (*DFEjPH2IND0    )["PH2IND"         ];
        return;
    }
    if (addr == 0x07E4) {
        DFEjPH3IND0_PH3IOW                  = (*DFEjPH3IND0    )["PH3IOW"         ];
        DFEjPH3IND0_PH3IOF                  = (*DFEjPH3IND0    )["PH3IOF"         ];
        DFEjPH3IND0_PH3IND                  = (*DFEjPH3IND0    )["PH3IND"         ];
        return;
    }
    if ((0x0840 <= addr) && (addr <= (0x0840)+(4*2)) && ((addr-0x0840)%4 == 0)) {
        uint i = (addr - 0x0840)/4;
        DFEjSUBCTLCHn_CATAG                [i] = (*(DFEjSUBCTLCHn  [i]))["CATAG"          ];
        DFEjSUBCTLCHn_CAEN                 [i] = (*(DFEjSUBCTLCHn  [i]))["CAEN"           ];
        DFEjSUBCTLCHn_MINCH                [i] = (*(DFEjSUBCTLCHn  [i]))["MINCH"          ];
        DFEjSUBCTLCHn_SUBCH                [i] = (*(DFEjSUBCTLCHn  [i]))["SUBCH"          ];
        DFEjSUBCTLCHn_SFMT                 [i] = (*(DFEjSUBCTLCHn  [i]))["SFMT"           ];
        DFEjSUBCTLCHn_SIEE                 [i] = (*(DFEjSUBCTLCHn  [i]))["SIEE"           ];
        DFEjSUBCTLCHn_SIEO                 [i] = (*(DFEjSUBCTLCHn  [i]))["SIEO"           ];
        DFEjSUBCTLCHn_SEN                  [i] = (*(DFEjSUBCTLCHn  [i]))["SEN"            ];
        return;
    }
    if ((0x0860 <= addr) && (addr <= (0x0860)+(4*2)) && ((addr-0x0860)%4 == 0)) {
        uint i = (addr - 0x0860)/4;
        DFEjSUBDOCHn_DFEjSUBDOCHn          [i] = (*(DFEjSUBDOCHn   [i]))["DFEjSUBDOCHn"   ];
        return;
    }
    if ((0x0880 <= addr) && (addr <= (0x0880)+(4*2)) && ((addr-0x0880)%4 == 0)) {
        uint i = (addr - 0x0880)/4;
        DFEjSUBSTCHn_SDOEN                 [i] = (*(DFEjSUBSTCHn   [i]))["SDOEN"          ];
        DFEjSUBSTCHn_MINF                  [i] = (*(DFEjSUBSTCHn   [i]))["MINF"           ];
        DFEjSUBSTCHn_SUBF                  [i] = (*(DFEjSUBSTCHn   [i]))["SUBF"           ];
        DFEjSUBSTCHn_SCER                  [i] = (*(DFEjSUBSTCHn   [i]))["SCER"           ];
        DFEjSUBSTCHn_SGER                  [i] = (*(DFEjSUBSTCHn   [i]))["SGER"           ];
        DFEjSUBSTCHn_SDOOW                 [i] = (*(DFEjSUBSTCHn   [i]))["SDOOW"          ];
        return;
    }
    if ((0x08A0 <= addr) && (addr <= (0x08A0)+(4*2)) && ((addr-0x08A0)%4 == 0)) {
        uint i = (addr - 0x08A0)/4;
        DFEjSUBCLRSTCHn_CLRSDOEN           [i] = (*(DFEjSUBCLRSTCHn[i]))["CLRSDOEN"       ];
        DFEjSUBCLRSTCHn_CLRSCER            [i] = (*(DFEjSUBCLRSTCHn[i]))["CLRSCER"        ];
        DFEjSUBCLRSTCHn_CLRSGER            [i] = (*(DFEjSUBCLRSTCHn[i]))["CLRSGER"        ];
        DFEjSUBCLRSTCHn_CLRSDOOW           [i] = (*(DFEjSUBCLRSTCHn[i]))["CLRSDOOW"       ];
        return;
    }
    if ((0x08C0 <= addr) && (addr <= (0x08C0)+(4*2)) && ((addr-0x08C0)%4 == 0)) {
        uint i = (addr - 0x08C0)/4;
        DFEjSUBERMCHn_MSKSCER              [i] = (*(DFEjSUBERMCHn  [i]))["MSKSCER"        ];
        DFEjSUBERMCHn_MSKSGER              [i] = (*(DFEjSUBERMCHn  [i]))["MSKSGER"        ];
        DFEjSUBERMCHn_MSKSDOOW             [i] = (*(DFEjSUBERMCHn  [i]))["MSKSDOOW"       ];
        return;
    }
    if ((0x08E0 <= addr) && (addr <= (0x08E0)+(4*2)) && ((addr-0x08E0)%4 == 0)) {
        uint i = (addr - 0x08E0)/4;
        DFEjSUBTRGCHn_SBFE                 [i] = (*(DFEjSUBTRGCHn  [i]))["SBFE"           ];
        DFEjSUBTRGCHn_SBE                  [i] = (*(DFEjSUBTRGCHn  [i]))["SBE"            ];
        DFEjSUBTRGCHn_SBT                  [i] = (*(DFEjSUBTRGCHn  [i]))["SBT"            ];
        return;
    }
    if ((0x0900 <= addr) && (addr <= (0x0900)+(4*2)) && ((addr-0x0900)%4 == 0)) {
        uint i = (addr - 0x0900)/4;
        DFEjSUBTRHCHn_SITS                 [i] = (*(DFEjSUBTRHCHn  [i]))["SITS"           ];
        DFEjSUBTRHCHn_SETS                 [i] = (*(DFEjSUBTRHCHn  [i]))["SETS"           ];
        return;
    }
    if (addr == 0x0920) {
        DFEjSUBTRG0_SUBTMTRG2               = (*DFEjSUBTRG0    )["SUBTMTRG2"      ];
        DFEjSUBTRG0_SUBTMTRG1               = (*DFEjSUBTRG0    )["SUBTMTRG1"      ];
        DFEjSUBTRG0_SUBTMTRG0               = (*DFEjSUBTRG0    )["SUBTMTRG0"      ];
        return;
    }
    if ((0x0940 <= addr) && (addr <= (0x0940)+(4*2)) && ((addr-0x0940)%4 == 0)) {
        uint i = (addr - 0x0940)/4;
        DFEjCAPCTLCHn_CAPCH                [i] = (*(DFEjCAPCTLCHn  [i]))["CAPCH"          ];
        DFEjCAPCTLCHn_CIEE                 [i] = (*(DFEjCAPCTLCHn  [i]))["CIEE"           ];
        DFEjCAPCTLCHn_CEN                  [i] = (*(DFEjCAPCTLCHn  [i]))["CEN"            ];
        return;
    }
    if ((0x0960 <= addr) && (addr <= (0x0960)+(4*2)) && ((addr-0x0960)%4 == 0)) {
        uint i = (addr - 0x0960)/4;
        DFEjCAPDOCHn_DFEjCAPDOCHn          [i] = (*(DFEjCAPDOCHn   [i]))["DFEjCAPDOCHn"   ];
        return;
    }
    if ((0x0980 <= addr) && (addr <= (0x0980)+(4*2)) && ((addr-0x0980)%4 == 0)) {
        uint i = (addr - 0x0980)/4;
        DFEjCAPSTCHn_CDOEN                 [i] = (*(DFEjCAPSTCHn   [i]))["CDOEN"          ];
        DFEjCAPSTCHn_CDOOW                 [i] = (*(DFEjCAPSTCHn   [i]))["CDOOW"          ];
        return;
    }
    if ((0x09A0 <= addr) && (addr <= (0x09A0)+(4*2)) && ((addr-0x09A0)%4 == 0)) {
        uint i = (addr - 0x09A0)/4;
        DFEjCAPCLRSTCHn_CLRCDOEN           [i] = (*(DFEjCAPCLRSTCHn[i]))["CLRCDOEN"       ];
        DFEjCAPCLRSTCHn_CLRCDOOW           [i] = (*(DFEjCAPCLRSTCHn[i]))["CLRCDOOW"       ];
        return;
    }
    if ((0x09C0 <= addr) && (addr <= (0x09C0)+(4*2)) && ((addr-0x09C0)%4 == 0)) {
        uint i = (addr - 0x09C0)/4;
        DFEjCAPERMCHn_MSKCDOOW             [i] = (*(DFEjCAPERMCHn  [i]))["MSKCDOOW"       ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cdfe_regif::UpdateRegVal(cuint addr)
{
    if ((0x0000 <= addr) && (addr <= (0x0000)+(4*11)) && ((addr-0x0000)%4 == 0)) {
        uint i = (addr - 0x0000)/4;
        (*(DFEjCTLACHn    [i]))["CATAG"          ] = DFEjCTLACHn_CATAG[i];
        (*(DFEjCTLACHn    [i]))["CAEN"           ] = DFEjCTLACHn_CAEN[i];
        (*(DFEjCTLACHn    [i]))["TAG"            ] = DFEjCTLACHn_TAG[i];
        (*(DFEjCTLACHn    [i]))["CMD"            ] = DFEjCTLACHn_CMD[i];
        (*(DFEjCTLACHn    [i]))["FMT"            ] = DFEjCTLACHn_FMT[i];
        (*(DFEjCTLACHn    [i]))["IEP"            ] = DFEjCTLACHn_IEP[i];
        (*(DFEjCTLACHn    [i]))["IEE"            ] = DFEjCTLACHn_IEE[i];
        (*(DFEjCTLACHn    [i]))["IEC"            ] = DFEjCTLACHn_IEC[i];
        (*(DFEjCTLACHn    [i]))["IEO"            ] = DFEjCTLACHn_IEO[i];
        (*(DFEjCTLACHn    [i]))["CNSL"           ] = DFEjCTLACHn_CNSL[i];
        (*(DFEjCTLACHn    [i]))["CNSLE"          ] = DFEjCTLACHn_CNSLE[i];
        (*(DFEjCTLACHn    [i]))["AIME"           ] = DFEjCTLACHn_AIME[i];
        (*(DFEjCTLACHn    [i]))["EN"             ] = DFEjCTLACHn_EN[i];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(4*11)) && ((addr-0x0040)%4 == 0)) {
        uint i = (addr - 0x0040)/4;
        (*(DFEjCTLBCHn    [i]))["OFSL"           ] = DFEjCTLBCHn_OFSL[i];
        (*(DFEjCTLBCHn    [i]))["DISB"           ] = DFEjCTLBCHn_DISB[i];
        (*(DFEjCTLBCHn    [i]))["PHPS"           ] = DFEjCTLBCHn_PHPS[i];
        (*(DFEjCTLBCHn    [i]))["CPCS"           ] = DFEjCTLBCHn_CPCS[i];
        (*(DFEjCTLBCHn    [i]))["PHSLB2"         ] = DFEjCTLBCHn_PHSLB2[i];
        (*(DFEjCTLBCHn    [i]))["DISA"           ] = DFEjCTLBCHn_DISA[i];
        (*(DFEjCTLBCHn    [i]))["PRCSC"          ] = DFEjCTLBCHn_PRCSC[i];
        (*(DFEjCTLBCHn    [i]))["SELB2"          ] = DFEjCTLBCHn_SELB2[i];
        (*(DFEjCTLBCHn    [i]))["SELB1"          ] = DFEjCTLBCHn_SELB1[i];
        (*(DFEjCTLBCHn    [i]))["PRCSB"          ] = DFEjCTLBCHn_PRCSB[i];
        (*(DFEjCTLBCHn    [i]))["HOFS"           ] = DFEjCTLBCHn_HOFS[i];
        (*(DFEjCTLBCHn    [i]))["PICS"           ] = DFEjCTLBCHn_PICS[i];
        (*(DFEjCTLBCHn    [i]))["SELA"           ] = DFEjCTLBCHn_SELA[i];
        (*(DFEjCTLBCHn    [i]))["PFMT"           ] = DFEjCTLBCHn_PFMT[i];
        (*(DFEjCTLBCHn    [i]))["ABS"            ] = DFEjCTLBCHn_ABS[i];
        (*(DFEjCTLBCHn    [i]))["PRCSA"          ] = DFEjCTLBCHn_PRCSA[i];
        return;
    }
    if ((0x0080 <= addr) && (addr <= (0x0080)+(4*11)) && ((addr-0x0080)%4 == 0)) {
        uint i = (addr - 0x0080)/4;
        (*(DFEjDOCHn      [i]))["DFEjDOCHn"      ] = DFEjDOCHn_DFEjDOCHn[i];
        return;
    }
    if ((0x00C0 <= addr) && (addr <= (0x00C0)+(4*11)) && ((addr-0x00C0)%4 == 0)) {
        uint i = (addr - 0x00C0)/4;
        (*(DFEjPHCHn      [i]))["DFEjPHCHn"      ] = DFEjPHCHn_DFEjPHCHn[i];
        return;
    }
    if ((0x0100 <= addr) && (addr <= (0x0100)+(4*11)) && ((addr-0x0100)%4 == 0)) {
        uint i = (addr - 0x0100)/4;
        (*(DFEjPHINDCHn   [i]))["PHIOW"          ] = DFEjPHINDCHn_PHIOW[i];
        (*(DFEjPHINDCHn   [i]))["PHIOF"          ] = DFEjPHINDCHn_PHIOF[i];
        (*(DFEjPHINDCHn   [i]))["PHIND"          ] = DFEjPHINDCHn_PHIND[i];
        return;
    }
    if ((0x0140 <= addr) && (addr <= (0x0140)+(4*11)) && ((addr-0x0140)%4 == 0)) {
        uint i = (addr - 0x0140)/4;
        (*(DFEjSTCHn      [i]))["PH23ST"         ] = DFEjSTCHn_PH23ST[i];
        (*(DFEjSTCHn      [i]))["VALID"          ] = DFEjSTCHn_VALID[i];
        (*(DFEjSTCHn      [i]))["PHE"            ] = DFEjSTCHn_PHE[i];
        (*(DFEjSTCHn      [i]))["CND"            ] = DFEjSTCHn_CND[i];
        (*(DFEjSTCHn      [i]))["DOEN"           ] = DFEjSTCHn_DOEN[i];
        (*(DFEjSTCHn      [i]))["CER"            ] = DFEjSTCHn_CER[i];
        (*(DFEjSTCHn      [i]))["AER"            ] = DFEjSTCHn_AER[i];
        (*(DFEjSTCHn      [i]))["MER"            ] = DFEjSTCHn_MER[i];
        (*(DFEjSTCHn      [i]))["GER"            ] = DFEjSTCHn_GER[i];
        (*(DFEjSTCHn      [i]))["DOOW"           ] = DFEjSTCHn_DOOW[i];
        (*(DFEjSTCHn      [i]))["DIOW"           ] = DFEjSTCHn_DIOW[i];
        return;
    }
    if ((0x0180 <= addr) && (addr <= (0x0180)+(4*11)) && ((addr-0x0180)%4 == 0)) {
        uint i = (addr - 0x0180)/4;
        (*(DFEjCLRSTCHn   [i]))["CLRPHIOW"       ] = DFEjCLRSTCHn_CLRPHIOW[i];
        (*(DFEjCLRSTCHn   [i]))["CLRPHE"         ] = DFEjCLRSTCHn_CLRPHE[i];
        (*(DFEjCLRSTCHn   [i]))["CLRCND"         ] = DFEjCLRSTCHn_CLRCND[i];
        (*(DFEjCLRSTCHn   [i]))["CLRDOEN"        ] = DFEjCLRSTCHn_CLRDOEN[i];
        (*(DFEjCLRSTCHn   [i]))["CLRCER"         ] = DFEjCLRSTCHn_CLRCER[i];
        (*(DFEjCLRSTCHn   [i]))["CLRAER"         ] = DFEjCLRSTCHn_CLRAER[i];
        (*(DFEjCLRSTCHn   [i]))["CLRMER"         ] = DFEjCLRSTCHn_CLRMER[i];
        (*(DFEjCLRSTCHn   [i]))["CLRGER"         ] = DFEjCLRSTCHn_CLRGER[i];
        (*(DFEjCLRSTCHn   [i]))["CLRDOOW"        ] = DFEjCLRSTCHn_CLRDOOW[i];
        (*(DFEjCLRSTCHn   [i]))["CLRDIOW"        ] = DFEjCLRSTCHn_CLRDIOW[i];
        return;
    }
    if ((0x01C0 <= addr) && (addr <= (0x01C0)+(4*11)) && ((addr-0x01C0)%4 == 0)) {
        uint i = (addr - 0x01C0)/4;
        (*(DFEjERMCHn     [i]))["MSKCER"         ] = DFEjERMCHn_MSKCER[i];
        (*(DFEjERMCHn     [i]))["MSKAER"         ] = DFEjERMCHn_MSKAER[i];
        (*(DFEjERMCHn     [i]))["MSKMER"         ] = DFEjERMCHn_MSKMER[i];
        (*(DFEjERMCHn     [i]))["MSKGER"         ] = DFEjERMCHn_MSKGER[i];
        (*(DFEjERMCHn     [i]))["MSKDOOW"        ] = DFEjERMCHn_MSKDOOW[i];
        (*(DFEjERMCHn     [i]))["MSKDIOW"        ] = DFEjERMCHn_MSKDIOW[i];
        return;
    }
    if ((0x0200 <= addr) && (addr <= (0x0200)+(4*11)) && ((addr-0x0200)%4 == 0)) {
        uint i = (addr - 0x0200)/4;
        (*(DFEjTRGCHn     [i]))["PMFE"           ] = DFEjTRGCHn_PMFE[i];
        (*(DFEjTRGCHn     [i]))["PME"            ] = DFEjTRGCHn_PME[i];
        (*(DFEjTRGCHn     [i]))["PFE"            ] = DFEjTRGCHn_PFE[i];
        (*(DFEjTRGCHn     [i]))["AFE"            ] = DFEjTRGCHn_AFE[i];
        (*(DFEjTRGCHn     [i]))["PE"             ] = DFEjTRGCHn_PE[i];
        (*(DFEjTRGCHn     [i]))["PT"             ] = DFEjTRGCHn_PT[i];
        (*(DFEjTRGCHn     [i]))["AE"             ] = DFEjTRGCHn_AE[i];
        (*(DFEjTRGCHn     [i]))["AT"             ] = DFEjTRGCHn_AT[i];
        (*(DFEjTRGCHn     [i]))["FE"             ] = DFEjTRGCHn_FE[i];
        (*(DFEjTRGCHn     [i]))["FT"             ] = DFEjTRGCHn_FT[i];
        return;
    }
    if ((0x0240 <= addr) && (addr <= (0x0240)+(4*11)) && ((addr-0x0240)%4 == 0)) {
        uint i = (addr - 0x0240)/4;
        (*(DFEjTRHCHn     [i]))["PMITS"          ] = DFEjTRHCHn_PMITS[i];
        (*(DFEjTRHCHn     [i]))["PMETS"          ] = DFEjTRHCHn_PMETS[i];
        (*(DFEjTRHCHn     [i]))["PITS"           ] = DFEjTRHCHn_PITS[i];
        (*(DFEjTRHCHn     [i]))["PETS"           ] = DFEjTRHCHn_PETS[i];
        (*(DFEjTRHCHn     [i]))["MITS"           ] = DFEjTRHCHn_MITS[i];
        (*(DFEjTRHCHn     [i]))["METS"           ] = DFEjTRHCHn_METS[i];
        (*(DFEjTRHCHn     [i]))["FITS"           ] = DFEjTRHCHn_FITS[i];
        return;
    }
    if (addr == 0x0280) {
        (*DFEjCPA        )["DFEjCPA"        ] = DFEjCPA_DFEjCPA;
        return;
    }
    if (addr == 0x0284) {
        (*DFEjCPB        )["DFEjCPB"        ] = DFEjCPB_DFEjCPB;
        return;
    }
    if (addr == 0x0288) {
        (*DFEjCPC        )["DFEjCPC"        ] = DFEjCPC_DFEjCPC;
        return;
    }
    if (addr == 0x028C) {
        (*DFEjCPD        )["DFEjCPD"        ] = DFEjCPD_DFEjCPD;
        return;
    }
    if (addr == 0x0290) {
        (*DFEjPHIA       )["DFEjPHIA"       ] = DFEjPHIA_DFEjPHIA;
        return;
    }
    if (addr == 0x0294) {
        (*DFEjPHIB       )["DFEjPHIB"       ] = DFEjPHIB_DFEjPHIB;
        return;
    }
    if (addr == 0x0298) {
        (*DFEjPHIC       )["DFEjPHIC"       ] = DFEjPHIC_DFEjPHIC;
        return;
    }
    if (addr == 0x029C) {
        (*DFEjPHID       )["DFEjPHID"       ] = DFEjPHID_DFEjPHID;
        return;
    }
    if (addr == 0x02A8) {
        (*DFEjPMITRG0    )["PMITMTRG3"      ] = DFEjPMITRG0_PMITMTRG3;
        (*DFEjPMITRG0    )["PMITMTRG2"      ] = DFEjPMITRG0_PMITMTRG2;
        (*DFEjPMITRG0    )["PMITMTRG1"      ] = DFEjPMITRG0_PMITMTRG1;
        (*DFEjPMITRG0    )["PMITMTRG0"      ] = DFEjPMITRG0_PMITMTRG0;
        return;
    }
    if (addr == 0x02AC) {
        (*DFEjPMITRG1    )["PMITMTRG5"      ] = DFEjPMITRG1_PMITMTRG5;
        (*DFEjPMITRG1    )["PMITMTRG4"      ] = DFEjPMITRG1_PMITMTRG4;
        return;
    }
    if (addr == 0x02B0) {
        (*DFEjACA        )["AC"             ] = DFEjACA_AC;
        return;
    }
    if (addr == 0x02B4) {
        (*DFEjACB        )["AC"             ] = DFEjACB_AC;
        return;
    }
    if (addr == 0x02B8) {
        (*DFEjACC        )["AC"             ] = DFEjACC_AC;
        return;
    }
    if (addr == 0x02BC) {
        (*DFEjACD        )["AC"             ] = DFEjACD_AC;
        return;
    }
    if (addr == 0x02C0) {
        (*DFEjDI         )["TAG"            ] = DFEjDI_TAG;
        (*DFEjDI         )["DI"             ] = DFEjDI_DI;
        return;
    }
    if (addr == 0x02C4) {
        (*DFEjTRG        )["TRGA"           ] = DFEjTRG_TRGA;
        return;
    }
    if (addr == 0x02C8) {
        (*DFEjEST        )["CP2S"           ] = DFEjEST_CP2S;
        (*DFEjEST        )["CP1S"           ] = DFEjEST_CP1S;
        (*DFEjEST        )["CP0S"           ] = DFEjEST_CP0S;
        (*DFEjEST        )["SB2S"           ] = DFEjEST_SB2S;
        (*DFEjEST        )["SB1S"           ] = DFEjEST_SB1S;
        (*DFEjEST        )["SB0S"           ] = DFEjEST_SB0S;
        return;
    }
    if (addr == 0x02CC) {
		    if (mNumChan == 12) {
		        (*DFEjST         )["CH11S"          ] = DFEjST_CH11S;
            (*DFEjST         )["CH10S"          ] = DFEjST_CH10S;
        }
	      if (mNumChan >= 10) {
		        (*DFEjST         )["CH9S"           ] = DFEjST_CH9S;
            (*DFEjST         )["CH8S"           ] = DFEjST_CH8S;
	      }
	      if (mNumChan >= 8) {
		        (*DFEjST         )["CH7S"           ] = DFEjST_CH7S;
            (*DFEjST         )["CH6S"           ] = DFEjST_CH6S;
	      }
	      if (mNumChan >= 6) {
		        (*DFEjST         )["CH5S"           ] = DFEjST_CH5S;
            (*DFEjST         )["CH4S"           ] = DFEjST_CH4S;
	      }
	      if (mNumChan >= 4) {
		        (*DFEjST         )["CH3S"           ] = DFEjST_CH3S;
            (*DFEjST         )["CH2S"           ] = DFEjST_CH2S;
	      }
        if (mNumChan >= 2) {
		        (*DFEjST         )["CH1S"           ] = DFEjST_CH1S;
            (*DFEjST         )["CH0S"           ] = DFEjST_CH0S;
	      }
        return;
    }
    if (addr == 0x02D4) {
        (*DFEjPITRG1     )["PITMTRG5"       ] = DFEjPITRG1_PITMTRG5;
        (*DFEjPITRG1     )["PITMTRG4"       ] = DFEjPITRG1_PITMTRG4;
        return;
    }
    if (addr == 0x02D8) {
        (*DFEjMITRG1     )["MITMTRG5"       ] = DFEjMITRG1_MITMTRG5;
        (*DFEjMITRG1     )["MITMTRG4"       ] = DFEjMITRG1_MITMTRG4;
        return;
    }
    if (addr == 0x02DC) {
        (*DFEjFITRG1     )["FITMTRG5"       ] = DFEjFITRG1_FITMTRG5;
        (*DFEjFITRG1     )["FITMTRG4"       ] = DFEjFITRG1_FITMTRG4;
        return;
    }
    if (addr == 0x0300) {
        (*DFEjPITRG      )["PITMTRG3"       ] = DFEjPITRG_PITMTRG3;
        (*DFEjPITRG      )["PITMTRG2"       ] = DFEjPITRG_PITMTRG2;
        (*DFEjPITRG      )["PITMTRG1"       ] = DFEjPITRG_PITMTRG1;
        (*DFEjPITRG      )["PITMTRG0"       ] = DFEjPITRG_PITMTRG0;
        return;
    }
    if (addr == 0x0304) {
        (*DFEjMITRG      )["MITMTRG3"       ] = DFEjMITRG_MITMTRG3;
        (*DFEjMITRG      )["MITMTRG2"       ] = DFEjMITRG_MITMTRG2;
        (*DFEjMITRG      )["MITMTRG1"       ] = DFEjMITRG_MITMTRG1;
        (*DFEjMITRG      )["MITMTRG0"       ] = DFEjMITRG_MITMTRG0;
        return;
    }
    if (addr == 0x0308) {
        (*DFEjFITRG      )["FITMTRG3"       ] = DFEjFITRG_FITMTRG3;
        (*DFEjFITRG      )["FITMTRG2"       ] = DFEjFITRG_FITMTRG2;
        (*DFEjFITRG      )["FITMTRG1"       ] = DFEjFITRG_FITMTRG1;
        (*DFEjFITRG      )["FITMTRG0"       ] = DFEjFITRG_FITMTRG0;
        return;
    }
    if ((0x0310 <= addr) && (addr <= (0x0310)+(4*3)) && ((addr-0x0310)%4 == 0)) {
        uint i = (addr - 0x0310)/4;
        (*(DFEjPHUPDCn    [i]))["PHUPDCH"        ] = DFEjPHUPDCn_PHUPDCH[i];
        (*(DFEjPHUPDCn    [i]))["PH23SL"         ] = DFEjPHUPDCn_PH23SL[i];
        (*(DFEjPHUPDCn    [i]))["PH23E"          ] = DFEjPHUPDCn_PH23E[i];
        (*(DFEjPHUPDCn    [i]))["OEPHUPD"        ] = DFEjPHUPDCn_OEPHUPD[i];
        return;
    }
    if (addr == 0x0320) {
        (*DFEjHOLCH0     )["DFEjHOLCH0"     ] = DFEjHOLCH0_DFEjHOLCH0;
        return;
    }
    if (addr == 0x0324) {
        (*DFEjHOHCH0     )["GURD"           ] = DFEjHOHCH0_GURD;
        return;
    }
    if (addr == 0x0328) {
        (*DFEjHOLCH2     )["DFEjHOLCH2"     ] = DFEjHOLCH2_DFEjHOLCH2;
        return;
    }
    if (addr == 0x032C) {
        (*DFEjHOHCH2     )["GURD"           ] = DFEjHOHCH2_GURD;
        return;
    }
    if (addr == 0x0330) {
        (*DFEjHOLCH4     )["DFEjHOLCH4"     ] = DFEjHOLCH4_DFEjHOLCH4;
        return;
    }
    if (addr == 0x0334) {
        (*DFEjHOHCH4     )["GURD"           ] = DFEjHOHCH4_GURD;
        return;
    }
    if (addr == 0x0338) {
        (*DFEjHOLCH6     )["DFEjHOLCH6"     ] = DFEjHOLCH6_DFEjHOLCH6;
        return;
    }
    if (addr == 0x033C) {
        (*DFEjHOHCH6     )["GURD"           ] = DFEjHOHCH6_GURD;
        return;
    }
    if (addr == 0x0340) {
        (*DFEjHOLCH8     )["DFEjHOLCH8"     ] = DFEjHOLCH8_DFEjHOLCH8;
        return;
    }
    if (addr == 0x0344) {
        (*DFEjHOHCH8     )["GURD"           ] = DFEjHOHCH8_GURD;
        return;
    }
    if (addr == 0x0348) {
        (*DFEjHOLCH10    )["DFEjHOLCH10"    ] = DFEjHOLCH10_DFEjHOLCH10;
        return;
    }
    if (addr == 0x034C) {
        (*DFEjHOHCH10    )["GURD"           ] = DFEjHOHCH10_GURD;
        return;
    }
    if (addr == 0x0360) {
        (*DFEjHOLMCH0    )["DFEjHOLMCH0"    ] = DFEjHOLMCH0_DFEjHOLMCH0;
        return;
    }
    if (addr == 0x0364) {
        (*DFEjHOLMCH2    )["DFEjHOLMCH2"    ] = DFEjHOLMCH2_DFEjHOLMCH2;
        return;
    }
    if (addr == 0x0368) {
        (*DFEjHOLMCH4    )["DFEjHOLMCH4"    ] = DFEjHOLMCH4_DFEjHOLMCH4;
        return;
    }
    if (addr == 0x036C) {
        (*DFEjHOLMCH6    )["DFEjHOLMCH6"    ] = DFEjHOLMCH6_DFEjHOLMCH6;
        return;
    }
    if (addr == 0x0370) {
        (*DFEjHOLMCH8    )["DFEjHOLMCH8"    ] = DFEjHOLMCH8_DFEjHOLMCH8;
        return;
    }
    if (addr == 0x0374) {
        (*DFEjHOLMCH10   )["DFEjHOLMCH10"   ] = DFEjHOLMCH10_DFEjHOLMCH10;
        return;
    }
    if ((0x0380 <= addr) && (addr <= (0x0380)+(4*11)) && ((addr-0x0380)%4 == 0)) {
        uint i = (addr - 0x0380)/4;
        (*(DFEjGAINCHn    [i]))["GAIN3"          ] = DFEjGAINCHn_GAIN3[i];
        (*(DFEjGAINCHn    [i]))["GAIN2"          ] = DFEjGAINCHn_GAIN2[i];
        return;
    }
    if ((0x03C0 <= addr) && (addr <= (0x03C0)+(4*11)) && ((addr-0x03C0)%4 == 0)) {
        uint i = (addr - 0x03C0)/4;
        (*(DFEjTMTRGCHn   [i]))["PMT"            ] = DFEjTMTRGCHn_PMT[i];
        (*(DFEjTMTRGCHn   [i]))["PT"             ] = DFEjTMTRGCHn_PT[i];
        (*(DFEjTMTRGCHn   [i]))["AT"             ] = DFEjTMTRGCHn_AT[i];
        (*(DFEjTMTRGCHn   [i]))["FT"             ] = DFEjTMTRGCHn_FT[i];
        return;
    }
    if ((0x0440 <= addr) && (addr <= (0x0440)+(4*2)) && ((addr-0x0440)%4 == 0)) {
        uint i = (addr - 0x0440)/4;
        (*(DFEjCPOFSTn    [i]))["DFEjCPOFSTn"    ] = DFEjCPOFSTn_DFEjCPOFSTn[i];
        return;
    }
    if (addr == 0x0700) {
        (*DFEjPH23CCTL0  )["CHS"            ] = DFEjPH23CCTL0_CHS;
        (*DFEjPH23CCTL0  )["PFMT"           ] = DFEjPH23CCTL0_PFMT;
        (*DFEjPH23CCTL0  )["PEN"            ] = DFEjPH23CCTL0_PEN;
        return;
    }
    if (addr == 0x0704) {
        (*DFEjPH2CTL0    )["OFSL"           ] = DFEjPH2CTL0_OFSL;
        (*DFEjPH2CTL0    )["PH2SLB2"        ] = DFEjPH2CTL0_PH2SLB2;
        (*DFEjPH2CTL0    )["PHPS"           ] = DFEjPH2CTL0_PHPS;
        (*DFEjPH2CTL0    )["CN2SLB2"        ] = DFEjPH2CTL0_CN2SLB2;
        return;
    }
    if (addr == 0x0708) {
        (*DFEjPH3CTL0    )["OFSL"           ] = DFEjPH3CTL0_OFSL;
        (*DFEjPH3CTL0    )["PH3SLB2"        ] = DFEjPH3CTL0_PH3SLB2;
        (*DFEjPH3CTL0    )["PHPS"           ] = DFEjPH3CTL0_PHPS;
        (*DFEjPH3CTL0    )["CN3SLB2"        ] = DFEjPH3CTL0_CN3SLB2;
        return;
    }
    if (addr == 0x0780) {
        (*DFEjPH20       )["DFEjPH20"       ] = DFEjPH20_DFEjPH20;
        return;
    }
    if (addr == 0x0784) {
        (*DFEjPH30       )["DFEjPH30"       ] = DFEjPH30_DFEjPH30;
        return;
    }
    if (addr == 0x07E0) {
        (*DFEjPH2IND0    )["PH2IOW"         ] = DFEjPH2IND0_PH2IOW;
        (*DFEjPH2IND0    )["PH2IOF"         ] = DFEjPH2IND0_PH2IOF;
        (*DFEjPH2IND0    )["PH2IND"         ] = DFEjPH2IND0_PH2IND;
        return;
    }
    if (addr == 0x07E4) {
        (*DFEjPH3IND0    )["PH3IOW"         ] = DFEjPH3IND0_PH3IOW;
        (*DFEjPH3IND0    )["PH3IOF"         ] = DFEjPH3IND0_PH3IOF;
        (*DFEjPH3IND0    )["PH3IND"         ] = DFEjPH3IND0_PH3IND;
        return;
    }
    if ((0x0840 <= addr) && (addr <= (0x0840)+(4*2)) && ((addr-0x0840)%4 == 0)) {
        uint i = (addr - 0x0840)/4;
        (*(DFEjSUBCTLCHn  [i]))["CATAG"          ] = DFEjSUBCTLCHn_CATAG[i];
        (*(DFEjSUBCTLCHn  [i]))["CAEN"           ] = DFEjSUBCTLCHn_CAEN[i];
        (*(DFEjSUBCTLCHn  [i]))["MINCH"          ] = DFEjSUBCTLCHn_MINCH[i];
        (*(DFEjSUBCTLCHn  [i]))["SUBCH"          ] = DFEjSUBCTLCHn_SUBCH[i];
        (*(DFEjSUBCTLCHn  [i]))["SFMT"           ] = DFEjSUBCTLCHn_SFMT[i];
        (*(DFEjSUBCTLCHn  [i]))["SIEE"           ] = DFEjSUBCTLCHn_SIEE[i];
        (*(DFEjSUBCTLCHn  [i]))["SIEO"           ] = DFEjSUBCTLCHn_SIEO[i];
        (*(DFEjSUBCTLCHn  [i]))["SEN"            ] = DFEjSUBCTLCHn_SEN[i];
        return;
    }
    if ((0x0860 <= addr) && (addr <= (0x0860)+(4*2)) && ((addr-0x0860)%4 == 0)) {
        uint i = (addr - 0x0860)/4;
        (*(DFEjSUBDOCHn   [i]))["DFEjSUBDOCHn"   ] = DFEjSUBDOCHn_DFEjSUBDOCHn[i];
        return;
    }
    if ((0x0880 <= addr) && (addr <= (0x0880)+(4*2)) && ((addr-0x0880)%4 == 0)) {
        uint i = (addr - 0x0880)/4;
        (*(DFEjSUBSTCHn   [i]))["SDOEN"          ] = DFEjSUBSTCHn_SDOEN[i];
        (*(DFEjSUBSTCHn   [i]))["MINF"           ] = DFEjSUBSTCHn_MINF[i];
        (*(DFEjSUBSTCHn   [i]))["SUBF"           ] = DFEjSUBSTCHn_SUBF[i];
        (*(DFEjSUBSTCHn   [i]))["SCER"           ] = DFEjSUBSTCHn_SCER[i];
        (*(DFEjSUBSTCHn   [i]))["SGER"           ] = DFEjSUBSTCHn_SGER[i];
        (*(DFEjSUBSTCHn   [i]))["SDOOW"          ] = DFEjSUBSTCHn_SDOOW[i];
        return;
    }
    if ((0x08A0 <= addr) && (addr <= (0x08A0)+(4*2)) && ((addr-0x08A0)%4 == 0)) {
        uint i = (addr - 0x08A0)/4;
        (*(DFEjSUBCLRSTCHn[i]))["CLRSDOEN"       ] = DFEjSUBCLRSTCHn_CLRSDOEN[i];
        (*(DFEjSUBCLRSTCHn[i]))["CLRSCER"        ] = DFEjSUBCLRSTCHn_CLRSCER[i];
        (*(DFEjSUBCLRSTCHn[i]))["CLRSGER"        ] = DFEjSUBCLRSTCHn_CLRSGER[i];
        (*(DFEjSUBCLRSTCHn[i]))["CLRSDOOW"       ] = DFEjSUBCLRSTCHn_CLRSDOOW[i];
        return;
    }
    if ((0x08C0 <= addr) && (addr <= (0x08C0)+(4*2)) && ((addr-0x08C0)%4 == 0)) {
        uint i = (addr - 0x08C0)/4;
        (*(DFEjSUBERMCHn  [i]))["MSKSCER"        ] = DFEjSUBERMCHn_MSKSCER[i];
        (*(DFEjSUBERMCHn  [i]))["MSKSGER"        ] = DFEjSUBERMCHn_MSKSGER[i];
        (*(DFEjSUBERMCHn  [i]))["MSKSDOOW"       ] = DFEjSUBERMCHn_MSKSDOOW[i];
        return;
    }
    if ((0x08E0 <= addr) && (addr <= (0x08E0)+(4*2)) && ((addr-0x08E0)%4 == 0)) {
        uint i = (addr - 0x08E0)/4;
        (*(DFEjSUBTRGCHn  [i]))["SBFE"           ] = DFEjSUBTRGCHn_SBFE[i];
        (*(DFEjSUBTRGCHn  [i]))["SBE"            ] = DFEjSUBTRGCHn_SBE[i];
        (*(DFEjSUBTRGCHn  [i]))["SBT"            ] = DFEjSUBTRGCHn_SBT[i];
        return;
    }
    if ((0x0900 <= addr) && (addr <= (0x0900)+(4*2)) && ((addr-0x0900)%4 == 0)) {
        uint i = (addr - 0x0900)/4;
        (*(DFEjSUBTRHCHn  [i]))["SITS"           ] = DFEjSUBTRHCHn_SITS[i];
        (*(DFEjSUBTRHCHn  [i]))["SETS"           ] = DFEjSUBTRHCHn_SETS[i];
        return;
    }
    if (addr == 0x0920) {
        (*DFEjSUBTRG0    )["SUBTMTRG2"      ] = DFEjSUBTRG0_SUBTMTRG2;
        (*DFEjSUBTRG0    )["SUBTMTRG1"      ] = DFEjSUBTRG0_SUBTMTRG1;
        (*DFEjSUBTRG0    )["SUBTMTRG0"      ] = DFEjSUBTRG0_SUBTMTRG0;
        return;
    }
    if ((0x0940 <= addr) && (addr <= (0x0940)+(4*2)) && ((addr-0x0940)%4 == 0)) {
        uint i = (addr - 0x0940)/4;
        (*(DFEjCAPCTLCHn  [i]))["CAPCH"          ] = DFEjCAPCTLCHn_CAPCH[i];
        (*(DFEjCAPCTLCHn  [i]))["CIEE"           ] = DFEjCAPCTLCHn_CIEE[i];
        (*(DFEjCAPCTLCHn  [i]))["CEN"            ] = DFEjCAPCTLCHn_CEN[i];
        return;
    }
    if ((0x0960 <= addr) && (addr <= (0x0960)+(4*2)) && ((addr-0x0960)%4 == 0)) {
        uint i = (addr - 0x0960)/4;
        (*(DFEjCAPDOCHn   [i]))["DFEjCAPDOCHn"   ] = DFEjCAPDOCHn_DFEjCAPDOCHn[i];
        return;
    }
    if ((0x0980 <= addr) && (addr <= (0x0980)+(4*2)) && ((addr-0x0980)%4 == 0)) {
        uint i = (addr - 0x0980)/4;
        (*(DFEjCAPSTCHn   [i]))["CDOEN"          ] = DFEjCAPSTCHn_CDOEN[i];
        (*(DFEjCAPSTCHn   [i]))["CDOOW"          ] = DFEjCAPSTCHn_CDOOW[i];
        return;
    }
    if ((0x09A0 <= addr) && (addr <= (0x09A0)+(4*2)) && ((addr-0x09A0)%4 == 0)) {
        uint i = (addr - 0x09A0)/4;
        (*(DFEjCAPCLRSTCHn[i]))["CLRCDOEN"       ] = DFEjCAPCLRSTCHn_CLRCDOEN[i];
        (*(DFEjCAPCLRSTCHn[i]))["CLRCDOOW"       ] = DFEjCAPCLRSTCHn_CLRCDOOW[i];
        return;
    }
    if ((0x09C0 <= addr) && (addr <= (0x09C0)+(4*2)) && ((addr-0x09C0)%4 == 0)) {
        uint i = (addr - 0x09C0)/4;
        (*(DFEjCAPERMCHn  [i]))["MSKCDOOW"       ] = DFEjCAPERMCHn_MSKCDOOW[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cdfe_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cdfe_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cdfe_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cdfe_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cdfe_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cdfe_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cdfe_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cdfe_regif::uint Cdfe_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cdfe_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cdfe_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cdfe_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cdfe_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cdfe_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cdfe_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cdfe_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
