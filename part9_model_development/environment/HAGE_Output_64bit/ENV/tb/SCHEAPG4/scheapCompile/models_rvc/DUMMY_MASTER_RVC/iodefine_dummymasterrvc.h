// -----------------------------------------------------------------------------
// $Id: copyright.txt,v 1.3 2014/10/13 03:21:49 sontran Exp $
//
// Copyright(c) 2010-2014 Renesas Electronics Corporation
// Copyright(c) 2010-2014 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//
// Input file : DummymasterRvc/dummymasterrvc_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE DummyMasterRvc
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  6
// 
// %REG_CHANNEL reg_def
//     %%TITLE     name            reg_name        wsize   rsize   length  offset  access   init   support  callback
//     %%REG       CTRL_REG        CTRL_REG        32      8|16|32 32      0x00    R|W      0x0    TRUE     -
//     %%REG       DEBUG_MODE_REG  DEBUG_MODE_REG  32      8|16|32 32      0x04    R|W      0x0    TRUE     -
//     %%REG       EXT_REG         EXT_REG         32      8|16|32 32      0x08    R|W      0x0    TRUE     -
//     %%REG       ADDR_REG        ADDR_REG        32      8|16|32 32      0x0C    R|W      0x0    TRUE     -
//     %%REG       SIZE_REG        SIZE_REG        32      8|16|32 32      0x10    R|W      0x0    TRUE     -
//     %%REG       CMD_REG         CMD_REG         32      8|16|32 32      0x14    R|W      0x0    TRUE     -
//     %%REG       WR_DATA_REG     WR_DATA_REG     32      8|16|32 32      0x18    R|W      0x0    TRUE     -
//     %%REG       RD_DATA_REG     RD_DATA_REG     32      8|16|32 32      0x1C    R|W      0x0    TRUE     -
//     %%REG       WR_DATA_REG_0   WR_DATA_REG_0   32      8|16|32 32      0x20    R|W      0x0    TRUE     -
//     %%REG       WR_DATA_REG_1   WR_DATA_REG_1   32      8|16|32 32      0x24    R|W      0x0    TRUE     -
//     %%REG       RD_DATA_REG_0   RD_DATA_REG_0   32      8|16|32 32      0x28    R|W      0x0    TRUE     -
//     %%REG       RD_DATA_REG_1   RD_DATA_REG_1   32      8|16|32 32      0x2C    R|W      0x0    TRUE     -
//     %%REG       BIG_PEID_REG    BIG_PEID_REG    32      8|16|32 32      0x30    R|W      0x0    TRUE     -
// 
// 
// %REG_NAME CTRL_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    CTRL           15      0      0    R|W     TRUE     W
// 
// %REG_NAME DEBUG_MODE_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DEBUG           0      0      0    R|W     TRUE     -
// 
// %REG_NAME EXT_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    TCID           29     24      0    R|W     TRUE     -
//     %%BIT    VCID           18     16      0    R|W     TRUE     -
//     %%BIT    SPID           12      8      0    R|W     TRUE     -
//     %%BIT    PEID            6      4      0    R|W     TRUE     -
//     %%BIT    UM              1      1      0    R|W     TRUE     -
//     %%BIT    VM              0      0      0    R|W     TRUE     -
// 
// %REG_NAME ADDR_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ADDR           31      0      0    R|W     TRUE     -
// 
// %REG_NAME SIZE_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    SIZE            7      0      0    R|W     TRUE     - 
// 
// %REG_NAME CMD_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    COMMAND         0      0      0    R|W     TRUE     - 
// 
// %REG_NAME WR_DATA_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA           31      0      0    R|W     TRUE     -
// 
// %REG_NAME RD_DATA_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA           31      0      0    R|W     TRUE     -
// 
// %REG_NAME WR_DATA_REG_0
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA_0         31      0      0    R|W     TRUE     - 
// 
// %REG_NAME WR_DATA_REG_1
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA_1         31      0      0    R|W     TRUE     -
// 
// %REG_NAME RD_DATA_REG_0
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA_0         31      0      0    R|W     TRUE     - 
// 
// %REG_NAME RD_DATA_REG_1
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    DATA_1         31      0      0    R|W     TRUE     -
// 
// %REG_NAME BIG_PEID_REG
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    EN             31     31      0    R|W     TRUE     -
//     %%BIT    PEID           30      0      0    R|W     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// The structure of all registers for DUMMYMASTERRVC model
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __IODEFINE_DUMMYMASTERRVC_H__
#define __IODEFINE_DUMMYMASTERRVC_H__
struct st_dummymasterrvc {
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 16;
            unsigned long CTRL : 16;
        } BIT;
    } CTRL_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long DEBUG : 1;
        } BIT;
    } DEBUG_MODE_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 2;
            unsigned long TCID : 6;
            unsigned long : 5;
            unsigned long VCID : 3;
            unsigned long : 3;
            unsigned long SPID : 5;
            unsigned long : 1;
            unsigned long PEID : 3;
            unsigned long : 2;
            unsigned long UM : 1;
            unsigned long VM : 1;
        } BIT;
    } EXT_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } ADDR_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 24;
            unsigned long SIZEZ : 8;
        } BIT;
    } SIZE_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long : 31;
            unsigned long COMMAND : 1;
        } BIT;
    } CMD_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } WR_DATA_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } RD_DATA_REG;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } WR_DATA_REG_0;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } WR_DATA_REG_1;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } RD_DATA_REG_0;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long D:32;
        } BIT;
    } RD_DATA_REG_1;
    union {
        unsigned long LONG;
        struct {
            unsigned short WORD0;
            unsigned short WORD1;
        } WORDS;
        struct {
            unsigned char BYTE0;
            unsigned char BYTE1;
            unsigned char BYTE2;
            unsigned char BYTE3;
        } BYTES;
        struct {
            unsigned long EN : 1;
            unsigned long PEID : 31;
        } BIT;
    } BIG_PEID_REG;
};
#endif // __IODEFINE_DUMMYMASTERRVC_H__
