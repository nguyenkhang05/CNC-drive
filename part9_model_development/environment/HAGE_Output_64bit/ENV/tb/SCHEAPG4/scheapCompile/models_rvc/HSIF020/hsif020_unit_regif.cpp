// -----------------------------------------------------------------------------
// $Id: hsif020_unit_regif.cpp,v 1.7 2020/04/08 07:39:39 quynhnhunguyen Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : ../../../input/rhsif/hsif020_unit_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HSIF020_UNIT
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         7
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name          reg_name      wsize    rsize    length  offset  factor_start  factor_end  factor_index  factor_step  access   init        support callback
//     %%REG    HSIFnCMD    HSIFnCMD    8|16|32     8|16|32     32    0x00          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCCT    HSIFnCCT    8|16|32     8|16|32     32    0x08          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCST    HSIFnCST    8|16|32     8|16|32     32    0x10          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCSC    HSIFnCSC    8|16|32     8|16|32     32    0x18          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCIE    HSIFnCIE    8|16|32     8|16|32     32    0x20          -             -          -            -          R|W    0x0          TRUE        -  
//     %%REG    HSIFnCAR    HSIFnCAR    8|16|32     8|16|32     32    0x28          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCWD    HSIFnCWD    8|16|32     8|16|32     32    0x30          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCRD    HSIFnCRD    8|16|32     8|16|32     32    0x38          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCEST   HSIFnCEST   8|16|32     8|16|32     32    0x60          -             -          -            -          R      0x0          TRUE        -
//     %%REG    HSIFnCESC   HSIFnCESC   8|16|32     8|16|32     32    0x68          -             -          -            -          R|W    0x0          TRUE        -
//     %%REG    HSIFnCEIE   HSIFnCEIE   8|16|32     8|16|32     32    0x70          -             -          -            -          R|W    0x0          TRUE        -
// 
//      
// %REG_NAME HSIFnCMD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    INME             0       0     0         R|W     TRUE     -
//     %%BIT    TNME             16      16    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCCT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CTY              4       0     0         R|W     TRUE     -
//     %%BIT    CTYW             7       7     0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RAR              0       0     0         R       TRUE     -
//     %%BIT    AKR              1       1     0         R       TRUE     -
//     %%BIT    AKE              2       2     0         R       TRUE     -
//     %%BIT    TOE              4       4     0         R       TRUE     -
//     %%BIT    IDE              5       5     0         R       TRUE     -
//     %%BIT    AOE              7       7     0         R       TRUE     -
//     %%BIT    RDY              15      15    0         R       TRUE     -
//     %%BIT    TER              16      16    0         R       TRUE     -
//     %%BIT    BRE              20      20    0         R       TRUE     -
//     %%BIT    CRE              31      31    0         R       TRUE     W
//                                                               
// %REG_NAME HSIFnCSC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RARC             0       0     0         R|W     TRUE     -
//     %%BIT    AKRC             1       1     0         R|W     TRUE     -
//     %%BIT    AKEC             2       2     0         R|W     TRUE     -
//     %%BIT    TOEC             4       4     0         R|W     TRUE     -
//     %%BIT    IDEC             5       5     0         R|W     TRUE     -
//     %%BIT    AOEC             7       7     0         R|W     TRUE     -
//     %%BIT    TERC             16      16    0         R|W     TRUE     -
//     %%BIT    BREC             20      20    0         R|W     TRUE     -
//     %%BIT    CREC             31      31    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RARE             0       0     0         R|W     TRUE     -
//     %%BIT    AKRE             1       1     0         R|W     TRUE     -
//     %%BIT    AKEE             2       2     0         R|W     TRUE     -
//     %%BIT    TOEE             4       4     0         R|W     TRUE     -
//     %%BIT    IDEE             5       5     0         R|W     TRUE     -
//     %%BIT    AOEE             7       7     0         R|W     TRUE     -
//     %%BIT    TERE             16      16    0         R|W     TRUE     -
//     %%BIT    BREE             20      20    0         R|W     TRUE     -
//     %%BIT    CREE             31      31    0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCAR
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CAR              31       0     0         R|W     TRUE     W
// 
// %REG_NAME HSIFnCWD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CWD              31       0     0         R|W     TRUE     W
//     
// %REG_NAME HSIFnCRD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CRD              31       0     0         R       TRUE     W
// 
// %REG_NAME HSIFnCEST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMR              31     31     0         R       TRUE     -
//     %%BIT    TMN              28     28     0         R       TRUE     -
//     %%BIT    TMS              27     27     0         R       TRUE     -
//     %%BIT    TDD              26     26     0         R       TRUE     -
//     %%BIT    TDS              25     25     0         R       TRUE     -
//     %%BIT    TDW              24     24     0         R       TRUE     -
//     %%BIT    TDR              23     23     0         R       TRUE     -
//     %%BIT    TDI              22     22     0         R       TRUE     -
//     %%BIT    TDE              21     21     0         R       TRUE     -
//     %%BIT    TAW              20     20     0         R       TRUE     -
//     %%BIT    TAR              19     19     0         R       TRUE     -
//     %%BIT    TPM              18     18     0         R       TRUE     -
//     %%BIT    TCN              17     17     0         R       TRUE     -
//     %%BIT    TPL              16     16     0         R       TRUE     -
//     %%BIT    ISN              5      5      0         R       TRUE     -
//     %%BIT    IPM              3      3      0         R       TRUE     -
//     %%BIT    ICM              2      2      0         R       TRUE     -
//     %%BIT    ICN              1      1      0         R       TRUE     -
//     %%BIT    IUE              0      0      0         R       TRUE     -
// 
// %REG_NAME HSIFnCESC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMRC              31     31     0         R|W     TRUE     -
//     %%BIT    TMNC              28     28     0         R|W     TRUE     -
//     %%BIT    TMSC              27     27     0         R|W     TRUE     -
//     %%BIT    TDDC              26     26     0         R|W     TRUE     -
//     %%BIT    TDSC              25     25     0         R|W     TRUE     -
//     %%BIT    TDWC              24     24     0         R|W     TRUE     -
//     %%BIT    TDRC              23     23     0         R|W     TRUE     -
//     %%BIT    TDIC              22     22     0         R|W     TRUE     -
//     %%BIT    TDEC              21     21     0         R|W     TRUE     -
//     %%BIT    TAWC              20     20     0         R|W     TRUE     -
//     %%BIT    TARC              19     19     0         R|W     TRUE     -
//     %%BIT    TPMC              18     18     0         R|W     TRUE     -
//     %%BIT    TCNC              17     17     0         R|W     TRUE     -
//     %%BIT    TPLC              16     16     0         R|W     TRUE     -
//     %%BIT    ISNC              5      5      0         R|W     TRUE     -
//     %%BIT    IPMC              3      3      0         R|W     TRUE     -
//     %%BIT    ICMC              2      2      0         R|W     TRUE     -
//     %%BIT    ICNC              1      1      0         R|W     TRUE     -
//     %%BIT    IUEC              0      0      0         R|W     TRUE     -
//  
// %REG_NAME HSIFnCEIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CMRE              31     31     0         R|W     TRUE     -
//     %%BIT    TMNE              28     28     0         R|W     TRUE     -
//     %%BIT    TMSE              27     27     0         R|W     TRUE     -
//     %%BIT    TDDE              26     26     0         R|W     TRUE     -
//     %%BIT    TDSE              25     25     0         R|W     TRUE     -
//     %%BIT    TDWE              24     24     0         R|W     TRUE     -
//     %%BIT    TDRE              23     23     0         R|W     TRUE     -
//     %%BIT    TDIE              22     22     0         R|W     TRUE     -
//     %%BIT    TDEE              21     21     0         R|W     TRUE     -
//     %%BIT    TAWE              20     20     0         R|W     TRUE     -
//     %%BIT    TARE              19     19     0         R|W     TRUE     -
//     %%BIT    TPME              18     18     0         R|W     TRUE     -
//     %%BIT    TCNE              17     17     0         R|W     TRUE     -
//     %%BIT    TPLE              16     16     0         R|W     TRUE     -
//     %%BIT    ISNE              5      5      0         R|W     TRUE     -
//     %%BIT    IPME              3      3      0         R|W     TRUE     -
//     %%BIT    ICME              2      2      0         R|W     TRUE     -
//     %%BIT    ICNE              1      1      0         R|W     TRUE     -
//     %%BIT    IUEE              0      0      0         R|W     TRUE     -
//  
////////////////////////////////////////////////////////////////////////////////
/// @file hsif020_unit_regif.cpp
/// @brief Register IF class of model HSIF020_UNIT
/// $Id: hsif020_unit_regif.cpp,v 1.7 2020/04/08 07:39:39 quynhnhunguyen Exp $
/// $Date: 2020/04/08 07:39:39 $
/// $Revison$
/// $Author: quynhnhunguyen $
////////////////////////////////////////////////////////////////////////////////
#include "hsif020_unit_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Chsif020_unit_regif::Chsif020_unit_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x74/4))
    #endif
{
    CommandInit();
    HSIFnCMD  = new vpcl::re_register(0x0000, this, "HSIFnCMD" , name.c_str());
    HSIFnCCT  = new vpcl::re_register(0x0008, this, "HSIFnCCT" , name.c_str());
    HSIFnCST  = new vpcl::re_register(0x0010, this, "HSIFnCST" , name.c_str());
    HSIFnCSC  = new vpcl::re_register(0x0018, this, "HSIFnCSC" , name.c_str());
    HSIFnCIE  = new vpcl::re_register(0x0020, this, "HSIFnCIE" , name.c_str());
    HSIFnCAR  = new vpcl::re_register(0x0028, this, "HSIFnCAR" , name.c_str());
    HSIFnCWD  = new vpcl::re_register(0x0030, this, "HSIFnCWD" , name.c_str());
    HSIFnCRD  = new vpcl::re_register(0x0038, this, "HSIFnCRD" , name.c_str());
    HSIFnCEST = new vpcl::re_register(0x0060, this, "HSIFnCEST", name.c_str());
    HSIFnCESC = new vpcl::re_register(0x0068, this, "HSIFnCESC", name.c_str());
    HSIFnCEIE = new vpcl::re_register(0x0070, this, "HSIFnCEIE", name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<7];
    for (uint i = 0; i < (1<<7); i++) {
        mRegMap[i] = (1<<7);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0038]     = index;
    mRegMap[0x0038 + 1] = index;
    mRegMap[0x0038 + 2] = index;
    mRegMap[0x0038 + 3] = index++;
    mRegMap[0x0060]     = index;
    mRegMap[0x0060 + 1] = index;
    mRegMap[0x0060 + 2] = index;
    mRegMap[0x0060 + 3] = index++;
    mRegMap[0x0068]     = index;
    mRegMap[0x0068 + 1] = index;
    mRegMap[0x0068 + 2] = index;
    mRegMap[0x0068 + 3] = index++;
    mRegMap[0x0070]     = index;
    mRegMap[0x0070 + 1] = index;
    mRegMap[0x0070 + 2] = index;
    mRegMap[0x0070 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_HSIFnCMD   , HSIFnCMD->name() , HSIFnCMD->addr() );
    cw_instantiate_reg(CW_HSIFnCCT   , HSIFnCCT->name() , HSIFnCCT->addr() );
    cw_instantiate_reg(CW_HSIFnCST   , HSIFnCST->name() , HSIFnCST->addr() );
    cw_instantiate_reg(CW_HSIFnCSC   , HSIFnCSC->name() , HSIFnCSC->addr() );
    cw_instantiate_reg(CW_HSIFnCIE   , HSIFnCIE->name() , HSIFnCIE->addr() );
    cw_instantiate_reg(CW_HSIFnCAR   , HSIFnCAR->name() , HSIFnCAR->addr() );
    cw_instantiate_reg(CW_HSIFnCWD   , HSIFnCWD->name() , HSIFnCWD->addr() );
    cw_instantiate_reg(CW_HSIFnCRD   , HSIFnCRD->name() , HSIFnCRD->addr() );
    cw_instantiate_reg(CW_HSIFnCEST  , HSIFnCEST->name(), HSIFnCEST->addr());
    cw_instantiate_reg(CW_HSIFnCESC  , HSIFnCESC->name(), HSIFnCESC->addr());
    cw_instantiate_reg(CW_HSIFnCEIE  , HSIFnCEIE->name(), HSIFnCEIE->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCMD   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCCT   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCST   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCSC   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCIE   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCAR   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCWD   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCRD   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCEST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCESC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnCEIE  , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*HSIFnCMD   ) ( 0,  0, "INME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCMD   ) (16, 16, "TNME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCCT   ) ( 4,  0, "CTY"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCCT   ) ( 7,  7, "CTYW"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 0,  0, "RAR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 1,  1, "AKR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 2,  2, "AKE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 4,  4, "TOE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 5,  5, "IDE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) ( 7,  7, "AOE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) (15, 15, "RDY"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) (16, 16, "TER"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) (20, 20, "BRE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCST   ) (31, 31, "CRE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 0,  0, "RARC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 1,  1, "AKRC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 2,  2, "AKEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 4,  4, "TOEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 5,  5, "IDEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) ( 7,  7, "AOEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) (16, 16, "TERC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) (20, 20, "BREC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCSC   ) (31, 31, "CREC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 0,  0, "RARE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 1,  1, "AKRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 2,  2, "AKEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 4,  4, "TOEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 5,  5, "IDEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) ( 7,  7, "AOEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) (16, 16, "TERE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) (20, 20, "BREE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCIE   ) (31, 31, "CREE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCAR   ) (31,  0, "CAR"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCWD   ) (31,  0, "CWD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCRD   ) (31,  0, "CRD"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (31, 31, "CMR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (28, 28, "TMN"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (27, 27, "TMS"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (26, 26, "TDD"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (25, 25, "TDS"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (24, 24, "TDW"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (23, 23, "TDR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (22, 22, "TDI"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (21, 21, "TDE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (20, 20, "TAW"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (19, 19, "TAR"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (18, 18, "TPM"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (17, 17, "TCN"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) (16, 16, "TPL"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) ( 5,  5, "ISN"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) ( 3,  3, "IPM"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) ( 2,  2, "ICM"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) ( 1,  1, "ICN"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCEST  ) ( 0,  0, "IUE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (31, 31, "CMRC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (28, 28, "TMNC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (27, 27, "TMSC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (26, 26, "TDDC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (25, 25, "TDSC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (24, 24, "TDWC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (23, 23, "TDRC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (22, 22, "TDIC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (21, 21, "TDEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (20, 20, "TAWC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (19, 19, "TARC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (18, 18, "TPMC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (17, 17, "TCNC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) (16, 16, "TPLC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) ( 5,  5, "ISNC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) ( 3,  3, "IPMC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) ( 2,  2, "ICMC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) ( 1,  1, "ICNC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCESC  ) ( 0,  0, "IUEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (31, 31, "CMRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (28, 28, "TMNE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (27, 27, "TMSE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (26, 26, "TDDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (25, 25, "TDSE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (24, 24, "TDWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (23, 23, "TDRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (22, 22, "TDIE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (21, 21, "TDEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (20, 20, "TAWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (19, 19, "TARE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (18, 18, "TPME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (17, 17, "TCNE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) (16, 16, "TPLE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) ( 5,  5, "ISNE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) ( 3,  3, "IPME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) ( 2,  2, "ICME"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) ( 1,  1, "ICNE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnCEIE  ) ( 0,  0, "IUEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["HSIFnCMD"]["TNME"   ] = &Chsif020_unit_regif::cb_HSIFnCMD_TNME;
    mWrCbAPI["HSIFnCCT"]["CTYW"   ] = &Chsif020_unit_regif::cb_HSIFnCCT_CTYW;
    mWrCbAPI["HSIFnCSC"]["CREC"   ] = &Chsif020_unit_regif::cb_HSIFnCSC_CREC;
    mWrCbAPI["HSIFnCIE"]["CREE"   ] = &Chsif020_unit_regif::cb_HSIFnCIE_CREE;
    mWrCbAPI["HSIFnCAR"]["CAR"    ] = &Chsif020_unit_regif::cb_HSIFnCAR_CAR;
    mWrCbAPI["HSIFnCWD"]["CWD"    ] = &Chsif020_unit_regif::cb_HSIFnCWD_CWD;
    mWrCbAPI["HSIFnCRD"]["CRD"    ] = &Chsif020_unit_regif::cb_HSIFnCRD_CRD;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Chsif020_unit_regif::~Chsif020_unit_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Chsif020_unit_regif::uint Chsif020_unit_regif::bit_select(
                                 cuint val,    ///< [in] Writting address
                                 cuint start,  ///< [in] start bit position
                                 cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_unit_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                 const unsigned char *p_data,   ///< [in] Writing data
                                 cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_unit_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                 unsigned char *p_data,   ///< [out] Reading data
                                 cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_unit_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                     const unsigned char *p_data,   ///< [in] Writing data
                                     cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_unit_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                     unsigned char *p_data,   ///< [out] Reading data
                                     cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_unit_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                         const unsigned char *p_data,  ///< [in] Writing data
                                         cuint size,                   ///< [in] Data size (byte)
                                         bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_unit_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                         unsigned char *p_data,   ///< [out] Reading data
                                         cuint size,              ///< [in]  Data size (byte)
                                         bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Chsif020_unit_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                      unsigned char *p_data,          ///< [out] Reading data
                                      cuint size,                     ///< [in]  Data size (byte)
                                      cuint reg_index,                ///< [in] Register index
                                      bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Chsif020_unit_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                      const unsigned char *p_data,      ///< [in] Writing data
                                      cuint size,                       ///< [in] Data size (byte)
                                      cuint reg_index,                  ///< [in] Register index
                                      bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Chsif020_unit_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Chsif020_unit_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Chsif020_unit_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Chsif020_unit_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Chsif020_unit_regif::InitLocalVal()
{
    // Initialize local variables
    HSIFnCMD_INME = 0x0;
    HSIFnCMD_TNME = 0x0;
    HSIFnCCT_CTY = 0x0;
    HSIFnCCT_CTYW = 0x0;
    HSIFnCST_RAR = 0x0;
    HSIFnCST_AKR = 0x0;
    HSIFnCST_AKE = 0x0;
    HSIFnCST_TOE = 0x0;
    HSIFnCST_IDE = 0x0;
    HSIFnCST_AOE = 0x0;
    HSIFnCST_RDY = 0x0;
    HSIFnCST_TER = 0x0;
    HSIFnCST_BRE = 0x0;
    HSIFnCST_CRE = 0x0;
    HSIFnCSC_RARC = 0x0;
    HSIFnCSC_AKRC = 0x0;
    HSIFnCSC_AKEC = 0x0;
    HSIFnCSC_TOEC = 0x0;
    HSIFnCSC_IDEC = 0x0;
    HSIFnCSC_AOEC = 0x0;
    HSIFnCSC_TERC = 0x0;
    HSIFnCSC_BREC = 0x0;
    HSIFnCSC_CREC = 0x0;
    HSIFnCIE_RARE = 0x0;
    HSIFnCIE_AKRE = 0x0;
    HSIFnCIE_AKEE = 0x0;
    HSIFnCIE_TOEE = 0x0;
    HSIFnCIE_IDEE = 0x0;
    HSIFnCIE_AOEE = 0x0;
    HSIFnCIE_TERE = 0x0;
    HSIFnCIE_BREE = 0x0;
    HSIFnCIE_CREE = 0x0;
    HSIFnCAR_CAR = 0x0;
    HSIFnCWD_CWD = 0x0;
    HSIFnCRD_CRD = 0x0;
    HSIFnCEST_CMR = 0x0;
    HSIFnCEST_TMN = 0x0;
    HSIFnCEST_TMS = 0x0;
    HSIFnCEST_TDD = 0x0;
    HSIFnCEST_TDS = 0x0;
    HSIFnCEST_TDW = 0x0;
    HSIFnCEST_TDR = 0x0;
    HSIFnCEST_TDI = 0x0;
    HSIFnCEST_TDE = 0x0;
    HSIFnCEST_TAW = 0x0;
    HSIFnCEST_TAR = 0x0;
    HSIFnCEST_TPM = 0x0;
    HSIFnCEST_TCN = 0x0;
    HSIFnCEST_TPL = 0x0;
    HSIFnCEST_ISN = 0x0;
    HSIFnCEST_IPM = 0x0;
    HSIFnCEST_ICM = 0x0;
    HSIFnCEST_ICN = 0x0;
    HSIFnCEST_IUE = 0x0;
    HSIFnCESC_CMRC = 0x0;
    HSIFnCESC_TMNC = 0x0;
    HSIFnCESC_TMSC = 0x0;
    HSIFnCESC_TDDC = 0x0;
    HSIFnCESC_TDSC = 0x0;
    HSIFnCESC_TDWC = 0x0;
    HSIFnCESC_TDRC = 0x0;
    HSIFnCESC_TDIC = 0x0;
    HSIFnCESC_TDEC = 0x0;
    HSIFnCESC_TAWC = 0x0;
    HSIFnCESC_TARC = 0x0;
    HSIFnCESC_TPMC = 0x0;
    HSIFnCESC_TCNC = 0x0;
    HSIFnCESC_TPLC = 0x0;
    HSIFnCESC_ISNC = 0x0;
    HSIFnCESC_IPMC = 0x0;
    HSIFnCESC_ICMC = 0x0;
    HSIFnCESC_ICNC = 0x0;
    HSIFnCESC_IUEC = 0x0;
    HSIFnCEIE_CMRE = 0x0;
    HSIFnCEIE_TMNE = 0x0;
    HSIFnCEIE_TMSE = 0x0;
    HSIFnCEIE_TDDE = 0x0;
    HSIFnCEIE_TDSE = 0x0;
    HSIFnCEIE_TDWE = 0x0;
    HSIFnCEIE_TDRE = 0x0;
    HSIFnCEIE_TDIE = 0x0;
    HSIFnCEIE_TDEE = 0x0;
    HSIFnCEIE_TAWE = 0x0;
    HSIFnCEIE_TARE = 0x0;
    HSIFnCEIE_TPME = 0x0;
    HSIFnCEIE_TCNE = 0x0;
    HSIFnCEIE_TPLE = 0x0;
    HSIFnCEIE_ISNE = 0x0;
    HSIFnCEIE_IPME = 0x0;
    HSIFnCEIE_ICME = 0x0;
    HSIFnCEIE_ICNE = 0x0;
    HSIFnCEIE_IUEE = 0x0;
}

/// Update bit value to local value
/// @return None
void Chsif020_unit_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        HSIFnCMD_INME                 = (*HSIFnCMD )["INME"     ];
        HSIFnCMD_TNME                 = (*HSIFnCMD )["TNME"     ];
        return;
    }
    if (addr == 0x0008) {
        HSIFnCCT_CTY                  = (*HSIFnCCT )["CTY"      ];
        HSIFnCCT_CTYW                 = (*HSIFnCCT )["CTYW"     ];
        return;
    }
    if (addr == 0x0010) {
        HSIFnCST_RAR                  = (*HSIFnCST )["RAR"      ];
        HSIFnCST_AKR                  = (*HSIFnCST )["AKR"      ];
        HSIFnCST_AKE                  = (*HSIFnCST )["AKE"      ];
        HSIFnCST_TOE                  = (*HSIFnCST )["TOE"      ];
        HSIFnCST_IDE                  = (*HSIFnCST )["IDE"      ];
        HSIFnCST_AOE                  = (*HSIFnCST )["AOE"      ];
        HSIFnCST_RDY                  = (*HSIFnCST )["RDY"      ];
        HSIFnCST_TER                  = (*HSIFnCST )["TER"      ];
        HSIFnCST_BRE                  = (*HSIFnCST )["BRE"      ];
        HSIFnCST_CRE                  = (*HSIFnCST )["CRE"      ];
        return;
    }
    if (addr == 0x0018) {
        HSIFnCSC_RARC                 = (*HSIFnCSC )["RARC"     ];
        HSIFnCSC_AKRC                 = (*HSIFnCSC )["AKRC"     ];
        HSIFnCSC_AKEC                 = (*HSIFnCSC )["AKEC"     ];
        HSIFnCSC_TOEC                 = (*HSIFnCSC )["TOEC"     ];
        HSIFnCSC_IDEC                 = (*HSIFnCSC )["IDEC"     ];
        HSIFnCSC_AOEC                 = (*HSIFnCSC )["AOEC"     ];
        HSIFnCSC_TERC                 = (*HSIFnCSC )["TERC"     ];
        HSIFnCSC_BREC                 = (*HSIFnCSC )["BREC"     ];
        HSIFnCSC_CREC                 = (*HSIFnCSC )["CREC"     ];
        return;
    }
    if (addr == 0x0020) {
        HSIFnCIE_RARE                 = (*HSIFnCIE )["RARE"     ];
        HSIFnCIE_AKRE                 = (*HSIFnCIE )["AKRE"     ];
        HSIFnCIE_AKEE                 = (*HSIFnCIE )["AKEE"     ];
        HSIFnCIE_TOEE                 = (*HSIFnCIE )["TOEE"     ];
        HSIFnCIE_IDEE                 = (*HSIFnCIE )["IDEE"     ];
        HSIFnCIE_AOEE                 = (*HSIFnCIE )["AOEE"     ];
        HSIFnCIE_TERE                 = (*HSIFnCIE )["TERE"     ];
        HSIFnCIE_BREE                 = (*HSIFnCIE )["BREE"     ];
        HSIFnCIE_CREE                 = (*HSIFnCIE )["CREE"     ];
        return;
    }
    if (addr == 0x0028) {
        HSIFnCAR_CAR                  = (*HSIFnCAR )["CAR"      ];
        return;
    }
    if (addr == 0x0030) {
        HSIFnCWD_CWD                  = (*HSIFnCWD )["CWD"      ];
        return;
    }
    if (addr == 0x0038) {
        HSIFnCRD_CRD                  = (*HSIFnCRD )["CRD"      ];
        return;
    }
    if (addr == 0x0060) {
        HSIFnCEST_CMR                 = (*HSIFnCEST)["CMR"      ];
        HSIFnCEST_TMN                 = (*HSIFnCEST)["TMN"      ];
        HSIFnCEST_TMS                 = (*HSIFnCEST)["TMS"      ];
        HSIFnCEST_TDD                 = (*HSIFnCEST)["TDD"      ];
        HSIFnCEST_TDS                 = (*HSIFnCEST)["TDS"      ];
        HSIFnCEST_TDW                 = (*HSIFnCEST)["TDW"      ];
        HSIFnCEST_TDR                 = (*HSIFnCEST)["TDR"      ];
        HSIFnCEST_TDI                 = (*HSIFnCEST)["TDI"      ];
        HSIFnCEST_TDE                 = (*HSIFnCEST)["TDE"      ];
        HSIFnCEST_TAW                 = (*HSIFnCEST)["TAW"      ];
        HSIFnCEST_TAR                 = (*HSIFnCEST)["TAR"      ];
        HSIFnCEST_TPM                 = (*HSIFnCEST)["TPM"      ];
        HSIFnCEST_TCN                 = (*HSIFnCEST)["TCN"      ];
        HSIFnCEST_TPL                 = (*HSIFnCEST)["TPL"      ];
        HSIFnCEST_ISN                 = (*HSIFnCEST)["ISN"      ];
        HSIFnCEST_IPM                 = (*HSIFnCEST)["IPM"      ];
        HSIFnCEST_ICM                 = (*HSIFnCEST)["ICM"      ];
        HSIFnCEST_ICN                 = (*HSIFnCEST)["ICN"      ];
        HSIFnCEST_IUE                 = (*HSIFnCEST)["IUE"      ];
        return;
    }
    if (addr == 0x0068) {
        HSIFnCESC_CMRC                = (*HSIFnCESC)["CMRC"     ];
        HSIFnCESC_TMNC                = (*HSIFnCESC)["TMNC"     ];
        HSIFnCESC_TMSC                = (*HSIFnCESC)["TMSC"     ];
        HSIFnCESC_TDDC                = (*HSIFnCESC)["TDDC"     ];
        HSIFnCESC_TDSC                = (*HSIFnCESC)["TDSC"     ];
        HSIFnCESC_TDWC                = (*HSIFnCESC)["TDWC"     ];
        HSIFnCESC_TDRC                = (*HSIFnCESC)["TDRC"     ];
        HSIFnCESC_TDIC                = (*HSIFnCESC)["TDIC"     ];
        HSIFnCESC_TDEC                = (*HSIFnCESC)["TDEC"     ];
        HSIFnCESC_TAWC                = (*HSIFnCESC)["TAWC"     ];
        HSIFnCESC_TARC                = (*HSIFnCESC)["TARC"     ];
        HSIFnCESC_TPMC                = (*HSIFnCESC)["TPMC"     ];
        HSIFnCESC_TCNC                = (*HSIFnCESC)["TCNC"     ];
        HSIFnCESC_TPLC                = (*HSIFnCESC)["TPLC"     ];
        HSIFnCESC_ISNC                = (*HSIFnCESC)["ISNC"     ];
        HSIFnCESC_IPMC                = (*HSIFnCESC)["IPMC"     ];
        HSIFnCESC_ICMC                = (*HSIFnCESC)["ICMC"     ];
        HSIFnCESC_ICNC                = (*HSIFnCESC)["ICNC"     ];
        HSIFnCESC_IUEC                = (*HSIFnCESC)["IUEC"     ];
        return;
    }
    if (addr == 0x0070) {
        HSIFnCEIE_CMRE                = (*HSIFnCEIE)["CMRE"     ];
        HSIFnCEIE_TMNE                = (*HSIFnCEIE)["TMNE"     ];
        HSIFnCEIE_TMSE                = (*HSIFnCEIE)["TMSE"     ];
        HSIFnCEIE_TDDE                = (*HSIFnCEIE)["TDDE"     ];
        HSIFnCEIE_TDSE                = (*HSIFnCEIE)["TDSE"     ];
        HSIFnCEIE_TDWE                = (*HSIFnCEIE)["TDWE"     ];
        HSIFnCEIE_TDRE                = (*HSIFnCEIE)["TDRE"     ];
        HSIFnCEIE_TDIE                = (*HSIFnCEIE)["TDIE"     ];
        HSIFnCEIE_TDEE                = (*HSIFnCEIE)["TDEE"     ];
        HSIFnCEIE_TAWE                = (*HSIFnCEIE)["TAWE"     ];
        HSIFnCEIE_TARE                = (*HSIFnCEIE)["TARE"     ];
        HSIFnCEIE_TPME                = (*HSIFnCEIE)["TPME"     ];
        HSIFnCEIE_TCNE                = (*HSIFnCEIE)["TCNE"     ];
        HSIFnCEIE_TPLE                = (*HSIFnCEIE)["TPLE"     ];
        HSIFnCEIE_ISNE                = (*HSIFnCEIE)["ISNE"     ];
        HSIFnCEIE_IPME                = (*HSIFnCEIE)["IPME"     ];
        HSIFnCEIE_ICME                = (*HSIFnCEIE)["ICME"     ];
        HSIFnCEIE_ICNE                = (*HSIFnCEIE)["ICNE"     ];
        HSIFnCEIE_IUEE                = (*HSIFnCEIE)["IUEE"     ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Chsif020_unit_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*HSIFnCMD )["INME"     ] = HSIFnCMD_INME;
        (*HSIFnCMD )["TNME"     ] = HSIFnCMD_TNME;
        return;
    }
    if (addr == 0x0008) {
        (*HSIFnCCT )["CTY"      ] = HSIFnCCT_CTY;
        (*HSIFnCCT )["CTYW"     ] = HSIFnCCT_CTYW;
        return;
    }
    if (addr == 0x0010) {
        (*HSIFnCST )["RAR"      ] = HSIFnCST_RAR;
        (*HSIFnCST )["AKR"      ] = HSIFnCST_AKR;
        (*HSIFnCST )["AKE"      ] = HSIFnCST_AKE;
        (*HSIFnCST )["TOE"      ] = HSIFnCST_TOE;
        (*HSIFnCST )["IDE"      ] = HSIFnCST_IDE;
        (*HSIFnCST )["AOE"      ] = HSIFnCST_AOE;
        (*HSIFnCST )["RDY"      ] = HSIFnCST_RDY;
        (*HSIFnCST )["TER"      ] = HSIFnCST_TER;
        (*HSIFnCST )["BRE"      ] = HSIFnCST_BRE;
        (*HSIFnCST )["CRE"      ] = HSIFnCST_CRE;
        return;
    }
    if (addr == 0x0018) {
        (*HSIFnCSC )["RARC"     ] = HSIFnCSC_RARC;
        (*HSIFnCSC )["AKRC"     ] = HSIFnCSC_AKRC;
        (*HSIFnCSC )["AKEC"     ] = HSIFnCSC_AKEC;
        (*HSIFnCSC )["TOEC"     ] = HSIFnCSC_TOEC;
        (*HSIFnCSC )["IDEC"     ] = HSIFnCSC_IDEC;
        (*HSIFnCSC )["AOEC"     ] = HSIFnCSC_AOEC;
        (*HSIFnCSC )["TERC"     ] = HSIFnCSC_TERC;
        (*HSIFnCSC )["BREC"     ] = HSIFnCSC_BREC;
        (*HSIFnCSC )["CREC"     ] = HSIFnCSC_CREC;
        return;
    }
    if (addr == 0x0020) {
        (*HSIFnCIE )["RARE"     ] = HSIFnCIE_RARE;
        (*HSIFnCIE )["AKRE"     ] = HSIFnCIE_AKRE;
        (*HSIFnCIE )["AKEE"     ] = HSIFnCIE_AKEE;
        (*HSIFnCIE )["TOEE"     ] = HSIFnCIE_TOEE;
        (*HSIFnCIE )["IDEE"     ] = HSIFnCIE_IDEE;
        (*HSIFnCIE )["AOEE"     ] = HSIFnCIE_AOEE;
        (*HSIFnCIE )["TERE"     ] = HSIFnCIE_TERE;
        (*HSIFnCIE )["BREE"     ] = HSIFnCIE_BREE;
        (*HSIFnCIE )["CREE"     ] = HSIFnCIE_CREE;
        return;
    }
    if (addr == 0x0028) {
        (*HSIFnCAR )["CAR"      ] = HSIFnCAR_CAR;
        return;
    }
    if (addr == 0x0030) {
        (*HSIFnCWD )["CWD"      ] = HSIFnCWD_CWD;
        return;
    }
    if (addr == 0x0038) {
        (*HSIFnCRD )["CRD"      ] = HSIFnCRD_CRD;
        return;
    }
    if (addr == 0x0060) {
        (*HSIFnCEST)["CMR"      ] = HSIFnCEST_CMR;
        (*HSIFnCEST)["TMN"      ] = HSIFnCEST_TMN;
        (*HSIFnCEST)["TMS"      ] = HSIFnCEST_TMS;
        (*HSIFnCEST)["TDD"      ] = HSIFnCEST_TDD;
        (*HSIFnCEST)["TDS"      ] = HSIFnCEST_TDS;
        (*HSIFnCEST)["TDW"      ] = HSIFnCEST_TDW;
        (*HSIFnCEST)["TDR"      ] = HSIFnCEST_TDR;
        (*HSIFnCEST)["TDI"      ] = HSIFnCEST_TDI;
        (*HSIFnCEST)["TDE"      ] = HSIFnCEST_TDE;
        (*HSIFnCEST)["TAW"      ] = HSIFnCEST_TAW;
        (*HSIFnCEST)["TAR"      ] = HSIFnCEST_TAR;
        (*HSIFnCEST)["TPM"      ] = HSIFnCEST_TPM;
        (*HSIFnCEST)["TCN"      ] = HSIFnCEST_TCN;
        (*HSIFnCEST)["TPL"      ] = HSIFnCEST_TPL;
        (*HSIFnCEST)["ISN"      ] = HSIFnCEST_ISN;
        (*HSIFnCEST)["IPM"      ] = HSIFnCEST_IPM;
        (*HSIFnCEST)["ICM"      ] = HSIFnCEST_ICM;
        (*HSIFnCEST)["ICN"      ] = HSIFnCEST_ICN;
        (*HSIFnCEST)["IUE"      ] = HSIFnCEST_IUE;
        return;
    }
    if (addr == 0x0068) {
        (*HSIFnCESC)["CMRC"     ] = HSIFnCESC_CMRC;
        (*HSIFnCESC)["TMNC"     ] = HSIFnCESC_TMNC;
        (*HSIFnCESC)["TMSC"     ] = HSIFnCESC_TMSC;
        (*HSIFnCESC)["TDDC"     ] = HSIFnCESC_TDDC;
        (*HSIFnCESC)["TDSC"     ] = HSIFnCESC_TDSC;
        (*HSIFnCESC)["TDWC"     ] = HSIFnCESC_TDWC;
        (*HSIFnCESC)["TDRC"     ] = HSIFnCESC_TDRC;
        (*HSIFnCESC)["TDIC"     ] = HSIFnCESC_TDIC;
        (*HSIFnCESC)["TDEC"     ] = HSIFnCESC_TDEC;
        (*HSIFnCESC)["TAWC"     ] = HSIFnCESC_TAWC;
        (*HSIFnCESC)["TARC"     ] = HSIFnCESC_TARC;
        (*HSIFnCESC)["TPMC"     ] = HSIFnCESC_TPMC;
        (*HSIFnCESC)["TCNC"     ] = HSIFnCESC_TCNC;
        (*HSIFnCESC)["TPLC"     ] = HSIFnCESC_TPLC;
        (*HSIFnCESC)["ISNC"     ] = HSIFnCESC_ISNC;
        (*HSIFnCESC)["IPMC"     ] = HSIFnCESC_IPMC;
        (*HSIFnCESC)["ICMC"     ] = HSIFnCESC_ICMC;
        (*HSIFnCESC)["ICNC"     ] = HSIFnCESC_ICNC;
        (*HSIFnCESC)["IUEC"     ] = HSIFnCESC_IUEC;
        return;
    }
    if (addr == 0x0070) {
        (*HSIFnCEIE)["CMRE"     ] = HSIFnCEIE_CMRE;
        (*HSIFnCEIE)["TMNE"     ] = HSIFnCEIE_TMNE;
        (*HSIFnCEIE)["TMSE"     ] = HSIFnCEIE_TMSE;
        (*HSIFnCEIE)["TDDE"     ] = HSIFnCEIE_TDDE;
        (*HSIFnCEIE)["TDSE"     ] = HSIFnCEIE_TDSE;
        (*HSIFnCEIE)["TDWE"     ] = HSIFnCEIE_TDWE;
        (*HSIFnCEIE)["TDRE"     ] = HSIFnCEIE_TDRE;
        (*HSIFnCEIE)["TDIE"     ] = HSIFnCEIE_TDIE;
        (*HSIFnCEIE)["TDEE"     ] = HSIFnCEIE_TDEE;
        (*HSIFnCEIE)["TAWE"     ] = HSIFnCEIE_TAWE;
        (*HSIFnCEIE)["TARE"     ] = HSIFnCEIE_TARE;
        (*HSIFnCEIE)["TPME"     ] = HSIFnCEIE_TPME;
        (*HSIFnCEIE)["TCNE"     ] = HSIFnCEIE_TCNE;
        (*HSIFnCEIE)["TPLE"     ] = HSIFnCEIE_TPLE;
        (*HSIFnCEIE)["ISNE"     ] = HSIFnCEIE_ISNE;
        (*HSIFnCEIE)["IPME"     ] = HSIFnCEIE_IPME;
        (*HSIFnCEIE)["ICME"     ] = HSIFnCEIE_ICME;
        (*HSIFnCEIE)["ICNE"     ] = HSIFnCEIE_ICNE;
        (*HSIFnCEIE)["IUEE"     ] = HSIFnCEIE_IUEE;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Chsif020_unit_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Chsif020_unit_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Chsif020_unit_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,7, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Chsif020_unit_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<7)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Chsif020_unit_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Chsif020_unit_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Chsif020_unit_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Chsif020_unit_regif::uint Chsif020_unit_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Chsif020_unit_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Chsif020_unit_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Chsif020_unit_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Chsif020_unit_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Chsif020_unit_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Chsif020_unit_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Chsif020_unit_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
