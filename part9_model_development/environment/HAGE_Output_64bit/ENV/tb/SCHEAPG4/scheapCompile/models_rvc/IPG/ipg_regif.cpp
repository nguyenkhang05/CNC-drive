// -----------------------------------------------------------------------------
// $Id: ipg_regif.cpp,v 1.8 2015/06/29 09:18:50 dungvannguyen Exp $
//
// Copyright(c) 2014-2015 Renesas Electronics Corporation
// Copyright(c) 2014-2015 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_cpp.skl 1.52 2014/05/19 02:28:22 sontran
//
// Input file : ipg_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE IPG
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         10
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name       reg_name   wsize  rsize    length  offset factor_start  factor_end  factor_index  factor_step  access  init  support  callback
//     %%REG    -      IPGECRUM   IPGECRUM   16     8|16|32  16      0x002  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRUM   IPGADRUM   32     8|16|32  32      0x008  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENUM    IPGENUM    8      8|16|32  8       0x00D  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM   IPGPMTUM   8      8|16|32  8       0x020  0             4           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRSV0  IPGECRSV0  16     8|16|32  16      0x040  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRSV1  IPGECRSV1  16     8|16|32  16      0x080  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRSV2  IPGECRSV2  16     8|16|32  16      0x0C0  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRSV3  IPGECRSV3  16     8|16|32  16      0x100  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRUM0  IPGECRUM0  16     8|16|32  16      0x042  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRUM1  IPGECRUM1  16     8|16|32  16      0x082  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRUM2  IPGECRUM2  16     8|16|32  16      0x0C2  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGECRUM3  IPGECRUM3  16     8|16|32  16      0x102  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRSV0  IPGADRSV0  32     8|16|32  32      0x044  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRSV1  IPGADRSV1  32     8|16|32  32      0x084  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRSV2  IPGADRSV2  32     8|16|32  32      0x0C4  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRSV3  IPGADRSV3  32     8|16|32  32      0x104  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRUM0  IPGADRUM0  32     8|16|32  32      0x048  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRUM1  IPGADRUM1  32     8|16|32  32      0x088  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRUM2  IPGADRUM2  32     8|16|32  32      0x0C8  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGADRUM3  IPGADRUM3  32     8|16|32  32      0x108  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENSV0   IPGENSV0   8      8|16|32  8       0x04C  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENSV1   IPGENSV1   8      8|16|32  8       0x08C  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENSV2   IPGENSV2   8      8|16|32  8       0x0CC  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENSV3   IPGENSV3   8      8|16|32  8       0x10C  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENUM0   IPGENUM0   8      8|16|32  8       0x04D  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENUM1   IPGENUM1   8      8|16|32  8       0x08D  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENUM2   IPGENUM2   8      8|16|32  8       0x0CD  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGENUM3   IPGENUM3   8      8|16|32  8       0x10D  -             -           -             -            W|R     0     TRUE     -  
//     %%REG    -      IPGPMTSV0  IPGPMTSV0  8      8|16|32  8       0x050  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTSV1  IPGPMTSV1  8      8|16|32  8       0x051  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTSV2  IPGPMTSV2  8      8|16|32  8       0x052  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTSV3  IPGPMTSV3  8      8|16|32  8       0x053  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTSV4  IPGPMTSV4  8      8|16|32  8       0x054  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM0  IPGPMTUM0  8      8|16|32  8       0x060  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM1  IPGPMTUM1  8      8|16|32  8       0x061  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM2  IPGPMTUM2  8      8|16|32  8       0x062  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM3  IPGPMTUM3  8      8|16|32  8       0x063  0             3           -             0x40         W|R     0     TRUE     -  
//     %%REG    -      IPGPMTUM4  IPGPMTUM4  8      8|16|32  8       0x064  0             3           -             0x40         W|R     0     TRUE     -  
// 
// %REG_NAME IPGECRUM
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRUM
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGENUM
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRSV0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRSV1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRSV2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRSV3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRUM0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRUM1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRUM2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGECRUM3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    VD          0      0      0     W|R     TRUE     -
//     %%BIT    RD          1      1      0     W|R     TRUE     -
//     %%BIT    WR          2      2      0     W|R     TRUE     -
//     %%BIT    EX          3      3      0     W|R     TRUE     -
//     %%BIT    DS          7      4      0     W|R     TRUE     -
//     %%BIT    TCID        13     8      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRSV0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRSV1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRSV2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRSV3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRUM0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRUM1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRUM2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGADRUM3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    EADR        31     0      0     W|R     TRUE     -
// 
// %REG_NAME IPGENSV0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENSV1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENSV2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENSV3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENUM0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENUM1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENUM2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGENUM3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    E           0      0      0     W|R     TRUE     -
//     %%BIT    IRE         1      1      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTSV0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTSV1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTSV2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTSV3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTSV4
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM0
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM1
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM2
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    X0          2      2      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM3
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
// 
// %REG_NAME IPGPMTUM4
//     %%TITLE  name        upper  lower  init  access  support  callback                                     
//     %%BIT    R0          0      0      0     W|R     TRUE     -
//     %%BIT    W0          1      1      0     W|R     TRUE     -
//     %%BIT    R1          4      4      0     W|R     TRUE     -
//     %%BIT    W1          5      5      0     W|R     TRUE     -
//     %%BIT    X1          6      6      0     W|R     TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file ipg_regif.cpp
/// @brief Register IF class of model IPG
/// $Id: ipg_regif.cpp,v 1.8 2015/06/29 09:18:50 dungvannguyen Exp $
/// $Date: 2015/06/29 09:18:50 $
/// $Revison$
/// $Author: dungvannguyen $
////////////////////////////////////////////////////////////////////////////////
#include "ipg_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cipg_regif::Cipg_regif(std::string name, uint buswidth, std::string ipg_version)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x128/4))
    #endif
{
    mVersion = ipg_version;
    CommandInit();
    IPGECRUM  = new vpcl::re_register(0x0002, this, "IPGECRUM" , name.c_str());
    IPGADRUM  = new vpcl::re_register(0x0008, this, "IPGADRUM" , name.c_str());
    IPGENUM   = new vpcl::re_register(0x000D, this, "IPGENUM"  , name.c_str());
    if (mVersion != "G3KH") {
        IPGECRUM0 = new vpcl::re_register(0x0042, this, "IPGECRUM0", name.c_str());
        IPGADRUM0 = new vpcl::re_register(0x0048, this, "IPGADRUM0", name.c_str());
        IPGENSV0  = new vpcl::re_register(0x004C, this, "IPGENSV0" , name.c_str());
        IPGENUM0  = new vpcl::re_register(0x004D, this, "IPGENUM0" , name.c_str());
        if (mVersion != "G3MH") {
            IPGECRSV0 = new vpcl::re_register(0x0040, this, "IPGECRSV0", name.c_str());
            IPGECRSV1 = new vpcl::re_register(0x0080, this, "IPGECRSV1", name.c_str());
            IPGECRSV2 = new vpcl::re_register(0x00C0, this, "IPGECRSV2", name.c_str());
            IPGECRSV3 = new vpcl::re_register(0x0100, this, "IPGECRSV3", name.c_str());
            IPGECRUM1 = new vpcl::re_register(0x0082, this, "IPGECRUM1", name.c_str());
            IPGECRUM2 = new vpcl::re_register(0x00C2, this, "IPGECRUM2", name.c_str());
            IPGECRUM3 = new vpcl::re_register(0x0102, this, "IPGECRUM3", name.c_str());
            IPGADRSV0 = new vpcl::re_register(0x0044, this, "IPGADRSV0", name.c_str());
            IPGADRSV1 = new vpcl::re_register(0x0084, this, "IPGADRSV1", name.c_str());
            IPGADRSV2 = new vpcl::re_register(0x00C4, this, "IPGADRSV2", name.c_str());
            IPGADRSV3 = new vpcl::re_register(0x0104, this, "IPGADRSV3", name.c_str());
            IPGADRUM1 = new vpcl::re_register(0x0088, this, "IPGADRUM1", name.c_str());
            IPGADRUM2 = new vpcl::re_register(0x00C8, this, "IPGADRUM2", name.c_str());
            IPGADRUM3 = new vpcl::re_register(0x0108, this, "IPGADRUM3", name.c_str());
            IPGENSV1  = new vpcl::re_register(0x008C, this, "IPGENSV1" , name.c_str());
            IPGENSV2  = new vpcl::re_register(0x00CC, this, "IPGENSV2" , name.c_str());
            IPGENSV3  = new vpcl::re_register(0x010C, this, "IPGENSV3" , name.c_str());
            IPGENUM1  = new vpcl::re_register(0x008D, this, "IPGENUM1" , name.c_str());
            IPGENUM2  = new vpcl::re_register(0x00CD, this, "IPGENUM2" , name.c_str());
            IPGENUM3  = new vpcl::re_register(0x010D, this, "IPGENUM3" , name.c_str());
        } else {
            IPGECRSV0 = new vpcl::re_register(0x0040, this, "IPGECR0", name.c_str());
            IPGADRSV0 = new vpcl::re_register(0x0044, this, "IPGADR0", name.c_str());
        }
    }
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_IPGPMTUM; i++) {
        str_tmp.str("");
        str_tmp<<"IPGPMTUM"<< i;
        IPGPMTUM [i] = new vpcl::re_register((0x0020) + i, this, str_tmp.str(), name.c_str());
    }
    if ((mVersion != "G3MH") && (mVersion != "G3KH")) {
        for(uint i = 0; i < emNUM_IPGPMTSV0; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTSV0"<< i;
            IPGPMTSV0[i] = new vpcl::re_register((0x0050) + 64*i, this, str_tmp.str(), name.c_str());
        }
        for(uint i = 0; i < emNUM_IPGPMTSV1; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTSV1"<< i;
            IPGPMTSV1[i] = new vpcl::re_register((0x0051) + 64*i, this, str_tmp.str(), name.c_str());
        }
    }
    if (mVersion != "G3KH") {
        for(uint i = 0; i < emNUM_IPGPMTSV2; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTSV2"<< i;
            IPGPMTSV2[i] = new vpcl::re_register((0x0052) + 64*i, this, str_tmp.str(), name.c_str());
        }
        for(uint i = 0; i < emNUM_IPGPMTSV3; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTSV3"<< i;
            IPGPMTSV3[i] = new vpcl::re_register((0x0053) + 64*i, this, str_tmp.str(), name.c_str());
        }
        for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTSV4"<< i;
            IPGPMTSV4[i] = new vpcl::re_register((0x0054) + 64*i, this, str_tmp.str(), name.c_str());
        }
    }
    if ((mVersion != "G3MH") && (mVersion != "G3KH")) {
        for(uint i = 0; i < emNUM_IPGPMTUM0; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTUM0"<< i;
            IPGPMTUM0[i] = new vpcl::re_register((0x0060) + 64*i, this, str_tmp.str(), name.c_str());
        }
        for(uint i = 0; i < emNUM_IPGPMTUM1; i++) {
            str_tmp.str("");
            str_tmp<<"IPGPMTUM1"<< i;
            IPGPMTUM1[i] = new vpcl::re_register((0x0061) + 64*i, this, str_tmp.str(), name.c_str());
        }
    }
    if (mVersion != "G3KH") {
        for(uint i = 0; i < emNUM_IPGPMTUM2; i++) {
            str_tmp.str("");
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                str_tmp<<"IPGPMTUM2"<< i;
                IPGPMTUM2[i] = new vpcl::re_register((0x0062) + 64*i, this, str_tmp.str(), name.c_str());
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM3; i++) {
            str_tmp.str("");
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                str_tmp<<"IPGPMTUM3"<< i;
                IPGPMTUM3[i] = new vpcl::re_register((0x0063) + 64*i, this, str_tmp.str(), name.c_str());
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
            str_tmp.str("");
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                str_tmp<<"IPGPMTUM4"<< i;
                IPGPMTUM4[i] = new vpcl::re_register((0x0064) + 64*i, this, str_tmp.str(), name.c_str());
            }
        }
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<10];
    for (uint i = 0; i < (1<<10); i++) {
        mRegMap[i] = (1<<10);
    }

    mRegMap[0x0002]     = index;
    mRegMap[0x0002 + 1] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000D]     = index++;
    for(uint i = 0; i < emNUM_IPGPMTUM; i++) {
        if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i != 0) && (i != 1))) {
            mRegMap[(0x0020)     + i*1 ] = index++;
        }
    }
    if (mVersion != "G3KH") {
        mRegMap[0x0040]     = index;
        mRegMap[0x0040 + 1] = index++;
        mRegMap[0x0042]     = index;
        mRegMap[0x0042 + 1] = index++;
        mRegMap[0x0044]     = index;
        mRegMap[0x0044 + 1] = index;
        mRegMap[0x0044 + 2] = index;
        mRegMap[0x0044 + 3] = index++;
        mRegMap[0x0048]     = index;
        mRegMap[0x0048 + 1] = index;
        mRegMap[0x0048 + 2] = index;
        mRegMap[0x0048 + 3] = index++;
        mRegMap[0x004C]     = index++;
        mRegMap[0x004D]     = index++;
        if (mVersion != "G3MH") {
            for(uint i = 0; i < emNUM_IPGPMTSV0; i++) {
                mRegMap[(0x0050)     + i*64] = index++;
            }
            for(uint i = 0; i < emNUM_IPGPMTSV1; i++) {
                mRegMap[(0x0051)     + i*64] = index++;
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV2; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0052)     + i*64] = index++;
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV3; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0053)     + i*64] = index++;
            } 
        }
        for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0054)     + i*64] = index++;
            }
        }
        if (mVersion != "G3MH") {
            for(uint i = 0; i < emNUM_IPGPMTUM0; i++) {
                mRegMap[(0x0060)     + i*64] = index++;
            }
            for(uint i = 0; i < emNUM_IPGPMTUM1; i++) {
                mRegMap[(0x0061)     + i*64] = index++;
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM2; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0062)     + i*64] = index++;
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM3; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0063)     + i*64] = index++;
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mRegMap[(0x0064)     + i*64] = index++;
            }
        }
        if (mVersion != "G3MH") {
            mRegMap[0x0080]     = index;
            mRegMap[0x0080 + 1] = index++;
            mRegMap[0x0082]     = index;
            mRegMap[0x0082 + 1] = index++;
            mRegMap[0x0084]     = index;
            mRegMap[0x0084 + 1] = index;
            mRegMap[0x0084 + 2] = index;
            mRegMap[0x0084 + 3] = index++;
            mRegMap[0x0088]     = index;
            mRegMap[0x0088 + 1] = index;
            mRegMap[0x0088 + 2] = index;
            mRegMap[0x0088 + 3] = index++;
            mRegMap[0x008C]     = index++;
            mRegMap[0x008D]     = index++;
            mRegMap[0x00C0]     = index;
            mRegMap[0x00C0 + 1] = index++;
            mRegMap[0x00C2]     = index;
            mRegMap[0x00C2 + 1] = index++;
            mRegMap[0x00C4]     = index;
            mRegMap[0x00C4 + 1] = index;
            mRegMap[0x00C4 + 2] = index;
            mRegMap[0x00C4 + 3] = index++;
            mRegMap[0x00C8]     = index;
            mRegMap[0x00C8 + 1] = index;
            mRegMap[0x00C8 + 2] = index;
            mRegMap[0x00C8 + 3] = index++;
            mRegMap[0x00CC]     = index++;
            mRegMap[0x00CD]     = index++;
            mRegMap[0x0100]     = index;
            mRegMap[0x0100 + 1] = index++;
            mRegMap[0x0102]     = index;
            mRegMap[0x0102 + 1] = index++;
            mRegMap[0x0104]     = index;
            mRegMap[0x0104 + 1] = index;
            mRegMap[0x0104 + 2] = index;
            mRegMap[0x0104 + 3] = index++;
            mRegMap[0x0108]     = index;
            mRegMap[0x0108 + 1] = index;
            mRegMap[0x0108 + 2] = index;
            mRegMap[0x0108 + 3] = index++;
            mRegMap[0x010C]     = index++;
            mRegMap[0x010D]     = index++;
        }
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_IPGECRUM_, "IPGECRUM_", 0x0000);
    CW_IPGECRUM  = new scml2::bitfield<uint>(IPGECRUM->name() , CW_IPGECRUM_         , 16, 16);
    cw_instantiate_reg(CW_IPGENUM_, "IPGENUM_", 0x000C);
    CW_IPGENUM   = new scml2::bitfield<uint>(IPGENUM->name()  , CW_IPGENUM_          ,  8,  8);
    cw_instantiate_reg(CW_IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3, "IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3", 0x0020);
    CW_IPGPMTUM [0] = new scml2::bitfield<uint>(IPGPMTUM [0]->name(), CW_IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3,  0,  8);
    CW_IPGPMTUM [1] = new scml2::bitfield<uint>(IPGPMTUM [1]->name(), CW_IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3,  8,  8);
    CW_IPGPMTUM [2] = new scml2::bitfield<uint>(IPGPMTUM [2]->name(), CW_IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3, 16,  8);
    CW_IPGPMTUM [3] = new scml2::bitfield<uint>(IPGPMTUM [3]->name(), CW_IPGPMTUM_0_IPGPMTUM_1_IPGPMTUM_2_IPGPMTUM_3, 24,  8);
    for(uint i = 0; i < emNUM_IPGPMTUM ; i++) {
        if ((i != 0) && (i != 1) && (i != 2) && (i != 3)) {
            cw_instantiate_reg(CW_IPGPMTUM_[i], IPGPMTUM [i]->name(), IPGPMTUM [i]->addr());
            CW_IPGPMTUM [i] = new scml2::bitfield<uint>(IPGPMTUM->name() , CW_IPGPMTUM_ [i],  0,  8);
        }
    }
    cw_instantiate_reg(CW_IPGECRSV0_IPGECRUM0, "IPGECRSV0_IPGECRUM0", 0x0040);
    CW_IPGECRSV0 = new scml2::bitfield<uint>(IPGECRSV0->name(), CW_IPGECRSV0_IPGECRUM0,  0, 16);
    CW_IPGECRUM0 = new scml2::bitfield<uint>(IPGECRUM0->name(), CW_IPGECRSV0_IPGECRUM0, 16, 16);
    cw_instantiate_reg(CW_IPGENSV0_IPGENUM0, "IPGENSV0_IPGENUM0", 0x004C);
    CW_IPGENSV0  = new scml2::bitfield<uint>(IPGENSV0->name() , CW_IPGENSV0_IPGENUM0 ,  0,  8);
    CW_IPGENUM0  = new scml2::bitfield<uint>(IPGENUM0->name() , CW_IPGENSV0_IPGENUM0 ,  8,  8);
    cw_instantiate_reg(CW_IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0, "IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0", 0x0050);
    CW_IPGPMTSV0[0] = new scml2::bitfield<uint>(IPGPMTSV0[0]->name(), CW_IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0,  0,  8);
    CW_IPGPMTSV1[0] = new scml2::bitfield<uint>(IPGPMTSV1[0]->name(), CW_IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0,  8,  8);
    CW_IPGPMTSV2[0] = new scml2::bitfield<uint>(IPGPMTSV2[0]->name(), CW_IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0, 16,  8);
    CW_IPGPMTSV3[0] = new scml2::bitfield<uint>(IPGPMTSV3[0]->name(), CW_IPGPMTSV0_0_IPGPMTSV1_0_IPGPMTSV2_0_IPGPMTSV3_0, 24,  8);
    for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
        cw_instantiate_reg(CW_IPGPMTSV4_[i], IPGPMTSV4[i]->name(), IPGPMTSV4[i]->addr());
        CW_IPGPMTSV4[i] = new scml2::bitfield<uint>(IPGPMTSV4->name(), CW_IPGPMTSV4_[i],  0,  8);
    }
    cw_instantiate_reg(CW_IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0, "IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0", 0x0060);
    CW_IPGPMTUM0[0] = new scml2::bitfield<uint>(IPGPMTUM0[0]->name(), CW_IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0,  0,  8);
    CW_IPGPMTUM1[0] = new scml2::bitfield<uint>(IPGPMTUM1[0]->name(), CW_IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0,  8,  8);
    CW_IPGPMTUM2[0] = new scml2::bitfield<uint>(IPGPMTUM2[0]->name(), CW_IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0, 16,  8);
    CW_IPGPMTUM3[0] = new scml2::bitfield<uint>(IPGPMTUM3[0]->name(), CW_IPGPMTUM0_0_IPGPMTUM1_0_IPGPMTUM2_0_IPGPMTUM3_0, 24,  8);
    for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
        cw_instantiate_reg(CW_IPGPMTUM4_[i], IPGPMTUM4[i]->name(), IPGPMTUM4[i]->addr());
        CW_IPGPMTUM4[i] = new scml2::bitfield<uint>(IPGPMTUM4->name(), CW_IPGPMTUM4_[i],  0,  8);
    }
    cw_instantiate_reg(CW_IPGECRSV1_IPGECRUM1, "IPGECRSV1_IPGECRUM1", 0x0080);
    CW_IPGECRSV1 = new scml2::bitfield<uint>(IPGECRSV1->name(), CW_IPGECRSV1_IPGECRUM1,  0, 16);
    CW_IPGECRUM1 = new scml2::bitfield<uint>(IPGECRUM1->name(), CW_IPGECRSV1_IPGECRUM1, 16, 16);
    cw_instantiate_reg(CW_IPGENSV1_IPGENUM1, "IPGENSV1_IPGENUM1", 0x008C);
    CW_IPGENSV1  = new scml2::bitfield<uint>(IPGENSV1->name() , CW_IPGENSV1_IPGENUM1 ,  0,  8);
    CW_IPGENUM1  = new scml2::bitfield<uint>(IPGENUM1->name() , CW_IPGENSV1_IPGENUM1 ,  8,  8);
    cw_instantiate_reg(CW_IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1, "IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1", 0x0090);
    CW_IPGPMTSV0[1] = new scml2::bitfield<uint>(IPGPMTSV0[1]->name(), CW_IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1,  0,  8);
    CW_IPGPMTSV1[1] = new scml2::bitfield<uint>(IPGPMTSV1[1]->name(), CW_IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1,  8,  8);
    CW_IPGPMTSV2[1] = new scml2::bitfield<uint>(IPGPMTSV2[1]->name(), CW_IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1, 16,  8);
    CW_IPGPMTSV3[1] = new scml2::bitfield<uint>(IPGPMTSV3[1]->name(), CW_IPGPMTSV0_1_IPGPMTSV1_1_IPGPMTSV2_1_IPGPMTSV3_1, 24,  8);
    cw_instantiate_reg(CW_IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1, "IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1", 0x00A0);
    CW_IPGPMTUM0[1] = new scml2::bitfield<uint>(IPGPMTUM0[1]->name(), CW_IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1,  0,  8);
    CW_IPGPMTUM1[1] = new scml2::bitfield<uint>(IPGPMTUM1[1]->name(), CW_IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1,  8,  8);
    CW_IPGPMTUM2[1] = new scml2::bitfield<uint>(IPGPMTUM2[1]->name(), CW_IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1, 16,  8);
    CW_IPGPMTUM3[1] = new scml2::bitfield<uint>(IPGPMTUM3[1]->name(), CW_IPGPMTUM0_1_IPGPMTUM1_1_IPGPMTUM2_1_IPGPMTUM3_1, 24,  8);
    cw_instantiate_reg(CW_IPGECRSV2_IPGECRUM2, "IPGECRSV2_IPGECRUM2", 0x00C0);
    CW_IPGECRSV2 = new scml2::bitfield<uint>(IPGECRSV2->name(), CW_IPGECRSV2_IPGECRUM2,  0, 16);
    CW_IPGECRUM2 = new scml2::bitfield<uint>(IPGECRUM2->name(), CW_IPGECRSV2_IPGECRUM2, 16, 16);
    cw_instantiate_reg(CW_IPGENSV2_IPGENUM2, "IPGENSV2_IPGENUM2", 0x00CC);
    CW_IPGENSV2  = new scml2::bitfield<uint>(IPGENSV2->name() , CW_IPGENSV2_IPGENUM2 ,  0,  8);
    CW_IPGENUM2  = new scml2::bitfield<uint>(IPGENUM2->name() , CW_IPGENSV2_IPGENUM2 ,  8,  8);
    cw_instantiate_reg(CW_IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2, "IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2", 0x00D0);
    CW_IPGPMTSV0[2] = new scml2::bitfield<uint>(IPGPMTSV0[2]->name(), CW_IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2,  0,  8);
    CW_IPGPMTSV1[2] = new scml2::bitfield<uint>(IPGPMTSV1[2]->name(), CW_IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2,  8,  8);
    CW_IPGPMTSV2[2] = new scml2::bitfield<uint>(IPGPMTSV2[2]->name(), CW_IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2, 16,  8);
    CW_IPGPMTSV3[2] = new scml2::bitfield<uint>(IPGPMTSV3[2]->name(), CW_IPGPMTSV0_2_IPGPMTSV1_2_IPGPMTSV2_2_IPGPMTSV3_2, 24,  8);
    cw_instantiate_reg(CW_IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2, "IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2", 0x00E0);
    CW_IPGPMTUM0[2] = new scml2::bitfield<uint>(IPGPMTUM0[2]->name(), CW_IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2,  0,  8);
    CW_IPGPMTUM1[2] = new scml2::bitfield<uint>(IPGPMTUM1[2]->name(), CW_IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2,  8,  8);
    CW_IPGPMTUM2[2] = new scml2::bitfield<uint>(IPGPMTUM2[2]->name(), CW_IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2, 16,  8);
    CW_IPGPMTUM3[2] = new scml2::bitfield<uint>(IPGPMTUM3[2]->name(), CW_IPGPMTUM0_2_IPGPMTUM1_2_IPGPMTUM2_2_IPGPMTUM3_2, 24,  8);
    cw_instantiate_reg(CW_IPGECRSV3_IPGECRUM3, "IPGECRSV3_IPGECRUM3", 0x0100);
    CW_IPGECRSV3 = new scml2::bitfield<uint>(IPGECRSV3->name(), CW_IPGECRSV3_IPGECRUM3,  0, 16);
    CW_IPGECRUM3 = new scml2::bitfield<uint>(IPGECRUM3->name(), CW_IPGECRSV3_IPGECRUM3, 16, 16);
    cw_instantiate_reg(CW_IPGENSV3_IPGENUM3, "IPGENSV3_IPGENUM3", 0x010C);
    CW_IPGENSV3  = new scml2::bitfield<uint>(IPGENSV3->name() , CW_IPGENSV3_IPGENUM3 ,  0,  8);
    CW_IPGENUM3  = new scml2::bitfield<uint>(IPGENUM3->name() , CW_IPGENSV3_IPGENUM3 ,  8,  8);
    cw_instantiate_reg(CW_IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3, "IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3", 0x0110);
    CW_IPGPMTSV0[3] = new scml2::bitfield<uint>(IPGPMTSV0[3]->name(), CW_IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3,  0,  8);
    CW_IPGPMTSV1[3] = new scml2::bitfield<uint>(IPGPMTSV1[3]->name(), CW_IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3,  8,  8);
    CW_IPGPMTSV2[3] = new scml2::bitfield<uint>(IPGPMTSV2[3]->name(), CW_IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3, 16,  8);
    CW_IPGPMTSV3[3] = new scml2::bitfield<uint>(IPGPMTSV3[3]->name(), CW_IPGPMTSV0_3_IPGPMTSV1_3_IPGPMTSV2_3_IPGPMTSV3_3, 24,  8);
    cw_instantiate_reg(CW_IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3, "IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3", 0x0120);
    CW_IPGPMTUM0[3] = new scml2::bitfield<uint>(IPGPMTUM0[3]->name(), CW_IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3,  0,  8);
    CW_IPGPMTUM1[3] = new scml2::bitfield<uint>(IPGPMTUM1[3]->name(), CW_IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3,  8,  8);
    CW_IPGPMTUM2[3] = new scml2::bitfield<uint>(IPGPMTUM2[3]->name(), CW_IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3, 16,  8);
    CW_IPGPMTUM3[3] = new scml2::bitfield<uint>(IPGPMTUM3[3]->name(), CW_IPGPMTUM0_3_IPGPMTUM1_3_IPGPMTUM2_3_IPGPMTUM3_3, 24,  8);
    cw_instantiate_reg(CW_IPGADRUM   , IPGADRUM->name() , IPGADRUM->addr() );
    cw_instantiate_reg(CW_IPGADRSV0  , IPGADRSV0->name(), IPGADRSV0->addr());
    cw_instantiate_reg(CW_IPGADRUM0  , IPGADRUM0->name(), IPGADRUM0->addr());
    cw_instantiate_reg(CW_IPGADRSV1  , IPGADRSV1->name(), IPGADRSV1->addr());
    cw_instantiate_reg(CW_IPGADRUM1  , IPGADRUM1->name(), IPGADRUM1->addr());
    cw_instantiate_reg(CW_IPGADRSV2  , IPGADRSV2->name(), IPGADRSV2->addr());
    cw_instantiate_reg(CW_IPGADRUM2  , IPGADRUM2->name(), IPGADRUM2->addr());
    cw_instantiate_reg(CW_IPGADRSV3  , IPGADRSV3->name(), IPGADRSV3->addr());
    cw_instantiate_reg(CW_IPGADRUM3  , IPGADRUM3->name(), IPGADRUM3->addr());
    #endif
    if (mVersion != "G3KH") {
        mCurReg = mRegArray[index++] = new SRegList(IPGECRUM   , mCurReg, 0,  2,      "16", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGADRUM   , mCurReg, 0,  4,      "32", "8|16|32");
    } else {//G3KH
        mCurReg = mRegArray[index++] = new SRegList(IPGECRUM   , mCurReg, 0,  2,      "8|16", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGADRUM   , mCurReg, 0,  4,      "8|16|32", "8|16|32");
    }
    mCurReg = mRegArray[index++] = new SRegList(IPGENUM    , mCurReg, 0,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_IPGPMTUM ; i++) {
        if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i != 0) && (i != 1))) { 
            mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM   [i], mCurReg, i,  1,       "8", "8|16|32");
        }
    }
    if (mVersion != "G3KH") {
        mCurReg = mRegArray[index++] = new SRegList(IPGECRSV0  , mCurReg, 0,  2,      "16", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGECRUM0  , mCurReg, 0,  2,      "16", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGADRSV0  , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGADRUM0  , mCurReg, 0,  4,      "32", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGENSV0   , mCurReg, 0,  1,       "8", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(IPGENUM0   , mCurReg, 0,  1,       "8", "8|16|32");
        if (mVersion != "G3MH") {
            for(uint i = 0; i < emNUM_IPGPMTSV0; i++) mCurReg = mRegArray[index++] = new SRegList(IPGPMTSV0  [i], mCurReg, i,  1,       "8", "8|16|32");
            for(uint i = 0; i < emNUM_IPGPMTSV1; i++) mCurReg = mRegArray[index++] = new SRegList(IPGPMTSV1  [i], mCurReg, i,  1,       "8", "8|16|32");
        }
        for(uint i = 0; i < emNUM_IPGPMTSV2; i++) { 
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTSV2  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV3; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTSV3  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTSV4  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        if (mVersion != "G3MH") {
            for(uint i = 0; i < emNUM_IPGPMTUM0; i++) mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM0  [i], mCurReg, i,  1,       "8", "8|16|32");
            for(uint i = 0; i < emNUM_IPGPMTUM1; i++) mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM1  [i], mCurReg, i,  1,       "8", "8|16|32");
        }
        for(uint i = 0; i < emNUM_IPGPMTUM2; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM2  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM3; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM3  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
            if ((mVersion != "G3MH") || ((mVersion == "G3MH") && (i == 0))) {
                mCurReg = mRegArray[index++] = new SRegList(IPGPMTUM4  [i], mCurReg, i,  1,       "8", "8|16|32");
            }
        }
        if (mVersion != "G3MH") {
            mCurReg = mRegArray[index++] = new SRegList(IPGECRSV1  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGECRUM1  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRSV1  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRUM1  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENSV1   , mCurReg, 0,  1,       "8", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENUM1   , mCurReg, 0,  1,       "8", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGECRSV2  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGECRUM2  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRSV2  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRUM2  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENSV2   , mCurReg, 0,  1,       "8", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENUM2   , mCurReg, 0,  1,       "8", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGECRSV3  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGECRUM3  , mCurReg, 0,  2,      "16", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRSV3  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGADRUM3  , mCurReg, 0,  4,      "32", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENSV3   , mCurReg, 0,  1,       "8", "8|16|32");
            mCurReg = mRegArray[index++] = new SRegList(IPGENUM3   , mCurReg, 0,  1,       "8", "8|16|32");
        }
    }

    mRegList = mCurReg;

    (*IPGECRUM   ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPGECRUM   ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPGECRUM   ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPGECRUM   ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    if ((mVersion != "G3MH") && (mVersion != "G3KH")) {
        (*IPGECRUM   ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        if (mVersion == "G3M_V30") {
            (*IPGECRUM ) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM ) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        } else {
            (*IPGECRUM ) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        }
    } else if (mVersion == "G3MH") {
        (*IPGECRUM   ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    } else {//G3KH
        (*IPGECRUM   ) ( 4,  4, "BY"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM   ) ( 5,  5, "HW"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM   ) ( 6,  6, "WD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    (*IPGADRUM   ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPGENUM    ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*IPGENUM    ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_IPGPMTUM; i++) {
        if ((i != 3)&&(i != 4)) {
            if (mVersion != "G3KH") {
                (*IPGPMTUM [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        } else if ((i == 3) && (mVersion == "G3MH")) {
            (*IPGPMTUM [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        }
        if (i != 1) {
            if (mVersion != "G3KH") {
                (*IPGPMTUM [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {//G3KH
                if ((i!=0) && (i!=3)) {
                    (*IPGPMTUM [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                    (*IPGPMTUM [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                }
            }
            if (((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30"))) ||
                ((i == 2)&&(mVersion != "G3KH")) || (i==0) || (i==3)) {
                (*IPGPMTUM [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        if ((i == 0)||((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30"))) ||
            (((i == 1) || (i == 2) || (i == 3)) && (mVersion != "G3KH"))) {
            (*IPGPMTUM [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        }
    }
    if (mVersion != "G3KH") {
        (*IPGECRSV0  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRSV0  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRSV0  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRSV0  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRSV0  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        if (mVersion == "G3M_V30") {
            (*IPGECRSV0) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV0) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        } else {
            if (mVersion != "G3MH") {
                (*IPGECRSV0) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        (*IPGECRUM0  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM0  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM0  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM0  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGECRUM0  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        if (mVersion == "G3M_V30") {
            (*IPGECRUM0) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM0) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        } else {
            if (mVersion != "G3MH") {
                (*IPGECRUM0) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        (*IPGADRSV0  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGADRUM0  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGENSV0   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGENSV0   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGENUM0   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*IPGENUM0   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        if (mVersion != "G3MH") {
            (*IPGECRSV1  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV1  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV1  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV1  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV1  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRSV1) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRSV1) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRSV1) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGECRSV2  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV2  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV2  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV2  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV2  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRSV2) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRSV2) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRSV2) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGECRSV3  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV3  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV3  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV3  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRSV3  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRSV3) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRSV3) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRSV3) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGECRUM1  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM1  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM1  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM1  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM1  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRUM1) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRUM1) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRUM1) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGECRUM2  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM2  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM2  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM2  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM2  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRUM2) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRUM2) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRUM2) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGECRUM3  ) ( 0,  0, "VD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM3  ) ( 1,  1, "RD"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM3  ) ( 2,  2, "WR"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM3  ) ( 3,  3, "EX"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGECRUM3  ) ( 7,  4, "DS"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            if (mVersion == "G3M_V30") {
                (*IPGECRUM3) (10,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGECRUM3) (13, 11, "PEID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            } else {
                (*IPGECRUM3) (13,  8, "TCID"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            (*IPGADRSV1  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGADRSV2  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGADRSV3  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGADRUM1  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGADRUM2  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGADRUM3  ) (31,  0, "EADR"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV1   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV1   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV2   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV2   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV3   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENSV3   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM1   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM1   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM2   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM2   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM3   ) ( 0,  0, "E"       , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            (*IPGENUM3   ) ( 1,  1, "IRE"     , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            for(uint i = 0; i < emNUM_IPGPMTUM0; i++) {
                (*IPGPMTUM0  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM0  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM0  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM0  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM0  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM0  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            for(uint i = 0; i < emNUM_IPGPMTUM1; i++) {
                (*IPGPMTUM1  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM1  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            for(uint i = 0; i < emNUM_IPGPMTSV0; i++) {
                (*IPGPMTSV0  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV0  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV0  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV0  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV0  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV0  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
            for(uint i = 0; i < emNUM_IPGPMTSV1; i++) {
                (*IPGPMTSV1  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV1  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM2; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTUM2  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM2  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM2  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM2  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM2  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM2  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM3; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTUM3  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM3  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                if (mVersion == "G3MH") {
                    (*IPGPMTUM3  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                }
                (*IPGPMTUM3  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM3  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM3  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTUM4  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTUM4  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    (*IPGPMTUM4  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                    (*IPGPMTUM4  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                    (*IPGPMTUM4  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                }
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTSV4  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV4  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    (*IPGPMTSV4  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                    (*IPGPMTSV4  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                    (*IPGPMTSV4  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                }
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV3; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTSV3  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV3  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                if (mVersion == "G3MH") {
                    (*IPGPMTSV3  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                }
                (*IPGPMTSV3  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV3  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV3  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
        for(uint i = 0; i < emNUM_IPGPMTSV2; i++) {
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*IPGPMTSV2  [i]) ( 0,  0, "R0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV2  [i]) ( 1,  1, "W0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV2  [i]) ( 2,  2, "X0"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV2  [i]) ( 4,  4, "R1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV2  [i]) ( 5,  5, "W1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
                (*IPGPMTSV2  [i]) ( 6,  6, "X1"      , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
            }
        }
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register

    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cipg_regif::~Cipg_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cipg_regif::uint Cipg_regif::bit_select(
                        cuint val,    ///< [in] Writting address
                        cuint start,  ///< [in] start bit position
                        cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cipg_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                        const unsigned char *p_data,   ///< [in] Writing data
                        cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cipg_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                        unsigned char *p_data,   ///< [out] Reading data
                        cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cipg_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cipg_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cipg_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                const unsigned char *p_data,  ///< [in] Writing data
                                cuint size,                   ///< [in] Data size (byte)
                                bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 10-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cipg_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size,              ///< [in]  Data size (byte)
                                bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 10-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cipg_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                             unsigned char *p_data,          ///< [out] Reading data
                             cuint size,                     ///< [in]  Data size (byte)
                             cuint reg_index,                ///< [in] Register index
                             bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 //Access size less than the register's length
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 //Access size less than the register's length
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 //Access size less than the register's length
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cipg_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                             const unsigned char *p_data,      ///< [in] Writing data
                             cuint size,                       ///< [in] Data size (byte)
                             cuint reg_index,                  ///< [in] Register index
                             bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 //Access size less than the register's length
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 //Access size less than the register's length
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cipg_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cipg_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cipg_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cipg_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cipg_regif::InitLocalVal()
{
    // Initialize local variables
    IPGECRUM_VD  = 0x0;
    IPGECRUM_RD  = 0x0;
    IPGECRUM_WR  = 0x0;
    IPGECRUM_EX  = 0x0;
    IPGECRUM_DS  = 0x0;
    IPGECRUM_BY  = 0x0;
    IPGECRUM_HW  = 0x0;
    IPGECRUM_WD  = 0x0;
    IPGECRUM_TCID = 0x0;
    IPGECRUM_PEID = 0x0;
    IPGADRUM_EADR = 0x0;
    IPGENUM_E    = 0x0;
    IPGENUM_IRE  = 0x0;
    for(uint i = 0; i < emNUM_IPGPMTUM; i++) {
        IPGPMTUM_R0 [i] = 0x0;
        IPGPMTUM_W0 [i] = 0x0;
        IPGPMTUM_X0 [i] = 0x0;
        IPGPMTUM_R1 [i] = 0x0;
        IPGPMTUM_W1 [i] = 0x0;
        IPGPMTUM_X1 [i] = 0x0;
    }
    IPGECRSV0_VD = 0x0;
    IPGECRSV0_RD = 0x0;
    IPGECRSV0_WR = 0x0;
    IPGECRSV0_EX = 0x0;
    IPGECRSV0_DS = 0x0;
    IPGECRSV0_TCID = 0x0;
    IPGECRSV0_PEID = 0x0;
    IPGECRSV1_VD = 0x0;
    IPGECRSV1_RD = 0x0;
    IPGECRSV1_WR = 0x0;
    IPGECRSV1_EX = 0x0;
    IPGECRSV1_DS = 0x0;
    IPGECRSV1_TCID = 0x0;
    IPGECRSV1_PEID = 0x0;
    IPGECRSV2_VD = 0x0;
    IPGECRSV2_RD = 0x0;
    IPGECRSV2_WR = 0x0;
    IPGECRSV2_EX = 0x0;
    IPGECRSV2_DS = 0x0;
    IPGECRSV2_TCID = 0x0;
    IPGECRSV2_PEID = 0x0;
    IPGECRSV3_VD = 0x0;
    IPGECRSV3_RD = 0x0;
    IPGECRSV3_WR = 0x0;
    IPGECRSV3_EX = 0x0;
    IPGECRSV3_DS = 0x0;
    IPGECRSV3_TCID = 0x0;
    IPGECRSV3_PEID = 0x0;
    IPGECRUM0_VD = 0x0;
    IPGECRUM0_RD = 0x0;
    IPGECRUM0_WR = 0x0;
    IPGECRUM0_EX = 0x0;
    IPGECRUM0_DS = 0x0;
    IPGECRUM0_TCID = 0x0;
    IPGECRUM0_PEID = 0x0;
    IPGECRUM1_VD = 0x0;
    IPGECRUM1_RD = 0x0;
    IPGECRUM1_WR = 0x0;
    IPGECRUM1_EX = 0x0;
    IPGECRUM1_DS = 0x0;
    IPGECRUM1_TCID = 0x0;
    IPGECRUM1_PEID = 0x0;
    IPGECRUM2_VD = 0x0;
    IPGECRUM2_RD = 0x0;
    IPGECRUM2_WR = 0x0;
    IPGECRUM2_EX = 0x0;
    IPGECRUM2_DS = 0x0;
    IPGECRUM2_TCID = 0x0;
    IPGECRUM2_PEID = 0x0;
    IPGECRUM3_VD = 0x0;
    IPGECRUM3_RD = 0x0;
    IPGECRUM3_WR = 0x0;
    IPGECRUM3_EX = 0x0;
    IPGECRUM3_DS = 0x0;
    IPGECRUM3_TCID = 0x0;
    IPGECRUM3_PEID = 0x0;
    IPGADRSV0_EADR = 0x0;
    IPGADRSV1_EADR = 0x0;
    IPGADRSV2_EADR = 0x0;
    IPGADRSV3_EADR = 0x0;
    IPGADRUM0_EADR = 0x0;
    IPGADRUM1_EADR = 0x0;
    IPGADRUM2_EADR = 0x0;
    IPGADRUM3_EADR = 0x0;
    IPGENSV0_E   = 0x0;
    IPGENSV0_IRE = 0x0;
    IPGENSV1_E   = 0x0;
    IPGENSV1_IRE = 0x0;
    IPGENSV2_E   = 0x0;
    IPGENSV2_IRE = 0x0;
    IPGENSV3_E   = 0x0;
    IPGENSV3_IRE = 0x0;
    IPGENUM0_E   = 0x0;
    IPGENUM0_IRE = 0x0;
    IPGENUM1_E   = 0x0;
    IPGENUM1_IRE = 0x0;
    IPGENUM2_E   = 0x0;
    IPGENUM2_IRE = 0x0;
    IPGENUM3_E   = 0x0;
    IPGENUM3_IRE = 0x0;
    for(uint i = 0; i < emNUM_IPGPMTSV0; i++) {
        IPGPMTSV0_R0[i] = 0x0;
        IPGPMTSV0_W0[i] = 0x0;
        IPGPMTSV0_X0[i] = 0x0;
        IPGPMTSV0_R1[i] = 0x0;
        IPGPMTSV0_W1[i] = 0x0;
        IPGPMTSV0_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTSV1; i++) {
        IPGPMTSV1_X0[i] = 0x0;
        IPGPMTSV1_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTSV2; i++) {
        IPGPMTSV2_R0[i] = 0x0;
        IPGPMTSV2_W0[i] = 0x0;
        IPGPMTSV2_X0[i] = 0x0;
        IPGPMTSV2_R1[i] = 0x0;
        IPGPMTSV2_W1[i] = 0x0;
        IPGPMTSV2_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTSV3; i++) {
        IPGPMTSV3_R0[i] = 0x0;
        IPGPMTSV3_W0[i] = 0x0;
        IPGPMTSV3_X0[i] = 0x0;
        IPGPMTSV3_R1[i] = 0x0;
        IPGPMTSV3_W1[i] = 0x0;
        IPGPMTSV3_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTSV4; i++) {
        IPGPMTSV4_R0[i] = 0x0;
        IPGPMTSV4_W0[i] = 0x0;
        IPGPMTSV4_R1[i] = 0x0;
        IPGPMTSV4_W1[i] = 0x0;
        IPGPMTSV4_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTUM0; i++) {
        IPGPMTUM0_R0[i] = 0x0;
        IPGPMTUM0_W0[i] = 0x0;
        IPGPMTUM0_X0[i] = 0x0;
        IPGPMTUM0_R1[i] = 0x0;
        IPGPMTUM0_W1[i] = 0x0;
        IPGPMTUM0_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTUM1; i++) {
        IPGPMTUM1_X0[i] = 0x0;
        IPGPMTUM1_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTUM2; i++) {
        IPGPMTUM2_R0[i] = 0x0;
        IPGPMTUM2_W0[i] = 0x0;
        IPGPMTUM2_X0[i] = 0x0;
        IPGPMTUM2_R1[i] = 0x0;
        IPGPMTUM2_W1[i] = 0x0;
        IPGPMTUM2_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTUM3; i++) {
        IPGPMTUM3_R0[i] = 0x0;
        IPGPMTUM3_W0[i] = 0x0;
        IPGPMTUM3_X0[i] = 0x0;
        IPGPMTUM3_R1[i] = 0x0;
        IPGPMTUM3_W1[i] = 0x0;
        IPGPMTUM3_X1[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_IPGPMTUM4; i++) {
        IPGPMTUM4_R0[i] = 0x0;
        IPGPMTUM4_W0[i] = 0x0;
        IPGPMTUM4_R1[i] = 0x0;
        IPGPMTUM4_W1[i] = 0x0;
        IPGPMTUM4_X1[i] = 0x0;
    }
}

/// Update bit value to local value
/// @return None
void Cipg_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0002) {
        IPGECRUM_VD                   = (*IPGECRUM )["VD"       ];
        IPGECRUM_RD                   = (*IPGECRUM )["RD"       ];
        IPGECRUM_WR                   = (*IPGECRUM )["WR"       ];
        IPGECRUM_EX                   = (*IPGECRUM )["EX"       ];
        if (mVersion != "G3KH") {
            IPGECRUM_DS                   = (*IPGECRUM )["DS"       ];
            if (mVersion != "G3MH") {
                IPGECRUM_TCID                 = (*IPGECRUM )["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRUM_PEID                 = (*IPGECRUM )["PEID"     ];
                }
            }
        } else {//G3KH
            IPGECRUM_BY                   = (*IPGECRUM )["BY"       ];
            IPGECRUM_HW                   = (*IPGECRUM )["HW"       ];
            IPGECRUM_WD                   = (*IPGECRUM )["WD"       ];
        }
        return;
    }
    if (addr == 0x0008) {
        IPGADRUM_EADR                 = (*IPGADRUM )["EADR"     ];
        return;
    }
    if (addr == 0x000D) {
        IPGENUM_E                     = (*IPGENUM  )["E"        ];
        IPGENUM_IRE                   = (*IPGENUM  )["IRE"      ];
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(1*4)) && ((addr-0x0020)%1 == 0)) {
        uint i = (addr - 0x0020)/1;
        if ((i != 3)&&(i != 4)) {
            if (mVersion != "G3KH") {
                IPGPMTUM_X0                  [i] = (*(IPGPMTUM [i]))["X0"       ];
            }
        } else if ((i == 3) && (mVersion == "G3MH")) {
            IPGPMTUM_X0                  [i] = (*(IPGPMTUM [i]))["X0"       ];
        }
        if (i != 1) {
            if (mVersion != "G3KH") {
                IPGPMTUM_R0                  [i] = (*(IPGPMTUM [i]))["R0"       ];
                IPGPMTUM_W0                  [i] = (*(IPGPMTUM [i]))["W0"       ];
            } else {//G3KH
                if ((i!=0) && (i!=3)) {
                    IPGPMTUM_R0                  [i] = (*(IPGPMTUM [i]))["R0"       ];
                    IPGPMTUM_W0                  [i] = (*(IPGPMTUM [i]))["W0"       ];
                }
            }
            if ((i != 4)||((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30")))) {
                if ((i !=2) && (mVersion != "G3KH")) {
                    IPGPMTUM_R1                  [i] = (*(IPGPMTUM [i]))["R1"       ];
                    IPGPMTUM_W1                  [i] = (*(IPGPMTUM [i]))["W1"       ];
                }
            }
        }
        if ((i != 4)||((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30")))) {
            if (((i == 0) && (mVersion != "G3MH")) || ((i != 0) && (mVersion != "G3KH"))) {
                IPGPMTUM_X1                  [i] = (*(IPGPMTUM [i]))["X1"       ];
            }
        }
        return;
    }
    if (mVersion != "G3KH") {
        if (addr == 0x0040) {
            IPGECRSV0_VD                  = (*IPGECRSV0)["VD"       ];
            IPGECRSV0_RD                  = (*IPGECRSV0)["RD"       ];
            IPGECRSV0_WR                  = (*IPGECRSV0)["WR"       ];
            IPGECRSV0_EX                  = (*IPGECRSV0)["EX"       ];
            IPGECRSV0_DS                  = (*IPGECRSV0)["DS"       ];
            if (mVersion != "G3MH") {
                IPGECRSV0_TCID                = (*IPGECRSV0)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRSV0_PEID                = (*IPGECRSV0)["PEID"     ];
                }
            }
            return;
        }
        if (addr == 0x0042) {
            IPGECRUM0_VD                  = (*IPGECRUM0)["VD"       ];
            IPGECRUM0_RD                  = (*IPGECRUM0)["RD"       ];
            IPGECRUM0_WR                  = (*IPGECRUM0)["WR"       ];
            IPGECRUM0_EX                  = (*IPGECRUM0)["EX"       ];
            IPGECRUM0_DS                  = (*IPGECRUM0)["DS"       ];
            if (mVersion != "G3MH") {
                IPGECRUM0_TCID                = (*IPGECRUM0)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRUM0_PEID                = (*IPGECRUM0)["PEID"     ];
                }
            }
            return;
        }
        if (addr == 0x0044) {
            IPGADRSV0_EADR                = (*IPGADRSV0)["EADR"     ];
            return;
        }
        if (addr == 0x0048) {
            IPGADRUM0_EADR                = (*IPGADRUM0)["EADR"     ];
            return;
        }
        if (addr == 0x004C) {
            IPGENSV0_E                    = (*IPGENSV0 )["E"        ];
            IPGENSV0_IRE                  = (*IPGENSV0 )["IRE"      ];
            return;
        }
        if (addr == 0x004D) {
            IPGENUM0_E                    = (*IPGENUM0 )["E"        ];
            IPGENUM0_IRE                  = (*IPGENUM0 )["IRE"      ];
            return;
        }
        if (mVersion != "G3MH") {
            if (addr == 0x0080) {
                IPGECRSV1_VD                  = (*IPGECRSV1)["VD"       ];
                IPGECRSV1_RD                  = (*IPGECRSV1)["RD"       ];
                IPGECRSV1_WR                  = (*IPGECRSV1)["WR"       ];
                IPGECRSV1_EX                  = (*IPGECRSV1)["EX"       ];
                IPGECRSV1_DS                  = (*IPGECRSV1)["DS"       ];
                IPGECRSV1_TCID                = (*IPGECRSV1)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRSV1_PEID                = (*IPGECRSV1)["PEID"     ];
                }
                return;
            }
            if (addr == 0x00C0) {
                IPGECRSV2_VD                  = (*IPGECRSV2)["VD"       ];
                IPGECRSV2_RD                  = (*IPGECRSV2)["RD"       ];
                IPGECRSV2_WR                  = (*IPGECRSV2)["WR"       ];
                IPGECRSV2_EX                  = (*IPGECRSV2)["EX"       ];
                IPGECRSV2_DS                  = (*IPGECRSV2)["DS"       ];
                IPGECRSV2_TCID                = (*IPGECRSV2)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRSV2_PEID                = (*IPGECRSV2)["PEID"     ];
                }
                return;
            }
            if (addr == 0x0100) {
                IPGECRSV3_VD                  = (*IPGECRSV3)["VD"       ];
                IPGECRSV3_RD                  = (*IPGECRSV3)["RD"       ];
                IPGECRSV3_WR                  = (*IPGECRSV3)["WR"       ];
                IPGECRSV3_EX                  = (*IPGECRSV3)["EX"       ];
                IPGECRSV3_DS                  = (*IPGECRSV3)["DS"       ];
                IPGECRSV3_TCID                = (*IPGECRSV3)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRSV3_PEID                = (*IPGECRSV3)["PEID"     ];
                }
                return;
            }
            if (addr == 0x0082) {
                IPGECRUM1_VD                  = (*IPGECRUM1)["VD"       ];
                IPGECRUM1_RD                  = (*IPGECRUM1)["RD"       ];
                IPGECRUM1_WR                  = (*IPGECRUM1)["WR"       ];
                IPGECRUM1_EX                  = (*IPGECRUM1)["EX"       ];
                IPGECRUM1_DS                  = (*IPGECRUM1)["DS"       ];
                IPGECRUM1_TCID                = (*IPGECRUM1)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRUM1_PEID                = (*IPGECRUM1)["PEID"     ];
                }
                return;
            }
            if (addr == 0x00C2) {
                IPGECRUM2_VD                  = (*IPGECRUM2)["VD"       ];
                IPGECRUM2_RD                  = (*IPGECRUM2)["RD"       ];
                IPGECRUM2_WR                  = (*IPGECRUM2)["WR"       ];
                IPGECRUM2_EX                  = (*IPGECRUM2)["EX"       ];
                IPGECRUM2_DS                  = (*IPGECRUM2)["DS"       ];
                IPGECRUM2_TCID                = (*IPGECRUM2)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRUM2_PEID                = (*IPGECRUM2)["PEID"     ];
                }
                return;
            }
            if (addr == 0x0102) {
                IPGECRUM3_VD                  = (*IPGECRUM3)["VD"       ];
                IPGECRUM3_RD                  = (*IPGECRUM3)["RD"       ];
                IPGECRUM3_WR                  = (*IPGECRUM3)["WR"       ];
                IPGECRUM3_EX                  = (*IPGECRUM3)["EX"       ];
                IPGECRUM3_DS                  = (*IPGECRUM3)["DS"       ];
                IPGECRUM3_TCID                = (*IPGECRUM3)["TCID"     ];
                if (mVersion == "G3M_V30") {
                    IPGECRUM3_PEID                = (*IPGECRUM3)["PEID"     ];
                }
                return;
            }
            if (addr == 0x0084) {
                IPGADRSV1_EADR                = (*IPGADRSV1)["EADR"     ];
                return;
            }
            if (addr == 0x00C4) {
                IPGADRSV2_EADR                = (*IPGADRSV2)["EADR"     ];
                return;
            }
            if (addr == 0x0104) {
                IPGADRSV3_EADR                = (*IPGADRSV3)["EADR"     ];
                return;
            }
            if (addr == 0x0088) {
                IPGADRUM1_EADR                = (*IPGADRUM1)["EADR"     ];
                return;
            }
            if (addr == 0x00C8) {
                IPGADRUM2_EADR                = (*IPGADRUM2)["EADR"     ];
                return;
            }
            if (addr == 0x0108) {
                IPGADRUM3_EADR                = (*IPGADRUM3)["EADR"     ];
                return;
            }
            if (addr == 0x008C) {
                IPGENSV1_E                    = (*IPGENSV1 )["E"        ];
                IPGENSV1_IRE                  = (*IPGENSV1 )["IRE"      ];
                return;
            }
            if (addr == 0x00CC) {
                IPGENSV2_E                    = (*IPGENSV2 )["E"        ];
                IPGENSV2_IRE                  = (*IPGENSV2 )["IRE"      ];
                return;
            }
            if (addr == 0x010C) {
                IPGENSV3_E                    = (*IPGENSV3 )["E"        ];
                IPGENSV3_IRE                  = (*IPGENSV3 )["IRE"      ];
                return;
            }
            if (addr == 0x008D) {
                IPGENUM1_E                    = (*IPGENUM1 )["E"        ];
                IPGENUM1_IRE                  = (*IPGENUM1 )["IRE"      ];
                return;
            }
            if (addr == 0x00CD) {
                IPGENUM2_E                    = (*IPGENUM2 )["E"        ];
                IPGENUM2_IRE                  = (*IPGENUM2 )["IRE"      ];
                return;
            }
            if (addr == 0x010D) {
                IPGENUM3_E                    = (*IPGENUM3 )["E"        ];
                IPGENUM3_IRE                  = (*IPGENUM3 )["IRE"      ];
                return;
            }
        }
        if (mVersion != "G3MH") {
            if ((0x0050 <= addr) && (addr <= (0x0050)+(64*3)) && ((addr-0x0050)%64 == 0)) {
                uint i = (addr - 0x0050)/64;
                IPGPMTSV0_R0                 [i] = (*(IPGPMTSV0[i]))["R0"       ];
                IPGPMTSV0_W0                 [i] = (*(IPGPMTSV0[i]))["W0"       ];
                IPGPMTSV0_X0                 [i] = (*(IPGPMTSV0[i]))["X0"       ];
                IPGPMTSV0_R1                 [i] = (*(IPGPMTSV0[i]))["R1"       ];
                IPGPMTSV0_W1                 [i] = (*(IPGPMTSV0[i]))["W1"       ];
                IPGPMTSV0_X1                 [i] = (*(IPGPMTSV0[i]))["X1"       ];
                return;
            }
            if ((0x0051 <= addr) && (addr <= (0x0051)+(64*3)) && ((addr-0x0051)%64 == 0)) {
                uint i = (addr - 0x0051)/64;
                IPGPMTSV1_X0                 [i] = (*(IPGPMTSV1[i]))["X0"       ];
                IPGPMTSV1_X1                 [i] = (*(IPGPMTSV1[i]))["X1"       ];
                return;
            }
        }
        if ((0x0052 <= addr) && (addr <= (0x0052)+(64*3)) && ((addr-0x0052)%64 == 0)) {
            uint i = (addr - 0x0052)/64;
            if ((mVersion != "G3MH") || ((i==0) && (mVersion == "G3MH"))) {
                IPGPMTSV2_R0                 [i] = (*(IPGPMTSV2[i]))["R0"       ];
                IPGPMTSV2_W0                 [i] = (*(IPGPMTSV2[i]))["W0"       ];
                IPGPMTSV2_X0                 [i] = (*(IPGPMTSV2[i]))["X0"       ];
                IPGPMTSV2_R1                 [i] = (*(IPGPMTSV2[i]))["R1"       ];
                IPGPMTSV2_W1                 [i] = (*(IPGPMTSV2[i]))["W1"       ];
                IPGPMTSV2_X1                 [i] = (*(IPGPMTSV2[i]))["X1"       ];
            }
            return;
        }
        if ((0x0053 <= addr) && (addr <= (0x0053)+(64*3)) && ((addr-0x0053)%64 == 0)) {
            uint i = (addr - 0x0053)/64;
            if ((mVersion != "G3MH") || ((i==0) && (mVersion == "G3MH"))) {
                IPGPMTSV3_R0                 [i] = (*(IPGPMTSV3[i]))["R0"       ];
                IPGPMTSV3_W0                 [i] = (*(IPGPMTSV3[i]))["W0"       ];
                if (mVersion == "G3MH") {
                    IPGPMTSV3_X0                 [i] = (*(IPGPMTSV3[i]))["X0"       ];
                }
                IPGPMTSV3_R1                 [i] = (*(IPGPMTSV3[i]))["R1"       ];
                IPGPMTSV3_W1                 [i] = (*(IPGPMTSV3[i]))["W1"       ];
                IPGPMTSV3_X1                 [i] = (*(IPGPMTSV3[i]))["X1"       ];
            }
            return;
        }
        if ((0x0054 <= addr) && (addr <= (0x0054)+(64*3)) && ((addr-0x0054)%64 == 0)) {
            uint i = (addr - 0x0054)/64;
            if ((mVersion != "G3MH") || ((i==0) && (mVersion == "G3MH"))) {
                IPGPMTSV4_R0                 [i] = (*(IPGPMTSV4[i]))["R0"       ];
                IPGPMTSV4_W0                 [i] = (*(IPGPMTSV4[i]))["W0"       ];
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    IPGPMTSV4_R1                 [i] = (*(IPGPMTSV4[i]))["R1"       ];
                    IPGPMTSV4_W1                 [i] = (*(IPGPMTSV4[i]))["W1"       ];
                    IPGPMTSV4_X1                 [i] = (*(IPGPMTSV4[i]))["X1"       ];
                }
            }
            return;
        }
        if (mVersion != "G3MH") {
            if ((0x0060 <= addr) && (addr <= (0x0060)+(64*3)) && ((addr-0x0060)%64 == 0)) {
                uint i = (addr - 0x0060)/64;
                IPGPMTUM0_R0                 [i] = (*(IPGPMTUM0[i]))["R0"       ];
                IPGPMTUM0_W0                 [i] = (*(IPGPMTUM0[i]))["W0"       ];
                IPGPMTUM0_X0                 [i] = (*(IPGPMTUM0[i]))["X0"       ];
                IPGPMTUM0_R1                 [i] = (*(IPGPMTUM0[i]))["R1"       ];
                IPGPMTUM0_W1                 [i] = (*(IPGPMTUM0[i]))["W1"       ];
                IPGPMTUM0_X1                 [i] = (*(IPGPMTUM0[i]))["X1"       ];
                return;
            }
            if ((0x0061 <= addr) && (addr <= (0x0061)+(64*3)) && ((addr-0x0061)%64 == 0)) {
                uint i = (addr - 0x0061)/64;
                IPGPMTUM1_X0                 [i] = (*(IPGPMTUM1[i]))["X0"       ];
                IPGPMTUM1_X1                 [i] = (*(IPGPMTUM1[i]))["X1"       ];
                return;
            }
        }
        if ((0x0062 <= addr) && (addr <= (0x0062)+(64*3)) && ((addr-0x0062)%64 == 0)) {
            uint i = (addr - 0x0062)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                IPGPMTUM2_R0                 [i] = (*(IPGPMTUM2[i]))["R0"       ];
                IPGPMTUM2_W0                 [i] = (*(IPGPMTUM2[i]))["W0"       ];
                IPGPMTUM2_X0                 [i] = (*(IPGPMTUM2[i]))["X0"       ];
                IPGPMTUM2_R1                 [i] = (*(IPGPMTUM2[i]))["R1"       ];
                IPGPMTUM2_W1                 [i] = (*(IPGPMTUM2[i]))["W1"       ];
                IPGPMTUM2_X1                 [i] = (*(IPGPMTUM2[i]))["X1"       ];
            }
            return;
        }
        if ((0x0063 <= addr) && (addr <= (0x0063)+(64*3)) && ((addr-0x0063)%64 == 0)) {
            uint i = (addr - 0x0063)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                IPGPMTUM3_R0                 [i] = (*(IPGPMTUM3[i]))["R0"       ];
                IPGPMTUM3_W0                 [i] = (*(IPGPMTUM3[i]))["W0"       ];
                if (mVersion == "G3MH") {
                    IPGPMTUM3_X0                 [i] = (*(IPGPMTUM3[i]))["X0"       ];
                }
                IPGPMTUM3_R1                 [i] = (*(IPGPMTUM3[i]))["R1"       ];
                IPGPMTUM3_W1                 [i] = (*(IPGPMTUM3[i]))["W1"       ];
                IPGPMTUM3_X1                 [i] = (*(IPGPMTUM3[i]))["X1"       ];
            }
            return;
        }
        if ((0x0064 <= addr) && (addr <= (0x0064)+(64*3)) && ((addr-0x0064)%64 == 0)) {
            uint i = (addr - 0x0064)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                IPGPMTUM4_R0                 [i] = (*(IPGPMTUM4[i]))["R0"       ];
                IPGPMTUM4_W0                 [i] = (*(IPGPMTUM4[i]))["W0"       ];
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    IPGPMTUM4_R1                 [i] = (*(IPGPMTUM4[i]))["R1"       ];
                    IPGPMTUM4_W1                 [i] = (*(IPGPMTUM4[i]))["W1"       ];
                    IPGPMTUM4_X1                 [i] = (*(IPGPMTUM4[i]))["X1"       ];
                }
            }
            return;
        }
    }
}

/// Update local value to bit value
/// @return None
void Cipg_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0002) {
        (*IPGECRUM )["VD"       ] = IPGECRUM_VD;
        (*IPGECRUM )["RD"       ] = IPGECRUM_RD;
        (*IPGECRUM )["WR"       ] = IPGECRUM_WR;
        (*IPGECRUM )["EX"       ] = IPGECRUM_EX;
        if (mVersion != "G3KH") {
            (*IPGECRUM )["DS"       ] = IPGECRUM_DS;
            (*IPGECRUM )["TCID"     ] = IPGECRUM_TCID;
            if (mVersion == "G3M_V30") {
                (*IPGECRUM )["PEID"     ] = IPGECRUM_PEID;
            }
        } else {
            (*IPGECRUM )["BY"       ] = IPGECRUM_BY;
            (*IPGECRUM )["HW"       ] = IPGECRUM_HW;
            (*IPGECRUM )["WD"       ] = IPGECRUM_WD;
        }
        return;
    }
    if (addr == 0x0008) {
        (*IPGADRUM )["EADR"     ] = IPGADRUM_EADR;
        return;
    }
    if (addr == 0x000D) {
        (*IPGENUM  )["E"        ] = IPGENUM_E;
        (*IPGENUM  )["IRE"      ] = IPGENUM_IRE;
        return;
    }
    if ((0x0020 <= addr) && (addr <= (0x0020)+(1*4)) && ((addr-0x0020)%1 == 0)) {
        uint i = (addr - 0x0020)/1;
        if ((i != 3)&&(i != 4)) {
            if (mVersion != "G3KH") {
                (*(IPGPMTUM [i]))["X0"       ] = IPGPMTUM_X0[i];
            }
        } else if ((i == 3) && (mVersion == "G3MH")) {
            (*(IPGPMTUM [i]))["X0"       ] = IPGPMTUM_X0[i];
        }
        if (i != 1) {
            if (mVersion != "G3KH") {
                (*(IPGPMTUM [i]))["R0"       ] = IPGPMTUM_R0[i];
                (*(IPGPMTUM [i]))["W0"       ] = IPGPMTUM_W0[i];
            } else {//G3KH
                if ((i!=0) && (i!=3)) {
                    (*(IPGPMTUM [i]))["R0"       ] = IPGPMTUM_R0[i];
                    (*(IPGPMTUM [i]))["W0"       ] = IPGPMTUM_W0[i];
                }
            }
            if ((i != 4)||((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30")))) {
                if ((i !=2) && (mVersion != "G3KH")) {
                    (*(IPGPMTUM [i]))["R1"       ] = IPGPMTUM_R1[i];
                    (*(IPGPMTUM [i]))["W1"       ] = IPGPMTUM_W1[i];
                }
            }
        }
        if ((i != 4)||((i == 4)&&((mVersion == "G3M_V20")||(mVersion == "G3M_V30")))) {
            if (((i == 0) && (mVersion != "G3MH")) || ((i != 0) && (mVersion != "G3KH"))) {
                (*(IPGPMTUM [i]))["X1"       ] = IPGPMTUM_X1[i];
            }
        }
        return;
    }
    if (mVersion != "G3KH") {
        if (addr == 0x0040) {
            (*IPGECRSV0)["VD"       ] = IPGECRSV0_VD;
            (*IPGECRSV0)["RD"       ] = IPGECRSV0_RD;
            (*IPGECRSV0)["WR"       ] = IPGECRSV0_WR;
            (*IPGECRSV0)["EX"       ] = IPGECRSV0_EX;
            (*IPGECRSV0)["DS"       ] = IPGECRSV0_DS;
            if (mVersion != "G3MH") {
                (*IPGECRSV0)["TCID"     ] = IPGECRSV0_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRSV0)["PEID"     ] = IPGECRSV0_PEID;
                }
            }
            return;
        }
        if (addr == 0x0042) {
            (*IPGECRUM0)["VD"       ] = IPGECRUM0_VD;
            (*IPGECRUM0)["RD"       ] = IPGECRUM0_RD;
            (*IPGECRUM0)["WR"       ] = IPGECRUM0_WR;
            (*IPGECRUM0)["EX"       ] = IPGECRUM0_EX;
            (*IPGECRUM0)["DS"       ] = IPGECRUM0_DS;
            if (mVersion != "G3MH") {
                (*IPGECRUM0)["TCID"     ] = IPGECRUM0_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRUM0)["PEID"     ] = IPGECRUM0_PEID;
                }
            }
            return;
        }
        if (addr == 0x0044) {
            (*IPGADRSV0)["EADR"     ] = IPGADRSV0_EADR;
            return;
        }
        if (addr == 0x0048) {
            (*IPGADRUM0)["EADR"     ] = IPGADRUM0_EADR;
            return;
        }
        if (addr == 0x004C) {
            (*IPGENSV0 )["E"        ] = IPGENSV0_E;
            (*IPGENSV0 )["IRE"      ] = IPGENSV0_IRE;
            return;
        }
        if (addr == 0x004D) {
            (*IPGENUM0 )["E"        ] = IPGENUM0_E;
            (*IPGENUM0 )["IRE"      ] = IPGENUM0_IRE;
            return;
        }
        if ((0x0052 <= addr) && (addr <= (0x0052)+(64*3)) && ((addr-0x0052)%64 == 0)) {
            uint i = (addr - 0x0052)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTSV2[i]))["R0"       ] = IPGPMTSV2_R0[i];
                (*(IPGPMTSV2[i]))["W0"       ] = IPGPMTSV2_W0[i];
                (*(IPGPMTSV2[i]))["X0"       ] = IPGPMTSV2_X0[i];
                (*(IPGPMTSV2[i]))["R1"       ] = IPGPMTSV2_R1[i];
                (*(IPGPMTSV2[i]))["W1"       ] = IPGPMTSV2_W1[i];
                (*(IPGPMTSV2[i]))["X1"       ] = IPGPMTSV2_X1[i];
            }
            return;
        }
        if ((0x0053 <= addr) && (addr <= (0x0053)+(64*3)) && ((addr-0x0053)%64 == 0)) {
            uint i = (addr - 0x0053)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTSV3[i]))["R0"       ] = IPGPMTSV3_R0[i];
                (*(IPGPMTSV3[i]))["W0"       ] = IPGPMTSV3_W0[i];
                if (mVersion == "G3MH") {
                    (*(IPGPMTSV3[i]))["X0"       ] = IPGPMTSV3_X0[i];
                }
                (*(IPGPMTSV3[i]))["R1"       ] = IPGPMTSV3_R1[i];
                (*(IPGPMTSV3[i]))["W1"       ] = IPGPMTSV3_W1[i];
                (*(IPGPMTSV3[i]))["X1"       ] = IPGPMTSV3_X1[i];
            }
            return;
        }
        if ((0x0054 <= addr) && (addr <= (0x0054)+(64*3)) && ((addr-0x0054)%64 == 0)) {
            uint i = (addr - 0x0054)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTSV4[i]))["R0"       ] = IPGPMTSV4_R0[i];
                (*(IPGPMTSV4[i]))["W0"       ] = IPGPMTSV4_W0[i];
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    (*(IPGPMTSV4[i]))["R1"       ] = IPGPMTSV4_R1[i];
                    (*(IPGPMTSV4[i]))["W1"       ] = IPGPMTSV4_W1[i];
                    (*(IPGPMTSV4[i]))["X1"       ] = IPGPMTSV4_X1[i];
                }
            }
            return;
        }
        if ((0x0062 <= addr) && (addr <= (0x0062)+(64*3)) && ((addr-0x0062)%64 == 0)) {
            uint i = (addr - 0x0062)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTUM2[i]))["R0"       ] = IPGPMTUM2_R0[i];
                (*(IPGPMTUM2[i]))["W0"       ] = IPGPMTUM2_W0[i];
                (*(IPGPMTUM2[i]))["X0"       ] = IPGPMTUM2_X0[i];
                (*(IPGPMTUM2[i]))["R1"       ] = IPGPMTUM2_R1[i];
                (*(IPGPMTUM2[i]))["W1"       ] = IPGPMTUM2_W1[i];
                (*(IPGPMTUM2[i]))["X1"       ] = IPGPMTUM2_X1[i];
            }
            return;
        }
        if ((0x0063 <= addr) && (addr <= (0x0063)+(64*3)) && ((addr-0x0063)%64 == 0)) {
            uint i = (addr - 0x0063)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTUM3[i]))["R0"       ] = IPGPMTUM3_R0[i];
                (*(IPGPMTUM3[i]))["W0"       ] = IPGPMTUM3_W0[i];
                if (mVersion == "G3MH") {
                    (*(IPGPMTUM3[i]))["X0"       ] = IPGPMTUM3_X0[i];
                }
                (*(IPGPMTUM3[i]))["R1"       ] = IPGPMTUM3_R1[i];
                (*(IPGPMTUM3[i]))["W1"       ] = IPGPMTUM3_W1[i];
                (*(IPGPMTUM3[i]))["X1"       ] = IPGPMTUM3_X1[i];
            }
            return;
        }
        if ((0x0064 <= addr) && (addr <= (0x0064)+(64*3)) && ((addr-0x0064)%64 == 0)) {
            uint i = (addr - 0x0064)/64;
            if ((mVersion != "G3MH") || ((i == 0) && (mVersion == "G3MH"))) {
                (*(IPGPMTUM4[i]))["R0"       ] = IPGPMTUM4_R0[i];
                (*(IPGPMTUM4[i]))["W0"       ] = IPGPMTUM4_W0[i];
                if ((mVersion == "G3M_V20")||(mVersion == "G3M_V30")) {
                    (*(IPGPMTUM4[i]))["R1"       ] = IPGPMTUM4_R1[i];
                    (*(IPGPMTUM4[i]))["W1"       ] = IPGPMTUM4_W1[i];
                    (*(IPGPMTUM4[i]))["X1"       ] = IPGPMTUM4_X1[i];
                }
            }
            return;
        }
        if (mVersion != "G3MH") {
            if (addr == 0x0080) {
                (*IPGECRSV1)["VD"       ] = IPGECRSV1_VD;
                (*IPGECRSV1)["RD"       ] = IPGECRSV1_RD;
                (*IPGECRSV1)["WR"       ] = IPGECRSV1_WR;
                (*IPGECRSV1)["EX"       ] = IPGECRSV1_EX;
                (*IPGECRSV1)["DS"       ] = IPGECRSV1_DS;
                (*IPGECRSV1)["TCID"     ] = IPGECRSV1_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRSV1)["PEID"     ] = IPGECRSV1_PEID;
                }
                return;
            }
            if (addr == 0x00C0) {
                (*IPGECRSV2)["VD"       ] = IPGECRSV2_VD;
                (*IPGECRSV2)["RD"       ] = IPGECRSV2_RD;
                (*IPGECRSV2)["WR"       ] = IPGECRSV2_WR;
                (*IPGECRSV2)["EX"       ] = IPGECRSV2_EX;
                (*IPGECRSV2)["DS"       ] = IPGECRSV2_DS;
                (*IPGECRSV2)["TCID"     ] = IPGECRSV2_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRSV2)["PEID"     ] = IPGECRSV2_PEID;
                }
                return;
            }
            if (addr == 0x0100) {
                (*IPGECRSV3)["VD"       ] = IPGECRSV3_VD;
                (*IPGECRSV3)["RD"       ] = IPGECRSV3_RD;
                (*IPGECRSV3)["WR"       ] = IPGECRSV3_WR;
                (*IPGECRSV3)["EX"       ] = IPGECRSV3_EX;
                (*IPGECRSV3)["DS"       ] = IPGECRSV3_DS;
                (*IPGECRSV3)["TCID"     ] = IPGECRSV3_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRSV3)["PEID"     ] = IPGECRSV3_PEID;
                }
                return;
            }
            if (addr == 0x0082) {
                (*IPGECRUM1)["VD"       ] = IPGECRUM1_VD;
                (*IPGECRUM1)["RD"       ] = IPGECRUM1_RD;
                (*IPGECRUM1)["WR"       ] = IPGECRUM1_WR;
                (*IPGECRUM1)["EX"       ] = IPGECRUM1_EX;
                (*IPGECRUM1)["DS"       ] = IPGECRUM1_DS;
                (*IPGECRUM1)["TCID"     ] = IPGECRUM1_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRUM1)["PEID"     ] = IPGECRUM1_PEID;
                }
                return;
            }
            if (addr == 0x00C2) {
                (*IPGECRUM2)["VD"       ] = IPGECRUM2_VD;
                (*IPGECRUM2)["RD"       ] = IPGECRUM2_RD;
                (*IPGECRUM2)["WR"       ] = IPGECRUM2_WR;
                (*IPGECRUM2)["EX"       ] = IPGECRUM2_EX;
                (*IPGECRUM2)["DS"       ] = IPGECRUM2_DS;
                (*IPGECRUM2)["TCID"     ] = IPGECRUM2_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRUM2)["PEID"     ] = IPGECRUM2_PEID;
                }
                return;
            }
            if (addr == 0x0102) {
                (*IPGECRUM3)["VD"       ] = IPGECRUM3_VD;
                (*IPGECRUM3)["RD"       ] = IPGECRUM3_RD;
                (*IPGECRUM3)["WR"       ] = IPGECRUM3_WR;
                (*IPGECRUM3)["EX"       ] = IPGECRUM3_EX;
                (*IPGECRUM3)["DS"       ] = IPGECRUM3_DS;
                (*IPGECRUM3)["TCID"     ] = IPGECRUM3_TCID;
                if (mVersion == "G3M_V30") {
                    (*IPGECRUM3)["PEID"     ] = IPGECRUM3_PEID;
                }
                return;
            }
            if (addr == 0x0084) {
                (*IPGADRSV1)["EADR"     ] = IPGADRSV1_EADR;
                return;
            }
            if (addr == 0x00C4) {
                (*IPGADRSV2)["EADR"     ] = IPGADRSV2_EADR;
                return;
            }
            if (addr == 0x0104) {
                (*IPGADRSV3)["EADR"     ] = IPGADRSV3_EADR;
                return;
            }
            if (addr == 0x0088) {
                (*IPGADRUM1)["EADR"     ] = IPGADRUM1_EADR;
                return;
            }
            if (addr == 0x00C8) {
                (*IPGADRUM2)["EADR"     ] = IPGADRUM2_EADR;
                return;
            }
            if (addr == 0x0108) {
                (*IPGADRUM3)["EADR"     ] = IPGADRUM3_EADR;
                return;
            }
            if (addr == 0x008C) {
                (*IPGENSV1 )["E"        ] = IPGENSV1_E;
                (*IPGENSV1 )["IRE"      ] = IPGENSV1_IRE;
                return;
            }
            if (addr == 0x00CC) {
                (*IPGENSV2 )["E"        ] = IPGENSV2_E;
                (*IPGENSV2 )["IRE"      ] = IPGENSV2_IRE;
                return;
            }
            if (addr == 0x010C) {
                (*IPGENSV3 )["E"        ] = IPGENSV3_E;
                (*IPGENSV3 )["IRE"      ] = IPGENSV3_IRE;
                return;
            }
            if (addr == 0x008D) {
                (*IPGENUM1 )["E"        ] = IPGENUM1_E;
                (*IPGENUM1 )["IRE"      ] = IPGENUM1_IRE;
                return;
            }
            if (addr == 0x00CD) {
                (*IPGENUM2 )["E"        ] = IPGENUM2_E;
                (*IPGENUM2 )["IRE"      ] = IPGENUM2_IRE;
                return;
            }
            if (addr == 0x010D) {
                (*IPGENUM3 )["E"        ] = IPGENUM3_E;
                (*IPGENUM3 )["IRE"      ] = IPGENUM3_IRE;
                return;
            }
            if ((0x0050 <= addr) && (addr <= (0x0050)+(64*3)) && ((addr-0x0050)%64 == 0)) {
                uint i = (addr - 0x0050)/64;
                (*(IPGPMTSV0[i]))["R0"       ] = IPGPMTSV0_R0[i];
                (*(IPGPMTSV0[i]))["W0"       ] = IPGPMTSV0_W0[i];
                (*(IPGPMTSV0[i]))["X0"       ] = IPGPMTSV0_X0[i];
                (*(IPGPMTSV0[i]))["R1"       ] = IPGPMTSV0_R1[i];
                (*(IPGPMTSV0[i]))["W1"       ] = IPGPMTSV0_W1[i];
                (*(IPGPMTSV0[i]))["X1"       ] = IPGPMTSV0_X1[i];
                return;
            }
            if ((0x0051 <= addr) && (addr <= (0x0051)+(64*3)) && ((addr-0x0051)%64 == 0)) {
                uint i = (addr - 0x0051)/64;
                (*(IPGPMTSV1[i]))["X0"       ] = IPGPMTSV1_X0[i];
                (*(IPGPMTSV1[i]))["X1"       ] = IPGPMTSV1_X1[i];
                return;
            }
            if ((0x0060 <= addr) && (addr <= (0x0060)+(64*3)) && ((addr-0x0060)%64 == 0)) {
                uint i = (addr - 0x0060)/64;
                (*(IPGPMTUM0[i]))["R0"       ] = IPGPMTUM0_R0[i];
                (*(IPGPMTUM0[i]))["W0"       ] = IPGPMTUM0_W0[i];
                (*(IPGPMTUM0[i]))["X0"       ] = IPGPMTUM0_X0[i];
                (*(IPGPMTUM0[i]))["R1"       ] = IPGPMTUM0_R1[i];
                (*(IPGPMTUM0[i]))["W1"       ] = IPGPMTUM0_W1[i];
                (*(IPGPMTUM0[i]))["X1"       ] = IPGPMTUM0_X1[i];
                return;
            }
            if ((0x0061 <= addr) && (addr <= (0x0061)+(64*3)) && ((addr-0x0061)%64 == 0)) {
                uint i = (addr - 0x0061)/64;
                (*(IPGPMTUM1[i]))["X0"       ] = IPGPMTUM1_X0[i];
                (*(IPGPMTUM1[i]))["X1"       ] = IPGPMTUM1_X1[i];
                return;
            }
        }
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cipg_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cipg_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cipg_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,10, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cipg_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<10)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cipg_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cipg_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cipg_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cipg_regif::uint Cipg_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cipg_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cipg_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cipg_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cipg_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        if ((mRegArray[i]->my_p->name() != "IPGECRUM")&&(mRegArray[i]->my_p->name() != "IPGADRUM")&&(mRegArray[i]->my_p->name() != "IPGECRSV0")&&
            (mRegArray[i]->my_p->name() != "IPGECRSV1")&&(mRegArray[i]->my_p->name() != "IPGECRSV2")&&(mRegArray[i]->my_p->name() != "IPGECRSV3")&&
            (mRegArray[i]->my_p->name() != "IPGECRUM0")&&(mRegArray[i]->my_p->name() != "IPGECRUM1")&&(mRegArray[i]->my_p->name() != "IPGECRUM2")&&
            (mRegArray[i]->my_p->name() != "IPGECRUM3")&&(mRegArray[i]->my_p->name() != "IPGADRSV0")&&(mRegArray[i]->my_p->name() != "IPGADRSV1")&&
            (mRegArray[i]->my_p->name() != "IPGADRSV2")&&(mRegArray[i]->my_p->name() != "IPGADRSV3")&&(mRegArray[i]->my_p->name() != "IPGADRUM0")&&
            (mRegArray[i]->my_p->name() != "IPGADRUM1")&&(mRegArray[i]->my_p->name() != "IPGADRUM2")&&(mRegArray[i]->my_p->name() != "IPGADRUM3")) {
            mRegArray[i]->my_p->EnableReset(is_active);
            if (is_active) {
                re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
            }
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Cipg_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cipg_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cipg_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
