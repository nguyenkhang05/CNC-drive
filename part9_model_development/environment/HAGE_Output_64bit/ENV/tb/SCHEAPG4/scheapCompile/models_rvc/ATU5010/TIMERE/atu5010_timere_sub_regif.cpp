// -----------------------------------------------------------------------------
// $Id: atu5010_timere_sub_regif.cpp,v 1.1 2018/01/26 10:15:45 binhnguyen Exp $
//
// Copyright(c) 2016-2018 Renesas Electronics Corporation
// Copyright(c) 2016-2018 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : /home/truongvv2/ATU5_E2FCC2/trunk/ATU5_Output_r24/src/ATU5010/TIMERE/atu5010_timere_sub_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE ATU5010_TIMERE_SUB
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         8
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name        reg_name    wsize       rsize       length  offset  factor_start    factor_end  factor_index    factor_step     access      init        support     callback
//     %%REG    -      SSTRE       SSTRE       8           8|16|32     8       0x00    -               -           -               -                W|R        0x0         TRUE        -
//     %%REG    -      PSCRE       PSCRE       8           8|16|32     8       0x04    -               -           -               -                W|R        0x0         TRUE        -
//     %%REG    -      TCRE        TCRE        8           8|16|32     8       0x08   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      RLDCRE      RLDCRE      8           8|16|32     8       0x0A   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      POECRE      POECRE      16          8|16|32     16      0x0C   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      SOLVLE      SOLVLE      8           8|16|32     8       0x0E   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      TSRE        TSRE        -           8|16|32     16      0x10   -               -           -               -                 R          0x0         TRUE        -
//     %%REG    -      TSCRE       TSCRE       8|16        8|16|32     16      0x12   -               -           -               -                 R|W1:0     0x0         TRUE        -
//     %%REG    -      TOCRE       TOCRE       8           8|16|32     8       0x14   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      TIERE       TIERE       8|16        8|16|32     16      0x16   -               -           -               -                 W|R        0x0         TRUE        -
//     %%REG    -      PSCCRE      PSCCRE      8           8|16|32     8       0x18   0               3           -              0x01               W|R        0x0         TRUE        -
//     %%REG    -      FCTRGE      FCTRGE      8           8|16|32     8       0x1C   -               -           -              -                  R|W1:0     0x0         TRUE        -
//     %%REG    -      TCNTE       TCNTE       32          8|16|32     32      0x24   0               3           -              0x20               W|R        0x00000100  TRUE        -
//     %%REG    -      CYLRE       CYLRE       32          8|16|32     32      0x28   0               3           -              0x20               W|R        0xFFFFFF00  TRUE        -
//     %%REG    -      DTRE        DTRE        32          8|16|32     32      0x2C   0               3           -              0x20               W|R        0xFFFFFF00  TRUE        -
//     %%REG    -      CRLDE       CRLDE       32          8|16|32     32      0x30   0               3           -              0x20               W|R        0xFFFFFF00  TRUE        -
//     %%REG    -      DRLDE       DRLDE       32          8|16|32     32      0x34   0               3           -              0x20               W|R        0xFFFFFF00  TRUE        -
// 
// %REG_NAME SSTRE
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    SSTRE0             0      0     0               W|R     TRUE     W
//     %%BIT    SSTRE1             1      1     0               W|R     TRUE     -
//     %%BIT    SSTRE2             2      2     0               W|R     TRUE     -
//     %%BIT    SSTRE3             3      3     0               W|R     TRUE     -
//                                                           
// %REG_NAME PSCRE                                           
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    PSCE               2      0     0               W|R     TRUE     W
//                                                           
// %REG_NAME PSCCRE                                         
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    PSCCE              7      0     0               W|R     TRUE     W
//                                                           
// %REG_NAME TCRE                                            
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CKSELE             2      0     0               W|R     TRUE     W
//     %%BIT    PSCSEL             7      7     0               W|R     TRUE     -
//                                                           
// %REG_NAME RLDCRE                                          
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    RLDENE0            0      0     0               W|R     TRUE     W
//     %%BIT    RLDENE1            1      1     0               W|R     TRUE     -
//     %%BIT    RLDENE2            2      2     0               W|R     TRUE     -
//     %%BIT    RLDENE3            3      3     0               W|R     TRUE     -
//                                                           
// %REG_NAME POECRE                                          
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    POEEN0             0      0     0               W|R     TRUE     -
//     %%BIT    POEEN1             1      1     0               W|R     TRUE     -
//     %%BIT    POEEN2             2      2     0               W|R     TRUE     -
//     %%BIT    POEEN3             3      3     0               W|R     TRUE     -
//     %%BIT    POEPOL             4      4     0               W|R     TRUE     -
//     %%BIT    POECRKEY           15     8     0               W|R     TRUE     W
//                                                           
// %REG_NAME SOLVLE                                          
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    PWMSLV0            0      0     0               W|R     TRUE     -
//     %%BIT    PWMSLV1            1      1     0               W|R     TRUE     -
//     %%BIT    PWMSLV2            2      2     0               W|R     TRUE     -
//     %%BIT    PWMSLV3            3      3     0               W|R     TRUE     -
//                                                           
// %REG_NAME TSRE                                            
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CMFE0              0      0     0               R       TRUE     -
//     %%BIT    CMFE1              1      1     0               R       TRUE     -
//     %%BIT    CMFE2              2      2     0               R       TRUE     -
//     %%BIT    CMFE3              3      3     0               R       TRUE     -
//     %%BIT    OVFE0              4      4     0               R       TRUE     -
//     %%BIT    OVFE1              5      5     0               R       TRUE     -
//     %%BIT    OVFE2              6      6     0               R       TRUE     -
//     %%BIT    OVFE3              7      7     0               R       TRUE     -
//     %%BIT    DMFE0              8      8     0               R       TRUE     -
//     %%BIT    DMFE1              9      9     0               R       TRUE     -
//     %%BIT    DMFE2              10     10    0               R       TRUE     -
//     %%BIT    DMFE3              11     11    0               R       TRUE     -
//                                                           
// %REG_NAME TSCRE                                           
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CMFCE0             0      0     0               R|W1:0     TRUE     W
//     %%BIT    CMFCE1             1      1     0               R|W1:0     TRUE     -
//     %%BIT    CMFCE2             2      2     0               R|W1:0     TRUE     -
//     %%BIT    CMFCE3             3      3     0               R|W1:0     TRUE     -
//     %%BIT    OVFCE0             4      4     0               R|W1:0     TRUE     -
//     %%BIT    OVFCE1             5      5     0               R|W1:0     TRUE     -
//     %%BIT    OVFCE2             6      6     0               R|W1:0     TRUE     -
//     %%BIT    OVFCE3             7      7     0               R|W1:0     TRUE     -
//     %%BIT    DMFCE0             8      8     0               R|W1:0     TRUE     -
//     %%BIT    DMFCE1             9      9     0               R|W1:0     TRUE     -
//     %%BIT    DMFCE2             10     10    0               R|W1:0     TRUE     -
//     %%BIT    DMFCE3             11     11    0               R|W1:0     TRUE     -
//                                                           
// %REG_NAME TIERE                                           
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CMEE0              0      0     0               W|R     TRUE     -
//     %%BIT    CMEE1              1      1     0               W|R     TRUE     -
//     %%BIT    CMEE2              2      2     0               W|R     TRUE     -
//     %%BIT    CMEE3              3      3     0               W|R     TRUE     -
//     %%BIT    DMEE0              8      8     0               W|R     TRUE     -
//     %%BIT    DMEE1              9      9     0               W|R     TRUE     -
//     %%BIT    DMEE2              10     10    0               W|R     TRUE     -
//     %%BIT    DMEE3              11     11    0               W|R     TRUE     -
//                                                           
// %REG_NAME TOCRE                                           
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    TONEE0             0      0     0               W|R     TRUE     W
//     %%BIT    TONEE1             1      1     0               W|R     TRUE     -
//     %%BIT    TONEE2             2      2     0               W|R     TRUE     -
//     %%BIT    TONEE3             3      3     0               W|R     TRUE     -
//                                                           
// %REG_NAME FCTRGE                                          
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    FCMT0              0      0     0               R|W1:0     TRUE     W
//     %%BIT    FCMT1              1      1     0               R|W1:0     TRUE     -
//     %%BIT    FCMT2              2      2     0               R|W1:0     TRUE     -
//     %%BIT    FCMT3              3      3     0               R|W1:0     TRUE     -
//                                                           
// %REG_NAME TCNTE                                          
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    TCNTE              31      8    1               W|R     TRUE     W
//      
// %REG_NAME CYLRE
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CYLRE              31      8   0xFFFFFF         W|R     TRUE     W
//      
// %REG_NAME DTRE
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    DTRE               31      8   0xFFFFFF         W|R     TRUE     W
//      
// %REG_NAME CRLDE
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    CRLDE              31      8   0xFFFFFF         W|R     TRUE     -
//      
// %REG_NAME DRLDE
//     %%TITLE  name             upper  lower  init            access  support  callback
//     %%BIT    DRLDE              31      8   0xFFFFFF         W|R     TRUE     -
//  ////////////////////////////////////////////////////////////////////////////////
/// @file atu5010_timere_sub_regif.cpp
/// @brief Register IF class of model ATU5010_TIMERE_SUB
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#include "atu5010_timere_sub_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Catu5010_timere_sub_regif::Catu5010_timere_sub_regif(std::string name, uint buswidth, uint subnum)
    :vpcl::reg_super()
    #ifdef CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x98/4))
    #endif
{
    mSubNum = subnum;
    CommandInit();
    SSTRE  = new vpcl::re_register(0x0000, this, "SSTRE" , name.c_str());
    PSCRE  = new vpcl::re_register(0x0004, this, "PSCRE" , name.c_str());
    TCRE   = new vpcl::re_register(0x0008, this, "TCRE"  , name.c_str());
    RLDCRE = new vpcl::re_register(0x000A, this, "RLDCRE", name.c_str());
    if (mSubNum < 6) {
        POECRE = new vpcl::re_register(0x000C, this, "POECRE", name.c_str());
        SOLVLE = new vpcl::re_register(0x000E, this, "SOLVLE", name.c_str());
    }
    TSRE   = new vpcl::re_register(0x0010, this, "TSRE"  , name.c_str());
    TSCRE  = new vpcl::re_register(0x0012, this, "TSCRE" , name.c_str());
    TOCRE  = new vpcl::re_register(0x0014, this, "TOCRE" , name.c_str());
    TIERE  = new vpcl::re_register(0x0016, this, "TIERE" , name.c_str());
    FCTRGE = new vpcl::re_register(0x001C, this, "FCTRGE", name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_PSCCRE; i++) {
        str_tmp.str("");
        str_tmp<<"PSCCRE"<< i;
        PSCCRE[i] = new vpcl::re_register((0x0018) + i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_TCNTE; i++) {
        str_tmp.str("");
        str_tmp<<"TCNTE"<< i;
        TCNTE [i] = new vpcl::re_register((0x0024) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_CYLRE; i++) {
        str_tmp.str("");
        str_tmp<<"CYLRE"<< i;
        CYLRE [i] = new vpcl::re_register((0x0028) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DTRE; i++) {
        str_tmp.str("");
        str_tmp<<"DTRE"<< i;
        DTRE  [i] = new vpcl::re_register((0x002C) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_CRLDE; i++) {
        str_tmp.str("");
        str_tmp<<"CRLDE"<< i;
        CRLDE [i] = new vpcl::re_register((0x0030) + 32*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_DRLDE; i++) {
        str_tmp.str("");
        str_tmp<<"DRLDE"<< i;
        DRLDE [i] = new vpcl::re_register((0x0034) + 32*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<8];
    for (uint i = 0; i < (1<<8); i++) {
        mRegMap[i] = (1<<8);
    }

    mRegMap[0x0000]     = index++;
    mRegMap[0x0004]     = index++;
    mRegMap[0x0008]     = index++;
    mRegMap[0x000A]     = index++;
    if (mSubNum < 6) {
        mRegMap[0x000C]     = index;
        mRegMap[0x000C + 1] = index++;
        mRegMap[0x000E]     = index++;
    }
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index++;
    mRegMap[0x0012]     = index;
    mRegMap[0x0012 + 1] = index++;
    mRegMap[0x0014]     = index++;
    mRegMap[0x0016]     = index;
    mRegMap[0x0016 + 1] = index++;
    for(uint i = 0; i < emNUM_PSCCRE; i++) {
        mRegMap[(0x0018)     + i*1 ] = index++;
    }
    mRegMap[0x001C]     = index++;
    for(uint i = 0; i < emNUM_TCNTE; i++) {
        mRegMap[(0x0024)     + i*32] = index;
        mRegMap[(0x0024 + 1) + i*32] = index;
        mRegMap[(0x0024 + 2) + i*32] = index;
        mRegMap[(0x0024 + 3) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_CYLRE; i++) {
        mRegMap[(0x0028)     + i*32] = index;
        mRegMap[(0x0028 + 1) + i*32] = index;
        mRegMap[(0x0028 + 2) + i*32] = index;
        mRegMap[(0x0028 + 3) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_DTRE;  i++) {
        mRegMap[(0x002C)     + i*32] = index;
        mRegMap[(0x002C + 1) + i*32] = index;
        mRegMap[(0x002C + 2) + i*32] = index;
        mRegMap[(0x002C + 3) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_CRLDE; i++) {
        mRegMap[(0x0030)     + i*32] = index;
        mRegMap[(0x0030 + 1) + i*32] = index;
        mRegMap[(0x0030 + 2) + i*32] = index;
        mRegMap[(0x0030 + 3) + i*32] = index++;
    }
    for(uint i = 0; i < emNUM_DRLDE; i++) {
        mRegMap[(0x0034)     + i*32] = index;
        mRegMap[(0x0034 + 1) + i*32] = index;
        mRegMap[(0x0034 + 2) + i*32] = index;
        mRegMap[(0x0034 + 3) + i*32] = index++;
    }
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef CWR_SYSTEMC
    cw_instantiate_reg(CW_SSTRE_, "SSTRE_", 0x0000);
    CW_SSTRE  = new scml2::bitfield<uint>(SSTRE->name() , CW_SSTRE_      ,  0,  8);
    cw_instantiate_reg(CW_PSCRE_, "PSCRE_", 0x0004);
    CW_PSCRE  = new scml2::bitfield<uint>(PSCRE->name() , CW_PSCRE_      ,  0,  8);
    cw_instantiate_reg(CW_TCRE_RLDCRE, "TCRE_RLDCRE", 0x0008);
    CW_TCRE   = new scml2::bitfield<uint>(TCRE->name()  , CW_TCRE_RLDCRE ,  0,  8);
    CW_RLDCRE = new scml2::bitfield<uint>(RLDCRE->name(), CW_TCRE_RLDCRE , 16,  8);
    if (mSubNum < 6) {
        cw_instantiate_reg(CW_POECRE_SOLVLE, "POECRE_SOLVLE", 0x000C);
        CW_POECRE = new scml2::bitfield<uint>(POECRE->name(), CW_POECRE_SOLVLE,  0, 16);
        CW_SOLVLE = new scml2::bitfield<uint>(SOLVLE->name(), CW_POECRE_SOLVLE, 16,  8);
    }
    cw_instantiate_reg(CW_TSRE_TSCRE, "TSRE_TSCRE", 0x0010);
    CW_TSRE   = new scml2::bitfield<uint>(TSRE->name()  , CW_TSRE_TSCRE  ,  0, 16);
    CW_TSCRE  = new scml2::bitfield<uint>(TSCRE->name() , CW_TSRE_TSCRE  , 16, 16);
    cw_instantiate_reg(CW_TOCRE_TIERE, "TOCRE_TIERE", 0x0014);
    CW_TOCRE  = new scml2::bitfield<uint>(TOCRE->name() , CW_TOCRE_TIERE ,  0,  8);
    CW_TIERE  = new scml2::bitfield<uint>(TIERE->name() , CW_TOCRE_TIERE , 16, 16);
    cw_instantiate_reg(CW_PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3, "PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3", 0x0018);
    CW_PSCCRE[0] = new scml2::bitfield<uint>(PSCCRE[0]->name(), CW_PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3,  0,  8);
    CW_PSCCRE[1] = new scml2::bitfield<uint>(PSCCRE[1]->name(), CW_PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3,  8,  8);
    CW_PSCCRE[2] = new scml2::bitfield<uint>(PSCCRE[2]->name(), CW_PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3, 16,  8);
    CW_PSCCRE[3] = new scml2::bitfield<uint>(PSCCRE[3]->name(), CW_PSCCRE_0_PSCCRE_1_PSCCRE_2_PSCCRE_3, 24,  8);
    cw_instantiate_reg(CW_FCTRGE_, "FCTRGE_", 0x001C);
    CW_FCTRGE = new scml2::bitfield<uint>(FCTRGE->name(), CW_FCTRGE_     ,  0,  8);
    for(uint i = 0; i < emNUM_TCNTE ; i++) cw_instantiate_reg(CW_TCNTE   [i], TCNTE [i]->name(), TCNTE [i]->addr());
    for(uint i = 0; i < emNUM_CYLRE ; i++) cw_instantiate_reg(CW_CYLRE   [i], CYLRE [i]->name(), CYLRE [i]->addr());
    for(uint i = 0; i < emNUM_DTRE  ; i++) cw_instantiate_reg(CW_DTRE    [i], DTRE  [i]->name(), DTRE  [i]->addr());
    for(uint i = 0; i < emNUM_CRLDE ; i++) cw_instantiate_reg(CW_CRLDE   [i], CRLDE [i]->name(), CRLDE [i]->addr());
    for(uint i = 0; i < emNUM_DRLDE ; i++) cw_instantiate_reg(CW_DRLDE   [i], DRLDE [i]->name(), DRLDE [i]->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(SSTRE   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(PSCRE   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TCRE    , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(RLDCRE  , mCurReg, 0,  1,       "8", "8|16|32");
    if (mSubNum < 6) {
        mCurReg = mRegArray[index++] = new SRegList(POECRE  , mCurReg, 0,  2,      "16", "8|16|32");
        mCurReg = mRegArray[index++] = new SRegList(SOLVLE  , mCurReg, 0,  1,       "8", "8|16|32");
    }
    mCurReg = mRegArray[index++] = new SRegList(TSRE    , mCurReg, 0,  2,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TSCRE   , mCurReg, 0,  2,    "8|16", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TOCRE   , mCurReg, 0,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(TIERE   , mCurReg, 0,  2,    "8|16", "8|16|32");
    for(uint i = 0; i < emNUM_PSCCRE; i++) mCurReg = mRegArray[index++] = new SRegList(PSCCRE  [i], mCurReg, i,  1,       "8", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(FCTRGE  , mCurReg, 0,  1,       "8", "8|16|32");
    for(uint i = 0; i < emNUM_TCNTE ; i++) mCurReg = mRegArray[index++] = new SRegList(TCNTE   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_CYLRE ; i++) mCurReg = mRegArray[index++] = new SRegList(CYLRE   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DTRE  ; i++) mCurReg = mRegArray[index++] = new SRegList(DTRE    [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_CRLDE ; i++) mCurReg = mRegArray[index++] = new SRegList(CRLDE   [i], mCurReg, i,  4,      "32", "8|16|32");
    for(uint i = 0; i < emNUM_DRLDE ; i++) mCurReg = mRegArray[index++] = new SRegList(DRLDE   [i], mCurReg, i,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*SSTRE   ) ( 0,  0, "SSTRE0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*SSTRE   ) ( 1,  1, "SSTRE1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*SSTRE   ) ( 2,  2, "SSTRE2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*SSTRE   ) ( 3,  3, "SSTRE3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*PSCRE   ) ( 2,  0, "PSCE"    , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRE    ) ( 2,  0, "CKSELE"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TCRE    ) ( 7,  7, "PSCSEL"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RLDCRE  ) ( 0,  0, "RLDENE0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RLDCRE  ) ( 1,  1, "RLDENE1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RLDCRE  ) ( 2,  2, "RLDENE2" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*RLDCRE  ) ( 3,  3, "RLDENE3" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    if (mSubNum < 6) {
        (*POECRE  ) ( 0,  0, "POEEN0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*POECRE  ) ( 1,  1, "POEEN1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*POECRE  ) ( 2,  2, "POEEN2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*POECRE  ) ( 3,  3, "POEEN3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*POECRE  ) ( 4,  4, "POEPOL"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*POECRE  ) (15,  8, "POECRKEY", 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*SOLVLE  ) ( 0,  0, "PWMSLV0" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*SOLVLE  ) ( 1,  1, "PWMSLV1" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*SOLVLE  ) ( 2,  2, "PWMSLV2" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
        (*SOLVLE  ) ( 3,  3, "PWMSLV3" , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    (*TSRE    ) ( 0,  0, "CMFE0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 1,  1, "CMFE1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 2,  2, "CMFE2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 3,  3, "CMFE3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 4,  4, "OVFE0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 5,  5, "OVFE1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 6,  6, "OVFE2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 7,  7, "OVFE3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 8,  8, "DMFE0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) ( 9,  9, "DMFE1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) (10, 10, "DMFE2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSRE    ) (11, 11, "DMFE3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 0,  0, "CMFCE0"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 1,  1, "CMFCE1"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 2,  2, "CMFCE2"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 3,  3, "CMFCE3"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 4,  4, "OVFCE0"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 5,  5, "OVFCE1"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 6,  6, "OVFCE2"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 7,  7, "OVFCE3"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 8,  8, "DMFCE0"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) ( 9,  9, "DMFCE1"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) (10, 10, "DMFCE2"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TSCRE   ) (11, 11, "DMFCE3"  , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*TOCRE   ) ( 0,  0, "TONEE0"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TOCRE   ) ( 1,  1, "TONEE1"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TOCRE   ) ( 2,  2, "TONEE2"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TOCRE   ) ( 3,  3, "TONEE3"  , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 0,  0, "CMEE0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 1,  1, "CMEE1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 2,  2, "CMEE2"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 3,  3, "CMEE3"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 8,  8, "DMEE0"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) ( 9,  9, "DMEE1"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) (10, 10, "DMEE2"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*TIERE   ) (11, 11, "DMEE3"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    (*FCTRGE  ) ( 0,  0, "FCMT0"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*FCTRGE  ) ( 1,  1, "FCMT1"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*FCTRGE  ) ( 2,  2, "FCMT2"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    (*FCTRGE  ) ( 3,  3, "FCMT3"   , 0x0       , "R|W1:0", vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_PSCCRE; i++) {
        (*PSCCRE  [i]) ( 7,  0, "PSCCE"   , 0x0       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_TCNTE; i++) {
        (*TCNTE   [i]) (31,  8, "TCNTE"   , 0x1       , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_CYLRE; i++) {
        (*CYLRE   [i]) (31,  8, "CYLRE"   , 0xFFFFFF  , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DTRE; i++) {
        (*DTRE    [i]) (31,  8, "DTRE"    , 0xFFFFFF  , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_CRLDE; i++) {
        (*CRLDE   [i]) (31,  8, "CRLDE"   , 0xFFFFFF  , "W|R"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_DRLDE; i++) {
        (*DRLDE   [i]) (31,  8, "DRLDE"   , 0xFFFFFF  , "W|R"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["SSTRE"]["SSTRE0"] = &Catu5010_timere_sub_regif::cb_SSTRE_SSTRE0;
    mWrCbAPI["PSCRE"]["PSCE"] = &Catu5010_timere_sub_regif::cb_PSCRE_PSCE;
    mWrCbAPI["TCRE"]["CKSELE"] = &Catu5010_timere_sub_regif::cb_TCRE_CKSELE;
    mWrCbAPI["RLDCRE"]["RLDENE0"] = &Catu5010_timere_sub_regif::cb_RLDCRE_RLDENE0;
    if (mSubNum < 6) {
        mWrCbAPI["POECRE"]["POECRKEY"] = &Catu5010_timere_sub_regif::cb_POECRE_POECRKEY;
    }
    mWrCbAPI["TSCRE"]["CMFCE0"] = &Catu5010_timere_sub_regif::cb_TSCRE_CMFCE0;
    mWrCbAPI["TOCRE"]["TONEE0"] = &Catu5010_timere_sub_regif::cb_TOCRE_TONEE0;
    mWrCbAPI["FCTRGE"]["FCMT0"] = &Catu5010_timere_sub_regif::cb_FCTRGE_FCMT0;

    for(uint i = 0; i < emNUM_PSCCRE; i++) {
        str_tmp.str("");
        str_tmp<<"PSCCRE"<< i;
        mWrCbAPI[str_tmp.str()]["PSCCE"] = &Catu5010_timere_sub_regif::cb_PSCCRE_PSCCE;
    }
    for(uint i = 0; i < emNUM_TCNTE; i++) {
        str_tmp.str("");
        str_tmp<<"TCNTE"<< i;
        mWrCbAPI[str_tmp.str()]["TCNTE"] = &Catu5010_timere_sub_regif::cb_TCNTE_TCNTE;
    }
    for(uint i = 0; i < emNUM_CYLRE; i++) {
        str_tmp.str("");
        str_tmp<<"CYLRE"<< i;
        mWrCbAPI[str_tmp.str()]["CYLRE"] = &Catu5010_timere_sub_regif::cb_CYLRE_CYLRE;
    }
    for(uint i = 0; i < emNUM_DTRE; i++) {
        str_tmp.str("");
        str_tmp<<"DTRE"<< i;
        mWrCbAPI[str_tmp.str()]["DTRE"] = &Catu5010_timere_sub_regif::cb_DTRE_DTRE;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Catu5010_timere_sub_regif::~Catu5010_timere_sub_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Catu5010_timere_sub_regif::uint Catu5010_timere_sub_regif::bit_select(
                                       cuint val,    ///< [in] Writting address
                                       cuint start,  ///< [in] start bit position
                                       cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timere_sub_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                                       const unsigned char *p_data,   ///< [in] Writing data
                                       cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timere_sub_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                                       unsigned char *p_data,   ///< [out] Reading data
                                       cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timere_sub_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                           const unsigned char *p_data,   ///< [in] Writing data
                                           cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timere_sub_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                           unsigned char *p_data,   ///< [out] Reading data
                                           cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Catu5010_timere_sub_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                               const unsigned char *p_data,  ///< [in] Writing data
                                               cuint size,                   ///< [in] Data size (byte)
                                               bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Catu5010_timere_sub_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                               unsigned char *p_data,   ///< [out] Reading data
                                               cuint size,              ///< [in]  Data size (byte)
                                               bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 8-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Catu5010_timere_sub_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                            unsigned char *p_data,          ///< [out] Reading data
                                            cuint size,                     ///< [in]  Data size (byte)
                                            cuint reg_index,                ///< [in] Register index
                                            bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            
            pst_data = Register->read();
            
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Catu5010_timere_sub_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                            const unsigned char *p_data,      ///< [in] Writing data
                                            cuint size,                       ///< [in] Data size (byte)
                                            cuint reg_index,                  ///< [in] Register index
                                            bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Catu5010_timere_sub_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Catu5010_timere_sub_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Catu5010_timere_sub_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Catu5010_timere_sub_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Catu5010_timere_sub_regif::InitLocalVal()
{
    // Initialize local variables
    SSTRE_SSTRE0 = 0x0;
    SSTRE_SSTRE1 = 0x0;
    SSTRE_SSTRE2 = 0x0;
    SSTRE_SSTRE3 = 0x0;
    PSCRE_PSCE = 0x0;
    TCRE_CKSELE = 0x0;
    TCRE_PSCSEL = 0x0;
    RLDCRE_RLDENE0 = 0x0;
    RLDCRE_RLDENE1 = 0x0;
    RLDCRE_RLDENE2 = 0x0;
    RLDCRE_RLDENE3 = 0x0;
    if (mSubNum < 6) {
        POECRE_POEEN0 = 0x0;
        POECRE_POEEN1 = 0x0;
        POECRE_POEEN2 = 0x0;
        POECRE_POEEN3 = 0x0;
        POECRE_POEPOL = 0x0;
        POECRE_POECRKEY = 0x0;
        SOLVLE_PWMSLV0 = 0x0;
        SOLVLE_PWMSLV1 = 0x0;
        SOLVLE_PWMSLV2 = 0x0;
        SOLVLE_PWMSLV3 = 0x0;
    }
    TSRE_CMFE0 = 0x0;
    TSRE_CMFE1 = 0x0;
    TSRE_CMFE2 = 0x0;
    TSRE_CMFE3 = 0x0;
    TSRE_OVFE0 = 0x0;
    TSRE_OVFE1 = 0x0;
    TSRE_OVFE2 = 0x0;
    TSRE_OVFE3 = 0x0;
    TSRE_DMFE0 = 0x0;
    TSRE_DMFE1 = 0x0;
    TSRE_DMFE2 = 0x0;
    TSRE_DMFE3 = 0x0;
    TSCRE_CMFCE0 = 0x0;
    TSCRE_CMFCE1 = 0x0;
    TSCRE_CMFCE2 = 0x0;
    TSCRE_CMFCE3 = 0x0;
    TSCRE_OVFCE0 = 0x0;
    TSCRE_OVFCE1 = 0x0;
    TSCRE_OVFCE2 = 0x0;
    TSCRE_OVFCE3 = 0x0;
    TSCRE_DMFCE0 = 0x0;
    TSCRE_DMFCE1 = 0x0;
    TSCRE_DMFCE2 = 0x0;
    TSCRE_DMFCE3 = 0x0;
    TOCRE_TONEE0 = 0x0;
    TOCRE_TONEE1 = 0x0;
    TOCRE_TONEE2 = 0x0;
    TOCRE_TONEE3 = 0x0;
    TIERE_CMEE0 = 0x0;
    TIERE_CMEE1 = 0x0;
    TIERE_CMEE2 = 0x0;
    TIERE_CMEE3 = 0x0;
    TIERE_DMEE0 = 0x0;
    TIERE_DMEE1 = 0x0;
    TIERE_DMEE2 = 0x0;
    TIERE_DMEE3 = 0x0;
    for(uint i = 0; i < emNUM_PSCCRE; i++) {
        PSCCRE_PSCCE[i] = 0x0;
    }
    FCTRGE_FCMT0 = 0x0;
    FCTRGE_FCMT1 = 0x0;
    FCTRGE_FCMT2 = 0x0;
    FCTRGE_FCMT3 = 0x0;
    for(uint i = 0; i < emNUM_TCNTE; i++) {
        TCNTE_TCNTE[i] = 0x1;
    }
    for(uint i = 0; i < emNUM_CYLRE; i++) {
        CYLRE_CYLRE[i] = 0xFFFFFF;
    }
    for(uint i = 0; i < emNUM_DTRE;  i++) {
        DTRE_DTRE[i] = 0xFFFFFF;
    }
    for(uint i = 0; i < emNUM_CRLDE; i++) {
        CRLDE_CRLDE[i] = 0xFFFFFF;
    }
    for(uint i = 0; i < emNUM_DRLDE; i++) {
        DRLDE_DRLDE[i] = 0xFFFFFF;
    }
}

/// Update bit value to local value
/// @return None
void Catu5010_timere_sub_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        SSTRE_SSTRE0               = (*SSTRE )["SSTRE0"];
        SSTRE_SSTRE1               = (*SSTRE )["SSTRE1"];
        SSTRE_SSTRE2               = (*SSTRE )["SSTRE2"];
        SSTRE_SSTRE3               = (*SSTRE )["SSTRE3"];
        return;
    }
    if (addr == 0x0004) {
        PSCRE_PSCE                 = (*PSCRE )["PSCE"  ];
        return;
    }
    if (addr == 0x0008) {
        TCRE_CKSELE                = (*TCRE  )["CKSELE"];
        TCRE_PSCSEL                = (*TCRE  )["PSCSEL"];
        return;
    }
    if (addr == 0x000A) {
        RLDCRE_RLDENE0             = (*RLDCRE)["RLDENE0"];
        RLDCRE_RLDENE1             = (*RLDCRE)["RLDENE1"];
        RLDCRE_RLDENE2             = (*RLDCRE)["RLDENE2"];
        RLDCRE_RLDENE3             = (*RLDCRE)["RLDENE3"];
        return;
    }
    if (mSubNum < 6) {
        if (addr == 0x000C) {
            POECRE_POEEN0              = (*POECRE)["POEEN0"];
            POECRE_POEEN1              = (*POECRE)["POEEN1"];
            POECRE_POEEN2              = (*POECRE)["POEEN2"];
            POECRE_POEEN3              = (*POECRE)["POEEN3"];
            POECRE_POEPOL              = (*POECRE)["POEPOL"];
            POECRE_POECRKEY            = (*POECRE)["POECRKEY"];
            return;
        }
        if (addr == 0x000E) {
            SOLVLE_PWMSLV0             = (*SOLVLE)["PWMSLV0"];
            SOLVLE_PWMSLV1             = (*SOLVLE)["PWMSLV1"];
            SOLVLE_PWMSLV2             = (*SOLVLE)["PWMSLV2"];
            SOLVLE_PWMSLV3             = (*SOLVLE)["PWMSLV3"];
            return;
        }
    }
    if (addr == 0x0010) {
        TSRE_CMFE0                 = (*TSRE  )["CMFE0" ];
        TSRE_CMFE1                 = (*TSRE  )["CMFE1" ];
        TSRE_CMFE2                 = (*TSRE  )["CMFE2" ];
        TSRE_CMFE3                 = (*TSRE  )["CMFE3" ];
        TSRE_OVFE0                 = (*TSRE  )["OVFE0" ];
        TSRE_OVFE1                 = (*TSRE  )["OVFE1" ];
        TSRE_OVFE2                 = (*TSRE  )["OVFE2" ];
        TSRE_OVFE3                 = (*TSRE  )["OVFE3" ];
        TSRE_DMFE0                 = (*TSRE  )["DMFE0" ];
        TSRE_DMFE1                 = (*TSRE  )["DMFE1" ];
        TSRE_DMFE2                 = (*TSRE  )["DMFE2" ];
        TSRE_DMFE3                 = (*TSRE  )["DMFE3" ];
        return;
    }
    if (addr == 0x0012) {
        TSCRE_CMFCE0               = (*TSCRE )["CMFCE0"];
        TSCRE_CMFCE1               = (*TSCRE )["CMFCE1"];
        TSCRE_CMFCE2               = (*TSCRE )["CMFCE2"];
        TSCRE_CMFCE3               = (*TSCRE )["CMFCE3"];
        TSCRE_OVFCE0               = (*TSCRE )["OVFCE0"];
        TSCRE_OVFCE1               = (*TSCRE )["OVFCE1"];
        TSCRE_OVFCE2               = (*TSCRE )["OVFCE2"];
        TSCRE_OVFCE3               = (*TSCRE )["OVFCE3"];
        TSCRE_DMFCE0               = (*TSCRE )["DMFCE0"];
        TSCRE_DMFCE1               = (*TSCRE )["DMFCE1"];
        TSCRE_DMFCE2               = (*TSCRE )["DMFCE2"];
        TSCRE_DMFCE3               = (*TSCRE )["DMFCE3"];
        return;
    }
    if (addr == 0x0014) {
        TOCRE_TONEE0               = (*TOCRE )["TONEE0"];
        TOCRE_TONEE1               = (*TOCRE )["TONEE1"];
        TOCRE_TONEE2               = (*TOCRE )["TONEE2"];
        TOCRE_TONEE3               = (*TOCRE )["TONEE3"];
        return;
    }
    if (addr == 0x0016) {
        TIERE_CMEE0                = (*TIERE )["CMEE0" ];
        TIERE_CMEE1                = (*TIERE )["CMEE1" ];
        TIERE_CMEE2                = (*TIERE )["CMEE2" ];
        TIERE_CMEE3                = (*TIERE )["CMEE3" ];
        TIERE_DMEE0                = (*TIERE )["DMEE0" ];
        TIERE_DMEE1                = (*TIERE )["DMEE1" ];
        TIERE_DMEE2                = (*TIERE )["DMEE2" ];
        TIERE_DMEE3                = (*TIERE )["DMEE3" ];
        return;
    }
    if ((0x0018 <= addr) && (addr <= (0x0018)+(1*3)) && ((addr-0x0018)%1 == 0)) {
        uint i = (addr - 0x0018)/1;
        PSCCRE_PSCCE              [i] = (*(PSCCRE[i]))["PSCCE" ];
        return;
    }
    if (addr == 0x001C) {
        FCTRGE_FCMT0               = (*FCTRGE)["FCMT0" ];
        FCTRGE_FCMT1               = (*FCTRGE)["FCMT1" ];
        FCTRGE_FCMT2               = (*FCTRGE)["FCMT2" ];
        FCTRGE_FCMT3               = (*FCTRGE)["FCMT3" ];
        return;
    }
    if ((0x0024 <= addr) && (addr <= (0x0024)+(32*3)) && ((addr-0x0024)%32 == 0)) {
        uint i = (addr - 0x0024)/32;
        TCNTE_TCNTE               [i] = (*(TCNTE [i]))["TCNTE" ];
        return;
    }
    if ((0x0028 <= addr) && (addr <= (0x0028)+(32*3)) && ((addr-0x0028)%32 == 0)) {
        uint i = (addr - 0x0028)/32;
        CYLRE_CYLRE               [i] = (*(CYLRE [i]))["CYLRE" ];
        return;
    }
    if ((0x002C <= addr) && (addr <= (0x002C)+(32*3)) && ((addr-0x002C)%32 == 0)) {
        uint i = (addr - 0x002C)/32;
        DTRE_DTRE                 [i] = (*(DTRE  [i]))["DTRE"  ];
        return;
    }
    if ((0x0030 <= addr) && (addr <= (0x0030)+(32*3)) && ((addr-0x0030)%32 == 0)) {
        uint i = (addr - 0x0030)/32;
        CRLDE_CRLDE               [i] = (*(CRLDE [i]))["CRLDE" ];
        return;
    }
    if ((0x0034 <= addr) && (addr <= (0x0034)+(32*3)) && ((addr-0x0034)%32 == 0)) {
        uint i = (addr - 0x0034)/32;
        DRLDE_DRLDE               [i] = (*(DRLDE [i]))["DRLDE" ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Catu5010_timere_sub_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*SSTRE )["SSTRE0"] = SSTRE_SSTRE0;
        (*SSTRE )["SSTRE1"] = SSTRE_SSTRE1;
        (*SSTRE )["SSTRE2"] = SSTRE_SSTRE2;
        (*SSTRE )["SSTRE3"] = SSTRE_SSTRE3;
        return;
    }
    if (addr == 0x0004) {
        (*PSCRE )["PSCE"  ] = PSCRE_PSCE;
        return;
    }
    if (addr == 0x0008) {
        (*TCRE  )["CKSELE"] = TCRE_CKSELE;
        (*TCRE  )["PSCSEL"] = TCRE_PSCSEL;
        return;
    }
    if (addr == 0x000A) {
        (*RLDCRE)["RLDENE0"] = RLDCRE_RLDENE0;
        (*RLDCRE)["RLDENE1"] = RLDCRE_RLDENE1;
        (*RLDCRE)["RLDENE2"] = RLDCRE_RLDENE2;
        (*RLDCRE)["RLDENE3"] = RLDCRE_RLDENE3;
        return;
    }
    if (mSubNum < 6) {
        if (addr == 0x000C) {
            (*POECRE)["POEEN0"] = POECRE_POEEN0;
            (*POECRE)["POEEN1"] = POECRE_POEEN1;
            (*POECRE)["POEEN2"] = POECRE_POEEN2;
            (*POECRE)["POEEN3"] = POECRE_POEEN3;
            (*POECRE)["POEPOL"] = POECRE_POEPOL;
            (*POECRE)["POECRKEY"] = POECRE_POECRKEY;
            return;
        }
        if (addr == 0x000E) {
            (*SOLVLE)["PWMSLV0"] = SOLVLE_PWMSLV0;
            (*SOLVLE)["PWMSLV1"] = SOLVLE_PWMSLV1;
            (*SOLVLE)["PWMSLV2"] = SOLVLE_PWMSLV2;
            (*SOLVLE)["PWMSLV3"] = SOLVLE_PWMSLV3;
            return;
        }
    }
    if (addr == 0x0010) {
        (*TSRE  )["CMFE0" ] = TSRE_CMFE0;
        (*TSRE  )["CMFE1" ] = TSRE_CMFE1;
        (*TSRE  )["CMFE2" ] = TSRE_CMFE2;
        (*TSRE  )["CMFE3" ] = TSRE_CMFE3;
        (*TSRE  )["OVFE0" ] = TSRE_OVFE0;
        (*TSRE  )["OVFE1" ] = TSRE_OVFE1;
        (*TSRE  )["OVFE2" ] = TSRE_OVFE2;
        (*TSRE  )["OVFE3" ] = TSRE_OVFE3;
        (*TSRE  )["DMFE0" ] = TSRE_DMFE0;
        (*TSRE  )["DMFE1" ] = TSRE_DMFE1;
        (*TSRE  )["DMFE2" ] = TSRE_DMFE2;
        (*TSRE  )["DMFE3" ] = TSRE_DMFE3;
        return;
    }
    if (addr == 0x0012) {
        (*TSCRE )["CMFCE0"] = TSCRE_CMFCE0;
        (*TSCRE )["CMFCE1"] = TSCRE_CMFCE1;
        (*TSCRE )["CMFCE2"] = TSCRE_CMFCE2;
        (*TSCRE )["CMFCE3"] = TSCRE_CMFCE3;
        (*TSCRE )["OVFCE0"] = TSCRE_OVFCE0;
        (*TSCRE )["OVFCE1"] = TSCRE_OVFCE1;
        (*TSCRE )["OVFCE2"] = TSCRE_OVFCE2;
        (*TSCRE )["OVFCE3"] = TSCRE_OVFCE3;
        (*TSCRE )["DMFCE0"] = TSCRE_DMFCE0;
        (*TSCRE )["DMFCE1"] = TSCRE_DMFCE1;
        (*TSCRE )["DMFCE2"] = TSCRE_DMFCE2;
        (*TSCRE )["DMFCE3"] = TSCRE_DMFCE3;
        return;
    }
    if (addr == 0x0014) {
        (*TOCRE )["TONEE0"] = TOCRE_TONEE0;
        (*TOCRE )["TONEE1"] = TOCRE_TONEE1;
        (*TOCRE )["TONEE2"] = TOCRE_TONEE2;
        (*TOCRE )["TONEE3"] = TOCRE_TONEE3;
        return;
    }
    if (addr == 0x0016) {
        (*TIERE )["CMEE0" ] = TIERE_CMEE0;
        (*TIERE )["CMEE1" ] = TIERE_CMEE1;
        (*TIERE )["CMEE2" ] = TIERE_CMEE2;
        (*TIERE )["CMEE3" ] = TIERE_CMEE3;
        (*TIERE )["DMEE0" ] = TIERE_DMEE0;
        (*TIERE )["DMEE1" ] = TIERE_DMEE1;
        (*TIERE )["DMEE2" ] = TIERE_DMEE2;
        (*TIERE )["DMEE3" ] = TIERE_DMEE3;
        return;
    }
    if ((0x0018 <= addr) && (addr <= (0x0018)+(1*3)) && ((addr-0x0018)%1 == 0)) {
        uint i = (addr - 0x0018)/1;
        (*(PSCCRE[i]))["PSCCE" ] = PSCCRE_PSCCE[i];
        return;
    }
    if (addr == 0x001C) {
        (*FCTRGE)["FCMT0" ] = FCTRGE_FCMT0;
        (*FCTRGE)["FCMT1" ] = FCTRGE_FCMT1;
        (*FCTRGE)["FCMT2" ] = FCTRGE_FCMT2;
        (*FCTRGE)["FCMT3" ] = FCTRGE_FCMT3;
        return;
    }
    if ((0x0024 <= addr) && (addr <= (0x0024)+(32*3)) && ((addr-0x0024)%32 == 0)) {
        uint i = (addr - 0x0024)/32;
        (*(TCNTE [i]))["TCNTE" ] = TCNTE_TCNTE[i];
        return;
    }
    if ((0x0028 <= addr) && (addr <= (0x0028)+(32*3)) && ((addr-0x0028)%32 == 0)) {
        uint i = (addr - 0x0028)/32;
        (*(CYLRE [i]))["CYLRE" ] = CYLRE_CYLRE[i];
        return;
    }
    if ((0x002C <= addr) && (addr <= (0x002C)+(32*3)) && ((addr-0x002C)%32 == 0)) {
        uint i = (addr - 0x002C)/32;
        (*(DTRE  [i]))["DTRE"  ] = DTRE_DTRE[i];
        return;
    }
    if ((0x0030 <= addr) && (addr <= (0x0030)+(32*3)) && ((addr-0x0030)%32 == 0)) {
        uint i = (addr - 0x0030)/32;
        (*(CRLDE [i]))["CRLDE" ] = CRLDE_CRLDE[i];
        return;
    }
    if ((0x0034 <= addr) && (addr <= (0x0034)+(32*3)) && ((addr-0x0034)%32 == 0)) {
        uint i = (addr - 0x0034)/32;
        (*(DRLDE [i]))["DRLDE" ] = DRLDE_DRLDE[i];
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Catu5010_timere_sub_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Catu5010_timere_sub_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Catu5010_timere_sub_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,8, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Catu5010_timere_sub_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<8)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Catu5010_timere_sub_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Catu5010_timere_sub_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Catu5010_timere_sub_regif::wr_cb(cuint addr, uint data)
{
    #ifdef CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Catu5010_timere_sub_regif::uint Catu5010_timere_sub_regif::rd_cb(cuint addr)
{
    #ifdef CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Catu5010_timere_sub_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Catu5010_timere_sub_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Catu5010_timere_sub_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Catu5010_timere_sub_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef CWR_SYSTEMC
uint Catu5010_timere_sub_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Catu5010_timere_sub_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Catu5010_timere_sub_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
