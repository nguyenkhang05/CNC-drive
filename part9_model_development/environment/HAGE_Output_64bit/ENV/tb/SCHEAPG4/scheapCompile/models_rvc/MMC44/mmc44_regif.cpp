// -----------------------------------------------------------------------------
// $Id: mmc44_regif.cpp,v 1.3 2020/04/15 04:37:36 anhnguyen4 Exp $
//
// Copyright(c) 2018 - 2020 Renesas Electronics Corporation
// Copyright(c) 2018 - 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : /home/longnt20/gen/DummyperipheralRvc_input/mmc44_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE MMC44
//     #                   name            offset_size
//     %%REG_INSTANCE      reg_def         7
// 
// %REG_CHANNEL reg_def
//     %%TITLE  group  name                    reg_name                  wsize     rsize       length  offset  factor_start  factor_end  factor_index factor_step     access  init              support     callback
//     %%REG    -     MMCAnCE_CMD_SET          MMCAnCE_CMD_SET           32        8|16|32     32      0x0     -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_ARG              MMCAnCE_ARG               32        8|16|32     32      0x8     -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_ARG_CMD12        MMCAnCE_ARG_CMD12         32        8|16|32     32      0xC     -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_CMD_CTRL         MMCAnCE_CMD_CTRL          32        8|16|32     32      0x10    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_BLOCK_SET        MMCAnCE_BLOCK_SET         32        8|16|32     32      0x14    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_CLK_CTRL         MMCAnCE_CLK_CTRL          32        8|16|32     32      0x18    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_BUF_ACC          MMCAnCE_BUF_ACC           32        8|16|32     32      0x1C    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_RESP3            MMCAnCE_RESP3             -         8|16|32     32      0x20    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_RESP2            MMCAnCE_RESP2             -         8|16|32     32      0x24    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_RESP1            MMCAnCE_RESP1             -         8|16|32     32      0x28    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_RESP0            MMCAnCE_RESP0             -         8|16|32     32      0x2C    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_RESP_CMD12       MMCAnCE_RESP_CMD12        -         8|16|32     32      0x30    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_DATA             MMCAnCE_DATA              32        8|16|32     32      0x34    -             -           -            -               R|W     0x00000000        TRUE            W|R
//     %%REG    -     MMCAnCE_BOOT             MMCAnCE_BOOT              32        8|16|32     32      0x3C    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_INT              MMCAnCE_INT               32        8|16|32     32      0x40    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_INT_EN           MMCAnCE_INT_EN            32        8|16|32     32      0x44    -             -           -            -               R|W     0x00000000        TRUE            W
//     %%REG    -     MMCAnCE_HOST_STS1        MMCAnCE_HOST_STS1         -         8|16|32     32      0x48    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_HOST_STS2        MMCAnCE_HOST_STS2         -         8|16|32     32      0x4C    -             -           -            -               R       0x00000000        TRUE            -
//     %%REG    -     MMCAnCE_SWRESA           MMCAnCE_SWRESA            32        8|16|32     32      0x7C    -             -           -            -               R|W     0x00000000        TRUE            W
//                                                                                                                                                                                                                                  
// %REG_NAME   MMCAnCE_CMD_SET                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          BOOT                30       30           0           R|W           TRUE           W
//     %%BIT          CMD                 29       24           0           R|W           TRUE           -
//     %%BIT          RTYP                23       22           0           R|W           TRUE           -
//     %%BIT          RBSY                21       21           0           R|W           TRUE           -
//     %%BIT          WDAT                19       19           0           R|W           TRUE           -
//     %%BIT          DWEN                18       18           0           R|W           TRUE           -
//     %%BIT          CMLTE               17       17           0           R|W           TRUE           -
//     %%BIT          CMD12EN             16       16           0           R|W           TRUE           -
//     %%BIT          RIDXC               15       14           0           R|W           TRUE           -
//     %%BIT          RCRC7C              13       12           0           R|W           TRUE           -
//     %%BIT          CRC16C              10       10           0           R|W           TRUE           -
//     %%BIT          BOOTACK             9        9            0           R|W           TRUE           -
//     %%BIT          CRCSTE              8        8            0           R|W           TRUE           -
//     %%BIT          TBIT                7        7            0           R|W           TRUE           -
//     %%BIT          OPDM                6        6            0           R|W           TRUE           -
//     %%BIT          SBIT                3        3            0           R|W           TRUE           -
//     %%BIT          DATW                1        0            0           R|W           TRUE           W
//     
// %REG_NAME   MMCAnCE_ARG                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          ARG                 31       0            0           R|W           TRUE           W
//     
// %REG_NAME   MMCAnCE_ARG_CMD12                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          C12ARG              31       0            0           R|W           TRUE           W
//     
// %REG_NAME   MMCAnCE_CMD_CTRL                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          BREAK               0        0            0           R|W           TRUE           W
//     
// %REG_NAME   MMCAnCE_BLOCK_SET                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          BLKCNT              31       16           0           R|W           TRUE           -
//     %%BIT          BLKSIZ              15       0            0           R|W           TRUE           -
//     
// %REG_NAME   MMCAnCE_CLK_CTRL                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          MMCBUSBSY           31       31           0           R             TRUE           -
//     %%BIT          CLKEN               24       24           0           R|W           TRUE           W
//     %%BIT          CLKDIV              19       16           0           R|W           TRUE           -
//     %%BIT          SRSPTO              13       12           0           R|W           TRUE           -
//     %%BIT          SRBSYTO             11       8            0           R|W           TRUE           -
//     %%BIT          SRWDTO              7        4            0           R|W           TRUE           -
//     
// %REG_NAME   MMCAnCE_BUF_ACC                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          DMATYP              26       26           0           R|W           TRUE           W
//     %%BIT          DMAWEN              25       25           0           R|W           TRUE           -
//     %%BIT          DMAREN              24       24           0           R|W           TRUE           -
//     %%BIT          ATYP                16       16           0           R|W           TRUE           -
//                                                 
// %REG_NAME   MMCAnCE_RESP3                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          RSP                 31       0            0           R             TRUE           -    
//     
// %REG_NAME   MMCAnCE_RESP2                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          RSP                 31       0            0           R             TRUE           -        
//     
// %REG_NAME   MMCAnCE_RESP1                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          RSP                 31       0            0           R             TRUE           -        
//     
// %REG_NAME   MMCAnCE_RESP0                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          RSP                 31       0            0           R             TRUE           -        
//     
// %REG_NAME   MMCAnCE_RESP_CMD12                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          RSP12               31       0            0           R             TRUE           -    
//     
// %REG_NAME   MMCAnCE_DATA                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          DATA                31       0            0           R|W           TRUE           W|R    
//     
// %REG_NAME   MMCAnCE_BOOT                                                                                              
//     %%TITLE        name                upper    lower        init        access        support        callback             
//     %%BIT          BTCLKDIV            31       28            0           R|W           TRUE           W        
//     %%BIT          SBTACKTO            27       24            0           R|W           TRUE           -
//     %%BIT          S1STBTDATTO         23       20            0           R|W           TRUE           -
//     %%BIT          SBTDATTO            19       16            0           R|W           TRUE           -
//     
// %REG_NAME   MMCAnCE_INT     
//     %%TITLE        name                upper    lower        init        access        support        callback                                                                                             
//     %%BIT          CMD12DRE            26       26           0           R|W           TRUE           W
//     %%BIT          CMD12RBE            25       25           0           R|W           TRUE           -
//     %%BIT          CMD12CRE            24       24           0           R|W           TRUE           -
//     %%BIT          DTRANE              23       23           0           R|W           TRUE           -
//     %%BIT          BUFRE               22       22           0           R|W           TRUE           -
//     %%BIT          BUFWEN              21       21           0           R|W           TRUE           -
//     %%BIT          BUFREN              20       20           0           R|W           TRUE           -
//     %%BIT          RBSYE               17       17           0           R|W           TRUE           -
//     %%BIT          CRSPE               16       16           0           R|W           TRUE           -
//     %%BIT          CMDVIO              15       15           0           R|W           TRUE           -
//     %%BIT          BUFVIO              14       14           0           R|W           TRUE           -
//     %%BIT          WDATERR             11       11           0           R|W           TRUE           -
//     %%BIT          RDATERR             10       10           0           R|W           TRUE           -
//     %%BIT          RIDXERR             9        9            0           R|W           TRUE           -
//     %%BIT          RSPERR              8        8            0           R|W           TRUE           -
//     %%BIT          CRCSTO              4        4            0           R|W           TRUE           -
//     %%BIT          WDATTO              3        3            0           R|W           TRUE           -
//     %%BIT          RDATTO              2        2            0           R|W           TRUE           -
//     %%BIT          RBSYTO              1        1            0           R|W           TRUE           -
//     %%BIT          RSPTO               0        0            0           R|W           TRUE           -
//                                                                                                       
// %REG_NAME   MMCAnCE_INT_EN     
//     %%TITLE        name                upper    lower        init        access        support        callback                                                                                             
//     %%BIT          MCMD12DRE           26       26           0           R|W           TRUE           -
//     %%BIT          MCMD12RBE           25       25           0           R|W           TRUE           -
//     %%BIT          MCMD12CRE           24       24           0           R|W           TRUE           -
//     %%BIT          MDTRANE             23       23           0           R|W           TRUE           -
//     %%BIT          MBUFRE              22       22           0           R|W           TRUE           -
//     %%BIT          MBUFWEN             21       21           0           R|W           TRUE           W
//     %%BIT          MBUFREN             20       20           0           R|W           TRUE           -
//     %%BIT          MRBSYE              17       17           0           R|W           TRUE           -
//     %%BIT          MCRSPE              16       16           0           R|W           TRUE           -
//     %%BIT          MCMDVIO             15       15           0           R|W           TRUE           -
//     %%BIT          MBUFVIO             14       14           0           R|W           TRUE           -
//     %%BIT          MWDATERR            11       11           0           R|W           TRUE           -
//     %%BIT          MRDATERR            10       10           0           R|W           TRUE           -
//     %%BIT          MRIDXERR            9        9            0           R|W           TRUE           -
//     %%BIT          MRSPERR             8        8            0           R|W           TRUE           -
//     %%BIT          MCRCSTO             4        4            0           R|W           TRUE           -
//     %%BIT          MWDATTO             3        3            0           R|W           TRUE           -
//     %%BIT          MRDATTO             2        2            0           R|W           TRUE           -
//     %%BIT          MRBSYTO             1        1            0           R|W           TRUE           -
//     %%BIT          MRSPTO              0        0            0           R|W           TRUE           -
//     
// %REG_NAME   MMCAnCE_HOST_STS1
//     %%TITLE        name                upper    lower        init        access        support        callback
//     %%BIT          CMDSEQ              31       31           0           R             TRUE           -
//     %%BIT          CMDSIG              30       30           0           R             TRUE           -
//     %%BIT          RSPIDX              29       24           0           R             TRUE           -
//     %%BIT          DATSIG              23       16           0           R             TRUE           -
//     %%BIT          RCVBLK              15       0            0           R             TRUE           -              
//                
// %REG_NAME   MMCAnCE_HOST_STS2     
//     %%TITLE        name                upper    lower        init        access        support        callback                                                                                             
//     %%BIT          CRCSTE              31       31           0           R             TRUE           -
//     %%BIT          CRC16E              30       30           0           R             TRUE           -
//     %%BIT          AC12CRCE            29       29           0           R             TRUE           -
//     %%BIT          RSPCRC7E            28       28           0           R             TRUE           -
//     %%BIT          CRCSTEBE            27       27           0           R             TRUE           -
//     %%BIT          RDATEBE             26       26           0           R             TRUE           -
//     %%BIT          AC12REBE            25       25           0           R             TRUE           -
//     %%BIT          RSPEBE              24       24           0           R             TRUE           -
//     %%BIT          AC12IDXE            23       23           0           R             TRUE           -
//     %%BIT          RSPIDXE             22       22           0           R             TRUE           -
//     %%BIT          BTACKPATE           21       21           0           R             TRUE           -
//     %%BIT          BTACKEBE            20       20           0           R             TRUE           -
//     %%BIT          CRCST               18       16           0           R             TRUE           -
//     %%BIT          STRDATTO            14       14           0           R             TRUE           -
//     %%BIT          DATBSYTO            13       13           0           R             TRUE           -
//     %%BIT          CRCSTTO             12       12           0           R             TRUE           -
//     %%BIT          AC12BSYTO           11       11           0           R             TRUE           -
//     %%BIT          RSPBSYTO            10       10           0           R             TRUE           -
//     %%BIT          AC12RSPTO           9        9            0           R             TRUE           -
//     %%BIT          STRSPTO             8        8            0           R             TRUE           -
//     %%BIT          BTACKTO             7        7            0           R             TRUE           -
//     %%BIT          1STBTDATTO          6        6            0           R             TRUE           -
//     %%BIT          BTDATTO             5        5            0           R             TRUE           -
//                                                                                                    
// %REG_NAME   MMCAnCE_SWRESA                                   
//     %%TITLE        name                upper    lower        init        access        support        callback                                                                                             
//     %%BIT          SWRST               31       31           0           R|W           TRUE           W
//     ////////////////////////////////////////////////////////////////////////////////
/// @file mmc44_regif.cpp
/// @brief Register IF class of model MMC44
/// $Id: mmc44_regif.cpp,v 1.3 2020/04/15 04:37:36 anhnguyen4 Exp $
/// $Date: 2020/04/15 04:37:36 $
/// $Revison$
/// $Author: anhnguyen4 $
////////////////////////////////////////////////////////////////////////////////
#include "mmc44_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Cmmc44_regif::Cmmc44_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0x80/4))
    #endif
{
    CommandInit();
    MMCAnCE_CMD_SET    = new vpcl::re_register(0x0000, this, "MMCAnCE_CMD_SET"   , name.c_str());
    MMCAnCE_ARG        = new vpcl::re_register(0x0008, this, "MMCAnCE_ARG"       , name.c_str());
    MMCAnCE_ARG_CMD12  = new vpcl::re_register(0x000C, this, "MMCAnCE_ARG_CMD12" , name.c_str());
    MMCAnCE_CMD_CTRL   = new vpcl::re_register(0x0010, this, "MMCAnCE_CMD_CTRL"  , name.c_str());
    MMCAnCE_BLOCK_SET  = new vpcl::re_register(0x0014, this, "MMCAnCE_BLOCK_SET" , name.c_str());
    MMCAnCE_CLK_CTRL   = new vpcl::re_register(0x0018, this, "MMCAnCE_CLK_CTRL"  , name.c_str());
    MMCAnCE_BUF_ACC    = new vpcl::re_register(0x001C, this, "MMCAnCE_BUF_ACC"   , name.c_str());
    MMCAnCE_RESP3      = new vpcl::re_register(0x0020, this, "MMCAnCE_RESP3"     , name.c_str());
    MMCAnCE_RESP2      = new vpcl::re_register(0x0024, this, "MMCAnCE_RESP2"     , name.c_str());
    MMCAnCE_RESP1      = new vpcl::re_register(0x0028, this, "MMCAnCE_RESP1"     , name.c_str());
    MMCAnCE_RESP0      = new vpcl::re_register(0x002C, this, "MMCAnCE_RESP0"     , name.c_str());
    MMCAnCE_RESP_CMD12 = new vpcl::re_register(0x0030, this, "MMCAnCE_RESP_CMD12", name.c_str());
    MMCAnCE_DATA       = new vpcl::re_register(0x0034, this, "MMCAnCE_DATA"      , name.c_str());
    MMCAnCE_BOOT       = new vpcl::re_register(0x003C, this, "MMCAnCE_BOOT"      , name.c_str());
    MMCAnCE_INT        = new vpcl::re_register(0x0040, this, "MMCAnCE_INT"       , name.c_str());
    MMCAnCE_INT_EN     = new vpcl::re_register(0x0044, this, "MMCAnCE_INT_EN"    , name.c_str());
    MMCAnCE_HOST_STS1  = new vpcl::re_register(0x0048, this, "MMCAnCE_HOST_STS1" , name.c_str());
    MMCAnCE_HOST_STS2  = new vpcl::re_register(0x004C, this, "MMCAnCE_HOST_STS2" , name.c_str());
    MMCAnCE_SWRESA     = new vpcl::re_register(0x007C, this, "MMCAnCE_SWRESA"    , name.c_str());

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<7];
    for (uint i = 0; i < (1<<7); i++) {
        mRegMap[i] = (1<<7);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x000C]     = index;
    mRegMap[0x000C + 1] = index;
    mRegMap[0x000C + 2] = index;
    mRegMap[0x000C + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0014]     = index;
    mRegMap[0x0014 + 1] = index;
    mRegMap[0x0014 + 2] = index;
    mRegMap[0x0014 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x001C]     = index;
    mRegMap[0x001C + 1] = index;
    mRegMap[0x001C + 2] = index;
    mRegMap[0x001C + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    mRegMap[0x0024]     = index;
    mRegMap[0x0024 + 1] = index;
    mRegMap[0x0024 + 2] = index;
    mRegMap[0x0024 + 3] = index++;
    mRegMap[0x0028]     = index;
    mRegMap[0x0028 + 1] = index;
    mRegMap[0x0028 + 2] = index;
    mRegMap[0x0028 + 3] = index++;
    mRegMap[0x002C]     = index;
    mRegMap[0x002C + 1] = index;
    mRegMap[0x002C + 2] = index;
    mRegMap[0x002C + 3] = index++;
    mRegMap[0x0030]     = index;
    mRegMap[0x0030 + 1] = index;
    mRegMap[0x0030 + 2] = index;
    mRegMap[0x0030 + 3] = index++;
    mRegMap[0x0034]     = index;
    mRegMap[0x0034 + 1] = index;
    mRegMap[0x0034 + 2] = index;
    mRegMap[0x0034 + 3] = index++;
    mRegMap[0x003C]     = index;
    mRegMap[0x003C + 1] = index;
    mRegMap[0x003C + 2] = index;
    mRegMap[0x003C + 3] = index++;
    mRegMap[0x0040]     = index;
    mRegMap[0x0040 + 1] = index;
    mRegMap[0x0040 + 2] = index;
    mRegMap[0x0040 + 3] = index++;
    mRegMap[0x0044]     = index;
    mRegMap[0x0044 + 1] = index;
    mRegMap[0x0044 + 2] = index;
    mRegMap[0x0044 + 3] = index++;
    mRegMap[0x0048]     = index;
    mRegMap[0x0048 + 1] = index;
    mRegMap[0x0048 + 2] = index;
    mRegMap[0x0048 + 3] = index++;
    mRegMap[0x004C]     = index;
    mRegMap[0x004C + 1] = index;
    mRegMap[0x004C + 2] = index;
    mRegMap[0x004C + 3] = index++;
    mRegMap[0x007C]     = index;
    mRegMap[0x007C + 1] = index;
    mRegMap[0x007C + 2] = index;
    mRegMap[0x007C + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_MMCAnCE_CMD_SET     , MMCAnCE_CMD_SET->name()   , MMCAnCE_CMD_SET->addr()   );
    cw_instantiate_reg(CW_MMCAnCE_ARG         , MMCAnCE_ARG->name()       , MMCAnCE_ARG->addr()       );
    cw_instantiate_reg(CW_MMCAnCE_ARG_CMD12   , MMCAnCE_ARG_CMD12->name() , MMCAnCE_ARG_CMD12->addr() );
    cw_instantiate_reg(CW_MMCAnCE_CMD_CTRL    , MMCAnCE_CMD_CTRL->name()  , MMCAnCE_CMD_CTRL->addr()  );
    cw_instantiate_reg(CW_MMCAnCE_BLOCK_SET   , MMCAnCE_BLOCK_SET->name() , MMCAnCE_BLOCK_SET->addr() );
    cw_instantiate_reg(CW_MMCAnCE_CLK_CTRL    , MMCAnCE_CLK_CTRL->name()  , MMCAnCE_CLK_CTRL->addr()  );
    cw_instantiate_reg(CW_MMCAnCE_BUF_ACC     , MMCAnCE_BUF_ACC->name()   , MMCAnCE_BUF_ACC->addr()   );
    cw_instantiate_reg(CW_MMCAnCE_RESP3       , MMCAnCE_RESP3->name()     , MMCAnCE_RESP3->addr()     );
    cw_instantiate_reg(CW_MMCAnCE_RESP2       , MMCAnCE_RESP2->name()     , MMCAnCE_RESP2->addr()     );
    cw_instantiate_reg(CW_MMCAnCE_RESP1       , MMCAnCE_RESP1->name()     , MMCAnCE_RESP1->addr()     );
    cw_instantiate_reg(CW_MMCAnCE_RESP0       , MMCAnCE_RESP0->name()     , MMCAnCE_RESP0->addr()     );
    cw_instantiate_reg(CW_MMCAnCE_RESP_CMD12  , MMCAnCE_RESP_CMD12->name(), MMCAnCE_RESP_CMD12->addr());
    cw_instantiate_reg(CW_MMCAnCE_DATA        , MMCAnCE_DATA->name()      , MMCAnCE_DATA->addr()      );
    cw_instantiate_reg(CW_MMCAnCE_BOOT        , MMCAnCE_BOOT->name()      , MMCAnCE_BOOT->addr()      );
    cw_instantiate_reg(CW_MMCAnCE_INT         , MMCAnCE_INT->name()       , MMCAnCE_INT->addr()       );
    cw_instantiate_reg(CW_MMCAnCE_INT_EN      , MMCAnCE_INT_EN->name()    , MMCAnCE_INT_EN->addr()    );
    cw_instantiate_reg(CW_MMCAnCE_HOST_STS1   , MMCAnCE_HOST_STS1->name() , MMCAnCE_HOST_STS1->addr() );
    cw_instantiate_reg(CW_MMCAnCE_HOST_STS2   , MMCAnCE_HOST_STS2->name() , MMCAnCE_HOST_STS2->addr() );
    cw_instantiate_reg(CW_MMCAnCE_SWRESA      , MMCAnCE_SWRESA->name()    , MMCAnCE_SWRESA->addr()    );
    #endif
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_CMD_SET     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_ARG         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_ARG_CMD12   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_CMD_CTRL    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_BLOCK_SET   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_CLK_CTRL    , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_BUF_ACC     , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_RESP3       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_RESP2       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_RESP1       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_RESP0       , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_RESP_CMD12  , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_DATA        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_BOOT        , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_INT         , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_INT_EN      , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_HOST_STS1   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_HOST_STS2   , mCurReg, 0,  4,      "32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(MMCAnCE_SWRESA      , mCurReg, 0,  4,      "32", "8|16|32");

    mRegList = mCurReg;

    (*MMCAnCE_CMD_SET     ) (30, 30, "BOOT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (29, 24, "CMD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (23, 22, "RTYP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (21, 21, "RBSY"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (19, 19, "WDAT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (18, 18, "DWEN"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (17, 17, "CMLTE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (16, 16, "CMD12EN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (15, 14, "RIDXC"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (13, 12, "RCRC7C"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) (10, 10, "CRC16C"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 9,  9, "BOOTACK" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 8,  8, "CRCSTE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 7,  7, "TBIT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 6,  6, "OPDM"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 3,  3, "SBIT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_SET     ) ( 1,  0, "DATW"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_ARG         ) (31,  0, "ARG"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_ARG_CMD12   ) (31,  0, "C12ARG"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CMD_CTRL    ) ( 0,  0, "BREAK"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BLOCK_SET   ) (31, 16, "BLKCNT"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BLOCK_SET   ) (15,  0, "BLKSIZ"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) (31, 31, "MMCBUSBSY", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) (24, 24, "CLKEN"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) (19, 16, "CLKDIV"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) (13, 12, "SRSPTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) (11,  8, "SRBSYTO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_CLK_CTRL    ) ( 7,  4, "SRWDTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BUF_ACC     ) (26, 26, "DMATYP"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BUF_ACC     ) (25, 25, "DMAWEN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BUF_ACC     ) (24, 24, "DMAREN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BUF_ACC     ) (16, 16, "ATYP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_RESP3       ) (31,  0, "RSP"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_RESP2       ) (31,  0, "RSP"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_RESP1       ) (31,  0, "RSP"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_RESP0       ) (31,  0, "RSP"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_RESP_CMD12  ) (31,  0, "RSP12"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_DATA        ) (31,  0, "DATA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BOOT        ) (31, 28, "BTCLKDIV", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BOOT        ) (27, 24, "SBTACKTO", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BOOT        ) (23, 20, "S1STBTDATTO", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_BOOT        ) (19, 16, "SBTDATTO", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (26, 26, "CMD12DRE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (25, 25, "CMD12RBE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (24, 24, "CMD12CRE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (23, 23, "DTRANE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (22, 22, "BUFRE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (21, 21, "BUFWEN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (20, 20, "BUFREN"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (17, 17, "RBSYE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (16, 16, "CRSPE"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (15, 15, "CMDVIO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (14, 14, "BUFVIO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (11, 11, "WDATERR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) (10, 10, "RDATERR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 9,  9, "RIDXERR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 8,  8, "RSPERR"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 4,  4, "CRCSTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 3,  3, "WDATTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 2,  2, "RDATTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 1,  1, "RBSYTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT         ) ( 0,  0, "RSPTO"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (26, 26, "MCMD12DRE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (25, 25, "MCMD12RBE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (24, 24, "MCMD12CRE", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (23, 23, "MDTRANE" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (22, 22, "MBUFRE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (21, 21, "MBUFWEN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (20, 20, "MBUFREN" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (17, 17, "MRBSYE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (16, 16, "MCRSPE"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (15, 15, "MCMDVIO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (14, 14, "MBUFVIO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (11, 11, "MWDATERR", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) (10, 10, "MRDATERR", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 9,  9, "MRIDXERR", 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 8,  8, "MRSPERR" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 4,  4, "MCRCSTO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 3,  3, "MWDATTO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 2,  2, "MRDATTO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 1,  1, "MRBSYTO" , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_INT_EN      ) ( 0,  0, "MRSPTO"  , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS1   ) (31, 31, "CMDSEQ"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS1   ) (30, 30, "CMDSIG"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS1   ) (29, 24, "RSPIDX"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS1   ) (23, 16, "DATSIG"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS1   ) (15,  0, "RCVBLK"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (31, 31, "CRCSTE"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (30, 30, "CRC16E"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (29, 29, "AC12CRCE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (28, 28, "RSPCRC7E", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (27, 27, "CRCSTEBE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (26, 26, "RDATEBE" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (25, 25, "AC12REBE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (24, 24, "RSPEBE"  , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (23, 23, "AC12IDXE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (22, 22, "RSPIDXE" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (21, 21, "BTACKPATE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (20, 20, "BTACKEBE", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (18, 16, "CRCST"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (14, 14, "STRDATTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (13, 13, "DATBSYTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (12, 12, "CRCSTTO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (11, 11, "AC12BSYTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) (10, 10, "RSPBSYTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) ( 9,  9, "AC12RSPTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) ( 8,  8, "STRSPTO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) ( 7,  7, "BTACKTO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) ( 6,  6, "1STBTDATTO", 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_HOST_STS2   ) ( 5,  5, "BTDATTO" , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*MMCAnCE_SWRESA      ) (31, 31, "SWRST"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["MMCAnCE_CMD_SET" ]["BOOT"            ] = &Cmmc44_regif::cb_MMCAnCE_CMD_SET_BOOT;
    mWrCbAPI["MMCAnCE_CMD_SET" ]["DATW"            ] = &Cmmc44_regif::cb_MMCAnCE_CMD_SET_DATW;
    mWrCbAPI["MMCAnCE_ARG"     ]["ARG"             ] = &Cmmc44_regif::cb_MMCAnCE_ARG_ARG;
    mWrCbAPI["MMCAnCE_ARG_CMD12"]["C12ARG"          ] = &Cmmc44_regif::cb_MMCAnCE_ARG_CMD12_C12ARG;
    mWrCbAPI["MMCAnCE_CMD_CTRL"]["BREAK"           ] = &Cmmc44_regif::cb_MMCAnCE_CMD_CTRL_BREAK;
    mWrCbAPI["MMCAnCE_CLK_CTRL"]["CLKEN"           ] = &Cmmc44_regif::cb_MMCAnCE_CLK_CTRL_CLKEN;
    mWrCbAPI["MMCAnCE_BUF_ACC" ]["DMATYP"          ] = &Cmmc44_regif::cb_MMCAnCE_BUF_ACC_DMATYP;
    mWrCbAPI["MMCAnCE_DATA"    ]["DATA"            ] = &Cmmc44_regif::cb_MMCAnCE_DATA_DATA;
    mWrCbAPI["MMCAnCE_BOOT"    ]["BTCLKDIV"        ] = &Cmmc44_regif::cb_MMCAnCE_BOOT_BTCLKDIV;
    mWrCbAPI["MMCAnCE_INT"     ]["CMD12DRE"        ] = &Cmmc44_regif::cb_MMCAnCE_INT_CMD12DRE;
    mWrCbAPI["MMCAnCE_INT_EN"  ]["MBUFWEN"         ] = &Cmmc44_regif::cb_MMCAnCE_INT_EN_MBUFWEN;
    mWrCbAPI["MMCAnCE_SWRESA"  ]["SWRST"           ] = &Cmmc44_regif::cb_MMCAnCE_SWRESA_SWRST;

    mRdCbAPI["MMCAnCE_DATA"    ]["DATA"            ] = &Cmmc44_regif::cb_MMCAnCE_DATA_DATA;
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Cmmc44_regif::~Cmmc44_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Cmmc44_regif::uint Cmmc44_regif::bit_select(
                          cuint val,    ///< [in] Writting address
                          cuint start,  ///< [in] start bit position
                          cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmmc44_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                          const unsigned char *p_data,   ///< [in] Writing data
                          cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmmc44_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                          unsigned char *p_data,   ///< [out] Reading data
                          cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmmc44_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                              const unsigned char *p_data,   ///< [in] Writing data
                              cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmmc44_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                              unsigned char *p_data,   ///< [out] Reading data
                              cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Cmmc44_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                  const unsigned char *p_data,  ///< [in] Writing data
                                  cuint size,                   ///< [in] Data size (byte)
                                  bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Cmmc44_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                  unsigned char *p_data,   ///< [out] Reading data
                                  cuint size,              ///< [in]  Data size (byte)
                                  bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 7-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Cmmc44_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                               unsigned char *p_data,          ///< [out] Reading data
                               cuint size,                     ///< [in]  Data size (byte)
                               cuint reg_index,                ///< [in] Register index
                               bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Cmmc44_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                               const unsigned char *p_data,      ///< [in] Writing data
                               cuint size,                       ///< [in] Data size (byte)
                               cuint reg_index,                  ///< [in] Register index
                               bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Cmmc44_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Cmmc44_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Cmmc44_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Cmmc44_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Cmmc44_regif::InitLocalVal()
{
    // Initialize local variables
    MMCAnCE_CMD_SET_BOOT = 0x0;
    MMCAnCE_CMD_SET_CMD = 0x0;
    MMCAnCE_CMD_SET_RTYP = 0x0;
    MMCAnCE_CMD_SET_RBSY = 0x0;
    MMCAnCE_CMD_SET_WDAT = 0x0;
    MMCAnCE_CMD_SET_DWEN = 0x0;
    MMCAnCE_CMD_SET_CMLTE = 0x0;
    MMCAnCE_CMD_SET_CMD12EN = 0x0;
    MMCAnCE_CMD_SET_RIDXC = 0x0;
    MMCAnCE_CMD_SET_RCRC7C = 0x0;
    MMCAnCE_CMD_SET_CRC16C = 0x0;
    MMCAnCE_CMD_SET_BOOTACK = 0x0;
    MMCAnCE_CMD_SET_CRCSTE = 0x0;
    MMCAnCE_CMD_SET_TBIT = 0x0;
    MMCAnCE_CMD_SET_OPDM = 0x0;
    MMCAnCE_CMD_SET_SBIT = 0x0;
    MMCAnCE_CMD_SET_DATW = 0x0;
    MMCAnCE_ARG_ARG    = 0x0;
    MMCAnCE_ARG_CMD12_C12ARG = 0x0;
    MMCAnCE_CMD_CTRL_BREAK = 0x0;
    MMCAnCE_BLOCK_SET_BLKCNT = 0x0;
    MMCAnCE_BLOCK_SET_BLKSIZ = 0x0;
    MMCAnCE_CLK_CTRL_MMCBUSBSY = 0x0;
    MMCAnCE_CLK_CTRL_CLKEN = 0x0;
    MMCAnCE_CLK_CTRL_CLKDIV = 0x0;
    MMCAnCE_CLK_CTRL_SRSPTO = 0x0;
    MMCAnCE_CLK_CTRL_SRBSYTO = 0x0;
    MMCAnCE_CLK_CTRL_SRWDTO = 0x0;
    MMCAnCE_BUF_ACC_DMATYP = 0x0;
    MMCAnCE_BUF_ACC_DMAWEN = 0x0;
    MMCAnCE_BUF_ACC_DMAREN = 0x0;
    MMCAnCE_BUF_ACC_ATYP = 0x0;
    MMCAnCE_RESP3_RSP  = 0x0;
    MMCAnCE_RESP2_RSP  = 0x0;
    MMCAnCE_RESP1_RSP  = 0x0;
    MMCAnCE_RESP0_RSP  = 0x0;
    MMCAnCE_RESP_CMD12_RSP12 = 0x0;
    MMCAnCE_DATA_DATA  = 0x0;
    MMCAnCE_BOOT_BTCLKDIV = 0x0;
    MMCAnCE_BOOT_SBTACKTO = 0x0;
    MMCAnCE_BOOT_S1STBTDATTO = 0x0;
    MMCAnCE_BOOT_SBTDATTO = 0x0;
    MMCAnCE_INT_CMD12DRE = 0x0;
    MMCAnCE_INT_CMD12RBE = 0x0;
    MMCAnCE_INT_CMD12CRE = 0x0;
    MMCAnCE_INT_DTRANE = 0x0;
    MMCAnCE_INT_BUFRE  = 0x0;
    MMCAnCE_INT_BUFWEN = 0x0;
    MMCAnCE_INT_BUFREN = 0x0;
    MMCAnCE_INT_RBSYE  = 0x0;
    MMCAnCE_INT_CRSPE  = 0x0;
    MMCAnCE_INT_CMDVIO = 0x0;
    MMCAnCE_INT_BUFVIO = 0x0;
    MMCAnCE_INT_WDATERR = 0x0;
    MMCAnCE_INT_RDATERR = 0x0;
    MMCAnCE_INT_RIDXERR = 0x0;
    MMCAnCE_INT_RSPERR = 0x0;
    MMCAnCE_INT_CRCSTO = 0x0;
    MMCAnCE_INT_WDATTO = 0x0;
    MMCAnCE_INT_RDATTO = 0x0;
    MMCAnCE_INT_RBSYTO = 0x0;
    MMCAnCE_INT_RSPTO  = 0x0;
    MMCAnCE_INT_EN_MCMD12DRE = 0x0;
    MMCAnCE_INT_EN_MCMD12RBE = 0x0;
    MMCAnCE_INT_EN_MCMD12CRE = 0x0;
    MMCAnCE_INT_EN_MDTRANE = 0x0;
    MMCAnCE_INT_EN_MBUFRE = 0x0;
    MMCAnCE_INT_EN_MBUFWEN = 0x0;
    MMCAnCE_INT_EN_MBUFREN = 0x0;
    MMCAnCE_INT_EN_MRBSYE = 0x0;
    MMCAnCE_INT_EN_MCRSPE = 0x0;
    MMCAnCE_INT_EN_MCMDVIO = 0x0;
    MMCAnCE_INT_EN_MBUFVIO = 0x0;
    MMCAnCE_INT_EN_MWDATERR = 0x0;
    MMCAnCE_INT_EN_MRDATERR = 0x0;
    MMCAnCE_INT_EN_MRIDXERR = 0x0;
    MMCAnCE_INT_EN_MRSPERR = 0x0;
    MMCAnCE_INT_EN_MCRCSTO = 0x0;
    MMCAnCE_INT_EN_MWDATTO = 0x0;
    MMCAnCE_INT_EN_MRDATTO = 0x0;
    MMCAnCE_INT_EN_MRBSYTO = 0x0;
    MMCAnCE_INT_EN_MRSPTO = 0x0;
    MMCAnCE_HOST_STS1_CMDSEQ = 0x0;
    MMCAnCE_HOST_STS1_CMDSIG = 0x0;
    MMCAnCE_HOST_STS1_RSPIDX = 0x0;
    MMCAnCE_HOST_STS1_DATSIG = 0x0;
    MMCAnCE_HOST_STS1_RCVBLK = 0x0;
    MMCAnCE_HOST_STS2_CRCSTE = 0x0;
    MMCAnCE_HOST_STS2_CRC16E = 0x0;
    MMCAnCE_HOST_STS2_AC12CRCE = 0x0;
    MMCAnCE_HOST_STS2_RSPCRC7E = 0x0;
    MMCAnCE_HOST_STS2_CRCSTEBE = 0x0;
    MMCAnCE_HOST_STS2_RDATEBE = 0x0;
    MMCAnCE_HOST_STS2_AC12REBE = 0x0;
    MMCAnCE_HOST_STS2_RSPEBE = 0x0;
    MMCAnCE_HOST_STS2_AC12IDXE = 0x0;
    MMCAnCE_HOST_STS2_RSPIDXE = 0x0;
    MMCAnCE_HOST_STS2_BTACKPATE = 0x0;
    MMCAnCE_HOST_STS2_BTACKEBE = 0x0;
    MMCAnCE_HOST_STS2_CRCST = 0x0;
    MMCAnCE_HOST_STS2_STRDATTO = 0x0;
    MMCAnCE_HOST_STS2_DATBSYTO = 0x0;
    MMCAnCE_HOST_STS2_CRCSTTO = 0x0;
    MMCAnCE_HOST_STS2_AC12BSYTO = 0x0;
    MMCAnCE_HOST_STS2_RSPBSYTO = 0x0;
    MMCAnCE_HOST_STS2_AC12RSPTO = 0x0;
    MMCAnCE_HOST_STS2_STRSPTO = 0x0;
    MMCAnCE_HOST_STS2_BTACKTO = 0x0;
    MMCAnCE_HOST_STS2_1STBTDATTO = 0x0;
    MMCAnCE_HOST_STS2_BTDATTO = 0x0;
    MMCAnCE_SWRESA_SWRST = 0x0;
}

/// Update bit value to local value
/// @return None
void Cmmc44_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        MMCAnCE_CMD_SET_BOOT                   = (*MMCAnCE_CMD_SET   )["BOOT"              ];
        MMCAnCE_CMD_SET_CMD                    = (*MMCAnCE_CMD_SET   )["CMD"               ];
        MMCAnCE_CMD_SET_RTYP                   = (*MMCAnCE_CMD_SET   )["RTYP"              ];
        MMCAnCE_CMD_SET_RBSY                   = (*MMCAnCE_CMD_SET   )["RBSY"              ];
        MMCAnCE_CMD_SET_WDAT                   = (*MMCAnCE_CMD_SET   )["WDAT"              ];
        MMCAnCE_CMD_SET_DWEN                   = (*MMCAnCE_CMD_SET   )["DWEN"              ];
        MMCAnCE_CMD_SET_CMLTE                  = (*MMCAnCE_CMD_SET   )["CMLTE"             ];
        MMCAnCE_CMD_SET_CMD12EN                = (*MMCAnCE_CMD_SET   )["CMD12EN"           ];
        MMCAnCE_CMD_SET_RIDXC                  = (*MMCAnCE_CMD_SET   )["RIDXC"             ];
        MMCAnCE_CMD_SET_RCRC7C                 = (*MMCAnCE_CMD_SET   )["RCRC7C"            ];
        MMCAnCE_CMD_SET_CRC16C                 = (*MMCAnCE_CMD_SET   )["CRC16C"            ];
        MMCAnCE_CMD_SET_BOOTACK                = (*MMCAnCE_CMD_SET   )["BOOTACK"           ];
        MMCAnCE_CMD_SET_CRCSTE                 = (*MMCAnCE_CMD_SET   )["CRCSTE"            ];
        MMCAnCE_CMD_SET_TBIT                   = (*MMCAnCE_CMD_SET   )["TBIT"              ];
        MMCAnCE_CMD_SET_OPDM                   = (*MMCAnCE_CMD_SET   )["OPDM"              ];
        MMCAnCE_CMD_SET_SBIT                   = (*MMCAnCE_CMD_SET   )["SBIT"              ];
        MMCAnCE_CMD_SET_DATW                   = (*MMCAnCE_CMD_SET   )["DATW"              ];
        return;
    }
    if (addr == 0x0008) {
        MMCAnCE_ARG_ARG                        = (*MMCAnCE_ARG       )["ARG"               ];
        return;
    }
    if (addr == 0x000C) {
        MMCAnCE_ARG_CMD12_C12ARG               = (*MMCAnCE_ARG_CMD12 )["C12ARG"            ];
        return;
    }
    if (addr == 0x0010) {
        MMCAnCE_CMD_CTRL_BREAK                 = (*MMCAnCE_CMD_CTRL  )["BREAK"             ];
        return;
    }
    if (addr == 0x0014) {
        MMCAnCE_BLOCK_SET_BLKCNT               = (*MMCAnCE_BLOCK_SET )["BLKCNT"            ];
        MMCAnCE_BLOCK_SET_BLKSIZ               = (*MMCAnCE_BLOCK_SET )["BLKSIZ"            ];
        return;
    }
    if (addr == 0x0018) {
        MMCAnCE_CLK_CTRL_MMCBUSBSY             = (*MMCAnCE_CLK_CTRL  )["MMCBUSBSY"         ];
        MMCAnCE_CLK_CTRL_CLKEN                 = (*MMCAnCE_CLK_CTRL  )["CLKEN"             ];
        MMCAnCE_CLK_CTRL_CLKDIV                = (*MMCAnCE_CLK_CTRL  )["CLKDIV"            ];
        MMCAnCE_CLK_CTRL_SRSPTO                = (*MMCAnCE_CLK_CTRL  )["SRSPTO"            ];
        MMCAnCE_CLK_CTRL_SRBSYTO               = (*MMCAnCE_CLK_CTRL  )["SRBSYTO"           ];
        MMCAnCE_CLK_CTRL_SRWDTO                = (*MMCAnCE_CLK_CTRL  )["SRWDTO"            ];
        return;
    }
    if (addr == 0x001C) {
        MMCAnCE_BUF_ACC_DMATYP                 = (*MMCAnCE_BUF_ACC   )["DMATYP"            ];
        MMCAnCE_BUF_ACC_DMAWEN                 = (*MMCAnCE_BUF_ACC   )["DMAWEN"            ];
        MMCAnCE_BUF_ACC_DMAREN                 = (*MMCAnCE_BUF_ACC   )["DMAREN"            ];
        MMCAnCE_BUF_ACC_ATYP                   = (*MMCAnCE_BUF_ACC   )["ATYP"              ];
        return;
    }
    if (addr == 0x0020) {
        MMCAnCE_RESP3_RSP                      = (*MMCAnCE_RESP3     )["RSP"               ];
        return;
    }
    if (addr == 0x0024) {
        MMCAnCE_RESP2_RSP                      = (*MMCAnCE_RESP2     )["RSP"               ];
        return;
    }
    if (addr == 0x0028) {
        MMCAnCE_RESP1_RSP                      = (*MMCAnCE_RESP1     )["RSP"               ];
        return;
    }
    if (addr == 0x002C) {
        MMCAnCE_RESP0_RSP                      = (*MMCAnCE_RESP0     )["RSP"               ];
        return;
    }
    if (addr == 0x0030) {
        MMCAnCE_RESP_CMD12_RSP12               = (*MMCAnCE_RESP_CMD12)["RSP12"             ];
        return;
    }
    if (addr == 0x0034) {
        MMCAnCE_DATA_DATA                      = (*MMCAnCE_DATA      )["DATA"              ];
        return;
    }
    if (addr == 0x003C) {
        MMCAnCE_BOOT_BTCLKDIV                  = (*MMCAnCE_BOOT      )["BTCLKDIV"          ];
        MMCAnCE_BOOT_SBTACKTO                  = (*MMCAnCE_BOOT      )["SBTACKTO"          ];
        MMCAnCE_BOOT_S1STBTDATTO               = (*MMCAnCE_BOOT      )["S1STBTDATTO"       ];
        MMCAnCE_BOOT_SBTDATTO                  = (*MMCAnCE_BOOT      )["SBTDATTO"          ];
        return;
    }
    if (addr == 0x0040) {
        MMCAnCE_INT_CMD12DRE                   = (*MMCAnCE_INT       )["CMD12DRE"          ];
        MMCAnCE_INT_CMD12RBE                   = (*MMCAnCE_INT       )["CMD12RBE"          ];
        MMCAnCE_INT_CMD12CRE                   = (*MMCAnCE_INT       )["CMD12CRE"          ];
        MMCAnCE_INT_DTRANE                     = (*MMCAnCE_INT       )["DTRANE"            ];
        MMCAnCE_INT_BUFRE                      = (*MMCAnCE_INT       )["BUFRE"             ];
        MMCAnCE_INT_BUFWEN                     = (*MMCAnCE_INT       )["BUFWEN"            ];
        MMCAnCE_INT_BUFREN                     = (*MMCAnCE_INT       )["BUFREN"            ];
        MMCAnCE_INT_RBSYE                      = (*MMCAnCE_INT       )["RBSYE"             ];
        MMCAnCE_INT_CRSPE                      = (*MMCAnCE_INT       )["CRSPE"             ];
        MMCAnCE_INT_CMDVIO                     = (*MMCAnCE_INT       )["CMDVIO"            ];
        MMCAnCE_INT_BUFVIO                     = (*MMCAnCE_INT       )["BUFVIO"            ];
        MMCAnCE_INT_WDATERR                    = (*MMCAnCE_INT       )["WDATERR"           ];
        MMCAnCE_INT_RDATERR                    = (*MMCAnCE_INT       )["RDATERR"           ];
        MMCAnCE_INT_RIDXERR                    = (*MMCAnCE_INT       )["RIDXERR"           ];
        MMCAnCE_INT_RSPERR                     = (*MMCAnCE_INT       )["RSPERR"            ];
        MMCAnCE_INT_CRCSTO                     = (*MMCAnCE_INT       )["CRCSTO"            ];
        MMCAnCE_INT_WDATTO                     = (*MMCAnCE_INT       )["WDATTO"            ];
        MMCAnCE_INT_RDATTO                     = (*MMCAnCE_INT       )["RDATTO"            ];
        MMCAnCE_INT_RBSYTO                     = (*MMCAnCE_INT       )["RBSYTO"            ];
        MMCAnCE_INT_RSPTO                      = (*MMCAnCE_INT       )["RSPTO"             ];
        return;
    }
    if (addr == 0x0044) {
        MMCAnCE_INT_EN_MCMD12DRE               = (*MMCAnCE_INT_EN    )["MCMD12DRE"         ];
        MMCAnCE_INT_EN_MCMD12RBE               = (*MMCAnCE_INT_EN    )["MCMD12RBE"         ];
        MMCAnCE_INT_EN_MCMD12CRE               = (*MMCAnCE_INT_EN    )["MCMD12CRE"         ];
        MMCAnCE_INT_EN_MDTRANE                 = (*MMCAnCE_INT_EN    )["MDTRANE"           ];
        MMCAnCE_INT_EN_MBUFRE                  = (*MMCAnCE_INT_EN    )["MBUFRE"            ];
        MMCAnCE_INT_EN_MBUFWEN                 = (*MMCAnCE_INT_EN    )["MBUFWEN"           ];
        MMCAnCE_INT_EN_MBUFREN                 = (*MMCAnCE_INT_EN    )["MBUFREN"           ];
        MMCAnCE_INT_EN_MRBSYE                  = (*MMCAnCE_INT_EN    )["MRBSYE"            ];
        MMCAnCE_INT_EN_MCRSPE                  = (*MMCAnCE_INT_EN    )["MCRSPE"            ];
        MMCAnCE_INT_EN_MCMDVIO                 = (*MMCAnCE_INT_EN    )["MCMDVIO"           ];
        MMCAnCE_INT_EN_MBUFVIO                 = (*MMCAnCE_INT_EN    )["MBUFVIO"           ];
        MMCAnCE_INT_EN_MWDATERR                = (*MMCAnCE_INT_EN    )["MWDATERR"          ];
        MMCAnCE_INT_EN_MRDATERR                = (*MMCAnCE_INT_EN    )["MRDATERR"          ];
        MMCAnCE_INT_EN_MRIDXERR                = (*MMCAnCE_INT_EN    )["MRIDXERR"          ];
        MMCAnCE_INT_EN_MRSPERR                 = (*MMCAnCE_INT_EN    )["MRSPERR"           ];
        MMCAnCE_INT_EN_MCRCSTO                 = (*MMCAnCE_INT_EN    )["MCRCSTO"           ];
        MMCAnCE_INT_EN_MWDATTO                 = (*MMCAnCE_INT_EN    )["MWDATTO"           ];
        MMCAnCE_INT_EN_MRDATTO                 = (*MMCAnCE_INT_EN    )["MRDATTO"           ];
        MMCAnCE_INT_EN_MRBSYTO                 = (*MMCAnCE_INT_EN    )["MRBSYTO"           ];
        MMCAnCE_INT_EN_MRSPTO                  = (*MMCAnCE_INT_EN    )["MRSPTO"            ];
        return;
    }
    if (addr == 0x0048) {
        MMCAnCE_HOST_STS1_CMDSEQ               = (*MMCAnCE_HOST_STS1 )["CMDSEQ"            ];
        MMCAnCE_HOST_STS1_CMDSIG               = (*MMCAnCE_HOST_STS1 )["CMDSIG"            ];
        MMCAnCE_HOST_STS1_RSPIDX               = (*MMCAnCE_HOST_STS1 )["RSPIDX"            ];
        MMCAnCE_HOST_STS1_DATSIG               = (*MMCAnCE_HOST_STS1 )["DATSIG"            ];
        MMCAnCE_HOST_STS1_RCVBLK               = (*MMCAnCE_HOST_STS1 )["RCVBLK"            ];
        return;
    }
    if (addr == 0x004C) {
        MMCAnCE_HOST_STS2_CRCSTE               = (*MMCAnCE_HOST_STS2 )["CRCSTE"            ];
        MMCAnCE_HOST_STS2_CRC16E               = (*MMCAnCE_HOST_STS2 )["CRC16E"            ];
        MMCAnCE_HOST_STS2_AC12CRCE             = (*MMCAnCE_HOST_STS2 )["AC12CRCE"          ];
        MMCAnCE_HOST_STS2_RSPCRC7E             = (*MMCAnCE_HOST_STS2 )["RSPCRC7E"          ];
        MMCAnCE_HOST_STS2_CRCSTEBE             = (*MMCAnCE_HOST_STS2 )["CRCSTEBE"          ];
        MMCAnCE_HOST_STS2_RDATEBE              = (*MMCAnCE_HOST_STS2 )["RDATEBE"           ];
        MMCAnCE_HOST_STS2_AC12REBE             = (*MMCAnCE_HOST_STS2 )["AC12REBE"          ];
        MMCAnCE_HOST_STS2_RSPEBE               = (*MMCAnCE_HOST_STS2 )["RSPEBE"            ];
        MMCAnCE_HOST_STS2_AC12IDXE             = (*MMCAnCE_HOST_STS2 )["AC12IDXE"          ];
        MMCAnCE_HOST_STS2_RSPIDXE              = (*MMCAnCE_HOST_STS2 )["RSPIDXE"           ];
        MMCAnCE_HOST_STS2_BTACKPATE            = (*MMCAnCE_HOST_STS2 )["BTACKPATE"         ];
        MMCAnCE_HOST_STS2_BTACKEBE             = (*MMCAnCE_HOST_STS2 )["BTACKEBE"          ];
        MMCAnCE_HOST_STS2_CRCST                = (*MMCAnCE_HOST_STS2 )["CRCST"             ];
        MMCAnCE_HOST_STS2_STRDATTO             = (*MMCAnCE_HOST_STS2 )["STRDATTO"          ];
        MMCAnCE_HOST_STS2_DATBSYTO             = (*MMCAnCE_HOST_STS2 )["DATBSYTO"          ];
        MMCAnCE_HOST_STS2_CRCSTTO              = (*MMCAnCE_HOST_STS2 )["CRCSTTO"           ];
        MMCAnCE_HOST_STS2_AC12BSYTO            = (*MMCAnCE_HOST_STS2 )["AC12BSYTO"         ];
        MMCAnCE_HOST_STS2_RSPBSYTO             = (*MMCAnCE_HOST_STS2 )["RSPBSYTO"          ];
        MMCAnCE_HOST_STS2_AC12RSPTO            = (*MMCAnCE_HOST_STS2 )["AC12RSPTO"         ];
        MMCAnCE_HOST_STS2_STRSPTO              = (*MMCAnCE_HOST_STS2 )["STRSPTO"           ];
        MMCAnCE_HOST_STS2_BTACKTO              = (*MMCAnCE_HOST_STS2 )["BTACKTO"           ];
        MMCAnCE_HOST_STS2_1STBTDATTO           = (*MMCAnCE_HOST_STS2 )["1STBTDATTO"        ];
        MMCAnCE_HOST_STS2_BTDATTO              = (*MMCAnCE_HOST_STS2 )["BTDATTO"           ];
        return;
    }
    if (addr == 0x007C) {
        MMCAnCE_SWRESA_SWRST                   = (*MMCAnCE_SWRESA    )["SWRST"             ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Cmmc44_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*MMCAnCE_CMD_SET   )["BOOT"              ] = MMCAnCE_CMD_SET_BOOT;
        (*MMCAnCE_CMD_SET   )["CMD"               ] = MMCAnCE_CMD_SET_CMD;
        (*MMCAnCE_CMD_SET   )["RTYP"              ] = MMCAnCE_CMD_SET_RTYP;
        (*MMCAnCE_CMD_SET   )["RBSY"              ] = MMCAnCE_CMD_SET_RBSY;
        (*MMCAnCE_CMD_SET   )["WDAT"              ] = MMCAnCE_CMD_SET_WDAT;
        (*MMCAnCE_CMD_SET   )["DWEN"              ] = MMCAnCE_CMD_SET_DWEN;
        (*MMCAnCE_CMD_SET   )["CMLTE"             ] = MMCAnCE_CMD_SET_CMLTE;
        (*MMCAnCE_CMD_SET   )["CMD12EN"           ] = MMCAnCE_CMD_SET_CMD12EN;
        (*MMCAnCE_CMD_SET   )["RIDXC"             ] = MMCAnCE_CMD_SET_RIDXC;
        (*MMCAnCE_CMD_SET   )["RCRC7C"            ] = MMCAnCE_CMD_SET_RCRC7C;
        (*MMCAnCE_CMD_SET   )["CRC16C"            ] = MMCAnCE_CMD_SET_CRC16C;
        (*MMCAnCE_CMD_SET   )["BOOTACK"           ] = MMCAnCE_CMD_SET_BOOTACK;
        (*MMCAnCE_CMD_SET   )["CRCSTE"            ] = MMCAnCE_CMD_SET_CRCSTE;
        (*MMCAnCE_CMD_SET   )["TBIT"              ] = MMCAnCE_CMD_SET_TBIT;
        (*MMCAnCE_CMD_SET   )["OPDM"              ] = MMCAnCE_CMD_SET_OPDM;
        (*MMCAnCE_CMD_SET   )["SBIT"              ] = MMCAnCE_CMD_SET_SBIT;
        (*MMCAnCE_CMD_SET   )["DATW"              ] = MMCAnCE_CMD_SET_DATW;
        return;
    }
    if (addr == 0x0008) {
        (*MMCAnCE_ARG       )["ARG"               ] = MMCAnCE_ARG_ARG;
        return;
    }
    if (addr == 0x000C) {
        (*MMCAnCE_ARG_CMD12 )["C12ARG"            ] = MMCAnCE_ARG_CMD12_C12ARG;
        return;
    }
    if (addr == 0x0010) {
        (*MMCAnCE_CMD_CTRL  )["BREAK"             ] = MMCAnCE_CMD_CTRL_BREAK;
        return;
    }
    if (addr == 0x0014) {
        (*MMCAnCE_BLOCK_SET )["BLKCNT"            ] = MMCAnCE_BLOCK_SET_BLKCNT;
        (*MMCAnCE_BLOCK_SET )["BLKSIZ"            ] = MMCAnCE_BLOCK_SET_BLKSIZ;
        return;
    }
    if (addr == 0x0018) {
        (*MMCAnCE_CLK_CTRL  )["MMCBUSBSY"         ] = MMCAnCE_CLK_CTRL_MMCBUSBSY;
        (*MMCAnCE_CLK_CTRL  )["CLKEN"             ] = MMCAnCE_CLK_CTRL_CLKEN;
        (*MMCAnCE_CLK_CTRL  )["CLKDIV"            ] = MMCAnCE_CLK_CTRL_CLKDIV;
        (*MMCAnCE_CLK_CTRL  )["SRSPTO"            ] = MMCAnCE_CLK_CTRL_SRSPTO;
        (*MMCAnCE_CLK_CTRL  )["SRBSYTO"           ] = MMCAnCE_CLK_CTRL_SRBSYTO;
        (*MMCAnCE_CLK_CTRL  )["SRWDTO"            ] = MMCAnCE_CLK_CTRL_SRWDTO;
        return;
    }
    if (addr == 0x001C) {
        (*MMCAnCE_BUF_ACC   )["DMATYP"            ] = MMCAnCE_BUF_ACC_DMATYP;
        (*MMCAnCE_BUF_ACC   )["DMAWEN"            ] = MMCAnCE_BUF_ACC_DMAWEN;
        (*MMCAnCE_BUF_ACC   )["DMAREN"            ] = MMCAnCE_BUF_ACC_DMAREN;
        (*MMCAnCE_BUF_ACC   )["ATYP"              ] = MMCAnCE_BUF_ACC_ATYP;
        return;
    }
    if (addr == 0x0020) {
        (*MMCAnCE_RESP3     )["RSP"               ] = MMCAnCE_RESP3_RSP;
        return;
    }
    if (addr == 0x0024) {
        (*MMCAnCE_RESP2     )["RSP"               ] = MMCAnCE_RESP2_RSP;
        return;
    }
    if (addr == 0x0028) {
        (*MMCAnCE_RESP1     )["RSP"               ] = MMCAnCE_RESP1_RSP;
        return;
    }
    if (addr == 0x002C) {
        (*MMCAnCE_RESP0     )["RSP"               ] = MMCAnCE_RESP0_RSP;
        return;
    }
    if (addr == 0x0030) {
        (*MMCAnCE_RESP_CMD12)["RSP12"             ] = MMCAnCE_RESP_CMD12_RSP12;
        return;
    }
    if (addr == 0x0034) {
        (*MMCAnCE_DATA      )["DATA"              ] = MMCAnCE_DATA_DATA;
        return;
    }
    if (addr == 0x003C) {
        (*MMCAnCE_BOOT      )["BTCLKDIV"          ] = MMCAnCE_BOOT_BTCLKDIV;
        (*MMCAnCE_BOOT      )["SBTACKTO"          ] = MMCAnCE_BOOT_SBTACKTO;
        (*MMCAnCE_BOOT      )["S1STBTDATTO"       ] = MMCAnCE_BOOT_S1STBTDATTO;
        (*MMCAnCE_BOOT      )["SBTDATTO"          ] = MMCAnCE_BOOT_SBTDATTO;
        return;
    }
    if (addr == 0x0040) {
        (*MMCAnCE_INT       )["CMD12DRE"          ] = MMCAnCE_INT_CMD12DRE;
        (*MMCAnCE_INT       )["CMD12RBE"          ] = MMCAnCE_INT_CMD12RBE;
        (*MMCAnCE_INT       )["CMD12CRE"          ] = MMCAnCE_INT_CMD12CRE;
        (*MMCAnCE_INT       )["DTRANE"            ] = MMCAnCE_INT_DTRANE;
        (*MMCAnCE_INT       )["BUFRE"             ] = MMCAnCE_INT_BUFRE;
        (*MMCAnCE_INT       )["BUFWEN"            ] = MMCAnCE_INT_BUFWEN;
        (*MMCAnCE_INT       )["BUFREN"            ] = MMCAnCE_INT_BUFREN;
        (*MMCAnCE_INT       )["RBSYE"             ] = MMCAnCE_INT_RBSYE;
        (*MMCAnCE_INT       )["CRSPE"             ] = MMCAnCE_INT_CRSPE;
        (*MMCAnCE_INT       )["CMDVIO"            ] = MMCAnCE_INT_CMDVIO;
        (*MMCAnCE_INT       )["BUFVIO"            ] = MMCAnCE_INT_BUFVIO;
        (*MMCAnCE_INT       )["WDATERR"           ] = MMCAnCE_INT_WDATERR;
        (*MMCAnCE_INT       )["RDATERR"           ] = MMCAnCE_INT_RDATERR;
        (*MMCAnCE_INT       )["RIDXERR"           ] = MMCAnCE_INT_RIDXERR;
        (*MMCAnCE_INT       )["RSPERR"            ] = MMCAnCE_INT_RSPERR;
        (*MMCAnCE_INT       )["CRCSTO"            ] = MMCAnCE_INT_CRCSTO;
        (*MMCAnCE_INT       )["WDATTO"            ] = MMCAnCE_INT_WDATTO;
        (*MMCAnCE_INT       )["RDATTO"            ] = MMCAnCE_INT_RDATTO;
        (*MMCAnCE_INT       )["RBSYTO"            ] = MMCAnCE_INT_RBSYTO;
        (*MMCAnCE_INT       )["RSPTO"             ] = MMCAnCE_INT_RSPTO;
        return;
    }
    if (addr == 0x0044) {
        (*MMCAnCE_INT_EN    )["MCMD12DRE"         ] = MMCAnCE_INT_EN_MCMD12DRE;
        (*MMCAnCE_INT_EN    )["MCMD12RBE"         ] = MMCAnCE_INT_EN_MCMD12RBE;
        (*MMCAnCE_INT_EN    )["MCMD12CRE"         ] = MMCAnCE_INT_EN_MCMD12CRE;
        (*MMCAnCE_INT_EN    )["MDTRANE"           ] = MMCAnCE_INT_EN_MDTRANE;
        (*MMCAnCE_INT_EN    )["MBUFRE"            ] = MMCAnCE_INT_EN_MBUFRE;
        (*MMCAnCE_INT_EN    )["MBUFWEN"           ] = MMCAnCE_INT_EN_MBUFWEN;
        (*MMCAnCE_INT_EN    )["MBUFREN"           ] = MMCAnCE_INT_EN_MBUFREN;
        (*MMCAnCE_INT_EN    )["MRBSYE"            ] = MMCAnCE_INT_EN_MRBSYE;
        (*MMCAnCE_INT_EN    )["MCRSPE"            ] = MMCAnCE_INT_EN_MCRSPE;
        (*MMCAnCE_INT_EN    )["MCMDVIO"           ] = MMCAnCE_INT_EN_MCMDVIO;
        (*MMCAnCE_INT_EN    )["MBUFVIO"           ] = MMCAnCE_INT_EN_MBUFVIO;
        (*MMCAnCE_INT_EN    )["MWDATERR"          ] = MMCAnCE_INT_EN_MWDATERR;
        (*MMCAnCE_INT_EN    )["MRDATERR"          ] = MMCAnCE_INT_EN_MRDATERR;
        (*MMCAnCE_INT_EN    )["MRIDXERR"          ] = MMCAnCE_INT_EN_MRIDXERR;
        (*MMCAnCE_INT_EN    )["MRSPERR"           ] = MMCAnCE_INT_EN_MRSPERR;
        (*MMCAnCE_INT_EN    )["MCRCSTO"           ] = MMCAnCE_INT_EN_MCRCSTO;
        (*MMCAnCE_INT_EN    )["MWDATTO"           ] = MMCAnCE_INT_EN_MWDATTO;
        (*MMCAnCE_INT_EN    )["MRDATTO"           ] = MMCAnCE_INT_EN_MRDATTO;
        (*MMCAnCE_INT_EN    )["MRBSYTO"           ] = MMCAnCE_INT_EN_MRBSYTO;
        (*MMCAnCE_INT_EN    )["MRSPTO"            ] = MMCAnCE_INT_EN_MRSPTO;
        return;
    }
    if (addr == 0x0048) {
        (*MMCAnCE_HOST_STS1 )["CMDSEQ"            ] = MMCAnCE_HOST_STS1_CMDSEQ;
        (*MMCAnCE_HOST_STS1 )["CMDSIG"            ] = MMCAnCE_HOST_STS1_CMDSIG;
        (*MMCAnCE_HOST_STS1 )["RSPIDX"            ] = MMCAnCE_HOST_STS1_RSPIDX;
        (*MMCAnCE_HOST_STS1 )["DATSIG"            ] = MMCAnCE_HOST_STS1_DATSIG;
        (*MMCAnCE_HOST_STS1 )["RCVBLK"            ] = MMCAnCE_HOST_STS1_RCVBLK;
        return;
    }
    if (addr == 0x004C) {
        (*MMCAnCE_HOST_STS2 )["CRCSTE"            ] = MMCAnCE_HOST_STS2_CRCSTE;
        (*MMCAnCE_HOST_STS2 )["CRC16E"            ] = MMCAnCE_HOST_STS2_CRC16E;
        (*MMCAnCE_HOST_STS2 )["AC12CRCE"          ] = MMCAnCE_HOST_STS2_AC12CRCE;
        (*MMCAnCE_HOST_STS2 )["RSPCRC7E"          ] = MMCAnCE_HOST_STS2_RSPCRC7E;
        (*MMCAnCE_HOST_STS2 )["CRCSTEBE"          ] = MMCAnCE_HOST_STS2_CRCSTEBE;
        (*MMCAnCE_HOST_STS2 )["RDATEBE"           ] = MMCAnCE_HOST_STS2_RDATEBE;
        (*MMCAnCE_HOST_STS2 )["AC12REBE"          ] = MMCAnCE_HOST_STS2_AC12REBE;
        (*MMCAnCE_HOST_STS2 )["RSPEBE"            ] = MMCAnCE_HOST_STS2_RSPEBE;
        (*MMCAnCE_HOST_STS2 )["AC12IDXE"          ] = MMCAnCE_HOST_STS2_AC12IDXE;
        (*MMCAnCE_HOST_STS2 )["RSPIDXE"           ] = MMCAnCE_HOST_STS2_RSPIDXE;
        (*MMCAnCE_HOST_STS2 )["BTACKPATE"         ] = MMCAnCE_HOST_STS2_BTACKPATE;
        (*MMCAnCE_HOST_STS2 )["BTACKEBE"          ] = MMCAnCE_HOST_STS2_BTACKEBE;
        (*MMCAnCE_HOST_STS2 )["CRCST"             ] = MMCAnCE_HOST_STS2_CRCST;
        (*MMCAnCE_HOST_STS2 )["STRDATTO"          ] = MMCAnCE_HOST_STS2_STRDATTO;
        (*MMCAnCE_HOST_STS2 )["DATBSYTO"          ] = MMCAnCE_HOST_STS2_DATBSYTO;
        (*MMCAnCE_HOST_STS2 )["CRCSTTO"           ] = MMCAnCE_HOST_STS2_CRCSTTO;
        (*MMCAnCE_HOST_STS2 )["AC12BSYTO"         ] = MMCAnCE_HOST_STS2_AC12BSYTO;
        (*MMCAnCE_HOST_STS2 )["RSPBSYTO"          ] = MMCAnCE_HOST_STS2_RSPBSYTO;
        (*MMCAnCE_HOST_STS2 )["AC12RSPTO"         ] = MMCAnCE_HOST_STS2_AC12RSPTO;
        (*MMCAnCE_HOST_STS2 )["STRSPTO"           ] = MMCAnCE_HOST_STS2_STRSPTO;
        (*MMCAnCE_HOST_STS2 )["BTACKTO"           ] = MMCAnCE_HOST_STS2_BTACKTO;
        (*MMCAnCE_HOST_STS2 )["1STBTDATTO"        ] = MMCAnCE_HOST_STS2_1STBTDATTO;
        (*MMCAnCE_HOST_STS2 )["BTDATTO"           ] = MMCAnCE_HOST_STS2_BTDATTO;
        return;
    }
    if (addr == 0x007C) {
        (*MMCAnCE_SWRESA    )["SWRST"             ] = MMCAnCE_SWRESA_SWRST;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Cmmc44_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Cmmc44_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Cmmc44_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,7, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Cmmc44_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<7)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Cmmc44_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Cmmc44_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Cmmc44_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Cmmc44_regif::uint Cmmc44_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Cmmc44_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Cmmc44_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Cmmc44_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Cmmc44_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Cmmc44_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Cmmc44_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Cmmc44_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
