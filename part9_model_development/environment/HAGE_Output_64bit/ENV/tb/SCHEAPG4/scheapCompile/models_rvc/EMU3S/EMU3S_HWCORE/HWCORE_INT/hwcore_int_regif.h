// -----------------------------------------------------------------------------
// $Id: hwcore_int_regif.h,v 1.2 2020/11/17 00:04:05 huyquocpham Exp $
//
// Copyright(c) 2020 Renesas Electronics Corporation
// Copyright(c) 2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py
//    gen_regif_class.py
//    regif_h.skl
//
// Input file : hwcore_int_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HWCORE_INT
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  11
// 
// %REG_CHANNEL reg_def
//   %%TITLE    name               reg_name             size         wsize         rsize       length      offset    factor_start   factor_end   factor_index   factor_step     init             access    support    callback
//   %%REG      INT                INT                  32           8|16|32       8|16|32     32          0x700     0              7            -              0x4             0x00000000       R|W       TRUE       -
//   %%REG      INTSD              INTSD                32                 -       8|16|32     32          0x720     -              -            -              -               0x00000000       R         TRUE       -
//   %%REG      INTSDC             INTSDC               32           8|16|32       8|16|32     32          0x724     -              -            -              -               0x00000000       R|W       TRUE       -
//   %%REG      ERR                ERR                  16              8|16       8|16|32     16          0x730     0              7            -              0x2             0x00000000       R|W       TRUE       -
//   %%REG      ERRSD              ERRSD                16                 -       8|16|32     16          0x740     -              -            -              -               0x00000000       R         TRUE       -
//   %%REG      ERRSDC             ERRSDC               16              8|16       8|16|32     16          0x742     -              -            -              -               0x00000000       R|W       TRUE       -
//   %%REG      OFMON              OFMON                 8                 -       8|16|32      8          0x744     -              -            -              -               0x00000000       R         TRUE       -
//   %%REG      ZDMON              ZDMON                 8                 -       8|16|32      8          0x745     -              -            -              -               0x00000000       R         TRUE       -
// 
// %REG_NAME INT
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   FWGBINT          23      23     0x0       R|W      TRUE     -
//     %%BIT   FWGAINT          22      22     0x0       R|W      TRUE     -
//     %%BIT   IREC3WINT        21      21     0x0       R|W      TRUE     -
//     %%BIT   IREC3VINT        20      20     0x0       R|W      TRUE     -
//     %%BIT   IREC3UINT        19      19     0x0       R|W      TRUE     -
//     %%BIT   IIR2INT          18      18     0x0       R|W      TRUE     -
//     %%BIT   IIR1INT          17      17     0x0       R|W      TRUE     -
//     %%BIT   IIR0INT          16      16     0x0       R|W      TRUE     -
//     %%BIT   SMBINT           15      15     0x0       R|W      TRUE     -
//     %%BIT   MADINT           14      14     0x0       R|W      TRUE     -
//     %%BIT   VADINT           13      13     0x0       R|W      TRUE     -
//     %%BIT   ADINT            12      12     0x0       R|W      TRUE     -
//     %%BIT   PMT2CPINT        11      11     0x0       R|W      TRUE     -
//     %%BIT   INSINT           10      10     0x0       R|W      TRUE     -
//     %%BIT   ERRINT            9       9     0x0       R|W      TRUE     -
//     %%BIT   CMP1INT           8       8     0x0       R|W      TRUE     -
//     %%BIT   CMP0INT           7       7     0x0       R|W      TRUE     -
//     %%BIT   CARMINT           6       6     0x0       R|W      TRUE     -
//     %%BIT   CARVINT           5       5     0x0       R|W      TRUE     -
//     %%BIT   CBUFINT           4       4     0x0       R|W      TRUE     -
//     %%BIT   RECINT            3       3     0x0       R|W      TRUE     -
//     %%BIT   PWMINT            2       2     0x0       R|W      TRUE     -
//     %%BIT   PIINT             1       1     0x0       R|W      TRUE     -
//     %%BIT   ININT             0       0     0x0       R|W      TRUE     -
// 
// %REG_NAME INTSD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   FWGBIF           23      23     0x0       R        TRUE     -
//     %%BIT   FWGAIF           22      22     0x0       R        TRUE     -
//     %%BIT   IREC3WIF         21      21     0x0       R        TRUE     -
//     %%BIT   IREC3VIF         20      20     0x0       R        TRUE     -
//     %%BIT   IREC3UIF         19      19     0x0       R        TRUE     -
//     %%BIT   IIR2IF           18      18     0x0       R        TRUE     -
//     %%BIT   IIR1IF           17      17     0x0       R        TRUE     -
//     %%BIT   IIR0IF           16      16     0x0       R        TRUE     -
//     %%BIT   SMBIF            15      15     0x0       R        TRUE     -
//     %%BIT   MADIF            14      14     0x0       R        TRUE     -
//     %%BIT   VADIF            13      13     0x0       R        TRUE     -
//     %%BIT   ADIF             12      12     0x0       R        TRUE     -
//     %%BIT   PMT2CPIF         11      11     0x0       R        TRUE     -
//     %%BIT   INSIF            10      10     0x0       R        TRUE     -
//     %%BIT   ERRIF             9       9     0x0       R        TRUE     -
//     %%BIT   CMP1IF            8       8     0x0       R        TRUE     -
//     %%BIT   CMP0IF            7       7     0x0       R        TRUE     -
//     %%BIT   CARMIF            6       6     0x0       R        TRUE     -
//     %%BIT   CARVIF            5       5     0x0       R        TRUE     -
//     %%BIT   CBUFIF            4       4     0x0       R        TRUE     -
//     %%BIT   RECIF             3       3     0x0       R        TRUE     -
//     %%BIT   PWMIF             2       2     0x0       R        TRUE     -
//     %%BIT   PIIF              1       1     0x0       R        TRUE     -
//     %%BIT   INIF              0       0     0x0       R        TRUE     -
// 
// %REG_NAME INTSDC
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   FWGBIFC          23      23     0x0       R|W      TRUE     -
//     %%BIT   FWGAIFC          22      22     0x0       R|W      TRUE     -
//     %%BIT   IREC3WIFC        21      21     0x0       R|W      TRUE     -
//     %%BIT   IREC3VIFC        20      20     0x0       R|W      TRUE     -
//     %%BIT   IREC3UIFC        19      19     0x0       R|W      TRUE     -
//     %%BIT   IIR2IFC          18      18     0x0       R|W      TRUE     -
//     %%BIT   IIR1IFC          17      17     0x0       R|W      TRUE     -
//     %%BIT   IIR0IFC          16      16     0x0       R|W      TRUE     -
//     %%BIT   SMBIFC           15      15     0x0       R|W      TRUE     -
//     %%BIT   MADIFC           14      14     0x0       R|W      TRUE     -
//     %%BIT   VADIFC           13      13     0x0       R|W      TRUE     -
//     %%BIT   ADIFC            12      12     0x0       R|W      TRUE     -
//     %%BIT   PMT2CPIFC        11      11     0x0       R|W      TRUE     -
//     %%BIT   INSIFC           10      10     0x0       R|W      TRUE     -
//     %%BIT   ERRIFC            9       9     0x0       R|W      TRUE     -
//     %%BIT   CMP1IFC           8       8     0x0       R|W      TRUE     -
//     %%BIT   CMP0IFC           7       7     0x0       R|W      TRUE     -
//     %%BIT   CARMIFC           6       6     0x0       R|W      TRUE     -
//     %%BIT   CARVIFC           5       5     0x0       R|W      TRUE     -
//     %%BIT   CBUFIFC           4       4     0x0       R|W      TRUE     -
//     %%BIT   RECIFC            3       3     0x0       R|W      TRUE     -
//     %%BIT   PWMIFC            2       2     0x0       R|W      TRUE     -
//     %%BIT   PIIFC             1       1     0x0       R|W      TRUE     -
//     %%BIT   INIFC             0       0     0x0       R|W      TRUE     W
// 
// %REG_NAME ERR
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   IR3EEN            12      12    0x0       R|W      TRUE     -
//     %%BIT   SMMEN             7       7     0x0       R|W      TRUE     -
//     %%BIT   ADMEN             6       6     0x0       R|W      TRUE     -
//     %%BIT   KCLEN             5       5     0x0       R|W      TRUE     -
//     %%BIT   PMT2OFEN          4       4     0x0       R|W      TRUE     -
//     %%BIT   ZDEN              1       1     0x0       R|W      TRUE     -
//     %%BIT   OVFEN             0       0     0x0       R|W      TRUE     -
// 
// %REG_NAME ERRSD
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   IR3EEF            12      12    0x0       R        TRUE     -
//     %%BIT   SMMEF             7       7     0x0       R        TRUE     -
//     %%BIT   ADMEF             6       6     0x0       R        TRUE     -
//     %%BIT   KCLEF             5       5     0x0       R        TRUE     -
//     %%BIT   PMT2OFEF          4       4     0x0       R        TRUE     -
//     %%BIT   ZDEF              1       1     0x0       R        TRUE     -
//     %%BIT   OVFEF             0       0     0x0       R        TRUE     -
// 
// %REG_NAME ERRSDC
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   IR3EEFC           12      12    0x0       R|W      TRUE     -
//     %%BIT   SMMEFC            7       7     0x0       R|W      TRUE     -
//     %%BIT   ADMEFC            6       6     0x0       R|W      TRUE     -
//     %%BIT   KCLEFC            5       5     0x0       R|W      TRUE     -
//     %%BIT   PMT2OFEFC         4       4     0x0       R|W      TRUE     -
//     %%BIT   ZDEFC             1       1     0x0       R|W      TRUE     -
//     %%BIT   OVFEFC            0       0     0x0       R|W      TRUE     W
// 
// %REG_NAME OFMON
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   OVFIP             7       4     0x0       R        TRUE     -
//     %%BIT   OVFFUNC           3       0     0x0       R        TRUE     -
// 
// %REG_NAME ZDMON
//     %%TITLE  name           upper   lower   init    access   support   callback
//     %%BIT   ZDIP              7       4     0x0       R        TRUE     -
//     %%BIT   ZDFUNC            3       0     0x0       R        TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file hwcore_int_regif.h
/// @brief Register IF class of model HWCORE_INT
/// $Id: hwcore_int_regif.h,v 1.2 2020/11/17 00:04:05 huyquocpham Exp $
/// $Date: 2020/11/17 00:04:05 $
/// $Revison$
/// $Author: huyquocpham $
////////////////////////////////////////////////////////////////////////////////
#ifndef __HWCORE_INT_REGIF_H__
#define __HWCORE_INT_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#include <cassert>
#ifndef REGIF_NOT_USE_SYSTEMC
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef USR_CWR_SYSTEMC
#include "scml2.h"
#endif

/// Register IF class of HWCORE_INT model
class Chwcore_int_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;
#ifdef USR_CWR_SYSTEMC
    typedef uint REG_TYPE;
#endif

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_INT    = 8,
        emNUM_ERR    = 8
    }; ///< Enumeration for register factor index
#ifdef USE_WEB_SIM
    enum eRegValIDConstant {
        emBitNum       = 0,
        emRegIDNum     = 0,
        emNumOfChannel = 1
    };
#endif

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel  = channel;
            this-> is_wr    = is_wr;
            this-> size     = size;
            this-> pre_data = pre_data;
            this-> data     = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
#ifdef USR_CWR_SYSTEMC
        scml2::memory<REG_TYPE> *mcwmem;
        scml2::reg<REG_TYPE> *my_cw_p;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false, scml2::memory<REG_TYPE> *_cwmem=NULL) {
            this->my_cw_p = NULL;
            if (_cwmem != NULL) {
                mcwmem = _cwmem;
            } else {
                assert(_prev != NULL && _prev->mcwmem != NULL) ;
                mcwmem = _prev->mcwmem;
            }
            this->my_cw_p = new scml2::reg<REG_TYPE> (_my_p->name(), *mcwmem , _my_p->addr());
#else
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
#endif
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel   = _channel;
            this->length    = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block     = _block;
        }
        ~SRegList() {
#ifdef USR_CWR_SYSTEMC
            delete my_cw_p;
#endif
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;
#ifdef USE_WEB_SIM
    struct strRegValueID {
        int  BitVal[emBitNum];
        std::string RegValueID;
        strRegValueID(void) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                BitVal[i] = 0;
            }
            RegValueID = "";
        }
        strRegValueID(int bitval[emBitNum], std::string reg_value_id) {
            for (unsigned int i = 0; i < emBitNum; i++) {
                this->BitVal[i] = bitval[i];
            }
            this->RegValueID = reg_value_id;
        }
    };
    
    vpcl::bit_info* mBitInfoPtr[emBitNum];
    uint mTargetRegVal[emBitNum];
    strRegValueID mRegValueIDLib[emRegIDNum];
    
    void InitializeRegValueID();
    void CalcTargetRegVal(void);
    void IssueRegValueID();

    typedef void (Chwcore_int_regif::* ptrRegValueIDFunc) (std::string);
    ptrRegValueIDFunc mNotifyRegValueIDAPI;
    virtual void NotifyRegValueID(const std::string reg_val_id) = 0;
#endif

public:
    Chwcore_int_regif(std::string name, uint buswidth);
    ~Chwcore_int_regif();

protected:
    vpcl::re_register *INT   [8];
    vpcl::re_register *INTSD ;
    vpcl::re_register *INTSDC;
    vpcl::re_register *ERR   [8];
    vpcl::re_register *ERRSD ;
    vpcl::re_register *ERRSDC;
    vpcl::re_register *OFMON ;
    vpcl::re_register *ZDMON ;

    #ifdef USR_CWR_SYSTEMC
    scml2::memory<REG_TYPE> cwmem;
    #endif


    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_INTSDC_INIFC(RegCBstr str) = 0;
    virtual void cb_ERRSDC_OVFEFC(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    bool mAPBAccessMode;
    bool mDumpBitInfo;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Chwcore_int_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_int_regif::*) (RegCBstr)> > mRdCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_int_regif::*) (RegCBstr)> > mWrDbgCbAPI;
    std::map<std::string, std::map<std::string, void (Chwcore_int_regif::*) (RegCBstr)> > mRdDbgCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr, bool is_wr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip, bool is_data, uint acc_size);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef USR_CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    virtual void cw_set_callback_reg(scml2::reg<REG_TYPE> * reg, int offset);
    void cw_set_all_callback_reg(void);
    #endif

private:
    void _re_printf(const std::string msg_level, const char *format, ...);
};
#endif //__HWCORE_INT_REGIF_H__
