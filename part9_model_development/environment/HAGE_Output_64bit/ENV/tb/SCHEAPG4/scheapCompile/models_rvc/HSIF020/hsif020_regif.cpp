// -----------------------------------------------------------------------------
// $Id: hsif020_regif.cpp,v 1.8 2020/04/08 07:39:39 quynhnhunguyen Exp $
//
// Copyright(c) 2017-2020 Renesas Electronics Corporation
// Copyright(c) 2017-2020 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.60 2014/10/24 09:42:15 ducduong
//    regif_cpp.skl 1.53 2014/10/13 03:19:16 sontran
//
// Input file : ../../../input/rhsif/hsif020_regif.txt
////////////////////////////////////////////////////////////////////////////////
// %MODULE HSIF020
// #                   name            offset_size
// %%REG_INSTANCE      reg_def         12
// 
// %REG_CHANNEL reg_def
//     %%TITLE  name        reg_name    wsize       rsize       length  offset  factor_start    factor_end  factor_index    factor_step     access  init    support     callback
//     %%REG    HSIFnMMD    HSIFnMMD    8|16|32     8|16|32     32      0x00    -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnMCT    HSIFnMCT    8|16|32     8|16|32     32      0x08    -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnMST    HSIFnMST    8|16|32     8|16|32     32      0x10    -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnMIST   HSIFnMIST   8|16|32     8|16|32     32      0x18    -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnMRT    HSIFnMRT    8|16|32     8|16|32     32      0x20    -               -           -               -               R|W     0xF3FF  TRUE        -
//     %%REG    HSIFnMWmA   HSIFnMWmA   8|16|32     8|16|32     32      0x40    0               3           -               0x10            R|W     0x0     TRUE        -
//     %%REG    HSIFnMWmS   HSIFnMWmS   8|16|32     8|16|32     32      0x48    0               3           -               0x10            R|W     0x0     TRUE        -
//     %%REG    HSIFnSTMD   HSIFnSTMD   8|16|32     8|16|32     32      0x200   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSTCT   HSIFnSTCT   8|16|32     8|16|32     32      0x208   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSTST   HSIFnSTST   8|16|32     8|16|32     32      0x210   -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnSTSC   HSIFnSTSC   8|16|32     8|16|32     32      0x218   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSTIE   HSIFnSTIE   8|16|32     8|16|32     32      0x220   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSTSA   HSIFnSTSA   8|16|32     8|16|32     32      0x228   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSTBC   HSIFnSTBC   8|16|32     8|16|32     32      0x230   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRMD   HSIFnSRMD   8|16|32     8|16|32     32      0x280   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRCT   HSIFnSRCT   8|16|32     8|16|32     32      0x288   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRST   HSIFnSRST   8|16|32     8|16|32     32      0x290   -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnSRSC   HSIFnSRSC   8|16|32     8|16|32     32      0x298   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRIE   HSIFnSRIE   8|16|32     8|16|32     32      0x2A0   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRDA   HSIFnSRDA   8|16|32     8|16|32     32      0x2A8   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRDS   HSIFnSRDS   8|16|32     8|16|32     32      0x2B0   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRBC   HSIFnSRBC   8|16|32     8|16|32     32      0x2B8   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnSRWP   HSIFnSRWP   8|16|32     8|16|32     32      0x2C0   -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnSRRP   HSIFnSRRP   8|16|32     8|16|32     32      0x2C8   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnAID    HSIFnAID    8|16|32     8|16|32     32      0x300   0               7           -               0x8             R|W     0x0     TRUE        - 
//     %%REG    HSIFnAAD    HSIFnAAD    8|16|32     8|16|32     32      0x340   0               3           -               0x8             R|W     0x0     TRUE        -
//     %%REG    HSIFnARD    HSIFnARD    8|16|32     8|16|32     32      0x360   0               3           -               0x8             R|W     0x0     TRUE        -
//     %%REG    HSIFnAEST   HSIFnAEST   8|16|32     8|16|32     32      0x3E0   -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnAESC   HSIFnAESC   8|16|32     8|16|32     32      0x3E8   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnAEIE   HSIFnAEIE   8|16|32     8|16|32     32      0x3F0   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnMEST   HSIFnMEST   8|16|32     8|16|32     32      0x0E0   -               -           -               -               R       0x0     TRUE        -
//     %%REG    HSIFnMESC   HSIFnMESC   8|16|32     8|16|32     32      0x0E8   -               -           -               -               R|W     0x0     TRUE        -
//     %%REG    HSIFnMEIE   HSIFnMEIE   8|16|32     8|16|32     32      0x0F0   -               -           -               -               R|W     0x0     TRUE        -
// 
// 
// 
// 
// %REG_NAME HSIFnMMD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    CHCT              0      0      0         R|W     TRUE     R|W
//  
// %REG_NAME HSIFnMCT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    WARE              0      0     0         R|W      TRUE      -
//     %%BIT    WAWE              1      1     0         R|W      TRUE      -
//     %%BIT    WBRE              4      4     0         R|W      TRUE      -
//     %%BIT    WBWE              5      5     0         R|W      TRUE      -
//     %%BIT    WCRE              8      8     0         R|W      TRUE      -
//     %%BIT    WCWE              9      9     0         R|W      TRUE      -
//     %%BIT    WDRE              12     12    0         R|W      TRUE      -
//     %%BIT    WDWE              13     13    0         R|W      TRUE      R|W    
//                                                                         
// %REG_NAME HSIFnMST                                                      
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AUTS0             0      0     0         R       TRUE      -
//     %%BIT    AUTS1             1      1     0         R       TRUE      R|W
// 
// %REG_NAME HSIFnMIST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RARS0             0      0     0         R       TRUE      -
//     %%BIT    AKRS0             1      1     0         R       TRUE      -
//     %%BIT    TERS0             2      2     0         R       TRUE      -
//     %%BIT    RARS1             4      4     0         R       TRUE      -
//     %%BIT    AKRS1             5      5     0         R       TRUE      -
//     %%BIT    TERS1             6      6     0         R       TRUE      -
//     %%BIT    RARS2             8      8     0         R       TRUE      -
//     %%BIT    AKRS2             9      9     0         R       TRUE      -
//     %%BIT    TERS2             10     10    0         R       TRUE      -
//     %%BIT    RARS3             12     12    0         R       TRUE      -
//     %%BIT    AKRS3             13     13    0         R       TRUE      -
//     %%BIT    TERS3             14     14    0         R       TRUE      -
//     %%BIT    STCS              16     16    0         R       TRUE      -
//     %%BIT    SRCS0             17     17    0         R       TRUE      -
//     %%BIT    SRCS1             18     18    0         R       TRUE      -
//     %%BIT    CERS0             20     20    0         R       TRUE      -
//     %%BIT    CERS1             21     21    0         R       TRUE      -
//     %%BIT    CERS2             22     22    0         R       TRUE      -
//     %%BIT    CERS3             23     23    0         R       TRUE      -
//     %%BIT    STES              24     24    0         R       TRUE      -
//     %%BIT    SRES              25     25    0         R       TRUE      -
//     %%BIT    MESS              27     27    0         R       TRUE      -
//     %%BIT    AESS              28     28    0         R       TRUE      R|W
//     %%BIT    DBGS              31     31    0         R       TRUE      -
//                                                               
// %REG_NAME HSIFnMRT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    RCNT             9      0      0x3FF     R|W     TRUE      -
//     %%BIT    RSCL             15     12     0xF       R|W     TRUE    R|W
// 
// %REG_NAME HSIFnMWmA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    MWmA             31      2     0         R|W     TRUE      R|W
// 
// %REG_NAME HSIFnMWmS
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    MWmS              31     2     0         R|W     TRUE      R|W
//  
// %REG_NAME HSIFnSTMD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STPS             16      16     0        R|W     TRUE      -
//     %%BIT    STNK             20      20     0        R|W     TRUE      R|W
//     %%BIT    STTH             14      12     0        R|W     TRUE      -
//     %%BIT    STBL             10      8      0        R|W     TRUE      -
//     %%BIT    STOS             6       4      0        R|W     TRUE      -
// 
// %REG_NAME HSIFnSTCT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STDE             0      0     0          R|W     TRUE      R|W
// 
// %REG_NAME HSIFnSTST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STC              0      0     0          R       TRUE      -
//     %%BIT    STE0             2      2     0          R       TRUE      -
//     %%BIT    STE1             4      4     0          R       TRUE      -
//     %%BIT    STE2             5      5     0          R       TRUE      -
//     %%BIT    STE3             20     20    0          R       TRUE      -
//     %%BIT    STE4             23     23    0          R       TRUE      R|W
//     
// %REG_NAME HSIFnSTSC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STCC             0      0     0          R|W     TRUE      -
//     %%BIT    STEC0            2      2     0          R|W     TRUE      -
//     %%BIT    STEC1            4      4     0          R|W     TRUE      -
//     %%BIT    STEC2            5      5     0          R|W     TRUE      -
//     %%BIT    STEC3            20     20    0          R|W     TRUE      -
//     %%BIT    STEC4            23     23    0          R|W     TRUE      R|W
//    
// %REG_NAME HSIFnSTIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STCE             0       0     0         R|W     TRUE      -
//     %%BIT    STEE0            2       2     0         R|W     TRUE      -
//     %%BIT    STEE1            4       4     0         R|W     TRUE      -
//     %%BIT    STEE2            5       5     0         R|W     TRUE      -
//     %%BIT    STEE3            20      20    0         R|W     TRUE      -
//     %%BIT    STEE4            23      23    0         R|W     TRUE      R|W
// 
// %REG_NAME HSIFnSTSA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STSA             31      4     0         R|W     TRUE      R|W
// 
// %REG_NAME HSIFnSTBC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    STBC             24      4     0         R|W     TRUE      R|W
// 
// %REG_NAME HSIFnSRMD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRPS             16      16     0        R|W     TRUE     -
//     %%BIT    SRMC             20      20     0        R|W     TRUE     R|W
//     %%BIT    SROS             4       4      0        R|W     TRUE     -
// 
// %REG_NAME HSIFnSRCT
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRDE             0       0      0        R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRC0             0       0      0        R       TRUE     -
//     %%BIT    SRC1             1       1      0        R       TRUE     -
//     %%BIT    SRTA             15      15     0        R       TRUE     -
//     %%BIT    SRE0             20      20     0        R       TRUE     -
//     %%BIT    SRE1             21      21     0        R       TRUE     -
//     %%BIT    SRE2             23      23     0        R       TRUE     -
//     %%BIT    SRA              31      31     0        R       TRUE     R|W
//     
// %REG_NAME HSIFnSRSC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SREC0            20      20     0        R|W     TRUE     -
//     %%BIT    SREC1            21      21     0        R|W     TRUE     -
//     %%BIT    SREC2            23      23     0        R|W     TRUE     -
//     %%BIT    SRAC             31      31     0        R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRCE0            0       0      0        R|W     TRUE     -
//     %%BIT    SRCE1            1       1      0        R|W     TRUE     -
//     %%BIT    SREE0            20      20     0        R|W     TRUE     -
//     %%BIT    SREE1            21      21     0        R|W     TRUE     -
//     %%BIT    SREE2            23      23     0        R|W     TRUE     -
//     %%BIT    SRAE             31      31     0        R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRDA
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRDA             31      4     0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRDS
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRDS              24     4     0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRBC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRBC             24      4     0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnSRWP
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRWT             0       0      0        R       TRUE     -
//     %%BIT    SRWP             24      4      0        R       TRUE     R|W
// 
// %REG_NAME HSIFnSRRP
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    SRRT             0       0      0        R|W      TRUE     -
//     %%BIT    SRRP             24      4      0        R|W      TRUE     R|W
//     
// %REG_NAME HSIFnAID
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AID              31      0     0         R|W     TRUE     R|W
//     
// %REG_NAME HSIFnAAD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AAD              31      0     0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnARD
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    ARD              31      0     0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnAEST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AEE0             0       0     0         R        TRUE     -
//     %%BIT    AEI0             1       1     0         R        TRUE     -
//     %%BIT    AER0             2       2     0         R        TRUE     -
//     %%BIT    AEW0             3       3     0         R        TRUE     -
//     %%BIT    AEE1             4       4     0         R        TRUE     -
//     %%BIT    AEI1             5       5     0         R        TRUE     -
//     %%BIT    AER1             6       6     0         R        TRUE     -
//     %%BIT    AEW1             7       7     0         R        TRUE     -
//     %%BIT    AEE2             8       8     0         R        TRUE     -
//     %%BIT    AEI2             9       9     0         R        TRUE     -
//     %%BIT    AER2             10      10    0         R        TRUE     -
//     %%BIT    AEW2             11      11    0         R        TRUE     -
//     %%BIT    AEE3             12      12    0         R        TRUE     -
//     %%BIT    AEI3             13      13    0         R        TRUE     -
//     %%BIT    AER3             14      14    0         R        TRUE     -
//     %%BIT    AEW3             15      15    0         R        TRUE     -
//     %%BIT    AES              16      16    0         R        TRUE     -
//     %%BIT    WER0             20      20    0         R        TRUE     -
//     %%BIT    WEW0             21      21    0         R        TRUE     -
//     %%BIT    WER1             22      22    0         R        TRUE     -
//     %%BIT    WEW1             23      23    0         R        TRUE     -
//     %%BIT    WER2             24      24    0         R        TRUE     -
//     %%BIT    WEW2             25      25    0         R        TRUE     -
//     %%BIT    WER3             26      26    0         R        TRUE     -
//     %%BIT    WEW3             27      27    0         R        TRUE     -
//     %%BIT    WES0             28      28    0         R        TRUE     -
//     %%BIT    WES1             29      29    0         R        TRUE     R|W
// 
// %REG_NAME HSIFnAESC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AEEC0            0       0     0         R|W     TRUE     -
//     %%BIT    AEIC0            1       1     0         R|W     TRUE     -
//     %%BIT    AERC0            2       2     0         R|W     TRUE     -
//     %%BIT    AEWC0            3       3     0         R|W     TRUE     -
//     %%BIT    AEEC1            4       4     0         R|W     TRUE     -
//     %%BIT    AEIC1            5       5     0         R|W     TRUE     -
//     %%BIT    AERC1            6       6     0         R|W     TRUE     -
//     %%BIT    AEWC1            7       7     0         R|W     TRUE     -
//     %%BIT    AEEC2            8       8     0         R|W     TRUE     -
//     %%BIT    AEIC2            9       9     0         R|W     TRUE     -
//     %%BIT    AERC2            10      10    0         R|W     TRUE     -
//     %%BIT    AEWC2            11      11    0         R|W     TRUE     -
//     %%BIT    AEEC3            12      12    0         R|W     TRUE     -
//     %%BIT    AEIC3            13      13    0         R|W     TRUE     -
//     %%BIT    AERC3            14      14    0         R|W     TRUE     -
//     %%BIT    AEWC3            15      15    0         R|W     TRUE     -
//     %%BIT    AESC             16      16    0         R|W     TRUE     -
//     %%BIT    WERC0            20      20    0         R|W     TRUE     -
//     %%BIT    WEWC0            21      21    0         R|W     TRUE     -
//     %%BIT    WERC1            22      22    0         R|W     TRUE     -
//     %%BIT    WEWC1            23      23    0         R|W     TRUE     -
//     %%BIT    WERC2            24      24    0         R|W     TRUE     -
//     %%BIT    WEWC2            25      25    0         R|W     TRUE     -
//     %%BIT    WERC3            26      26    0         R|W     TRUE     -
//     %%BIT    WEWC3            27      27    0         R|W     TRUE     -
//     %%BIT    WESC0            28      28    0         R|W     TRUE     -
//     %%BIT    WESC1            29      29    0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnAEIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    AEEE0            0       0     0         R|W     TRUE     -
//     %%BIT    AEIE0            1       1     0         R|W     TRUE     -
//     %%BIT    AERE0            2       2     0         R|W     TRUE     -
//     %%BIT    AEWE0            3       3     0         R|W     TRUE     -
//     %%BIT    AEEE1            4       4     0         R|W     TRUE     -
//     %%BIT    AEIE1            5       5     0         R|W     TRUE     -
//     %%BIT    AERE1            6       6     0         R|W     TRUE     -
//     %%BIT    AEWE1            7       7     0         R|W     TRUE     -
//     %%BIT    AEEE2            8       8     0         R|W     TRUE     -
//     %%BIT    AEIE2            9       9     0         R|W     TRUE     -
//     %%BIT    AERE2            10      10    0         R|W     TRUE     -
//     %%BIT    AEWE2            11      11    0         R|W     TRUE     -
//     %%BIT    AEEE3            12      12    0         R|W     TRUE     -
//     %%BIT    AEIE3            13      13    0         R|W     TRUE     -
//     %%BIT    AERE3            14      14    0         R|W     TRUE     -
//     %%BIT    AEWE3            15      15    0         R|W     TRUE     -
//     %%BIT    AESE             16      16    0         R|W     TRUE     -
//     %%BIT    WERE0            20      20    0         R|W     TRUE     -
//     %%BIT    WEWE0            21      21    0         R|W     TRUE     -
//     %%BIT    WERE1            22      22    0         R|W     TRUE     -
//     %%BIT    WEWE1            23      23    0         R|W     TRUE     -
//     %%BIT    WERE2            24      24    0         R|W     TRUE     -
//     %%BIT    WEWE2            25      25    0         R|W     TRUE     -
//     %%BIT    WERE3            26      26    0         R|W     TRUE     -
//     %%BIT    WEWE3            27      27    0         R|W     TRUE     -
//     %%BIT    WESE0            28      28    0         R|W     TRUE     -
//     %%BIT    WESE1            29      29    0         R|W     TRUE     R|W
// 
// %REG_NAME HSIFnMEST
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    PSE3             7      7      0         R       TRUE     -
//     %%BIT    PSE2             6      6      0         R       TRUE     -
//     %%BIT    PSE1             5      5      0         R       TRUE     -
//     %%BIT    PSE0             4      4      0         R       TRUE     -
//     %%BIT    CTE              0      0      0         R       TRUE     -
// 
// %REG_NAME HSIFnMESC
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    PSEC3            7      7      0         R|W     TRUE     -
//     %%BIT    PSEC2            6      6      0         R|W     TRUE     -
//     %%BIT    PSEC1            5      5      0         R|W     TRUE     -
//     %%BIT    PSEC0            4      4      0         R|W     TRUE     -
//     %%BIT    CTEC             0      0      0         R|W     TRUE     -
// 
// %REG_NAME HSIFnMEIE
//     %%TITLE  name             upper  lower  init      access  support  callback
//     %%BIT    PSEE3            7      7      0         R|W     TRUE     -
//     %%BIT    PSEE2            6      6      0         R|W     TRUE     -
//     %%BIT    PSEE1            5      5      0         R|W     TRUE     -
//     %%BIT    PSEE0            4      4      0         R|W     TRUE     -
//     %%BIT    CTEE             0      0      0         R|W     TRUE     -
// 
////////////////////////////////////////////////////////////////////////////////
/// @file hsif020_regif.cpp
/// @brief Register IF class of model HSIF020
/// $Id: hsif020_regif.cpp,v 1.8 2020/04/08 07:39:39 quynhnhunguyen Exp $
/// $Date: 2020/04/08 07:39:39 $
/// $Revison$
/// $Author: quynhnhunguyen $
////////////////////////////////////////////////////////////////////////////////
#include "hsif020_regif.h"
#ifndef re_printf
#define re_printf get_fileline(__FILE__, __LINE__); _re_printf
#endif//re_printf

/// Constructor of Register IF class: define registers and bits
/// @return none
Chsif020_regif::Chsif020_regif(std::string name, uint buswidth)
    :vpcl::reg_super()
    #ifdef USR_CWR_SYSTEMC
    , cwmem("register", scml_memsize(0xF4/4))
    #endif
{
    CommandInit();
    HSIFnMMD  = new vpcl::re_register(0x0000, this, "HSIFnMMD" , name.c_str());
    HSIFnMCT  = new vpcl::re_register(0x0008, this, "HSIFnMCT" , name.c_str());
    HSIFnMST  = new vpcl::re_register(0x0010, this, "HSIFnMST" , name.c_str());
    HSIFnMIST = new vpcl::re_register(0x0018, this, "HSIFnMIST", name.c_str());
    HSIFnMRT  = new vpcl::re_register(0x0020, this, "HSIFnMRT" , name.c_str());
    HSIFnSTMD = new vpcl::re_register(0x0200, this, "HSIFnSTMD", name.c_str());
    HSIFnSTCT = new vpcl::re_register(0x0208, this, "HSIFnSTCT", name.c_str());
    HSIFnSTST = new vpcl::re_register(0x0210, this, "HSIFnSTST", name.c_str());
    HSIFnSTSC = new vpcl::re_register(0x0218, this, "HSIFnSTSC", name.c_str());
    HSIFnSTIE = new vpcl::re_register(0x0220, this, "HSIFnSTIE", name.c_str());
    HSIFnSTSA = new vpcl::re_register(0x0228, this, "HSIFnSTSA", name.c_str());
    HSIFnSTBC = new vpcl::re_register(0x0230, this, "HSIFnSTBC", name.c_str());
    HSIFnSRMD = new vpcl::re_register(0x0280, this, "HSIFnSRMD", name.c_str());
    HSIFnSRCT = new vpcl::re_register(0x0288, this, "HSIFnSRCT", name.c_str());
    HSIFnSRST = new vpcl::re_register(0x0290, this, "HSIFnSRST", name.c_str());
    HSIFnSRSC = new vpcl::re_register(0x0298, this, "HSIFnSRSC", name.c_str());
    HSIFnSRIE = new vpcl::re_register(0x02A0, this, "HSIFnSRIE", name.c_str());
    HSIFnSRDA = new vpcl::re_register(0x02A8, this, "HSIFnSRDA", name.c_str());
    HSIFnSRDS = new vpcl::re_register(0x02B0, this, "HSIFnSRDS", name.c_str());
    HSIFnSRBC = new vpcl::re_register(0x02B8, this, "HSIFnSRBC", name.c_str());
    HSIFnSRWP = new vpcl::re_register(0x02C0, this, "HSIFnSRWP", name.c_str());
    HSIFnSRRP = new vpcl::re_register(0x02C8, this, "HSIFnSRRP", name.c_str());
    HSIFnAEST = new vpcl::re_register(0x03E0, this, "HSIFnAEST", name.c_str());
    HSIFnAESC = new vpcl::re_register(0x03E8, this, "HSIFnAESC", name.c_str());
    HSIFnAEIE = new vpcl::re_register(0x03F0, this, "HSIFnAEIE", name.c_str());
    HSIFnMEST = new vpcl::re_register(0x00E0, this, "HSIFnMEST", name.c_str());
    HSIFnMESC = new vpcl::re_register(0x00E8, this, "HSIFnMESC", name.c_str());
    HSIFnMEIE = new vpcl::re_register(0x00F0, this, "HSIFnMEIE", name.c_str());
    std::ostringstream str_tmp;
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnMWmA"<< i;
        HSIFnMWmA[i] = new vpcl::re_register((0x0040) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnMWmS"<< i;
        HSIFnMWmS[i] = new vpcl::re_register((0x0048) + 16*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_HSIFnAID; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnAID"<< i;
        HSIFnAID [i] = new vpcl::re_register((0x0300) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_HSIFnAAD; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnAAD"<< i;
        HSIFnAAD [i] = new vpcl::re_register((0x0340) + 8*i, this, str_tmp.str(), name.c_str());
    }
    for(uint i = 0; i < emNUM_HSIFnARD; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnARD"<< i;
        HSIFnARD [i] = new vpcl::re_register((0x0360) + 8*i, this, str_tmp.str(), name.c_str());
    }

    // Construct the register pointer list
    mCurReg = NULL;

    uint index = 0;
    mRegMap = new uint [1<<12];
    for (uint i = 0; i < (1<<12); i++) {
        mRegMap[i] = (1<<12);
    }

    mRegMap[0x0000]     = index;
    mRegMap[0x0000 + 1] = index;
    mRegMap[0x0000 + 2] = index;
    mRegMap[0x0000 + 3] = index++;
    mRegMap[0x0008]     = index;
    mRegMap[0x0008 + 1] = index;
    mRegMap[0x0008 + 2] = index;
    mRegMap[0x0008 + 3] = index++;
    mRegMap[0x0010]     = index;
    mRegMap[0x0010 + 1] = index;
    mRegMap[0x0010 + 2] = index;
    mRegMap[0x0010 + 3] = index++;
    mRegMap[0x0018]     = index;
    mRegMap[0x0018 + 1] = index;
    mRegMap[0x0018 + 2] = index;
    mRegMap[0x0018 + 3] = index++;
    mRegMap[0x0020]     = index;
    mRegMap[0x0020 + 1] = index;
    mRegMap[0x0020 + 2] = index;
    mRegMap[0x0020 + 3] = index++;
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) {
        mRegMap[(0x0040)     + i*16] = index;
        mRegMap[(0x0040 + 1) + i*16] = index;
        mRegMap[(0x0040 + 2) + i*16] = index;
        mRegMap[(0x0040 + 3) + i*16] = index++;
    }
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) {
        mRegMap[(0x0048)     + i*16] = index;
        mRegMap[(0x0048 + 1) + i*16] = index;
        mRegMap[(0x0048 + 2) + i*16] = index;
        mRegMap[(0x0048 + 3) + i*16] = index++;
    }
    mRegMap[0x00E0]     = index;
    mRegMap[0x00E0 + 1] = index;
    mRegMap[0x00E0 + 2] = index;
    mRegMap[0x00E0 + 3] = index++;
    mRegMap[0x00E8]     = index;
    mRegMap[0x00E8 + 1] = index;
    mRegMap[0x00E8 + 2] = index;
    mRegMap[0x00E8 + 3] = index++;
    mRegMap[0x00F0]     = index;
    mRegMap[0x00F0 + 1] = index;
    mRegMap[0x00F0 + 2] = index;
    mRegMap[0x00F0 + 3] = index++;
    mRegMap[0x0200]     = index;
    mRegMap[0x0200 + 1] = index;
    mRegMap[0x0200 + 2] = index;
    mRegMap[0x0200 + 3] = index++;
    mRegMap[0x0208]     = index;
    mRegMap[0x0208 + 1] = index;
    mRegMap[0x0208 + 2] = index;
    mRegMap[0x0208 + 3] = index++;
    mRegMap[0x0210]     = index;
    mRegMap[0x0210 + 1] = index;
    mRegMap[0x0210 + 2] = index;
    mRegMap[0x0210 + 3] = index++;
    mRegMap[0x0218]     = index;
    mRegMap[0x0218 + 1] = index;
    mRegMap[0x0218 + 2] = index;
    mRegMap[0x0218 + 3] = index++;
    mRegMap[0x0220]     = index;
    mRegMap[0x0220 + 1] = index;
    mRegMap[0x0220 + 2] = index;
    mRegMap[0x0220 + 3] = index++;
    mRegMap[0x0228]     = index;
    mRegMap[0x0228 + 1] = index;
    mRegMap[0x0228 + 2] = index;
    mRegMap[0x0228 + 3] = index++;
    mRegMap[0x0230]     = index;
    mRegMap[0x0230 + 1] = index;
    mRegMap[0x0230 + 2] = index;
    mRegMap[0x0230 + 3] = index++;
    mRegMap[0x0280]     = index;
    mRegMap[0x0280 + 1] = index;
    mRegMap[0x0280 + 2] = index;
    mRegMap[0x0280 + 3] = index++;
    mRegMap[0x0288]     = index;
    mRegMap[0x0288 + 1] = index;
    mRegMap[0x0288 + 2] = index;
    mRegMap[0x0288 + 3] = index++;
    mRegMap[0x0290]     = index;
    mRegMap[0x0290 + 1] = index;
    mRegMap[0x0290 + 2] = index;
    mRegMap[0x0290 + 3] = index++;
    mRegMap[0x0298]     = index;
    mRegMap[0x0298 + 1] = index;
    mRegMap[0x0298 + 2] = index;
    mRegMap[0x0298 + 3] = index++;
    mRegMap[0x02A0]     = index;
    mRegMap[0x02A0 + 1] = index;
    mRegMap[0x02A0 + 2] = index;
    mRegMap[0x02A0 + 3] = index++;
    mRegMap[0x02A8]     = index;
    mRegMap[0x02A8 + 1] = index;
    mRegMap[0x02A8 + 2] = index;
    mRegMap[0x02A8 + 3] = index++;
    mRegMap[0x02B0]     = index;
    mRegMap[0x02B0 + 1] = index;
    mRegMap[0x02B0 + 2] = index;
    mRegMap[0x02B0 + 3] = index++;
    mRegMap[0x02B8]     = index;
    mRegMap[0x02B8 + 1] = index;
    mRegMap[0x02B8 + 2] = index;
    mRegMap[0x02B8 + 3] = index++;
    mRegMap[0x02C0]     = index;
    mRegMap[0x02C0 + 1] = index;
    mRegMap[0x02C0 + 2] = index;
    mRegMap[0x02C0 + 3] = index++;
    mRegMap[0x02C8]     = index;
    mRegMap[0x02C8 + 1] = index;
    mRegMap[0x02C8 + 2] = index;
    mRegMap[0x02C8 + 3] = index++;
    for(uint i = 0; i < emNUM_HSIFnAID; i++) {
        mRegMap[(0x0300)     + i*8 ] = index;
        mRegMap[(0x0300 + 1) + i*8 ] = index;
        mRegMap[(0x0300 + 2) + i*8 ] = index;
        mRegMap[(0x0300 + 3) + i*8 ] = index++;
    }
    for(uint i = 0; i < emNUM_HSIFnAAD; i++) {
        mRegMap[(0x0340)     + i*8 ] = index;
        mRegMap[(0x0340 + 1) + i*8 ] = index;
        mRegMap[(0x0340 + 2) + i*8 ] = index;
        mRegMap[(0x0340 + 3) + i*8 ] = index++;
    }
    for(uint i = 0; i < emNUM_HSIFnARD; i++) {
        mRegMap[(0x0360)     + i*8 ] = index;
        mRegMap[(0x0360 + 1) + i*8 ] = index;
        mRegMap[(0x0360 + 2) + i*8 ] = index;
        mRegMap[(0x0360 + 3) + i*8 ] = index++;
    }
    mRegMap[0x03E0]     = index;
    mRegMap[0x03E0 + 1] = index;
    mRegMap[0x03E0 + 2] = index;
    mRegMap[0x03E0 + 3] = index++;
    mRegMap[0x03E8]     = index;
    mRegMap[0x03E8 + 1] = index;
    mRegMap[0x03E8 + 2] = index;
    mRegMap[0x03E8 + 3] = index++;
    mRegMap[0x03F0]     = index;
    mRegMap[0x03F0 + 1] = index;
    mRegMap[0x03F0 + 2] = index;
    mRegMap[0x03F0 + 3] = index++;
    mTotalRegNum = index;
    mRegArray = new SRegList* [mTotalRegNum];
    index = 0;
    #ifdef USR_CWR_SYSTEMC
    cw_instantiate_reg(CW_HSIFnMMD   , HSIFnMMD->name() , HSIFnMMD->addr() );
    cw_instantiate_reg(CW_HSIFnMCT   , HSIFnMCT->name() , HSIFnMCT->addr() );
    cw_instantiate_reg(CW_HSIFnMST   , HSIFnMST->name() , HSIFnMST->addr() );
    cw_instantiate_reg(CW_HSIFnMIST  , HSIFnMIST->name(), HSIFnMIST->addr());
    cw_instantiate_reg(CW_HSIFnMRT   , HSIFnMRT->name() , HSIFnMRT->addr() );
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) cw_instantiate_reg(CW_HSIFnMWmA  [i], HSIFnMWmA[i]->name(), HSIFnMWmA[i]->addr());
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) cw_instantiate_reg(CW_HSIFnMWmS  [i], HSIFnMWmS[i]->name(), HSIFnMWmS[i]->addr());
    cw_instantiate_reg(CW_HSIFnMEST  , HSIFnMEST->name(), HSIFnMEST->addr());
    cw_instantiate_reg(CW_HSIFnMESC  , HSIFnMESC->name(), HSIFnMESC->addr());
    cw_instantiate_reg(CW_HSIFnMEIE  , HSIFnMEIE->name(), HSIFnMEIE->addr());
    cw_instantiate_reg(CW_HSIFnSTMD  , HSIFnSTMD->name(), HSIFnSTMD->addr());
    cw_instantiate_reg(CW_HSIFnSTCT  , HSIFnSTCT->name(), HSIFnSTCT->addr());
    cw_instantiate_reg(CW_HSIFnSTST  , HSIFnSTST->name(), HSIFnSTST->addr());
    cw_instantiate_reg(CW_HSIFnSTSC  , HSIFnSTSC->name(), HSIFnSTSC->addr());
    cw_instantiate_reg(CW_HSIFnSTIE  , HSIFnSTIE->name(), HSIFnSTIE->addr());
    cw_instantiate_reg(CW_HSIFnSTSA  , HSIFnSTSA->name(), HSIFnSTSA->addr());
    cw_instantiate_reg(CW_HSIFnSTBC  , HSIFnSTBC->name(), HSIFnSTBC->addr());
    cw_instantiate_reg(CW_HSIFnSRMD  , HSIFnSRMD->name(), HSIFnSRMD->addr());
    cw_instantiate_reg(CW_HSIFnSRCT  , HSIFnSRCT->name(), HSIFnSRCT->addr());
    cw_instantiate_reg(CW_HSIFnSRST  , HSIFnSRST->name(), HSIFnSRST->addr());
    cw_instantiate_reg(CW_HSIFnSRSC  , HSIFnSRSC->name(), HSIFnSRSC->addr());
    cw_instantiate_reg(CW_HSIFnSRIE  , HSIFnSRIE->name(), HSIFnSRIE->addr());
    cw_instantiate_reg(CW_HSIFnSRDA  , HSIFnSRDA->name(), HSIFnSRDA->addr());
    cw_instantiate_reg(CW_HSIFnSRDS  , HSIFnSRDS->name(), HSIFnSRDS->addr());
    cw_instantiate_reg(CW_HSIFnSRBC  , HSIFnSRBC->name(), HSIFnSRBC->addr());
    cw_instantiate_reg(CW_HSIFnSRWP  , HSIFnSRWP->name(), HSIFnSRWP->addr());
    cw_instantiate_reg(CW_HSIFnSRRP  , HSIFnSRRP->name(), HSIFnSRRP->addr());
    for(uint i = 0; i < emNUM_HSIFnAID ; i++) cw_instantiate_reg(CW_HSIFnAID   [i], HSIFnAID [i]->name(), HSIFnAID [i]->addr());
    for(uint i = 0; i < emNUM_HSIFnAAD ; i++) cw_instantiate_reg(CW_HSIFnAAD   [i], HSIFnAAD [i]->name(), HSIFnAAD [i]->addr());
    for(uint i = 0; i < emNUM_HSIFnARD ; i++) cw_instantiate_reg(CW_HSIFnARD   [i], HSIFnARD [i]->name(), HSIFnARD [i]->addr());
    cw_instantiate_reg(CW_HSIFnAEST  , HSIFnAEST->name(), HSIFnAEST->addr());
    cw_instantiate_reg(CW_HSIFnAESC  , HSIFnAESC->name(), HSIFnAESC->addr());
    cw_instantiate_reg(CW_HSIFnAEIE  , HSIFnAEIE->name(), HSIFnAEIE->addr());
    #endif
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMMD   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMCT   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMST   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMIST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMRT   , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) mCurReg = mRegArray[index++] = new SRegList(HSIFnMWmA  [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) mCurReg = mRegArray[index++] = new SRegList(HSIFnMWmS  [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMEST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMESC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnMEIE  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTMD  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTCT  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTSC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTIE  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTSA  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSTBC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRMD  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRCT  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRSC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRIE  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRDA  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRDS  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRBC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRWP  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnSRRP  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_HSIFnAID ; i++) mCurReg = mRegArray[index++] = new SRegList(HSIFnAID   [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_HSIFnAAD ; i++) mCurReg = mRegArray[index++] = new SRegList(HSIFnAAD   [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    for(uint i = 0; i < emNUM_HSIFnARD ; i++) mCurReg = mRegArray[index++] = new SRegList(HSIFnARD   [i], mCurReg, i,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnAEST  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnAESC  , mCurReg, 0,  4, "8|16|32", "8|16|32");
    mCurReg = mRegArray[index++] = new SRegList(HSIFnAEIE  , mCurReg, 0,  4, "8|16|32", "8|16|32");

    mRegList = mCurReg;

    (*HSIFnMMD   ) ( 0,  0, "CHCT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 0,  0, "WARE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 1,  1, "WAWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 4,  4, "WBRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 5,  5, "WBWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 8,  8, "WCRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) ( 9,  9, "WCWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) (12, 12, "WDRE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMCT   ) (13, 13, "WDWE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMST   ) ( 0,  0, "AUTS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMST   ) ( 1,  1, "AUTS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 0,  0, "RARS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 1,  1, "AKRS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 2,  2, "TERS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 4,  4, "RARS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 5,  5, "AKRS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 6,  6, "TERS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 8,  8, "RARS2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) ( 9,  9, "AKRS2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (10, 10, "TERS2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (12, 12, "RARS3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (13, 13, "AKRS3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (14, 14, "TERS3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (16, 16, "STCS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (17, 17, "SRCS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (18, 18, "SRCS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (20, 20, "CERS0"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (21, 21, "CERS1"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (22, 22, "CERS2"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (23, 23, "CERS3"   , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (24, 24, "STES"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (25, 25, "SRES"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (27, 27, "MESS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (28, 28, "AESS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMIST  ) (31, 31, "DBGS"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMRT   ) ( 9,  0, "RCNT"    , 0x3FF     , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMRT   ) (15, 12, "RSCL"    , 0xF       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTMD  ) (16, 16, "STPS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTMD  ) (20, 20, "STNK"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTMD  ) (14, 12, "STTH"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTMD  ) (10,  8, "STBL"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTMD  ) ( 6,  4, "STOS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTCT  ) ( 0,  0, "STDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) ( 0,  0, "STC"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) ( 2,  2, "STE0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) ( 4,  4, "STE1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) ( 5,  5, "STE2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) (20, 20, "STE3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTST  ) (23, 23, "STE4"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) ( 0,  0, "STCC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) ( 2,  2, "STEC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) ( 4,  4, "STEC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) ( 5,  5, "STEC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) (20, 20, "STEC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSC  ) (23, 23, "STEC4"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) ( 0,  0, "STCE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) ( 2,  2, "STEE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) ( 4,  4, "STEE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) ( 5,  5, "STEE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) (20, 20, "STEE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTIE  ) (23, 23, "STEE4"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTSA  ) (31,  4, "STSA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSTBC  ) (24,  4, "STBC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRMD  ) (16, 16, "SRPS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRMD  ) (20, 20, "SRMC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRMD  ) ( 4,  4, "SROS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRCT  ) ( 0,  0, "SRDE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) ( 0,  0, "SRC0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) ( 1,  1, "SRC1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) (15, 15, "SRTA"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) (20, 20, "SRE0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) (21, 21, "SRE1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) (23, 23, "SRE2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRST  ) (31, 31, "SRA"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRSC  ) (20, 20, "SREC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRSC  ) (21, 21, "SREC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRSC  ) (23, 23, "SREC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRSC  ) (31, 31, "SRAC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) ( 0,  0, "SRCE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) ( 1,  1, "SRCE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) (20, 20, "SREE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) (21, 21, "SREE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) (23, 23, "SREE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRIE  ) (31, 31, "SRAE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRDA  ) (31,  4, "SRDA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRDS  ) (24,  4, "SRDS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRBC  ) (24,  4, "SRBC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRWP  ) ( 0,  0, "SRWT"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRWP  ) (24,  4, "SRWP"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnSRRP  ) ( 0,  0, "SRRT"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnSRRP  ) (24,  4, "SRRP"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 0,  0, "AEE0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 1,  1, "AEI0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 2,  2, "AER0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 3,  3, "AEW0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 4,  4, "AEE1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 5,  5, "AEI1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 6,  6, "AER1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 7,  7, "AEW1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 8,  8, "AEE2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) ( 9,  9, "AEI2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (10, 10, "AER2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (11, 11, "AEW2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (12, 12, "AEE3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (13, 13, "AEI3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (14, 14, "AER3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (15, 15, "AEW3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (16, 16, "AES"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (20, 20, "WER0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (21, 21, "WEW0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (22, 22, "WER1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (23, 23, "WEW1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (24, 24, "WER2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (25, 25, "WEW2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (26, 26, "WER3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (27, 27, "WEW3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (28, 28, "WES0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAEST  ) (29, 29, "WES1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 0,  0, "AEEC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 1,  1, "AEIC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 2,  2, "AERC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 3,  3, "AEWC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 4,  4, "AEEC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 5,  5, "AEIC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 6,  6, "AERC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 7,  7, "AEWC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 8,  8, "AEEC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) ( 9,  9, "AEIC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (10, 10, "AERC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (11, 11, "AEWC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (12, 12, "AEEC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (13, 13, "AEIC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (14, 14, "AERC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (15, 15, "AEWC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (16, 16, "AESC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (20, 20, "WERC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (21, 21, "WEWC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (22, 22, "WERC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (23, 23, "WEWC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (24, 24, "WERC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (25, 25, "WEWC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (26, 26, "WERC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (27, 27, "WEWC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (28, 28, "WESC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAESC  ) (29, 29, "WESC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 0,  0, "AEEE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 1,  1, "AEIE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 2,  2, "AERE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 3,  3, "AEWE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 4,  4, "AEEE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 5,  5, "AEIE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 6,  6, "AERE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 7,  7, "AEWE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 8,  8, "AEEE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) ( 9,  9, "AEIE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (10, 10, "AERE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (11, 11, "AEWE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (12, 12, "AEEE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (13, 13, "AEIE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (14, 14, "AERE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (15, 15, "AEWE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (16, 16, "AESE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (20, 20, "WERE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (21, 21, "WEWE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (22, 22, "WERE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (23, 23, "WEWE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (24, 24, "WERE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (25, 25, "WEWE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (26, 26, "WERE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (27, 27, "WEWE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (28, 28, "WESE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnAEIE  ) (29, 29, "WESE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEST  ) ( 7,  7, "PSE3"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMEST  ) ( 6,  6, "PSE2"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMEST  ) ( 5,  5, "PSE1"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMEST  ) ( 4,  4, "PSE0"    , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMEST  ) ( 0,  0, "CTE"     , 0x0       , "R"     , vpcl::SPP_ENABLE);
    (*HSIFnMESC  ) ( 7,  7, "PSEC3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMESC  ) ( 6,  6, "PSEC2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMESC  ) ( 5,  5, "PSEC1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMESC  ) ( 4,  4, "PSEC0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMESC  ) ( 0,  0, "CTEC"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEIE  ) ( 7,  7, "PSEE3"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEIE  ) ( 6,  6, "PSEE2"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEIE  ) ( 5,  5, "PSEE1"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEIE  ) ( 4,  4, "PSEE0"   , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    (*HSIFnMEIE  ) ( 0,  0, "CTEE"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) {
        (*HSIFnMWmS  [i]) (31,  2, "MWmS"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) {
        (*HSIFnMWmA  [i]) (31,  2, "MWmA"    , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_HSIFnAAD; i++) {
        (*HSIFnAAD   [i]) (31,  0, "AAD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_HSIFnAID; i++) {
        (*HSIFnAID   [i]) (31,  0, "AID"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }
    for(uint i = 0; i < emNUM_HSIFnARD; i++) {
        (*HSIFnARD   [i]) (31,  0, "ARD"     , 0x0       , "R|W"   , vpcl::SPP_ENABLE);
    }

    mFileName = "";
    mInstName = name;
    mLineNum = 0;
    mBusWidth = buswidth;
    mBusByteWidth = mBusWidth/8;   // using in BIG ENDIAN
    mIsReset = false;

    // Constructor the callback function of each register
    for (uint i = 0; i < mTotalRegNum; i++) {
        mWrCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
        mRdCbAPI[mRegArray[i]->my_p->name()][mRegArray[i]->my_p->name()] = NULL;
    }

    //Constructor the mWrCbAPI, mRdCbAPI variable of each register
    mWrCbAPI["HSIFnMMD"]["CHCT"   ] = &Chsif020_regif::cb_HSIFnMMD_CHCT;
    mWrCbAPI["HSIFnMCT"]["WDWE"   ] = &Chsif020_regif::cb_HSIFnMCT_WDWE;
    mWrCbAPI["HSIFnMST"]["AUTS1"  ] = &Chsif020_regif::cb_HSIFnMST_AUTS1;
    mWrCbAPI["HSIFnMIST"]["AESS"   ] = &Chsif020_regif::cb_HSIFnMIST_AESS;
    mWrCbAPI["HSIFnMRT"]["RSCL"   ] = &Chsif020_regif::cb_HSIFnMRT_RSCL;
    mWrCbAPI["HSIFnSTMD"]["STNK"   ] = &Chsif020_regif::cb_HSIFnSTMD_STNK;
    mWrCbAPI["HSIFnSTCT"]["STDE"   ] = &Chsif020_regif::cb_HSIFnSTCT_STDE;
    mWrCbAPI["HSIFnSTSC"]["STEC4"  ] = &Chsif020_regif::cb_HSIFnSTSC_STEC4;
    mWrCbAPI["HSIFnSTIE"]["STEE4"  ] = &Chsif020_regif::cb_HSIFnSTIE_STEE4;
    mWrCbAPI["HSIFnSTSA"]["STSA"   ] = &Chsif020_regif::cb_HSIFnSTSA_STSA;
    mWrCbAPI["HSIFnSTBC"]["STBC"   ] = &Chsif020_regif::cb_HSIFnSTBC_STBC;
    mWrCbAPI["HSIFnSRMD"]["SRMC"   ] = &Chsif020_regif::cb_HSIFnSRMD_SRMC;
    mWrCbAPI["HSIFnSRCT"]["SRDE"   ] = &Chsif020_regif::cb_HSIFnSRCT_SRDE;
    mWrCbAPI["HSIFnSRST"]["SRA"    ] = &Chsif020_regif::cb_HSIFnSRST_SRA;
    mWrCbAPI["HSIFnSRSC"]["SRAC"   ] = &Chsif020_regif::cb_HSIFnSRSC_SRAC;
    mWrCbAPI["HSIFnSRIE"]["SRAE"   ] = &Chsif020_regif::cb_HSIFnSRIE_SRAE;
    mWrCbAPI["HSIFnSRDA"]["SRDA"   ] = &Chsif020_regif::cb_HSIFnSRDA_SRDA;
    mWrCbAPI["HSIFnSRDS"]["SRDS"   ] = &Chsif020_regif::cb_HSIFnSRDS_SRDS;
    mWrCbAPI["HSIFnSRBC"]["SRBC"   ] = &Chsif020_regif::cb_HSIFnSRBC_SRBC;
    mWrCbAPI["HSIFnSRWP"]["SRWP"   ] = &Chsif020_regif::cb_HSIFnSRWP_SRWP;
    mWrCbAPI["HSIFnSRRP"]["SRRP"   ] = &Chsif020_regif::cb_HSIFnSRRP_SRRP;
    mWrCbAPI["HSIFnAESC"]["WESC1"  ] = &Chsif020_regif::cb_HSIFnAESC_WESC1;

    mRdCbAPI["HSIFnMMD"]["CHCT"   ] = &Chsif020_regif::cb_HSIFnMMD_CHCT;
    mRdCbAPI["HSIFnMCT"]["WDWE"   ] = &Chsif020_regif::cb_HSIFnMCT_WDWE;
    mRdCbAPI["HSIFnMST"]["AUTS1"  ] = &Chsif020_regif::cb_HSIFnMST_AUTS1;
    mRdCbAPI["HSIFnMIST"]["AESS"   ] = &Chsif020_regif::cb_HSIFnMIST_AESS;
    mRdCbAPI["HSIFnMRT"]["RSCL"   ] = &Chsif020_regif::cb_HSIFnMRT_RSCL;
    mRdCbAPI["HSIFnSTMD"]["STNK"   ] = &Chsif020_regif::cb_HSIFnSTMD_STNK;
    mRdCbAPI["HSIFnSTCT"]["STDE"   ] = &Chsif020_regif::cb_HSIFnSTCT_STDE;
    mRdCbAPI["HSIFnSTSC"]["STEC4"  ] = &Chsif020_regif::cb_HSIFnSTSC_STEC4;
    mRdCbAPI["HSIFnSTIE"]["STEE4"  ] = &Chsif020_regif::cb_HSIFnSTIE_STEE4;
    mRdCbAPI["HSIFnSTSA"]["STSA"   ] = &Chsif020_regif::cb_HSIFnSTSA_STSA;
    mRdCbAPI["HSIFnSTBC"]["STBC"   ] = &Chsif020_regif::cb_HSIFnSTBC_STBC;
    mRdCbAPI["HSIFnSRMD"]["SRMC"   ] = &Chsif020_regif::cb_HSIFnSRMD_SRMC;
    mRdCbAPI["HSIFnSRCT"]["SRDE"   ] = &Chsif020_regif::cb_HSIFnSRCT_SRDE;
    mRdCbAPI["HSIFnSRST"]["SRA"    ] = &Chsif020_regif::cb_HSIFnSRST_SRA;
    mRdCbAPI["HSIFnSRSC"]["SRAC"   ] = &Chsif020_regif::cb_HSIFnSRSC_SRAC;
    mRdCbAPI["HSIFnSRIE"]["SRAE"   ] = &Chsif020_regif::cb_HSIFnSRIE_SRAE;
    mRdCbAPI["HSIFnSRDA"]["SRDA"   ] = &Chsif020_regif::cb_HSIFnSRDA_SRDA;
    mRdCbAPI["HSIFnSRDS"]["SRDS"   ] = &Chsif020_regif::cb_HSIFnSRDS_SRDS;
    mRdCbAPI["HSIFnSRBC"]["SRBC"   ] = &Chsif020_regif::cb_HSIFnSRBC_SRBC;
    mRdCbAPI["HSIFnSRWP"]["SRWP"   ] = &Chsif020_regif::cb_HSIFnSRWP_SRWP;
    mRdCbAPI["HSIFnSRRP"]["SRRP"   ] = &Chsif020_regif::cb_HSIFnSRRP_SRRP;
    mRdCbAPI["HSIFnAESC"]["WESC1"  ] = &Chsif020_regif::cb_HSIFnAESC_WESC1;

    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnMWmA"<< i;
        mWrCbAPI[str_tmp.str()]["MWmA"] = &Chsif020_regif::cb_HSIFnMWmA_MWmA;
        mRdCbAPI[str_tmp.str()]["MWmA"] = &Chsif020_regif::cb_HSIFnMWmA_MWmA;
    }
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnMWmS"<< i;
        mWrCbAPI[str_tmp.str()]["MWmS"] = &Chsif020_regif::cb_HSIFnMWmS_MWmS;
        mRdCbAPI[str_tmp.str()]["MWmS"] = &Chsif020_regif::cb_HSIFnMWmS_MWmS;
    }
    for(uint i = 0; i < emNUM_HSIFnAID; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnAID"<< i;
        mWrCbAPI[str_tmp.str()]["AID"] = &Chsif020_regif::cb_HSIFnAID_AID;
        mRdCbAPI[str_tmp.str()]["AID"] = &Chsif020_regif::cb_HSIFnAID_AID;
    }
    for(uint i = 0; i < emNUM_HSIFnAAD; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnAAD"<< i;
        mWrCbAPI[str_tmp.str()]["AAD"] = &Chsif020_regif::cb_HSIFnAAD_AAD;
        mRdCbAPI[str_tmp.str()]["AAD"] = &Chsif020_regif::cb_HSIFnAAD_AAD;
    }
    for(uint i = 0; i < emNUM_HSIFnARD; i++) {
        str_tmp.str("");
        str_tmp<<"HSIFnARD"<< i;
        mWrCbAPI[str_tmp.str()]["ARD"] = &Chsif020_regif::cb_HSIFnARD_ARD;
        mRdCbAPI[str_tmp.str()]["ARD"] = &Chsif020_regif::cb_HSIFnARD_ARD;
    }
    InitLocalVal();
}

/// Destructor: delete pointers
/// @return none
Chsif020_regif::~Chsif020_regif()
{
    // Delete registers' pointer
    for (uint i = 0 ; i < mTotalRegNum ; i++) {
        delete mRegArray[i]->my_p;
        mRegArray[i]->prev = NULL;
    }
    delete [] mRegMap;
    delete [] mRegArray;
    delete mRegList;
    mCurReg = NULL;
}

/// Mask unselected bit
/// @return selected value
Chsif020_regif::uint Chsif020_regif::bit_select(
                            cuint val,    ///< [in] Writting address
                            cuint start,  ///< [in] start bit position
                            cuint end)    ///< [in] end bit position
{
    uint ret_val = val;
    if (end - start + 1 < 32) {
        ret_val = (val>>start) & (uint)((1<<(end-start+1))-1);
    }
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_regif::reg_wr(cuint addr,                    ///< [in] Writting address
                            const unsigned char *p_data,   ///< [in] Writing data
                            cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, false);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_regif::reg_rd(cuint addr,              ///< [in]  Reading address
                            unsigned char *p_data,   ///< [out] Reading data
                            cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, false);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_regif::reg_wr_dbg(cuint addr,                    ///< [in] Writting address
                                const unsigned char *p_data,   ///< [in] Writing data
                                cuint size)                    ///< [in] Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_wr_process (addr, p_data, size, true);
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_regif::reg_rd_dbg(cuint addr,              ///< [in]  Reading address
                                unsigned char *p_data,   ///< [out] Reading data
                                cuint size)              ///< [in]  Data size (byte)
{
    if(size == 0) return false;
    #ifdef IS_MODELED_ENDIAN_BIG
    if ((addr % mBusByteWidth) + size > mBusByteWidth) return false;
    #endif

    bool ret_val = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    ret_val = reg_rd_process (addr, p_data, size, true);
    return ret_val;
}

/// Write the value to requested module register
/// @return true if writing transaction is finished normally
bool Chsif020_regif::reg_wr_process(cuint addr,                   ///< [in] Writting address
                                    const unsigned char *p_data,  ///< [in] Writing data
                                    cuint size,                   ///< [in] Data size (byte)
                                    bool IsDbgFunc)               ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    if (mIsReset == true) {
        re_printf("warning", "Cannot write during reset period\n");
        return true;
    }
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->wacc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Writing access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_wr_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            ret_val = true;
        }
    }
    return ret_val;
}

/// Read the register value of requested module
/// @return true if reading transaction is finished normally
bool Chsif020_regif::reg_rd_process(cuint addr,              ///< [in]  Reading address
                                    unsigned char *p_data,   ///< [out] Reading data
                                    cuint size,              ///< [in]  Data size (byte)
                                    bool IsDbgFunc)          ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    uint tmp_addr = addr;
    #ifdef IS_MODELED_ENDIAN_BIG
    if (size < mBusByteWidth) {
        tmp_addr = addr ^ (mBusByteWidth - size);
    }
    #endif
    bool ret_val = false;
    bool valid_addr = false;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    std::list<uint> list_index;
    uint masked_addr = bit_select(tmp_addr, 0, 12-1);
    uint access_addr = masked_addr;
    while (masked_addr + size > access_addr) {
        int reg_index = get_reg_index(access_addr);
        if (reg_index != -1) {
            vpcl::re_register *reg_p = mRegArray[reg_index]->my_p; 
            if ((IsDbgFunc == true) || (valid_addr == true) || (ChkSize(mRegArray[reg_index]->racc_size, size, tmp_addr))) {
                valid_addr = true;
                list_index.push_back(reg_index);
            }
            else {
                re_printf("error", "Reading access size to %s at address 0x%08X is wrong: %d byte(s).\n", reg_p->name().c_str(), tmp_addr, size);
                return false;
            }
            access_addr = reg_p->addr() + mRegArray[reg_index]->length;
        } else {
            access_addr += 1;
        }
    }
    if (valid_addr == true) {
        std::list<uint>::iterator it;
        for (it=list_index.begin() ; it!=list_index.end() ; it++) {
            access_addr = masked_addr;
            uint d_size = size;
            uint index = 0;
            if (masked_addr < mRegArray[(*it)]->my_p->addr()) { // adjust access address & index
                access_addr = mRegArray[(*it)]->my_p->addr();
                index = mRegArray[(*it)]->my_p->addr() - masked_addr;
            }
            if ((masked_addr + size) < (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length)) { // adjust access size
                d_size = masked_addr + size - access_addr;
            } else { // adjust access size
                d_size = (mRegArray[(*it)]->my_p->addr() + mRegArray[(*it)]->length) - access_addr;
            }
            if (size > mRegArray[(*it)]->length) { // adjust index for big endianess
                #ifdef IS_MODELED_ENDIAN_BIG
                index = index ^ (size - mRegArray[(*it)]->length);
                #endif
            }
            ret_val = reg_rd_func(tmp_addr - masked_addr + access_addr, &(p_data[index]), d_size, (*it), IsDbgFunc);
        }
    } else {
        if (IsDbgFunc == false) {
            re_printf("error", "Invalid access address 0x%08X\n", tmp_addr);
        } else {
            memset(p_data, 0, size);
            ret_val = true;
        }
    }
    return ret_val;
}

/// Process reading function
/// @return true if reading successfully
bool Chsif020_regif::reg_rd_func(cuint addr,                     ///< [in]  Reading address
                                 unsigned char *p_data,          ///< [out] Reading data
                                 cuint size,                     ///< [in]  Data size (byte)
                                 cuint reg_index,                ///< [in] Register index
                                 bool IsDbgFunc)                 ///< [in] flag indicate reg_rd or reg_rd_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    uint pre_data = 0;
    uint pst_data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    uint mask_size = (1 << (reg_length/2)) - 1;
    if (size < reg_length) {
        #ifdef IS_MODELED_ENDIAN_BIG
        start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
        #else
        start_pos =  (addr & mask_size)*8;  // Start bit position
        #endif
    }
    #endif
    if (IsDbgFunc == false) {
        if (mIsReset == true) {
            re_printf("warning", "Cannot launch call-back function during reset period\n");
        }else {
            #if 1 // always 1 since any size can be accessed in debug mode 
            if (size < reg_length) {
                re_printf("warning","Should read all bit in a register\n");
            }
            #endif
            pre_data = (uint)(*Register);
            pst_data = Register->read();
                        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
                if (((mRdCbAPI[Register->name()][it->name()]) != NULL)
                && (((start_pos < it->mStartAddr) && (it->mEndAddr < start_pos + size * 8))
                 || ((it->mStartAddr <= start_pos) && (start_pos <= it->mEndAddr))
                 || ((it->mStartAddr <= start_pos + size * 8) && (start_pos + size * 8 <= it->mEndAddr)) )) {
                    (this->*(mRdCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, false, size, pre_data, pst_data));
                }
            }
        }
    }
    pst_data = (uint)(*Register);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint read_data = 0;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                read_data |= (pst_data & (1 << i)) >> start_pos;
            }
            pst_data = read_data;
        }
    }
    #endif

    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(p_data != NULL);
    #else
    sc_assert(p_data != NULL);
    #endif
    memcpy(p_data, &pst_data, size);
    DumpRegMsg("R", Register->name(), "", size, addr, 0, 0, pst_data, mRegArray[reg_index]->length*8);
    for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
        uint val = (uint)(*Register);
        val = bit_select(val, it->mStartAddr, it->mEndAddr);
        DumpRegMsg("R", Register->name(), it->name(), size, addr, 0, 0, val, it->mEndAddr - it->mStartAddr + 1);
    }
    return true;
}

/// Process writing function
/// @return true if writing successfully
bool Chsif020_regif::reg_wr_func(cuint addr,                       ///< [in] Writting address
                                 const unsigned char *p_data,      ///< [in] Writing data
                                 cuint size,                       ///< [in] Data size (byte)
                                 cuint reg_index,                  ///< [in] Register index
                                 bool IsDbgFunc)                   ///< [in] flag indicate reg_wr or reg_wr_dbg
{
    vpcl::re_register* Register = mRegArray[reg_index]->my_p;
    uint pre_data = 0;
    uint data = 0;
    #if 1 // always 1 since any size can be accessed in debug mode 
    uint reg_length = mRegArray[reg_index]->length;
    uint start_pos = 0;
    #endif
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert ((p_data != NULL) && (Register != NULL));
    #else
    sc_assert ((p_data != NULL) && (Register != NULL));
    #endif
    memcpy(&data, p_data, size);
    #if 1 // always 1 since any size can be accessed in debug mode 
    if (size < reg_length) {
        uint mask_size = (1 << (reg_length/2)) - 1;
        if (((reg_length%2 == 0) && (reg_length%size == 0) && ((addr&mask_size)%size == 0)) 
         || (IsDbgFunc == false)) {
            uint new_data = (uint)(*Register);  // For writing to register
            uint written_data = 0;         // For transferring to callback function
            #ifdef IS_MODELED_ENDIAN_BIG
            start_pos =  (reg_length - 1)*8 - (addr & mask_size)*8; // Start bit position
            #else
            start_pos =  (addr & mask_size)*8;  // Start bit position
            #endif
            for (uint i = start_pos; i < (8*size + start_pos); i++) {
                new_data = (new_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
                written_data = (written_data & (~(1 << i))) | ((data << start_pos) & (1 << i));
            }
            data = new_data;
        }
    }
    #endif

    if ((mRegArray[reg_index]->block == false) || (IsDbgFunc == true)){
        pre_data = (uint)(*Register);
        if (IsDbgFunc == true) {
            bool backup_warning = Register->mMessageLevel["warning"];
            bool backup_error = Register->mMessageLevel["error"];
            Register->mMessageLevel["warning"]   = false;
            Register->mMessageLevel["error"]   = false;

            Register->write(data);

            Register->mMessageLevel["warning"]   = backup_warning;
            Register->mMessageLevel["error"]   = backup_error;
        } else {
            Register->write(data);
        }
        UpdateLocalVal(Register->addr());
        DumpRegMsg("W", Register->name(), "", size, addr, data, pre_data, (uint)(*Register), mRegArray[reg_index]->length*8);
        for (vpcl::bit_info *it=Register->mBitInfo ; it!=NULL ; it=it->next) {
            uint val = (uint)(*Register);
            val = bit_select(val, it->mStartAddr, it->mEndAddr);
            uint pre_val = pre_data;
            pre_val = bit_select(pre_val, it->mStartAddr, it->mEndAddr);
            DumpRegMsg("W", Register->name(), it->name(), size, addr, 0, pre_val, val, it->mEndAddr - it->mStartAddr + 1);
            if ((mWrCbAPI[Register->name()][it->name()]) != NULL) {
                (this->*(mWrCbAPI[Register->name()][it->name()]))(RegCBstr(mRegArray[reg_index]->channel, true, size, pre_data, data));
            }
        }
    }
    else {
        re_printf("warning","%s is blocked writing from Bus I/F.\n", Register->name().c_str());
    }
    return true;
}

/// Check access size
/// @@return true if detect_size equal expect_size
bool Chsif020_regif::ChkSize(std::string expect_size, cuint detect_size, cuint addr)
{
    std::vector<std::string> arg_vec = Str2Vec(expect_size, '|');
    std::vector<std::string>::iterator it;
    char *err_p = NULL;
    uint size = 0;
    if (detect_size > mBusByteWidth) {
        re_printf("error", "Invalid access size: %d bytes\n", detect_size);
        return false;
    }
    if(addr%detect_size != 0) {
        re_printf("error", "Invalid access address 0x%08X with access size %d bytes\n", addr, detect_size);
        return false;
    }
    for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
        errno = 0; size = (uint) strtoul((*it).c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            if ((size/8) == detect_size) {
                return true;
            }
        }
    }
    return false;
}

/// Initialize reg_handle_command variables
/// @return none
void Chsif020_regif::CommandInit()
{
    mDumpRegisterRW = false;
    mMessageLevel["fatal"]   = true;
    mMessageLevel["error"]   = true;
    mMessageLevel["warning"] = false;
    mMessageLevel["info"]    = false;
}

/// Process reg_handle_command command
/// @return string
std::string Chsif020_regif::reg_handle_command(const std::vector<std::string>& args)
{
    std::string ret = "";
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    if (args[0] == "reg") {
        if (args[1] == "help") {
            ret += "    --- reg ---\n";
            ret += "    reg MessageLevel <fatal|error|warning|info> Select debug message level (Default: fatal,error)\n";
            ret += "    reg DumpRegisterRW <true/false>             Select dump register access information  (Default: false)\n";
            ret += "    reg <register_name> MessageLevel <fatal|error|warning|info> Select debug message level for register (Default: fatal,error)\n";
            ret += "    reg <register_name> force <value>           Force register with setting value\n";
            ret += "    reg <register_name> release                 Release register from force value\n";
            ret += "    reg <register_name> <value>                 Write a value into register\n";
            ret += "    reg <register_name>                         Read value of register\n";
            ret += "    reg help                                    Show a direction\n";
        }
        else if (args[1] == "DumpRegisterRW") {
            if (args.size() == 2) {
                ret = (mDumpRegisterRW)? "true" : "false";
            }
            else if (args.size() == 3) {
                if (args[2] == "true") {
                    mDumpRegisterRW = true;
                }
                else if (args[2] == "false") {
                    mDumpRegisterRW = false;
                } else {
                    ret = err_msg + "DumpRegisterRW command needs an argument [true/false]\n";
                }
            } else {
                ret = err_msg + "DumpRegisterRW has too much arguments\n";
            }
        }
        else if (args[1] == "MessageLevel") {
            // read mode
            if (args.size() == 2) {
                std::map<std::string, bool>::iterator it;
                for (it = mMessageLevel.begin(); it != mMessageLevel.end(); it++) {
                    if ( it->second == true ) {
                        ret += " " + it->first;
                    }
                }
            // write mode
            } else if (args.size() == 3) {
                std::vector<std::string> arg_vec = Str2Vec(args[2], '|');
                std::map<std::string, bool>::iterator msgit;
                for (msgit =mMessageLevel.begin(); msgit != mMessageLevel.end(); msgit++) {
                    msgit->second = false;
                }
                std::vector<std::string>::iterator it;
                for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                    mMessageLevel[*it] = true;
                }
            } else {
                ret = err_msg + "MessageLevel has too much arguments\n";
            }
        } else {
            bool matched = false;
            for (uint i = 0; i < mTotalRegNum; i++) {
                if (args[1] == mRegArray[i]->my_p->name()) {
                    ret = AccessRegCommand(args, mRegArray[i]->my_p, mRegArray[i]->block);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                ret = err_msg + "Register name " + (std::string)args[1] + " is invalid\n";
            }
        }
    }
    return ret;
}

/// process reg_handle_command of "reg" parameter
/// @return string
std::string Chsif020_regif::AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg)
{
    std::string ret = "";
    char *err_p = NULL;
    std::string err_msg = "Error ("   + mInstName + ") ";   // error message
    uint data = 0;
    std::ostringstream str_tmp;
    #ifdef REGIF_NOT_USE_SYSTEMC
    assert(Register != NULL);
    #else
    sc_assert(Register != NULL);
    #endif
    if (args.size() == 2) {
        data = (uint)(*Register);
        str_tmp<<std::setw(14)<<std::left<<(Register->name());
        str_tmp<<"0x"<<std::setw(8)<<std::hex<<std::uppercase<<std::left<<data<<"\n";
        ret = str_tmp.str();
    } else if ((args.size() == 3) && (args[2] == "release")) {
        BlockReg = false;
    } else if ((args.size() == 4) && (args[2] == "force")) {
        errno = 0; data = (uint) strtoul(args[3].c_str(), &err_p, 0);
        #ifdef REGIF_NOT_USE_SYSTEMC
        assert(err_p != NULL);
        #else
        sc_assert(err_p != NULL);
        #endif
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            BlockReg = true;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid force value\n";
        }
    } else if ((args.size() >= 3) && (args[2] == "MessageLevel")) {
        if (args.size() == 3) {
            ret = Register->name() + " ";
            ret += Register->GetMessageLevel();
        } else if (args.size() == 4) {
            std::map<std::string, bool> MessageLevel;
            std::vector<std::string> arg_vec = Str2Vec(args[3], '|');
            std::vector<std::string>::iterator it;
            for (it = arg_vec.begin(); it != arg_vec.end(); it++) {
                MessageLevel[*it] = true;
            }
            Register->SetMessageLevel(MessageLevel);
        } else {
            ret = err_msg + "[" + Register->name() + "] MessageLevel has too much arguments\n";
        }
    } else if ((args.size() == 3) && (args[2] != "release")) {
        errno = 0; data = (uint) strtoul(args[2].c_str(), &err_p, 0);
        if (errno != ERANGE && *err_p == '\0') {
            *Register = data;
            UpdateLocalVal(Register->addr());
        } else {
            ret = err_msg + "[" + Register->name() + "] Invalid write value\n";
        }
    } else {
        ret = err_msg + "Wrong command : ";
        for (uint index = 0; index < args.size(); index ++) {
            ret += args[index] + " ";
        }
    }
    return ret;
}

/// Initialize local variables
/// @return none
void Chsif020_regif::InitLocalVal()
{
    // Initialize local variables
    HSIFnMMD_CHCT = 0x0;
    HSIFnMCT_WARE = 0x0;
    HSIFnMCT_WAWE = 0x0;
    HSIFnMCT_WBRE = 0x0;
    HSIFnMCT_WBWE = 0x0;
    HSIFnMCT_WCRE = 0x0;
    HSIFnMCT_WCWE = 0x0;
    HSIFnMCT_WDRE = 0x0;
    HSIFnMCT_WDWE = 0x0;
    HSIFnMST_AUTS0 = 0x0;
    HSIFnMST_AUTS1 = 0x0;
    HSIFnMIST_RARS0 = 0x0;
    HSIFnMIST_AKRS0 = 0x0;
    HSIFnMIST_TERS0 = 0x0;
    HSIFnMIST_RARS1 = 0x0;
    HSIFnMIST_AKRS1 = 0x0;
    HSIFnMIST_TERS1 = 0x0;
    HSIFnMIST_RARS2 = 0x0;
    HSIFnMIST_AKRS2 = 0x0;
    HSIFnMIST_TERS2 = 0x0;
    HSIFnMIST_RARS3 = 0x0;
    HSIFnMIST_AKRS3 = 0x0;
    HSIFnMIST_TERS3 = 0x0;
    HSIFnMIST_STCS = 0x0;
    HSIFnMIST_SRCS0 = 0x0;
    HSIFnMIST_SRCS1 = 0x0;
    HSIFnMIST_CERS0 = 0x0;
    HSIFnMIST_CERS1 = 0x0;
    HSIFnMIST_CERS2 = 0x0;
    HSIFnMIST_CERS3 = 0x0;
    HSIFnMIST_STES = 0x0;
    HSIFnMIST_SRES = 0x0;
    HSIFnMIST_MESS = 0x0;
    HSIFnMIST_AESS = 0x0;
    HSIFnMIST_DBGS = 0x0;
    HSIFnMRT_RCNT = 0x3FF;
    HSIFnMRT_RSCL = 0xF;
    for(uint i = 0; i < emNUM_HSIFnMWmA; i++) {
        HSIFnMWmA_MWmA[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_HSIFnMWmS; i++) {
        HSIFnMWmS_MWmS[i] = 0x0;
    }
    HSIFnSTMD_STPS = 0x0;
    HSIFnSTMD_STNK = 0x0;
    HSIFnSTMD_STTH = 0x0;
    HSIFnSTMD_STBL = 0x0;
    HSIFnSTMD_STOS = 0x0;
    HSIFnSTCT_STDE = 0x0;
    HSIFnSTST_STC = 0x0;
    HSIFnSTST_STE0 = 0x0;
    HSIFnSTST_STE1 = 0x0;
    HSIFnSTST_STE2 = 0x0;
    HSIFnSTST_STE3 = 0x0;
    HSIFnSTST_STE4 = 0x0;
    HSIFnSTSC_STCC = 0x0;
    HSIFnSTSC_STEC0 = 0x0;
    HSIFnSTSC_STEC1 = 0x0;
    HSIFnSTSC_STEC2 = 0x0;
    HSIFnSTSC_STEC3 = 0x0;
    HSIFnSTSC_STEC4 = 0x0;
    HSIFnSTIE_STCE = 0x0;
    HSIFnSTIE_STEE0 = 0x0;
    HSIFnSTIE_STEE1 = 0x0;
    HSIFnSTIE_STEE2 = 0x0;
    HSIFnSTIE_STEE3 = 0x0;
    HSIFnSTIE_STEE4 = 0x0;
    HSIFnSTSA_STSA = 0x0;
    HSIFnSTBC_STBC = 0x0;
    HSIFnSRMD_SRPS = 0x0;
    HSIFnSRMD_SRMC = 0x0;
    HSIFnSRMD_SROS = 0x0;
    HSIFnSRCT_SRDE = 0x0;
    HSIFnSRST_SRC0 = 0x0;
    HSIFnSRST_SRC1 = 0x0;
    HSIFnSRST_SRTA = 0x0;
    HSIFnSRST_SRE0 = 0x0;
    HSIFnSRST_SRE1 = 0x0;
    HSIFnSRST_SRE2 = 0x0;
    HSIFnSRST_SRA = 0x0;
    HSIFnSRSC_SREC0 = 0x0;
    HSIFnSRSC_SREC1 = 0x0;
    HSIFnSRSC_SREC2 = 0x0;
    HSIFnSRSC_SRAC = 0x0;
    HSIFnSRIE_SRCE0 = 0x0;
    HSIFnSRIE_SRCE1 = 0x0;
    HSIFnSRIE_SREE0 = 0x0;
    HSIFnSRIE_SREE1 = 0x0;
    HSIFnSRIE_SREE2 = 0x0;
    HSIFnSRIE_SRAE = 0x0;
    HSIFnSRDA_SRDA = 0x0;
    HSIFnSRDS_SRDS = 0x0;
    HSIFnSRBC_SRBC = 0x0;
    HSIFnSRWP_SRWT = 0x0;
    HSIFnSRWP_SRWP = 0x0;
    HSIFnSRRP_SRRT = 0x0;
    HSIFnSRRP_SRRP = 0x0;
    for(uint i = 0; i < emNUM_HSIFnAID; i++) {
        HSIFnAID_AID[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_HSIFnAAD; i++) {
        HSIFnAAD_AAD[i] = 0x0;
    }
    for(uint i = 0; i < emNUM_HSIFnARD; i++) {
        HSIFnARD_ARD[i] = 0x0;
    }
    HSIFnAEST_AEE0 = 0x0;
    HSIFnAEST_AEI0 = 0x0;
    HSIFnAEST_AER0 = 0x0;
    HSIFnAEST_AEW0 = 0x0;
    HSIFnAEST_AEE1 = 0x0;
    HSIFnAEST_AEI1 = 0x0;
    HSIFnAEST_AER1 = 0x0;
    HSIFnAEST_AEW1 = 0x0;
    HSIFnAEST_AEE2 = 0x0;
    HSIFnAEST_AEI2 = 0x0;
    HSIFnAEST_AER2 = 0x0;
    HSIFnAEST_AEW2 = 0x0;
    HSIFnAEST_AEE3 = 0x0;
    HSIFnAEST_AEI3 = 0x0;
    HSIFnAEST_AER3 = 0x0;
    HSIFnAEST_AEW3 = 0x0;
    HSIFnAEST_AES = 0x0;
    HSIFnAEST_WER0 = 0x0;
    HSIFnAEST_WEW0 = 0x0;
    HSIFnAEST_WER1 = 0x0;
    HSIFnAEST_WEW1 = 0x0;
    HSIFnAEST_WER2 = 0x0;
    HSIFnAEST_WEW2 = 0x0;
    HSIFnAEST_WER3 = 0x0;
    HSIFnAEST_WEW3 = 0x0;
    HSIFnAEST_WES0 = 0x0;
    HSIFnAEST_WES1 = 0x0;
    HSIFnAESC_AEEC0 = 0x0;
    HSIFnAESC_AEIC0 = 0x0;
    HSIFnAESC_AERC0 = 0x0;
    HSIFnAESC_AEWC0 = 0x0;
    HSIFnAESC_AEEC1 = 0x0;
    HSIFnAESC_AEIC1 = 0x0;
    HSIFnAESC_AERC1 = 0x0;
    HSIFnAESC_AEWC1 = 0x0;
    HSIFnAESC_AEEC2 = 0x0;
    HSIFnAESC_AEIC2 = 0x0;
    HSIFnAESC_AERC2 = 0x0;
    HSIFnAESC_AEWC2 = 0x0;
    HSIFnAESC_AEEC3 = 0x0;
    HSIFnAESC_AEIC3 = 0x0;
    HSIFnAESC_AERC3 = 0x0;
    HSIFnAESC_AEWC3 = 0x0;
    HSIFnAESC_AESC = 0x0;
    HSIFnAESC_WERC0 = 0x0;
    HSIFnAESC_WEWC0 = 0x0;
    HSIFnAESC_WERC1 = 0x0;
    HSIFnAESC_WEWC1 = 0x0;
    HSIFnAESC_WERC2 = 0x0;
    HSIFnAESC_WEWC2 = 0x0;
    HSIFnAESC_WERC3 = 0x0;
    HSIFnAESC_WEWC3 = 0x0;
    HSIFnAESC_WESC0 = 0x0;
    HSIFnAESC_WESC1 = 0x0;
    HSIFnAEIE_AEEE0 = 0x0;
    HSIFnAEIE_AEIE0 = 0x0;
    HSIFnAEIE_AERE0 = 0x0;
    HSIFnAEIE_AEWE0 = 0x0;
    HSIFnAEIE_AEEE1 = 0x0;
    HSIFnAEIE_AEIE1 = 0x0;
    HSIFnAEIE_AERE1 = 0x0;
    HSIFnAEIE_AEWE1 = 0x0;
    HSIFnAEIE_AEEE2 = 0x0;
    HSIFnAEIE_AEIE2 = 0x0;
    HSIFnAEIE_AERE2 = 0x0;
    HSIFnAEIE_AEWE2 = 0x0;
    HSIFnAEIE_AEEE3 = 0x0;
    HSIFnAEIE_AEIE3 = 0x0;
    HSIFnAEIE_AERE3 = 0x0;
    HSIFnAEIE_AEWE3 = 0x0;
    HSIFnAEIE_AESE = 0x0;
    HSIFnAEIE_WERE0 = 0x0;
    HSIFnAEIE_WEWE0 = 0x0;
    HSIFnAEIE_WERE1 = 0x0;
    HSIFnAEIE_WEWE1 = 0x0;
    HSIFnAEIE_WERE2 = 0x0;
    HSIFnAEIE_WEWE2 = 0x0;
    HSIFnAEIE_WERE3 = 0x0;
    HSIFnAEIE_WEWE3 = 0x0;
    HSIFnAEIE_WESE0 = 0x0;
    HSIFnAEIE_WESE1 = 0x0;
    HSIFnMEST_PSE3 = 0x0;
    HSIFnMEST_PSE2 = 0x0;
    HSIFnMEST_PSE1 = 0x0;
    HSIFnMEST_PSE0 = 0x0;
    HSIFnMEST_CTE = 0x0;
    HSIFnMESC_PSEC3 = 0x0;
    HSIFnMESC_PSEC2 = 0x0;
    HSIFnMESC_PSEC1 = 0x0;
    HSIFnMESC_PSEC0 = 0x0;
    HSIFnMESC_CTEC = 0x0;
    HSIFnMEIE_PSEE3 = 0x0;
    HSIFnMEIE_PSEE2 = 0x0;
    HSIFnMEIE_PSEE1 = 0x0;
    HSIFnMEIE_PSEE0 = 0x0;
    HSIFnMEIE_CTEE = 0x0;
}

/// Update bit value to local value
/// @return None
void Chsif020_regif::UpdateLocalVal(cuint addr)
{
    if (addr == 0x0000) {
        HSIFnMMD_CHCT                 = (*HSIFnMMD )["CHCT"     ];
        return;
    }
    if (addr == 0x0008) {
        HSIFnMCT_WARE                 = (*HSIFnMCT )["WARE"     ];
        HSIFnMCT_WAWE                 = (*HSIFnMCT )["WAWE"     ];
        HSIFnMCT_WBRE                 = (*HSIFnMCT )["WBRE"     ];
        HSIFnMCT_WBWE                 = (*HSIFnMCT )["WBWE"     ];
        HSIFnMCT_WCRE                 = (*HSIFnMCT )["WCRE"     ];
        HSIFnMCT_WCWE                 = (*HSIFnMCT )["WCWE"     ];
        HSIFnMCT_WDRE                 = (*HSIFnMCT )["WDRE"     ];
        HSIFnMCT_WDWE                 = (*HSIFnMCT )["WDWE"     ];
        return;
    }
    if (addr == 0x0010) {
        HSIFnMST_AUTS0                = (*HSIFnMST )["AUTS0"    ];
        HSIFnMST_AUTS1                = (*HSIFnMST )["AUTS1"    ];
        return;
    }
    if (addr == 0x0018) {
        HSIFnMIST_RARS0               = (*HSIFnMIST)["RARS0"    ];
        HSIFnMIST_AKRS0               = (*HSIFnMIST)["AKRS0"    ];
        HSIFnMIST_TERS0               = (*HSIFnMIST)["TERS0"    ];
        HSIFnMIST_RARS1               = (*HSIFnMIST)["RARS1"    ];
        HSIFnMIST_AKRS1               = (*HSIFnMIST)["AKRS1"    ];
        HSIFnMIST_TERS1               = (*HSIFnMIST)["TERS1"    ];
        HSIFnMIST_RARS2               = (*HSIFnMIST)["RARS2"    ];
        HSIFnMIST_AKRS2               = (*HSIFnMIST)["AKRS2"    ];
        HSIFnMIST_TERS2               = (*HSIFnMIST)["TERS2"    ];
        HSIFnMIST_RARS3               = (*HSIFnMIST)["RARS3"    ];
        HSIFnMIST_AKRS3               = (*HSIFnMIST)["AKRS3"    ];
        HSIFnMIST_TERS3               = (*HSIFnMIST)["TERS3"    ];
        HSIFnMIST_STCS                = (*HSIFnMIST)["STCS"     ];
        HSIFnMIST_SRCS0               = (*HSIFnMIST)["SRCS0"    ];
        HSIFnMIST_SRCS1               = (*HSIFnMIST)["SRCS1"    ];
        HSIFnMIST_CERS0               = (*HSIFnMIST)["CERS0"    ];
        HSIFnMIST_CERS1               = (*HSIFnMIST)["CERS1"    ];
        HSIFnMIST_CERS2               = (*HSIFnMIST)["CERS2"    ];
        HSIFnMIST_CERS3               = (*HSIFnMIST)["CERS3"    ];
        HSIFnMIST_STES                = (*HSIFnMIST)["STES"     ];
        HSIFnMIST_SRES                = (*HSIFnMIST)["SRES"     ];
        HSIFnMIST_MESS                = (*HSIFnMIST)["MESS"     ];
        HSIFnMIST_AESS                = (*HSIFnMIST)["AESS"     ];
        HSIFnMIST_DBGS                = (*HSIFnMIST)["DBGS"     ];
        return;
    }
    if (addr == 0x0020) {
        HSIFnMRT_RCNT                 = (*HSIFnMRT )["RCNT"     ];
        HSIFnMRT_RSCL                 = (*HSIFnMRT )["RSCL"     ];
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(16*3)) && ((addr-0x0040)%16 == 0)) {
        uint i = (addr - 0x0040)/16;
        HSIFnMWmA_MWmA               [i] = (*(HSIFnMWmA[i]))["MWmA"     ];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(16*3)) && ((addr-0x0048)%16 == 0)) {
        uint i = (addr - 0x0048)/16;
        HSIFnMWmS_MWmS               [i] = (*(HSIFnMWmS[i]))["MWmS"     ];
        return;
    }
    if (addr == 0x0200) {
        HSIFnSTMD_STPS                = (*HSIFnSTMD)["STPS"     ];
        HSIFnSTMD_STNK                = (*HSIFnSTMD)["STNK"     ];
        HSIFnSTMD_STTH                = (*HSIFnSTMD)["STTH"     ];
        HSIFnSTMD_STBL                = (*HSIFnSTMD)["STBL"     ];
        HSIFnSTMD_STOS                = (*HSIFnSTMD)["STOS"     ];
        return;
    }
    if (addr == 0x0208) {
        HSIFnSTCT_STDE                = (*HSIFnSTCT)["STDE"     ];
        return;
    }
    if (addr == 0x0210) {
        HSIFnSTST_STC                 = (*HSIFnSTST)["STC"      ];
        HSIFnSTST_STE0                = (*HSIFnSTST)["STE0"     ];
        HSIFnSTST_STE1                = (*HSIFnSTST)["STE1"     ];
        HSIFnSTST_STE2                = (*HSIFnSTST)["STE2"     ];
        HSIFnSTST_STE3                = (*HSIFnSTST)["STE3"     ];
        HSIFnSTST_STE4                = (*HSIFnSTST)["STE4"     ];
        return;
    }
    if (addr == 0x0218) {
        HSIFnSTSC_STCC                = (*HSIFnSTSC)["STCC"     ];
        HSIFnSTSC_STEC0               = (*HSIFnSTSC)["STEC0"    ];
        HSIFnSTSC_STEC1               = (*HSIFnSTSC)["STEC1"    ];
        HSIFnSTSC_STEC2               = (*HSIFnSTSC)["STEC2"    ];
        HSIFnSTSC_STEC3               = (*HSIFnSTSC)["STEC3"    ];
        HSIFnSTSC_STEC4               = (*HSIFnSTSC)["STEC4"    ];
        return;
    }
    if (addr == 0x0220) {
        HSIFnSTIE_STCE                = (*HSIFnSTIE)["STCE"     ];
        HSIFnSTIE_STEE0               = (*HSIFnSTIE)["STEE0"    ];
        HSIFnSTIE_STEE1               = (*HSIFnSTIE)["STEE1"    ];
        HSIFnSTIE_STEE2               = (*HSIFnSTIE)["STEE2"    ];
        HSIFnSTIE_STEE3               = (*HSIFnSTIE)["STEE3"    ];
        HSIFnSTIE_STEE4               = (*HSIFnSTIE)["STEE4"    ];
        return;
    }
    if (addr == 0x0228) {
        HSIFnSTSA_STSA                = (*HSIFnSTSA)["STSA"     ];
        return;
    }
    if (addr == 0x0230) {
        HSIFnSTBC_STBC                = (*HSIFnSTBC)["STBC"     ];
        return;
    }
    if (addr == 0x0280) {
        HSIFnSRMD_SRPS                = (*HSIFnSRMD)["SRPS"     ];
        HSIFnSRMD_SRMC                = (*HSIFnSRMD)["SRMC"     ];
        HSIFnSRMD_SROS                = (*HSIFnSRMD)["SROS"     ];
        return;
    }
    if (addr == 0x0288) {
        HSIFnSRCT_SRDE                = (*HSIFnSRCT)["SRDE"     ];
        return;
    }
    if (addr == 0x0290) {
        HSIFnSRST_SRC0                = (*HSIFnSRST)["SRC0"     ];
        HSIFnSRST_SRC1                = (*HSIFnSRST)["SRC1"     ];
        HSIFnSRST_SRTA                = (*HSIFnSRST)["SRTA"     ];
        HSIFnSRST_SRE0                = (*HSIFnSRST)["SRE0"     ];
        HSIFnSRST_SRE1                = (*HSIFnSRST)["SRE1"     ];
        HSIFnSRST_SRE2                = (*HSIFnSRST)["SRE2"     ];
        HSIFnSRST_SRA                 = (*HSIFnSRST)["SRA"      ];
        return;
    }
    if (addr == 0x0298) {
        HSIFnSRSC_SREC0               = (*HSIFnSRSC)["SREC0"    ];
        HSIFnSRSC_SREC1               = (*HSIFnSRSC)["SREC1"    ];
        HSIFnSRSC_SREC2               = (*HSIFnSRSC)["SREC2"    ];
        HSIFnSRSC_SRAC                = (*HSIFnSRSC)["SRAC"     ];
        return;
    }
    if (addr == 0x02A0) {
        HSIFnSRIE_SRCE0               = (*HSIFnSRIE)["SRCE0"    ];
        HSIFnSRIE_SRCE1               = (*HSIFnSRIE)["SRCE1"    ];
        HSIFnSRIE_SREE0               = (*HSIFnSRIE)["SREE0"    ];
        HSIFnSRIE_SREE1               = (*HSIFnSRIE)["SREE1"    ];
        HSIFnSRIE_SREE2               = (*HSIFnSRIE)["SREE2"    ];
        HSIFnSRIE_SRAE                = (*HSIFnSRIE)["SRAE"     ];
        return;
    }
    if (addr == 0x02A8) {
        HSIFnSRDA_SRDA                = (*HSIFnSRDA)["SRDA"     ];
        return;
    }
    if (addr == 0x02B0) {
        HSIFnSRDS_SRDS                = (*HSIFnSRDS)["SRDS"     ];
        return;
    }
    if (addr == 0x02B8) {
        HSIFnSRBC_SRBC                = (*HSIFnSRBC)["SRBC"     ];
        return;
    }
    if (addr == 0x02C0) {
        HSIFnSRWP_SRWT                = (*HSIFnSRWP)["SRWT"     ];
        HSIFnSRWP_SRWP                = (*HSIFnSRWP)["SRWP"     ];
        return;
    }
    if (addr == 0x02C8) {
        HSIFnSRRP_SRRT                = (*HSIFnSRRP)["SRRT"     ];
        HSIFnSRRP_SRRP                = (*HSIFnSRRP)["SRRP"     ];
        return;
    }
    if ((0x0300 <= addr) && (addr <= (0x0300)+(8*7)) && ((addr-0x0300)%8 == 0)) {
        uint i = (addr - 0x0300)/8;
        HSIFnAID_AID                 [i] = (*(HSIFnAID [i]))["AID"      ];
        return;
    }
    if ((0x0340 <= addr) && (addr <= (0x0340)+(8*3)) && ((addr-0x0340)%8 == 0)) {
        uint i = (addr - 0x0340)/8;
        HSIFnAAD_AAD                 [i] = (*(HSIFnAAD [i]))["AAD"      ];
        return;
    }
    if ((0x0360 <= addr) && (addr <= (0x0360)+(8*3)) && ((addr-0x0360)%8 == 0)) {
        uint i = (addr - 0x0360)/8;
        HSIFnARD_ARD                 [i] = (*(HSIFnARD [i]))["ARD"      ];
        return;
    }
    if (addr == 0x03E0) {
        HSIFnAEST_AEE0                = (*HSIFnAEST)["AEE0"     ];
        HSIFnAEST_AEI0                = (*HSIFnAEST)["AEI0"     ];
        HSIFnAEST_AER0                = (*HSIFnAEST)["AER0"     ];
        HSIFnAEST_AEW0                = (*HSIFnAEST)["AEW0"     ];
        HSIFnAEST_AEE1                = (*HSIFnAEST)["AEE1"     ];
        HSIFnAEST_AEI1                = (*HSIFnAEST)["AEI1"     ];
        HSIFnAEST_AER1                = (*HSIFnAEST)["AER1"     ];
        HSIFnAEST_AEW1                = (*HSIFnAEST)["AEW1"     ];
        HSIFnAEST_AEE2                = (*HSIFnAEST)["AEE2"     ];
        HSIFnAEST_AEI2                = (*HSIFnAEST)["AEI2"     ];
        HSIFnAEST_AER2                = (*HSIFnAEST)["AER2"     ];
        HSIFnAEST_AEW2                = (*HSIFnAEST)["AEW2"     ];
        HSIFnAEST_AEE3                = (*HSIFnAEST)["AEE3"     ];
        HSIFnAEST_AEI3                = (*HSIFnAEST)["AEI3"     ];
        HSIFnAEST_AER3                = (*HSIFnAEST)["AER3"     ];
        HSIFnAEST_AEW3                = (*HSIFnAEST)["AEW3"     ];
        HSIFnAEST_AES                 = (*HSIFnAEST)["AES"      ];
        HSIFnAEST_WER0                = (*HSIFnAEST)["WER0"     ];
        HSIFnAEST_WEW0                = (*HSIFnAEST)["WEW0"     ];
        HSIFnAEST_WER1                = (*HSIFnAEST)["WER1"     ];
        HSIFnAEST_WEW1                = (*HSIFnAEST)["WEW1"     ];
        HSIFnAEST_WER2                = (*HSIFnAEST)["WER2"     ];
        HSIFnAEST_WEW2                = (*HSIFnAEST)["WEW2"     ];
        HSIFnAEST_WER3                = (*HSIFnAEST)["WER3"     ];
        HSIFnAEST_WEW3                = (*HSIFnAEST)["WEW3"     ];
        HSIFnAEST_WES0                = (*HSIFnAEST)["WES0"     ];
        HSIFnAEST_WES1                = (*HSIFnAEST)["WES1"     ];
        return;
    }
    if (addr == 0x03E8) {
        HSIFnAESC_AEEC0               = (*HSIFnAESC)["AEEC0"    ];
        HSIFnAESC_AEIC0               = (*HSIFnAESC)["AEIC0"    ];
        HSIFnAESC_AERC0               = (*HSIFnAESC)["AERC0"    ];
        HSIFnAESC_AEWC0               = (*HSIFnAESC)["AEWC0"    ];
        HSIFnAESC_AEEC1               = (*HSIFnAESC)["AEEC1"    ];
        HSIFnAESC_AEIC1               = (*HSIFnAESC)["AEIC1"    ];
        HSIFnAESC_AERC1               = (*HSIFnAESC)["AERC1"    ];
        HSIFnAESC_AEWC1               = (*HSIFnAESC)["AEWC1"    ];
        HSIFnAESC_AEEC2               = (*HSIFnAESC)["AEEC2"    ];
        HSIFnAESC_AEIC2               = (*HSIFnAESC)["AEIC2"    ];
        HSIFnAESC_AERC2               = (*HSIFnAESC)["AERC2"    ];
        HSIFnAESC_AEWC2               = (*HSIFnAESC)["AEWC2"    ];
        HSIFnAESC_AEEC3               = (*HSIFnAESC)["AEEC3"    ];
        HSIFnAESC_AEIC3               = (*HSIFnAESC)["AEIC3"    ];
        HSIFnAESC_AERC3               = (*HSIFnAESC)["AERC3"    ];
        HSIFnAESC_AEWC3               = (*HSIFnAESC)["AEWC3"    ];
        HSIFnAESC_AESC                = (*HSIFnAESC)["AESC"     ];
        HSIFnAESC_WERC0               = (*HSIFnAESC)["WERC0"    ];
        HSIFnAESC_WEWC0               = (*HSIFnAESC)["WEWC0"    ];
        HSIFnAESC_WERC1               = (*HSIFnAESC)["WERC1"    ];
        HSIFnAESC_WEWC1               = (*HSIFnAESC)["WEWC1"    ];
        HSIFnAESC_WERC2               = (*HSIFnAESC)["WERC2"    ];
        HSIFnAESC_WEWC2               = (*HSIFnAESC)["WEWC2"    ];
        HSIFnAESC_WERC3               = (*HSIFnAESC)["WERC3"    ];
        HSIFnAESC_WEWC3               = (*HSIFnAESC)["WEWC3"    ];
        HSIFnAESC_WESC0               = (*HSIFnAESC)["WESC0"    ];
        HSIFnAESC_WESC1               = (*HSIFnAESC)["WESC1"    ];
        return;
    }
    if (addr == 0x03F0) {
        HSIFnAEIE_AEEE0               = (*HSIFnAEIE)["AEEE0"    ];
        HSIFnAEIE_AEIE0               = (*HSIFnAEIE)["AEIE0"    ];
        HSIFnAEIE_AERE0               = (*HSIFnAEIE)["AERE0"    ];
        HSIFnAEIE_AEWE0               = (*HSIFnAEIE)["AEWE0"    ];
        HSIFnAEIE_AEEE1               = (*HSIFnAEIE)["AEEE1"    ];
        HSIFnAEIE_AEIE1               = (*HSIFnAEIE)["AEIE1"    ];
        HSIFnAEIE_AERE1               = (*HSIFnAEIE)["AERE1"    ];
        HSIFnAEIE_AEWE1               = (*HSIFnAEIE)["AEWE1"    ];
        HSIFnAEIE_AEEE2               = (*HSIFnAEIE)["AEEE2"    ];
        HSIFnAEIE_AEIE2               = (*HSIFnAEIE)["AEIE2"    ];
        HSIFnAEIE_AERE2               = (*HSIFnAEIE)["AERE2"    ];
        HSIFnAEIE_AEWE2               = (*HSIFnAEIE)["AEWE2"    ];
        HSIFnAEIE_AEEE3               = (*HSIFnAEIE)["AEEE3"    ];
        HSIFnAEIE_AEIE3               = (*HSIFnAEIE)["AEIE3"    ];
        HSIFnAEIE_AERE3               = (*HSIFnAEIE)["AERE3"    ];
        HSIFnAEIE_AEWE3               = (*HSIFnAEIE)["AEWE3"    ];
        HSIFnAEIE_AESE                = (*HSIFnAEIE)["AESE"     ];
        HSIFnAEIE_WERE0               = (*HSIFnAEIE)["WERE0"    ];
        HSIFnAEIE_WEWE0               = (*HSIFnAEIE)["WEWE0"    ];
        HSIFnAEIE_WERE1               = (*HSIFnAEIE)["WERE1"    ];
        HSIFnAEIE_WEWE1               = (*HSIFnAEIE)["WEWE1"    ];
        HSIFnAEIE_WERE2               = (*HSIFnAEIE)["WERE2"    ];
        HSIFnAEIE_WEWE2               = (*HSIFnAEIE)["WEWE2"    ];
        HSIFnAEIE_WERE3               = (*HSIFnAEIE)["WERE3"    ];
        HSIFnAEIE_WEWE3               = (*HSIFnAEIE)["WEWE3"    ];
        HSIFnAEIE_WESE0               = (*HSIFnAEIE)["WESE0"    ];
        HSIFnAEIE_WESE1               = (*HSIFnAEIE)["WESE1"    ];
        return;
    }
    if (addr == 0x00E0) {
        HSIFnMEST_PSE3                = (*HSIFnMEST)["PSE3"     ];
        HSIFnMEST_PSE2                = (*HSIFnMEST)["PSE2"     ];
        HSIFnMEST_PSE1                = (*HSIFnMEST)["PSE1"     ];
        HSIFnMEST_PSE0                = (*HSIFnMEST)["PSE0"     ];
        HSIFnMEST_CTE                 = (*HSIFnMEST)["CTE"      ];
        return;
    }
    if (addr == 0x00E8) {
        HSIFnMESC_PSEC3               = (*HSIFnMESC)["PSEC3"    ];
        HSIFnMESC_PSEC2               = (*HSIFnMESC)["PSEC2"    ];
        HSIFnMESC_PSEC1               = (*HSIFnMESC)["PSEC1"    ];
        HSIFnMESC_PSEC0               = (*HSIFnMESC)["PSEC0"    ];
        HSIFnMESC_CTEC                = (*HSIFnMESC)["CTEC"     ];
        return;
    }
    if (addr == 0x00F0) {
        HSIFnMEIE_PSEE3               = (*HSIFnMEIE)["PSEE3"    ];
        HSIFnMEIE_PSEE2               = (*HSIFnMEIE)["PSEE2"    ];
        HSIFnMEIE_PSEE1               = (*HSIFnMEIE)["PSEE1"    ];
        HSIFnMEIE_PSEE0               = (*HSIFnMEIE)["PSEE0"    ];
        HSIFnMEIE_CTEE                = (*HSIFnMEIE)["CTEE"     ];
        return;
    }
}

/// Update local value to bit value
/// @return None
void Chsif020_regif::UpdateRegVal(cuint addr)
{
    if (addr == 0x0000) {
        (*HSIFnMMD )["CHCT"     ] = HSIFnMMD_CHCT;
        return;
    }
    if (addr == 0x0008) {
        (*HSIFnMCT )["WARE"     ] = HSIFnMCT_WARE;
        (*HSIFnMCT )["WAWE"     ] = HSIFnMCT_WAWE;
        (*HSIFnMCT )["WBRE"     ] = HSIFnMCT_WBRE;
        (*HSIFnMCT )["WBWE"     ] = HSIFnMCT_WBWE;
        (*HSIFnMCT )["WCRE"     ] = HSIFnMCT_WCRE;
        (*HSIFnMCT )["WCWE"     ] = HSIFnMCT_WCWE;
        (*HSIFnMCT )["WDRE"     ] = HSIFnMCT_WDRE;
        (*HSIFnMCT )["WDWE"     ] = HSIFnMCT_WDWE;
        return;
    }
    if (addr == 0x0010) {
        (*HSIFnMST )["AUTS0"    ] = HSIFnMST_AUTS0;
        (*HSIFnMST )["AUTS1"    ] = HSIFnMST_AUTS1;
        return;
    }
    if (addr == 0x0018) {
        (*HSIFnMIST)["RARS0"    ] = HSIFnMIST_RARS0;
        (*HSIFnMIST)["AKRS0"    ] = HSIFnMIST_AKRS0;
        (*HSIFnMIST)["TERS0"    ] = HSIFnMIST_TERS0;
        (*HSIFnMIST)["RARS1"    ] = HSIFnMIST_RARS1;
        (*HSIFnMIST)["AKRS1"    ] = HSIFnMIST_AKRS1;
        (*HSIFnMIST)["TERS1"    ] = HSIFnMIST_TERS1;
        (*HSIFnMIST)["RARS2"    ] = HSIFnMIST_RARS2;
        (*HSIFnMIST)["AKRS2"    ] = HSIFnMIST_AKRS2;
        (*HSIFnMIST)["TERS2"    ] = HSIFnMIST_TERS2;
        (*HSIFnMIST)["RARS3"    ] = HSIFnMIST_RARS3;
        (*HSIFnMIST)["AKRS3"    ] = HSIFnMIST_AKRS3;
        (*HSIFnMIST)["TERS3"    ] = HSIFnMIST_TERS3;
        (*HSIFnMIST)["STCS"     ] = HSIFnMIST_STCS;
        (*HSIFnMIST)["SRCS0"    ] = HSIFnMIST_SRCS0;
        (*HSIFnMIST)["SRCS1"    ] = HSIFnMIST_SRCS1;
        (*HSIFnMIST)["CERS0"    ] = HSIFnMIST_CERS0;
        (*HSIFnMIST)["CERS1"    ] = HSIFnMIST_CERS1;
        (*HSIFnMIST)["CERS2"    ] = HSIFnMIST_CERS2;
        (*HSIFnMIST)["CERS3"    ] = HSIFnMIST_CERS3;
        (*HSIFnMIST)["STES"     ] = HSIFnMIST_STES;
        (*HSIFnMIST)["SRES"     ] = HSIFnMIST_SRES;
        (*HSIFnMIST)["MESS"     ] = HSIFnMIST_MESS;
        (*HSIFnMIST)["AESS"     ] = HSIFnMIST_AESS;
        (*HSIFnMIST)["DBGS"     ] = HSIFnMIST_DBGS;
        return;
    }
    if (addr == 0x0020) {
        (*HSIFnMRT )["RCNT"     ] = HSIFnMRT_RCNT;
        (*HSIFnMRT )["RSCL"     ] = HSIFnMRT_RSCL;
        return;
    }
    if ((0x0040 <= addr) && (addr <= (0x0040)+(16*3)) && ((addr-0x0040)%16 == 0)) {
        uint i = (addr - 0x0040)/16;
        (*(HSIFnMWmA[i]))["MWmA"     ] = HSIFnMWmA_MWmA[i];
        return;
    }
    if ((0x0048 <= addr) && (addr <= (0x0048)+(16*3)) && ((addr-0x0048)%16 == 0)) {
        uint i = (addr - 0x0048)/16;
        (*(HSIFnMWmS[i]))["MWmS"     ] = HSIFnMWmS_MWmS[i];
        return;
    }
    if (addr == 0x0200) {
        (*HSIFnSTMD)["STPS"     ] = HSIFnSTMD_STPS;
        (*HSIFnSTMD)["STNK"     ] = HSIFnSTMD_STNK;
        (*HSIFnSTMD)["STTH"     ] = HSIFnSTMD_STTH;
        (*HSIFnSTMD)["STBL"     ] = HSIFnSTMD_STBL;
        (*HSIFnSTMD)["STOS"     ] = HSIFnSTMD_STOS;
        return;
    }
    if (addr == 0x0208) {
        (*HSIFnSTCT)["STDE"     ] = HSIFnSTCT_STDE;
        return;
    }
    if (addr == 0x0210) {
        (*HSIFnSTST)["STC"      ] = HSIFnSTST_STC;
        (*HSIFnSTST)["STE0"     ] = HSIFnSTST_STE0;
        (*HSIFnSTST)["STE1"     ] = HSIFnSTST_STE1;
        (*HSIFnSTST)["STE2"     ] = HSIFnSTST_STE2;
        (*HSIFnSTST)["STE3"     ] = HSIFnSTST_STE3;
        (*HSIFnSTST)["STE4"     ] = HSIFnSTST_STE4;
        return;
    }
    if (addr == 0x0218) {
        (*HSIFnSTSC)["STCC"     ] = HSIFnSTSC_STCC;
        (*HSIFnSTSC)["STEC0"    ] = HSIFnSTSC_STEC0;
        (*HSIFnSTSC)["STEC1"    ] = HSIFnSTSC_STEC1;
        (*HSIFnSTSC)["STEC2"    ] = HSIFnSTSC_STEC2;
        (*HSIFnSTSC)["STEC3"    ] = HSIFnSTSC_STEC3;
        (*HSIFnSTSC)["STEC4"    ] = HSIFnSTSC_STEC4;
        return;
    }
    if (addr == 0x0220) {
        (*HSIFnSTIE)["STCE"     ] = HSIFnSTIE_STCE;
        (*HSIFnSTIE)["STEE0"    ] = HSIFnSTIE_STEE0;
        (*HSIFnSTIE)["STEE1"    ] = HSIFnSTIE_STEE1;
        (*HSIFnSTIE)["STEE2"    ] = HSIFnSTIE_STEE2;
        (*HSIFnSTIE)["STEE3"    ] = HSIFnSTIE_STEE3;
        (*HSIFnSTIE)["STEE4"    ] = HSIFnSTIE_STEE4;
        return;
    }
    if (addr == 0x0228) {
        (*HSIFnSTSA)["STSA"     ] = HSIFnSTSA_STSA;
        return;
    }
    if (addr == 0x0230) {
        (*HSIFnSTBC)["STBC"     ] = HSIFnSTBC_STBC;
        return;
    }
    if (addr == 0x0280) {
        (*HSIFnSRMD)["SRPS"     ] = HSIFnSRMD_SRPS;
        (*HSIFnSRMD)["SRMC"     ] = HSIFnSRMD_SRMC;
        (*HSIFnSRMD)["SROS"     ] = HSIFnSRMD_SROS;
        return;
    }
    if (addr == 0x0288) {
        (*HSIFnSRCT)["SRDE"     ] = HSIFnSRCT_SRDE;
        return;
    }
    if (addr == 0x0290) {
        (*HSIFnSRST)["SRC0"     ] = HSIFnSRST_SRC0;
        (*HSIFnSRST)["SRC1"     ] = HSIFnSRST_SRC1;
        (*HSIFnSRST)["SRTA"     ] = HSIFnSRST_SRTA;
        (*HSIFnSRST)["SRE0"     ] = HSIFnSRST_SRE0;
        (*HSIFnSRST)["SRE1"     ] = HSIFnSRST_SRE1;
        (*HSIFnSRST)["SRE2"     ] = HSIFnSRST_SRE2;
        (*HSIFnSRST)["SRA"      ] = HSIFnSRST_SRA;
        return;
    }
    if (addr == 0x0298) {
        (*HSIFnSRSC)["SREC0"    ] = HSIFnSRSC_SREC0;
        (*HSIFnSRSC)["SREC1"    ] = HSIFnSRSC_SREC1;
        (*HSIFnSRSC)["SREC2"    ] = HSIFnSRSC_SREC2;
        (*HSIFnSRSC)["SRAC"     ] = HSIFnSRSC_SRAC;
        return;
    }
    if (addr == 0x02A0) {
        (*HSIFnSRIE)["SRCE0"    ] = HSIFnSRIE_SRCE0;
        (*HSIFnSRIE)["SRCE1"    ] = HSIFnSRIE_SRCE1;
        (*HSIFnSRIE)["SREE0"    ] = HSIFnSRIE_SREE0;
        (*HSIFnSRIE)["SREE1"    ] = HSIFnSRIE_SREE1;
        (*HSIFnSRIE)["SREE2"    ] = HSIFnSRIE_SREE2;
        (*HSIFnSRIE)["SRAE"     ] = HSIFnSRIE_SRAE;
        return;
    }
    if (addr == 0x02A8) {
        (*HSIFnSRDA)["SRDA"     ] = HSIFnSRDA_SRDA;
        return;
    }
    if (addr == 0x02B0) {
        (*HSIFnSRDS)["SRDS"     ] = HSIFnSRDS_SRDS;
        return;
    }
    if (addr == 0x02B8) {
        (*HSIFnSRBC)["SRBC"     ] = HSIFnSRBC_SRBC;
        return;
    }
    if (addr == 0x02C0) {
        (*HSIFnSRWP)["SRWT"     ] = HSIFnSRWP_SRWT;
        (*HSIFnSRWP)["SRWP"     ] = HSIFnSRWP_SRWP;
        return;
    }
    if (addr == 0x02C8) {
        (*HSIFnSRRP)["SRRT"     ] = HSIFnSRRP_SRRT;
        (*HSIFnSRRP)["SRRP"     ] = HSIFnSRRP_SRRP;
        return;
    }
    if ((0x0300 <= addr) && (addr <= (0x0300)+(8*7)) && ((addr-0x0300)%8 == 0)) {
        uint i = (addr - 0x0300)/8;
        (*(HSIFnAID [i]))["AID"      ] = HSIFnAID_AID[i];
        return;
    }
    if ((0x0340 <= addr) && (addr <= (0x0340)+(8*3)) && ((addr-0x0340)%8 == 0)) {
        uint i = (addr - 0x0340)/8;
        (*(HSIFnAAD [i]))["AAD"      ] = HSIFnAAD_AAD[i];
        return;
    }
    if ((0x0360 <= addr) && (addr <= (0x0360)+(8*3)) && ((addr-0x0360)%8 == 0)) {
        uint i = (addr - 0x0360)/8;
        (*(HSIFnARD [i]))["ARD"      ] = HSIFnARD_ARD[i];
        return;
    }
    if (addr == 0x03E0) {
        (*HSIFnAEST)["AEE0"     ] = HSIFnAEST_AEE0;
        (*HSIFnAEST)["AEI0"     ] = HSIFnAEST_AEI0;
        (*HSIFnAEST)["AER0"     ] = HSIFnAEST_AER0;
        (*HSIFnAEST)["AEW0"     ] = HSIFnAEST_AEW0;
        (*HSIFnAEST)["AEE1"     ] = HSIFnAEST_AEE1;
        (*HSIFnAEST)["AEI1"     ] = HSIFnAEST_AEI1;
        (*HSIFnAEST)["AER1"     ] = HSIFnAEST_AER1;
        (*HSIFnAEST)["AEW1"     ] = HSIFnAEST_AEW1;
        (*HSIFnAEST)["AEE2"     ] = HSIFnAEST_AEE2;
        (*HSIFnAEST)["AEI2"     ] = HSIFnAEST_AEI2;
        (*HSIFnAEST)["AER2"     ] = HSIFnAEST_AER2;
        (*HSIFnAEST)["AEW2"     ] = HSIFnAEST_AEW2;
        (*HSIFnAEST)["AEE3"     ] = HSIFnAEST_AEE3;
        (*HSIFnAEST)["AEI3"     ] = HSIFnAEST_AEI3;
        (*HSIFnAEST)["AER3"     ] = HSIFnAEST_AER3;
        (*HSIFnAEST)["AEW3"     ] = HSIFnAEST_AEW3;
        (*HSIFnAEST)["AES"      ] = HSIFnAEST_AES;
        (*HSIFnAEST)["WER0"     ] = HSIFnAEST_WER0;
        (*HSIFnAEST)["WEW0"     ] = HSIFnAEST_WEW0;
        (*HSIFnAEST)["WER1"     ] = HSIFnAEST_WER1;
        (*HSIFnAEST)["WEW1"     ] = HSIFnAEST_WEW1;
        (*HSIFnAEST)["WER2"     ] = HSIFnAEST_WER2;
        (*HSIFnAEST)["WEW2"     ] = HSIFnAEST_WEW2;
        (*HSIFnAEST)["WER3"     ] = HSIFnAEST_WER3;
        (*HSIFnAEST)["WEW3"     ] = HSIFnAEST_WEW3;
        (*HSIFnAEST)["WES0"     ] = HSIFnAEST_WES0;
        (*HSIFnAEST)["WES1"     ] = HSIFnAEST_WES1;
        return;
    }
    if (addr == 0x03E8) {
        (*HSIFnAESC)["AEEC0"    ] = HSIFnAESC_AEEC0;
        (*HSIFnAESC)["AEIC0"    ] = HSIFnAESC_AEIC0;
        (*HSIFnAESC)["AERC0"    ] = HSIFnAESC_AERC0;
        (*HSIFnAESC)["AEWC0"    ] = HSIFnAESC_AEWC0;
        (*HSIFnAESC)["AEEC1"    ] = HSIFnAESC_AEEC1;
        (*HSIFnAESC)["AEIC1"    ] = HSIFnAESC_AEIC1;
        (*HSIFnAESC)["AERC1"    ] = HSIFnAESC_AERC1;
        (*HSIFnAESC)["AEWC1"    ] = HSIFnAESC_AEWC1;
        (*HSIFnAESC)["AEEC2"    ] = HSIFnAESC_AEEC2;
        (*HSIFnAESC)["AEIC2"    ] = HSIFnAESC_AEIC2;
        (*HSIFnAESC)["AERC2"    ] = HSIFnAESC_AERC2;
        (*HSIFnAESC)["AEWC2"    ] = HSIFnAESC_AEWC2;
        (*HSIFnAESC)["AEEC3"    ] = HSIFnAESC_AEEC3;
        (*HSIFnAESC)["AEIC3"    ] = HSIFnAESC_AEIC3;
        (*HSIFnAESC)["AERC3"    ] = HSIFnAESC_AERC3;
        (*HSIFnAESC)["AEWC3"    ] = HSIFnAESC_AEWC3;
        (*HSIFnAESC)["AESC"     ] = HSIFnAESC_AESC;
        (*HSIFnAESC)["WERC0"    ] = HSIFnAESC_WERC0;
        (*HSIFnAESC)["WEWC0"    ] = HSIFnAESC_WEWC0;
        (*HSIFnAESC)["WERC1"    ] = HSIFnAESC_WERC1;
        (*HSIFnAESC)["WEWC1"    ] = HSIFnAESC_WEWC1;
        (*HSIFnAESC)["WERC2"    ] = HSIFnAESC_WERC2;
        (*HSIFnAESC)["WEWC2"    ] = HSIFnAESC_WEWC2;
        (*HSIFnAESC)["WERC3"    ] = HSIFnAESC_WERC3;
        (*HSIFnAESC)["WEWC3"    ] = HSIFnAESC_WEWC3;
        (*HSIFnAESC)["WESC0"    ] = HSIFnAESC_WESC0;
        (*HSIFnAESC)["WESC1"    ] = HSIFnAESC_WESC1;
        return;
    }
    if (addr == 0x03F0) {
        (*HSIFnAEIE)["AEEE0"    ] = HSIFnAEIE_AEEE0;
        (*HSIFnAEIE)["AEIE0"    ] = HSIFnAEIE_AEIE0;
        (*HSIFnAEIE)["AERE0"    ] = HSIFnAEIE_AERE0;
        (*HSIFnAEIE)["AEWE0"    ] = HSIFnAEIE_AEWE0;
        (*HSIFnAEIE)["AEEE1"    ] = HSIFnAEIE_AEEE1;
        (*HSIFnAEIE)["AEIE1"    ] = HSIFnAEIE_AEIE1;
        (*HSIFnAEIE)["AERE1"    ] = HSIFnAEIE_AERE1;
        (*HSIFnAEIE)["AEWE1"    ] = HSIFnAEIE_AEWE1;
        (*HSIFnAEIE)["AEEE2"    ] = HSIFnAEIE_AEEE2;
        (*HSIFnAEIE)["AEIE2"    ] = HSIFnAEIE_AEIE2;
        (*HSIFnAEIE)["AERE2"    ] = HSIFnAEIE_AERE2;
        (*HSIFnAEIE)["AEWE2"    ] = HSIFnAEIE_AEWE2;
        (*HSIFnAEIE)["AEEE3"    ] = HSIFnAEIE_AEEE3;
        (*HSIFnAEIE)["AEIE3"    ] = HSIFnAEIE_AEIE3;
        (*HSIFnAEIE)["AERE3"    ] = HSIFnAEIE_AERE3;
        (*HSIFnAEIE)["AEWE3"    ] = HSIFnAEIE_AEWE3;
        (*HSIFnAEIE)["AESE"     ] = HSIFnAEIE_AESE;
        (*HSIFnAEIE)["WERE0"    ] = HSIFnAEIE_WERE0;
        (*HSIFnAEIE)["WEWE0"    ] = HSIFnAEIE_WEWE0;
        (*HSIFnAEIE)["WERE1"    ] = HSIFnAEIE_WERE1;
        (*HSIFnAEIE)["WEWE1"    ] = HSIFnAEIE_WEWE1;
        (*HSIFnAEIE)["WERE2"    ] = HSIFnAEIE_WERE2;
        (*HSIFnAEIE)["WEWE2"    ] = HSIFnAEIE_WEWE2;
        (*HSIFnAEIE)["WERE3"    ] = HSIFnAEIE_WERE3;
        (*HSIFnAEIE)["WEWE3"    ] = HSIFnAEIE_WEWE3;
        (*HSIFnAEIE)["WESE0"    ] = HSIFnAEIE_WESE0;
        (*HSIFnAEIE)["WESE1"    ] = HSIFnAEIE_WESE1;
        return;
    }
    if (addr == 0x00E0) {
        (*HSIFnMEST)["PSE3"     ] = HSIFnMEST_PSE3;
        (*HSIFnMEST)["PSE2"     ] = HSIFnMEST_PSE2;
        (*HSIFnMEST)["PSE1"     ] = HSIFnMEST_PSE1;
        (*HSIFnMEST)["PSE0"     ] = HSIFnMEST_PSE0;
        (*HSIFnMEST)["CTE"      ] = HSIFnMEST_CTE;
        return;
    }
    if (addr == 0x00E8) {
        (*HSIFnMESC)["PSEC3"    ] = HSIFnMESC_PSEC3;
        (*HSIFnMESC)["PSEC2"    ] = HSIFnMESC_PSEC2;
        (*HSIFnMESC)["PSEC1"    ] = HSIFnMESC_PSEC1;
        (*HSIFnMESC)["PSEC0"    ] = HSIFnMESC_PSEC0;
        (*HSIFnMESC)["CTEC"     ] = HSIFnMESC_CTEC;
        return;
    }
    if (addr == 0x00F0) {
        (*HSIFnMEIE)["PSEE3"    ] = HSIFnMEIE_PSEE3;
        (*HSIFnMEIE)["PSEE2"    ] = HSIFnMEIE_PSEE2;
        (*HSIFnMEIE)["PSEE1"    ] = HSIFnMEIE_PSEE1;
        (*HSIFnMEIE)["PSEE0"    ] = HSIFnMEIE_PSEE0;
        (*HSIFnMEIE)["CTEE"     ] = HSIFnMEIE_CTEE;
        return;
    }
}

/// convert string to vector
/// @return vector
std::vector<std::string> Chsif020_regif::Str2Vec(std::string str, const char sep)
{
    std::vector<std::string> buf;
    std::string::size_type index = 0;
    for (uint i=0 ; i<str.size() ; i++) {
        if (str[i] == sep) {
            buf.push_back(str.substr(index, i-index));
            index = i+1;
        }
    }
    buf.push_back(str.substr(index));
    return buf;
}

/// Align nuber to hexadecimal format
/// @return aligned number
std::string Chsif020_regif::Num2HexStr(cuint num, cuint num_length, bool space_strip)
{
    std::ostringstream str_tmp;
    #ifdef MSG_WO_WR_DATA
    str_tmp<<"0x"<<std::hex<<std::uppercase<<std::right<<num;
    str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";
    #else
    uint total_length = (num_length + 3)/4; // Calculate number of hexadecimal number
    str_tmp<<"0x"<<std::setfill('0')<<std::setw(total_length)<<std::hex<<std::uppercase<<std::right<<num;
    if (!space_strip) {
        str_tmp<<std::setfill(' ')<<std::setw(10-str_tmp.str().length())<<"";   
    }
    #endif
    return str_tmp.str();
}

/// Dump register access information
/// @return none
void Chsif020_regif::DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length)
{
    if(mDumpRegisterRW == true) {
        std::string reg_name = RegName;
        std::ostringstream str_tmp;
        if (BitName != "") {
            reg_name += ":" + BitName;
        }
        str_tmp<<"REG ["<<std::setw(15)<<std::left<<reg_name<<"] ";
        str_tmp<<operation;
        str_tmp<<" Size= "<<size;
        str_tmp<<" Addr= "<<Num2HexStr(addr,12, false);
        if (operation == "R") {
            str_tmp<<" Data= "<<Num2HexStr(data    , reg_length, true);
        } else {
            #ifdef MSG_WO_WR_DATA
            str_tmp<<" Data= "<<Num2HexStr(pre_data, reg_length, false);
            #else
            str_tmp<<" Data= "<<Num2HexStr(wr_data , reg_length, false);
            str_tmp<<" : "    <<Num2HexStr(pre_data, reg_length, false);
            #endif
            str_tmp<<" => "   <<Num2HexStr(data    , reg_length, true);
        }
        re_printf("DumpRegMsg", "%s\n", str_tmp.str().c_str());
    }
}

/// find register pointer based on accessed address
/// @return accessed register pointer
int Chsif020_regif::get_reg_index(cuint access_addr)
{
    if (mRegMap[access_addr] != (1<<12)) {
        return mRegMap[access_addr];
    } else {
        return -1;
    }
}

/// find first register pointer
/// @return first register pointer
vpcl::re_register *Chsif020_regif::first_reg_object()
{
    mCurReg = mRegList;
    return mCurReg->my_p;
}

/// find next register pointer
/// @return next register pointer
vpcl::re_register *Chsif020_regif::next_reg_object()
{
    if (mCurReg != NULL) {
        mCurReg = mCurReg->prev;
        if (mCurReg != NULL) {
            return mCurReg->my_p;
        }
    }
    return NULL;
}

/// write callback function of CoWare
/// @return none
void Chsif020_regif::wr_cb(cuint addr, uint data)
{
    #ifdef USR_CWR_SYSTEMC
    cwmem.put(data, addr&0xFFFF);
    #else
    array[addr&0xFFFF] = data;
    #endif
}

/// read callback function of CoWare
/// @return read data
Chsif020_regif::uint Chsif020_regif::rd_cb(cuint addr)
{
    #ifdef USR_CWR_SYSTEMC
    return cwmem.get(addr&0xFFFF);
    #else
    return array[addr&0xFFFF];
    #endif
}

/// print message function
/// @return none
void Chsif020_regif::_re_printf(std::string group, const char *message, ...)
{
    // message group check
    if (group == "DumpRegMsg") {
        group = "info";
    } else {
        #ifndef REGIF_SC_REPORT
        if (mMessageLevel[group] == false) return;
        #endif//REGIF_SC_REPORT
    }

    if (message == NULL) return;

    // print header
    #ifndef REGIF_NOT_USE_SYSTEMC
    std::stringstream t_stream;
    std::string cur_time;

    double tu_value = 0;
    std::string tu_name = "";
    if (sc_get_time_resolution() < sc_time(1, SC_PS)) {
        tu_value = 1000000000000000LL;
        tu_name = " fs";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_NS)) {
        tu_value = 1000000000000LL;
        tu_name = " ps";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_US)) {
        tu_value = 1000000000;
        tu_name = " ns";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_MS)) {
        tu_value = 1000000;
        tu_name = " us";
    }
    else if (sc_get_time_resolution() < sc_time(1, SC_SEC)) {
        tu_value = 1000;
        tu_name = " ms";
    }
    else {
        tu_value = 1;
        tu_name = " s";
    }
    t_stream << sc_time_stamp().value() * (uint64) (sc_get_time_resolution().to_seconds() * tu_value) << tu_name;

    cur_time = t_stream.str();
    #else
    std::string cur_time = "";
    #endif

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    // color setting
    //
    // severity color       color Linux       Windows
    // fatal    RED         RED   \033[0;31m  FOREGROUND_RED
    // error    RED         BLUE  \033[0;34m  FOREGROUND_BLUE
    // warning  RED
    // info     BLUE
    #ifdef _WIN32
    HANDLE hStdout;
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    if (group == "fatal" || group == "error" || group == "warning") {
        SetConsoleTextAttribute(hStdout, FOREGROUND_RED);
    }
    else if (group == "info" ){
        SetConsoleTextAttribute(hStdout, FOREGROUND_BLUE);
    }
    #else
    if (group == "fatal" || group == "error" || group == "warning") {
        printf("\033[0;31m");
    }
    else if (group == "info" ){
        printf("\033[0;34m");
    }
    #endif
    #endif //MSG_COLOR
    printf("%8s [%20s] (%10s) ", group.c_str(), cur_time.c_str(), mInstName.c_str());
    #endif//REGIF_SC_REPORT

    // print body
    va_list argptr;
    va_start(argptr, message);
    if (argptr == NULL) return;
    #ifdef REGIF_SC_REPORT
    char str[1024];
    sprintf(str, "[%20s] ", cur_time.c_str());
    vsprintf(str+23, message, argptr);
    if (group == "fatal") {
        SC_REPORT_FATAL(mInstName.c_str(), str);
    }
    else if (group == "error") {
        SC_REPORT_ERROR(mInstName.c_str(), str);
    }
    else if (group == "warning") {
        SC_REPORT_WARNING(mInstName.c_str(), str);
    }
    else if (group == "info") {
        SC_REPORT_INFO(mInstName.c_str(), str);
    }
    #else //REGIF_SC_REPORT
    vprintf(message, argptr);
    #endif//REGIF_SC_REPORT

    #ifndef REGIF_SC_REPORT
    #ifdef DumpFileNameLineNum
    // print footer
    if (group == "fatal" || group == "error") {
        printf(" [%s:%d]\n", mFileName.c_str(), mLineNum);
    }
    #endif//DumpFileNameLineNum
    #endif//REGIF_SC_REPORT
    va_end(argptr);

    #ifndef REGIF_SC_REPORT
    #ifdef MSG_COLOR
    #ifdef _WIN32
    SetConsoleTextAttribute(hStdout, csbi.wAttributes);
    #else
    printf("\033[m");
    #endif
    #endif //MSG_COLOR
    #endif//REGIF_SC_REPORT

    fflush(stdout);
    fflush(stderr);

    if (group == "fatal") {
        exit(1);
    }
}

/// Get file name and line number
/// @return none
void Chsif020_regif::get_fileline(std::string filename, int line_number)
{
    mFileName = filename;
    mLineNum  = line_number;
}

/// API for instance registration
/// @return none
void Chsif020_regif::set_instance_name(std::string InstName)
{
    mInstName = InstName;
}

/// Method to change value of mIsReset
/// @return none
void Chsif020_regif::EnableReset(const bool is_active)
{
    // update register IF class's reset status
    mIsReset = is_active;

    // update re_register's reset status
    for (uint i = 0; i < mTotalRegNum; i++) {
        mRegArray[i]->my_p->EnableReset(is_active);
        if (is_active) {
            re_printf("info", "Initialize %s (%08x)\n", mRegArray[i]->my_p->name().c_str(), (uint)(*mRegArray[i]->my_p));
        }
    }

    if(is_active) {
        InitLocalVal(); // Initialize local variable
    }
}

#ifdef USR_CWR_SYSTEMC
uint Chsif020_regif::cw_rd_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    memset(ptr,0,sizeof(uint));
    reg_rd_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}

uint Chsif020_regif::cw_wr_cb(tlm::tlm_generic_payload& trans, int tag)
{
    unsigned char* ptr = (unsigned char*)trans.get_data_ptr();
    reg_wr_dbg((cuint)tag, ptr, sizeof(uint));
    return sizeof(uint);
}
void Chsif020_regif::cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset)
{
    reg = new scml2::reg<uint>(reg_name, cwmem, offset/sizeof(uint));
    scml2::set_debug_write_callback(*reg,SCML2_CALLBACK(cw_wr_cb),offset);
    scml2::set_debug_read_callback(*reg,SCML2_CALLBACK(cw_rd_cb),offset);
}
#endif
