// -----------------------------------------------------------------------------
// $Id$
//
// Copyright(c) 2010-2013 Renesas Electronics Corporation
// Copyright(c) 2010-2013 Renesas Design Vietnam Co., Ltd.
// RENESAS ELECTRONICS CONFIDENTIAL AND PROPRIETARY.
// This program must be used solely for the purpose for which
// it was furnished by Renesas Electronics Corporation. No part of this
// program may be reproduced or disclosed to others, in any
// form, without the prior written permission of Renesas Electronics
// Corporation.
// -----------------------------------------------------------------------------
// This file is generated by Register I/F generator
//    gen_regif.py 1.9 2013/12/04 09:51:36 sontran
//    gen_regif_class.py 1.59 2014/05/19 02:28:17 sontran
//    regif_h.skl 1.29 2014/05/09 02:57:13 sontran
//
// Input file : ecc_regif.txt
////////////////////////////////////////////////////////////////////////////////
//  %MODULE ECC
//     #              name     offset_size
//     %%REG_INSTANCE reg_def  6
// 
// %REG_CHANNEL reg_def
//     %%TITLE   name       reg_name    wsize     rsize     length   offset  factor_start  factor_end  access   init   support   callback
//     %%REG     EC710CTL   EC710CTL    32|16|8   8|16|32   32       0x00         -            -       R|W      0x10   TRUE      -
//     %%REG     EC710TMC   EC710TMC    32|16|8   8|16|32   16       0x04         -            -       R|W      0      TRUE      -
//     %%REG     EC710TRC   EC710TRC    32        8|16|32   32       0x08         -            -       R|W      0      TRUE      -
//     %%REG     EC710TED   EC710TED    32        8|16|32   32       0x0C         -            -       R|W      0      TRUE      -
//     %%REG     EC710EAD   EC710EAD    32        8|16|32   32       0x10         0            7       R        0      TRUE      -
// 
// %REG_NAME EC710CTL
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECDEDF7        31     31     0     R       TRUE     -
//     %%BIT    ECSEDF7        30     30     0     R       TRUE     -
//     %%BIT    ECDEDF6        29     29     0     R       TRUE     -
//     %%BIT    ECSEDF6        28     28     0     R       TRUE     -
//     %%BIT    ECDEDF5        27     27     0     R       TRUE     -
//     %%BIT    ECSEDF5        26     26     0     R       TRUE     -
//     %%BIT    ECDEDF4        25     25     0     R       TRUE     -
//     %%BIT    ECSEDF4        24     24     0     R       TRUE     -
//     %%BIT    ECDEDF3        23     23     0     R       TRUE     -
//     %%BIT    ECSEDF3        22     22     0     R       TRUE     -
//     %%BIT    ECDEDF2        21     21     0     R       TRUE     -
//     %%BIT    ECSEDF2        20     20     0     R       TRUE     -
//     %%BIT    ECDEDF1        19     19     0     R       TRUE     -
//     %%BIT    ECSEDF1        18     18     0     R       TRUE     -
//     %%BIT    ECDEDF0        17     17     0     R       TRUE     -
//     %%BIT    ECSEDF0        16     16     0     R       TRUE     -
//     %%BIT    EMCA1          15     15     0     R|W     TRUE     R|W
//     %%BIT    EMCA0          14     14     0     R|W     TRUE     -
//     %%BIT    ECOVFF         11     11     0     R       TRUE     -
//     %%BIT    ECER2C         10     10     0     R|W     TRUE     -
//     %%BIT    ECER1C         9      9      0     R|W     TRUE     -
//     %%BIT    ECTHM          7      7      0     R|W     FALSE    -
//     %%BIT    ECERVF         6      6      0     R|W     TRUE     -
//     %%BIT    EC1ECP         5      5      0     R|W     FALSE    -
//     %%BIT    EC2EDIC        4      4      1     R|W     TRUE     -
//     %%BIT    EC1EDIC        3      3      0     R|W     TRUE     -
//     %%BIT    ECER2F         2      2      0     R       TRUE     -
//     %%BIT    ECER1F         1      1      0     R       TRUE     -
//     %%BIT    ECEMF          0      0      0     R|W     FALSE    -
// 
// %REG_NAME EC710TMC
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ETMA1          15     15     0     R|W     TRUE     R|W
//     %%BIT    ETMA0          14     14     0     R|W     TRUE     -
//     %%BIT    ECTMCE         7      7      0     R|W     TRUE     -
//     %%BIT    ECTRRS         4      4      0     R|W     TRUE     -
//     %%BIT    ECREOS         3      3      0     R|W     FALSE    -
//     %%BIT    ECENS          2      2      0     R|W     FALSE    -
//     %%BIT    ECDCS          1      1      0     R|W     FALSE    -
//     %%BIT    ECREIS         0      0      0     R|W     FALSE    -
// 
// %REG_NAME EC710TED
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECEDB          31     0      0     R|W     TRUE     R|W
// 
// %REG_NAME EC710TRC
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECSYND         30     24     0     R       TRUE     -
//     %%BIT    ECHORD         22     16     0     R       TRUE     -
//     %%BIT    ECECRD         14     8      0     R       TRUE     -
//     %%BIT    ECERDB         6      0      0     R|W     TRUE     R|W
// 
// %REG_NAME EC710EAD
//     %%TITLE  name           upper  lower  init  access  support  callback
//     %%BIT    ECEAD          30     0      0     R       TRUE     -
////////////////////////////////////////////////////////////////////////////////
/// @file ecc_regif.h
/// @brief Register IF class of model ECC
/// $Id$
/// $Date$
/// $Revison$
/// $Author$
////////////////////////////////////////////////////////////////////////////////
#ifndef __ECC_REGIF_H__
#define __ECC_REGIF_H__
#include <string>
#include <map>
#include <list>
#include <cstdarg>
#include <cerrno>
#include <iomanip>
#include <sstream>
#ifdef REGIF_NOT_USE_SYSTEMC
#include <cassert>
#else
#include "systemc.h"
#endif
#include "re_register.h"
#ifdef CWR_SYSTEMC
#include "scml.h"
#endif

/// Register IF class of ECC model
class Cecc_regif
: public vpcl::reg_super
{
protected:
    typedef const unsigned int cuint;
    typedef unsigned int uint;

    enum eRegGroup {
        emNum_of_gr
    }; ///< Enumeration for register group index
    enum eRegIndex {
        emNUM_EC710EAD = 8
    }; ///< Enumeration for register factor index

    struct RegCBstr {
        uint channel;
        bool is_wr;
        uint size;
        uint pre_data;
        uint data;
        RegCBstr (uint channel, bool is_wr, uint size, uint pre_data, uint data)
        {
            this-> channel = channel;
            this-> is_wr   = is_wr;
            this-> size    = size;
            this-> pre_data= pre_data;
            this-> data    = data;
        }
    };
    struct SRegList {
        vpcl::re_register *my_p;
        SRegList *prev;
        uint channel;
        uint length;
        std::string wacc_size;
        std::string racc_size;
        bool block;
        SRegList( vpcl::re_register *_my_p, SRegList *_prev, uint _channel, uint _length, std::string _wacc_size, std::string _racc_size, bool _block = false) {
            this->my_p = NULL;
            if (_my_p != NULL) {
                this->my_p = _my_p;
            }
            this->prev = NULL;
            if (_prev != NULL) {
                this->prev = _prev;
            }
            this->channel = _channel;
            this->length  = _length;
            this->wacc_size = _wacc_size;
            this->racc_size = _racc_size;
            this->block = _block;
        }
    } *mRegList, *mCurReg, **mRegArray;

    uint *mRegMap;
    uint mTotalRegNum;

public:
    Cecc_regif(std::string name, uint buswidth);
    ~Cecc_regif();

protected:
    vpcl::re_register *EC710CTL;
    vpcl::re_register *EC710TMC;
    vpcl::re_register *EC710TRC;
    vpcl::re_register *EC710TED;
    vpcl::re_register *EC710EAD[8];

    #ifdef CWR_SYSTEMC
    scml2::memory<uint> cwmem;
    scml2::reg<uint>      *CW_EC710TMC_;
    scml2::reg<uint>      *CW_EC710CTL;
    scml2::bitfield<uint> *CW_EC710TMC;
    scml2::reg<uint>      *CW_EC710TRC;
    scml2::reg<uint>      *CW_EC710TED;
    scml2::reg<uint>      *CW_EC710EAD[8];
    #endif

    uint EC710CTL_ECDEDF7;
    uint EC710CTL_ECSEDF7;
    uint EC710CTL_ECDEDF6;
    uint EC710CTL_ECSEDF6;
    uint EC710CTL_ECDEDF5;
    uint EC710CTL_ECSEDF5;
    uint EC710CTL_ECDEDF4;
    uint EC710CTL_ECSEDF4;
    uint EC710CTL_ECDEDF3;
    uint EC710CTL_ECSEDF3;
    uint EC710CTL_ECDEDF2;
    uint EC710CTL_ECSEDF2;
    uint EC710CTL_ECDEDF1;
    uint EC710CTL_ECSEDF1;
    uint EC710CTL_ECDEDF0;
    uint EC710CTL_ECSEDF0;
    uint EC710CTL_EMCA1;
    uint EC710CTL_EMCA0;
    uint EC710CTL_ECOVFF;
    uint EC710CTL_ECER2C;
    uint EC710CTL_ECER1C;
    uint EC710CTL_ECTHM;
    uint EC710CTL_ECERVF;
    uint EC710CTL_EC1ECP;
    uint EC710CTL_EC2EDIC;
    uint EC710CTL_EC1EDIC;
    uint EC710CTL_ECER2F;
    uint EC710CTL_ECER1F;
    uint EC710CTL_ECEMF;
    uint EC710TMC_ETMA1;
    uint EC710TMC_ETMA0;
    uint EC710TMC_ECTMCE;
    uint EC710TMC_ECTRRS;
    uint EC710TMC_ECREOS;
    uint EC710TMC_ECENS;
    uint EC710TMC_ECDCS;
    uint EC710TMC_ECREIS;
    uint EC710TRC_ECSYND;
    uint EC710TRC_ECHORD;
    uint EC710TRC_ECECRD;
    uint EC710TRC_ECERDB;
    uint EC710TED_ECEDB;
    uint EC710EAD_ECEAD[8];

    void EnableReset(const bool is_active);
    uint bit_select(cuint val, cuint start, cuint end);
    bool reg_wr(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd(cuint addr, unsigned char *p_data, cuint size);
    bool reg_wr_dbg(cuint addr, const unsigned char *p_data, cuint size);
    bool reg_rd_dbg(cuint addr, unsigned char *p_data, cuint size);
    std::string reg_handle_command(const std::vector<std::string>& args);
    int get_reg_index(cuint addr);
    vpcl::re_register *first_reg_object();
    vpcl::re_register *next_reg_object();

    void wr_cb(cuint addr, uint data);
    uint rd_cb(cuint addr);

    virtual void cb_EC710CTL_EMCA1(RegCBstr str) = 0;
    virtual void cb_EC710TMC_ETMA1(RegCBstr str) = 0;
    virtual void cb_EC710TRC_ECERDB(RegCBstr str) = 0;
    virtual void cb_EC710TED_ECEDB(RegCBstr str) = 0;

    void set_instance_name(std::string InstName);

    uint mBusByteWidth;
    uint mBusWidth;
    bool mIsReset;
    bool mDumpRegisterRW;
    std::map<std::string, bool> mMessageLevel;
    std::map<std::string, std::map<std::string, void (Cecc_regif::*) (RegCBstr)> > mWrCbAPI;
    std::map<std::string, std::map<std::string, void (Cecc_regif::*) (RegCBstr)> > mRdCbAPI;
    std::string mFileName;
    std::string mInstName;
    int mLineNum;

    bool reg_wr_process(cuint addr, const unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_rd_process(cuint addr, unsigned char *p_data, cuint size, bool IsDbgFunc);
    bool reg_wr_func(cuint addr, const unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    bool reg_rd_func(cuint addr, unsigned char *p_data, cuint size, cuint reg_index, bool IsDbgFunc);
    void _re_printf(const std::string msg_level, const char *format, ...);
    void get_fileline(std::string filename, int line_number);
    void CommandInit();
    bool ChkSize(std::string expect_size, cuint detect_size, cuint addr);
    std::vector<std::string> Str2Vec(std::string str, const char sep);
    std::string Num2HexStr(cuint num, cuint num_length, bool space_strip);
    void DumpRegMsg(const std::string operation, const std::string RegName, const std::string BitName, cuint size, cuint addr, cuint wr_data, cuint pre_data, cuint data, cuint reg_length);
    std::string AccessRegCommand(const std::vector<std::string>& args, vpcl::re_register *Register, bool &BlockReg);
    void InitLocalVal();
    void UpdateLocalVal(cuint addr);
    void UpdateRegVal(cuint addr);

    #ifdef CWR_SYSTEMC
    uint cw_rd_cb(tlm::tlm_generic_payload& trans, int tag);
    uint cw_wr_cb(tlm::tlm_generic_payload& trans, int tag);
    void cw_instantiate_reg(scml2::reg<uint> * reg, std::string reg_name, int offset);
    #endif
};
#endif //__ECC_REG_DEF_H__
